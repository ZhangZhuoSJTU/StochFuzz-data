#===================================
.intel_syntax noprefix
#===================================

nop
nop
nop
nop
nop
nop
nop
nop

#===================================
.section .interp ,"a",@progbits
.align 16
#===================================

          .byte 0x2f
          .byte 0x6c
          .byte 0x69
          .byte 0x62
          .byte 0x36
          .byte 0x34
          .byte 0x2f
          .byte 0x6c
          .byte 0x64
          .byte 0x2d
          .byte 0x6c
          .byte 0x69
          .byte 0x6e
          .byte 0x75
          .byte 0x78
          .byte 0x2d
          .byte 0x78
          .byte 0x38
          .byte 0x36
          .byte 0x2d
          .byte 0x36
          .byte 0x34
          .byte 0x2e
          .byte 0x73
          .byte 0x6f
          .byte 0x2e
          .byte 0x32
          .byte 0x0
#===================================
# end section .interp
#===================================

#===================================
.text
.align 16
#===================================

#-----------------------------------
.align 16
.globl main
.type main, @notype
#-----------------------------------
main:

            push R12
            push RBP
            push RBX
.L_400a94:

            mov RDI,QWORD PTR [RSI+8]
            lea RSI,QWORD PTR [RIP+.L_4011b8]
            call fopen@PLT

            test RAX,RAX
            je .L_400b18

            xor ESI,ESI
            mov EDX,2
            mov RBX,RAX
            mov RDI,RAX
            call fseek@PLT

            mov RDI,RBX
            call ftell@PLT

            mov RDI,RBX
            mov RBP,RAX
            call rewind@PLT

            mov RDI,RBP
            call malloc@PLT

            test RAX,RAX
            mov R12,RAX
            je .L_400b38

            mov RCX,RBX
            mov RDX,RBP
            mov ESI,1
            mov RDI,RAX
            call fread@PLT

            cmp RBP,RAX
            jne .L_400b22

            mov RSI,RBP
            mov RDI,R12
            call .L_400c40

            mov RDI,R12
            call free@PLT

            mov RDI,RBX
            call fclose@PLT

            pop RBX
.L_400b12:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_400b18:

            mov EDI,1
            call exit@PLT
.L_400b22:

            lea RDI,QWORD PTR [RIP+.L_4011c9]
            call puts@PLT

            mov EDI,3
            call exit@PLT
.L_400b38:

            lea RDI,QWORD PTR [RIP+.L_4011bb]
            call puts@PLT

            mov EDI,2
            call exit@PLT
.L_400b4e:

            nop
            nop
.L_400b80:

            ret 
.L_400b82:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_400b90:

            push RBP
            mov EAX,OFFSET .L_6020c8
            cmp RAX,OFFSET .L_6020c8
            mov RBP,RSP
            je .L_400bb8

            mov EAX,0
            test RAX,RAX
            je .L_400bb8

            pop RBP
            mov EDI,OFFSET .L_6020c8
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400bb8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400bc0:

            mov ESI,OFFSET .L_6020c8
            push RBP
            sub RSI,OFFSET .L_6020c8
            mov RBP,RSP
            sar RSI,3
            mov RAX,RSI
            shr RAX,63
            add RSI,RAX
            sar RSI,1
            je .L_400bf8

            mov EAX,0
            test RAX,RAX
            je .L_400bf8

            pop RBP
            mov EDI,OFFSET .L_6020c8
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_400bf8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_400c30:

            push RBP
            mov RBP,RSP
            pop RBP
            jmp .L_400bc0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_400c40:

            push RBP
            mov RBP,RSP
            push R14
            push R13
            push R12
            push RBX
.L_400c4b:

            mov R12,RDI
            mov RBX,RSI
            sub RSP,64
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RBP-40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RBP-80]
            mov R14,RAX
            add RAX,16
            mov QWORD PTR [RBP-80],RAX
            mov RAX,RDI
            add RAX,RSI
            je .L_400c84

            test RDI,RDI
            je .L_400d72
.L_400c84:

            cmp RBX,15
            mov QWORD PTR [RBP-88],RBX
            ja .L_400d20

            cmp RBX,1
            jne .L_400d60

            movzx EAX,BYTE PTR [R12]
            lea R13,QWORD PTR [RBP-88]
            mov BYTE PTR [RBP-64],AL
            mov RAX,R14
            add RAX,16
.L_400caf:

            mov QWORD PTR [RBP-72],RBX
            mov BYTE PTR [RAX+RBX*1],0
            lea RAX,QWORD PTR [RBP-92]
            mov RDI,QWORD PTR [RBP-80]
            push 0
            mov R9,R13
            push RAX
            xor R8D,R8D
            mov ECX,4660
            mov EDX,1
            mov ESI,1
.L_400cd7:

            call .L_400db0
.L_400cdc:

            pop RAX
            pop RDX
            mov RDI,QWORD PTR [RBP-88]
            call free@PLT

            mov RDI,QWORD PTR [RBP-80]
            mov RAX,R14
            add RAX,16
            cmp RDI,RAX
            je .L_400cfc

            call _ZdlPv@PLT
.L_400cfc:

            xor EAX,EAX
            mov RCX,QWORD PTR [RBP-40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_400d7e

            lea RSP,QWORD PTR [RBP-32]
            pop RBX
            pop R12
            pop R13
            pop R14
            pop RBP
.L_400d19:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400d20:

            lea R13,QWORD PTR [RBP-88]
            xor EDX,EDX
            mov RDI,R14
            mov RSI,R13
.L_400d2c:

            call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT

            mov RDX,QWORD PTR [RBP-88]
            mov QWORD PTR [RBP-80],RAX
            mov QWORD PTR [RBP-64],RDX
.L_400d3d:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,RAX
            call memcpy@PLT

            mov RBX,QWORD PTR [RBP-88]
            mov RAX,QWORD PTR [RBP-80]
            jmp .L_400caf
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_400d60:

            test RBX,RBX
            jne .L_400d83

            mov RAX,QWORD PTR [RBP-80]
            lea R13,QWORD PTR [RBP-88]
            jmp .L_400caf
.L_400d72:

            lea RDI,QWORD PTR [RIP+.L_401188]
            call _ZSt19__throw_logic_errorPKc@PLT
.L_400d7e:

            call __stack_chk_fail@PLT
.L_400d83:

            mov RAX,R14
            lea R13,QWORD PTR [RBP-88]
            add RAX,16
            jmp .L_400d3d
.L_400d90:

            mov RDI,QWORD PTR [RBP-80]
            mov RBX,RAX
            mov RAX,R14
            add RAX,16
            cmp RDI,RAX
            je .L_400da8

            call _ZdlPv@PLT
.L_400da8:

            mov RDI,RBX
            call _Unwind_Resume@PLT
.L_400db0:

            push R15
            push R14
            mov R15D,R8D
            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,ESI
            mov R14D,ECX
            sub RSP,24
.L_400dcd:

            mov R8,QWORD PTR [RSP+80]
            mov EBX,DWORD PTR [RSP+88]
            mov DWORD PTR [R8],0
            mov QWORD PTR [R9],0
            movzx EDX,BYTE PTR [RDI]
            test DL,DL
            je .L_401027

            mov RAX,RDI
            mov EDI,1
            jmp .L_400e15
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_400e00:

            mov EDX,ECX
            mov RCX,RAX
.L_400e05:

            test DL,DL
            lea ESI,DWORD PTR [RDI+1]
            mov RAX,R10
            je .L_401031

            mov EDI,ESI
.L_400e15:

            cmp DL,92
            movzx ECX,BYTE PTR [RAX+1]
            lea R10,QWORD PTR [RAX+1]
            jne .L_400e00

            test CL,CL
            je .L_400e38

            mov RCX,R10
            movzx EDX,BYTE PTR [RAX+2]
            lea R10,QWORD PTR [RAX+2]
            jmp .L_400e05
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400e38:

            lea ESI,DWORD PTR [RDI+1]
.L_400e3b:

            add EDI,2
            cmp BYTE PTR [RAX],46
            cmovne ESI,EDI
            cmp ESI,255
            lea EDI,DWORD PTR [RSI+16]
            jg .L_400f38
.L_400e53:

            lea EAX,DWORD PTR [RDI+11]
            test EBX,EBX
            mov QWORD PTR [RSP+8],R9
            cmovne EDI,EAX
            mov RAX,OFFSET .L_6020c0
            mov DWORD PTR [R8],EDI
            movsxd RDI,EDI
            call QWORD PTR [RAX]

            mov R9,QWORD PTR [RSP+8]
            mov RDX,RAX
            test RDX,RDX
            mov QWORD PTR [R9],RAX
            mov EAX,15
            je .L_400f3d

            mov EAX,R14D
            test R15D,R15D
            mov QWORD PTR [RDX],0
            mov DWORD PTR [RDX+8],0
            mov BYTE PTR [RDX],AH
            mov BYTE PTR [RDX+1],R14B
            je .L_400ea8

            or BYTE PTR [RDX+2],1
.L_400ea8:

            mov EDI,256
            test EBX,EBX
            mov WORD PTR [RDX+4],DI
            je .L_400ebe

            mov ESI,256
            mov WORD PTR [RDX+10],SI
.L_400ebe:

            lea RDI,QWORD PTR [RIP+.L_401039]
            mov RSI,RBP
            mov ECX,2

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            lea RSI,QWORD PTR [RDX+12]
            seta AL
            sbb AL,0
            movsx EAX,AL
            cmp EAX,1
            adc RBP,0
            movzx EAX,BYTE PTR [RBP]
            test AL,AL
            je .L_400fd4

            nop
            nop
.L_400ef0:

            cmp AL,46
            je .L_400f38

            test AL,AL
            je .L_401020

            mov RDX,RBP
            xor ECX,ECX
            jmp .L_400f18
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400f08:

            mov EAX,EDI
.L_400f0a:

            add ECX,1
            test AL,AL
            mov RDX,R8
            je .L_400f53

            cmp AL,46
            je .L_400f53
.L_400f18:

            cmp AL,92
            movzx EDI,BYTE PTR [RDX+1]
            lea R8,QWORD PTR [RDX+1]
            jne .L_400f08

            test DIL,DIL
            je .L_400f50

            movzx EAX,BYTE PTR [RDX+2]
            lea R8,QWORD PTR [RDX+2]
            jmp .L_400f0a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400f38:

            mov EAX,8
.L_400f3d:

            add RSP,24
.L_400f41:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_400f50:

            add ECX,1
.L_400f53:

            cmp ECX,63
            jg .L_400f38
.L_400f58:

            mov BYTE PTR [RSI],CL
            movzx ECX,BYTE PTR [RBP]
            lea RDX,QWORD PTR [RSI+1]
            mov RAX,RBP
            mov RSI,RDX
            cmp CL,46
            je .L_400fc0

            test CL,CL
            jne .L_400f98

            jmp .L_400fc0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_400f78:

            movzx EDX,BYTE PTR [RAX]
            mov RCX,RDI
            add RSI,1
            mov RDI,RAX
            mov RAX,RCX
            mov BYTE PTR [RSI-1],DL
            movzx ECX,BYTE PTR [RDI+1]
            test CL,CL
            je .L_400fc0
.L_400f93:

            cmp CL,46
            je .L_400fc0
.L_400f98:

            cmp CL,92
            lea RDI,QWORD PTR [RAX+1]
            jne .L_400f78

            movzx EDX,BYTE PTR [RAX+1]
            test DL,DL
            je .L_400f78

            add RSI,1
            mov BYTE PTR [RSI-1],DL
            movzx ECX,BYTE PTR [RDI+1]
            add RAX,2
            test CL,CL
            jne .L_400f93

            nop
            nop
            nop
            nop
.L_400fc0:

            test CL,CL
            je .L_400fd4

            lea RBP,QWORD PTR [RAX+1]
            movzx EAX,BYTE PTR [RAX+1]
            test AL,AL
            jne .L_400ef0
.L_400fd4:

            mov EAX,R13D
            mov BYTE PTR [RSI],0
            mov BYTE PTR [RSI+2],R13B
            mov BYTE PTR [RSI+1],AH
            mov EAX,R12D
            mov BYTE PTR [RSI+4],R12B
            mov BYTE PTR [RSI+3],AH
            xor EAX,EAX
            test EBX,EBX
            je .L_400f3d

            xor EDX,EDX
            mov ECX,10496
            mov QWORD PTR [RSI+5],0
            mov WORD PTR [RSI+13],DX
            mov BYTE PTR [RSI+15],0
            mov WORD PTR [RSI+6],CX
            mov BYTE PTR [RSI+8],BH
            mov BYTE PTR [RSI+9],BL
            jmp .L_400f3d

            nop
            nop
            nop
            nop
            nop
.L_401020:

            xor ECX,ECX
            jmp .L_400f58
.L_401027:

            mov EDI,17
            jmp .L_400e53
.L_401031:

            mov RAX,RCX
            jmp .L_400e3b
.L_401039:
          .byte 0x2e
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_401040:

            mov EDX,DWORD PTR [RIP+.L_6020cc]
            lea EAX,DWORD PTR [RDX+1]
            test EDX,EDX
            mov EDX,1
            cmove EAX,EDX
            mov DWORD PTR [RIP+.L_6020cc],EAX
            xor EAX,EAX
            ret 
.L_40105c:

            nop
            nop
            nop
            nop
.L_401060:

            test RSI,RSI
            je .L_40106c

            mov QWORD PTR [RIP+.L_6020c0],RSI
.L_40106c:

            test RCX,RCX
            je .L_401078

            mov QWORD PTR [RIP+.L_6020b8],RCX
.L_401078:

            test RDX,RDX
            je .L_401084

            mov QWORD PTR [RIP+.L_6020b0],RDX
.L_401084:

            mov EDX,DWORD PTR [RIP+.L_6020cc]
            lea EAX,DWORD PTR [RDX+1]
            test EDX,EDX
            mov EDX,1
            cmove EAX,EDX
            mov DWORD PTR [RIP+.L_6020cc],EAX
            xor EAX,EAX
            ret 
.L_4010a0:

            mov EAX,DWORD PTR [RIP+.L_6020cc]
            test EAX,EAX
            je .L_4010e1

            sub EAX,1
            test EAX,EAX
            mov DWORD PTR [RIP+.L_6020cc],EAX
            jne .L_4010e1

            mov RAX,QWORD PTR [RIP+malloc@GOTPCREL]
            mov QWORD PTR [RIP+.L_6020c0],RAX
            mov RAX,QWORD PTR [RIP+realloc@GOTPCREL]
            mov QWORD PTR [RIP+.L_6020b8],RAX
            mov RAX,QWORD PTR [RIP+free@GOTPCREL]
            mov QWORD PTR [RIP+.L_6020b0],RAX
.L_4010e1:

            ret 
.L_4010e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4010f0:

            xor EAX,EAX
            ret 
.L_4010f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401100:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            lea R12,QWORD PTR [RIP+.L_601dd8]
            push RBP
            lea RBP,QWORD PTR [RIP+.L_601de0]
            push RBX
            mov R13D,EDI
            mov R14,RSI
            sub RBP,R12
            sub RSP,8
            sar RBP,3
            call 1840

            test RBP,RBP
            je .L_401156

            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401140:

            mov RDX,R15
            mov RSI,R14
            mov EDI,R13D
            call QWORD PTR [R12+RBX*8]

            add RBX,1
            cmp RBP,RBX
            jne .L_401140
.L_401156:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_401165:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401170:

            ret 
.L_401172:
#===================================
# end section .text
#===================================

#===================================
.section .rodata ,"a",@progbits
.align 16
#===================================

          .byte 0x1
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401188:
          .string "basic_string::_M_construct null not valid"
          .zero 6
.L_4011b8:
          .string "rb"
.L_4011bb:
          .string "malloc error!"
.L_4011c9:
          .string "read error!"
#===================================
# end section .rodata
#===================================

#===================================
.section .gcc_except_table ,"a",@progbits
.align 16
#===================================

.L_401450:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_401460-.L_401454
.L_401454:
          .uleb128 .L_400cd7-.L_400c40
          .uleb128 .L_400cdc-.L_400cd7
          .uleb128 .L_400d90-.L_400c40
          .zero 1
          .uleb128 .L_400d2c-.L_400c40
          .uleb128 .L_400db0-.L_400d2c
          .zero 2
.L_401460:
#===================================
# end section .gcc_except_table
#===================================

#===================================
.section .init_array ,"wa"
.align 8
#===================================

.L_601dd8:
          .quad .L_400c30
#===================================
# end section .init_array
#===================================

#===================================
.section .fini_array ,"wa"
.align 8
#===================================

.L_601de0:
#===================================
# end section .fini_array
#===================================

#===================================
.data
.align 8
#===================================

          .zero 16
.L_6020a8:
          .quad __gxx_personality_v0
.L_6020b0:
          .quad free
.L_6020b8:
          .quad realloc
.L_6020c0:
          .quad malloc
#===================================
# end section .data
#===================================

#===================================
.bss
.align 8
#===================================

.L_6020c8:
          .zero 4
.L_6020cc:
          .zero 4
#===================================
# end section .bss
#===================================
