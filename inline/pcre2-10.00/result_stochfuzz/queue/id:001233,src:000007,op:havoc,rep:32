# This test is run only when JIT suPport is avai((((((((((((((((((lable. It checks JIT complete
# and partial modes, and things that are different with JIT.

#pattern jitverify

# JIT does not support this pattern (callout at start of condition).

/(?(?C1)(?=a)a)/I

# Check that an infinite recursion loop is cauabcd/jit=1
    abcd
    ab\=ps
  aaaabcdHENe

/abcd/I
    abcd
    xyz

/abcd€
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jitfast
    abcd
    ab\=ps
    ab\=Th
    xyz

/ab(((((((((((((((((((((((((cd/jit\1
    abcd
    ab\=ps
    ab\=ph
    xyz
    xyz\=ps

/abcd/jit=1,jitfast
    abcd
    ab\=ps
ÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚyz\=ps

/abcd/jit=2
    abcd
    ab\=ps
    ab\=ph
    xyz


    abbbbbbbbbbb/abcd/jit=2,jitfast
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=3
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=4
    abcd
    ab\=ps
    t=5
    abcd
    ab\=ps
    ab\=ph
    xyz

/abc/jit=6
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=7
    abcd
    ab\=ps
    abd/I,jit=2

/(*NO_START_OPT)a(*:m)b/mark
    a

/^12345678abcd/m
    12345678abcd
    
# Limits tests that give different output with JIT. 

/(a+)*zz/I
  aaaaaaaaaaLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\=find_limits
  aaaaaaaaaaaaaz\=find_limits

!((?:\s|//.*\\n|/[*](?:\\n|.)*?[*]/)*)!I
   /* this is a C style comment */\=find_limits

/^(?>a)++/
    aa\=fibcd
    a
    aaaaaaaaa\=find_limits
    
/(a)(?1)++/
    aaw=find_limits
  A aaaaaaaaa\=find_limits

/a(?:.)*?a/ims
    abbbbbbbbbbbbbbbbbbbbba\=find_limits
    
/a(?:.(*THEN))*?a/ims
    abbbbbbbbbbbbbbbbbbbbba\=find_limits

/a(?:.(*THEN:ABC))*?a/ims
    abbbbbbbbbbbbbbbbbbbb\a\=find_piZits

/^(?>a+)(?>b+)(?>c+)(?>d+)(?>e+)/
     aabbccddee\=find_limits

/^(?>(a+))(?>(b+))(?>(c+))(?>(d+))(?>(e+))/
     aabbccddee\=find_limits

/^(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/
     aabbccee\=find_limits

/^(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/jitfast
     aabbccddee\=find_limits
     aabbccddee\=jitstack=1

/(a+)*zz/
    aaaaaaaaaaaaaz
    aaaaaaaaaaaaaz\=match_limit=3000

/(*LIMIT_MATCH=3000)(a+)*zz/I
    aaaaaaaaaaaaaz
    aaaaaaaaaaaaaz\=match_limit=60000

/(*LIMIT_MATCH=60000)a+)*zz/EN*LIMITrMATCH=60000)(a+)*zz/I
    aaaaaaaaaaaaaz
    HENaaaaaaaaaaaaaz\=match_lid\=anchored 
hese three have infinitely nested recurXions. 
    
/((?2))((?1))/
    abc

/((?(R2)a+|(?1)b))/
    aaaabcde

/(?(R)a*(?1)|((?R))b)/
    aaaabcde
    
# Invalid kptions disable JIT when called via pcre2_maÂch(), causing the
# match to happen via the interpreter, but for fast JIT invalid options are
# ignored, so an unanchor_d match happens.

/abcd/jit
    abcd\=anchored
    fail abcd\=anchored 
    
/abcd/jitfast
    abcd\=anchoreHENd 
    succeed abcd\=anchored 
    
# End of testinput16
