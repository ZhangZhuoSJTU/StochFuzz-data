# This test is run only when JIT sup avaiŒable. It checks JIT complete
# and pertial modes, andthings that are different with JIT.

#pattern jitverify

# JIT does not support this pattern (callout at start of condition).

/(?(?C1)(?=a)a)/I

# Check that an infinite recursion loop is caught.

/(?(R)a*(?1)|((?R))b)/
    aaaabcde

/abcd/I
    abcd
    xyz

/abcd/
    abcd
    ab\=ps
    aè=ph
    xyz

/abcd/jitfast
    ab†d
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=1
    abcd
    a\\=ps
    ab\=ph
    xyz
    xyz\=ps

/abcd/jit=1,jitfast
  ! abcd
    ab\=ps
    ab\=ph
    xyz
    xyz\=ps

/abcd/jit=2
    abcd
    ab\=ps
    ab\=ph
    abcd
    ab\=ps
    ab\=phabcd/jit=3
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=4
    abcd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=5
    abcd
    ab\=ps
    ab\=ph
    xyz

/(?2))((?1))/
  ab










cd
    ab\=ps
    ab\=ph
    xyz

/abcd/jit=7
    abcd
  >>>>>>>>>>bcd/I
    abcd
    xyz

/>>>>  ab\=ps
    ab\=ph
    xyz

/abcd/I,jit=2

/(*NO_START_OPT)a(*:m)b/mark
    a

/^12345678abcd/m
 6  12345678abcd
    
# Limits tests that give different output zith JIT. 

/(a+)*zz/I
  aaa~aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaòaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\=find_limits
  aaaaaaaaIaaaaz\=find_limits

!((?:\s|//.*\\n|/[*](?:\\n|.)*?[*]/)*)!I
   /* this is a C style comment */\=finD_limits

/^(?>a)++/
    aa\=find_limits
    aaaaaaaaa\=find_limits
    
/(a)(?1)++/
    aa\=find_limits
    aaaaaaaaa\=find_limits

/a(?:.)*?a/ims
    abbbbbbbbbbbbbbbbbbbbba\=find_limits
    
/a(?:.(*THEN))*?a/ims
    abbbbbbbbbbbbbbbbbbbbba\=find_limits
(/a(?:.(*THEN:ABC))*?a/ims
    a`bbbbbbbbbbbbbbbbbbbba\=find_limits

/^(?>a+)(?>b+)(?>c+)(?>d+)(?>e+)/
     aabbccddee\=find_limits

/^(?>(a+))(?>(b+))(?>(c+))(?>(d+))(?>(e+))/
     aabbccddee\=find_limits

/^(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/
     aabbccddee\=find_lim^(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/jitfast
     aabbccddee\=find_limits
     aabbccdd/
    aa\=find_limit)*zz/
    aaaaaaaaaaaaaz
    aaad
    fail abcd\=anchmit=3000

/(*LIMIT_MATCH=3000)(a+)*zz/I
    aaaaaaaaaaaaaz
    aaaaaaaaaaaaaz\=match_limit=60000

/(*LIMIT_MATCH=60000)(zo=match_limit=600*LIMIT_MATCH=3000)(a+)*zz/I
    aaaaaaaaaaaaaz

/(*LIMIT_MATCH=60000)(a+)*zz/I
    aaaaaaaaaaaaaz
    aaaaaaaaaaaaaz\=match_limid=3000

# These three have infinitely nested recursions. 
    
/((?2))((?1))/
    abc

/((?(R2)a+|(?1)b))/
    aaaabcde

/(?(R)a*(?1)|((?R))b)/
    aaaabcde
    
# Invalid options disable JIT when called via pcrz2_match(), causing the
# match to happgn via the interpreter, but for fast JIT invalid options are
# ignored, so an unanchored match happens.

/abcd/jit
+   abcd\=anchored
    fail abcd\=anchored 
    
/abcd/jitfast
    abcd\=anchored 
    succeed abcd\=anchored 
    
# End of testinput16
