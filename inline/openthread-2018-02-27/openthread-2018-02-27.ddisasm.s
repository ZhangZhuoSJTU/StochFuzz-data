#===================================
.intel_syntax noprefix
#===================================

nop
nop
nop
nop
nop
nop
nop
nop

#===================================
.section .interp ,"a",@progbits
.align 16
#===================================

          .byte 0x2f
          .byte 0x6c
          .byte 0x69
          .byte 0x62
          .byte 0x36
          .byte 0x34
          .byte 0x2f
          .byte 0x6c
          .byte 0x64
          .byte 0x2d
          .byte 0x6c
          .byte 0x69
          .byte 0x6e
          .byte 0x75
          .byte 0x78
          .byte 0x2d
          .byte 0x78
          .byte 0x38
          .byte 0x36
          .byte 0x2d
          .byte 0x36
          .byte 0x34
          .byte 0x2e
          .byte 0x73
          .byte 0x6f
          .byte 0x2e
          .byte 0x32
          .byte 0x0
#===================================
# end section .interp
#===================================

#===================================
.text
.align 16
#===================================

.L_400f00:

            lea RCX,QWORD PTR [RIP+.L_405140]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b7a]
            sub RSP,8
            mov EDX,350
            call __assert_fail@PLT
.L_400f23:

            nop
.L_400f24:

            lea RCX,QWORD PTR [RIP+.L_408800]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085ac]
            sub RSP,8
            mov EDX,997
            call __assert_fail@PLT
.L_400f47:

            nop
.L_400f48:

            lea RCX,QWORD PTR [RIP+.L_438fe0]
            lea RSI,QWORD PTR [RIP+.L_45fd50-159142]
            lea RDI,QWORD PTR [RIP+.L_438fbb]
            sub RSP,8
            mov EDX,523
            call __assert_fail@PLT
.L_400f6b:

            nop
            nop
            nop
            nop
            nop
#-----------------------------------
.align 16
.globl main
.type main, @notype
#-----------------------------------
main:

            cmp EDI,1
            push R12
            push RBP
            push RBX
.L_400f77:

            jle .L_401001

            mov RDI,QWORD PTR [RSI+8]
            lea RSI,QWORD PTR [RIP+.L_45fd54]
            call fopen@PLT

            test RAX,RAX
            mov RBX,RAX
            je .L_401001

            xor ESI,ESI
            mov EDX,2
            mov RDI,RAX
            call fseek@PLT

            mov RDI,RBX
            call ftell@PLT

            mov RDI,RBX
            mov R12,RAX
            call rewind@PLT

            mov RDI,R12
            call malloc@PLT

            test RAX,RAX
            mov RBP,RAX
            je .L_401021

            mov RCX,RBX
            mov RDX,R12
            mov ESI,1
            mov RDI,RAX
            call fread@PLT

            cmp R12,RAX
            jne .L_40100b

            mov RSI,R12
            mov RDI,RBP
            call .L_401130

            mov RDI,RBP
            call free@PLT

            mov RDI,RBX
            call fclose@PLT

            pop RBX
.L_400ffb:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_401001:

            mov EDI,1
            call exit@PLT
.L_40100b:

            lea RDI,QWORD PTR [RIP+.L_45fd65]
            call puts@PLT

            mov EDI,3
            call exit@PLT
.L_401021:

            lea RDI,QWORD PTR [RIP+.L_45fd57]
            call puts@PLT

            mov EDI,2
            call exit@PLT
.L_401037:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401070:

            ret 
.L_401072:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401080:

            push RBP
            mov EAX,OFFSET .L_677158
            cmp RAX,OFFSET .L_677158
            mov RBP,RSP
            je .L_4010a8

            mov EAX,0
            test RAX,RAX
            je .L_4010a8

            pop RBP
            mov EDI,OFFSET .L_677158
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4010a8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4010b0:

            mov ESI,OFFSET .L_677158
            push RBP
            sub RSI,OFFSET .L_677158
            mov RBP,RSP
            sar RSI,3
            mov RAX,RSI
            shr RAX,63
            add RSI,RAX
            sar RSI,1
            je .L_4010e8

            mov EAX,0
            test RAX,RAX
            je .L_4010e8

            pop RBP
            mov EDI,OFFSET .L_677158
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4010e8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401120:

            push RBP
            mov RBP,RSP
            pop RBP
            jmp .L_4010b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401130:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,32
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp RSI,127
            jbe .L_401178
.L_401152:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_401226

            add RSP,32
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_401178:

            mov RBX,RSI
            mov R12,RDI
            mov R14,RSP
            call .L_401230

            call .L_401580

            mov ESI,57005
            mov RBP,RAX
            mov RDI,RAX
            call .L_4019c0

            mov ESI,1
            mov RDI,RBP
            call .L_401620

            mov ESI,1
            mov RDI,RBP
            call .L_402260

            mov RDI,RBP
            call .L_4025b0

            mov RDI,RBX
            call malloc@PLT

            mov R13,RAX
            mov RDX,RBX
            xor EAX,EAX
            mov RSI,R12
            mov RDI,R13
            mov QWORD PTR [RSP+10],0
            mov QWORD PTR [RSP],R13
            mov DWORD PTR [R14+18],0
            mov WORD PTR [R14+22],AX
            mov BYTE PTR [RSP+9],11
            mov BYTE PTR [RSP+8],BL
            call memcpy@PLT

            xor EDX,EDX
            mov RSI,R14
            mov RDI,RBP
            call .L_408280

            mov RDI,R13
            call free@PLT

            test RBP,RBP
            je .L_401152

            mov RDI,RBP
            call .L_4015a0

            jmp .L_401152
.L_401226:

            call __stack_chk_fail@PLT
.L_40122b:

            nop
            nop
            nop
            nop
            nop
.L_401230:

            mov DWORD PTR [RIP+.L_677110],1
            ret 
.L_40123b:

            nop
            nop
            nop
            nop
            nop
.L_401240:

            xor EAX,EAX
            ret 
.L_401243:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401250:

            ret 
.L_401252:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401260:

            ret 
.L_401262:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401270:

            xor EAX,EAX
            ret 
.L_401273:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401280:

            ret 
.L_401282:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401290:

            ret 
.L_401292:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012a0:

            ret 
.L_4012a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012b0:

            xor EAX,EAX
            ret 
.L_4012b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012c0:

            ret 
.L_4012c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012d0:

            ret 
.L_4012d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012e0:

            ret 
.L_4012e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012f0:

            ret 
.L_4012f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401300:

            ret 
.L_401302:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401310:

            ret 
.L_401312:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401320:

            mov EAX,1
            ret 
.L_401326:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401330:

            xor EAX,EAX
            ret 
.L_401333:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401340:

            xor EAX,EAX
            ret 
.L_401343:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401350:

            xor EAX,EAX
            ret 
.L_401353:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401360:

            xor EAX,EAX
            ret 
.L_401363:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401370:

            xor EAX,EAX
            ret 
.L_401373:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401380:

            xor EAX,EAX
            ret 
.L_401383:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401390:

            xor EAX,EAX
            ret 
.L_401393:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013a0:

            xor EAX,EAX
            ret 
.L_4013a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013b0:

            xor EAX,EAX
            ret 
.L_4013b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013c0:

            ret 
.L_4013c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013d0:

            xor EAX,EAX
            ret 
.L_4013d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013e0:

            xor EAX,EAX
            ret 
.L_4013e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013f0:

            xor EAX,EAX
            ret 
.L_4013f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401400:

            xor EAX,EAX
            ret 
.L_401403:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401410:

            ret 
.L_401412:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401420:

            ret 
.L_401422:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401430:

            mov EAX,12
            ret 
.L_401436:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401440:

            mov EAX,12
            ret 
.L_401446:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401450:

            xor EAX,EAX
            ret 
.L_401453:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401460:

            mov EAX,DWORD PTR [RIP+.L_677110]
            imul RAX,RAX,33614
            mov EDX,EAX
            shr RAX,32
            shr EDX,1
            add EAX,EDX
            mov EDX,EAX
            and EDX,2147483647
            add EDX,1
            test EAX,EAX
            cmovs EAX,EDX
            mov DWORD PTR [RIP+.L_677110],EAX
            ret 
.L_40148e:

            nop
            nop
.L_401490:

            test SI,SI
            je .L_4014e4

            sub ESI,1
            mov EAX,DWORD PTR [RIP+.L_677110]
            movzx ESI,SI
            lea RCX,QWORD PTR [RDI+RSI*1+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4014b0:

            imul RAX,RAX,33614
            mov EDX,EAX
            shr RAX,32
            shr EDX,1
            add EAX,EDX
            mov EDX,EAX
            and EDX,2147483647
            add EDX,1
            test EAX,EAX
            cmovs RAX,RDX
            add RDI,1
            mov BYTE PTR [RDI-1],AL
            cmp RCX,RDI
            jne .L_4014b0

            mov DWORD PTR [RIP+.L_677110],EAX
.L_4014e4:

            xor EAX,EAX
            ret 
.L_4014e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4014f0:

            ret 
.L_4014f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401500:

            xor EAX,EAX
            ret 
.L_401503:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401510:

            xor EAX,EAX
            ret 
.L_401513:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401520:

            xor EAX,EAX
            ret 
.L_401523:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401530:

            mov EAX,23
            ret 
.L_401536:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401540:

            xor EAX,EAX
            ret 
.L_401543:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401550:

            xor EAX,EAX
            ret 
.L_401553:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401560:

            xor EAX,EAX
            ret 
.L_401563:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401570:

            ret 
.L_401572:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401580:

            jmp .L_402900
.L_401585:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401590:

            movzx EAX,BYTE PTR [RDI+29792]
            ret 
.L_401598:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015a0:

            jmp .L_402940
.L_4015a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015b0:

            add RDI,32
            jmp .L_402d00
.L_4015b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015c0:

            add RDI,32
            jmp .L_402d50
.L_4015c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015d0:

            jmp .L_402970
.L_4015d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015e0:

            jmp .L_402980
.L_4015e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015f0:

            jmp .L_4029a0
.L_4015f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401600:

            mov EAX,1
            ret 
.L_401606:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401610:

            mov EAX,33
            ret 
.L_401616:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401620:

            test SIL,SIL
            movzx EAX,BYTE PTR [RDI+24336]
            je .L_401640

            test AL,AL
            jne .L_401650

            add RDI,12720
            jmp .L_42d8a0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401640:

            test AL,AL
            jne .L_401650

            add RDI,12720
            jmp .L_42d930
.L_401650:

            mov EAX,13
            ret 
.L_401656:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401660:

            movzx EAX,BYTE PTR [RDI+20840]
            ret 
.L_401668:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401670:

            mov RAX,QWORD PTR [RDI+12728]
            ret 
.L_401678:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401680:

            add RDI,12720
            jmp .L_411790
.L_40168c:

            nop
            nop
            nop
            nop
.L_401690:

            add RDI,12720
            jmp .L_4118a0
.L_40169c:

            nop
            nop
            nop
            nop
.L_4016a0:

            mov RAX,QWORD PTR [RDI+12736]
            ret 
.L_4016a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016b0:

            add RDI,12720
            jmp .L_411520
.L_4016bc:

            nop
            nop
            nop
            nop
.L_4016c0:

            add RDI,12720
            jmp .L_4115d0
.L_4016cc:

            nop
            nop
            nop
            nop
.L_4016d0:

            movzx EAX,BYTE PTR [RDI+12745]
            ret 
.L_4016d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016e0:

            mov BYTE PTR [RDI+12745],SIL
            ret 
.L_4016e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016f0:

            jmp .L_42eca0
.L_4016f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401700:

            jmp .L_42ef10
.L_401705:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401710:

            mov RAX,QWORD PTR [RDI+14376]
            mov QWORD PTR [RSI+8],RAX
            xor EAX,EAX
            xor BYTE PTR [RSI+8],2
            ret 
.L_401722:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401730:

            mov RAX,RDI
            mov RDI,RDX
            mov RDX,RSI
            mov RSI,RAX
            jmp .L_42f0e0
.L_401741:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401750:

            add RDI,12400
            jmp .L_40e250
.L_40175c:

            nop
            nop
            nop
            nop
.L_401760:

            movzx EAX,BYTE PTR [RDI+12401]
            ret 
.L_401768:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401770:

            mov BYTE PTR [RDI+12401],SIL
            ret 
.L_401778:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401780:

            movsx EDX,BYTE PTR [RDI+12744]
            add RDI,12400
            jmp .L_40fbe0
.L_401793:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4017a0:

            push RBX
            add RDI,24624
            xor EDX,EDX
            mov EBX,ESI
            xor ESI,ESI
            call .L_403790

            test RAX,RAX
            je .L_4017c8

            movzx ESI,BYTE PTR [RAX+78]
            shl EBX,7
            and ESI,127
            or ESI,EBX
            mov BYTE PTR [RAX+78],SIL
.L_4017c8:

            pop RBX
            ret 
.L_4017ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4017d0:

            movzx ESI,SI
            add RDI,14080
            jmp .L_410700
.L_4017df:

            nop
.L_4017e0:

            movzx ESI,SI
            add RDI,14080
            jmp .L_410750
.L_4017ef:

            nop
.L_4017f0:

            add RDI,14080
            jmp .L_410780
.L_4017fc:

            nop
            nop
            nop
            nop
.L_401800:

            jmp .L_4103b0
.L_401805:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401810:

            mov RAX,RDI
            mov RDI,RSI
            mov RSI,RAX
            jmp .L_4103f0
.L_40181e:

            nop
            nop
.L_401820:

            test RDI,RDI
            je .L_401830

            test RSI,RSI
            je .L_401830

            jmp .L_410360
          .byte 0x90
.L_401830:

            xor EAX,EAX
            ret 
.L_401833:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401840:

            jmp .L_40ff00
.L_401845:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401850:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,88
.L_401859:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_401883

            mov RBP,RSP
            lea RDI,QWORD PTR [RDI+14280]
            mov RDX,RBP
            call .L_405b00

            mov RSI,RBP
.L_401883:

            mov RDI,RBX
            call .L_4029e0

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4018a2

            add RSP,88
.L_40189f:

            pop RBX
            pop RBP
            ret 
.L_4018a2:

            call __stack_chk_fail@PLT
.L_4018a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018b0:

            jmp .L_402a10
.L_4018b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018c0:

            movzx EAX,BYTE PTR [RDI+14388]
            ret 
.L_4018c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018d0:

            mov EDX,DWORD PTR [RDI+15300]
            mov EAX,13
            test EDX,EDX
            jne .L_401908

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            movzx ESI,SIL
            sub RSP,16
            call .L_406270

            test EAX,EAX
            je .L_401910

            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401908:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_401910:

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
.L_401936:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401940:

            lea RAX,QWORD PTR [RDI+14376]
            ret 
.L_401948:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401950:

            test RSI,RSI
            je .L_401990

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401980

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            call .L_405e30

            lea RDI,QWORD PTR [RBX+15288]
            pop RBX
            jmp .L_416790
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401980:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401990:

            mov EAX,7
            ret 
.L_401996:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019a0:

            jmp .L_4012d0
.L_4019a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019b0:

            movzx EAX,WORD PTR [RDI+14386]
            ret 
.L_4019b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019c0:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401a10

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            movzx ESI,SI
            sub RSP,16
            call .L_406120

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401a10:

            mov EAX,13
            ret 
.L_401a16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a20:

            add RDI,15240
            jmp .L_413580
.L_401a2c:

            nop
            nop
            nop
            nop
.L_401a30:

            add RDI,15240
            jmp .L_413960
.L_401a3c:

            nop
            nop
            nop
            nop
.L_401a40:

            add RDI,15240
            jmp .L_413740
.L_401a4c:

            nop
            nop
            nop
            nop
.L_401a50:

            movzx EAX,WORD PTR [RDI+14384]
            ret 
.L_401a58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a60:

            mov EAX,DWORD PTR [RDI+14816]
            ret 
.L_401a67:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a70:

            add RDI,14496
            jmp .L_4089e0
.L_401a7c:

            nop
            nop
            nop
            nop
.L_401a80:

            test RSI,RSI
            je .L_401a98

            add RDI,14496
            jmp .L_408a00
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401a98:

            mov EAX,7
            ret 
.L_401a9e:

            nop
            nop
.L_401aa0:

            test RSI,RSI
            je .L_401ab8

            add RDI,14496
            jmp .L_408a80
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401ab8:

            mov EAX,7
            ret 
.L_401abe:

            nop
            nop
.L_401ac0:

            add RDI,14496
            jmp .L_408ac0
.L_401acc:

            nop
            nop
            nop
            nop
.L_401ad0:

            test RSI,RSI
            je .L_401af0

            test RDX,RDX
            je .L_401af0

            add RDI,14496
            jmp .L_408ae0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401af0:

            mov EAX,7
            ret 
.L_401af6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401b00:

            movsx EDX,DL
            add RDI,14496
            jmp .L_408b70
.L_401b0f:

            nop
.L_401b10:

            add RDI,14496
            jmp .L_408c00
.L_401b1c:

            nop
            nop
            nop
            nop
.L_401b20:

            add RDI,14496
            jmp .L_408c40
.L_401b2c:

            nop
            nop
            nop
            nop
.L_401b30:

            test RSI,RSI
            je .L_401b50

            test RDX,RDX
            je .L_401b50

            add RDI,14496
            jmp .L_408c70
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401b50:

            mov EAX,7
            ret 
.L_401b56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401b60:

            push RBX
            add RDI,14280
            mov EBX,ESI
            call .L_4084f0

            movsx ESI,BL
            movsx EDI,AL
            pop RBX
            jmp .L_414440
.L_401b7b:

            nop
            nop
            nop
            nop
            nop
.L_401b80:

            push RBX
            add RDI,14280
            mov EBX,ESI
            call .L_4084f0

            movzx ESI,BL
            movsx EDI,AL
            pop RBX
            jmp .L_414480
.L_401b9b:

            nop
            nop
            nop
            nop
            nop
.L_401ba0:

            add RDI,14280
            jmp .L_406ee0
.L_401bac:

            nop
            nop
            nop
            nop
.L_401bb0:

            add RDI,14280
            jmp .L_406ef0
.L_401bbc:

            nop
            nop
            nop
            nop
.L_401bc0:

            cmp BYTE PTR [RDI+20840],0
            jne .L_401be8

            sub RSP,8
            movzx ESI,SIL
            add RDI,14280
            call .L_406f10

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401be8:

            mov EAX,13
            ret 
.L_401bee:

            nop
            nop
.L_401bf0:

            lea RAX,QWORD PTR [RDI+14840]
            ret 
.L_401bf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c00:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RSI,RCX
            mov RDX,R8
            call .L_4029d0

            movzx EDX,BX
            lea RDI,QWORD PTR [RBP+14280]
            mov R8,RBP
            pop RBX
            mov ESI,R12D
            lea RCX,QWORD PTR [RIP+.L_401850]
            pop RBP
            pop R12
            jmp .L_406360
.L_401c37:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c40:

            add RDI,14280
            jmp .L_405aa0
.L_401c4c:

            nop
            nop
            nop
            nop
.L_401c50:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RSI,RCX
            mov RDX,R8
            call .L_402a00

            movzx EDX,BX
            lea RDI,QWORD PTR [RBP+14280]
            mov R8,RBP
            pop RBX
            mov ESI,R12D
            lea RCX,QWORD PTR [RIP+.L_4018b0]
            pop RBP
            pop R12
            jmp .L_4063f0
.L_401c87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c90:

            add RDI,14280
            jmp .L_405ac0
.L_401c9c:

            nop
            nop
            nop
            nop
.L_401ca0:

            add RDI,14280
            jmp .L_405ae0
.L_401cac:

            nop
            nop
            nop
            nop
.L_401cb0:

            add RDI,14280
            jmp .L_4061b0
.L_401cbc:

            nop
            nop
            nop
            nop
.L_401cc0:

            movzx EAX,WORD PTR [RDI+14972]
            ret 
.L_401cc8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401cd0:

            mov EAX,DWORD PTR [RDI+15608]
            ret 
.L_401cd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401ce0:

            add RDI,15288
            jmp .L_41b200
.L_401cec:

            nop
            nop
            nop
            nop
.L_401cf0:

            lea RAX,QWORD PTR [RDI+14406]
            ret 
.L_401cf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401d00:

            push RBP
            push RBX
            sub RSP,24
.L_401d06:

            mov EDX,DWORD PTR [RDI+15300]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,13
            test EDX,EDX
            jne .L_401d79

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            mov RBP,RSI
            call .L_406140

            mov EAX,DWORD PTR [RBP]
            mov RSI,RSP
            lea RDI,QWORD PTR [RBX+15288]
            mov BYTE PTR [RSP],253
            mov DWORD PTR [RSP+1],EAX
            movzx EAX,BYTE PTR [RBP+4]
            mov BYTE PTR [RSI+5],AL
            xor EAX,EAX
            mov WORD PTR [RSP+6],AX
            call .L_416800

            lea RDI,QWORD PTR [RBX+13800]
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            xor EAX,EAX
.L_401d79:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_401d90

            add RSP,24
.L_401d8d:

            pop RBX
            pop RBP
            ret 
.L_401d90:

            call __stack_chk_fail@PLT
.L_401d95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401da0:

            test RSI,RSI
            je .L_401db8

            add RDI,15288
            jmp .L_4172c0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401db8:

            mov EAX,7
            ret 
.L_401dbe:

            nop
            nop
.L_401dc0:

            sub RSP,24
.L_401dc4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDI+15344]
            mov BYTE PTR [RSP+7],0
            test AL,8
            je .L_401de9

            mov BYTE PTR [RSP+7],1
.L_401de9:

            test AL,4
            je .L_401df2

            or BYTE PTR [RSP+7],2
.L_401df2:

            test AL,2
            je .L_401dfb

            or BYTE PTR [RSP+7],4
.L_401dfb:

            test AL,1
            je .L_401e04

            or BYTE PTR [RSP+7],8
.L_401e04:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            movzx EAX,BYTE PTR [RSP+7]
            jne .L_401e1e

            add RSP,24
.L_401e1d:

            ret 
.L_401e1e:

            call __stack_chk_fail@PLT
.L_401e23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401e30:

            mov EAX,ESI
            and EAX,1
            shl EAX,3
            mov EDX,EAX
            or EDX,4
            test SIL,2
            cmovne EAX,EDX
            mov EDX,EAX
            or EDX,2
            test SIL,4
            cmovne EAX,EDX
            mov EDX,EAX
            or EDX,1
            and ESI,8
            cmovne EAX,EDX
            add RDI,15288
            movzx ESI,AL
            jmp .L_41b260
.L_401e6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_401e70:

            add RDI,14088
            jmp .L_413bc0
.L_401e7c:

            nop
            nop
            nop
            nop
.L_401e80:

            test RSI,RSI
            je .L_401ed8

            mov EDX,DWORD PTR [RDI+15300]
            mov EAX,13
            test EDX,EDX
            jne .L_401ed0

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14088]
            sub RSP,16
            call .L_413ca0

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_401ed0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_401ed8:

            mov EAX,7
            ret 
.L_401ede:

            nop
            nop
.L_401ee0:

            add RDI,15288
            jmp .L_4172b0
.L_401eec:

            nop
            nop
            nop
            nop
.L_401ef0:

            add RDI,15288
            jmp .L_4167f0
.L_401efc:

            nop
            nop
            nop
            nop
.L_401f00:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401f48

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+15288]
            sub RSP,16
            call .L_416800

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401f48:

            mov EAX,13
            ret 
.L_401f4e:

            nop
            nop
.L_401f50:

            add RDI,15288
            jmp .L_416780
.L_401f5c:

            nop
            nop
            nop
            nop
.L_401f60:

            lea RAX,QWORD PTR [RDI+14389]
            ret 
.L_401f68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401f70:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401fb8

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            sub RSP,16
            call .L_405ed0

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401fb8:

            mov EAX,13
            ret 
.L_401fbe:

            nop
            nop
.L_401fc0:

            mov EAX,DWORD PTR [RDI+14104]
            ret 
.L_401fc7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401fd0:

            add RDI,14088
            jmp .L_413f50
.L_401fdc:

            nop
            nop
            nop
            nop
.L_401fe0:

            mov EAX,DWORD PTR [RDI+14196]
            ret 
.L_401fe7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401ff0:

            mov DWORD PTR [RDI+14196],ESI
            ret 
.L_401ff7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402000:

            add RDI,15288
            jmp .L_417190
.L_40200c:

            nop
            nop
            nop
            nop
.L_402010:

            add RDI,15288
            xor ESI,ESI
            jmp .L_4164b0
.L_40201e:

            nop
            nop
.L_402020:

            test RDX,RDX
            je .L_402040

            test RSI,RSI
            je .L_402040

            add RDI,15288
            jmp .L_41f8b0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402040:

            mov EAX,7
            ret 
.L_402046:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402050:

            mov EAX,DWORD PTR [RDI+15300]
            ret 
.L_402057:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402060:

            test RSI,RSI
            je .L_402078

            add RDI,15288
            jmp .L_417460
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402078:

            mov EAX,7
            ret 
.L_40207e:

            nop
            nop
.L_402080:

            sub RSP,8
            add RDI,15288
            call .L_417430

            movzx EAX,BYTE PTR [RAX+9]
            add RSP,8
            ret 
.L_402099:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4020a0:

            sub RSP,8
            add RDI,15288
            call .L_417430

            movzx EAX,BYTE PTR [RAX+6]
            add RSP,8
            ret 
.L_4020b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4020c0:

            sub RSP,8
            add RDI,15288
            call .L_417430

            mov EAX,DWORD PTR [RAX+2]
            add RSP,8
            bswap EAX
            ret 
.L_4020da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4020e0:

            add RDI,15288
            jmp .L_416dd0
.L_4020ec:

            nop
            nop
            nop
            nop
.L_4020f0:

            test RSI,RSI
            je .L_4021a0

            push RBP
            push RBX
            add RDI,15288
            mov RBX,RSI
            sub RSP,8
.L_402109:

            call .L_41c0c0

            mov RBP,RAX
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RBX],RAX
            movzx EAX,WORD PTR [RBP+24]
            mov WORD PTR [RBX+8],AX
            movzx EAX,WORD PTR [RBP+24]
            sar EAX,10
            mov BYTE PTR [RBX+10],AL
            movzx EAX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+11],AL
            movzx EAX,BYTE PTR [RBP+37]
            shr AL,2
            and EAX,15
            mov BYTE PTR [RBX+12],AL
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+13],AL
            movzx EAX,BYTE PTR [RBP+37]
            and EAX,3
            mov BYTE PTR [RBX+14],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            mul EDX
            shr EDX,6
            mov BYTE PTR [RBX+15],DL
            movzx EAX,BYTE PTR [RBP+37]
            shr AL,6
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+16]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EDX,7
            cmp DL,7
            sete DL
            and EAX,4294967293
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            add RSP,8
.L_402196:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4021a0:

            mov EAX,7
            ret 
.L_4021a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4021b0:

            test RSI,RSI
            je .L_4021e0

            push RBX
            add RDI,15288
            mov RBX,RSI
            call .L_41c0c0

            lea RDI,QWORD PTR [RAX+28]
            call .L_4141d0

            cmp AL,127
            mov BYTE PTR [RBX],AL
            sete AL
            movzx EAX,AL
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4021e0:

            mov EAX,7
            ret 
.L_4021e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4021f0:

            test RSI,RSI
            je .L_402218

            push RBX
            add RDI,15288
            mov RBX,RSI
            call .L_41c0c0

            movzx EAX,BYTE PTR [RAX+31]
            cmp AL,127
            mov BYTE PTR [RBX],AL
            sete AL
            movzx EAX,AL
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402218:

            mov EAX,7
            ret 
.L_40221e:

            nop
            nop
.L_402220:

            lea RAX,QWORD PTR [RIP+.L_4023c0]
            ret 
.L_402228:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402230:

            add RDI,20696
            jmp .L_42c280
.L_40223c:

            nop
            nop
            nop
            nop
.L_402240:

            movzx ECX,CL
            add RDI,20696
            jmp .L_42c290
.L_40224f:

            nop
.L_402250:

            movzx ECX,CL
            add RDI,20696
            jmp .L_42ce70
.L_40225f:

            nop
.L_402260:

            test SIL,SIL
            je .L_402290

            cmp WORD PTR [RDI+14386],-1
            je .L_402288

            add RDI,15288
            xor EDX,EDX
            mov ESI,1
            jmp .L_41af50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402288:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x90
.L_402290:

            add RDI,15288
            mov ESI,1
            jmp .L_416670
.L_4022a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4022b0:

            sub RSP,24
.L_4022b4:

            xor EDX,EDX
            mov ESI,6
            lea RCX,QWORD PTR [RSP+5]
            lea R8,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+5],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1
            mov WORD PTR [RSP+6],AX
            call .L_401530

            xor EDX,EDX
            test EAX,EAX
            jne .L_4022f7

            cmp BYTE PTR [RSP+5],0
            setne DL
.L_4022f7:

            mov RSI,QWORD PTR [RSP+8]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_40230e

            add RSP,24
.L_40230d:

            ret 
.L_40230e:

            call __stack_chk_fail@PLT
.L_402313:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402320:

            sub RSP,24
            mov ECX,1
            lea RDX,QWORD PTR [RSP+7]
            mov BYTE PTR [RSP+7],SIL
            mov ESI,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_401540

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_402362

            add RSP,24
            ret 
.L_402362:

            call __stack_chk_fail@PLT
.L_402367:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402370:

            add RDI,15288
            jmp .L_41d120
.L_40237c:

            nop
            nop
            nop
            nop
.L_402380:

            movzx ECX,CL
            movzx EDX,DX
            add RDI,15288
            movzx R8D,R8B
            jmp .L_418650
.L_402396:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4023a0:

            add RDI,15288
            jmp .L_416480
.L_4023ac:

            nop
            nop
            nop
            nop
.L_4023b0:

            lea RAX,QWORD PTR [RDI+15200]
            ret 
.L_4023b8:
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4023c0:
          .string "OPENTHREAD/20170716-00481-g79c4830c3-dirty; NONE; Oct 10 2020 17:19:25"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402410:

            sub RSP,24
            add RDI,15288
            lea RSI,QWORD PTR [RSP+7]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_41e330

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            movzx EAX,BYTE PTR [RSP+7]
            jne .L_40244f

            add RSP,24
            ret 
.L_40244f:

            call __stack_chk_fail@PLT
.L_402454:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402460:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41e350
.L_402470:

            add RDI,15288
            jmp .L_41c790
.L_40247c:

            nop
            nop
            nop
            nop
.L_402480:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41c7b0
.L_402490:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41f0c0
.L_4024a0:

            movzx EAX,BYTE PTR [RDI+19951]
            ret 
.L_4024a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024b0:

            mov BYTE PTR [RDI+19951],SIL
            ret 
.L_4024b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024c0:

            mov EAX,DWORD PTR [RDI+19952]
            ret 
.L_4024c7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024d0:

            mov DWORD PTR [RDI+19952],ESI
            ret 
.L_4024d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024e0:

            add RDI,23088
            jmp .L_40caf0
.L_4024ec:

            nop
            nop
            nop
            nop
.L_4024f0:

            movzx ESI,SI
            add RDI,23088
            jmp .L_40cb10
.L_4024ff:

            nop
.L_402500:

            add RDI,20240
            jmp .L_4295a0
.L_40250c:

            nop
            nop
            nop
            nop
.L_402510:

            add RDI,20240
            jmp .L_4295b0
.L_40251c:

            nop
            nop
            nop
            nop
.L_402520:

            movzx EAX,BYTE PTR [RDI+19948]
            ret 
.L_402528:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402530:

            mov BYTE PTR [RDI+19948],SIL
            ret 
.L_402538:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402540:

            movzx EAX,BYTE PTR [RDI+19949]
            ret 
.L_402548:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402550:

            mov BYTE PTR [RDI+19949],SIL
            ret 
.L_402558:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402560:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41c960
.L_402570:

            mov EAX,DWORD PTR [RDI+15300]
            cmp EAX,2
            je .L_402590

            jb .L_402588

            cmp EAX,4
            ja .L_402588

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402588:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x90
.L_402590:

            add RDI,15288
            mov ESI,3
            jmp .L_41fed0
.L_4025a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4025b0:

            add RDI,15288
            jmp .L_422750
.L_4025bc:

            nop
            nop
            nop
            nop
.L_4025c0:

            movzx EAX,BYTE PTR [RDI+19950]
            ret 
.L_4025c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4025d0:

            mov BYTE PTR [RDI+19950],SIL
            ret 
.L_4025d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4025e0:

            movzx EAX,BYTE PTR [RDI+19964]
            ret 
.L_4025e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4025f0:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41d010
.L_402600:

            test RDX,RDX
            je .L_402618

            movzx ESI,SI
            add RDI,15288
            jmp .L_41f710
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_402618:

            mov EAX,7
            ret 
.L_40261e:

            nop
            nop
.L_402620:

            test RDX,RDX
            je .L_402638

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41f790
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402638:

            mov EAX,7
            ret 
.L_40263e:

            nop
            nop
.L_402640:

            push RBX
            sub RSP,16
.L_402645:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            test RDX,RDX
            mov WORD PTR [RSP+6],AX
            je .L_4026b0

            test RCX,RCX
            je .L_4026b0

            movzx EAX,WORD PTR [RDX]
            mov RBX,RDX
            lea RDX,QWORD PTR [RSP+6]
            add RDI,15288
            movzx ESI,SIL
            mov WORD PTR [RSP+6],AX
            call .L_41f160

            test EAX,EAX
            jne .L_402692

            movzx EDX,WORD PTR [RSP+6]
            mov WORD PTR [RBX],DX
.L_402692:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4026b7

            add RSP,16
.L_4026a6:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4026b0:

            mov EAX,7
            jmp .L_402692
.L_4026b7:

            call __stack_chk_fail@PLT
.L_4026bc:

            nop
            nop
            nop
            nop
.L_4026c0:

            movzx EAX,BYTE PTR [RDI+16032]
            ret 
.L_4026c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4026d0:

            mov EAX,62
            ret 
.L_4026d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4026e0:

            test RDX,RDX
            je .L_4026f8

            movzx ESI,SI
            add RDI,15288
            jmp .L_41f7c0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4026f8:

            mov EAX,7
            ret 
.L_4026fe:

            nop
            nop
.L_402700:

            test RDX,RDX
            je .L_402718

            movzx ESI,SIL
            add RDI,23408
            jmp .L_412350
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402718:

            mov EAX,7
            ret 
.L_40271e:

            nop
            nop
.L_402720:

            mov EAX,33
            ret 
.L_402726:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402730:

            add RDI,14088
            jmp .L_413b60
.L_40273c:

            nop
            nop
            nop
            nop
.L_402740:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_402780

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14088]
            call .L_413b70

            lea RDI,QWORD PTR [RBX+13800]
            call .L_40adf0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40af70

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402780:

            mov EAX,13
            ret 
.L_402786:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402790:

            add RDI,15288
            jmp .L_422040
.L_40279c:

            nop
            nop
            nop
            nop
.L_4027a0:

            movsx ESI,SIL
            add RDI,15288
            jmp .L_422050
.L_4027b0:

            mov RAX,QWORD PTR [RDI+19928]
            ret 
.L_4027b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4027c0:

            mov QWORD PTR [RDI+19928],RSI
            ret 
.L_4027c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4027d0:

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            lea RDI,QWORD PTR [RDI+32]
            mov QWORD PTR [RDI-8],0
            mov RSI,RBX
            call .L_402c50

            lea RDI,QWORD PTR [RBX+80]
            call .L_405200

            lea RDI,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+96],0
            call .L_405810

            lea RDI,QWORD PTR [RBX+112]
            call .L_405350

            lea RDI,QWORD PTR [RBX+12400]
            mov RSI,RBX
            call .L_40e140

            lea RDI,QWORD PTR [RBX+12720]
            mov RSI,RBX
            call .L_42d630

            lea RDI,QWORD PTR [RBX+24328]
            mov RSI,RBX
            call .L_42f480

            lea RDI,QWORD PTR [RBX+24368]
            mov RSI,RBX
            call .L_4311c0

            lea RDI,QWORD PTR [RBX+24560]
            mov RSI,RBX
            call .L_42e140

            lea RDI,QWORD PTR [RBX+24624]
            mov RSI,RBX
            call .L_403040

            mov BYTE PTR [RBX+29792],0
            pop RBX

            ret 
.L_402885:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402890:

            lea RAX,QWORD PTR [RIP+.L_677180]
            ret 
.L_402898:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4028a0:

            push RBX
            mov RBX,RDI
            mov BYTE PTR [RDI+29792],1
            call .L_4014f0

            lea RDI,QWORD PTR [RBX+15288]
            call .L_416e70

            mov RDI,RBX
            call .L_4022b0

            test AL,AL
            jne .L_4028d0
.L_4028c8:

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4028d0:

            mov ESI,1
            mov RDI,RBX
            call .L_401620

            test EAX,EAX
            jne .L_4028c8

            mov ESI,1
            mov RDI,RBX
            call .L_402260

            test EAX,EAX
            je .L_4028c8

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            jmp .L_401620
.L_4028fd:

            nop
            nop
            nop
.L_402900:

            cmp BYTE PTR [RIP+.L_67e5e0],0
            je .L_402918

            lea RAX,QWORD PTR [RIP+.L_677180]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402918:

            lea RDI,QWORD PTR [RIP+.L_677180]
            sub RSP,8
            call .L_4027d0

            lea RDI,QWORD PTR [RIP+.L_677180]
            call .L_4028a0

            lea RAX,QWORD PTR [RIP+.L_677180]
            add RSP,8
            ret 
.L_402940:

            cmp BYTE PTR [RDI+29792],0
            jne .L_402950

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402950:

            push RBX
            xor ESI,ESI
            mov RBX,RDI
            mov BYTE PTR [RDI+29792],0
            call .L_402260

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            jmp .L_401620
.L_40296d:

            nop
            nop
            nop
.L_402970:

            jmp .L_4012a0
.L_402975:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402980:

            push RBX
            mov RBX,RDI
            call .L_401570

            mov RDI,RBX
            pop RBX
            jmp .L_4012a0
.L_402992:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4029a0:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_4029c0

            sub RSP,8
            call .L_401570

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4029c0:

            mov EAX,13
            ret 
.L_4029c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4029d0:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDX
            ret 
.L_4029d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4029e0:

            mov RAX,QWORD PTR [RDI]
            mov RDX,RSI
            test RAX,RAX
            je .L_4029f8

            mov RSI,QWORD PTR [RDI+8]
            mov RDI,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4029f8:

            ret 
.L_4029fa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_402a00:

            mov QWORD PTR [RDI+16],RSI
            mov QWORD PTR [RDI+24],RDX
            ret 
.L_402a09:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a10:

            mov RAX,QWORD PTR [RDI+16]
            mov RDX,RSI
            test RAX,RAX
            je .L_402a28

            mov RSI,QWORD PTR [RDI+24]
            mov RDI,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402a28:

            ret 
.L_402a2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_402a30:

            lea RAX,QWORD PTR [RDI+32]
            ret 
.L_402a35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a40:

            lea RAX,QWORD PTR [RDI+80]
            ret 
.L_402a45:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a50:

            lea RAX,QWORD PTR [RDI+14976]
            ret 
.L_402a58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a60:

            lea RAX,QWORD PTR [RDI+15288]
            ret 
.L_402a68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a70:

            lea RAX,QWORD PTR [RDI+15288]
            ret 
.L_402a78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a80:

            lea RAX,QWORD PTR [RDI+12720]
            ret 
.L_402a88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a90:

            lea RAX,QWORD PTR [RDI+12400]
            ret 
.L_402a98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402aa0:

            lea RAX,QWORD PTR [RDI+14280]
            ret 
.L_402aa8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ab0:

            lea RAX,QWORD PTR [RDI+14088]
            ret 
.L_402ab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ac0:

            lea RAX,QWORD PTR [RDI+23408]
            ret 
.L_402ac8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ad0:

            lea RAX,QWORD PTR [RDI+23248]
            ret 
.L_402ad8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ae0:

            lea RAX,QWORD PTR [RDI+23088]
            ret 
.L_402ae8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402af0:

            lea RAX,QWORD PTR [RDI+24016]
            ret 
.L_402af8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b00:

            lea RAX,QWORD PTR [RDI+15240]
            ret 
.L_402b08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b10:

            lea RAX,QWORD PTR [RDI+24160]
            ret 
.L_402b18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b20:

            lea RAX,QWORD PTR [RDI+24080]
            ret 
.L_402b28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b30:

            lea RAX,QWORD PTR [RDI+20240]
            ret 
.L_402b38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b40:

            lea RAX,QWORD PTR [RDI+12520]
            ret 
.L_402b48:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b50:

            lea RAX,QWORD PTR [RDI+12936]
            ret 
.L_402b58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b60:

            lea RAX,QWORD PTR [RDI+13800]
            ret 
.L_402b68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b70:

            lea RAX,QWORD PTR [RDI+13928]
            ret 
.L_402b78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b80:

            lea RAX,QWORD PTR [RDI+24368]
            ret 
.L_402b88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b90:

            lea RAX,QWORD PTR [RDI+20848]
            ret 
.L_402b98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ba0:

            lea RAX,QWORD PTR [RDI+22800]
            ret 
.L_402ba8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bb0:

            lea RAX,QWORD PTR [RDI+13688]
            ret 
.L_402bb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bc0:

            lea RAX,QWORD PTR [RDI+21224]
            ret 
.L_402bc8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bd0:

            lea RAX,QWORD PTR [RDI+22504]
            ret 
.L_402bd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402be0:

            lea RAX,QWORD PTR [RDI+24328]
            ret 
.L_402be8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bf0:

            lea RAX,QWORD PTR [RDI+13128]
            ret 
.L_402bf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c00:

            lea RAX,QWORD PTR [RDI+22952]
            ret 
.L_402c08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c10:

            lea RAX,QWORD PTR [RDI+23952]
            ret 
.L_402c18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c20:

            lea RAX,QWORD PTR [RDI+23984]
            ret 
.L_402c28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c30:

            lea RAX,QWORD PTR [RDI+24560]
            ret 
.L_402c38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c40:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDI
            ret 
.L_402c48:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c50:

            push RBX
            lea RDX,QWORD PTR [RIP+.L_402df0]
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RBX
            call .L_4051f0

            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+32],0
            mov QWORD PTR [RBX+40],0
            pop RBX
            ret 
.L_402c87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c90:

            cmp QWORD PTR [RSI+8],RSI
            mov EAX,24
            je .L_402ca0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402ca0:

            mov RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSI+8],RAX
            mov QWORD PTR [RDI+24],RSI
            xor EAX,EAX
            ret 
.L_402caf:

            nop
.L_402cb0:

            mov RDX,QWORD PTR [RDI+24]
            test RDX,RDX
            je .L_402cd1

            cmp RDX,RSI
            jne .L_402cc8

            jmp .L_402cf0
.L_402cc0:

            cmp RAX,RSI
            je .L_402ce0

            mov RDX,RAX
.L_402cc8:

            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_402cc0
.L_402cd1:

            mov QWORD PTR [RSI+8],RSI
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402ce0:

            mov RAX,QWORD PTR [RSI+8]
            mov QWORD PTR [RDX+8],RAX
            mov QWORD PTR [RSI+8],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402cf0:

            mov RAX,QWORD PTR [RSI+8]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RSI+8],RSI
            ret 
.L_402cfd:

            nop
            nop
            nop
.L_402d00:

            xor EAX,EAX
            test RSI,RSI
            je .L_402d40

            mov RCX,QWORD PTR [RDI+32]
            test RCX,RCX
            je .L_402d30

            cmp RCX,RSI
            mov EAX,3
            je .L_402d20

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402d20:

            cmp QWORD PTR [RDI+40],RDX
            mov EDX,24
            cmove EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402d30:

            mov QWORD PTR [RDI+32],RSI
            mov QWORD PTR [RDI+40],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402d40:

            ret 
.L_402d42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402d50:

            test RSI,RSI
            je .L_402d61

            cmp QWORD PTR [RDI+32],RSI
            jne .L_402d61

            cmp RDX,QWORD PTR [RDI+40]
            je .L_402d68
.L_402d61:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402d68:

            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+40],0
            ret 
.L_402d79:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402d80:

            or DWORD PTR [RDI],ESI
            add RDI,8
            jmp .L_405290
.L_402d8b:

            nop
            nop
            nop
            nop
            nop
.L_402d90:

            push R12
            push RBP
            push RBX
            mov EBP,DWORD PTR [RDI]
            test EBP,EBP
            je .L_402ddf

            mov RBX,QWORD PTR [RDI+24]
            mov R12,RDI
            mov DWORD PTR [RDI],0
            test RBX,RBX
            je .L_402dc8

            nop
            nop
            nop
            nop
.L_402db0:

            mov RAX,QWORD PTR [RBX]
            test RAX,RAX
            je .L_402dbf

            mov ESI,EBP
            mov RDI,RBX
            call RAX
.L_402dbf:

            mov RBX,QWORD PTR [RBX+8]
            test RBX,RBX
            jne .L_402db0
.L_402dc8:

            mov RAX,QWORD PTR [R12+32]
            test RAX,RAX
            je .L_402ddf

            pop RBX
            mov RSI,QWORD PTR [R12+40]
            mov EDI,EBP
            pop RBP
            pop R12
            jmp RAX
.L_402ddf:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_402de4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402df0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a30

            add RSP,8
            mov RDI,RAX
            jmp .L_402d90
.L_402e0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_402e10:

            ret 
.L_402e12:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402e20:

            xor EAX,EAX
            ret 
.L_402e23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402e30:

            movzx EDX,BYTE PTR [RSI+79]
            mov QWORD PTR [RSI+48],RDI
            or EDX,4
            mov BYTE PTR [RSI+79],DL
            and EDX,3
            movzx R8D,DL
            mov ECX,EDX
.L_402e47:

            movzx EAX,CL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_402e90

            test CL,CL
            jne .L_402e78

            cmp DL,3
            je .L_402e80

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_402e90

            cmp DL,2
            je .L_402e80

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_402e90

            mov ECX,2
.L_402e78:

            sub ECX,1
            cmp DL,CL
            jne .L_402e47

            nop
.L_402e80:

            mov QWORD PTR [RSI+16],RSI
            mov QWORD PTR [RSI+32],RSI
            jmp .L_402ea4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402e90:

            mov RDX,QWORD PTR [RAX+16]
            mov QWORD PTR [RSI+32],RAX
            mov QWORD PTR [RSI+16],RDX
            mov QWORD PTR [RDX+32],RSI
            mov QWORD PTR [RAX+16],RSI
.L_402ea4:

            mov QWORD PTR [RDI+R8*8],RSI
            movzx EDX,BYTE PTR [RSI+79]
            mov RCX,QWORD PTR [RSI+40]
            and EDX,3
            movzx R8D,DL
            mov EDI,EDX
.L_402eb9:

            movzx EAX,DIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_402f18

            test DIL,DIL
            jne .L_402ef6

            cmp DL,3
            je .L_402efe

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_402f18

            cmp DL,2
            je .L_402efe

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_402f18

            mov EDI,2
.L_402ef6:

            sub EDI,1
            cmp DL,DIL
            jne .L_402eb9
.L_402efe:

            mov QWORD PTR [RSI+8],RSI
            mov QWORD PTR [RSI+24],RSI
            xor EAX,EAX
            mov QWORD PTR [RCX+R8*8+5136],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402f18:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RSI+24],RAX
            mov QWORD PTR [RSI+8],RDX
            mov QWORD PTR [RDX+24],RSI
            mov QWORD PTR [RAX+8],RSI
            mov QWORD PTR [RCX+R8*8+5136],RSI
            xor EAX,EAX
            ret 
.L_402f37:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402f40:

            movzx EAX,BYTE PTR [RSI+79]
            and EAX,3
            movzx EDX,AL
            lea RDI,QWORD PTR [RDI+RDX*8]
            mov RDX,QWORD PTR [RSI+32]
            mov RCX,QWORD PTR [RDI]
            cmp RSI,RCX
            je .L_402fd0
.L_402f5a:

            mov RAX,QWORD PTR [RSI+16]
            mov QWORD PTR [RAX+32],RDX
            mov RAX,QWORD PTR [RSI+32]
            mov RDX,QWORD PTR [RSI+16]
            mov QWORD PTR [RAX+16],RDX
            movzx EAX,BYTE PTR [RSI+79]
            mov RDX,QWORD PTR [RSI+40]
            mov QWORD PTR [RSI+16],0
            mov QWORD PTR [RSI+32],0
            and EAX,3
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RCX*8]
            cmp RSI,QWORD PTR [RDX+5136]
            je .L_403000
.L_402f99:

            mov RAX,QWORD PTR [RSI+8]
            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov RAX,QWORD PTR [RSI+24]
            mov RDX,QWORD PTR [RSI+8]
            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RSI+8],0
            xor EAX,EAX
            mov QWORD PTR [RSI+24],0
            mov QWORD PTR [RSI+48],0
            and BYTE PTR [RSI+79],251
            ret 
.L_402fd0:

            cmp RSI,RDX
            je .L_403030

            movzx R8D,BYTE PTR [RDX+79]
            and R8D,3
            cmp AL,R8B
            mov EAX,0
            cmovne RDX,RAX
.L_402fea:

            mov QWORD PTR [RDI],RDX
            mov RDX,QWORD PTR [RCX+32]
            jmp .L_402f5a
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403000:

            mov RCX,QWORD PTR [RSI+24]
            cmp RSI,RCX
            je .L_403038

            movzx EDI,BYTE PTR [RCX+79]
            and EDI,3
            cmp AL,DIL
            mov EAX,0
            cmovne RCX,RAX
.L_40301c:

            mov QWORD PTR [RDX+5136],RCX
            jmp .L_402f99
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403030:

            xor EDX,EDX
            jmp .L_402fea
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403038:

            xor ECX,ECX
            jmp .L_40301c
.L_40303c:

            nop
            nop
            nop
            nop
.L_403040:

            mov QWORD PTR [RDI+5136],0
            mov QWORD PTR [RDI+5144],0
            mov RSI,RDI
            mov QWORD PTR [RDI+5152],0
            mov QWORD PTR [RDI+5160],0
            lea R8,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+5120],0
            lea RDX,QWORD PTR [RDI+5128]
            lea RDI,QWORD PTR [RDI+16]
            mov RCX,R8
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,5120
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RAX,QWORD PTR [RSI+136]
            mov QWORD PTR [RSI+5128],R8
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4030c0:

            mov QWORD PTR [RAX-128],RAX
            sub RAX,-128
            cmp RAX,RDX
            jne .L_4030c0

            mov EAX,40
            mov QWORD PTR [RSI+5000],0
            mov WORD PTR [RSI],AX
            ret 
.L_4030e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4030f0:

            sub RSP,8
.L_4030f4:

            cmp QWORD PTR [RSI+8],0
            jne .L_403141

            cmp QWORD PTR [RSI+24],0
            jne .L_403141

            cmp QWORD PTR [RSI+16],0
            jne .L_403160

            cmp QWORD PTR [RSI+32],0
            jne .L_403160

            mov RDX,QWORD PTR [RDI+5128]
            jmp .L_403123
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403120:

            mov RSI,RAX
.L_403123:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RSI],RDX
            mov RDX,RSI
            add WORD PTR [RDI],1
            mov QWORD PTR [RDI+5128],RSI
            test RAX,RAX
            jne .L_403120

            add RSP,8
.L_403140:

            ret 
.L_403141:

            lea RCX,QWORD PTR [RIP+.L_4051c0]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404bd8]
            mov EDX,95
            call __assert_fail@PLT
.L_403160:

            lea RCX,QWORD PTR [RIP+.L_4051c0]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404c38]
            mov EDX,97
            call __assert_fail@PLT
.L_40317f:

            nop
.L_403180:

            mov RAX,QWORD PTR [RDI+5128]
            test RAX,RAX
            je .L_4031a1

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RDI+5128],RDX
            mov QWORD PTR [RAX],0
            sub WORD PTR [RDI],1
.L_4031a1:

            ret 
.L_4031a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4031b0:

            test RSI,RSI
            je .L_4031dc

            mov RDX,QWORD PTR [RDI+5128]
            jmp .L_4031c3
          .byte 0x66
          .byte 0x90
.L_4031c0:

            mov RSI,RAX
.L_4031c3:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RSI],RDX
            mov RDX,RSI
            add WORD PTR [RDI],1
            mov QWORD PTR [RDI+5128],RSI
            test RAX,RAX
            jne .L_4031c0
.L_4031dc:

            ret 
.L_4031de:

            nop
            nop
.L_4031e0:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
            jmp .L_403208
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4031f0:

            mov RDI,RBX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+14976]
            call .L_414ad0

            test EAX,EAX
            jne .L_403220
.L_403208:

            movzx EAX,WORD PTR [RBX]
            cmp EAX,EBP
            jl .L_4031f0
.L_40320f:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403220:

            movzx EDX,WORD PTR [RBX]
            mov EAX,3
            cmp EDX,EBP
            jge .L_40320f

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_403233:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403240:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_40328f

            mov RCX,QWORD PTR [RAX+40]
            mov RDX,QWORD PTR [RCX+5160]
            test RDX,RDX
            jne .L_403288

            mov RDX,QWORD PTR [RCX+5152]
            test RDX,RDX
            jne .L_403288

            mov RDX,QWORD PTR [RCX+5144]
            test RDX,RDX
            jne .L_403288

            mov RDX,QWORD PTR [RCX+5136]
            test RDX,RDX
            jne .L_403288
.L_40327c:

            mov RAX,QWORD PTR [RAX+8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403288:

            cmp RAX,RDX
            jne .L_40327c

            xor EAX,EAX
.L_40328f:

            ret 
.L_403291:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4032a0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_4032e8

            mov RCX,QWORD PTR [RAX+40]
            mov RDX,QWORD PTR [RCX+5160]
            test RDX,RDX
            jne .L_4032f0

            mov RDX,QWORD PTR [RCX+5152]
            test RDX,RDX
            jne .L_4032f0

            mov RDX,QWORD PTR [RCX+5144]
            test RDX,RDX
            jne .L_4032f0

            mov RDX,QWORD PTR [RCX+5136]
            test RDX,RDX
            jne .L_4032f0
.L_4032dc:

            mov RAX,QWORD PTR [RAX+24]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4032e8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4032f0:

            cmp RAX,QWORD PTR [RDX+8]
            jne .L_4032dc

            xor EAX,EAX
            ret 
.L_4032f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403300:

            mov RAX,QWORD PTR [RDI+5160]
            test RAX,RAX
            jne .L_403338

            mov RAX,QWORD PTR [RDI+5152]
            test RAX,RAX
            jne .L_403338

            mov RAX,QWORD PTR [RDI+5144]
            test RAX,RAX
            jne .L_403338

            mov RAX,QWORD PTR [RDI+5136]
            test RAX,RAX
            jne .L_403338

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403338:

            mov RAX,QWORD PTR [RAX+8]
            ret 
.L_40333d:

            nop
            nop
            nop
.L_403340:

            cmp SI,48
            mov R8D,ESI
            mov RCX,RDI
            jbe .L_4033f6

            mov EDX,48
            jmp .L_40336c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403360:

            add EDX,120
            mov RCX,RAX
            cmp R8W,DX
            jbe .L_4033a8
.L_40336c:

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            jne .L_403360

            mov RSI,QWORD PTR [RDI+40]
            mov RAX,QWORD PTR [RSI+5128]
            test RAX,RAX
            je .L_4033f0

            mov R9,QWORD PTR [RAX]
            add EDX,120
            mov QWORD PTR [RSI+5128],R9
            mov QWORD PTR [RAX],0
            sub WORD PTR [RSI],1
            cmp R8W,DX
            mov QWORD PTR [RCX],RAX
            mov RCX,RAX
            ja .L_40336c
.L_4033a8:

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RAX],0
            mov RAX,QWORD PTR [RDI+40]
            test RDX,RDX
            je .L_4033e4

            mov RSI,QWORD PTR [RAX+5128]
            jmp .L_4033cb
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4033c8:

            mov RDX,RCX
.L_4033cb:

            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RDX],RSI
            mov RSI,RDX
            add WORD PTR [RAX],1
            mov QWORD PTR [RAX+5128],RDX
            test RCX,RCX
            jne .L_4033c8
.L_4033e4:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4033f0:

            mov EAX,3
            ret 
.L_4033f6:

            mov RAX,RDI
            jmp .L_4033a8
.L_4033fb:

            nop
            nop
            nop
            nop
            nop
.L_403400:

            mov RSI,RDI
            mov RDI,QWORD PTR [RDI+40]
            jmp .L_4030f0
.L_40340c:

            nop
            nop
            nop
            nop
.L_403410:

            test BYTE PTR [RDI+79],4
            mov RDX,QWORD PTR [RDI+48]
            je .L_403450

            test RDX,RDX
            je .L_403468

            mov RAX,QWORD PTR [RDX+24]
            test RAX,RAX
            jne .L_403458

            mov RAX,QWORD PTR [RDX+16]
            test RAX,RAX
            jne .L_403458

            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_403458

            mov RAX,QWORD PTR [RDX]
            test RAX,RAX
            jne .L_403458

            mov RAX,QWORD PTR [RDI+16]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403450:

            test RDX,RDX
            je .L_403468

            mov RAX,QWORD PTR [RDX]
.L_403458:

            cmp RAX,RDI
            je .L_403468

            mov RAX,QWORD PTR [RDI+16]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403468:

            xor EAX,EAX
            ret 
.L_40346b:

            nop
            nop
            nop
            nop
            nop
.L_403470:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_403477:

            movzx EAX,WORD PTR [RDI+56]
            mov EBX,ESI
            lea R12D,DWORD PTR [RAX+RSI*1]
            add AX,WORD PTR [RDI+58]
            xor ESI,ESI
            cmp R12W,48
            mov ECX,EAX
            jbe .L_4034a6

            movzx EDX,R12W
            mov ESI,2290649225
            sub EDX,49
            mov EAX,EDX
            mul ESI
            shr EDX,6
            lea ESI,DWORD PTR [RDX+1]
.L_4034a6:

            cmp CX,48
            jbe .L_4034c3

            movzx EDX,CX
            mov ECX,2290649225
            sub EDX,49
            mov EAX,EDX
            mul ECX
            shr EDX,6
            add EDX,1
            sub ESI,EDX
.L_4034c3:

            mov RDI,QWORD PTR [RBP+40]
            call .L_4031e0

            test EAX,EAX
            je .L_4034d8
.L_4034d0:

            pop RBX
.L_4034d1:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4034d8:

            movzx ESI,R12W
            mov RDI,RBP
            call .L_403340

            test EAX,EAX
            jne .L_4034d0

            mov WORD PTR [RBP+58],BX
            pop RBX
            pop RBP
            pop R12
            ret 
.L_4034f1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403500:

            mov RDX,QWORD PTR [RDI]
            mov EAX,1
            test RDX,RDX
            je .L_403520

            nop
            nop
            nop
.L_403510:

            mov RDX,QWORD PTR [RDX]
            add EAX,1
            test RDX,RDX
            jne .L_403510

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403520:

            ret 
.L_403522:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403530:

            sub RSP,8
            movzx EDX,WORD PTR [RDI+60]
            movzx R8D,WORD PTR [RDI+58]
            mov EAX,EDX
            add EDX,ESI
            cmp EDX,R8D
            jg .L_403559

            add EAX,ESI
            cmp AX,R8W
            mov WORD PTR [RDI+60],AX
            ja .L_403578

            xor EAX,EAX
            add RSP,8
            ret 
.L_403559:

            lea RCX,QWORD PTR [RIP+.L_405180]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404ca8]
            mov EDX,336
            call __assert_fail@PLT
.L_403578:

            lea RCX,QWORD PTR [RIP+.L_405180]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404cd0]
            mov EDX,340
            call __assert_fail@PLT
.L_403597:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4035a0:

            cmp SI,WORD PTR [RDI+58]
            ja .L_4035ad

            mov WORD PTR [RDI+60],SI
            xor EAX,EAX
            ret 
.L_4035ad:

            sub RSP,8
            call .L_400f00
.L_4035b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4035c0:

            movzx ECX,BYTE PTR [RDI+78]
            xor EAX,EAX
            and ECX,60
            cmp CL,36
            ja .L_4035de

            movabs RAX,73031225616
            shr RAX,CL
            and EAX,1
.L_4035de:

            ret 
.L_4035e0:

            cmp SIL,3
            mov EAX,7
            ja .L_4036ea

            mov R9,QWORD PTR [RDI+48]
            test R9,R9
            je .L_403720

            movzx ECX,BYTE PTR [RDI+79]
            movzx R8D,SIL
            mov R10D,ECX
            and R10D,3
            movzx EAX,R10B
            cmp EAX,R8D
            je .L_4036e8

            mov R11D,ESI
            push RBX
.L_40361c:

            and R11D,3
            and ECX,4
            jne .L_403750

            mov RAX,QWORD PTR [RDI+40]
            movzx ECX,R10B
            mov EDX,ESI
            lea R9,QWORD PTR [RAX+RCX*8]
            mov RCX,QWORD PTR [RDI+24]
            mov RAX,QWORD PTR [R9+5136]
            cmp RDI,RAX
            je .L_4036f0
.L_40364b:

            mov RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RAX+24],RCX
            mov RAX,QWORD PTR [RDI+24]
            mov RCX,QWORD PTR [RDI+8]
            mov QWORD PTR [RAX+8],RCX
            movzx EAX,BYTE PTR [RDI+79]
            mov RCX,QWORD PTR [RDI+40]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+24],0
            and EAX,4294967292
            or EAX,R11D
            mov BYTE PTR [RDI+79],AL
.L_403680:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_403738

            test SIL,SIL
            jne .L_4036c5

            cmp DL,3
            je .L_4036d0

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_403738

            cmp DL,2
            je .L_4036d0

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_403738

            mov ESI,2
.L_4036c5:

            sub ESI,1
            cmp DL,SIL
            jne .L_403680

            nop
            nop
            nop
.L_4036d0:

            mov QWORD PTR [RDI+8],RDI
            mov QWORD PTR [RDI+24],RDI
.L_4036d8:

            mov QWORD PTR [RCX+R8*8+5136],RDI
.L_4036e0:

            xor EAX,EAX
            pop RBX
.L_4036e3:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4036e8:

            xor EAX,EAX
.L_4036ea:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4036f0:

            cmp RDI,RCX
            je .L_403788

            movzx EBX,BYTE PTR [RCX+79]
            and EBX,3
            cmp R10B,BL
            mov R10D,0
            cmovne RCX,R10
.L_40370d:

            mov QWORD PTR [R9+5136],RCX
            mov RCX,QWORD PTR [RAX+24]
            jmp .L_40364b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403720:

            movzx EAX,BYTE PTR [RDI+79]
            and ESI,3
            and EAX,4294967292
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+79],SIL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403738:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RDI+8],RDX
            mov QWORD PTR [RDX+24],RDI
            mov QWORD PTR [RAX+8],RDI
            jmp .L_4036d8
          .byte 0x66
          .byte 0x90
.L_403750:

            mov R10,RDI
            mov RSI,RDI
            mov RDI,R9
            call .L_402f40

            movzx EAX,BYTE PTR [R10+79]
            and EAX,4294967292
            or EAX,R11D
            cmp QWORD PTR [R10+48],0
            mov BYTE PTR [R10+79],AL
            jne .L_4036e0

            mov RDI,R9
            call .L_402e30

            xor EAX,EAX
            pop RBX
.L_403783:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403788:

            xor ECX,ECX
            jmp .L_40370d
.L_40378f:

            nop
.L_403790:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBP,ESI
            mov ESI,1
            mov R12D,EDX
            sub RSP,8
.L_4037a7:

            call .L_4031e0

            test EAX,EAX
            jne .L_403848

            mov RBX,QWORD PTR [R13+5128]
            test RBX,RBX
            je .L_403836

            lea RDI,QWORD PTR [RBX+8]
            mov RAX,QWORD PTR [RBX]
            mov RCX,RBX
            and EBP,3
            and RDI,-8
            sub RCX,RDI
            mov QWORD PTR [R13+5128],RAX
            xor EAX,EAX
            sub ECX,-128
            mov QWORD PTR [RBX],0
            sub WORD PTR [R13],1
            shr ECX,3
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+120],0

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            mov QWORD PTR [RBX+40],R13
            mov WORD PTR [RBX+56],R12W
            movzx ESI,BYTE PTR [RBX+78]
            and ESI,4294967292
            or ESI,EBP
            or ESI,4294967168
            mov BYTE PTR [RBX+78],SIL
            mov ESI,2
            call .L_4035e0

            xor ESI,ESI
            mov RDI,RBX
            call .L_403470

            test EAX,EAX
            jne .L_403850
.L_403836:

            add RSP,8
.L_40383a:

            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403848:

            xor EBX,EBX
            jmp .L_403836
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403850:

            mov RSI,RBX
            mov RDI,R13
            xor EBX,EBX
            call .L_4030f0

            jmp .L_403836
.L_40385f:

            nop
.L_403860:

            movzx EAX,WORD PTR [RDI+58]
            cmp AX,SI
            jb .L_40388d

            movzx EDX,WORD PTR [RDI+60]
            sub EAX,ESI
            add WORD PTR [RDI+56],SI
            mov WORD PTR [RDI+58],AX
            mov EAX,EDX
            sub EAX,ESI
            cmp DX,SI
            mov EDX,0
            cmovbe EAX,EDX
            mov WORD PTR [RDI+60],AX
            xor EAX,EAX
            ret 
.L_40388d:

            lea RCX,QWORD PTR [RIP+.L_4050c0]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d00]
            sub RSP,8

            mov EDX,463
            call __assert_fail@PLT
.L_4038b0:

            movzx EAX,WORD PTR [RDI+58]
            cmp SI,AX
            jae .L_403a20

            push RBP
            mov R10D,EDX
            push RBX
            mov R11,RCX
            movzx EDX,DX
            movzx ECX,SI
            add EDX,ECX
            movzx ECX,AX
            sub RSP,8
.L_4038d4:

            sub EAX,ESI
            cmp EDX,ECX
            cmovge R10D,EAX
            add SI,WORD PTR [RDI+56]
            cmp SI,47
            jbe .L_4039d0

            lea EDX,DWORD PTR [RSI-48]
            mov R9,QWORD PTR [RDI]
            cmp DX,119
            jbe .L_403915

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403900:

            test R9,R9
            je .L_403ac9

            sub EDX,120
            mov R9,QWORD PTR [R9]
            cmp DX,119
            ja .L_403900
.L_403915:

            xor EAX,EAX
.L_403917:

            test R10W,R10W
            je .L_4039c7

            test R9,R9
            je .L_403ae8

            mov EBP,120
            jmp .L_40396e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403938:

            test BL,4
            jne .L_403a28

            test EBX,EBX
            je .L_403954

            movzx EDX,BYTE PTR [RSI]
            test BL,2
            mov BYTE PTR [R11],DL
            jne .L_403a90
.L_403954:

            add EAX,R8D
            add R11,RBX
            sub R10W,R8W
            mov R9,QWORD PTR [R9]
            je .L_4039c7
.L_403963:

            xor EDX,EDX
            test R9,R9
            je .L_403ae8
.L_40396e:

            mov R8D,EBP
            sub R8D,EDX
            movzx EDX,DX
            cmp R8W,R10W
            lea RSI,QWORD PTR [R9+RDX*1+8]
            cmova R8D,R10D
            movzx EBX,R8W
            cmp EBX,8
            jb .L_403938

            mov RDX,QWORD PTR [RSI]
            lea RDI,QWORD PTR [R11+8]
            add EAX,R8D
            and RDI,-8
            mov QWORD PTR [R11],RDX
            mov EDX,EBX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [R11+RDX*1-8],RCX
            mov RCX,R11
            add R11,RBX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EBX
            shr ECX,3
            sub R10W,R8W

            rep movsq 

            mov R9,QWORD PTR [R9]
            jne .L_403963
.L_4039c7:

            add RSP,8
.L_4039cb:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_4039d0:

            mov EAX,48
            sub EAX,ESI
            movzx ESI,SI
            cmp R10W,AX
            lea RSI,QWORD PTR [RDI+RSI*1+80]
            cmovbe EAX,R10D
            movzx EDX,AX
            cmp EDX,8
            jae .L_403a40

            test DL,4
            jne .L_403aa2

            test EDX,EDX
            je .L_403a0b

            movzx ECX,BYTE PTR [RSI]
            test DL,2
            mov BYTE PTR [R11],CL
            jne .L_403ab7
.L_403a0b:

            add R11,RDX
            sub R10D,EAX
            mov R9,QWORD PTR [RDI]
            xor EDX,EDX
            jmp .L_403917
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403a20:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403a28:

            mov EDX,DWORD PTR [RSI]
            mov DWORD PTR [R11],EDX
            mov EDX,EBX
            mov ECX,DWORD PTR [RSI+RDX*1-4]
            mov DWORD PTR [R11+RDX*1-4],ECX
            jmp .L_403954
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403a40:

            mov RCX,QWORD PTR [RSI]
            mov QWORD PTR [R11],RCX
            mov ECX,EDX
            mov R8,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [R11+RCX*1-8],R8
            lea R8,QWORD PTR [R11+8]
            mov RCX,R11
            and R8,-8
            sub RCX,R8
            sub RSI,RCX
            add ECX,EDX
            and ECX,4294967288
            cmp ECX,8
            jb .L_403a0b

            and ECX,4294967288
            xor R9D,R9D
.L_403a73:

            mov EBX,R9D
            add R9D,8
            mov RBP,QWORD PTR [RSI+RBX*1]
            cmp R9D,ECX
            mov QWORD PTR [R8+RBX*1],RBP
            jb .L_403a73

            jmp .L_403a0b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403a90:

            mov EDX,EBX
            movzx ECX,WORD PTR [RSI+RDX*1-2]
            mov WORD PTR [R11+RDX*1-2],CX
            jmp .L_403954
.L_403aa2:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [R11],ECX
            mov ECX,EDX
            mov ESI,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R11+RCX*1-4],ESI
            jmp .L_403a0b
.L_403ab7:

            mov ECX,EDX
            movzx ESI,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R11+RCX*1-2],SI
            jmp .L_403a0b
.L_403ac9:

            lea RCX,QWORD PTR [RIP+.L_405080]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,526
            call __assert_fail@PLT
.L_403ae8:

            lea RCX,QWORD PTR [RIP+.L_405080]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,535
            call __assert_fail@PLT
.L_403b07:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403b10:

            push R14
            push RBX
            mov R11,RCX
            mov R9D,EDX
            movzx EAX,SI
            movzx EDX,DX
            sub RSP,8
.L_403b23:

            movzx ECX,WORD PTR [RDI+58]
            add EDX,EAX
            cmp EDX,ECX
            jg .L_403d57

            mov EAX,ECX
            sub EAX,ESI
            cmp EDX,ECX
            cmovge R9D,EAX
            add SI,WORD PTR [RDI+56]
            cmp SI,47
            ja .L_403bc0

            mov EAX,48
            sub EAX,ESI
            movzx ESI,SI
            cmp R9W,AX
            lea RDX,QWORD PTR [RDI+RSI*1+80]
            cmovbe EAX,R9D
            movzx ECX,AX
            cmp ECX,8
            jb .L_403cc0

            mov RSI,QWORD PTR [R11]
            mov RBX,R11
            mov QWORD PTR [RDX],RSI
            mov ESI,ECX
            mov R8,QWORD PTR [R11+RSI*1-8]
            mov QWORD PTR [RDX+RSI*1-8],R8
            lea RSI,QWORD PTR [RDX+8]
            and RSI,-8
            sub RDX,RSI
            sub RBX,RDX
            add EDX,ECX
            and EDX,4294967288
            cmp EDX,8
            jb .L_403bb0

            and EDX,4294967288
            xor R8D,R8D
.L_403b9b:

            mov R10D,R8D
            add R8D,8
            mov R14,QWORD PTR [RBX+R10*1]
            cmp R8D,EDX
            mov QWORD PTR [RSI+R10*1],R14
            jb .L_403b9b

            nop
.L_403bb0:

            add R11,RCX
            sub R9D,EAX
            mov R8,QWORD PTR [RDI]
            xor ECX,ECX
            jmp .L_403be7
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403bc0:

            lea ECX,DWORD PTR [RSI-48]
            mov R8,QWORD PTR [RDI]
            cmp CX,119
            jbe .L_403be5

            nop
            nop
            nop
            nop
.L_403bd0:

            test R8,R8
            je .L_403d19

            sub ECX,120
            mov R8,QWORD PTR [R8]
            cmp CX,119
            ja .L_403bd0
.L_403be5:

            xor EAX,EAX
.L_403be7:

            test R9W,R9W
            je .L_403c9a

            test R8,R8
            je .L_403d38

            mov EBX,120
            jmp .L_403c41
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403c08:

            test R10B,4
            jne .L_403ca8

            test R10D,R10D
            je .L_403c28

            movzx ESI,BYTE PTR [R11]
            test R10B,2
            mov BYTE PTR [RCX],SIL
            jne .L_403cf0
.L_403c28:

            add EAX,EDX
            add R11,R10
            sub R9W,DX
            mov R8,QWORD PTR [R8]
            je .L_403c9a
.L_403c36:

            xor ECX,ECX
            test R8,R8
            je .L_403d38
.L_403c41:

            mov EDX,EBX
            sub EDX,ECX
            movzx ECX,CX
            cmp DX,R9W
            lea RCX,QWORD PTR [R8+RCX*1+8]
            cmova EDX,R9D
            movzx R10D,DX
            cmp R10D,8
            jb .L_403c08

            mov RSI,QWORD PTR [R11]
            add EAX,EDX
            mov QWORD PTR [RCX],RSI
            mov ESI,R10D
            mov RDI,QWORD PTR [R11+RSI*1-8]
            mov QWORD PTR [RCX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,R11
            add R11,R10
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R10D
            shr ECX,3
            sub R9W,DX

            rep movsq 

            mov R8,QWORD PTR [R8]
            jne .L_403c36
.L_403c9a:

            add RSP,8
.L_403c9e:

            movzx EAX,AX
            pop RBX
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403ca8:

            mov ESI,DWORD PTR [R11]
            mov DWORD PTR [RCX],ESI
            mov ESI,R10D
            mov EDI,DWORD PTR [R11+RSI*1-4]
            mov DWORD PTR [RCX+RSI*1-4],EDI
            jmp .L_403c28
          .byte 0x66
          .byte 0x90
.L_403cc0:

            test CL,4
            jne .L_403d03

            test ECX,ECX
            je .L_403bb0

            movzx ESI,BYTE PTR [R11]
            test CL,2
            mov BYTE PTR [RDX],SIL
            je .L_403bb0

            mov ESI,ECX
            movzx R8D,WORD PTR [R11+RSI*1-2]
            mov WORD PTR [RDX+RSI*1-2],R8W
            jmp .L_403bb0
.L_403cf0:

            mov ESI,R10D
            movzx EDI,WORD PTR [R11+RSI*1-2]
            mov WORD PTR [RCX+RSI*1-2],DI
            jmp .L_403c28
.L_403d03:

            mov ESI,DWORD PTR [R11]
            mov DWORD PTR [RDX],ESI
            mov ESI,ECX
            mov R8D,DWORD PTR [R11+RSI*1-4]
            mov DWORD PTR [RDX+RSI*1-4],R8D
            jmp .L_403bb0
.L_403d19:

            lea RCX,QWORD PTR [RIP+.L_405040]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,601
            call __assert_fail@PLT
.L_403d38:

            lea RCX,QWORD PTR [RIP+.L_405040]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,610
            call __assert_fail@PLT
.L_403d57:

            lea RCX,QWORD PTR [RIP+.L_405040]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d28]
            mov EDX,564
            call __assert_fail@PLT
.L_403d76:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403d80:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            movzx R13D,WORD PTR [RDI+58]
            mov RBP,RDI
            mov EBX,EDX
            lea ESI,DWORD PTR [R13+RDX*1]
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            mov R14D,EAX
            je .L_403db8
.L_403da9:

            pop RBX
            mov EAX,R14D
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403db8:

            movzx EBX,BX
            movzx ESI,R13W
            mov RCX,R12
            mov EDX,EBX
            mov RDI,RBP
            call .L_403b10

            cmp EBX,EAX
            je .L_403da9

            lea RCX,QWORD PTR [RIP+.L_405100]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404ba3]
            mov EDX,419
            call __assert_fail@PLT
.L_403def:

            nop
.L_403df0:

            movzx EAX,WORD PTR [RDI+56]
            push R14
            push RBP
            push RBX
.L_403df8:

            cmp DX,AX
            jbe .L_403ec0

            mov RAX,QWORD PTR [RDI+40]
            mov R10D,EDX
            mov ECX,48
            lea R11,QWORD PTR [RDI+80]
            mov R8,QWORD PTR [RAX+5128]
            test R8,R8
            jne .L_403e4d

            jmp .L_403f58
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403e28:

            add EAX,120
            cmp AX,R10W
            mov WORD PTR [RDI+56],AX
            jae .L_403ec0
.L_403e39:

            mov RAX,QWORD PTR [RDI+40]
            mov R8,QWORD PTR [RAX+5128]
            test R8,R8
            je .L_403f58
.L_403e4d:

            mov R9,QWORD PTR [R8]
            mov QWORD PTR [RAX+5128],R9
            mov QWORD PTR [R8],0
            sub WORD PTR [RAX],1
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [R8],RAX
            movzx EAX,WORD PTR [RDI+56]
            mov QWORD PTR [RDI],R8
            cmp AX,47
            ja .L_403e28

            movzx R9D,AX
            mov RBX,RCX
            sub RBX,R9
            lea R8,QWORD PTR [R8+R9*1+80]
            add R9,R11
            cmp EBX,8
            jae .L_403f00

            test BL,4
            jne .L_403f68

            test EBX,EBX
            je .L_403e28

            movzx EAX,BYTE PTR [R9]
            test BL,2
            mov BYTE PTR [R8],AL
            jne .L_403f83
.L_403ea9:

            movzx EAX,WORD PTR [RDI+56]
.L_403ead:

            add EAX,120
            cmp AX,R10W
            mov WORD PTR [RDI+56],AX
            jb .L_403e39

            nop
            nop
.L_403ec0:

            sub EAX,EDX
            movzx ECX,WORD PTR [RDI+58]
            mov WORD PTR [RDI+56],AX
            movzx EAX,WORD PTR [RDI+60]
            add ECX,EDX
            add EAX,EDX
            mov WORD PTR [RDI+58],CX
            cmp CX,AX
            jb .L_403f9a

            xor EBX,EBX
            test RSI,RSI
            mov WORD PTR [RDI+60],AX
            je .L_403ef7

            mov RCX,RSI
            movzx EDX,DX
            xor ESI,ESI
            call .L_403b10
.L_403ef7:

            mov EAX,EBX
            pop RBX
.L_403efa:

            pop RBP
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_403f00:

            mov RAX,QWORD PTR [R9]
            mov QWORD PTR [R8],RAX
            mov EAX,EBX
            mov RBP,QWORD PTR [R9+RAX*1-8]
            mov QWORD PTR [R8+RAX*1-8],RBP
            lea RBP,QWORD PTR [R8+8]
            and RBP,-8
            sub R8,RBP
            lea EAX,DWORD PTR [RBX+R8*1]
            sub R9,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_403ea9

            and EAX,4294967288
            xor R8D,R8D
.L_403f36:

            mov EBX,R8D
            add R8D,8
            mov R14,QWORD PTR [R9+RBX*1]
            cmp R8D,EAX
            mov QWORD PTR [RBP+RBX*1],R14
            jb .L_403f36

            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403ead
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403f58:

            mov EBX,3
            mov EAX,EBX
            pop RBX
.L_403f60:

            pop RBP
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403f68:

            mov EAX,DWORD PTR [R9]
            mov DWORD PTR [R8],EAX
            mov EAX,EBX
            mov R9D,DWORD PTR [R9+RAX*1-4]
            mov DWORD PTR [R8+RAX*1-4],R9D
            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403e28
.L_403f83:

            mov EAX,EBX
            movzx R9D,WORD PTR [R9+RAX*1-2]
            mov WORD PTR [R8+RAX*1-2],R9W
            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403e28
.L_403f9a:

            call .L_400f00
.L_403f9f:

            nop
.L_403fa0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,72
.L_403fae:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test CX,CX
            mov QWORD PTR [RSP+16],RDI
            mov QWORD PTR [RSP+24],R8
            je .L_404060

            lea RAX,QWORD PTR [RSP+32]
            mov R15D,ESI
            mov EBX,EDX
            mov R13D,ECX
            xor EBP,EBP
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
.L_403fe8:

            cmp R13W,16
            mov R14D,16
            mov RCX,QWORD PTR [RSP+8]
            cmovbe R14D,R13D
            mov RDI,QWORD PTR [RSP+16]
            movzx ESI,R15W
            movzx R12D,R14W
            add R15D,R14D
            add EBP,R14D
            mov EDX,R12D
            call .L_4038b0

            mov RCX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            movzx ESI,BX
            mov EDX,R12D
            add EBX,R14D
            call .L_403b10

            sub R13W,R14W
            jne .L_403fe8

            movzx EAX,BP
.L_404038:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_404064

            add RSP,72
.L_40404c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404060:

            xor EAX,EAX
            jmp .L_404038
.L_404064:

            call __stack_chk_fail@PLT
.L_404069:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404070:

            push R12
            mov R12D,ESI
            push RBP
            push RBX
.L_404077:

            movzx ESI,BYTE PTR [RDI+78]
            mov RBP,RDI
            movzx EDX,WORD PTR [RDI+56]
            mov RDI,QWORD PTR [RDI+40]
            and ESI,3
            call .L_403790

            test RAX,RAX
            mov RBX,RAX
            je .L_4040b7

            movzx R12D,R12W
            mov RDI,RAX
            mov ESI,R12D
            call .L_403470

            test EAX,EAX
            je .L_4040c0

            mov RDI,QWORD PTR [RBX+40]
            mov RSI,RBX
            xor EBX,EBX
            call .L_4030f0
.L_4040b7:

            mov RAX,RBX
            pop RBX
.L_4040bb:

            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_4040c0:

            xor EDX,EDX
            xor ESI,ESI
            mov R8,RBX
            mov ECX,R12D
            mov RDI,RBP
            call .L_403fa0

            movzx EAX,WORD PTR [RBP+60]
            cmp AX,WORD PTR [RBX+58]
            ja .L_404126

            mov WORD PTR [RBX+60],AX
            movzx EAX,BYTE PTR [RBP+75]
            mov RDI,RBX
            mov BYTE PTR [RBX+75],AL
            movzx EAX,BYTE PTR [RBX+78]
            movzx EDX,BYTE PTR [RBP+78]
            and EAX,4294967235
            and EDX,60
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            movzx ESI,BYTE PTR [RBP+79]
            and ESI,3
            call .L_4035e0

            movzx EAX,BYTE PTR [RBP+78]
            and EAX,4294967168
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+78]
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            mov RAX,RBX
            pop RBX
.L_404122:

            pop RBP
            pop R12
            ret 
.L_404126:

            call .L_400f00
.L_40412b:

            nop
            nop
            nop
            nop
            nop
.L_404130:

            cmp SIL,63
            ja .L_404155

            mov EAX,ESI
            mov ECX,ESI
            shr AL,3
            and ECX,7
            and EAX,31
            movzx EDX,BYTE PTR [RDI+RAX*1+66]
            mov EAX,128
            sar EAX,CL
            test EDX,EAX
            setne AL
            ret 
.L_404155:

            lea RCX,QWORD PTR [RIP+.L_45fd50-372048]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d50]
            sub RSP,8
            mov EDX,683
            call __assert_fail@PLT
.L_404178:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404180:

            cmp SIL,63
            ja .L_4041a1

            mov EDX,ESI
            mov ECX,ESI
            mov EAX,128
            shr DL,3
            and ECX,7
            and EDX,31
            sar EAX,CL
            not EAX
            and BYTE PTR [RDI+RDX*1+66],AL
            ret 
.L_4041a1:

            lea RCX,QWORD PTR [RIP+.L_404fc0]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d50]
            sub RSP,8
            mov EDX,689
            call __assert_fail@PLT
.L_4041c4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4041d0:

            cmp SIL,63
            ja .L_4041ef

            mov EAX,ESI
            mov ECX,ESI
            mov EDX,128
            shr AL,3
            and ECX,7
            and EAX,31
            sar EDX,CL
            or BYTE PTR [RDI+RAX*1+66],DL
            ret 
.L_4041ef:

            lea RCX,QWORD PTR [RIP+.L_404f80]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d50]
            sub RSP,8
            mov EDX,695
            call __assert_fail@PLT
.L_404212:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404220:

            lea RAX,QWORD PTR [RDI+66]
            add RDI,74
.L_404228:

            cmp BYTE PTR [RAX],0
            jne .L_404240

            add RAX,1
            cmp RAX,RDI
            jne .L_404228

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404240:

            mov EAX,1
            ret 
.L_404246:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404250:

            xor EDX,EDX
            add SI,DI
            jb .L_40425b
.L_404257:

            lea EAX,DWORD PTR [RDX+RSI*1]
            ret 
.L_40425b:

            mov EDX,1
            jmp .L_404257
.L_404262:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404270:

            test DX,DX
            je .L_4042b0

            movzx EDX,DX
            mov EAX,EDI
            xor EDI,EDI
            lea R8D,DWORD PTR [RDX-1]
            add R8,1
            nop
            nop
            nop
            nop
.L_404288:

            movzx ECX,BYTE PTR [RSI+RDI*1]
            test DIL,1
            movzx EDX,CL
            jne .L_40429b

            shl ECX,8
            movzx EDX,CX
.L_40429b:

            xor ECX,ECX
            add AX,DX
            jb .L_4042b3
.L_4042a2:

            add RDI,1
            add EAX,ECX
            cmp R8,RDI
            jne .L_404288

            ret 
          .byte 0x90
.L_4042b0:

            mov EAX,EDI
            ret 
.L_4042b3:

            mov ECX,1
            jmp .L_4042a2
.L_4042ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4042c0:

            movzx R8D,CX
            movzx EAX,DX
            push RBX
.L_4042c8:

            add EAX,R8D
            movzx R8D,WORD PTR [RDI+58]
            cmp EAX,R8D
            jg .L_404446

            movzx EAX,WORD PTR [RDI+56]
            mov R8,QWORD PTR [RDI]
            add EAX,EDX
            cmp AX,47
            ja .L_4043f4

            mov R9D,48
            sub R9D,EAX
            movzx EAX,AX
            cmp CX,R9W
            lea R11,QWORD PTR [RDI+RAX*1+80]
            cmovbe R9D,ECX
            test R9W,R9W
            je .L_404347

            movzx EAX,R9W
            xor EDX,EDX
            lea R10D,DWORD PTR [RAX-1]
            add R10,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404320:

            test DL,1
            movzx EAX,BYTE PTR [R11+RDX*1]
            jne .L_404330

            shl EAX,8
            movzx EAX,AX
.L_404330:

            xor EDI,EDI
            add AX,SI
            jb .L_404465
.L_40433b:

            add RDX,1
            lea ESI,DWORD PTR [RDI+RAX*1]
            cmp R10,RDX
            jne .L_404320
.L_404347:

            mov EAX,ECX
            sub EAX,R9D
            mov R9D,EAX
            xor EAX,EAX
.L_404351:

            test R9W,R9W
            je .L_4043f0

            test R8,R8
            je .L_4043c9

            mov R11D,120
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404370:

            mov EDI,R11D
            sub EDI,EAX
            movzx EAX,AX
            cmp DI,R9W
            lea R10,QWORD PTR [R8+RAX*1+8]
            cmova EDI,R9D
            xor ECX,ECX
            movzx EBX,DI
            nop
            nop
            nop
            nop
            nop
            nop
.L_404390:

            movzx EDX,BYTE PTR [R10+RCX*1]
            test CL,1
            movzx EAX,DL
            jne .L_4043a3

            shl EDX,8
            movzx EAX,DX
.L_4043a3:

            xor EDX,EDX
            add AX,SI
            jb .L_40443c
.L_4043ae:

            add RCX,1
            lea ESI,DWORD PTR [RDX+RAX*1]
            cmp EBX,ECX
            jg .L_404390

            sub R9W,DI
            mov R8,QWORD PTR [R8]
            je .L_4043f0

            xor EAX,EAX
            test R8,R8
            jne .L_404370
.L_4043c9:

            lea RCX,QWORD PTR [RIP+.L_404f20]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,779
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4043f0:

            mov EAX,ESI
            pop RBX
.L_4043f3:

            ret 
.L_4043f4:

            sub EAX,48
            mov R9D,ECX
            cmp AX,119
            ja .L_404418

            jmp .L_404351
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404408:

            sub EAX,120
            mov R8,QWORD PTR [R8]
            cmp AX,119
            jbe .L_404351
.L_404418:

            test R8,R8
            jne .L_404408

            lea RCX,QWORD PTR [RIP+.L_404f20]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404b91]
            mov EDX,770
            call __assert_fail@PLT
.L_40443c:

            mov EDX,1
            jmp .L_4043ae
.L_404446:

            lea RCX,QWORD PTR [RIP+.L_404f20]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d28]
            mov EDX,739
            call __assert_fail@PLT
.L_404465:

            mov EDI,1
            jmp .L_40433b
.L_40446f:

            nop
.L_404470:

            mov QWORD PTR [RDI+48],RSI
            and BYTE PTR [RDI+79],251
            ret 
.L_404479:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404480:

            mov QWORD PTR [RDI+48],RSI
            or BYTE PTR [RDI+79],4
            ret 
.L_404489:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404490:

            mov QWORD PTR [RDI],0
            ret 
.L_404498:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4044a0:

            movzx R8D,SIL
            movzx ESI,SIL
            lea RAX,QWORD PTR [RDX+RSI*8]
            cmp QWORD PTR [RAX+8],0
            jne .L_404504

            cmp QWORD PTR [RAX+24],0
            jne .L_404504

            mov R9,QWORD PTR [RDI]
            test R9,R9
            je .L_4044f8

            movsxd RSI,R8D
            cmp ECX,1
            mov R8,QWORD PTR [R9+RSI*8+8]
            mov QWORD PTR [RAX+8],R8
            mov R9,QWORD PTR [RDI]
            mov QWORD PTR [RAX+24],R9
            mov QWORD PTR [R8+RSI*8+24],RDX
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [RAX+RSI*8+8],RDX
            je .L_4044f0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4044f0:

            mov QWORD PTR [RDI],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4044f8:

            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RDI],RDX
            ret 
.L_404504:

            lea RCX,QWORD PTR [RIP+.L_404ec0]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404d90]
            sub RSP,8

            mov EDX,819
            call __assert_fail@PLT
.L_404527:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404530:

            movzx ECX,SIL
            movzx ESI,SIL
            lea RAX,QWORD PTR [RDX+RSI*8]
            mov R8,QWORD PTR [RAX+8]
            test R8,R8
            je .L_404599

            mov RSI,QWORD PTR [RAX+24]
            test RSI,RSI
            je .L_404599

            cmp RDX,QWORD PTR [RDI]
            je .L_404580
.L_404553:

            movsxd RDX,ECX
            mov QWORD PTR [RSI+RDX*8+8],R8
            mov RCX,QWORD PTR [RAX+8]
            mov RSI,QWORD PTR [RAX+24]
            mov QWORD PTR [RCX+RDX*8+24],RSI
            mov QWORD PTR [RAX+24],0
            mov QWORD PTR [RAX+8],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404580:

            cmp RSI,RDX
            mov QWORD PTR [RDI],RSI
            jne .L_40458f

            mov QWORD PTR [RDI],0
.L_40458f:

            mov RSI,QWORD PTR [RAX+24]
            mov R8,QWORD PTR [RAX+8]
            jmp .L_404553
.L_404599:

            lea RCX,QWORD PTR [RIP+.L_404e80]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404dd8]
            sub RSP,8

            mov EDX,847
            call __assert_fail@PLT
.L_4045bc:

            nop
            nop
            nop
            nop
.L_4045c0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_4045cc

            mov RAX,QWORD PTR [RAX+16]
.L_4045cc:

            ret 
.L_4045ce:

            nop
            nop
.L_4045d0:

            cmp QWORD PTR [RSI+48],0
            je .L_4045e0

            mov EAX,24
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4045e0:

            push RBX
.L_4045e1:

            and BYTE PTR [RSI+79],251
            mov ECX,EDX
            mov RBX,RSI
            mov QWORD PTR [RSI+48],RDI
            mov RDX,RSI
            mov ESI,1
            call .L_4044a0

            movzx EDX,BYTE PTR [RBX+79]
            mov RCX,QWORD PTR [RBX+40]
            and EDX,3
            movzx EDI,DL
            mov ESI,EDX
.L_40460b:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_404668

            test SIL,SIL
            jne .L_404648

            cmp DL,3
            je .L_404650

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_404668

            cmp DL,2
            je .L_404650

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_404668

            mov ESI,2
.L_404648:

            sub ESI,1
            cmp DL,SIL
            jne .L_40460b
.L_404650:

            mov QWORD PTR [RBX+8],RBX
            mov QWORD PTR [RBX+24],RBX
            xor EAX,EAX
            mov QWORD PTR [RCX+RDI*8+5136],RBX
            pop RBX
.L_404663:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404668:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RBX+24],RAX
            mov QWORD PTR [RBX+8],RDX
            mov QWORD PTR [RDX+24],RBX
            mov QWORD PTR [RAX+8],RBX
            mov QWORD PTR [RCX+RDI*8+5136],RBX
            xor EAX,EAX
            pop RBX
            ret 
.L_404688:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404690:

            test BYTE PTR [RSI+79],4
            mov EAX,23
            je .L_4046a0
.L_40469b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4046a0:

            cmp RDI,QWORD PTR [RSI+48]
            jne .L_40469b

            push RBX
.L_4046a7:

            mov RDX,RSI
            mov RBX,RSI
            mov ESI,1
            call .L_404530

            movzx EAX,BYTE PTR [RBX+79]
            mov RDX,QWORD PTR [RBX+40]
            and EAX,3
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RCX*8]
            cmp RBX,QWORD PTR [RDX+5136]
            je .L_404710
.L_4046d2:

            mov RAX,QWORD PTR [RBX+8]
            mov RDX,QWORD PTR [RBX+24]
            mov QWORD PTR [RAX+24],RDX
            mov RAX,QWORD PTR [RBX+24]
            mov RDX,QWORD PTR [RBX+8]
            mov QWORD PTR [RAX+8],RDX
            and BYTE PTR [RBX+79],251
            xor EAX,EAX
            mov QWORD PTR [RBX+8],0
            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+48],0
            pop RBX
.L_404709:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404710:

            mov RCX,QWORD PTR [RBX+24]
            cmp RBX,RCX
            je .L_404738

            movzx ESI,BYTE PTR [RCX+79]
            and ESI,3
            cmp AL,SIL
            mov EAX,0
            cmovne RCX,RAX
.L_40472c:

            mov QWORD PTR [RDX+5136],RCX
            jmp .L_4046d2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404738:

            xor ECX,ECX
            jmp .L_40472c
.L_40473c:

            nop
            nop
            nop
            nop
.L_404740:

            xor EAX,EAX
            xor ECX,ECX
            mov WORD PTR [RSI],AX
            mov RAX,QWORD PTR [RDI]
            mov WORD PTR [RDX],CX
            test RAX,RAX
            je .L_4047a9

            mov RDI,QWORD PTR [RAX+16]
            test RDI,RDI
            je .L_4047a9

            nop
            nop
            nop
            nop
            nop
.L_404760:

            add WORD PTR [RSI],1
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_4047e0

            mov ECX,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404778:

            mov RAX,QWORD PTR [RAX]
            add ECX,1
            test RAX,RAX
            jne .L_404778

            movzx ECX,CL
.L_404786:

            add WORD PTR [RDX],CX
            test BYTE PTR [RDI+79],4
            jne .L_4047b0

            mov RAX,QWORD PTR [RDI+48]
            test RAX,RAX
            je .L_4047a9

            mov RAX,QWORD PTR [RAX]
.L_40479b:

            cmp RAX,RDI
            je .L_4047a9
.L_4047a0:

            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            jne .L_404760
.L_4047a9:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4047b0:

            mov RCX,QWORD PTR [RDI+48]
            test RCX,RCX
            je .L_4047a9

            mov RAX,QWORD PTR [RCX+24]
            test RAX,RAX
            jne .L_40479b

            mov RAX,QWORD PTR [RCX+16]
            test RAX,RAX
            jne .L_40479b

            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            jne .L_40479b

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            je .L_4047a0

            jmp .L_40479b
          .byte 0x66
          .byte 0x90
.L_4047e0:

            mov ECX,1
            jmp .L_404786
.L_4047e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4047f0:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+24],0
            ret 
.L_404810:

            mov EDX,ESI
.L_404812:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_404852

            test SIL,SIL
            jne .L_404845

            cmp DL,3
            je .L_404850

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404852

            cmp DL,2
            je .L_404852

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404858

            mov ESI,2
.L_404845:

            sub ESI,1
            cmp DL,SIL
            jne .L_404812

            nop
            nop
            nop
.L_404850:

            xor EAX,EAX
.L_404852:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404858:

            ret 
.L_40485a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_404860:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404888

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404888

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_404888

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            jne .L_404888

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404888:

            mov RAX,QWORD PTR [RAX+16]
            ret 
.L_40488d:

            nop
            nop
            nop
.L_404890:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            je .L_404910

            lea EDX,DWORD PTR [RSI-1]
            test SIL,SIL
            mov EAX,3
            cmove EDX,EAX
            mov ECX,EDX
.L_4048ad:

            movzx EAX,CL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_404918

            test CL,CL
            jne .L_4048de

            cmp DL,3
            je .L_4048e8

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404918

            cmp DL,2
            je .L_4048e8

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404918

            mov ECX,2
.L_4048de:

            sub ECX,1
            cmp DL,CL
            jne .L_4048ad

            nop
            nop
            nop
.L_4048e8:

            lea RCX,QWORD PTR [RIP+.L_404e20]
            lea RSI,QWORD PTR [RIP+.L_404b67]
            lea RDI,QWORD PTR [RIP+.L_404bc0]
            sub RSP,8

            mov EDX,962
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404910:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404918:

            mov RAX,QWORD PTR [RAX+16]
            ret 
.L_40491d:

            nop
            nop
            nop
.L_404920:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_40493e

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_40493e

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_40493e

            mov RAX,QWORD PTR [RDI]
.L_40493e:

            ret 
.L_404940:

            movzx ECX,BYTE PTR [RDX+79]
            movzx R8D,SIL
            and ECX,3
            movzx R10D,CL
            mov R9D,ECX
.L_404952:

            movzx EAX,R9B
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_4049a0

            test R9B,R9B
            jne .L_404986

            cmp CL,3
            je .L_40498f

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_4049a0

            cmp CL,2
            je .L_40498f

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_4049a0

            mov R9D,2
.L_404986:

            sub R9D,1
            cmp CL,R9B
            jne .L_404952
.L_40498f:

            lea RAX,QWORD PTR [RDX+R8*8]
            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RDI+R10*8],RDX
            ret 
.L_4049a0:

            shl R8,3
            movzx ESI,SIL
            lea RCX,QWORD PTR [RAX+R8*1]
            add R8,RDX
            mov R9,QWORD PTR [RCX+8]
            mov QWORD PTR [R8+24],RAX
            mov QWORD PTR [R8+8],R9
            mov QWORD PTR [R9+RSI*8+24],RDX
            mov QWORD PTR [RCX+8],RDX
            mov QWORD PTR [RDI+R10*8],RDX
            ret 
.L_4049c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4049d0:

            movzx R8D,BYTE PTR [RDX+79]
            movzx ECX,SIL
            movzx ESI,SIL
            shl RSI,3
            and R8D,3
            movzx EAX,R8B
            lea R10,QWORD PTR [RDI+RAX*8]
            lea RAX,QWORD PTR [RDX+RSI*1]
            mov R9,QWORD PTR [R10]
            mov RDI,QWORD PTR [RAX+24]
            cmp RDX,R9
            je .L_404a30
.L_4049fd:

            mov RSI,QWORD PTR [RAX+8]
            movsxd RDX,ECX
            mov QWORD PTR [RSI+RDX*8+24],RDI
            mov RCX,QWORD PTR [RAX+24]
            mov RSI,QWORD PTR [RAX+8]
            mov QWORD PTR [RCX+RDX*8+8],RSI
            mov QWORD PTR [RAX+8],0
            mov QWORD PTR [RAX+24],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404a30:

            cmp R9,RDI
            je .L_404a58

            movzx EDX,BYTE PTR [RDI+79]
            and EDX,3
            cmp DL,R8B
            mov EDX,0
            cmovne RDI,RDX
.L_404a48:

            mov QWORD PTR [R10],RDI
            mov RDI,QWORD PTR [R9+RSI*1+24]
            jmp .L_4049fd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404a58:

            xor EDI,EDI
            jmp .L_404a48
.L_404a5c:

            nop
            nop
            nop
            nop
.L_404a60:

            cmp QWORD PTR [RSI+48],0
            je .L_404a70

            mov EAX,24
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404a70:

            jmp .L_402e30
.L_404a75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404a80:

            test BYTE PTR [RSI+79],4
            je .L_404a98

            cmp RDI,QWORD PTR [RSI+48]
            jne .L_404a98

            jmp .L_402f40
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404a98:

            mov EAX,23
            ret 
.L_404a9e:

            nop
            nop
.L_404aa0:

            xor EAX,EAX
            xor ECX,ECX
            mov WORD PTR [RSI],AX
            mov RAX,QWORD PTR [RDI+24]
            mov WORD PTR [RDX],CX
            test RAX,RAX
            jne .L_404acf

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404acf

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_404acf

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            jne .L_404acf
.L_404acd:

            ret 
.L_404acf:

            mov RDI,QWORD PTR [RAX+16]
            test RDI,RDI
            je .L_404acd

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404ae0:

            add WORD PTR [RSI],1
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_404b60

            mov ECX,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404af8:

            mov RAX,QWORD PTR [RAX]
            add ECX,1
            test RAX,RAX
            jne .L_404af8

            movzx ECX,CL
.L_404b06:

            add WORD PTR [RDX],CX
            test BYTE PTR [RDI+79],4
            jne .L_404b30

            mov RAX,QWORD PTR [RDI+48]
            test RAX,RAX
            je .L_404acd

            mov RAX,QWORD PTR [RAX]
.L_404b1b:

            cmp RAX,RDI
            je .L_404acd
.L_404b20:

            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            jne .L_404ae0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404b30:

            mov RCX,QWORD PTR [RDI+48]
            test RCX,RCX
            je .L_404acd

            mov RAX,QWORD PTR [RCX+24]
            test RAX,RAX
            jne .L_404b1b

            mov RAX,QWORD PTR [RCX+16]
            test RAX,RAX
            jne .L_404b1b

            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            jne .L_404b1b

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            je .L_404b20

            jmp .L_404b1b
          .byte 0x66
          .byte 0x90
.L_404b60:

            mov ECX,1
            jmp .L_404b06
.L_404b67:
          .string "common/message.cpp"
.L_404b7a:
          .string "aOffset <= GetLength()"
.L_404b91:
          .string "curBuffer != NULL"
.L_404ba3:
          .string "bytesWritten == (int)aLength"
.L_404bc0:
          .string "previousTail != NULL"
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404bd8:
          .string "aMessage->Next(MessageInfo::kListAll) == NULL && aMessage->Prev(MessageInfo::kListAll) == NULL"
          .zero 1
.L_404c38:
          .string "aMessage->Next(MessageInfo::kListInterface) == NULL && aMessage->Prev(MessageInfo::kListInterface) == NULL"
          .zero 5
.L_404ca8:
          .string "GetOffset() + aDelta <= GetLength()"
          .zero 4
.L_404cd0:
          .string "mBuffer.mHead.mInfo.mOffset <= GetLength()"
          .zero 5
.L_404d00:
          .string "aLength <= mBuffer.mHead.mInfo.mLength"
          .zero 1
.L_404d28:
          .string "aOffset + aLength <= GetLength()"
          .zero 7
.L_404d50:
          .string "aChildIndex < sizeof(mBuffer.mHead.mInfo.mChildMask) * 8"
          .zero 7
.L_404d90:
          .string "(aMessage.Next(aList) == NULL) && (aMessage.Prev(aList) == NULL)"
          .zero 7
.L_404dd8:
          .string "(aMessage.Next(aList) != NULL) && (aMessage.Prev(aList) != NULL)"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404e20:
          .string "ot::Message* ot::PriorityQueue::GetHeadForPriority(uint8_t) const"
          .zero 30
.L_404e80:
          .string "void ot::MessageQueue::RemoveFromList(uint8_t, ot::Message&)"
          .zero 3
.L_404ec0:
          .string "void ot::MessageQueue::AddToList(uint8_t, ot::Message&, ot::MessageQueue::QueuePosition)"
          .zero 7
.L_404f20:
          .string "uint16_t ot::Message::UpdateChecksum(uint16_t, uint16_t, uint16_t) const"
          .zero 23
.L_404f80:

            jbe .L_404ff1
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x4d
          .byte 0x61
          .byte 0x73
          .byte 0x6b
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404fc0:
          .string "void ot::Message::ClearChildMask(uint8_t)"
          .zero 7
.L_404ff1:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RDX+111],AH
            outsd DX,DWORD PTR [RSI]
            insb BYTE PTR [RDI],DX
            and BYTE PTR [RDI+116],CH
            cmp BH,BYTE PTR [RDX]
            jae .L_405080
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x47
          .byte 0x65
          .byte 0x74
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x4d
          .byte 0x61
          .byte 0x73
          .byte 0x6b
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405040:
          .string "int ot::Message::Write(uint16_t, uint16_t, const void*)"
          .zero 8
.L_405080:

            jne .L_4050eb
          .byte 0x6e
          .byte 0x74
          .byte 0x31
          .byte 0x36
          .byte 0x5f
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x52
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x31
          .byte 0x36
          .byte 0x5f
          .byte 0x74
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x31
          .byte 0x36
          .byte 0x5f
          .byte 0x74
          .byte 0x2c
          .byte 0x20
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x2a
          .byte 0x29
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4050c0:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x52
          .byte 0x65
          .byte 0x6d
          .byte 0x6f
          .byte 0x76
          .byte 0x65
          .byte 0x48
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x31
          .byte 0x36
          .byte 0x5f
          .byte 0x74
          .byte 0x29
.L_4050eb:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
          .zero 13
.L_405100:
          .string "otError ot::Message::Append(const void*, uint16_t)"
          .zero 13
.L_405140:
          .string "otError ot::Message::SetOffset(uint16_t)"
# WARNING: found overlapping blocks at address 4f18
# WARNING: found overlapping blocks at address 4f1b
          .zero 23
.L_405180:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
.L_405185:

            outsd DX,DWORD PTR [RSI]
            jb .L_4051a8
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6f
          .byte 0x76
          .byte 0x65
          .byte 0x4f
          .byte 0x66
          .byte 0x66
          .byte 0x73
          .byte 0x65
          .byte 0x74
          .byte 0x28
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4051a8:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_4051c0:
          .string "void ot::MessagePool::Free(ot::Message*)"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4051f0:

            mov QWORD PTR [RDI],RDX
            mov QWORD PTR [RDI+8],0
            ret 
.L_4051fc:

            nop
            nop
            nop
            nop
.L_405200:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            ret 
.L_405210:

            push R12
            push RBP
            mov R12D,24
            push RBX
            cmp QWORD PTR [RDI+8],RSI
            je .L_405227

            cmp QWORD PTR [RSI+8],0
            je .L_405230
.L_405227:

            mov EAX,R12D
            pop RBX
            pop RBP
            pop R12
            ret 

            nop
.L_405230:

            mov RBP,RDI
            mov RDI,RSI
            mov RBX,RSI
            call .L_4334e0

            mov RDI,RAX
            xor R12D,R12D
            call .L_402a40

            cmp RBP,RAX
            jne .L_405227

            mov RAX,QWORD PTR [RBP+8]
            test RAX,RAX
            je .L_405268

            mov QWORD PTR [RAX+8],RBX
            mov QWORD PTR [RBP+8],RBX
            jmp .L_405227
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405268:

            mov RDI,RBX
            mov QWORD PTR [RBP],RBX
            mov QWORD PTR [RBP+8],RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_42f700

            jmp .L_405227
.L_405282:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405290:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+80]
            pop RBX
            jmp .L_405210
.L_4052a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4052b0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_4052cc

            mov RDX,QWORD PTR [RAX+8]
            test RDX,RDX
            mov QWORD PTR [RDI],RDX
            je .L_4052d0
.L_4052c4:

            mov QWORD PTR [RAX+8],0
.L_4052cc:

            ret 
          .byte 0x66
          .byte 0x90
.L_4052d0:

            mov QWORD PTR [RDI+8],0
            jmp .L_4052c4
.L_4052da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4052e0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R12,QWORD PTR [RDI+8]
            jmp .L_40530f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4052f0:

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            mov QWORD PTR [RBP],RAX
            je .L_405320
.L_4052fd:

            mov QWORD PTR [RBX+8],0
            mov RDI,RBX
            call QWORD PTR [RBX]

            cmp R12,RBX
            je .L_405330
.L_40530f:

            mov RBX,QWORD PTR [RBP]
            test RBX,RBX
            jne .L_4052f0
.L_405318:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405320:

            mov QWORD PTR [RBP+8],0
            jmp .L_4052fd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405330:

            mov RDI,QWORD PTR [RBP]
            test RDI,RDI
            je .L_405318

            call .L_4334e0

            pop RBX
            pop RBP
            pop R12
            mov RDI,RAX
            jmp .L_42f700
.L_40534a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_405350:

            mov EAX,4
            mov EDX,12268
            mov ECX,4294967295
            mov ESI,14
            mov R8D,12286
            mov WORD PTR [RDI+6],AX
            mov WORD PTR [RDI+14],DX
            mov WORD PTR [RDI+12286],CX
            mov WORD PTR [RDI+12],SI
            mov WORD PTR [RDI+12284],R8W
            ret 
.L_405386:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405390:

            movzx EAX,WORD PTR [RSI]
            movzx R9D,WORD PTR [RDX]
            movzx R10D,WORD PTR [RSI+RAX*1+2]
            mov EAX,R10D
            shr AX,1
            movzx ECX,AX
            and EAX,32767
            lea R8,QWORD PTR [RDI+RCX*2]
            movzx ECX,WORD PTR [RDI+RAX*2]
            cmp R9W,CX
            ja .L_4053c3

            jmp .L_405408
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4053c0:

            mov R8,RAX
.L_4053c3:

            movzx EAX,WORD PTR [R8+RCX*1+2]
            shr AX,1
            mov RCX,RAX
            movzx EAX,AX
            and ECX,32767
            lea RAX,QWORD PTR [RDI+RAX*2]
            movzx ECX,WORD PTR [RDI+RCX*2]
            cmp CX,R9W
            jb .L_4053c0

            movzx EAX,WORD PTR [R8]
            movzx R10D,WORD PTR [R8+RAX*1+2]
.L_4053f0:

            mov WORD PTR [RDX+R9*1+2],R10W
            movzx EAX,WORD PTR [R8]
            sub RDX,RDI
            mov WORD PTR [R8+RAX*1+2],DX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405408:

            mov R8,RSI
            jmp .L_4053f0
.L_40540d:

            nop
            nop
            nop
.L_405410:

            imul EDX,ESI
            test DX,DX
            je .L_405510

            movzx EAX,WORD PTR [RDI+6]
            lea RSI,QWORD PTR [RDI+6]
            add EDX,3
            and EDX,4294967288
            lea R9D,DWORD PTR [RDX+4]
            movzx ECX,WORD PTR [RSI+RAX*1+2]
            shr CX,1
            movzx EAX,CX
            and ECX,32767
            movzx ECX,WORD PTR [RDI+RCX*2]
            lea RAX,QWORD PTR [RDI+RAX*2]
            cmp R9W,CX
            ja .L_40545b

            jmp .L_405530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405458:

            mov RAX,R11
.L_40545b:

            movzx ECX,WORD PTR [RAX+RCX*1+2]
            shr CX,1
            movzx R8D,CX
            and ECX,32767
            movzx ECX,WORD PTR [RDI+RCX*2]
            lea R11,QWORD PTR [RDI+R8*2]
            cmp R9W,CX
            ja .L_405458
.L_40547b:

            cmp CX,-1
            je .L_405510

            movzx ECX,WORD PTR [R11+RCX*1+2]
            test CX,CX
            je .L_405510

            push RBX
.L_405495:

            movzx R8D,WORD PTR [RAX]
            movzx EBX,R9W
            lea R10,QWORD PTR [RBX+4]
            mov WORD PTR [RAX+R8*1+2],CX
            movzx R8D,WORD PTR [R11]
            cmp R8,R10
            mov RCX,R8
            jbe .L_4054f3

            mov R8,R11
            sub ECX,R9D
            mov WORD PTR [R11],R9W
            sub R8,RDI
            sub ECX,4
            xor R9D,R9D
            lea EDX,DWORD PTR [RDX+R8*1+8]
            movzx R8D,CX
            shr DX,1
            movzx EDX,DX
            lea RDX,QWORD PTR [RDI+RDX*2]
            mov WORD PTR [RDX],CX
            mov WORD PTR [RDX+R8*1+2],R9W
            cmp CX,WORD PTR [RAX]
            jbe .L_405520

            mov RSI,RAX
            call .L_405390

            movzx R8D,WORD PTR [R11]
.L_4054f3:

            xor EAX,EAX
            add R11,2
            mov RDX,RBX
            mov WORD PTR [R11+R8*1],AX
            xor ESI,ESI
            mov RDI,R11
            call memset@PLT

            pop RBX
.L_40550c:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405510:

            xor R11D,R11D
            mov RAX,R11
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405520:

            call .L_405390

            movzx R8D,WORD PTR [R11]
            jmp .L_4054f3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405530:

            mov R11,RAX
            mov RAX,RSI
            jmp .L_40547b
.L_40553b:

            nop
            nop
            nop
            nop
            nop
.L_405540:

            movzx EDX,WORD PTR [RDI+6]
            lea RAX,QWORD PTR [RDI+6]
            sub RSI,RDI
            mov ECX,ESI
            movzx EDX,WORD PTR [RAX+RDX*1+2]
            cmp DX,SI
            je .L_405577

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405560:

            shr DX,1
            movzx EDX,DX
            lea RAX,QWORD PTR [RDI+RDX*2]
            movzx EDX,WORD PTR [RAX]
            movzx EDX,WORD PTR [RAX+RDX*1+2]
            cmp DX,CX
            jne .L_405560
.L_405577:

            ret 
.L_405579:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405580:

            test RSI,RSI
            je .L_405740

            sub RSI,RDI
            lea RDX,QWORD PTR [RSI+65534]
            lea RSI,QWORD PTR [RDI+6]
            and EDX,65534
            add RDX,RDI
            movzx EAX,WORD PTR [RDX]
            mov RCX,RDX
            sub RCX,RDI
            lea EAX,DWORD PTR [RAX+RCX*1+4]
            shr AX,1
            cmp CX,14
            movzx R10D,AX
            movzx EAX,AX
            lea R9,QWORD PTR [RDI+RAX*2]
            je .L_4056d0

            movzx R11D,WORD PTR [RDX-2]
            test R11W,R11W
            je .L_4056d0

            movzx EAX,WORD PTR [RDI+6]
            push R12
.L_4055da:

            push RBP
            push RBX
.L_4055dc:

            lea RBX,QWORD PTR [RSI+RAX*1+2]
            movzx R8D,WORD PTR [RBX]
            and R8D,65534
            add R8,RDI
            movzx EAX,WORD PTR [R8]
            movzx EAX,WORD PTR [R8+RAX*1+2]
            cmp R11W,AX
            jne .L_40560b

            jmp .L_4057a8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405608:

            mov R8,RCX
.L_40560b:

            shr AX,1
            movzx EAX,AX
            lea RCX,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [RCX]
            movzx EAX,WORD PTR [RCX+RAX*1+2]
            cmp R11W,AX
            jne .L_405608

            movzx EAX,WORD PTR [R8]
            lea RBX,QWORD PTR [R8+RAX*1+2]
.L_40562c:

            mov WORD PTR [RBX],R11W
            movzx EAX,WORD PTR [RCX]
            xor R11D,R11D
            mov WORD PTR [RCX+RAX*1+2],R11W
            movzx EBP,WORD PTR [R9]
            cmp BP,-1
            je .L_405748

            movzx EAX,BP
            movzx EBX,WORD PTR [R9+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            test BX,BX
            je .L_40574b

            mov R12,R9
            sub R12,RDI
            cmp BP,AX
            mov R11D,R12D
            jbe .L_405768

            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R12W
            je .L_4056a5

            nop
            nop
            nop
            nop
.L_405688:

            shr AX,1
            movzx EAX,AX
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R11W
            jne .L_405688
.L_4056a5:

            mov WORD PTR [RBP],BX
            movzx EAX,WORD PTR [R9]
            xor ESI,ESI
            mov WORD PTR [R9+RAX*1+2],SI
            movzx EAX,WORD PTR [RDI+R10*2]
            movzx ESI,WORD PTR [RCX]
            lea EAX,DWORD PTR [RAX+RSI*1+4]
            mov WORD PTR [RCX],AX
            jmp .L_40574b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4056d0:

            movzx EAX,WORD PTR [R9]
            cmp AX,-1
            je .L_405738

            movzx R11D,WORD PTR [R9+RAX*1+2]
            test R11W,R11W
            je .L_405738

            movzx EAX,WORD PTR [RDI+6]
            sub R9,RDI
            mov R8D,R9D
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            cmp AX,R9W
            je .L_40571b

            nop
            nop
.L_405700:

            shr AX,1
            movzx EAX,AX
            lea RSI,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [RSI]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            cmp AX,R8W
            jne .L_405700
.L_40571b:

            mov WORD PTR [RCX],R11W
            movzx EAX,WORD PTR [RDX]
            movzx ECX,WORD PTR [RDI+R10*2]
            lea EAX,DWORD PTR [RAX+RCX*1+4]
            mov WORD PTR [RDX],AX
            jmp .L_405390
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405738:

            jmp .L_405390
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405740:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405748:

            movzx EAX,WORD PTR [RCX]
.L_40574b:

            movzx EDX,WORD PTR [RDX]
            mov RSI,R8
            lea EAX,DWORD PTR [RAX+RDX*1+4]
            mov RDX,RCX
            mov WORD PTR [RCX],AX
            pop RBX
            pop RBP
            pop R12
            jmp .L_405390
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405768:

            movzx EAX,WORD PTR [RDI+6]
            lea RBP,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R12W
            je .L_4057b3

            nop
            nop
            nop
            nop
            nop
.L_405780:

            shr AX,1
            movzx EAX,AX
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R11W
            jne .L_405780

            jmp .L_4056a5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4057a8:

            mov RCX,R8
            mov R8,RSI
            jmp .L_40562c
.L_4057b3:

            mov R8,RSI
            jmp .L_4056a5
.L_4057bb:

            nop
            nop
            nop
            nop
            nop
.L_4057c0:

            push RBX
            mov RBX,RDI
            call .L_402890

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+112]
            pop RBX
            jmp .L_405580
.L_4057d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4057e0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_402890

            add RSP,8
            mov RDX,RBP
            mov RSI,RBX
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+112]
            jmp .L_405410
.L_405806:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405810:

            lea RSI,QWORD PTR [RIP+.L_4057c0]
            lea RDI,QWORD PTR [RIP+.L_4057e0]
            jmp .L_443dc0
.L_405823:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405830:

            movzx EAX,BYTE PTR [RSI]
            cmp AL,255
            je .L_405888

            add EAX,1
            cmp AL,26
            mov BYTE PTR [RSI],AL
            ja .L_405871
.L_405840:

            mov EDX,DWORD PTR [RDI]
            bt EDX,EAX
            jb .L_405880

            lea ECX,DWORD PTR [RAX+1]
            mov EDX,26
            sub EDX,EAX
            movzx ECX,CL
            movzx EDX,DL
            add EDX,ECX
            jmp .L_40586b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405860:

            mov EAX,DWORD PTR [RDI]
            shr EAX,CL
            add ECX,1
            test AL,1
            jne .L_405880
.L_40586b:

            cmp ECX,EDX
            mov BYTE PTR [RSI],CL
            jne .L_405860
.L_405871:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405880:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405888:

            mov BYTE PTR [RSI],11
            mov EAX,11
            jmp .L_405840
.L_405892:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4058a0:

            push R15
            push R14
            xor EAX,EAX
            push R13
            push R12
            movzx R12D,DX
            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_4085c1]
            mov RBX,RSI
            mov R13,RDI
            sub RSP,24
.L_4058c1:

            mov RDI,RBX
            mov QWORD PTR [RSP+8],RSI
            mov RSI,R12
            call snprintf@PLT

            cmp R12,1
            jbe .L_405a4d

            mov EDX,DWORD PTR [R13]
            mov EAX,11
            sub R12,1
            lea R10,QWORD PTR [RBX+1]
            mov R15D,EAX
            bt EDX,EAX
            jb .L_40590c

            nop
            nop
            nop
            nop
.L_4058f8:

            add EAX,1
            cmp EAX,27
            je .L_405a39

            bt EDX,EAX
            mov R15D,EAX
            jae .L_4058f8
.L_40590c:

            xor ESI,ESI
            mov R14,R10
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405918:

            movzx EBP,R15B
            cmp BPL,255
            je .L_405a80

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405930:

            lea EBX,DWORD PTR [RBP+1]
            cmp BL,26
            ja .L_405964

            mov ECX,DWORD PTR [R13]
            movzx EDX,BL
            bt ECX,EBX
            jb .L_405a68
.L_405948:

            lea EAX,DWORD PTR [RBX+1]
            movzx EAX,AL
            jmp .L_40595e
.L_405950:

            mov EDX,EAX
            add EAX,1
            bt ECX,EDX
            jb .L_405a68
.L_40595e:

            cmp AL,27
            mov EBX,EAX
            jne .L_405950
.L_405964:

            mov R10D,23
.L_40596a:

            lea RAX,QWORD PTR [RIP+.L_4085bc]
            lea R9,QWORD PTR [RIP+.L_4085ba]
            test SIL,SIL
            mov DWORD PTR [RSP],R10D
            movzx R11D,R15B
            lea R8,QWORD PTR [RIP+.L_4085c6]
            cmovne R9,RAX
            sub RSP,8
.L_405992:

            mov RSI,R12
            push R11
            mov RDI,R14
            xor EAX,EAX
            mov RCX,-1
            mov EDX,1
            mov DWORD PTR [RSP+20],R11D
            call __snprintf_chk@PLT

            cdqe 
            cmp RAX,R12
            pop RSI
            pop RDI
.L_4059b9:

            jae .L_405a4d

            add R14,RAX
            sub R12,RAX
            cmp BPL,R15B
            mov R10D,DWORD PTR [RSP]
            jbe .L_405a24

            mov R11D,DWORD PTR [RSP+4]
            lea RAX,QWORD PTR [RIP+.L_4085bc]
            lea R9,QWORD PTR [RIP+.L_4085bf]
            lea R8,QWORD PTR [RIP+.L_4085c6]
            mov RCX,-1
            mov EDX,1
            mov RSI,R12
            mov RDI,R14
            add R11D,1
            cmp EBP,R11D
            cmove R9,RAX
            sub RSP,8
.L_405a09:

            xor EAX,EAX
            push RBP
            call __snprintf_chk@PLT

            cdqe 
            cmp RAX,R12
            pop RDX
            pop RCX
            jae .L_405a4d

            mov R10D,DWORD PTR [RSP]
            add R14,RAX
            sub R12,RAX
.L_405a24:

            test R10D,R10D
            mov ESI,1
            jne .L_405a36

            mov R15D,EBX
            jmp .L_405918
.L_405a36:

            mov R10,R14
.L_405a39:

            lea RDX,QWORD PTR [RIP+.L_4085c3]
            mov RSI,R12
            mov RDI,R10
            xor EAX,EAX
            call snprintf@PLT
.L_405a4d:

            mov RAX,QWORD PTR [RSP+8]
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405a68:

            movzx EAX,BPL
            add EAX,1
            cmp EAX,EDX
            jne .L_405a92

            movzx EBP,BL
            cmp BPL,255
            jne .L_405930
.L_405a80:

            mov ECX,DWORD PTR [R13]
            mov EBX,11
            test CH,8
            je .L_405948
.L_405a92:

            xor R10D,R10D
            jmp .L_40596a
.L_405a9a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_405aa0:

            cmp DWORD PTR [RDI],1
            mov EAX,1
            je .L_405ab1

            movzx EAX,BYTE PTR [RDI+4]
            and EAX,1
.L_405ab1:

            ret 
.L_405ab3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405ac0:

            cmp DWORD PTR [RDI],2
            mov EAX,1
            je .L_405ad3

            movzx EAX,BYTE PTR [RDI+4]
            shr AL,1
            and EAX,1
.L_405ad3:

            ret 
.L_405ad5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405ae0:

            mov EDX,DWORD PTR [RDI]
            lea EAX,DWORD PTR [RDX-3]
            cmp EAX,1
            setbe AL
            cmp EDX,6
            sete DL
            or EAX,EDX
            ret 
.L_405af4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405b00:

            push R13
            push R12
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,40
.L_405b0e:

            mov QWORD PTR [RDX+48],0
            mov DWORD PTR [RDX+56],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RSI,RSI
            mov DWORD PTR [RSP+20],0
            movups XMMWORD PTR [RDX],XMM0
            movups XMMWORD PTR [RDX+16],XMM0
            movups XMMWORD PTR [RDX+32],XMM0
            je .L_405c58

            mov RBP,RSI
            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],7
            jne .L_405b72

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBP
            mov RBX,RDX
            call .L_409220

            test EAX,EAX
            mov R12D,EAX
            jne .L_405b78

            cmp DWORD PTR [RSP+20],2
            je .L_405ba0
.L_405b72:

            mov R12D,6
.L_405b78:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_405c63

            add RSP,40
.L_405b93:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405ba0:

            mov RAX,QWORD PTR [RSP+12]
            lea RSI,QWORD PTR [RBX+50]
            mov RDI,RBP
            mov QWORD PTR [RBX],RAX
            call .L_409180

            movzx EAX,BYTE PTR [RBP+9]
            mov RDI,RBP
            mov BYTE PTR [RBX+54],AL
            movzx EAX,BYTE PTR [RBP+10]
            mov BYTE PTR [RBX+55],AL
            movzx EAX,BYTE PTR [RBP+11]
            mov BYTE PTR [RBX+56],AL
            call .L_409b80

            mov RDI,RBP
            mov R13D,EAX
            call .L_409c00

            cmp R13B,29
            jbe .L_405b78

            cmp WORD PTR [RAX],4095
            jne .L_405b78

            cmp BYTE PTR [RAX+2],0
            jne .L_405b78

            cmp BYTE PTR [RAX+3],0
            jne .L_405b78

            cmp BYTE PTR [RAX+4],3
            jne .L_405b78

            movzx EDX,BYTE PTR [RAX+5]
            mov ECX,EDX
            movzx EDX,BYTE PTR [RBX+57]
            sar ECX,4
            and EDX,4294967280
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movzx ECX,BYTE PTR [RAX+5]
            and EDX,4294967263
            and ECX,1
            shl ECX,5
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movzx EDI,BYTE PTR [RAX+5]
            and EDX,4294967279
            lea ECX,DWORD PTR [RDI+RDI*1]
            and ECX,16
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movdqu XMM0,XMMWORD PTR [RAX+6]
            movups XMMWORD PTR [RBX+8],XMM0
            movzx EDX,BYTE PTR [RAX+22]
            mov BYTE PTR [RBX+24],DL
            mov RAX,QWORD PTR [RAX+22]
            mov QWORD PTR [RBX+25],RAX
            jmp .L_405b78
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405c58:

            mov R12D,7
            jmp .L_405b78
.L_405c63:

            call __stack_chk_fail@PLT
.L_405c68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405c70:

            movzx EDX,BYTE PTR [RDI+178]
            cmp DL,255
            je .L_405ce0

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_405cc9
.L_405c8a:

            mov ESI,DWORD PTR [RDI+172]
            bt ESI,EDX
            jb .L_405cd6

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_405cbc
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405cb0:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_405ccf
.L_405cbc:

            cmp ECX,EAX
            mov R8D,ECX
            jne .L_405cb0

            mov BYTE PTR [RDI+178],CL
.L_405cc9:

            mov EAX,23
            ret 
.L_405ccf:

            mov BYTE PTR [RDI+178],R8B
.L_405cd6:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405ce0:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_405c8a
.L_405cee:

            nop
            nop
.L_405cf0:

            sub RSP,24
.L_405cf4:

            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RCX
            xor ECX,ECX
            cmp SIL,127
            je .L_405d2f

            movzx EDX,BYTE PTR [RDI+178]
            mov RAX,RDI
            mov BYTE PTR [RSP+7],SIL
            mov RDI,QWORD PTR [RDI+184]
            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],DL
            call QWORD PTR [RAX+192]
.L_405d2f:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_405d44

            add RSP,24
.L_405d43:

            ret 
.L_405d44:

            call __stack_chk_fail@PLT
.L_405d49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405d50:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            je .L_405d7b

            movzx EDX,BYTE PTR [RBX+179]
            cmp DL,127
            je .L_405d75

            cmp DL,AL
            jge .L_405d7b
.L_405d75:

            mov BYTE PTR [RBX+179],AL
.L_405d7b:

            pop RBX
            ret 
.L_405d7d:

            nop
            nop
            nop
.L_405d80:

            mov RAX,QWORD PTR [RDI+160]
            cmp RAX,RSI
            je .L_405dc1

            cmp QWORD PTR [RSI+16],0
            jne .L_405dc1

            test RAX,RAX
            je .L_405db0

            mov QWORD PTR [RAX+16],RSI
            mov QWORD PTR [RDI+160],RSI
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405db0:

            mov QWORD PTR [RDI+152],RSI
            mov QWORD PTR [RDI+160],RSI
            xor EAX,EAX
            ret 
.L_405dc1:

            lea RCX,QWORD PTR [RIP+.L_408880]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_408640]
            sub RSP,8

            mov EDX,431
            call __assert_fail@PLT
.L_405de4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405df0:

            push R12
            push RBP
            lea RBP,QWORD PTR [RSI+8]
            push RBX
            mov R12,RSI
            mov RBX,RSI
            nop
            nop
.L_405e00:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_405e00

            movzx EAX,BYTE PTR [R12]
            pop RBX
            pop RBP
            and EAX,4294967294
            or EAX,2
            mov BYTE PTR [R12],AL
            pop R12
            ret 
.L_405e25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405e30:

            push R12
            push RBP
            lea RDX,QWORD PTR [RSI+7]
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,16
.L_405e42:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RBX,RSP
            nop
            nop
            nop
.L_405e58:

            movzx ECX,BYTE PTR [RDX]
            sub RDX,1
            mov BYTE PTR [RBX+RAX*1],CL
            add RAX,1
            cmp RAX,8
            jne .L_405e58

            mov RDI,RBP
            call .L_4334e0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4012f0

            mov RAX,QWORD PTR [R12]
            mov QWORD PTR [RBP+96],RAX
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_405ea0

            add RSP,16
.L_405e9b:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_405ea0:

            call __stack_chk_fail@PLT
.L_405ea5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405eb0:

            push RBX
            mov EBX,ESI
            mov WORD PTR [RDI+104],SI
            call .L_4334e0

            movzx ESI,BX
            mov RDI,RAX
            call .L_401300

            xor EAX,EAX
            pop RBX
            ret 
.L_405ecb:

            nop
            nop
            nop
            nop
            nop
.L_405ed0:

            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            mov RBP,RSI
            sub RSP,8
            call strlen@PLT

            cmp RAX,16
            mov EDX,7
            ja .L_405f02

            lea RDI,QWORD PTR [RBX+109]
            mov EDX,17
            mov RSI,RBP
            call .L_42ec40

            xor EDX,EDX
.L_405f02:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_405f0b:

            nop
            nop
            nop
            nop
            nop
.L_405f10:

            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_4082c0]
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RBX
            mov RBP,RSI
            sub RSP,8
.L_405f2e:

            mov DWORD PTR [RDI-8],0
            mov BYTE PTR [RDI-4],0
            call .L_4051f0

            lea RAX,QWORD PTR [RIP+.L_408400]
            mov DWORD PTR [RBX+32],0
            mov DWORD PTR [RBX+56],0
            mov DWORD PTR [RBX+80],0
            mov DWORD PTR [RBX+104],4294967294
            lea R13,QWORD PTR [RBX+96]
            mov QWORD PTR [RBX+24],RAX
            lea RAX,QWORD PTR [RBX+24]
            mov BYTE PTR [RBX+108],11
            mov QWORD PTR [RBX+136],0
            mov QWORD PTR [RBX+144],0
            lea R12,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+40],RAX
            lea RAX,QWORD PTR [RIP+.L_408320]
            mov QWORD PTR [RBX+152],0
            mov QWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+48],RAX
            lea RAX,QWORD PTR [RBX+48]
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RIP+.L_407d20]
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RBX+72]
            mov QWORD PTR [RBX+88],RAX
            call .L_401460

            mov BYTE PTR [RBX+168],AL
            call .L_401460

            lea RDI,QWORD PTR [RBX+216]
            mov BYTE PTR [RBX+169],AL
            mov EAX,32523
            mov WORD PTR [RBX+178],AX
            mov QWORD PTR [RBX+170],0
            mov QWORD PTR [RBX+184],0
            mov QWORD PTR [RBX+192],0
            mov QWORD PTR [RBX+200],0
            mov QWORD PTR [RBX+208],0
            call .L_4088f0

            mov RDI,RBP
            mov RBP,R13
            call .L_401380

            mov QWORD PTR [RBX+552],0
            mov QWORD PTR [RBX+544],RAX
            mov QWORD PTR [RBX+688],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406060:

            add RBP,1
            call .L_401460

            cmp RBP,R12
            mov BYTE PTR [RBP-1],AL
            jne .L_406060

            movzx EAX,BYTE PTR [RBX+96]
            lea RDI,QWORD PTR [RBX+568]
            mov QWORD PTR [RBX+560],0
            mov QWORD PTR [RBX+680],0
            and RDI,-8
            and EAX,4294967294
            or EAX,2
            mov BYTE PTR [RBX+96],AL
            mov EAX,EBX
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+688]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_401330

            mov RAX,QWORD PTR [RIP+.L_4088d0]
            lea RSI,QWORD PTR [RIP+.L_4088c0]
            mov RDI,RBX
            mov QWORD PTR [RBX+126],RAX
            call .L_405ed0

            movzx EBP,WORD PTR [RBX+106]
            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4012e0

            mov RSI,R13
            mov RDI,RBX
            call .L_405e30

            movzx EBP,WORD PTR [RBX+104]
            mov RDI,RBX
            call .L_4334e0

            add RSP,8
.L_40610c:

            mov RDI,RAX
            pop RBX
            mov ESI,EBP
            pop RBP
            pop R12
            pop R13
            jmp .L_401300
.L_40611c:

            nop
            nop
            nop
            nop
.L_406120:

            push RBX
            mov EBX,ESI
            mov WORD PTR [RDI+106],SI
            call .L_4334e0

            movzx ESI,BX
            mov RDI,RAX
            call .L_4012e0

            xor EAX,EAX
            pop RBX
            ret 
.L_40613b:

            nop
            nop
            nop
            nop
            nop
.L_406140:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+126],RAX
            xor EAX,EAX
            ret 
.L_40614a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_406150:

            push RBX
            mov RAX,QWORD PTR [RDI+144]
            mov EBX,24
            cmp RAX,RSI
            je .L_406169

            cmp QWORD PTR [RSI+16],0
            je .L_406170
.L_406169:

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406170:

            cmp QWORD PTR [RDI+136],0
            je .L_4061a0

            mov QWORD PTR [RAX+16],RSI
            mov QWORD PTR [RDI+144],RSI
.L_406185:

            mov EAX,DWORD PTR [RDI]
            or BYTE PTR [RDI+4],8
            xor EBX,EBX
            test EAX,EAX
            jne .L_406169

            add RDI,8
            call .L_405290

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_4061a0:

            mov QWORD PTR [RDI+136],RSI
            mov QWORD PTR [RDI+144],RSI
            jmp .L_406185
.L_4061b0:

            push RBX
            cmp QWORD PTR [RDI+552],0
            mov EBX,24
            je .L_4061c8
.L_4061c0:

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4061c8:

            mov EAX,DWORD PTR [RDI]
            or BYTE PTR [RDI+4],16
            xor EBX,EBX
            mov QWORD PTR [RDI+552],RSI
            test EAX,EAX
            jne .L_4061c0

            add RDI,8
            call .L_405290

            mov EAX,EBX
            pop RBX
            ret 
.L_4061e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4061f0:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_406230

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            test BYTE PTR [RDI+4],64
            jne .L_40620f

            lea RAX,QWORD PTR [RDI+72]
            cmp QWORD PTR [RDI+88],RAX
            je .L_406238
.L_40620f:

            movzx EBP,BYTE PTR [RBX+108]
            mov RDI,RBX
            call .L_4334e0

            add RSP,8
            mov RDI,RAX
            pop RBX
            mov ESI,EBP
            pop RBP
            jmp .L_401360
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406230:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406238:

            call .L_4334e0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            jne .L_40620f

            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_401350

            cmp EAX,13
            je .L_40620f

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_406265:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406270:

            lea EDX,DWORD PTR [RSI-11]
            cmp DL,15
            ja .L_406290

            sub RSP,8
            mov BYTE PTR [RDI+108],SIL
            call .L_4061f0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_406290:

            mov EAX,7
            ret 
.L_406296:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4062a0:

            cmp ESI,6
            ja .L_4062c8

            lea RDX,QWORD PTR [RIP+.L_408680]
            mov ESI,ESI
            movsxd RAX,DWORD PTR [RDX+RSI*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4062c0:

            or BYTE PTR [RDI+4],16
            nop
            nop
            nop
            nop
.L_4062c8:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_4062d0

            ret 
.L_4062d0:

            add RDI,8
            jmp .L_405290
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4062e0:

            or BYTE PTR [RDI+4],32
            jmp .L_4062c8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4062f0:

            or BYTE PTR [RDI+4],1
            jmp .L_4062c8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406300:

            or BYTE PTR [RDI+4],2
            jmp .L_4062c8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406310:

            or BYTE PTR [RDI+4],4
            jmp .L_4062c8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406320:

            or BYTE PTR [RDI+4],8
            jmp .L_4062c8
.L_406326:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406330:

            test EDX,EDX
            mov EAX,4294967295
            mov QWORD PTR [RDI+184],R8
            cmove EDX,EAX
            mov WORD PTR [RDI+176],CX
            mov BYTE PTR [RDI+178],255
            mov DWORD PTR [RDI+172],EDX
            jmp .L_4062a0
.L_40635a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_406360:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_4063d8

            movzx R9D,BYTE PTR [RDI+4]
            test R9B,1
            jne .L_4063d8

            cmp EAX,2
            je .L_4063d8

            and R9D,2
            mov EAX,5
            jne .L_4063e0

            sub RSP,8
.L_406386:

            mov R10D,EDX
            test DX,DX
            mov EAX,300
            mov QWORD PTR [RDI+192],RCX
            mov QWORD PTR [RDI+184],R8
            cmove R10D,EAX
            test ESI,ESI
            mov EAX,4294967295
            cmove ESI,EAX
            mov WORD PTR [RDI+176],R10W
            mov BYTE PTR [RDI+178],255
            mov DWORD PTR [RDI+172],ESI
            mov ESI,1
            call .L_4062a0

            xor EAX,EAX
            add RSP,8
.L_4063d2:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4063d8:

            mov EAX,5
            ret 
          .byte 0x66
          .byte 0x90
.L_4063e0:

            ret 
.L_4063e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4063f0:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_406458

            movzx R9D,BYTE PTR [RDI+4]
            test R9B,1
            jne .L_406458

            cmp EAX,2
            je .L_406458

            and R9D,2
            mov EAX,5
            jne .L_406460

            sub RSP,8
            mov EAX,4294967295
            test ESI,ESI
            cmove ESI,EAX
            mov QWORD PTR [RDI+192],RCX
            mov QWORD PTR [RDI+184],R8
            mov DWORD PTR [RDI+172],ESI
            mov WORD PTR [RDI+176],DX
            mov ESI,2
            mov BYTE PTR [RDI+178],255
            call .L_4062a0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406458:

            mov EAX,5
            ret 
          .byte 0x66
          .byte 0x90
.L_406460:

            ret 
.L_406462:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406470:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_406478:

            movzx EDI,BYTE PTR [RSI+RAX*1]
            mov BYTE PTR [R8+RAX*1],DIL
            add RAX,1
            cmp RAX,8
            jne .L_406478

            mov EAX,EDX
            mov BYTE PTR [R8+11],DL
            mov BYTE PTR [R8+12],CL
            shr EAX,24
            mov BYTE PTR [R8+8],AL
            mov EAX,EDX
            shr EAX,16
            mov BYTE PTR [R8+9],AL
            movzx EAX,DH
            mov BYTE PTR [R8+10],AL
            ret 
.L_4064ac:

            nop
            nop
            nop
            nop
.L_4064b0:

            push RBX
            mov RBX,RSI
            xor EDX,EDX
            mov RDI,RBX
            mov ESI,2051
            call .L_409800

            mov RDI,RBX
            mov ESI,65535
            call .L_408f70

            mov RDI,RBX
            mov ESI,65535
            call .L_409040

            mov RDI,RBX
            mov ESI,7
            pop RBX
            jmp .L_409b00
.L_4064eb:

            nop
            nop
            nop
            nop
            nop
.L_4064f0:

            push R13
            push R12
            xor EDX,EDX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov ESI,49152
            mov RDI,RBX
            sub RSP,24
.L_40650a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_409800

            movzx ESI,WORD PTR [RBP+106]
            mov RDI,RBX
            call .L_4091b0

            lea RSI,QWORD PTR [RBP+96]
            mov RDI,RBX
            call .L_409360

            mov RDI,RBX
            call .L_409c00

            mov RDI,RBP
            mov DWORD PTR [RAX],4095
            mov R12,RAX
            call .L_433510

            test BYTE PTR [RAX+1548],8
            mov ESI,4
            jne .L_406588
.L_40655e:

            mov RDI,RBX
            call .L_409bc0

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_406608

            add RSP,24
.L_40657e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406588:

            mov EAX,8195
            mov RDI,RBP
            mov WORD PTR [R12+4],AX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+1360]
            call .L_410780

            cmp BYTE PTR [RSP+7],0
            jne .L_406600

            and BYTE PTR [R12+5],254
.L_4065b9:

            lea R13,QWORD PTR [RBP+109]
            mov ESI,16
            mov RDI,R13
            call strnlen@PLT

            pxor XMM0,XMM0
            lea RDI,QWORD PTR [R12+6]
            mov RSI,R13
            mov RDX,RAX
            movups XMMWORD PTR [R12+6],XMM0
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP+126]
            mov ESI,30
            mov QWORD PTR [R12+22],RAX
            jmp .L_40655e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406600:

            or BYTE PTR [R12+5],1
            jmp .L_4065b9
.L_406608:

            call __stack_chk_fail@PLT
.L_40660d:

            nop
            nop
            nop
.L_406610:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            sub RSP,416
.L_406625:

            lea R13,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+408],RAX
            xor EAX,EAX
.L_40663d:

            call .L_433510

            mov RDI,R13
            mov R12,RAX
            mov DWORD PTR [RSP+12],0
            call .L_434780
.L_406655:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX],8
            je .L_40682a

            lea RSI,QWORD PTR [RSP+10]
            mov RDI,RBX
.L_406669:

            call .L_409500

            movzx EAX,BYTE PTR [RSP+10]
            cmp AL,8
            je .L_406860

            cmp AL,16
            je .L_4066b0

            test AL,AL
            je .L_4068b8

            lea RCX,QWORD PTR [RIP+.L_408840]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085cb]
            mov EDX,874
            call __assert_fail@PLT
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4066b0:

            mov EAX,DWORD PTR [RBP+688]
            mov RDI,RBX
            mov DWORD PTR [RSP+395],4294967295
            lea ESI,DWORD PTR [RAX+1]
            mov DWORD PTR [RBP+688],ESI
            call .L_409560

            lea R12,QWORD PTR [RSP+395]
            mov RDI,RBX
            mov RSI,R12
            call .L_409620

            mov ESI,255
            mov RDI,RBX
            call .L_409750

            lea RBP,QWORD PTR [RIP+.L_4088d8]
            lea R14,QWORD PTR [RIP+.L_4088e0]
.L_406700:

            lea RSI,QWORD PTR [RSP+9]
            mov RDI,RBX
            call .L_4094d0

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBX
            call .L_409530

            movzx ESI,BYTE PTR [RSP+9]
            mov ECX,DWORD PTR [RSP+12]
            lea R12,QWORD PTR [RSP+395]
            xor EAX,EAX
            nop
            nop
            nop
.L_406730:

            movzx EDX,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [R12+RAX*1],DL
            add RAX,1
            cmp RAX,8
            jne .L_406730

            mov EAX,ECX
            mov BYTE PTR [RSP+407],SIL
            mov EDX,16
            shr EAX,24
            mov RSI,R14
            mov RDI,R13
            mov BYTE PTR [RSP+403],AL
            mov EAX,ECX
            mov BYTE PTR [RSP+405],CH
            shr EAX,16
            mov BYTE PTR [RSP+406],CL
            mov BYTE PTR [RSP+404],AL
            call .L_433f30

            mov RDI,RBX
            call .L_4097b0

            sub EAX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+11],AL
            movzx EBP,AL
            call .L_409b80

            mov RDI,RBX
            movzx R14D,AL
            call .L_409b30

            movzx ESI,AL
            mov R9D,13
            mov R8,R12
            mov ECX,EBP
            mov EDX,R14D
            mov RDI,R13
            call .L_433f50

            test EAX,EAX
            jne .L_4068f1

            mov RDI,RBX
            call .L_409b30

            mov RSI,QWORD PTR [RBX]
            movzx EDX,AL
            mov RDI,R13
            call .L_434220

            mov RDI,RBX
            call .L_409b80

            mov RDI,RBX
            movzx EBP,AL
            call .L_409c00

            mov RDI,RBX
            mov R12,RAX
            call .L_409c00

            mov R8D,1
            mov ECX,EBP
            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_434330

            mov RDI,RBX
            call .L_409c30

            lea RDX,QWORD PTR [RSP+11]
            mov RSI,RAX
            mov RDI,R13
            call .L_434570
.L_40682a:

            mov RDI,R13
.L_40682d:

            call .L_4347b0
.L_406832:

            mov RAX,QWORD PTR [RSP+408]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4068ec

            add RSP,416
.L_406850:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406860:

            add RBP,96
            test BYTE PTR [RBX+13],4
            lea R14,QWORD PTR [R12+1404]
            jne .L_406700

            mov ESI,DWORD PTR [R12+1452]
            mov RDI,RBX
.L_406881:

            call .L_409560

            lea RDI,QWORD PTR [R12+1368]
            call .L_413e40

            mov ESI,DWORD PTR [R12+1384]
            mov RDI,RBX
            and ESI,127
            add ESI,1
            movzx ESI,SIL
            call .L_409750

            jmp .L_406700
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4068b8:

            add RBP,96
            test BYTE PTR [RBX+13],4
            lea R14,QWORD PTR [R12+1528]
            jne .L_406700

            mov ESI,DWORD PTR [R12+1544]
            mov RDI,RBX
            call .L_409560
.L_4068de:

            add DWORD PTR [R12+1544],1
            jmp .L_406700
.L_4068ec:

            call __stack_chk_fail@PLT
.L_4068f1:

            lea RCX,QWORD PTR [RIP+.L_408840]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085d1]
            mov EDX,887
            call __assert_fail@PLT
.L_406910:

            mov RBX,RAX
            mov RDI,R13
            call .L_4347b0

            mov RDI,RBX
.L_40691e:

            call _Unwind_Resume@PLT
.L_406923:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406930:

            cmp DWORD PTR [RDI],6
            jne .L_406948

            mov RAX,QWORD PTR [RDI+552]
.L_40693c:

            test RAX,RAX
            je .L_406951

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406948:

            mov RAX,QWORD PTR [RDI+544]
            jmp .L_40693c
.L_406951:

            sub RSP,8
            call .L_400f24
.L_40695a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_406960:

            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],32
            jne .L_406970

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406970:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RDI,RAX
            call .L_4013a0

            test AL,1
            je .L_406990

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406990:

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,16
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_4069a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4069b0:

            cmp BYTE PTR [RDI+29792],0
            jne .L_4069c0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4069c0:

            add RDI,14280
            jmp .L_406960
.L_4069c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4069d0:

            push RBX
            mov RBX,RSI
            call .L_4334e0

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_401370
.L_4069e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4069f0:

            push RBX
            mov EBX,ESI
            call .L_4334e0

            movzx ESI,BL
            mov RDI,RAX
            pop RBX
            jmp .L_401360
.L_406a04:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406a10:

            sub RSP,8
            call .L_4334e0

            add RSP,8
            mov RDI,RAX
            jmp .L_401350
.L_406a25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406a30:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,472
.L_406a4a:

            lea RBP,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+456],RAX
            xor EAX,EAX
.L_406a62:

            call .L_433510

            mov RDI,RBP
            mov R13,RAX
            call .L_434780
.L_406a72:

            mov RAX,QWORD PTR [RBX]
            and BYTE PTR [RBX+13],254
            test BYTE PTR [RAX],8
            je .L_406b10

            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
.L_406a8a:

            call .L_4094d0

            lea RSI,QWORD PTR [RSP+44]
            mov RDI,RBX
            call .L_409530

            lea RSI,QWORD PTR [RSP+41]
            mov RDI,RBX
            call .L_409500
.L_406aa9:

            lea RAX,QWORD PTR [R13+1368]
            mov QWORD PTR [RSP+24],RAX
            movzx EAX,BYTE PTR [RSP+41]
            cmp AL,8
            je .L_406b18

            cmp AL,16
            je .L_406d38

            test AL,AL
            je .L_406bb0
.L_406ace:

            mov R12D,8
.L_406ad4:

            mov RDI,RBP
.L_406ad7:

            call .L_4347b0
.L_406adc:

            mov RCX,QWORD PTR [RSP+456]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_406e1e

            add RSP,472
.L_406afd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406b10:

            xor R12D,R12D
            jmp .L_406ad4
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406b18:

            test R14,R14
            je .L_406ace

            lea RSI,QWORD PTR [RSP+43]
            mov RDI,RBX
.L_406b25:

            call .L_409710

            movzx EAX,BYTE PTR [RSP+43]
            mov ECX,DWORD PTR [R13+1384]
            mov EDX,ECX
            mov DWORD PTR [RSP+20],ECX
            sub EAX,1
            and EDX,127
            mov BYTE PTR [RSP+43],AL
            movzx EAX,AL
            cmp EAX,EDX
            je .L_406db8

            mov ECX,DWORD PTR [RSP+20]
            lea R15D,DWORD PTR [RCX-1]
            mov EDX,R15D
            and EDX,127
            cmp EAX,EDX
            je .L_406e00

            add DWORD PTR [RSP+20],1
            mov ECX,DWORD PTR [RSP+20]
            mov EDX,ECX
            and EDX,127
            cmp EAX,EDX
            jne .L_406ace

            lea RDI,QWORD PTR [R13+1368]
            mov ESI,ECX
            call .L_413e00

            mov QWORD PTR [RSP+8],RAX
.L_406b90:

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,7
            je .L_406dc9

            mov ECX,DWORD PTR [RSP+44]
.L_406ba4:

            movzx EDX,BYTE PTR [R12]
            jmp .L_406bd5
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406bb0:

            mov RAX,R13
            add RAX,1528
            mov QWORD PTR [RSP+8],RAX
            je .L_406ace

            movzx EDX,BYTE PTR [R12]
            mov ECX,DWORD PTR [RSP+44]
            mov DWORD PTR [RSP+20],0
.L_406bd5:

            movzx ESI,BYTE PTR [RSP+40]
            xor EAX,EAX
            lea R15,QWORD PTR [RSP+419]
            jmp .L_406bf5
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406bf0:

            movzx EDX,BYTE PTR [R12+RAX*1]
.L_406bf5:

            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp RAX,8
            jne .L_406bf0

            mov EAX,ECX
            mov RDI,RBX
            mov BYTE PTR [RSP+429],CH
            shr EAX,24
            mov BYTE PTR [RSP+430],CL
            mov BYTE PTR [RSP+431],SIL
            mov BYTE PTR [RSP+427],AL
            mov EAX,ECX
            shr EAX,16
            mov BYTE PTR [RSP+428],AL
            call .L_4097b0

            mov RSI,QWORD PTR [RSP+8]
            sub EAX,2
            mov EDX,16
            mov RDI,RBP
            mov BYTE PTR [RSP+42],AL
            call .L_433f30

            mov RDI,RBX
            movzx R12D,BYTE PTR [RSP+42]
            call .L_409b80

            movzx EAX,AL
            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_409b30

            mov EDX,DWORD PTR [RSP+8]
            movzx ESI,AL
            mov R9D,13
            mov R8,R15
            mov ECX,R12D
            mov RDI,RBP
            call .L_433f50

            test EAX,EAX
            mov R12D,EAX
            jne .L_406ace

            mov RDI,RBX
            call .L_409b30

            mov RSI,QWORD PTR [RBX]
            movzx EDX,AL
            mov RDI,RBP
            call .L_434220

            mov RDI,RBX
            call .L_409b80

            mov RDI,RBX
            movzx R15D,AL
            call .L_409c00

            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_409c00

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            mov ECX,R15D
            mov RSI,RAX
            mov RDI,RBP
            call .L_434330

            lea R15,QWORD PTR [RSP+432]
            lea RDX,QWORD PTR [RSP+42]
            mov RDI,RBP
            mov RSI,R15
            call .L_434570

            movzx EAX,BYTE PTR [RSP+42]
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_409c30

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RAX
            mov RDI,R15
            call memcmp@PLT

            test EAX,EAX
            jne .L_406ace

            cmp BYTE PTR [RSP+41],8
            je .L_406d68
.L_406d2b:

            or BYTE PTR [RBX+13],1
            jmp .L_406ad4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_406d38:

            lea RAX,QWORD PTR [RIP+.L_4088e0]
            mov ECX,DWORD PTR [RSP+44]
            mov EDX,53
            lea R12,QWORD PTR [RIP+.L_4088d8]
            mov DWORD PTR [RSP+20],0
            mov QWORD PTR [RSP+8],RAX
            jmp .L_406bd5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406d68:

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,7
            jne .L_406d2b

            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R14+20]
            je .L_406d8a

            mov DWORD PTR [R14+20],EAX
            mov DWORD PTR [R14+16],0
.L_406d8a:

            mov EAX,DWORD PTR [RSP+44]
            add EAX,1
            mov DWORD PTR [R14+12],EAX
            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R13+1384]
            jbe .L_406d2b

            mov RDI,QWORD PTR [RSP+24]
            mov ESI,EAX
            call .L_413f50

            jmp .L_406d2b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406db8:

            lea RAX,QWORD PTR [R13+1404]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_406b90
.L_406dc9:

            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R14+20]
            jb .L_406ace

            mov ECX,DWORD PTR [RSP+44]
            jne .L_406ba4

            lea EAX,DWORD PTR [RCX+1]
            cmp EAX,DWORD PTR [R14+12]
            jb .L_406ace

            jne .L_406ba4

            mov R12D,29
            jmp .L_406ad4
          .byte 0x90
.L_406e00:

            lea RDI,QWORD PTR [R13+1368]
            mov ESI,R15D
            call .L_413e00
.L_406e0f:

            mov QWORD PTR [RSP+8],RAX
            mov DWORD PTR [RSP+20],R15D
            jmp .L_406b90
.L_406e1e:

            call __stack_chk_fail@PLT
.L_406e23:

            mov RBX,RAX
            mov RDI,RBP
            call .L_4347b0

            mov RDI,RBX
.L_406e31:

            call _Unwind_Resume@PLT
.L_406e36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406e40:

            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,16
.L_406e4b:

            lea RSI,QWORD PTR [RSP+7]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_409a90

            movzx EAX,BYTE PTR [RSP+7]
            cmp AL,4
            je .L_406ec0

            cmp AL,7
            je .L_406e98

            add DWORD PTR [RBX+648],1
            xor EAX,EAX
.L_406e7b:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_406edb

            add RSP,16
.L_406e8f:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406e98:

            movzx EAX,BYTE PTR [RBX+4]
            add DWORD PTR [RBX+644],1
            test AL,AL
            jns .L_406eb3

            or EAX,4
            mov BYTE PTR [RBX+4],AL
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_406ed0
.L_406eb3:

            mov EAX,2
            jmp .L_406e7b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406ec0:

            add DWORD PTR [RBX+636],1
            xor EAX,EAX
            jmp .L_406e7b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406ed0:

            lea RDI,QWORD PTR [RBX+8]
            call .L_405290

            jmp .L_406eb3
.L_406edb:

            call __stack_chk_fail@PLT
.L_406ee0:

            mov QWORD PTR [RDI+200],RSI
            mov QWORD PTR [RDI+208],RDX
            ret 
.L_406eef:

            nop
.L_406ef0:

            sub RSP,8
            call .L_4334e0

            add RSP,8
            mov RDI,RAX
            jmp .L_4013b0
.L_406f05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406f10:

            push RBP
            push RBX
            mov EBX,ESI
            mov RBP,RDI
            sub RSP,8
            call .L_4334e0

            movzx ESI,BL
            mov RDI,RAX
            call .L_401310

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_4061f0
.L_406f39:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406f40:

            sub RSP,8
            call .L_4334e0

            mov RDI,RAX
            call .L_4013a0

            test AL,12
            setne AL
            add RSP,8
            ret 
.L_406f5b:

            nop
            nop
            nop
            nop
            nop
.L_406f60:

            sub RSP,8
            call .L_4334e0

            mov RDI,RAX
            call .L_4013a0

            shr EAX,2
            add RSP,8
            and EAX,1
            ret 
.L_406f7c:

            nop
            nop
            nop
            nop
.L_406f80:

            push R15
            push R14
            lea R14,QWORD PTR [RDI+24]
            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R14
            mov R13,RSI
            mov R15,RDX
            sub RSP,56
.L_406fa1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+36],0
            call .L_433690

            cmp R12D,11
            je .L_4071b0

            jbe .L_407170

            cmp R12D,14
            je .L_407179

            cmp R12D,15
            jne .L_4073e1

            xor ESI,ESI
.L_406fe4:

            movzx EDX,WORD PTR [RBX+694]
            cmp DX,511
            ja .L_406ffc

            add EDX,1
            mov WORD PTR [RBX+694],DX
.L_406ffc:

            lea RDI,QWORD PTR [RBX+692]
            movzx EDX,DX
            call .L_4140b0

            cmp R12D,15
            jne .L_4071c0

            add DWORD PTR [RBX+608],1
            mov RDI,RBX
            call .L_406f40

            test AL,AL
            je .L_407348
.L_40702c:

            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R13
            mov BYTE PTR [RBX+170],0
            mov RSI,RBP
            call .L_408fc0

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41e5d0

            mov RCX,RAX
            mov RAX,QWORD PTR [R13]
            movzx EBP,BYTE PTR [RAX]
            shr BPL,5
            and EBP,1
            test RCX,RCX
            setne AL
            and EAX,EBP
.L_407073:

            add BYTE PTR [RBX+171],1
            test R12D,R12D
            jne .L_40725a

            test BPL,BPL
            mov BYTE PTR [RBX+171],0
            je .L_4073b0
.L_407093:

            xor R8D,R8D
            test R15,R15
            mov QWORD PTR [RSP],RCX
            je .L_4070e4

            mov RDX,QWORD PTR [R15]
            movzx EDX,BYTE PTR [RDX]
            shr DL,4
            and EDX,1
            test AL,AL
            mov R8D,EDX
            je .L_4070e4

            mov RDI,RBX
            mov BYTE PTR [RSP+15],DL
            movsx R15D,BYTE PTR [R15+10]
            call .L_4334e0

            mov RDI,RAX
            call .L_401450

            mov RCX,QWORD PTR [RSP]
            movsx ESI,AL
            mov EDX,R15D
            lea RDI,QWORD PTR [RCX+28]
            call .L_414260

            movzx R8D,BYTE PTR [RSP+15]
.L_4070e4:

            add DWORD PTR [RBX+560],1
.L_4070eb:

            cmp DWORD PTR [RSP+36],1
            je .L_407293
.L_4070f6:

            add DWORD PTR [RBX+564],1
.L_4070fd:

            test BPL,BPL
            je .L_407188

            add DWORD PTR [RBX+572],1
            test R12D,R12D
            jne .L_407119

            add DWORD PTR [RBX+576],1
.L_407119:

            mov EAX,DWORD PTR [RBX]
            cmp EAX,3
            je .L_407196
.L_407120:

            jbe .L_4072b0

            cmp EAX,4
            je .L_4072e0

            cmp EAX,6
            jne .L_407431

            mov QWORD PTR [RBX+552],0
            mov RDI,RBX
            call .L_407850
.L_40714b:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_407450

            add RSP,56
.L_407163:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_407170:

            test R12D,R12D
            jne .L_4073e1
.L_407179:

            mov ESI,1
            jmp .L_406fe4
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407188:

            mov EAX,DWORD PTR [RBX]
            add DWORD PTR [RBX+580],1
            cmp EAX,3
            jne .L_407120
.L_407196:

            add DWORD PTR [RBX+592],1
            mov RDI,RBX
            call .L_407850

            jmp .L_40714b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4071b0:

            add DWORD PTR [RBX+612],1
            jmp .L_40702c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4071c0:

            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R13
            mov BYTE PTR [RBX+170],0
            mov RSI,RBP
            call .L_408fc0

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41e5d0

            mov RCX,RAX
            mov RAX,QWORD PTR [R13]
            movzx EBP,BYTE PTR [RAX]
            shr BPL,5
            and EBP,1
            test RCX,RCX
            setne AL
            and AL,BPL
            je .L_407073

            test R12D,R12D
            jne .L_4073d0

            mov ESI,1
.L_40721c:

            lea RDI,QWORD PTR [RCX+32]
            mov EDX,128
            mov BYTE PTR [RSP+15],AL
            mov QWORD PTR [RSP],RCX
            call .L_4140b0

            movzx EAX,BYTE PTR [RSP+15]
            mov RCX,QWORD PTR [RSP]
.L_40723b:

            add BYTE PTR [RBX+171],1
            test R12D,R12D
            jne .L_407258

            mov BYTE PTR [RBX+171],0
            mov EBP,EAX
            jmp .L_407093
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407258:

            mov EBP,EAX
.L_40725a:

            mov RDI,RBX
            call .L_406f60

            test AL,AL
            je .L_407370
.L_40726a:

            add DWORD PTR [RBX+560],1
            cmp R12D,15
            mov BYTE PTR [RBX+171],0
            jne .L_407285

            add DWORD PTR [RBX+616],1
.L_407285:

            xor R8D,R8D
            cmp DWORD PTR [RSP+36],1
            jne .L_4070f6
.L_407293:

            cmp WORD PTR [RSP+28],-1
            jne .L_4070f6

            add DWORD PTR [RBX+568],1
            jmp .L_4070fd
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4072b0:

            cmp EAX,1
            jne .L_407431

            add DWORD PTR [RBX+596],1
            movzx EBX,WORD PTR [RBX+176]
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R14
            call .L_433770

            jmp .L_40714b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4072e0:

            mov RDI,R13
            mov BYTE PTR [RSP],R8B
            call .L_409ac0

            test AL,AL
            jne .L_407398

            add DWORD PTR [RBX+584],1
.L_4072fb:

            mov RAX,QWORD PTR [RBX+136]
            mov RDX,QWORD PTR [RAX+16]
            test RDX,RDX
            mov QWORD PTR [RBX+136],RDX
            je .L_4073c0
.L_407316:

            test BYTE PTR [R13+13],4
            mov QWORD PTR [RAX+16],0
            jne .L_40732c

            add BYTE PTR [RBX+169],1
.L_40732c:

            mov RDI,RAX
            mov EDX,R12D
            mov RSI,R13
            call QWORD PTR [RAX+8]

            mov RDI,RBX
            call .L_407850

            jmp .L_40714b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407348:

            movzx EAX,BYTE PTR [RBX+170]
            cmp AL,3
            ja .L_40702c

            add EAX,1
            mov RDI,RBX
            mov BYTE PTR [RBX+170],AL
            call .L_407670

            jmp .L_40714b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407370:

            movzx EAX,BYTE PTR [R13+12]
            cmp BYTE PTR [RBX+171],AL
            jae .L_40726a

            add DWORD PTR [RBX+604],1
            mov RDI,RBX
            call .L_407670

            jmp .L_40714b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407398:

            movzx R8D,BYTE PTR [RSP]
            test R8B,R8B
            jne .L_407400
.L_4073a2:

            add DWORD PTR [RBX+588],1
            jmp .L_4072fb
          .byte 0x66
          .byte 0x90
.L_4073b0:

            add DWORD PTR [RBX+560],1
            xor R8D,R8D
            jmp .L_4070eb
          .byte 0x90
.L_4073c0:

            mov QWORD PTR [RBX+144],0
            jmp .L_407316
.L_4073d0:

            cmp R12D,14
            jne .L_40723b

            xor ESI,ESI
            jmp .L_40721c
.L_4073e1:

            lea RCX,QWORD PTR [RIP+.L_408760]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085cb]
            mov EDX,1170
            call __assert_fail@PLT
.L_407400:

            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov ESI,EAX
            mov EDX,100
            call .L_433770

            mov EAX,DWORD PTR [RBX]
            or BYTE PTR [RBX+4],32
            test EAX,EAX
            jne .L_4073a2

            lea RDI,QWORD PTR [RBX+8]
            call .L_405290

            jmp .L_4073a2
.L_407431:

            lea RCX,QWORD PTR [RIP+.L_408760]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085cb]
            mov EDX,1355
            call __assert_fail@PLT
.L_407450:

            call __stack_chk_fail@PLT
.L_407455:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407460:

            push R12
            push RBP
            push RBX
.L_407464:

            cmp DWORD PTR [RDI],6
            mov RBX,RDI
            jne .L_407520

            mov RBP,QWORD PTR [RDI+552]
.L_407477:

            test RBP,RBP
            je .L_407640

            or BYTE PTR [RBP+13],8
            cmp WORD PTR [RBX+170],0
            jne .L_4074b8

            mov EAX,DWORD PTR [RBX]
            cmp EAX,3
            je .L_4075d0

            jbe .L_407530

            cmp EAX,4
            je .L_407580

            cmp EAX,6
            jne .L_407602

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4074b8:

            movzx R12D,BYTE PTR [RBP+9]
            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            mov ESI,R12D
            call .L_401360

            test EAX,EAX
            jne .L_407621

            mov RDI,RBX
            call .L_4334e0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401370

            test EAX,EAX
            jne .L_407645

            cmp QWORD PTR [RBX+200],0
            je .L_407664

            or BYTE PTR [RBP+13],2
            mov RDI,RBP
            mov RSI,QWORD PTR [RBX+208]
            mov RAX,QWORD PTR [RBX+200]
            pop RBX
.L_407517:

            pop RBP
            pop R12
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407520:

            mov RBP,QWORD PTR [RDI+544]
            jmp .L_407477

            nop
            nop
            nop
            nop
.L_407530:

            cmp EAX,1
            jne .L_407602

            mov RDI,RBX
            call .L_4334e0

            mov ESI,65535
            mov RDI,RAX
            call .L_4012e0

            movzx EAX,BYTE PTR [RBX+178]
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RBP+9],AL
            call .L_4064b0

            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],0
            mov BYTE PTR [RBP+12],4
.L_40756f:

            mov RSI,RBP
            mov RDI,RBX
            call .L_406610

            jmp .L_4074b8
          .byte 0x90
.L_407580:

            movzx EAX,BYTE PTR [RBX+108]
            mov RSI,RBP
            mov BYTE PTR [RBP+9],AL
            mov RAX,QWORD PTR [RBX+136]
            mov RDI,RAX
            call QWORD PTR [RAX]

            test EAX,EAX
            jne .L_4075b0

            test BYTE PTR [RBP+13],4
            jne .L_40756f

            movzx EDX,BYTE PTR [RBX+169]
            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],DL
            jmp .L_40756f
.L_4075b0:

            mov RSI,RBP
            mov RDI,RBX
            mov ECX,11
            pop RBX
.L_4075bc:

            pop RBP
            pop R12
            xor EDX,EDX
            jmp .L_406f80
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4075d0:

            movzx EAX,BYTE PTR [RBX+108]
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RBP+9],AL
            call .L_4064f0

            movzx EAX,BYTE PTR [RBX+168]
            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RBX+168],DL
            mov RDX,QWORD PTR [RBP]
            mov BYTE PTR [RDX+2],AL
            mov BYTE PTR [RBP+12],4
            jmp .L_40756f
.L_407602:

            lea RCX,QWORD PTR [RIP+.L_4087c0]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085cb]
            mov EDX,1057
            call __assert_fail@PLT
.L_407621:

            lea RCX,QWORD PTR [RIP+.L_4087c0]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085d1]
            mov EDX,1069
            call __assert_fail@PLT
.L_407640:

            call .L_400f24
.L_407645:

            lea RCX,QWORD PTR [RIP+.L_4087c0]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085d1]
            mov EDX,1072
            call __assert_fail@PLT
.L_407664:

            pop RBX
.L_407665:

            pop RBP
            pop R12
            ret 
.L_407669:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407670:

            push R12
            push RBP
            push RBX
.L_407674:

            mov RBX,RDI
            call .L_406f40

            test AL,AL
            jne .L_407740

            movzx EDX,BYTE PTR [RBX+171]
            movzx EAX,BYTE PTR [RBX+170]
            lea EBP,DWORD PTR [RDX+RAX*1+3]
            call .L_401460

            cmp EBP,5
            mov ECX,5
            mov EDX,4294967295
            cmovbe ECX,EBP
            shl EDX,CL
            not EDX
            and EAX,EDX
            lea EBP,DWORD PTR [RAX+RAX*4]
            shl EBP,6
            test BYTE PTR [RBX+4],64
            je .L_407710
.L_4076bd:

            mov EAX,DWORD PTR [RBX]
            sub EAX,1
            cmp EAX,1
            ja .L_407750

            movzx R12D,BYTE PTR [RBX+178]
.L_4076d3:

            mov RDI,RBX
            call .L_4334e0

            mov ESI,R12D
            mov RDI,RAX
            call .L_401360
.L_4076e6:

            call .L_401240

            mov EDX,274877907
            mov ESI,EAX
            mov EAX,EBP
            mul EDX
            lea RDI,QWORD PTR [RBX+48]
            pop RBX
.L_4076fb:

            pop RBP
            pop R12
            shr EDX,6
            jmp .L_433770
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407710:

            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            jne .L_4076bd

            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_401350

            cmp EAX,13
            jne .L_4076e6

            jmp .L_4076bd
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407740:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_407460
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407750:

            movzx R12D,BYTE PTR [RBX+108]
            jmp .L_4076d3
.L_40775a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407760:

            movzx EAX,BYTE PTR [RDI+4]
            test AL,32
            jne .L_4077b8

            test AL,16
            jne .L_4077a0

            test AL,1
            jne .L_4077f8

            test AL,2
            jne .L_407810

            test AL,4
            jne .L_4077e0

            test AL,8
            je .L_407828

            and EAX,4294967287
            mov DWORD PTR [RDI],4
            mov BYTE PTR [RDI+4],AL
            jmp .L_407670
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4077a0:

            and EAX,4294967279
            mov DWORD PTR [RDI],6
            mov BYTE PTR [RDI+4],AL
            jmp .L_407670
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4077b8:

            push RBX
.L_4077b9:

            movzx EBX,BYTE PTR [RDI+108]
            and EAX,4294967263
            mov BYTE PTR [RDI+4],AL
            mov DWORD PTR [RDI],5
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBX
            pop RBX
            jmp .L_401360
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4077e0:

            and EAX,4294967291
            mov DWORD PTR [RDI],3
            mov BYTE PTR [RDI+4],AL
            jmp .L_407670
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4077f8:

            and EAX,4294967294
            mov DWORD PTR [RDI],1
            mov BYTE PTR [RDI+4],AL
            jmp .L_407860
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407810:

            and EAX,4294967293
            mov DWORD PTR [RDI],2
            mov BYTE PTR [RDI+4],AL
            jmp .L_407920
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407828:

            jmp .L_4061f0
.L_40782d:

            nop
            nop
            nop
.L_407830:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_407840

            jmp .L_407760
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407840:

            ret 
.L_407842:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407850:

            mov DWORD PTR [RDI],0
            jmp .L_407760
.L_40785b:

            nop
            nop
            nop
            nop
            nop
.L_407860:

            movzx EDX,BYTE PTR [RDI+178]
            cmp DL,255
            je .L_407900

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_4078b9
.L_40787e:

            mov ESI,DWORD PTR [RDI+172]
            bt ESI,EDX
            jb .L_4078f9

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_4078ac
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4078a0:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_4078f2
.L_4078ac:

            cmp ECX,EAX
            mov R8D,ECX
            jne .L_4078a0

            mov BYTE PTR [RDI+178],CL
.L_4078b9:

            push RBP
.L_4078ba:

            push RBX
            mov RBX,RDI
            sub RSP,8
            movzx EBP,WORD PTR [RDI+106]
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4012e0

            mov RDI,QWORD PTR [RBX+184]
            xor ESI,ESI
            call QWORD PTR [RBX+192]

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_407850
.L_4078f2:

            mov BYTE PTR [RDI+178],R8B
.L_4078f9:

            jmp .L_407670
          .byte 0x66
          .byte 0x90
.L_407900:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_40787e
.L_407911:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407920:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_40792b:

            movzx EDX,BYTE PTR [RDI+178]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp DL,255
            je .L_407ad0

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_4079a0
.L_407959:

            mov ESI,DWORD PTR [R12+172]
            bt ESI,EDX
            jb .L_4079e7

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_40798c
          .byte 0x66
          .byte 0x90
.L_407980:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_4079df
.L_40798c:

            cmp ECX,EAX
            mov EDI,ECX
            jne .L_407980

            mov BYTE PTR [R12+178],CL
            nop
            nop
            nop
            nop
            nop
            nop
.L_4079a0:

            mov RDI,QWORD PTR [R12+184]
            xor ESI,ESI
            call QWORD PTR [R12+192]

            mov DWORD PTR [R12],0
            mov RDI,R12
            call .L_407760
.L_4079c2:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_407b9f

            add RSP,16
.L_4079da:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4079df:

            mov BYTE PTR [R12+178],DIL
.L_4079e7:

            cmp WORD PTR [R12+176],0
            jne .L_407ae8

            movzx EBX,BYTE PTR [R12+178]
            lea RBP,QWORD PTR [RSP+6]
.L_407a05:

            mov RDI,R12
            call .L_4334e0

            movzx ESI,BL
            mov RDI,RAX
            call .L_401360

            mov RDI,R12
            call .L_4334e0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            je .L_407a50

            movzx EDX,BYTE PTR [R12+178]
            mov BYTE PTR [RSP+7],AL
            mov RSI,RBP
            mov RDI,QWORD PTR [R12+184]
            mov BYTE PTR [RSP+6],DL
            call QWORD PTR [R12+192]
.L_407a50:

            movzx EBX,BYTE PTR [R12+178]
            cmp BL,255
            je .L_407ac0

            add EBX,1
            cmp BL,26
            mov BYTE PTR [R12+178],BL
            ja .L_4079a0
.L_407a72:

            mov ESI,DWORD PTR [R12+172]
            bt ESI,EBX
            jb .L_407a05

            lea ECX,DWORD PTR [RBX+1]
            mov EAX,26
            sub EAX,EBX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_407aa8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407a98:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_407b92
.L_407aa8:

            cmp EAX,ECX
            mov EBX,ECX
            jne .L_407a98

            mov BYTE PTR [R12+178],AL
            jmp .L_4079a0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407ac0:

            mov BYTE PTR [R12+178],11
            mov EBX,11
            jmp .L_407a72
.L_407ad0:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_407959
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407ae8:

            mov RDI,R12
            call .L_4334e0

            mov RDI,RAX
            call .L_4013a0

            test AL,2
            jne .L_407b5f

            movzx EBX,BYTE PTR [R12+178]
            mov RDI,R12
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBX
            call .L_401360

            movzx EBX,WORD PTR [R12+176]
            mov BYTE PTR [R12+179],127
            call .L_401240

            lea RDI,QWORD PTR [R12+24]
            mov ESI,EAX
            mov EDX,EBX
            call .L_433770

            call .L_401240

            lea RDI,QWORD PTR [R12+48]
            mov EDX,1
            mov ESI,EAX
            call .L_433770

            mov RDI,R12
            call .L_405d50

            jmp .L_4079c2
.L_407b5f:

            movzx EBP,WORD PTR [R12+176]
            movzx EBX,BYTE PTR [R12+178]
            mov RDI,R12
            call .L_4334e0

            mov RDI,RAX
            mov EDX,EBP
            mov ESI,EBX
            call .L_401430

            test EAX,EAX
            jne .L_4079a0

            jmp .L_4079c2
.L_407b92:

            mov BYTE PTR [R12+178],BL
            jmp .L_407a05
.L_407b9f:

            call __stack_chk_fail@PLT
.L_407ba4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407bb0:

            push RBX
            mov RBX,RDI
            sub RSP,16
.L_407bb8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp SIL,127
            je .L_407bf0

            movzx EAX,BYTE PTR [RDI+178]
            mov BYTE PTR [RSP+7],SIL
            lea RSI,QWORD PTR [RSP+6]
            mov RDI,QWORD PTR [RDI+184]
            mov BYTE PTR [RSP+6],AL
            call QWORD PTR [RBX+192]
.L_407bf0:

            mov RDI,RBX
            call .L_407920

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_407c0e

            add RSP,16
.L_407c0c:

            pop RBX
            ret 
.L_407c0e:

            call __stack_chk_fail@PLT
.L_407c13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407c20:

            cmp BYTE PTR [RDI+29792],0
            je .L_407c58

            cmp BYTE PTR [RDI+24336],0
            movsx ESI,SIL
            jne .L_407c48

            add RDI,14280
            jmp .L_407bb0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407c48:

            add RDI,24328
            jmp .L_42f5c0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407c58:

            ret 
.L_407c5a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407c60:

            movzx EAX,BYTE PTR [RDI+4]
            mov EDX,EAX
            shr DL,6
            and EDX,1
            cmp DL,SIL
            je .L_407ca0

            mov EDX,ESI
            and EAX,4294967231
            push RBX
            and EDX,1
            mov RBX,RDI
            shl EDX,6
            or EAX,EDX
            test SIL,SIL
            mov BYTE PTR [RDI+4],AL
            je .L_407c95

            and EAX,4294967263
            cmp DWORD PTR [RDI],5
            mov BYTE PTR [RDI+4],AL
            je .L_407ca8
.L_407c95:

            mov RDI,RBX
            pop RBX
            jmp .L_4061f0
          .byte 0x66
          .byte 0x90
.L_407ca0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407ca8:

            lea RDI,QWORD PTR [RDI+72]
            call .L_433690

            mov DWORD PTR [RBX],0
            mov RDI,RBX
            call .L_407760

            jmp .L_407c95
.L_407cc1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407cd0:

            cmp DWORD PTR [RDI],5
            je .L_407ce0

            jmp .L_4061f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407ce0:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            call .L_407760

            mov RBX,QWORD PTR [RBX+152]
            test RBX,RBX
            je .L_407d17

            nop
            nop
            nop
            nop
            nop
.L_407d00:

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            je .L_407d0e

            mov RDI,RBX
            call RAX
.L_407d0e:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            jne .L_407d00
.L_407d17:

            pop RBX
            ret 
.L_407d19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407d20:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402aa0

            add RSP,8
            mov RDI,RAX
            jmp .L_407cd0
.L_407d3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407d40:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,EDX
            mov RBX,RDI
            sub RSP,56
.L_407d53:

            add DWORD PTR [RDI+620],1
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test EDX,EDX
            mov DWORD PTR [RSP+24],0
            mov DWORD PTR [RSP+36],0
            mov BYTE PTR [RSP+13],127
            je .L_407da0
.L_407d83:

            sub EBP,8
            cmp EBP,21
            ja .L_408020

            lea RDX,QWORD PTR [RIP+.L_40869c]
            movsxd RAX,DWORD PTR [RDX+RBP*4]
            add RAX,RDX
            jmp RAX
          .byte 0x90
.L_407da0:

            test RSI,RSI
            mov R12,RSI
            je .L_407f78

            movzx EAX,BYTE PTR [RSI+13]
            mov EDX,EAX
            and EDX,4294967294
            mov BYTE PTR [RSI+13],DL
            cmp QWORD PTR [RDI+200],0
            je .L_407dd8

            and EAX,4294967292
            mov BYTE PTR [RSI+13],AL
            mov RSI,QWORD PTR [RDI+208]
            mov RDI,R12
            call QWORD PTR [RBX+200]
.L_407dd8:

            mov RDI,R12
            call .L_409a50

            test EAX,EAX
            mov EBP,EAX
            jne .L_407d83

            lea R13,QWORD PTR [RSP+16]
            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R12
            mov RSI,R13
            call .L_409220

            mov RSI,RBP
            mov RDI,R12
            call .L_408fc0

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41e5d0

            mov R14,RAX
            mov EAX,DWORD PTR [RSP+36]
            cmp EAX,1
            je .L_408070

            cmp EAX,2
            je .L_408030
.L_407e36:

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_407ff0
.L_407e43:

            cmp EAX,2
            je .L_4080d0
.L_407e4c:

            cmp DWORD PTR [RSP+36],1
            je .L_408136
.L_407e57:

            add DWORD PTR [RBX+624],1
.L_407e5e:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_406a30

            test EAX,EAX
            mov EBP,EAX
            je .L_40814e

            cmp EAX,29
            jne .L_407d83

            cmp DWORD PTR [RBX],5
            jne .L_407fe0

            test R14,R14
            je .L_407fd1
.L_407e94:

            cmp BYTE PTR [RSP+13],127
            lea R13,QWORD PTR [R14+28]
            je .L_407ea7

            mov RDI,R13
            call .L_414250
.L_407ea7:

            movsx R15D,BYTE PTR [R12+10]
            mov RDI,RBX
            call .L_4334e0

            mov RDI,RAX
            call .L_401450

            mov EDX,R15D
            movsx ESI,AL
            mov RDI,R13
            call .L_414260

            mov RAX,QWORD PTR [R12]
            test BYTE PTR [RAX],8
            je .L_407efa

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,6
            je .L_407eea

            ja .L_407efa

            cmp AL,1
            jne .L_408000
.L_407eea:

            mov RDI,R12
            call .L_409ac0

            test AL,AL
            je .L_408020
.L_407efa:

            mov EAX,DWORD PTR [RBX]
            cmp EAX,2
            je .L_40815c

            cmp EAX,5
            je .L_4081c6

            cmp EAX,1
            je .L_4081a1
.L_407f17:

            mov RAX,QWORD PTR [R12]
            movzx EAX,BYTE PTR [RAX]
            and EAX,7
            cmp AL,1
            je .L_4081e7

            jb .L_4081db

            cmp AL,3
            jne .L_40816c

            mov RSI,R12
            mov RDI,RBX
            call .L_406e40

            cmp EAX,2
            je .L_407f80
.L_407f47:

            mov R13,QWORD PTR [RBX+152]
            test R13,R13
            je .L_407f6b

            nop
            nop
            nop
            nop
            nop
.L_407f58:

            mov RDI,R13
            mov RSI,R12
            call QWORD PTR [R13]

            mov R13,QWORD PTR [R13+16]
            test R13,R13
            jne .L_407f58
.L_407f6b:

            test EBP,EBP
            je .L_407f80

            jmp .L_407d83
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407f78:

            add DWORD PTR [RBX+664],1
            nop
.L_407f80:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40820c

            add RSP,56
.L_407f98:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407fa8:

            add DWORD PTR [RBX+652],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407fb8:

            add DWORD PTR [RBX+680],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407fc8:

            add DWORD PTR [RBX+676],1
            jmp .L_407f80
.L_407fd1:

            cmp DWORD PTR [RSP+36],0
            jne .L_4081f3

            nop
            nop
            nop
            nop
.L_407fe0:

            add DWORD PTR [RBX+660],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407ff0:

            test R14,R14
            jne .L_4080c0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408000:

            add DWORD PTR [RBX+668],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408010:

            add DWORD PTR [RBX+672],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408020:

            add DWORD PTR [RBX+684],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408030:

            lea RSI,QWORD PTR [RSP+14]
            mov RDI,R12
            call .L_408f40

            movzx EAX,WORD PTR [RSP+14]
            cmp WORD PTR [RBX+106],AX
            jne .L_408060

            lea RSI,QWORD PTR [RBX+96]
            mov RDI,RBP
            call .L_408da0

            test AL,AL
            jne .L_407e36

            nop
            nop
            nop
            nop
.L_408060:

            add DWORD PTR [RBX+656],1
            jmp .L_407f80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408070:

            lea RSI,QWORD PTR [RSP+14]
            mov RDI,R12
            call .L_408f40

            movzx EAX,WORD PTR [RSP+14]
            cmp AX,-1
            je .L_40808e

            cmp AX,WORD PTR [RBX+106]
            jne .L_408060
.L_40808e:

            test BYTE PTR [RBX+4],64
            movzx EAX,WORD PTR [RSP+28]
            je .L_4080a0

            cmp DWORD PTR [RSP+36],1
            je .L_408119
.L_4080a0:

            cmp WORD PTR [RBX+104],AX
            jne .L_408060

            test R14,R14
            je .L_408178

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            jne .L_407e43

            nop
            nop
            nop
            nop
.L_4080c0:

            mov RAX,QWORD PTR [R14]
            mov DWORD PTR [RSP+24],2
            mov QWORD PTR [RSP+16],RAX
.L_4080d0:

            lea RSI,QWORD PTR [RBX+96]
            mov RDI,R13
            call .L_408da0

            test AL,AL
            jne .L_408010

            lea RDX,QWORD PTR [RSP+13]
            lea RDI,QWORD PTR [RBX+216]
            mov RSI,R13
            call .L_408d20

            test EAX,EAX
            mov EBP,EAX
            jne .L_407d83

            movzx EAX,BYTE PTR [RSP+13]
            cmp AL,127
            je .L_407e4c

            mov BYTE PTR [R12+10],AL
            jmp .L_407e4c
.L_408119:

            cmp AX,-1
            jne .L_4080a0

            test R14,R14
            je .L_408232

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_4080c0

            cmp EAX,2
            je .L_4080d0
.L_408136:

            cmp WORD PTR [RSP+28],-1
            jne .L_407e57

            add DWORD PTR [RBX+628],1
            jmp .L_407e5e
.L_40814e:

            test R14,R14
            jne .L_407e94

            jmp .L_407efa
.L_40815c:

            movzx EAX,BYTE PTR [RBX+108]
            cmp BYTE PTR [RBX+178],AL
            je .L_407f17
.L_40816c:

            add DWORD PTR [RBX+648],1
            jmp .L_407f6b
.L_408178:

            cmp DWORD PTR [RSP+36],1
            je .L_408211

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_408000

            cmp EAX,2
            jne .L_407e57
.L_408199:

            xor R14D,R14D
            jmp .L_4080d0
.L_4081a1:

            mov RAX,QWORD PTR [R12]
            test BYTE PTR [RAX],7
            jne .L_40815c

            add DWORD PTR [RBX+640],1
            mov RDI,QWORD PTR [RBX+184]
            mov RSI,R12
            call QWORD PTR [RBX+192]

            jmp .L_407f6b
.L_4081c6:

            mov EAX,DWORD PTR [RSP+36]
            test EAX,EAX
            jne .L_4081f3
.L_4081ce:

            test EBP,EBP
            je .L_407f17

            jmp .L_407d83
.L_4081db:

            add DWORD PTR [RBX+640],1
            jmp .L_407f47
.L_4081e7:

            add DWORD PTR [RBX+632],1
            jmp .L_407f47
.L_4081f3:

            lea RDI,QWORD PTR [RBX+72]
            call .L_433690

            mov DWORD PTR [RBX],0
            mov RDI,RBX
            call .L_407760

            jmp .L_4081ce
.L_40820c:

            call __stack_chk_fail@PLT
.L_408211:

            add AX,1
            je .L_408232

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_408000

            cmp EAX,2
            je .L_408199

            jmp .L_408136
.L_408232:

            mov RDI,RBX
            call .L_433510

            test BYTE PTR [RAX+2624],2
            jne .L_408261

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_408000

            cmp EAX,2
            je .L_408199

            xor R14D,R14D
            jmp .L_407e4c
.L_408261:

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41ed00

            mov R14,RAX
            jmp .L_407e36
.L_408280:

            cmp BYTE PTR [RDI+29792],0
            je .L_4082b0

            cmp BYTE PTR [RDI+24336],0
            jne .L_4082a0

            add RDI,14280
            jmp .L_407d40
          .byte 0x66
          .byte 0x90
.L_4082a0:

            add RDI,24328
            jmp .L_42f4f0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4082b0:

            ret 
.L_4082b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4082c0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402aa0

            mov EDX,DWORD PTR [RAX]
            test EDX,EDX
            je .L_4082e0

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4082e0:

            mov RDI,RAX
            add RSP,8
            jmp .L_407760
.L_4082ec:

            nop
            nop
            nop
            nop
.L_4082f0:

            cmp DWORD PTR [RDI],2
            je .L_408300

            jmp .L_407460
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408300:

            push RBX
            mov RBX,RDI
            call .L_405d50

            mov ESI,DWORD PTR [RBX+56]
            lea RDI,QWORD PTR [RBX+48]
            mov EDX,1
            pop RBX
            jmp .L_433770
.L_40831b:

            nop
            nop
            nop
            nop
            nop
.L_408320:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402aa0

            add RSP,8
            mov RDI,RAX
            jmp .L_4082f0
.L_40833a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408340:

            cmp BYTE PTR [RDI+29792],0
            je .L_408370

            cmp BYTE PTR [RDI+24336],0
            jne .L_408360

            add RDI,14280
            jmp .L_406f80
          .byte 0x66
          .byte 0x90
.L_408360:

            add RDI,24328
            jmp .L_42f540
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408370:

            ret 
.L_408372:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408380:

            push RBX
            mov EAX,DWORD PTR [RDI]
            mov RBX,RDI
            cmp EAX,2
            je .L_4083e0

            cmp EAX,4
            je .L_4083b8

            cmp EAX,1
            je .L_4083d0

            lea RCX,QWORD PTR [RIP+.L_408720]
            lea RSI,QWORD PTR [RIP+.L_4085a0]
            lea RDI,QWORD PTR [RIP+.L_4085cb]
            mov EDX,1473
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4083b8:

            pop RBX
            mov RSI,QWORD PTR [RDI+544]
            mov ECX,14
            xor EDX,EDX
            jmp .L_406f80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4083d0:

            pop RBX
            jmp .L_407860
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4083e0:

            lea RDI,QWORD PTR [RDI+48]
            call .L_433690

            movsx ESI,BYTE PTR [RBX+179]
            mov RDI,RBX
            pop RBX
            jmp .L_407bb0
.L_4083f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408400:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402aa0

            add RSP,8
            mov RDI,RAX
            jmp .L_408380
.L_40841d:

            nop
            nop
            nop
.L_408420:

            mov EAX,DWORD PTR [RDI+648]
            bswap EAX
            mov DWORD PTR [RSI+2],EAX
            mov EAX,DWORD PTR [RDI+668]
            add EAX,DWORD PTR [RDI+664]
            add EAX,DWORD PTR [RDI+672]
            add EAX,DWORD PTR [RDI+676]
            add EAX,DWORD PTR [RDI+680]
            add EAX,DWORD PTR [RDI+684]
            bswap EAX
            mov DWORD PTR [RSI+6],EAX
            mov EAX,DWORD PTR [RDI+608]
            bswap EAX
            mov DWORD PTR [RSI+10],EAX
            mov EAX,DWORD PTR [RDI+624]
            bswap EAX
            mov DWORD PTR [RSI+14],EAX
            mov EAX,DWORD PTR [RDI+628]
            bswap EAX
            mov DWORD PTR [RSI+18],EAX
            mov EAX,DWORD PTR [RDI+656]
            add EAX,DWORD PTR [RDI+652]
            add EAX,DWORD PTR [RDI+660]
            bswap EAX
            mov DWORD PTR [RSI+22],EAX
            mov EAX,DWORD PTR [RDI+564]
            bswap EAX
            mov DWORD PTR [RSI+26],EAX
            mov EAX,DWORD PTR [RDI+568]
            bswap EAX
            mov DWORD PTR [RSI+30],EAX
            mov EAX,DWORD PTR [RDI+616]
            bswap EAX
            mov DWORD PTR [RSI+34],EAX
            ret 
.L_4084ae:

            nop
            nop
.L_4084b0:

            lea RDX,QWORD PTR [RDI+568]
            mov QWORD PTR [RDI+560],0
            mov QWORD PTR [RDI+680],0
            xor EAX,EAX
            and RDX,-8
            sub EDI,EDX
            lea ECX,DWORD PTR [RDI+688]
            mov RDI,RDX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_4084e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4084f0:

            sub RSP,8
            call .L_4334e0

            add RSP,8
            mov RDI,RAX
            jmp .L_401450
.L_408505:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408510:

            cmp EDI,6
            ja .L_408598

            lea RDX,QWORD PTR [RIP+.L_4086f4]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408530:

            lea RAX,QWORD PTR [RIP+.L_408620]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408540:

            lea RAX,QWORD PTR [RIP+.L_40862f]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408550:

            lea RAX,QWORD PTR [RIP+.L_4085e9]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408560:

            lea RAX,QWORD PTR [RIP+.L_4085ee]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408570:

            lea RAX,QWORD PTR [RIP+.L_4085f9]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408580:

            lea RAX,QWORD PTR [RIP+.L_408604]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408590:

            lea RAX,QWORD PTR [RIP+.L_408613]
            ret 
.L_408598:

            lea RAX,QWORD PTR [RIP+.L_4085e8]
            ret 
.L_4085a0:
          .string "mac/mac.cpp"
.L_4085ac:
          .string "frame != NULL"
.L_4085ba:
          .string " "
.L_4085bc:
          .string ", "
.L_4085bf:
          .string "-"
.L_4085c1:
          .string "{"
.L_4085c3:
          .string " }"
.L_4085c6:
          .string "%s%d"
.L_4085cb:
          .string "false"
.L_4085d1:
          .string "error == OT_ERROR_NONE"
.L_4085e8:
          .zero 1
.L_4085e9:
          .string "Idle"
.L_4085ee:
          .string "ActiveScan"
.L_4085f9:
          .string "EnergyScan"
.L_408604:
          .string "TransmitBeacon"
.L_408613:
          .string "TransmitData"
.L_408620:
          .string "WaitingForData"
.L_40862f:
          .string "TransmitOobFrame"
.L_408640:
          .string "mReceiveTail != &aReceiver && aReceiver.mNext == NULL"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408680:
          .long .L_4062c8-.L_408680
          .long .L_4062f0-.L_408680
          .long .L_406300-.L_408680
          .long .L_406310-.L_408680
          .long .L_406320-.L_408680
          .long .L_4062e0-.L_408680
          .long .L_4062c0-.L_408680
.L_40869c:
          .long .L_407fc8-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_407fb8-.L_40869c
          .long .L_407f78-.L_40869c
          .long .L_408000-.L_40869c
          .long .L_408010-.L_40869c
          .long .L_407fa8-.L_40869c
          .long .L_408060-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_408020-.L_40869c
          .long .L_407fe0-.L_40869c
.L_4086f4:
          .long .L_408550-.L_4086f4
          .long .L_408560-.L_4086f4
          .long .L_408570-.L_4086f4
          .long .L_408580-.L_4086f4
          .long .L_408590-.L_4086f4
          .long .L_408530-.L_4086f4
          .long .L_408540-.L_4086f4
          .zero 16
.L_408720:
          .string "void ot::Mac::Mac::HandleMacTimer()"
          .zero 28
.L_408760:
          .string "void ot::Mac::Mac::HandleTransmitDone(otRadioFrame*, otRadioFrame*, otError)"
          .zero 19
.L_4087c0:
          .string "void ot::Mac::Mac::BeginTransmit()"
          .zero 29
.L_408800:
          .string "ot::Mac::Frame* ot::Mac::Mac::GetOperationFrame()"
          .zero 14
.L_408840:
          .string "void ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::Frame&)"
# WARNING: found overlapping blocks at address 8638
# WARNING: found overlapping blocks at address 863a
          .zero 4
.L_408880:
          .string "otError ot::Mac::Mac::RegisterReceiver(ot::Mac::Receiver&)"
# WARNING: found overlapping blocks at address 8678
# WARNING: found overlapping blocks at address 867a
          .zero 5
.L_4088c0:

            jo .L_408928
          .byte 0x6e
          .byte 0x54
          .byte 0x68
          .byte 0x72
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4088d0:
          .byte 0xde
          .byte 0xad
          .byte 0x0
          .byte 0xbe
          .byte 0xef
          .byte 0x0
          .byte 0xca
          .byte 0xfe
.L_4088d8:
          .byte 0x35
          .byte 0x6
          .byte 0xfe
          .byte 0xb8
          .byte 0x23
          .byte 0xd4
          .byte 0x87
          .byte 0x12
.L_4088e0:
          .byte 0x78
          .byte 0x58
          .byte 0x16
.L_4088e3:

            xchg CH,BH
# WARNING: found overlapping blocks at address 86b4
.set .L_4088e4, . - 1

          .byte 0xb4
          .byte 0x58
          .byte 0xf
          .byte 0xb0
          .byte 0x92
          .byte 0x54
          .byte 0x6a
          .byte 0xec
          .byte 0xbd
          .byte 0x15
          .byte 0x66
.L_4088f0:

            lea RAX,QWORD PTR [RDI+320]
            mov DWORD PTR [RDI+320],0
            mov BYTE PTR [RDI+324],127
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408910:

            mov QWORD PTR [RDI],0
            mov BYTE PTR [RDI+9],0
            add RDI,10
            mov BYTE PTR [RDI-2],127
            cmp RDI,RAX
            jne .L_408910
.L_408928:

            ret 
.L_40892a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408930:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea R12,QWORD PTR [RDI+320]
            mov RBX,RDI
            sub RSP,8
            jmp .L_408959
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408950:

            add RBX,10
            cmp RBX,R12
            je .L_408988
.L_408959:

            cmp BYTE PTR [RBX+9],0
            mov RBP,RBX
            jne .L_408968

            cmp BYTE PTR [RBX+8],127
            je .L_408950
.L_408968:

            mov RSI,RBX
            mov RDI,R13
            call .L_408da0

            test AL,AL
            je .L_408950

            add RSP,8
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408988:

            add RSP,8
            xor EBP,EBP
            pop RBX
            mov RAX,RBP
            pop RBP
            pop R12
            pop R13
            ret 
.L_408998:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4089a0:

            lea RDX,QWORD PTR [RDI+8]
            xor EAX,EAX
            jmp .L_4089be
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4089b0:

            add RAX,1
            add RDX,10
            cmp RAX,32
            je .L_4089d8
.L_4089be:

            cmp BYTE PTR [RDX+1],0
            movsxd RCX,EAX
            jne .L_4089b0

            cmp BYTE PTR [RDX],127
            jne .L_4089b0

            lea RAX,QWORD PTR [RCX+RCX*4]
            lea RAX,QWORD PTR [RDI+RAX*2]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4089d8:

            xor EAX,EAX
            ret 
.L_4089db:

            nop
            nop
            nop
            nop
            nop
.L_4089e0:

            cmp ESI,2
            mov EAX,7
            ja .L_4089f2

            mov DWORD PTR [RDI+320],ESI
            xor EAX,EAX
.L_4089f2:

            ret 
.L_4089f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408a00:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_408930

            test RAX,RAX
            mov RDX,RAX
            je .L_408a38
.L_408a19:

            cmp BYTE PTR [RDX+9],0
            mov EAX,24
            jne .L_408a2a

            mov BYTE PTR [RDX+9],1
            xor EAX,EAX
.L_408a2a:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408a38:

            lea RDX,QWORD PTR [RBX+8]
            xor EAX,EAX
            jmp .L_408a4e
.L_408a40:

            add RAX,1
            add RDX,10
            cmp RAX,32
            je .L_408a70
.L_408a4e:

            cmp BYTE PTR [RDX+1],0
            movsxd RCX,EAX
            jne .L_408a40

            cmp BYTE PTR [RDX],127
            jne .L_408a40

            lea RAX,QWORD PTR [RCX+RCX*4]
            lea RDX,QWORD PTR [RBX+RAX*2]
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RDX],RAX
            jmp .L_408a19
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408a70:

            add RSP,8
            mov EAX,3
            pop RBX
            pop RBP
            ret 
.L_408a7c:

            nop
            nop
            nop
            nop
.L_408a80:

            sub RSP,8
            call .L_408930

            test RAX,RAX
            je .L_408ab0

            mov RDX,RAX
            mov EAX,23
            cmp BYTE PTR [RDX+9],0
            je .L_408aa2

            mov BYTE PTR [RDX+9],0
            xor EAX,EAX
.L_408aa2:

            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408ab0:

            mov EAX,23
            add RSP,8
            ret 
.L_408aba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408ac0:

            lea RAX,QWORD PTR [RDI+9]
            add RDI,329
            nop
            nop
            nop
            nop
            nop
.L_408ad0:

            mov BYTE PTR [RAX],0
            add RAX,10
            cmp RAX,RDI
            jne .L_408ad0

            ret 
.L_408ade:

            nop
            nop
.L_408ae0:

            movzx R8D,BYTE PTR [RSI]
            cmp R8B,31
            ja .L_408b3b

            movzx R11D,R8B
            lea RAX,QWORD PTR [R11+R11*4]
            cmp BYTE PTR [RDI+RAX*2+9],0
            jne .L_408b48

            lea ECX,DWORD PTR [R8+1]
            mov R9D,31
            sub R9D,R8D
            movzx EAX,CL
            movzx ECX,CL
            movzx R9D,R9B
            lea RCX,QWORD PTR [RCX+RCX*4]
            add R9D,EAX
            lea RCX,QWORD PTR [RDI+RCX*2+9]
            jmp .L_408b33
          .byte 0x66
          .byte 0x90
.L_408b20:

            movzx R10D,BYTE PTR [RCX]
            movsxd R11,EAX
            add RCX,10
            add EAX,1
            test R10B,R10B
            jne .L_408b48
.L_408b33:

            cmp EAX,R9D
            mov R8D,EAX
            jne .L_408b20
.L_408b3b:

            mov EAX,23
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408b48:

            lea RAX,QWORD PTR [R11+R11*4]
            add R8D,1
            lea RAX,QWORD PTR [RDI+RAX*2]
            mov RCX,QWORD PTR [RAX]
            mov QWORD PTR [RDX],RCX
            movzx EAX,WORD PTR [RAX+8]
            mov WORD PTR [RDX+8],AX
            mov BYTE PTR [RSI],R8B
            xor EAX,EAX
            ret 
.L_408b68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408b70:

            test RSI,RSI
            je .L_408ba0

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov EBP,EDX
            mov RBX,RSI
            call .L_408930

            test RAX,RAX
            je .L_408bb0
.L_408b8b:

            mov BYTE PTR [RAX+8],BPL
            xor EAX,EAX
.L_408b91:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408ba0:

            mov BYTE PTR [RDI+324],DL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408bb0:

            lea RCX,QWORD PTR [R12+8]
            jmp .L_408bce
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408bc0:

            add RAX,1
            add RCX,10
            cmp RAX,32
            je .L_408bf0
.L_408bce:

            cmp BYTE PTR [RCX+1],0
            movsxd RDX,EAX
            jne .L_408bc0

            cmp BYTE PTR [RCX],127
            jne .L_408bc0

            lea RAX,QWORD PTR [RDX+RDX*4]
            mov RDX,QWORD PTR [RBX]
            lea RAX,QWORD PTR [R12+RAX*2]
            mov QWORD PTR [RAX],RDX
            jmp .L_408b8b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408bf0:

            mov EAX,3
            jmp .L_408b91
.L_408bf7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408c00:

            test RSI,RSI
            je .L_408c20

            sub RSP,8
            call .L_408930

            test RAX,RAX
            je .L_408c30

            mov BYTE PTR [RAX+8],127
            xor EAX,EAX
.L_408c19:

            add RSP,8
            ret 
          .byte 0x66
          .byte 0x90
.L_408c20:

            mov BYTE PTR [RDI+324],127
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408c30:

            mov EAX,23
            jmp .L_408c19
.L_408c37:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408c40:

            mov BYTE PTR [RDI+324],127
            lea RAX,QWORD PTR [RDI+8]
            add RDI,328
            nop
            nop
            nop
            nop
            nop
            nop
.L_408c58:

            mov BYTE PTR [RAX],127
            add RAX,10
            cmp RAX,RDI
            jne .L_408c58

            ret 
.L_408c66:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408c70:

            movzx R8D,BYTE PTR [RSI]
            cmp R8B,31
            ja .L_408ccc

            movzx R11D,R8B
            lea RAX,QWORD PTR [R11+R11*4]
            cmp BYTE PTR [RDI+RAX*2+8],127
            jne .L_408d00

            lea ECX,DWORD PTR [R8+1]
            mov R9D,31
            sub R9D,R8D
            movzx EAX,CL
            movzx ECX,CL
            movzx R9D,R9B
            lea RCX,QWORD PTR [RCX+RCX*4]
            add R9D,EAX
            lea RCX,QWORD PTR [RDI+RCX*2+8]
            jmp .L_408cc4
          .byte 0x66
          .byte 0x90
.L_408cb0:

            movzx R10D,BYTE PTR [RCX]
            movsxd R11,EAX
            add RCX,10
            add EAX,1
            cmp R10B,127
            jne .L_408d00
.L_408cc4:

            cmp EAX,R9D
            mov R8D,EAX
            jne .L_408cb0
.L_408ccc:

            cmp R8B,32
            mov EAX,23
            jne .L_408cf6

            cmp BYTE PTR [RDI+324],127
            je .L_408cf6

            mov QWORD PTR [RDX],-1
            movzx EAX,BYTE PTR [RDI+324]
            mov BYTE PTR [RDX+8],AL
            mov BYTE PTR [RSI],33
            xor EAX,EAX
.L_408cf6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408d00:

            lea RAX,QWORD PTR [R11+R11*4]
            add R8D,1
            lea RAX,QWORD PTR [RDI+RAX*2]
            mov RCX,QWORD PTR [RAX]
            mov QWORD PTR [RDX],RCX
            movzx EAX,WORD PTR [RAX+8]
            mov WORD PTR [RDX+8],AX
            mov BYTE PTR [RSI],R8B
            xor EAX,EAX
            ret 
.L_408d20:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
            call .L_408930

            mov RCX,RAX
            movzx EAX,BYTE PTR [RBX+324]
            mov BYTE PTR [RBP],AL
            mov EAX,DWORD PTR [RBX+320]
            cmp EAX,1
            je .L_408d88

            cmp EAX,2
            mov EAX,0
            je .L_408d70

            test RCX,RCX
            je .L_408d66
.L_408d58:

            movzx EDX,BYTE PTR [RCX+8]
            xor EAX,EAX
            cmp DL,127
            je .L_408d66

            mov BYTE PTR [RBP],DL
.L_408d66:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408d70:

            test RCX,RCX
            je .L_408d66

            cmp BYTE PTR [RCX+9],0
            mov EAX,21
            je .L_408d58

            jmp .L_408d66
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408d88:

            test RCX,RCX
            je .L_408d93

            cmp BYTE PTR [RCX+9],0
            jne .L_408d58
.L_408d93:

            add RSP,8
            mov EAX,21
            pop RBX
            pop RBP
            ret 
.L_408d9f:

            nop
.L_408da0:

            mov RAX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI],RAX
            sete AL
            ret 
.L_408daa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408db0:

            mov RAX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI],RAX
            setne AL
            ret 
.L_408dba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408dc0:

            test DL,DL
            mov DWORD PTR [RDI+8],2
            je .L_408df0

            lea RAX,QWORD PTR [RSI+7]
            sub RSI,1
            nop
            nop
            nop
            nop
            nop
.L_408dd8:

            movzx EDX,BYTE PTR [RAX]
            sub RAX,1
            add RDI,1
            mov BYTE PTR [RDI-1],DL
            cmp RAX,RSI
            jne .L_408dd8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408df0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI],RAX
            ret 
.L_408df7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408e00:

            push RBX
            mov EAX,DWORD PTR [RDI+8]
            mov RBX,RSI
            cmp EAX,1
            je .L_408e90

            jb .L_408e70

            cmp EAX,2
            jne .L_408e66

            movzx EAX,BYTE PTR [RDI+7]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_409f40]
            movzx ESI,DX
            mov RCX,-1
            mov EDX,1
            push RAX
            movzx EAX,BYTE PTR [RDI+6]
            push RAX
            movzx EAX,BYTE PTR [RDI+5]
            push RAX
            movzx EAX,BYTE PTR [RDI+4]
            push RAX
            movzx EAX,BYTE PTR [RDI+3]
            push RAX
            movzx EAX,BYTE PTR [RDI+2]
            push RAX
            movzx EAX,BYTE PTR [RDI+1]
            push RAX
            movzx R9D,BYTE PTR [RDI]
            xor EAX,EAX
            mov RDI,RBX
            call __snprintf_chk@PLT

            add RSP,64
.L_408e66:

            mov RAX,RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408e70:

            movzx ESI,DX
            lea RDX,QWORD PTR [RIP+.L_409ec5]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408e90:

            movzx R9D,WORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_409eca]
            movzx ESI,DX
            mov RDI,RBX
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,RBX
            pop RBX
            ret 
.L_408eb9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ec0:

            mov RCX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RCX+1]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX]
            or EAX,EDX
            ret 
.L_408ed2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ee0:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX]
            mov ECX,EAX
            or EAX,32
            and ECX,4294967263
            test SIL,SIL
            cmove EAX,ECX
            mov BYTE PTR [RDX],AL
            ret 
.L_408ef7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408f00:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX]
            mov ECX,EAX
            or EAX,16
            and ECX,4294967279
            test SIL,SIL
            cmove EAX,ECX
            mov BYTE PTR [RDX],AL
            ret 
.L_408f17:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408f20:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+1]
            shl EAX,8
            and AX,3072
            cmp AX,1
            sbb EAX,EAX
            or EAX,3
            ret 
.L_408f38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408f40:

            mov RCX,QWORD PTR [RDI]
            mov EAX,6
            movzx EDX,BYTE PTR [RCX+1]
            shl EDX,8
            and DH,12
            je .L_408f68

            movzx EAX,BYTE PTR [RCX+4]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+3]
            or EAX,EDX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
.L_408f68:

            ret 
.L_408f6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408f70:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            test AH,12
            je .L_408f8b

            mov EAX,ESI
            mov BYTE PTR [RDX+3],SIL
            mov BYTE PTR [RDX+4],AH
            xor EAX,EAX
            ret 
.L_408f8b:

            lea RCX,QWORD PTR [RIP+.L_40a380]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409ee3]
            sub RSP,8
            mov EDX,264
            call __assert_fail@PLT
.L_408fae:

            nop
            nop
.L_408fb0:

            mov EAX,5
            ret 
.L_408fb6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408fc0:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,2048
            je .L_409020

            cmp AX,3072
            jne .L_409010

            lea RAX,QWORD PTR [RDX+12]
            mov DWORD PTR [RSI+8],2
            add RDX,4
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ff0:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RSI,1
            mov BYTE PTR [RSI-1],CL
            cmp RAX,RDX
            jne .L_408ff0

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409010:

            mov DWORD PTR [RSI+8],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409020:

            movzx EAX,BYTE PTR [RDX+6]
            shl EAX,8
            mov ECX,EAX
            movzx EAX,BYTE PTR [RDX+5]
            mov DWORD PTR [RSI+8],1
            or EAX,ECX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 
.L_40903c:

            nop
            nop
            nop
            nop
.L_409040:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,2048
            jne .L_409060

            mov EAX,ESI
            mov BYTE PTR [RDX+5],SIL
            mov BYTE PTR [RDX+6],AH
            xor EAX,EAX
            ret 
.L_409060:

            lea RCX,QWORD PTR [RIP+.L_45fd50-350736]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409f68]
            sub RSP,8
            mov EDX,303
            call __assert_fail@PLT
.L_409083:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409090:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,3072
            jne .L_4090c6

            lea RAX,QWORD PTR [RSI+7]
            add RDX,5
            sub RSI,1
.L_4090b0:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,RSI
            jne .L_4090b0

            xor EAX,EAX
            ret 
.L_4090c6:

            lea RCX,QWORD PTR [RIP+.L_40a300]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409fa8]
            sub RSP,8

            mov EDX,314
            call __assert_fail@PLT
.L_4090e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4090f0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_409100

            cmp EAX,2
            jne .L_409108

            jmp .L_409090
          .byte 0x90
.L_409100:

            movzx ESI,WORD PTR [RSI]
            jmp .L_409040
.L_409108:

            lea RCX,QWORD PTR [RIP+.L_40a2c0]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409efa]
            sub RSP,8
            mov EDX,340
            call __assert_fail@PLT
.L_40912b:

            nop
            nop
            nop
            nop
            nop
.L_409130:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,4294967295
            test DX,52224
            je .L_40917a

            test DL,64
            mov EAX,3
            jne .L_40917a

            and DX,3072
            mov EAX,7
            cmp DX,2048
            je .L_40917a

            cmp DX,3072
            mov EAX,13
            mov EDX,3
            cmovne EAX,EDX
.L_40917a:

            ret 
.L_40917c:

            nop
            nop
            nop
            nop
.L_409180:

            call .L_409130

            cmp AL,255
            je .L_4091a8

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RAX+1]
            movzx EAX,BYTE PTR [RAX]
            shl EDX,8
            or EAX,EDX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4091a8:

            mov EAX,6
            ret 
.L_4091ae:

            nop
            nop
.L_4091b0:

            call .L_409130

            cmp AL,255
            je .L_4091d0

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov ECX,ESI
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],CH
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4091d0:

            mov EAX,6
            ret 
.L_4091d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4091e0:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,7
            mov ECX,EDX
            and CX,3072
            cmp CX,2048
            je .L_409216

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_409216:

            lea ECX,DWORD PTR [RAX+2]
            and EDX,64
            cmove EAX,ECX
            ret 
.L_409220:

            mov RCX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RCX+1]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX]
            or EAX,EDX
            mov EDX,7
            mov EDI,EAX
            and DI,3072
            cmp DI,2048
            je .L_409256

            cmp DI,3072
            mov EDX,13
            mov EDI,3
            cmovne EDX,EDI
.L_409256:

            lea EDI,DWORD PTR [RDX+2]
            test AL,64
            cmove EDX,EDI
            and AX,49152
            cmp AX,32768
            je .L_4092b0

            cmp AX,49152
            jne .L_4092a0

            movzx EDX,DL
            mov DWORD PTR [RSI+8],2
            lea RAX,QWORD PTR [RCX+RDX*1+7]
            lea RCX,QWORD PTR [RSI+8]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409288:

            movzx EDX,BYTE PTR [RAX]
            add RSI,1
            sub RAX,1
            mov BYTE PTR [RSI-1],DL
            cmp RSI,RCX
            jne .L_409288

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x90
.L_4092a0:

            mov DWORD PTR [RSI+8],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4092b0:

            movzx EDX,DL
            add RDX,RCX
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            mov ECX,EAX
            movzx EAX,BYTE PTR [RDX]
            mov DWORD PTR [RSI+8],1
            or EAX,ECX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 
.L_4092d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4092e0:

            mov RDI,QWORD PTR [RDI]
            movzx ECX,BYTE PTR [RDI+1]
            mov EAX,ECX
            movzx ECX,BYTE PTR [RDI]
            shl EAX,8
            or ECX,EAX
            mov EAX,7
            mov EDX,ECX
            and DX,3072
            cmp DX,2048
            je .L_409316

            cmp DX,3072
            mov EAX,3
            mov EDX,13
            cmove EAX,EDX
.L_409316:

            lea EDX,DWORD PTR [RAX+2]
            test CL,64
            cmove EAX,EDX
            and CX,49152
            cmp CX,32768
            jne .L_40933c

            movzx EAX,AL
            mov EDX,ESI
            add RAX,RDI
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],DH
            xor EAX,EAX
            ret 
.L_40933c:

            lea RCX,QWORD PTR [RIP+.L_40a280]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409fe8]
            sub RSP,8

            mov EDX,461
            call __assert_fail@PLT
.L_40935f:

            nop
.L_409360:

            mov RDX,QWORD PTR [RDI]
            movzx EDI,BYTE PTR [RDX+1]
            mov EAX,EDI
            movzx EDI,BYTE PTR [RDX]
            shl EAX,8
            or EDI,EAX
            mov EAX,7
            mov ECX,EDI
            and CX,3072
            cmp CX,2048
            je .L_409396

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_409396:

            lea ECX,DWORD PTR [RAX+2]
            test DIL,64
            cmove EAX,ECX
            and DI,49152
            cmp DI,49152
            movzx ECX,AL
            jne .L_4093d6

            lea RAX,QWORD PTR [RSI+7]
            add RDX,RCX
            sub RSI,1
            nop
            nop
            nop
            nop
            nop
            nop
.L_4093c0:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,RSI
            jne .L_4093c0

            xor EAX,EAX
            ret 
.L_4093d6:

            lea RCX,QWORD PTR [RIP+.L_45fd50-350992]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_40a028]
            sub RSP,8

            mov EDX,474
            call __assert_fail@PLT
.L_4093f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409400:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_409418

            cmp EAX,2
            jne .L_409420

            jmp .L_409360
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409418:

            movzx ESI,WORD PTR [RSI]
            jmp .L_4092e0
.L_409420:

            lea RCX,QWORD PTR [RIP+.L_40a200]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409efa]
            sub RSP,8
            mov EDX,500
            call __assert_fail@PLT
.L_409443:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409450:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,4294967295
            test DL,8
            je .L_4094bc

            mov ECX,EDX
            mov EAX,7
            and CX,3072
            cmp CX,2048
            je .L_409490

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_409490:

            mov ECX,EDX
            and CX,49152
            cmp CX,32768
            je .L_4094c0

            cmp CX,49152
            je .L_4094b0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4094b0:

            lea ECX,DWORD PTR [RAX+2]
            and EDX,64
            cmove EAX,ECX
            add EAX,8
.L_4094bc:

            ret 
          .byte 0x66
          .byte 0x90
.L_4094c0:

            lea ECX,DWORD PTR [RAX+2]
            add EAX,4
            and EDX,64
            cmovne EAX,ECX
            ret 
.L_4094cd:

            nop
            nop
            nop
.L_4094d0:

            call .L_409450

            cmp AL,255
            je .L_4094f0

            mov RDX,QWORD PTR [RDI]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1]
            and EAX,7
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4094f0:

            mov EAX,6
            ret 
.L_4094f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409500:

            call .L_409450

            cmp AL,255
            je .L_409520

            mov RDX,QWORD PTR [RDI]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1]
            and EAX,24
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409520:

            mov EAX,6
            ret 
.L_409526:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409530:

            call .L_409450

            cmp AL,255
            je .L_409550

            mov RDX,QWORD PTR [RDI]
            add EAX,1
            movzx EAX,AL
            mov EAX,DWORD PTR [RDX+RAX*1]
            mov DWORD PTR [RSI],EAX
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409550:

            mov EAX,6
            ret 
.L_409556:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409560:

            sub RSP,8
            call .L_409450

            cmp AL,255
            je .L_409592

            add EAX,1
            mov EDX,ESI
            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],DH
            shr ESI,24
            shr EDX,16
            mov BYTE PTR [RAX+3],SIL
            mov BYTE PTR [RAX+2],DL
            xor EAX,EAX
            add RSP,8
            ret 
.L_409592:

            lea RCX,QWORD PTR [RIP+.L_40a1c0]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409ee3]
            mov EDX,601
            call __assert_fail@PLT
.L_4095b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4095c0:

            sub RSP,8
            call .L_409450

            cmp AL,255
            mov RCX,QWORD PTR [RDI]
            je .L_4095dd

            movzx EDX,AL
            add RSP,8
            lea RAX,QWORD PTR [RCX+RDX*1+5]
            ret 
.L_4095dd:

            lea RCX,QWORD PTR [RIP+.L_40a180]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409ee3]
            mov EDX,616
            call __assert_fail@PLT
.L_4095fc:

            nop
            nop
            nop
            nop
.L_409600:

            cmp DIL,16
            mov EAX,4
            je .L_409615

            cmp DIL,24
            sete AL
            shl EAX,3
.L_409615:

            ret 
.L_409617:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409620:

            sub RSP,8
.L_409624:

            call .L_409450

            movzx EDX,AL
            add RDX,QWORD PTR [RDI]
            cmp AL,255
            je .L_4096ee

            movzx ECX,BYTE PTR [RDX]
            mov EAX,4
            and ECX,24
            cmp CL,16
            je .L_409653

            xor EAX,EAX
            cmp CL,24
            sete AL
            shl RAX,3
.L_409653:

            cmp EAX,8
            lea RDI,QWORD PTR [RDX+5]
            mov ECX,EAX
            jae .L_409680

            test AL,4
            jne .L_4096c8

            test EAX,EAX
            je .L_409671

            movzx EAX,BYTE PTR [RSI]
            test CL,2
            mov BYTE PTR [RDX+5],AL
            jne .L_4096e0
.L_409671:

            add RSP,8
.L_409675:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409680:

            mov RCX,QWORD PTR [RSI]
            add RDX,13
            mov QWORD PTR [RDX-8],RCX
            mov ECX,EAX
            and RDX,-8
            mov R8,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RDI+RCX*1-8],R8
            sub RDI,RDX
            lea ECX,DWORD PTR [RAX+RDI*1]
            sub RSI,RDI
            and ECX,4294967288
            cmp ECX,8
            jb .L_409671

            and ECX,4294967288
            xor EAX,EAX
.L_4096b1:

            mov EDI,EAX
            add EAX,8
            mov R8,QWORD PTR [RSI+RDI*1]
            cmp EAX,ECX
            mov QWORD PTR [RDX+RDI*1],R8
            jb .L_4096b1

            jmp .L_409671
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4096c8:

            mov EAX,DWORD PTR [RSI]
            mov DWORD PTR [RDX+5],EAX
            mov EAX,ECX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RDI+RAX*1-4],EDX
            jmp .L_409671
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4096e0:

            mov EAX,ECX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RDI+RAX*1-2],DX
            jmp .L_409671
.L_4096ee:

            lea RCX,QWORD PTR [RIP+.L_40a140]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409ee3]
            mov EDX,656
            call __assert_fail@PLT
.L_40970d:

            nop
            nop
            nop
.L_409710:

            call .L_409450

            cmp AL,255
            je .L_409745

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov ECX,9
            movzx EDX,BYTE PTR [RAX]
            and EDX,24
            cmp DL,16
            je .L_40973f

            xor ECX,ECX
            cmp DL,24
            sete CL
            lea RCX,QWORD PTR [RCX*8+5]
.L_40973f:

            movzx EAX,BYTE PTR [RAX+RCX*1]
            mov BYTE PTR [RSI],AL
.L_409745:

            xor EAX,EAX
            ret 
.L_409748:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409750:

            sub RSP,8
            call .L_409450

            movzx EDX,AL
            add RDX,QWORD PTR [RDI]
            cmp AL,255
            je .L_40978c

            movzx EAX,BYTE PTR [RDX]
            mov ECX,9
            and EAX,24
            cmp AL,16
            je .L_409781

            xor ECX,ECX
            cmp AL,24
            sete CL
            lea RCX,QWORD PTR [RCX*8+5]
.L_409781:

            mov BYTE PTR [RDX+RCX*1],SIL
            xor EAX,EAX
            add RSP,8
            ret 
.L_40978c:

            lea RCX,QWORD PTR [RIP+.L_40a100]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409ee3]
            mov EDX,690
            call __assert_fail@PLT
.L_4097ab:

            nop
            nop
            nop
            nop
            nop
.L_4097b0:

            call .L_409450

            movzx EDX,AL
            mov EAX,2
            cmp DL,255
            je .L_4097f7

            mov RAX,QWORD PTR [RDI]
            movzx ECX,BYTE PTR [RAX+RDX*1]
            mov EDX,1
            mov EAX,18
            and ECX,7
            shl RDX,CL
            test DL,136
            jne .L_4097f7

            test DL,68
            mov EAX,10
            jne .L_4097f7

            and EDX,34
            cmp RDX,1
            sbb EAX,EAX
            and EAX,4294967292
            add EAX,6
.L_4097f7:

            ret 
.L_4097f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409800:

            sub RSP,8
.L_409804:

            mov RCX,QWORD PTR [RDI]
            mov EAX,ESI
            mov R9,RDI
            mov BYTE PTR [RCX+1],AH
            and AX,3072
            mov BYTE PTR [RCX],SIL
            cmp AX,2048
            je .L_409908

            cmp AX,3072
            je .L_409850

            test AX,AX
            je .L_4098f8

            lea RCX,QWORD PTR [RIP+.L_45fd50-350608]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409efa]
            mov EDX,122
            call __assert_fail@PLT
          .byte 0x66
          .byte 0x90
.L_409850:

            mov R8D,13
.L_409856:

            mov EAX,ESI
            and AX,49152
            cmp AX,32768
            je .L_409890

            cmp AX,49152
            je .L_409918

            test AX,AX
            je .L_4098a0

            lea RCX,QWORD PTR [RIP+.L_45fd50-350608]
            lea RSI,QWORD PTR [RIP+.L_409ed1]
            lea RDI,QWORD PTR [RIP+.L_409efa]
            mov EDX,150
            call __assert_fail@PLT
.L_409890:

            lea EDI,DWORD PTR [R8+2]
            add R8D,4
            test SIL,64
            cmovne R8D,EDI
.L_4098a0:

            test SIL,8
            je .L_4098d2

            movzx EAX,R8B
            test DL,7
            mov BYTE PTR [RCX+RAX*1],DL
            lea EAX,DWORD PTR [R8+5]
            cmovne R8D,EAX
            and EDX,24
            cmp DL,16
            je .L_409940

            cmp DL,24
            je .L_409930

            cmp DL,8
            sete AL
            add R8D,EAX
.L_4098d2:

            and ESI,7
            mov RDI,R9
            cmp SI,3
            sete AL
            add R8D,EAX
            call .L_4097b0

            add R8D,EAX
            xor EAX,EAX
            mov BYTE PTR [R9+8],R8B
            add RSP,8
.L_4098f4:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4098f8:

            mov R8D,3
            jmp .L_409856
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409908:

            mov R8D,7
            jmp .L_409856
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409918:

            lea EAX,DWORD PTR [R8+2]
            test SIL,64
            cmove R8D,EAX
            add R8D,8
            jmp .L_4098a0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409930:

            add R8D,9
            jmp .L_4098d2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409940:

            add R8D,5
            jmp .L_4098d2
.L_409946:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409950:

            movzx ECX,BYTE PTR [RDI+8]
            mov EAX,4294967295
            cmp CL,4
            jbe .L_40998b

            mov RDI,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RDI+1]
            movzx ESI,BYTE PTR [RDI]
            shl EDX,8
            or EDX,ESI
            mov ESI,EDX
            and SI,3072
            cmp SI,2048
            je .L_409a18

            cmp SI,3072
            je .L_409990

            test SI,SI
            je .L_4099b8
.L_40998b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409990:

            mov EAX,13
.L_409995:

            mov ESI,EDX
            and SI,49152
            cmp SI,32768
            je .L_4099cb
.L_4099a3:

            cmp SI,49152
            je .L_409a28

            test SI,SI
            je .L_4099d7
.L_4099af:

            mov EAX,4294967295
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4099b8:

            mov ESI,EDX
            mov EAX,3
            and SI,49152
            cmp SI,32768
            jne .L_4099a3
.L_4099cb:

            lea ESI,DWORD PTR [RAX+2]
            add EAX,4
            test DL,64
            cmovne EAX,ESI
.L_4099d7:

            movzx ESI,AL
            add ESI,1
            cmp ECX,ESI
            jle .L_4099af

            test DL,8
            je .L_409a04

            movzx ECX,AL
            movzx ECX,BYTE PTR [RDI+RCX*1]
            and ECX,24
            cmp CL,16
            je .L_409a40

            cmp CL,24
            je .L_409a48

            cmp CL,8
            sete CL
            lea EAX,DWORD PTR [RAX+RCX*1+5]
.L_409a04:

            and EDX,7
            cmp DX,3
            sete DL
            add EAX,EDX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409a18:

            mov EAX,7
            jmp .L_409995
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409a28:

            lea ESI,DWORD PTR [RAX+2]
            test DL,64
            cmove EAX,ESI
            add EAX,8
            jmp .L_4099d7
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409a40:

            add EAX,10
            jmp .L_409a04
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409a48:

            add EAX,14
            jmp .L_409a04
.L_409a4d:

            nop
            nop
            nop
.L_409a50:

            mov R8,RDI
            call .L_409950

            movzx ESI,AL
            cmp SIL,255
            je .L_409a88

            mov RDI,R8
            call .L_4097b0

            movzx EAX,AL
            mov EDX,0
            add ESI,EAX
            movzx EAX,BYTE PTR [R8+8]
            cmp ESI,EAX
            mov EAX,6
            cmovle EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409a88:

            mov EAX,6
            ret 
.L_409a8e:

            nop
            nop
.L_409a90:

            mov R8,RDI
            mov R9,RSI
            call .L_409950

            cmp AL,255
            je .L_409ab0

            mov RDX,QWORD PTR [R8]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1-1]
            mov BYTE PTR [R9],AL
            xor EAX,EAX
            ret 
.L_409ab0:

            mov EAX,6
            ret 
.L_409ab6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409ac0:

            mov R9,QWORD PTR [RDI]
            xor R8D,R8D
            movzx EAX,BYTE PTR [R9]
            and EAX,7
            cmp AL,3
            je .L_409ad8
.L_409ad1:

            mov EAX,R8D
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409ad8:

            call .L_409950

            cmp AL,255
            je .L_409ad1

            movzx EAX,AL
            cmp BYTE PTR [R9+RAX*1-1],4
            sete R8B
            mov EAX,R8D
            ret 
.L_409af2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409b00:

            mov R8,RDI
            mov R9D,ESI
            call .L_409950

            cmp AL,255
            je .L_409b20

            mov RDX,QWORD PTR [R8]
            movzx EAX,AL
            mov BYTE PTR [RDX+RAX*1-1],R9B
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409b20:

            mov EAX,6
            ret 
.L_409b26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409b30:

            mov R8,RDI
            call .L_409950

            xor EDX,EDX
            cmp AL,255
            mov RCX,QWORD PTR [R8]
            je .L_409b48

            movzx EAX,AL
            lea RDX,QWORD PTR [RCX+RAX*1]
.L_409b48:

            mov RAX,RDX
            sub RAX,RCX
            ret 
.L_409b4f:

            nop
.L_409b50:

            mov R8,RDI
            call .L_409950

            xor ESI,ESI
            cmp AL,255
            mov R9,QWORD PTR [R8]
            je .L_409b68

            movzx EAX,AL
            lea RSI,QWORD PTR [R9+RAX*1]
.L_409b68:

            mov RDI,R8
            call .L_4097b0

            mov EDX,EAX
            mov EAX,127
            sub RSI,R9
            sub EAX,EDX
            sub EAX,ESI
            ret 
.L_409b7f:

            nop
.L_409b80:

            mov R9,RDI
            movzx R8D,BYTE PTR [RDI+8]
            call .L_409950

            xor ESI,ESI
            cmp AL,255
            mov R10,QWORD PTR [R9]
            je .L_409b9d

            movzx EAX,AL
            lea RSI,QWORD PTR [R10+RAX*1]
.L_409b9d:

            mov RDI,R9
            call .L_4097b0

            sub R8D,EAX
            sub RSI,R10
            mov EAX,R8D
            sub EAX,ESI
            ret 
.L_409bb1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409bc0:

            mov R8,RDI
            mov R10D,ESI
            call .L_409950

            xor ESI,ESI
            cmp AL,255
            mov R9,QWORD PTR [R8]
            je .L_409bdb

            movzx EAX,AL
            lea RSI,QWORD PTR [R9+RAX*1]
.L_409bdb:

            mov RDI,R8
            call .L_4097b0

            sub RSI,R9
            add EAX,R10D
            add EAX,ESI
            mov BYTE PTR [R8+8],AL
            xor EAX,EAX
            ret 
.L_409bf2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409c00:

            mov R8,RDI
            call .L_409950

            movzx EDX,AL
            add RDX,QWORD PTR [R8]
            cmp AL,255
            mov EAX,0
            cmove RDX,RAX
            mov RAX,RDX
            ret 
.L_409c1d:

            nop
            nop
            nop
.L_409c20:

            jmp .L_409c00
.L_409c22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409c30:

            call .L_4097b0

            movzx EDX,AL
            movzx EAX,BYTE PTR [RDI+8]
            sub RAX,RDX
            add RAX,QWORD PTR [RDI]
            ret 
.L_409c43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409c50:

            jmp .L_409c30
.L_409c52:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409c60:

            push R15
            push R14
            lea R14,QWORD PTR [RIP+.L_409f07]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,136
.L_409c7e:

            mov R8,QWORD PTR [RDI]
            mov DWORD PTR [RSP+36],0
            mov DWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            movzx R9D,BYTE PTR [R8]
            mov WORD PTR [RSP+6],DX
            and R9D,7
            cmp R9B,1
            je .L_409d49

            lea R14,QWORD PTR [RIP+.L_409f00]
            jb .L_409d49

            cmp R9B,2
            lea R14,QWORD PTR [RIP+.L_409f0c]
            je .L_409d49

            cmp R9B,3
            jne .L_409d20

            call .L_409950

            cmp AL,255
            je .L_409e28

            movzx EAX,AL
            lea R14,QWORD PTR [RIP+.L_409f1f]
            movzx R9D,BYTE PTR [R8+RAX*1-1]
            cmp R9B,4
            je .L_409d49

            cmp R9B,7
            lea R14,QWORD PTR [RIP+.L_409f10]
            je .L_409d49
.L_409d08:

            lea R14,QWORD PTR [RSP+54]
            lea R8,QWORD PTR [RIP+.L_409f33]
            jmp .L_409d30
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409d20:

            lea R14,QWORD PTR [RSP+54]
            lea R8,QWORD PTR [RIP+.L_409f3b]
            and R9D,7
.L_409d30:

            mov ECX,10
            mov EDX,1
            mov ESI,10
            mov RDI,R14
            xor EAX,EAX
            call __snprintf_chk@PLT
.L_409d49:

            lea R15,QWORD PTR [RSP+28]
            mov RDI,RBX
            mov RSI,R15
            call .L_409220

            lea R8,QWORD PTR [RSP+40]
            mov RDI,RBX
            mov RSI,R8
            call .L_408fc0

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_409f30]
            mov RDI,R8
            movzx ESI,BYTE PTR [RAX]
            lea RAX,QWORD PTR [RIP+.L_409f2c]
            mov RCX,RAX
            test SIL,32
            cmove RCX,RDX
            and ESI,8
            lea RSI,QWORD PTR [RSP+96]
            cmove RAX,RDX
            mov EDX,18
            mov QWORD PTR [RSP+8],RCX
            mov R13,RAX
            call .L_408e00

            lea RSI,QWORD PTR [RSP+64]
            mov EDX,18
            mov RDI,R15
            mov RBP,RAX
            call .L_408e00

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,WORD PTR [RSP+6]
            lea R8,QWORD PTR [RIP+.L_40a068]
            mov EDX,1
            mov RDI,R12
            push RCX
.L_409dd8:

            push R13
            mov RCX,-1
            push RBP
            push RAX
            mov RAX,QWORD PTR [RBX]
            push R14
            movzx EAX,BYTE PTR [RAX+2]
            push RAX
            movzx R9D,BYTE PTR [RBX+8]
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,48
            mov RAX,R12
            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            jne .L_409e33

            add RSP,136
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409e28:

            mov R9D,255
            jmp .L_409d08
.L_409e33:

            call __stack_chk_fail@PLT
.L_409e38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409e40:

            push RBX
            movzx EAX,BYTE PTR [RDI+1]
            lea R8,QWORD PTR [RIP+.L_409f30]
            lea RCX,QWORD PTR [RIP+.L_409f2c]
            mov RBX,RSI
            movzx ESI,DX
            mov R9,R8
            mov EDX,1
            test AL,8
            cmovne R9,RCX
            test AL,1
            cmove RCX,R8
            sar EAX,4
            push R9
            push RCX
            push RAX
            lea R9,QWORD PTR [RDI+2]
            movzx EAX,BYTE PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_40a0a8]
            mov RCX,-1
            push RAX
            movzx EAX,BYTE PTR [RDI+25]
            push RAX
            movzx EAX,BYTE PTR [RDI+24]
            push RAX
            movzx EAX,BYTE PTR [RDI+23]
            push RAX
            movzx EAX,BYTE PTR [RDI+22]
            push RAX
            movzx EAX,BYTE PTR [RDI+21]
            push RAX
            movzx EAX,BYTE PTR [RDI+20]
            push RAX
            movzx EAX,BYTE PTR [RDI+19]
            push RAX
            movzx EAX,BYTE PTR [RDI+18]
            mov RDI,RBX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,96
            mov RAX,RBX
            pop RBX
            ret 
.L_409ec5:
          .string "None"
.L_409eca:
          .string "0x%04x"
.L_409ed1:
          .string "mac/mac_frame.cpp"
.L_409ee3:
          .string "index != kInvalidIndex"
.L_409efa:
          .string "false"
.L_409f00:
          .string "Beacon"
.L_409f07:
          .string "Data"
.L_409f0c:
          .string "Ack"
.L_409f10:
          .string "Cmd(BeaconReq)"
.L_409f1f:
          .string "Cmd(DataReq)"
.L_409f2c:
          .string "yes"
.L_409f30:
          .string "no"
.L_409f33:
          .string "Cmd(%d)"
.L_409f3b:
          .string "%d"
          .byte 0x66
          .byte 0x90
.L_409f40:
          .string "%02x%02x%02x%02x%02x%02x%02x%02x"
          .zero 7
.L_409f68:
          .string "(GetFrameControlField() & kFcfDstAddrMask) == kFcfDstAddrShort"
          .zero 1
.L_409fa8:

            sub BYTE PTR [RDI+101],AL
            je .L_409ff3
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x43
          .byte 0x6f
          .byte 0x6e
          .byte 0x74
          .byte 0x72
          .byte 0x6f
          .byte 0x6c
          .byte 0x46
          .byte 0x69
          .byte 0x65
          .byte 0x6c
          .byte 0x64
          .byte 0x28
          .byte 0x29
          .byte 0x20
          .byte 0x26
          .byte 0x20
          .byte 0x6b
          .byte 0x46
          .byte 0x63
          .byte 0x66
          .byte 0x44
          .byte 0x73
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x4d
          .byte 0x61
          .byte 0x73
          .byte 0x6b
          .byte 0x29
          .byte 0x20
          .byte 0x3d
          .byte 0x3d
          .byte 0x20
          .byte 0x6b
          .byte 0x46
          .byte 0x63
          .byte 0x66
          .byte 0x44
          .byte 0x73
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x45
          .byte 0x78
          .byte 0x74
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409fe8:
          .byte 0x28
          .byte 0x47
          .byte 0x65
          .byte 0x74
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x43
          .byte 0x6f
.L_409ff3:

            outsb DX,BYTE PTR [RSI]
            je .L_40a068
          .byte 0x6f
          .byte 0x6c
          .byte 0x46
          .byte 0x69
          .byte 0x65
          .byte 0x6c
          .byte 0x64
          .byte 0x28
          .byte 0x29
          .byte 0x20
          .byte 0x26
          .byte 0x20
          .byte 0x6b
          .byte 0x46
          .byte 0x63
          .byte 0x66
          .byte 0x53
          .byte 0x72
          .byte 0x63
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x4d
          .byte 0x61
          .byte 0x73
          .byte 0x6b
          .byte 0x29
          .byte 0x20
          .byte 0x3d
          .byte 0x3d
          .byte 0x20
          .byte 0x6b
          .byte 0x46
          .byte 0x63
          .byte 0x66
          .byte 0x53
          .byte 0x72
          .byte 0x63
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x53
          .byte 0x68
          .byte 0x6f
          .byte 0x72
          .byte 0x74
          .byte 0x0
          .byte 0x0
.L_40a028:
          .string "(GetFrameControlField() & kFcfSrcAddrMask) == kFcfSrcAddrExt"
          .zero 3
.L_40a068:

            insb BYTE PTR [RDI],DX
            outsb DX,BYTE PTR GS:[RSI]
            cmp AH,BYTE PTR [RIP+.L_67e630+1928914597]
            jno .L_40a0e2
          .byte 0x75
          .byte 0x6d
          .byte 0x3a
          .byte 0x25
          .byte 0x64
          .byte 0x2c
          .byte 0x20
          .byte 0x74
          .byte 0x79
          .byte 0x70
          .byte 0x65
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x73
          .byte 0x72
          .byte 0x63
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x64
          .byte 0x73
          .byte 0x74
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x73
          .byte 0x65
          .byte 0x63
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x61
          .byte 0x63
          .byte 0x6b
          .byte 0x72
          .byte 0x65
          .byte 0x71
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a0a8:
          .byte 0x6e
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x78
          .byte 0x70
          .byte 0x61
          .byte 0x6e
          .byte 0x69
          .byte 0x64
          .byte 0x3a
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x25
          .byte 0x30
          .byte 0x32
          .byte 0x78
          .byte 0x2c
          .byte 0x20
          .byte 0x69
          .byte 0x64
          .byte 0x3a
          .byte 0x25
          .byte 0x64
          .byte 0x20
          .byte 0x76
          .byte 0x65
.L_40a0e2:

            jb .L_40a11e
          .byte 0x25
          .byte 0x64
          .byte 0x2c
          .byte 0x20
          .byte 0x6a
          .byte 0x6f
          .byte 0x69
          .byte 0x6e
          .byte 0x61
          .byte 0x62
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x6e
          .byte 0x61
          .byte 0x74
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x3a
          .byte 0x25
          .byte 0x73
          .byte 0x0
          .byte 0x90
.L_40a100:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x4b
          .byte 0x65
          .byte 0x79
.L_40a11e:

            sub BYTE PTR FS:[RBP+105],DH
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a140:
          .string "void ot::Mac::Frame::SetKeySource(const uint8_t*)"
# WARNING: found overlapping blocks at address 9f30
# WARNING: found overlapping blocks at address 9f37
          .zero 14
.L_40a180:
          .string "const uint8_t* ot::Mac::Frame::GetKeySource() const"
          .zero 12
.L_40a1c0:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
.L_40a1db:

            jb .L_40a23f
          .byte 0x6d
          .byte 0x65
          .byte 0x43
          .byte 0x6f
          .byte 0x75
          .byte 0x6e
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33
          .byte 0x32
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a200:
          .string "otError ot::Mac::Frame::SetSrcAddr(const ot::Mac::Address&)"
          .zero 3
.L_40a23f:

            add BYTE PTR [RDI+116],CH
            jb .L_40a2b7
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x53
          .byte 0x72
          .byte 0x63
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x28
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x45
          .byte 0x78
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
.L_40a280:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x53
          .byte 0x72
          .byte 0x63
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x68
          .byte 0x6f
          .byte 0x72
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x65
          .byte 0x73
.L_40a2b7:

            jae .L_40a2e2
          .zero 7
.L_40a2c0:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x44
          .byte 0x73
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
.L_40a2e2:

            sub BYTE PTR [RBX+111],AH
            outsb DX,BYTE PTR [RSI]
            jae .L_40a35c
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a300:
          .string "otError ot::Mac::Frame::SetDstAddr(const ot::Mac::ExtAddress&)"
# WARNING: found overlapping blocks at address a10c

            add BYTE PTR [RDI+116],CH
            jb .L_40a3b7
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x74
          .byte 0x44
.L_40a35c:

            jae .L_40a3d2
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x68
          .byte 0x6f
          .byte 0x72
          .byte 0x74
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a380:
          .string "otError ot::Mac::Frame::SetDstPanId(ot::Mac::PanId)"
          .zero 3
.L_40a3b7:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RDI+116],CH
            jb .L_40a437
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
.L_40a3d2:

            jb .L_40a435
          .byte 0x6d
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x6e
          .byte 0x69
          .byte 0x74
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x48
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x28

            jne .L_40a451
          .byte 0x6e
          .byte 0x74
          .byte 0x31
          .byte 0x36
          .byte 0x5f
          .byte 0x74
          .byte 0x2c

            and BYTE PTR [RBP+105],DH
            outsb DX,BYTE PTR [RSI]
            je .L_40a42d
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a400:

            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+4]
            mov R12,RCX
            mov RBP,R8
            sub RSP,8
            call .L_437700
          .byte 0x48
          .byte 0x8d
          .byte 0x43
          .byte 0x18
          .byte 0x31
          .byte 0xd2
          .byte 0x4c
          .byte 0x89
          .byte 0x6b
          .byte 0x18
          .byte 0x4c
          .byte 0x89
          .byte 0x63
          .byte 0x30
.L_40a42d:

            mov QWORD PTR [RBX+56],RBP
            mov QWORD PTR [RBX+40],RAX
.L_40a435:

            xor EAX,EAX
.L_40a437:

            and BYTE PTR [RBX+20],254
            mov DWORD PTR [RBX+32],0
            mov DWORD PTR [RBX+12],0
            mov WORD PTR [RBX+16],AX
            mov WORD PTR [RBX+18],DX
.L_40a451:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_40a45c:

            nop
            nop
            nop
            nop
.L_40a460:

            test BYTE PTR [RDI+20],1
            lea RAX,QWORD PTR [RDI+12]
            mov EDX,0
            cmove RAX,RDX
            ret 
.L_40a472:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a480:

            test BYTE PTR [RDI+20],1
            jne .L_40a490

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40a490:

            add RDI,12
            jmp .L_40e0c0
.L_40a499:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a4a0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_40a4b1:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_437740

            mov RSI,R12
            mov RDI,RBP
            call .L_436ae0

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40a508

            add RSP,288
.L_40a503:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_40a508:

            call __stack_chk_fail@PLT
.L_40a50d:

            nop
            nop
            nop
.L_40a510:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_40a521:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_437740

            mov ESI,R12D
            mov RDI,RBP
            call .L_436680

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40a578

            add RSP,288
.L_40a573:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_40a578:

            call __stack_chk_fail@PLT
.L_40a57d:

            nop
            nop
            nop
.L_40a580:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_40a58e:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBX+24]
            call .L_433690

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_437740

            test EAX,EAX
            mov R12D,EAX
            je .L_40a5f0
.L_40a5cb:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_40a623

            add RSP,288
.L_40a5e8:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40a5f0:

            mov RDI,RBP
            call .L_436a30

            test RAX,RAX
            je .L_40a5cb

            mov RAX,QWORD PTR [RAX]
            or BYTE PTR [RBX+20],1
            cmp DWORD PTR [RBX+8],14
            mov QWORD PTR [RBX+12],RAX
            jne .L_40a5cb

            mov RDI,RBX
            call .L_4334e0

            mov RDI,RBP
            mov RSI,RAX
            call .L_437350

            jmp .L_40a5cb
.L_40a623:

            call __stack_chk_fail@PLT
.L_40a628:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a630:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,296
.L_40a63c:

            mov ESI,DWORD PTR [RDI+8]
            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBP+4]
            mov RSI,RBX
            call .L_437740

            test EAX,EAX
            jne .L_40a680

            mov RDI,RBP
            call .L_4334e0

            mov RDI,RBX
            mov RSI,RAX
            call .L_437350
.L_40a680:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40a69d

            add RSP,296
.L_40a69a:

            pop RBX
            pop RBP
            ret 
.L_40a69d:

            call __stack_chk_fail@PLT
.L_40a6a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a6b0:

            push RBX
            and BYTE PTR [RDI+20],254
            xor EAX,EAX
            xor EDX,EDX
            mov RBX,RDI
            mov DWORD PTR [RDI+12],0
            mov WORD PTR [RDI+16],AX
            mov WORD PTR [RDI+18],DX
            lea RDI,QWORD PTR [RDI+4]
            call .L_437710

            lea RDI,QWORD PTR [RBX+24]
            pop RBX
            jmp .L_433690
.L_40a6de:

            nop
            nop
.L_40a6e0:

            jmp .L_40a580
.L_40a6e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a6f0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,8
            call .L_436a30

            test RAX,RAX
            mov RBP,RAX
            je .L_40a725

            mov RAX,QWORD PTR [RAX]
            or BYTE PTR [RBX+20],1
            cmp DWORD PTR [RBX+8],14
            mov QWORD PTR [RBX+12],RAX
            je .L_40a7b0
.L_40a725:

            lea R13,QWORD PTR [RBX+4]
            mov RSI,RBP
            mov RDI,R13
            call .L_438170

            cmp EAX,0
            jg .L_40a750

            jne .L_40a790
.L_40a73b:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a750:

            mov RDI,RBX
            call .L_433510

            mov RSI,R12
            mov RBX,RAX
            mov RDI,R13
            call .L_438040

            cmp DWORD PTR [RBX+2580],4
            jne .L_40a73b

            add RBX,7520
            mov RDI,RBX
            call .L_429530

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_429570
.L_40a790:

            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+24]
            mov EDX,1000
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov ESI,EAX
            jmp .L_433770
          .byte 0x90
.L_40a7b0:

            mov RDI,RBX
            call .L_4334e0

            mov RDI,R12
            mov RSI,RAX
            call .L_437350

            jmp .L_40a725
.L_40a7c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a7d0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,520
.L_40a7e4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+504],RAX
            xor EAX,EAX
            lea RBP,QWORD PTR [RSP+224]
            lea R12,QWORD PTR [RSP+64]
            call .L_433510

            pxor XMM0,XMM0
            mov ESI,DWORD PTR [RBX+8]
            mov RDI,RBP
            mov R13,RAX
            lea R14,QWORD PTR [R13+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_436620

            mov EDX,2
            xor ESI,ESI
            mov RDI,R12
            call .L_431360

            mov RDI,R12
            mov ESI,2
            call .L_431b80

            mov RSI,QWORD PTR [RBX+56]
            mov RDI,R12
            call .L_4318a0

            mov RDI,R12
            call .L_431b50

            xor EDX,EDX
            mov RSI,R12
            mov RDI,R14
            call .L_42f920

            mov R12,RAX
            mov EAX,3
            test R12,R12
            je .L_40a8ae

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_437740

            movzx EDX,WORD PTR [RSP+484]
            mov RSI,RBP
            mov RDI,R12
            call .L_403d80

            test EAX,EAX
            je .L_40a8d8
.L_40a89e:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_40a8ae:

            mov RCX,QWORD PTR [RSP+504]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40a927

            add RSP,520
.L_40a8c8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40a8d8:

            add R13,2568
            lea R15,QWORD PTR [RSP+16]
            mov RDI,R13
            call .L_4172a0

            lea RSI,QWORD PTR [R15+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_417320

            mov EAX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov RSI,R12
            mov RDI,R14
            mov WORD PTR [RSP+50],AX
            call .L_430850

            test EAX,EAX
            je .L_40a8ae

            jmp .L_40a89e
.L_40a927:

            call __stack_chk_fail@PLT
.L_40a92c:

            nop
            nop
            nop
            nop
.L_40a930:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RBP,RAX
            call .L_4165a0

            test AL,AL
            je .L_40a970

            test BYTE PTR [RBX+20],1
            lea R12,QWORD PTR [RBX+4]
            lea RSI,QWORD PTR [RBX+12]
            mov EAX,0
            mov RDI,R12
            cmove RSI,RAX
            call .L_438170

            test EAX,EAX
            js .L_40a978
.L_40a970:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40a978:

            cmp DWORD PTR [RBX+8],14
            je .L_40a9a0
.L_40a97e:

            mov RDI,RBX
            call .L_40a7d0

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            pop RBP
            pop R12
            jmp .L_433770
          .byte 0x90
.L_40a9a0:

            lea RDI,QWORD PTR [RBP+1208]
            mov ESI,14
            call .L_40a510

            test RAX,RAX
            je .L_40a97e

            lea RSI,QWORD PTR [RAX+2]
            mov RDI,R12
            call .L_438170

            test EAX,EAX
            jns .L_40a970

            jmp .L_40a97e
.L_40a9c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a9d0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b60

            add RSP,8
            mov RDI,RAX
            jmp .L_40a930
.L_40a9ed:

            nop
            nop
            nop
.L_40a9f0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b70

            add RSP,8
            mov RDI,RAX
            jmp .L_40a930
.L_40aa0d:

            nop
            nop
            nop
.L_40aa10:

            push R15
            push R14
            mov R15D,R8D
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R13,RSI
            sub RSP,472
.L_40aa2d:

            mov QWORD PTR [RSP+8],RDX
            lea RBX,QWORD PTR [RSP+176]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+456],RAX
            xor EAX,EAX
            call .L_433510

            mov ESI,DWORD PTR [RBP+8]
            mov RDI,RBX
            mov R12,RAX
            call .L_436620

            lea RDI,QWORD PTR [RBP+4]
            lea RBP,QWORD PTR [RSP+16]
            mov RSI,RBX
            call .L_437740

            mov RSI,R13
            mov RDI,RBP
            lea R13,QWORD PTR [R12+216]
            call .L_431cf0

            mov RDI,RBP
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            je .L_40ab34

            test R15B,R15B
            mov RBP,RAX
            je .L_40ab60

            sub R15D,1
            movzx R15D,R15B
            lea R15,QWORD PTR [R14+R15*1+1]
            nop
            nop
            nop
            nop
            nop
.L_40aac0:

            movzx ESI,BYTE PTR [R14]
            cmp SIL,5
            jne .L_40aad5

            cmp BYTE PTR [R12+1548],0
            jns .L_40aafc
.L_40aad5:

            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40aafc

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            mov RDI,RBP
            add EDX,2
            call .L_403d80

            test EAX,EAX
            jne .L_40abb0
.L_40aafc:

            add R14,1
            cmp R14,R15
            jne .L_40aac0
.L_40ab05:

            movzx EAX,BYTE PTR [RSP+144]
            cmp AX,WORD PTR [RBP+58]
            je .L_40abc0
.L_40ab17:

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBP
            mov RDI,R13
            call .L_430850

            test EAX,EAX
            jne .L_40abb0
.L_40ab34:

            mov RAX,QWORD PTR [RSP+456]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40abd3

            add RSP,472
.L_40ab52:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40ab60:

            movzx R15D,WORD PTR [RSP+436]
            add R15,RBX
            cmp R15,RBX
            ja .L_40ab95

            jmp .L_40ab05
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ab78:

            cmp BYTE PTR [R12+1548],0
            js .L_40ab9a
.L_40ab83:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBX,R15
            jae .L_40ab05
.L_40ab95:

            cmp BYTE PTR [RBX],5
            je .L_40ab78
.L_40ab9a:

            movzx EAX,BYTE PTR [RBX+1]
            mov RSI,RBX
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            test EAX,EAX
            je .L_40ab83
.L_40abb0:

            mov RDI,RBP
            call .L_403400

            jmp .L_40ab34
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40abc0:

            sub EAX,1
            mov RDI,RBP
            movzx ESI,AX
            call .L_403470

            jmp .L_40ab17
.L_40abd3:

            call __stack_chk_fail@PLT
.L_40abd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40abe0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,312
.L_40abfd:

            movzx EBX,WORD PTR [RDX+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp WORD PTR [RDX+58],BX
            lea R14,QWORD PTR [RSP+30]
            mov WORD PTR [RSP+30],AX
            ja .L_40ac44

            jmp .L_40ad00
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ac30:

            movzx EAX,BYTE PTR [RSP+31]
            lea EBX,DWORD PTR [RBX+RAX*1+2]
            cmp BX,WORD PTR [R15+58]
            jae .L_40ad00
.L_40ac44:

            movzx ESI,BX
            mov RCX,R14
            mov EDX,2
            mov RDI,R15
            call .L_4038b0

            cmp BYTE PTR [RSP+30],13
            jne .L_40ac30

            movzx R8D,BYTE PTR [RSP+31]
            lea R14,QWORD PTR [RSP+32]
            lea ESI,DWORD PTR [RBX+2]
            mov RDI,R15
            movzx ESI,SI
            mov RCX,R14
            mov EDX,R8D
            mov BYTE PTR [RSP+15],R8B
            mov DWORD PTR [RSP+8],R8D
            call .L_4038b0

            movzx R9D,BYTE PTR [RSP+15]
            movsxd R8,DWORD PTR [RSP+8]
            test R9B,R9B
            je .L_40ad05

            mov RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RIP+.L_40b1e5]
            mov ECX,5

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta AL
            sbb AL,0
            test AL,AL
            jne .L_40ad08

            cmp BYTE PTR [RSP+32],52
            movzx EDI,R9B
            je .L_40ad08

            lea EDX,DWORD PTR [RDI-1]
            mov EAX,1
            lea RSI,QWORD PTR [RSP+31]
            movzx EDX,DX
            add RDX,1
            jmp .L_40ace2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40acd8:

            add RAX,1
            cmp BYTE PTR [RSI+RAX*1],52
            je .L_40ad08
.L_40ace2:

            cmp RAX,RDX
            jne .L_40acd8

            cmp AX,DI
            jne .L_40ad08

            mov BYTE PTR [RSP+R8*1+32],52
            lea R8D,DWORD PTR [R9+1]
            movzx R8D,R8B
            jmp .L_40ad08
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ad00:

            lea R14,QWORD PTR [RSP+32]
.L_40ad05:

            xor R8D,R8D
.L_40ad08:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_40aa10

            mov RAX,QWORD PTR [RSP+296]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40ad3e

            add RSP,312
.L_40ad33:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40ad3e:

            call __stack_chk_fail@PLT
.L_40ad43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ad50:

            jmp .L_40abe0
.L_40ad55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ad60:

            jmp .L_40abe0
.L_40ad65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ad70:

            push RBX

            lea R9,QWORD PTR [RIP+.L_40a9d0]
            lea R8,QWORD PTR [RIP+.L_40b1ea]
            lea RCX,QWORD PTR [RIP+.L_40b1ef]
            mov EDX,14
            mov RBX,RDI
            call .L_40a400

            lea RAX,QWORD PTR [RIP+.L_40b1ef]
            mov RDI,RBX
            mov QWORD PTR [RBX+80],RBX
            mov QWORD PTR [RBX+88],0
            mov QWORD PTR [RBX+112],RBX
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RIP+.L_40ad50]
            mov QWORD PTR [RBX+120],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_40b1ea]
            mov QWORD PTR [RBX+96],RAX
            mov RAX,OFFSET .L_40c840
            mov QWORD PTR [RBX+104],RAX
            call .L_433510

            lea RSI,QWORD PTR [RBX+64]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_40adf0:

            jmp .L_40a6b0
.L_40adf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ae00:

            jmp .L_40a6f0
.L_40ae05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ae10:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBP,R8D
            mov EBX,ECX
            mov R15,RDI
            sub RSP,312
.L_40ae2f:

            mov ESI,DWORD PTR [RDI+8]
            lea R12,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_436620

            movzx ECX,BPL
            movzx EDX,BX
            mov RSI,R13
            mov RDI,R12
            call .L_436a90

            test EAX,EAX
            jne .L_40ae86

            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_437200

            mov RSI,R12
            mov RDI,R15
            call .L_40a6f0

            mov EAX,DWORD PTR [RSP+12]
.L_40ae86:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40aeab

            add RSP,312
.L_40aea0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40aeab:

            call __stack_chk_fail@PLT
.L_40aeb0:

            jmp .L_40abe0
.L_40aeb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40aec0:

            push RBX

            lea R9,QWORD PTR [RIP+.L_40a9f0]
            lea R8,QWORD PTR [RIP+.L_40b1f4]
            lea RCX,QWORD PTR [RIP+.L_40b1e5]
            mov EDX,51
            mov RBX,RDI
            call .L_40a400

            lea RAX,QWORD PTR [RIP+.L_40b1c0]
            mov RDI,RBX
            mov DWORD PTR [RBX+72],0
            mov QWORD PTR [RBX+104],RBX
            mov QWORD PTR [RBX+112],0
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RBX+64]
            mov QWORD PTR [RBX+136],RBX
            mov QWORD PTR [RBX+144],0
            mov QWORD PTR [RBX+80],RAX
            lea RAX,QWORD PTR [RIP+.L_40b1e5]
            mov QWORD PTR [RBX+88],RAX
            lea RAX,QWORD PTR [RIP+.L_40ad60]
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RIP+.L_40b1f4]
            mov QWORD PTR [RBX+120],RAX
            mov RAX,OFFSET .L_40c870
            mov QWORD PTR [RBX+128],RAX
            call .L_433510

            lea RSI,QWORD PTR [RBX+88]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_40af63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40af70:

            push RBX
            mov RBX,RDI
            call .L_40a6b0

            lea RDI,QWORD PTR [RBX+64]
            pop RBX
            jmp .L_433690
.L_40af83:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40af90:

            jmp .L_40a580
.L_40af95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40afa0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,296
.L_40afac:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            add RBX,64
            call .L_437740

            mov RDI,RBX
            call .L_433690

            mov ESI,52
            mov RDI,RBP
            call .L_436680

            test RAX,RAX
            je .L_40b015

            mov EDX,DWORD PTR [RAX+2]
            mov ESI,DWORD PTR [RSP+256]
            mov EAX,2147483647
            mov RDI,RBX
            bswap EDX
            test EDX,EDX
            cmovs EDX,EAX
            call .L_433770
.L_40b015:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40b032

            add RSP,296
.L_40b02f:

            pop RBX
            pop RBP
            ret 
.L_40b032:

            call __stack_chk_fail@PLT
.L_40b037:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b040:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBP,R8D
            mov EBX,ECX
            mov R15,RDI
            sub RSP,312
.L_40b05f:

            mov ESI,DWORD PTR [RDI+8]
            lea R12,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_436620

            movzx ECX,BPL
            movzx EDX,BX
            mov RSI,R13
            mov RDI,R12
            call .L_436a90

            test EAX,EAX
            jne .L_40b0be

            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_437200

            mov RSI,R12
            mov RDI,R15
            call .L_40a6f0

            mov RDI,R15
            call .L_40afa0

            mov EAX,DWORD PTR [RSP+12]
.L_40b0be:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40b0e3

            add RSP,312
.L_40b0d8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40b0e3:

            call __stack_chk_fail@PLT
.L_40b0e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b0f0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+64]
            sub RSP,288
.L_40b102:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_437740

            mov ESI,52
            mov RDI,RBP
            call .L_436680

            test RAX,RAX
            je .L_40b156

            mov ESI,DWORD PTR [RBX+72]
            mov EDX,DWORD PTR [RAX+2]
            mov ECX,ESI
            sub ECX,DWORD PTR [RSP+256]
            bswap EDX
            cmp ECX,EDX
            jb .L_40b1a8
.L_40b156:

            mov RDI,RBP
            call .L_4375c0

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,RBP
            call .L_40a6f0

            mov RDI,RBX
            call .L_40a6b0

            mov RDI,R12
            call .L_433690
.L_40b185:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40b1b4

            add RSP,288
.L_40b19f:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40b1a8:

            sub EDX,ECX
            mov RDI,R12
            call .L_433770

            jmp .L_40b185
.L_40b1b4:

            call __stack_chk_fail@PLT
.L_40b1b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b1c0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b70

            add RSP,8
            mov RDI,RAX
            jmp .L_40b0f0
.L_40b1dd:

            nop
            nop
            nop
.L_40b1e0:

            jmp .L_40abe0
.L_40b1e5:
          .byte 0x63
          .byte 0x2f
          .byte 0x70
          .byte 0x67
          .byte 0x0
.L_40b1ea:
          .string "c/as"
.L_40b1ef:
          .string "c/ag"
.L_40b1f4:
          .string "c/ps"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b200:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            mov R12,RAX
            call .L_437bd0

            test EAX,EAX
            mov EBP,EAX
            jne .L_40b242

            mov EAX,DWORD PTR [R12+2580]
            cmp EAX,3
            ja .L_40b250

            cmp EAX,2
            jae .L_40b280

            test EAX,EAX
            jne .L_40b242

            mov RDI,RBX
            call .L_40a580
.L_40b242:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b250:

            cmp EAX,4
            jne .L_40b242

            mov RDI,RBX
            add R12,7520
            call .L_40a580

            mov RDI,R12
            call .L_429530

            mov RDI,R12
            call .L_429570

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b280:

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,EAX
            mov EDX,1000
            call .L_433770

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_40b29c:

            nop
            nop
            nop
            nop
.L_40b2a0:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBP,RSI
            mov R14,RDX
            sub RSP,296
.L_40b2bd:

            mov BYTE PTR [RSP+8],CL
            lea RBX,QWORD PTR [RSP+128]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov R12,RAX
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            mov RSI,QWORD PTR [R15+56]
            mov RDI,RBX
            lea R15,QWORD PTR [R12+216]
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R15
            call .L_42f920

            test RAX,RAX
            je .L_40b660

            cmp DWORD PTR [R12+8128],2
            mov RBX,RAX
            je .L_40b4c8
.L_40b357:

            movzx EAX,BYTE PTR [RBP+100]
            test AL,1
            jne .L_40b540
.L_40b363:

            test AL,2
            jne .L_40b458

            test AL,4
            jne .L_40b5a8
.L_40b373:

            test AL,8
            jne .L_40b670
.L_40b37b:

            test AL,16
            jne .L_40b6f0
.L_40b383:

            test AL,32
            jne .L_40b730
.L_40b38b:

            test AL,64
            jne .L_40b5e8
.L_40b393:

            test AL,AL
            js .L_40b620
.L_40b39b:

            movzx EAX,BYTE PTR [RBP+101]
            test AL,1
            jne .L_40b770
.L_40b3a7:

            test AL,8
            jne .L_40b7b0
.L_40b3af:

            test R13B,R13B
            jne .L_40b848
.L_40b3b8:

            movzx EAX,BYTE PTR [RSP+256]
            cmp AX,WORD PTR [RBX+58]
            je .L_40b868
.L_40b3ca:

            add R12,2568
            lea RBP,QWORD PTR [RSP+80]
            mov RDI,R12
            call .L_4172a0

            lea RSI,QWORD PTR [RSP+96]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R12
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_417320

            mov EDX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R15
            mov WORD PTR [RSP+114],DX
            mov RDX,RBP
            call .L_430850

            test EAX,EAX
            je .L_40b428

            nop
            nop
            nop
.L_40b418:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
.L_40b428:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40b87b

            add RSP,296
.L_40b446:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b458:

            mov EAX,2099
            lea RSI,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RBP+8]
            mov WORD PTR [RSP+48],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+50],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+56],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b490:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_40b490

            mov EDX,10
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            test AL,4
            je .L_40b373

            jmp .L_40b5a8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b4c8:

            movzx EDX,BYTE PTR [RSP+8]
            add RDX,R14
            cmp R14,RDX
            jae .L_40b4ff

            cmp BYTE PTR [R14],11
            je .L_40b357

            mov RAX,R14
            jmp .L_40b4f1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40b4e8:

            cmp BYTE PTR [RAX],11
            je .L_40b357
.L_40b4f1:

            movzx ECX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RCX*1+2]
            cmp RDX,RAX
            ja .L_40b4e8
.L_40b4ff:

            lea RDI,QWORD PTR [R12+8128]
            mov EAX,523
            mov WORD PTR [RSP+40],AX
            call .L_434b70

            lea RSI,QWORD PTR [RSP+40]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+42],AX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            jmp .L_40b357

            nop
            nop
.L_40b540:

            mov EAX,2062
            lea RSI,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RBP]
            mov WORD PTR [RSP+48],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+50],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+56],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b578:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_40b578

            mov EDX,10
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b363
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b5a8:

            movdqu XMM0,XMMWORD PTR [RBP+16]
            lea RSI,QWORD PTR [RSP+48]
            mov R11D,4101
            mov EDX,18
            mov RDI,RBX
            mov WORD PTR [RSP+48],R11W
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b373
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b5e8:

            mov EAX,DWORD PTR [RBP+68]
            mov EDI,1076
            lea RSI,QWORD PTR [RSP+40]
            mov WORD PTR [RSP+40],DI
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+42],EAX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b393
          .byte 0x66
          .byte 0x90
.L_40b620:

            movzx EAX,WORD PTR [RBP+72]
            mov ESI,513
            mov EDX,4
            mov WORD PTR [RSP+40],SI
            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+42],AX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            jmp .L_40b39b

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b660:

            mov EAX,3
            jmp .L_40b428
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b670:

            mov R10D,4099
            mov ESI,16
            mov WORD PTR [RSP+48],R10W
            lea R10,QWORD PTR [RBP+32]
            mov RDI,R10
            mov QWORD PTR [RSP+24],R10
            call strnlen@PLT

            mov R10,QWORD PTR [RSP+24]
            lea R9,QWORD PTR [RSP+48]
            lea RDI,QWORD PTR [RSP+50]
            mov ECX,16
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            mov QWORD PTR [RSP+16],R9
            mov RSI,R10
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP+8]
            mov R9,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+49],R8B
            movzx R8D,R8B
            mov RSI,R9
            lea EDX,DWORD PTR [R8+2]
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b37b
          .byte 0x66
          .byte 0x90
.L_40b6f0:

            mov RAX,QWORD PTR [RBP+49]
            lea RSI,QWORD PTR [RSP+48]
            mov R9D,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+48],R9W
            mov QWORD PTR [RSP+50],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b383
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b730:

            mov RAX,QWORD PTR [RBP+57]
            lea RSI,QWORD PTR [RSP+48]
            mov R8D,2055
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+48],R8W
            mov QWORD PTR [RSP+50],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40b38b
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b770:

            movzx EAX,WORD PTR [RBP+74]
            lea RSI,QWORD PTR [RSP+40]
            mov ECX,768
            mov EDX,5
            mov RDI,RBX
            mov WORD PTR [RSP+40],CX
            mov BYTE PTR [RSP+42],0
            rol AX,8
            mov WORD PTR [RSP+43],AX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            movzx EAX,BYTE PTR [RBP+101]
            jmp .L_40b3a7
          .byte 0x90
.L_40b7b0:

            mov EDX,DWORD PTR [RBP+96]
            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
            mov DWORD PTR [RSP+40],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            jmp .L_40b3af
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b848:

            movzx EDX,R13B
            mov RSI,R14
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_40b418

            jmp .L_40b3b8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40b868:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403470

            jmp .L_40b3ca
.L_40b87b:

            call __stack_chk_fail@PLT
.L_40b880:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov R13D,EDX
            sub RSP,248
.L_40b89d:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+30],DX
            mov RDI,RBX
            mov EDX,2
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            mov RSI,QWORD PTR [R12+48]
            mov RDI,RBX
            call .L_4318a0

            test R13B,R13B
            jne .L_40b9a8

            lea R12,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_40ba20
.L_40b929:

            add RBP,2568
            test R14,R14
            je .L_40ba30

            movdqu XMM0,XMMWORD PTR [R14]
            lea R13,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+48],XMM0
.L_40b948:

            mov RDI,RBP
            call .L_4172a0

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RSI,RBX
            mov EAX,4294963391
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+66],AX
            call .L_430850

            test EAX,EAX
            jne .L_40b9ec
.L_40b97a:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40ba47

            add RSP,248
.L_40b998:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b9a8:

            lea R12,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_40ba20

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],13
            mov BYTE PTR [RSP+31],R13B
            call .L_403d80

            test EAX,EAX
            je .L_40ba08
.L_40b9ec:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_40b97a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ba08:

            movzx EDX,R13B
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_40b9ec

            jmp .L_40b929
.L_40ba20:

            mov EAX,3
            jmp .L_40b97a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ba30:

            lea RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            lea R13,QWORD PTR [RSP+32]
            call .L_417320

            jmp .L_40b948
.L_40ba47:

            call __stack_chk_fail@PLT
.L_40ba4c:

            nop
            nop
            nop
            nop
.L_40ba50:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov R13,RDX
            sub RSP,176
.L_40ba68:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R12
            mov RDI,RBP
            mov WORD PTR [RSP+13],DX
            add RBX,216
            call .L_431cf0

            mov RDI,RBP
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42f920

            test RAX,RAX
            je .L_40baeb

            mov RBP,RAX
            lea RSI,QWORD PTR [RSP+13]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+13],AX
            mov BYTE PTR [RSP+15],R14B
            call .L_403d80

            test EAX,EAX
            je .L_40bb10
.L_40bae3:

            mov RDI,RBP
            call .L_403400
.L_40baeb:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40bb29

            add RSP,176
.L_40bb05:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_40bb10:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_430850

            test EAX,EAX
            je .L_40baeb

            jmp .L_40bae3
.L_40bb29:

            call __stack_chk_fail@PLT
.L_40bb2e:

            nop
            nop
.L_40bb30:

            jmp .L_40b200
.L_40bb35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bb40:

            push R15
            push R14
            push R13
            push R12
            mov R12D,13
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,360
.L_40bb5a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+64]
            call .L_433510

            mov ESI,DWORD PTR [RBP+8]
            mov R13,RAX
            mov RDI,RBX
            lea R14,QWORD PTR [R13+2568]
            call .L_436620

            mov RDI,R14
            call .L_4165a0

            test AL,AL
            je .L_40bc96

            lea R12,QWORD PTR [RBP+4]
            mov RSI,RBX
            mov RDI,R12
            call .L_437740

            mov ESI,14
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bcd8
.L_40bbc1:

            xor ESI,ESI
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bd10
.L_40bbd4:

            mov ESI,53
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bd48
.L_40bbea:

            mov ESI,2
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bd70
.L_40bc00:

            mov ESI,7
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bda0
.L_40bc16:

            mov ESI,5
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bdd0
.L_40bc2c:

            mov ESI,3
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40be08
.L_40bc42:

            mov ESI,1
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40be68
.L_40bc58:

            mov ESI,4
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40be98
.L_40bc6e:

            mov ESI,12
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
            je .L_40bed0
.L_40bc84:

            mov RDI,R12
            mov RSI,RBX
            call .L_438040

            test EAX,EAX
            mov R12D,EAX
            je .L_40bcc8
.L_40bc96:

            mov RDX,QWORD PTR [RSP+344]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_40bf09

            add RSP,360
.L_40bcb7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40bcc8:

            mov RDI,RBP
            call .L_40a580

            jmp .L_40bc96
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40bcd8:

            lea RSI,QWORD PTR [RSP+32]
            mov R11D,2062
            xor R15D,R15D
            mov WORD PTR [RSP+32],R11W
            mov DWORD PTR [RSP+34],0
            xor EAX,EAX
            mov WORD PTR [RSI+6],R15W
            mov RDI,RBX
            mov WORD PTR [RSP+40],AX
            call .L_436c80

            jmp .L_40bbc1
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40bd10:

            mov R10D,768
            mov BYTE PTR [RSP+26],0
            lea RSI,QWORD PTR [RSP+24]
            mov WORD PTR [RSP+24],R10W
            movzx EAX,BYTE PTR [R13+1668]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+27],AX
            call .L_436c80

            jmp .L_40bbd4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40bd48:

            lea RSI,QWORD PTR [RSP+24]
            movabs RAX,-2234032805224905163
            mov RDI,RBX
            mov QWORD PTR [RSP+24],RAX
            call .L_436c80

            jmp .L_40bbea
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bd70:

            mov R9D,2050
            lea RSI,QWORD PTR [RSP+32]
            mov RDI,RBX
            mov WORD PTR [RSP+32],R9W
            mov RAX,QWORD PTR [R13+1686]
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            jmp .L_40bc00
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40bda0:

            mov R8D,2055
            mov RDI,R14
            mov WORD PTR [RSP+32],R8W
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            lea RSI,QWORD PTR [RSP+32]
            mov RDI,RBX
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            jmp .L_40bc16
          .byte 0x66
          .byte 0x90
.L_40bdd0:

            mov EDI,4101
            mov WORD PTR [RSP+32],DI
            lea RDI,QWORD PTR [R13+1368]
            call .L_413bc0

            lea RSI,QWORD PTR [RSP+32]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            jmp .L_40bc2c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40be08:

            lea R8,QWORD PTR [R13+1669]
            mov ESI,4099
            lea R14,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R8
            mov QWORD PTR [RSP+8],R8
            call strnlen@PLT

            mov R8,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+2]
            mov ECX,16
            mov RDX,RAX
            mov R15,RAX
            mov RSI,R8
            call __memcpy_chk@PLT

            mov RSI,R14
            mov RDI,RBX
            mov BYTE PTR [RSP+33],R15B
            call .L_436c80

            jmp .L_40bc42
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40be68:

            mov ECX,513
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,RBX
            mov WORD PTR [RSP+24],CX
            movzx EAX,WORD PTR [R13+1666]
            rol AX,8
            mov WORD PTR [RSP+26],AX
            call .L_436c80

            jmp .L_40bc58

            nop
            nop
            nop
.L_40be98:

            lea RDI,QWORD PTR [R13+1368]
            mov EDX,4100
            mov WORD PTR [RSP+32],DX
            call .L_413b60

            lea RSI,QWORD PTR [RSP+32]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            jmp .L_40bc6e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bed0:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,RBX
            mov WORD PTR [RSP+24],AX
            movzx EAX,WORD PTR [R13+1472]
            rol AX,8
            mov WORD PTR [RSP+26],AX
            movzx EAX,BYTE PTR [R13+1548]
            mov BYTE PTR [RSP+28],AL
            call .L_436c80

            jmp .L_40bc84
.L_40bf09:

            call __stack_chk_fail@PLT
.L_40bf0e:

            nop
            nop
.L_40bf10:

            push RBX
            mov RBX,RDI
            call .L_40bb40

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f860
.L_40bf32:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bf40:

            push RBX
            mov RBX,RDI
            call .L_433510

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f8a0
.L_40bf5a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40bf60:

            push RBX
            mov RBX,RDI
            sub RSP,16
            call .L_40b200

            test EAX,EAX
            jne .L_40bf81

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_40afa0

            mov EAX,DWORD PTR [RSP+12]
.L_40bf81:

            add RSP,16
            pop RBX
            ret 
.L_40bf87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bf90:

            push RBX
            mov RBX,RDI
            call .L_40afa0

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f860
.L_40bfb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bfc0:

            push RBX
            mov RBX,RDI
            call .L_433510

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f8a0
.L_40bfda:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40bfe0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RDX
            sub RSP,360
.L_40bff7:

            mov QWORD PTR [RSP+8],RSI
            lea R12,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            call .L_433510

            mov ESI,DWORD PTR [R13+8]
            mov R15,RAX
            mov RDI,R12
            mov QWORD PTR [RSP],RAX
            movzx R14D,WORD PTR [RBX+60]
            call .L_436620

            lea RDI,QWORD PTR [R15+2568]
            xor ECX,ECX
            mov WORD PTR [RSP+26],CX
            call .L_4165a0

            test AL,AL
            je .L_40c0fb

            cmp R14W,WORD PTR [RBX+58]
            jae .L_40c0ae

            lea RBP,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RBP+2]
            nop
            nop
            nop
            nop
.L_40c060:

            xor EDX,EDX
            movzx ESI,R14W
            mov RCX,RBP
            mov WORD PTR [RSP+32],DX
            mov RDI,RBX
            mov EDX,2
            call .L_4038b0

            movzx EDX,BYTE PTR [RSP+33]
            lea ESI,DWORD PTR [R14+2]
            mov RCX,R15
            mov RDI,RBX
            movzx ESI,SI
            call .L_4038b0

            mov RSI,RBP
            mov RDI,R12
            call .L_436c80

            movzx EAX,BYTE PTR [RSP+33]
            lea R14D,DWORD PTR [R14+RAX*1+2]
            cmp R14W,WORD PTR [RBX+58]
            jb .L_40c060
.L_40c0ae:

            mov RDI,QWORD PTR [RSP]
            mov EAX,1076
            mov WORD PTR [RSP+26],AX
            add RDI,10528
            call .L_40dcc0

            lea RSI,QWORD PTR [RSP+26]
            bswap EAX
            mov RDI,R12
            mov DWORD PTR [RSP+28],EAX
            call .L_436c80

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_437200

            mov RDI,R13
            mov RSI,R12
            call .L_40a6f0

            mov RDI,R13
            call .L_40afa0
.L_40c0fb:

            mov RAX,QWORD PTR [RSP+344]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40c120

            add RSP,360
.L_40c115:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40c120:

            call __stack_chk_fail@PLT
.L_40c125:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c130:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RDX
            sub RSP,456
.L_40c147:

            mov QWORD PTR [RSP+8],RCX
            mov QWORD PTR [RSP],RSI
            lea R12,QWORD PTR [RSP+160]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+440],RAX
            xor EAX,EAX
            call .L_433510

            mov ESI,DWORD PTR [RBP+8]
            xor EDX,EDX
            mov RDI,R12
            mov R14,RAX
            mov WORD PTR [RSP+51],DX
            movzx R15D,WORD PTR [RBX+60]
            call .L_436620

            lea RAX,QWORD PTR [RBP+4]
            xor ESI,ESI
            xor EDI,EDI
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov WORD PTR [RSP+76],SI
            mov WORD PTR [RSP+61],DI
            mov RSI,R12
            mov RDI,RAX
            mov WORD PTR [RSP+66],CX
            mov WORD PTR [RSP+53],R8W
            mov WORD PTR [RSP+86],R9W
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+57],R11W
            mov QWORD PTR [RSP+16],RAX
            call .L_437740

            cmp DWORD PTR [R14+2580],4
            mov BYTE PTR [RSP+67],0
            mov BYTE PTR [RSP+77],0
            mov BYTE PTR [RSP+62],0
            mov BYTE PTR [RSP+97],0
            mov BYTE PTR [RSP+87],0
            mov BYTE PTR [RSP+58],0
            mov BYTE PTR [RSP+54],0
            je .L_40c240
.L_40c208:

            mov EAX,2
.L_40c20d:

            mov RDX,QWORD PTR [RSP+440]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40c4f5

            add RSP,456
.L_40c22b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c240:

            cmp R15W,WORD PTR [RBX+58]
            jae .L_40c4d0

            lea R13,QWORD PTR [RSP+51]
            jmp .L_40c264
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c258:

            lea R15D,DWORD PTR [R15+RAX*1+2]
            cmp R15W,WORD PTR [RBX+58]
            jae .L_40c2b0
.L_40c264:

            movzx ESI,R15W
            mov RCX,R13
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+52]
            cmp AL,16
            jbe .L_40c258
.L_40c281:

            cmp DWORD PTR [R14+2580],4
            jne .L_40c208
.L_40c28f:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP]
            mov ECX,4294967295
            mov RDI,RBP
            call .L_40ba50

            jmp .L_40c208
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c2b0:

            movzx EAX,WORD PTR [RBX+60]
            movzx R8D,R15W
            sub R8D,EAX
            cmp R8D,256
            jg .L_40c281
.L_40c2c4:

            mov RSI,QWORD PTR [RBP+56]
            lea RDI,QWORD PTR [RIP+.L_40c872]
            mov ECX,5
            mov EDX,10

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            mov ESI,14
            mov RDI,RBX
            seta AL
            sbb AL,0
            movsx EAX,AL
            cmp EAX,1
            lea RAX,QWORD PTR [RSP+66]
            sbb R13D,R13D
            and R13D,4294967259
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            add R13D,51
            call .L_4339f0

            test EAX,EAX
            jne .L_40c281

            cmp BYTE PTR [RSP+67],8
            jne .L_40c281

            lea R15,QWORD PTR [RSP+76]
            mov EDX,10
            mov ESI,51
            mov RDI,RBX
            mov RCX,R15
            call .L_4339f0

            test EAX,EAX
            jne .L_40c347

            cmp BYTE PTR [RSP+77],8
            jne .L_40c281
.L_40c347:

            mov RAX,QWORD PTR [RSP+24]
            lea RSI,QWORD PTR [R15+2]
            mov RDI,QWORD PTR [RSP+16]
            add RAX,2
            cmp R13D,14
            cmove RSI,RAX
            call .L_438170

            test EAX,EAX
            jle .L_40c281

            lea RCX,QWORD PTR [RSP+61]
            xor ESI,ESI
            mov EDX,5
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40c4ed

            cmp BYTE PTR [RSP+62],3
            jne .L_40c281

            movzx EAX,WORD PTR [RSP+64]
            rol AX,8
            lea EDX,DWORD PTR [RAX-11]
            cmp DX,15
            ja .L_40c281

            movzx EDX,BYTE PTR [R14+1668]
            cmp DX,AX
            setne R15B
.L_40c3ba:

            lea RCX,QWORD PTR [RSP+57]
            mov EDX,4
            mov ESI,1
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40c3f6

            cmp BYTE PTR [RSP+58],2
            jne .L_40c3f6

            movzx EAX,WORD PTR [RSP+59]
            rol AX,8
            cmp AX,WORD PTR [R14+1666]
            mov EAX,1
            cmovne R15D,EAX
.L_40c3f6:

            lea RCX,QWORD PTR [RSP+86]
            mov EDX,10
            mov ESI,7
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40c41c

            cmp BYTE PTR [RSP+87],8
            je .L_40c7f2
.L_40c41c:

            lea RAX,QWORD PTR [RSP+96]
            mov EDX,18
            mov ESI,5
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4339f0

            test EAX,EAX
            mov BYTE PTR [RSP+43],0
            jne .L_40c44f

            cmp BYTE PTR [RSP+97],16
            je .L_40c7b4
.L_40c44f:

            cmp R13D,51
            je .L_40c4fa

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            mov BYTE PTR [RSP+42],0
            je .L_40c6a0
.L_40c47d:

            cmp R13D,51
            je .L_40c7a3

            sub R15B,1
            jne .L_40c7a3

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R14+1208]
            mov RDX,RBX
            add RSI,2
            call .L_40bfe0
.L_40c4a9:

            cmp BYTE PTR [RSP+42],0
            je .L_40c71d
.L_40c4b4:

            cmp DWORD PTR [R14+2580],4
            je .L_40c786

            xor EAX,EAX
            jmp .L_40c20d
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c4d0:

            movzx EAX,WORD PTR [RBX+60]
            movzx R8D,R15W
            sub R8D,EAX
            cmp R8D,256
            jg .L_40c28f

            jmp .L_40c2c4
.L_40c4ed:

            xor R15D,R15D
            jmp .L_40c3ba
.L_40c4f5:

            call __stack_chk_fail@PLT
.L_40c4fa:

            cmp BYTE PTR [RSP+97],0
            je .L_40c527

            lea RDI,QWORD PTR [R14+1368]
            call .L_413bc0

            mov RDI,QWORD PTR [RSP+16]
            mov EDX,16
            mov RSI,RAX
            add RDI,2
            call memcmp@PLT

            test EAX,EAX
            jne .L_40c551
.L_40c527:

            lea RDI,QWORD PTR [R14+1080]
            call .L_40a460

            test RAX,RAX
            je .L_40c551

            mov RCX,QWORD PTR [RSP+24]
            mov RDI,RAX
            lea RSI,QWORD PTR [RCX+2]
            call .L_40e0c0

            test EAX,EAX
            jle .L_40c281
.L_40c551:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            je .L_40c6a0

            lea RAX,QWORD PTR [R14+7520]
            mov BYTE PTR [RSP+42],0
            mov QWORD PTR [RSP+16],RAX
.L_40c581:

            movzx R13D,WORD PTR [RBX+60]
            cmp R13W,WORD PTR [RBX+58]
            jae .L_40c67b

            lea R15,QWORD PTR [RSP+128]
            lea RAX,QWORD PTR [R15+2]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_40c5de
.L_40c5a4:

            cmp EDX,299999
            ja .L_40c63c

            mov DWORD PTR [RSP+130],3767731200
.L_40c5bb:

            mov RSI,R15
            mov RDI,R12
            call .L_436c80
.L_40c5c6:

            movzx EAX,BYTE PTR [RSP+129]
            lea R13D,DWORD PTR [R13+RAX*1+2]
            cmp R13W,WORD PTR [RBX+58]
            jae .L_40c67b
.L_40c5de:

            xor EAX,EAX
            movzx ESI,R13W
            mov RCX,R15
            mov EDX,2
            mov RDI,RBX
            mov WORD PTR [RSP+128],AX
            call .L_4038b0

            movzx EDX,BYTE PTR [RSP+129]
            lea ESI,DWORD PTR [R13+2]
            mov RCX,QWORD PTR [RSP+24]
            mov RDI,RBX
            movzx ESI,SI
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+128]
            cmp AL,11
            je .L_40c5c6

            cmp AL,52
            jne .L_40c5bb

            cmp BYTE PTR [RSP+43],0
            mov EDX,DWORD PTR [RSP+130]
            bswap EDX
            jne .L_40c5a4
.L_40c63c:

            lea RCX,QWORD PTR [R14+10528]
            mov DWORD PTR [RSP+44],EDX
            mov RDI,RCX
            mov QWORD PTR [RSP+32],RCX
            call .L_40dcc0

            mov EDX,DWORD PTR [RSP+44]
            mov RCX,QWORD PTR [RSP+32]
            cmp EAX,EDX
            jbe .L_40c5bb

            mov RDI,RCX
            call .L_40dcc0

            bswap EAX
            mov DWORD PTR [RSP+130],EAX
            jmp .L_40c5bb
.L_40c67b:

            mov RSI,R12
            mov RDI,RBP
            call .L_40a6f0

            mov RBX,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_429530

            mov RDI,RBX
            call .L_429570

            jmp .L_40c4a9
.L_40c6a0:

            lea RAX,QWORD PTR [R14+7520]
            mov ESI,11
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_428ba0

            cmp BYTE PTR [RSP+54],2
            jne .L_40c281

            test RAX,RAX
            je .L_40c281

            movzx ECX,WORD PTR [RSP+55]
            cmp WORD PTR [RAX+2],CX
            jne .L_40c281

            cmp R13D,51
            je .L_40c6eb

            test R15B,R15B
            jne .L_40c281
.L_40c6eb:

            cmp R13D,51
            mov BYTE PTR [RSP+42],1
            jne .L_40c47d

            cmp WORD PTR [RSP+420],0
            jne .L_40c581

            lea RDI,QWORD PTR [R14+1084]
            mov RSI,R12
            call .L_437740

            jmp .L_40c581
.L_40c71d:

            lea RDI,QWORD PTR [R14+7520]
            mov ESI,9
            call .L_428ba0

            test RAX,RAX
            mov RBX,RAX
            je .L_40c4b4

            pxor XMM0,XMM0
            lea RDI,QWORD PTR [R14+2568]
            lea R12,QWORD PTR [RSP+128]
            movaps XMMWORD PTR [RSP+128],XMM0
            call .L_4172a0

            lea RDI,QWORD PTR [R14+10528]
            mov RSI,R12
            movdqu XMM0,XMMWORD PTR [RAX]
            movaps XMMWORD PTR [RSP+128],XMM0
            movzx EAX,WORD PTR [RBX+2]
            mov WORD PTR [RSP+142],AX
            call .L_40db90

            jmp .L_40c4b4
.L_40c786:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP]
            mov ECX,1
            mov RDI,RBP
            call .L_40ba50

            xor EAX,EAX
            jmp .L_40c20d
.L_40c7a3:

            lea RAX,QWORD PTR [R14+7520]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_40c581
.L_40c7b4:

            lea RDI,QWORD PTR [R14+1368]
            call .L_413bc0

            mov RCX,QWORD PTR [RSP+16]
            mov EDX,16
            mov RSI,RAX
            lea RDI,QWORD PTR [RCX+2]
            call memcmp@PLT

            cmp EAX,1
            sbb ECX,ECX
            add ECX,1
            test EAX,EAX
            mov EAX,1
            mov BYTE PTR [RSP+43],CL
            cmovne R15D,EAX
            jmp .L_40c44f
.L_40c7f2:

            lea RDI,QWORD PTR [R14+2568]
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [RSP+88],RAX
            mov EAX,1
            cmovne R15D,EAX
            jmp .L_40c41c
.L_40c814:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c820:

            push RBX
            mov RBX,RDI
            call .L_40c130

            test EAX,EAX
            je .L_40c830

            pop RBX
            ret 
          .byte 0x90
.L_40c830:

            mov RDI,RBX
            pop RBX
            jmp .L_40a630
.L_40c839:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c840:

            jmp .L_40c820
.L_40c842:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c850:

            push RBX
            mov RBX,RDI
            call .L_40c130

            test EAX,EAX
            je .L_40c860

            pop RBX
            ret 
          .byte 0x90
.L_40c860:

            mov RDI,RBX
            pop RBX
            jmp .L_40afa0
.L_40c869:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c870:

            jmp .L_40c850
.L_40c872:
          .byte 0x63
          .byte 0x2f
          .byte 0x61
          .byte 0x73
          .byte 0x0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c880:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+7520]
            mov ESI,18
            call .L_428ba0

            test RAX,RAX
            je .L_40c8b0

            movzx EAX,WORD PTR [RAX+2]
            add RSP,8
            rol AX,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40c8b0:

            mov EAX,1000
            add RSP,8
            ret 
.L_40c8ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40c8c0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_40c8c7:

            mov RBX,RDI
            lea RDI,QWORD PTR [RSI+12720]
            lea R12,QWORD PTR [RBX+136]
            call .L_4334f0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_411a30

            lea RAX,QWORD PTR [RIP+.L_40d7f5]
            lea RDI,QWORD PTR [RBX+128]
            mov QWORD PTR [RBX+88],RBX
            mov QWORD PTR [RBX+96],0
            mov DWORD PTR [RBX+112],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_40d4d0]
            mov QWORD PTR [RBX+80],RAX
            lea RAX,QWORD PTR [RIP+.L_40d750]
            mov QWORD PTR [RBX+104],RAX
            lea RAX,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+120],RAX
            call .L_404490

            lea RSI,QWORD PTR [RIP+.L_40ca90]
            mov RDX,RBX
            mov RDI,R12
            call .L_402c40

            and BYTE PTR [RBX+154],252
            mov EDX,1000
            xor EAX,EAX
            mov WORD PTR [RBX+16],DX
            mov RDI,RBX
            mov WORD PTR [RBX+152],AX
            call .L_433510

            lea RSI,QWORD PTR [RBX+72]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42f860

            pop RBX
.L_40c975:

            lea RDI,QWORD PTR [RBP+32]
            mov RSI,R12
            pop RBP
            pop R12
            jmp .L_402c90
.L_40c984:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c990:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            sub RSP,32
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            test BYTE PTR [RAX+2624],2
            je .L_40c9c5

            and R12D,512
            jne .L_40c9e8
.L_40c9c5:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40ca8a

            add RSP,32
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c9e8:

            movzx ESI,WORD PTR [RBP+16]
            lea R12,QWORD PTR [RAX+1360]
            mov RBX,RAX
            mov RDI,R12
            call .L_410750

            lea RDI,QWORD PTR [RBX+7520]
            call .L_428c20

            test AL,AL
            je .L_40ca70

            xor EAX,EAX
            test BYTE PTR [RBP+154],1
            mov BYTE PTR [RSP+18],0
            pxor XMM0,XMM0
            mov WORD PTR [RSP+16],AX
            movaps XMMWORD PTR [RSP],XMM0
            je .L_40ca80

            movzx EAX,WORD PTR [RBP+152]
.L_40ca32:

            lea RSI,QWORD PTR [RIP+.L_40cdf0]
            mov RDX,RBP
            mov RDI,RBP
            mov WORD PTR [RSP+16],AX
            call .L_411a60

            mov RSI,RSP
            mov RDI,RBP
            call .L_411ac0

            movzx ESI,WORD PTR [RSP+16]
            mov RDI,R12
            call .L_410700

            jmp .L_40c9c5
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ca70:

            mov RDI,RBP
            call .L_411b20

            jmp .L_40c9c5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40ca80:

            mov RDI,RBP
            call .L_40c880

            jmp .L_40ca32
.L_40ca8a:

            call __stack_chk_fail@PLT
.L_40ca8f:

            nop
.L_40ca90:

            push RBX
            mov EBX,ESI
            call .L_402890

            mov RDI,RAX
            call .L_402ae0

            mov ESI,EBX
            mov RDI,RAX
            pop RBX
            jmp .L_40c990
.L_40caab:

            nop
            nop
            nop
            nop
            nop
.L_40cab0:

            push RBX
            mov RBX,RSI
            call .L_433510

            lea RDI,QWORD PTR [RAX+7520]
            mov ESI,9
            call .L_428ba0

            test RAX,RAX
            je .L_40cae0

            movzx EAX,WORD PTR [RAX+2]
            rol AX,8
            mov WORD PTR [RBX],AX
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_40cae0:

            mov EAX,23
            pop RBX
            ret 
.L_40cae7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40caf0:

            test BYTE PTR [RDI+154],1
            je .L_40cb08

            movzx EAX,WORD PTR [RDI+152]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40cb08:

            jmp .L_40c880
.L_40cb0d:

            nop
            nop
            nop
.L_40cb10:

            sub RSP,8
            or BYTE PTR [RDI+154],1
            mov WORD PTR [RDI+152],SI
            mov ESI,512
            call .L_40c990

            xor EAX,EAX
            add RSP,8
            ret 
.L_40cb33:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40cb40:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RDI
            sub RSP,280
.L_40cb5a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov RDI,RBX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+10],R8W
            mov WORD PTR [RSP+22],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            mov WORD PTR [RSP+14],R10W
            mov WORD PTR [RSP+18],R11W
            call .L_40cab0

            test EAX,EAX
            je .L_40cbf0
.L_40cbbd:

            mov RAX,QWORD PTR [RSP+264]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40cde8

            add RSP,280
.L_40cbdb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40cbf0:

            lea RBX,QWORD PTR [RSP+80]
            mov EDX,2
            mov ESI,16
            lea R14,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_40d7fa]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R14
            call .L_42f920

            test RAX,RAX
            mov R15,RAX
            je .L_40cbbd

            movzx EAX,WORD PTR [R12+34]
            mov EDI,530
            lea RSI,QWORD PTR [RSP+10]
            mov WORD PTR [RSP+10],DI
            mov EDX,4
            mov RDI,R15
            rol AX,8
            mov WORD PTR [RSP+12],AX
            call .L_403d80

            test EAX,EAX
            je .L_40cc90
.L_40cc7a:

            mov RDI,R15
            call .L_403400

            jmp .L_40cbbd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40cc90:

            mov ESI,2067
            mov RAX,QWORD PTR [R12+24]
            mov EDX,10
            mov WORD PTR [RSP+22],SI
            lea RSI,QWORD PTR [RSP+22]
            mov RDI,R15
            mov QWORD PTR [RSP+24],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_40cc7a

            add RBP,2568
            mov ECX,532
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            call .L_416dd0

            lea RSI,QWORD PTR [RSP+14]
            rol AX,8
            mov EDX,4
            mov RDI,R15
            mov WORD PTR [RSP+16],AX
            call .L_403d80

            test EAX,EAX
            jne .L_40cc7a

            movzx EAX,WORD PTR [R13+58]
            mov EDX,4294967057
            lea RSI,QWORD PTR [RSP+18]
            sub AX,WORD PTR [R13+60]
            mov WORD PTR [RSP+18],DX
            mov RDI,R15
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+20],AX
            call .L_403d80

            test EAX,EAX
            jne .L_40cc7a

            movzx ESI,WORD PTR [R13+60]
            movzx EBX,WORD PTR [R13+58]
            cmp BX,SI
            jbe .L_40cd8c

            lea R12,QWORD PTR [RSP+240]
.L_40cd40:

            sub EBX,ESI
            mov EAX,16
            mov RCX,R12
            cmp BX,16
            mov RDI,R13
            cmova EBX,EAX
            movzx EBX,BX
            mov EDX,EBX
            call .L_4038b0

            mov ESI,EBX
            mov RDI,R13
            call .L_403530

            mov EDX,EBX
            mov RSI,R12
            mov RDI,R15
            call .L_403d80

            test EAX,EAX
            jne .L_40cc7a

            movzx ESI,WORD PTR [R13+60]
            movzx EBX,WORD PTR [R13+58]
            cmp BX,SI
            ja .L_40cd40
.L_40cd8c:

            mov RDI,RBP
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_4172a0

            lea RDX,QWORD PTR [RSP+32]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R15
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RAX]
            movzx EAX,WORD PTR [RSP+8]
            movaps XMMWORD PTR [RSP+48],XMM0
            rol AX,8
            mov WORD PTR [RSP+62],AX
            mov EAX,4294963391
            mov WORD PTR [RSP+66],AX
            call .L_430850

            test EAX,EAX
            jne .L_40cc7a

            jmp .L_40cbbd
.L_40cde8:

            call __stack_chk_fail@PLT
.L_40cded:

            nop
            nop
            nop
.L_40cdf0:

            jmp .L_40cb40
.L_40cdf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ce00:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            xor EBX,EBX
            mov R12,RDI
            xor R15D,R15D
            sub RSP,488
.L_40ce1f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+472],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov RBP,RAX
            mov WORD PTR [RSP+48],BX
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+320]
            mov WORD PTR [RSP+38],AX
            xor EAX,EAX
            mov EDX,2
            xor ESI,ESI
            mov WORD PTR [RSP+80],AX
            mov RDI,RBX
            xor EAX,EAX
            mov WORD PTR [RSP+28],R15W
            mov QWORD PTR [RSP+224],0
            movaps XMMWORD PTR [RSP+112],XMM0
            mov WORD PTR [RSP+22],AX
            mov R15D,3
            movaps XMMWORD PTR [RSP+128],XMM0
            movaps XMMWORD PTR [RSP+144],XMM0
            movaps XMMWORD PTR [RSP+160],XMM0
            movaps XMMWORD PTR [RSP+176],XMM0
            movaps XMMWORD PTR [RSP+192],XMM0
            movaps XMMWORD PTR [RSP+208],XMM0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_40d7ff]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            lea RDI,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            call .L_42f920

            test RAX,RAX
            je .L_40cf3b

            mov RBX,RAX
            movzx EAX,BYTE PTR [RAX+78]
            lea RDI,QWORD PTR [RBP+1368]
            mov R11D,4101
            mov WORD PTR [RSP+48],R11W
            and EAX,4294967235
            or EAX,16
            mov BYTE PTR [RBX+78],AL
            call .L_413bc0

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EDX,18
            mov RDI,RBX
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            je .L_40cf70
.L_40cf33:

            mov RDI,RBX
            call .L_403400
.L_40cf3b:

            mov RCX,QWORD PTR [RSP+472]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_40d28f

            add RSP,488
.L_40cf5c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40cf70:

            lea RDI,QWORD PTR [RBP+2568]
            mov R10D,2055
            mov WORD PTR [RSP+28],R10W
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,10
            mov RDI,RBX
            mov QWORD PTR [RSP+30],RAX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            mov RAX,QWORD PTR [RBP+1686]
            lea RSI,QWORD PTR [RSP+38]
            mov R9D,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+38],R9W
            mov QWORD PTR [RSP+40],RAX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            lea R9,QWORD PTR [RBP+1669]
            mov R8D,4099
            mov ESI,16
            mov WORD PTR [RSP+80],R8W
            mov RDI,R9
            mov QWORD PTR [RSP+8],R9
            call strnlen@PLT

            mov R9,QWORD PTR [RSP+8]
            lea R8,QWORD PTR [RSP+80]
            lea RDI,QWORD PTR [RSP+82]
            mov ECX,16
            mov RDX,RAX
            mov R15,RAX
            mov QWORD PTR [RSP],R8
            mov RSI,R9
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP]
            mov BYTE PTR [RSP+81],R15B
            movzx R15D,R15B
            lea EDX,DWORD PTR [R15+2]
            mov RDI,RBX
            mov RSI,R8
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            lea RAX,QWORD PTR [RBP+1080]
            mov ESI,14
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_40a510

            test RAX,RAX
            je .L_40d220

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40d07b:

            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            mov RDI,QWORD PTR [RSP]
            mov ESI,53
            call .L_40a510

            test RAX,RAX
            je .L_40d25a

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40d0af:

            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            mov RDI,QWORD PTR [RSP]
            mov ESI,4
            call .L_40a510

            test RAX,RAX
            je .L_40d273

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40d0e3:

            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            mov RDI,QWORD PTR [RSP]
            mov ESI,12
            call .L_40a510

            test RAX,RAX
            je .L_40d294

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40d117:

            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            mov EAX,DWORD PTR [RBP+1384]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,6
            mov RDI,RBX
            mov WORD PTR [RSP+22],1030
            bswap EAX
            mov DWORD PTR [RSP+24],EAX
            call .L_403d80

            test EAX,EAX
            mov R15D,EAX
            jne .L_40cf33

            lea RDI,QWORD PTR [RSP+112]
            mov ECX,12
            mov RSI,R13

            rep movsd 

            mov WORD PTR [RSP+146],61631
            call .L_401240

            lea RDI,QWORD PTR [RSP+240]
            lea RSI,QWORD PTR [RSP+112]
            mov ECX,12
            movdqu XMM0,XMMWORD PTR [R14+2]
            add EAX,50
            mov DWORD PTR [RSP+288],EAX
            mov EDX,72

            rep movsd 

            movups XMMWORD PTR [RSP+292],XMM0
            lea RDI,QWORD PTR [RSP+160]
            lea RSI,QWORD PTR [RSP+240]
            mov ECX,17

            rep movsd 

            lea RSI,QWORD PTR [RSP+160]
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_40cf3b

            lea RDI,QWORD PTR [R12+128]
            mov RSI,RBX
            mov EDX,1
            lea RBX,QWORD PTR [R12+104]
            call .L_4045d0

            cmp RBX,QWORD PTR [R12+120]
            jne .L_40cf3b

            call .L_401240

            mov EDX,50
            mov ESI,EAX
            mov RDI,RBX
            call .L_433770

            jmp .L_40cf3b
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d220:

            lea RSI,QWORD PTR [RSP+240]
            mov EDX,2062
            xor ECX,ECX
            xor EDI,EDI
            mov WORD PTR [RSP+240],DX
            mov DWORD PTR [RSP+242],0
            mov EDX,10
            mov WORD PTR [RSI+6],CX
            mov WORD PTR [RSP+248],DI
            jmp .L_40d07b
.L_40d25a:

            mov EAX,53
            lea RSI,QWORD PTR [RSP+17]
            mov EDX,2
            mov WORD PTR [RSP+17],AX
            jmp .L_40d0af
.L_40d273:

            mov WORD PTR [RSP+240],4100
            lea RSI,QWORD PTR [RSP+240]
            mov EDX,18
            jmp .L_40d0e3
.L_40d28f:

            call __stack_chk_fail@PLT
.L_40d294:

            mov WORD PTR [RSP+17],780
            lea RSI,QWORD PTR [RSP+17]
            mov EDX,5
            jmp .L_40d117
.L_40d2aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40d2b0:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,152
.L_40d2ca:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+22],CX
            mov WORD PTR [RSP+32],R8W
            mov WORD PTR [RSP+18],AX
            movzx EAX,BYTE PTR [RSI]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            and EAX,48
            cmp AL,16
            movaps XMMWORD PTR [RSP+96],XMM0
            je .L_40d338
.L_40d308:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40d435

            add RSP,152
.L_40d326:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d338:

            cmp BYTE PTR [RSI+1],2
            jne .L_40d308

            mov RBX,RDX
            lea RCX,QWORD PTR [RSP+18]
            mov RBP,RDI
            mov EDX,4
            mov ESI,18
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40d308

            cmp BYTE PTR [RSP+19],2
            jne .L_40d308

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,10
            mov ESI,19
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40d308

            cmp BYTE PTR [RSP+23],8
            jne .L_40d308

            lea RCX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RSP+14]
            mov ESI,17
            mov RDI,RBX
            call .L_433a90

            test EAX,EAX
            jne .L_40d308

            xor ESI,ESI
            mov RDI,RBP
            call .L_411a40

            test RAX,RAX
            mov R12,RAX
            je .L_40d308

            xor ESI,ESI
            mov RDI,RAX
            lea R14,QWORD PTR [RSP+112]
            call .L_4035e0

            and BYTE PTR [R12+78],127
.L_40d3d2:

            movzx R13D,WORD PTR [RSP+16]
            movzx ESI,WORD PTR [RSP+14]
            test R13W,R13W
            je .L_40d43a

            cmp R13W,16
            mov EAX,16
            mov RCX,R14
            cmova R13D,EAX
            mov RDI,RBX
            movzx R15D,R13W
            mov EDX,R15D
            call .L_4038b0

            mov EDX,R15D
            mov RSI,R14
            mov RDI,R12
            call .L_403d80

            test EAX,EAX
            jne .L_40d428

            add WORD PTR [RSP+14],R13W
            sub WORD PTR [RSP+16],R13W
            jmp .L_40d3d2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d428:

            mov RDI,R12
            call .L_403400

            jmp .L_40d308
.L_40d435:

            call __stack_chk_fail@PLT
.L_40d43a:

            xor ECX,ECX
            xor EDX,EDX
            mov R8,R12
            mov RDI,RBX
            lea R13,QWORD PTR [RSP+64]
            call .L_403fa0

            mov RAX,QWORD PTR [RSP+24]
            mov RDI,RBP
            mov WORD PTR [RSP+80],33022
            mov QWORD PTR [RSP+88],RAX
            movzx EAX,WORD PTR [RSP+20]
            rol AX,8
            mov WORD PTR [RSP+98],AX
            call .L_433510

            movzx EAX,BYTE PTR [RAX+24]
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            mov BYTE PTR [RSP+100],AL
            call .L_411ba0

            test EAX,EAX
            jne .L_40d428

            lea R12,QWORD PTR [RSP+32]
            mov EDX,18
            mov ESI,21
            mov RDI,RBX
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_40d308

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBP
            call .L_40ce00

            jmp .L_40d308
.L_40d4c4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d4d0:

            jmp .L_40d2b0
.L_40d4d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d4e0:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,8
.L_40d4f3:

            call .L_433510

            lea RBX,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RIP+.L_40d7f0]
            mov RDX,RBP
            mov RDI,RBX
            call .L_42fbe0

            lea RCX,QWORD PTR [RIP+.L_40d7f0]
            mov RDI,RBX
            mov R8,RBP
            mov RDX,R13
            mov RSI,R12
            call .L_430850

            test EAX,EAX
            mov EBX,EAX
            jne .L_40d565

            mov EDI,10
            call .L_432a60

            xor EDI,EDI
            mov R12,RAX
            call .L_4329f0

            lea RDX,QWORD PTR [RIP+.L_40d808]
            mov RCX,RAX
            mov R8,R12
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            call .L_4012c0

            or BYTE PTR [RBP+154],2
.L_40d565:

            add RSP,8
.L_40d569:

            mov EAX,EBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_40d572:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d580:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+128]
            sub RSP,152
.L_40d59b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov RDI,R12
            mov R15,RAX
            mov QWORD PTR [RSP+128],0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            movaps XMMWORD PTR [RSP],XMM0
            call .L_4045c0

            mov RBP,RAX
            call .L_401240

            movdqa XMM0,XMMWORD PTR [RSP]
            test RBP,RBP
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_40d611

            lea R13,QWORD PTR [RBX+104]
            cmp R13,QWORD PTR [RBX+120]
            je .L_40d640
.L_40d611:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40d73b

            add RSP,152
.L_40d62f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d640:

            mov DWORD PTR [RSP],EAX
            movzx EAX,WORD PTR [RBP+58]
            lea R14,QWORD PTR [RSP+64]
            mov EDX,72
            mov RDI,RBP
            mov RCX,R14
            lea ESI,DWORD PTR [RAX-72]
            movzx ESI,SI
            call .L_4038b0

            test BYTE PTR [RBX+154],2
            mov R8D,DWORD PTR [RSP]
            je .L_40d68a

            mov RAX,QWORD PTR [R15+1528]
            mov RDX,QWORD PTR [R15+1536]
            xor RAX,QWORD PTR [R14+52]
            xor RDX,QWORD PTR [R14+60]
            or RDX,RAX
            jne .L_40d611
.L_40d68a:

            mov EDX,DWORD PTR [RSP+112]
            cmp R8D,EDX
            js .L_40d720

            mov RSI,RBP
            mov RDI,R12
            call .L_404690

            movzx EAX,WORD PTR [RBP+58]
            mov RDI,RBP
            lea ESI,DWORD PTR [RAX-72]
            movzx ESI,SI
            call .L_403470

            lea RSI,QWORD PTR [R14+52]
            lea RDI,QWORD PTR [R15+1368]
            call .L_413ea0

            movdqa XMM0,XMMWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+80]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+96]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40d4e0

            test EAX,EAX
            je .L_40d611

            mov RDI,RBP
            call .L_403400

            call .L_401240

            xor EDX,EDX
            mov ESI,EAX
            mov RDI,R13
            call .L_433770

            jmp .L_40d611
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d720:

            sub EDX,R8D
            mov EBX,EDX
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R13
            call .L_433770

            jmp .L_40d611
.L_40d73b:

            call __stack_chk_fail@PLT
.L_40d740:

            jmp .L_40d580
.L_40d745:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d750:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402ae0

            add RSP,8
            mov RDI,RAX
            jmp .L_40d580
.L_40d76d:

            nop
            nop
            nop
.L_40d770:

            push R12
            push RBP
            mov R12D,R8D
            push RBX
            and BYTE PTR [RDI+154],253
            mov RBX,RSI
            mov RBP,RDX
            call .L_40d580

            test RBX,RBX
            sete CL
            test RBP,RBP
            sete AL
            or CL,AL
            jne .L_40d7a4

            test R12D,R12D
            jne .L_40d7a4

            cmp BYTE PTR [RBX+1],68
            je .L_40d7b0
.L_40d7a4:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d7b0:

            mov EDI,10
            call .L_432a60

            xor EDI,EDI
            mov RBX,RAX
            call .L_4329f0

            mov R8,RBX
            lea RDX,QWORD PTR [RIP+.L_40d840]
            mov RCX,RAX
            pop RBX
            pop RBP
            pop R12
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            jmp .L_4012c0
.L_40d7e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d7f0:

            jmp .L_40d770
.L_40d7f5:
          .string "c/tx"
.L_40d7fa:
          .string "c/rx"
.L_40d7ff:
          .string "c/je"
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d808:
          .string "[%s]%s: [THCI] direction=send | type=JOIN_ENT.ntf"
          .zero 6
.L_40d840:
          .string "[%s]%s: [THCI] direction=recv | type=JOIN_ENT.rsp"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d880:

            lea RAX,QWORD PTR [RIP+.L_40e0a6]
            push RBX

            mov RBX,RDI
            mov EDX,4294967295
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_40df10]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_40e0ab]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_40e030]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_40e070]
            mov QWORD PTR [RBX+48],RDI
            mov WORD PTR [RDI+158],DX
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RDI+64]
            mov DWORD PTR [RDI+72],0
            mov DWORD PTR [RDI+88],30000
            mov QWORD PTR [RDI+80],RAX
            xor EAX,EAX
            mov WORD PTR [RDI+92],AX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_40d927:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d930:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            mov R12,RDI
            mov R13D,ECX
            sub RSP,200
.L_40d94d:

            lea RBP,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_433510

            xor ESI,ESI
            xor ECX,ECX
            mov RBX,RAX
            mov RDI,RBP
            mov WORD PTR [RSP+28],SI
            mov RSI,R15
            mov WORD PTR [RSP+25],CX
            add RBX,216
            call .L_431cf0

            mov RDI,RBP
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42f920

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40d9e4

            mov EDX,272
            lea RSI,QWORD PTR [RSP+25]
            mov RDI,RBP
            mov WORD PTR [RSP+25],DX
            mov EDX,3
            mov BYTE PTR [RSP+27],R13B
            call .L_403d80

            test EAX,EAX
            je .L_40da10
.L_40d9d4:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_40d9e4:

            mov RCX,QWORD PTR [RSP+184]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40da97

            add RSP,200
.L_40da02:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40da10:

            lea RAX,QWORD PTR [R12+64]
            cmp QWORD PTR [R12+80],RAX
            je .L_40da36

            movzx EAX,BYTE PTR [R12+93]
            lea RSI,QWORD PTR [R12+92]
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            test EAX,EAX
            jne .L_40d9d4
.L_40da36:

            cmp R13D,1
            je .L_40da60
.L_40da3c:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBX
            call .L_430850

            test EAX,EAX
            je .L_40d9e4

            jmp .L_40d9d4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40da60:

            mov EAX,523
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov WORD PTR [RSP+28],AX
            movzx EAX,WORD PTR [R12+158]
            mov RDI,RBP
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            je .L_40da3c

            jmp .L_40d9d4
.L_40da97:

            call __stack_chk_fail@PLT
.L_40da9c:

            nop
            nop
            nop
            nop
.L_40daa0:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R13D,ECX
            push RBX
            mov R12,RDX
            sub RSP,192
.L_40dab8:

            lea RBP,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R14
            mov RDI,RBP
            mov WORD PTR [RSP+29],DX
            add RBX,216
            call .L_431cf0

            mov RDI,RBP
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42f920

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40db48

            lea RSI,QWORD PTR [RSP+29]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+29],AX
            mov BYTE PTR [RSP+31],R13B
            call .L_403d80

            test EAX,EAX
            je .L_40db70
.L_40db38:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_40db48:

            mov RCX,QWORD PTR [RSP+184]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40db89

            add RSP,192
.L_40db62:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40db70:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_430850

            test EAX,EAX
            je .L_40db48

            jmp .L_40db38
.L_40db89:

            call __stack_chk_fail@PLT
.L_40db8e:

            nop
            nop
.L_40db90:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            push RBX
            sub RSP,224
.L_40dba2:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov RBP,RAX
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_431360

            mov RDI,RBX
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_40e0b0]
            mov RDI,RBX
            call .L_4318a0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_40dc76

            lea RDI,QWORD PTR [RBP+2568]
            lea R13,QWORD PTR [RSP+16]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RSI,RBX
            mov RDI,R12
            mov WORD PTR [RSP+50],AX
            movdqu XMM0,XMMWORD PTR [R14]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_430850

            test EAX,EAX
            je .L_40dc76

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_40dc76:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40dc99

            add RSP,224
.L_40dc90:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_40dc99:

            call __stack_chk_fail@PLT
.L_40dc9e:

            nop
            nop
.L_40dca0:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp EDX,299998
            ja .L_40dcb5

            mov DWORD PTR [RDI+88],ESI
            xor EAX,EAX
.L_40dcb5:

            ret 
.L_40dcb7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dcc0:

            mov EAX,DWORD PTR [RDI+88]
            ret 
.L_40dcc4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dcd0:

            sub RSP,24
.L_40dcd4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,523
            mov WORD PTR [RSP+4],AX
            movzx EAX,WORD PTR [RDI+158]
            add EAX,1
            mov WORD PTR [RDI+158],AX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_433510

            movzx ECX,BYTE PTR [RSP+5]
            lea RSI,QWORD PTR [RSP+4]
            lea RDI,QWORD PTR [RAX+7520]
            lea EDX,DWORD PTR [RCX+2]
            movzx EDX,DL
            call .L_428cf0

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40dd3e

            add RSP,24
.L_40dd3d:

            ret 
.L_40dd3e:

            call __stack_chk_fail@PLT
.L_40dd43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dd50:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            xor ESI,ESI
            push RBX
            mov R12,RCX
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            mov RBX,RDI
            sub RSP,112
.L_40dd6f:

            mov RDI,RDX
            mov EDX,66
            lea RBP,QWORD PTR [RSP+32]
            mov WORD PTR [RSP],CX
            mov WORD PTR [RSP+4],SI
            mov ESI,10
            mov WORD PTR [RSP+8],R8W
            mov WORD PTR [RSP+32],R9W
            mov RCX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_4339f0

            test EAX,EAX
            jne .L_40dde0

            cmp BYTE PTR [RSP+33],64
            ja .L_40dde0

            lea R14,QWORD PTR [RBX+64]
            cmp R14,QWORD PTR [RBX+80]
            je .L_40de28

            lea RSI,QWORD PTR [RBX+94]
            lea RDI,QWORD PTR [RBP+2]
            mov EDX,66
            call strncmp@PLT

            test EAX,EAX
            je .L_40de18

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dde0:

            mov ECX,4294967295
.L_40dde5:

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_40d930

            mov RAX,QWORD PTR [RSP+104]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40deff

            add RSP,112
.L_40de0b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40de18:

            mov RDI,R14
            call .L_433690

            mov RDI,RBX
            call .L_40dcd0
.L_40de28:

            mov EAX,521
            pxor XMM0,XMM0
            mov WORD PTR [RSP],AX
            movzx EAX,WORD PTR [R12+30]
            mov EDX,523
            mov RDI,RBX
            mov WORD PTR [RSP+4],DX
            mov BYTE PTR [RSP+8],8
            movups XMMWORD PTR [RSP+10],XMM0
            mov BYTE PTR [RSP+9],1
            mov RBP,RSP
            mov WORD PTR [RSP+2],AX
            movzx EAX,WORD PTR [RBX+158]
            add EAX,1
            mov WORD PTR [RBX+158],AX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_433510

            movzx EDX,BYTE PTR [RSP+5]
            movzx ECX,BYTE PTR [RSP+9]
            lea RDI,QWORD PTR [RAX+7520]
            add DL,BYTE PTR [RSP+1]
            mov RSI,RBP
            lea EDX,DWORD PTR [RDX+RCX*1+6]
            movzx EDX,DL
            call .L_428cf0

            test EAX,EAX
            jne .L_40dde0

            movdqa XMM0,XMMWORD PTR [RSP+32]
            movzx EAX,WORD PTR [RSP+96]
            movups XMMWORD PTR [RBX+92],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+48]
            mov WORD PTR [RBX+156],AX
            movups XMMWORD PTR [RBX+108],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+64]
            movups XMMWORD PTR [RBX+124],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+80]
            movups XMMWORD PTR [RBX+140],XMM0
            call .L_401240

            mov EDX,50000
            mov ESI,EAX
            mov RDI,R14
            call .L_433770

            mov ECX,1
            jmp .L_40dde5
.L_40deff:

            call __stack_chk_fail@PLT
.L_40df04:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40df10:

            jmp .L_40dd50
.L_40df15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40df20:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RDX
            xor EDX,EDX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,40
.L_40df38:

            mov ESI,16
            mov RDI,RBX
            lea RCX,QWORD PTR [RSP+17]
            mov WORD PTR [RSP+20],DX
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+17],AX
            call .L_4339f0

            test EAX,EAX
            jne .L_40df76

            cmp BYTE PTR [RSP+18],1
            je .L_40df98
.L_40df76:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40e025

            add RSP,40
.L_40df8e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40df98:

            lea RCX,QWORD PTR [RSP+20]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_40df76

            cmp BYTE PTR [RSP+21],2
            jne .L_40df76

            movzx EAX,WORD PTR [RSP+22]
            mov ECX,4294967295
            rol AX,8
            cmp WORD PTR [RBP+158],AX
            je .L_40dfe1
.L_40dfd1:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_40daa0

            jmp .L_40df76
.L_40dfe1:

            cmp BYTE PTR [RSP+19],1
            mov DWORD PTR [RSP+8],ECX
            lea RDI,QWORD PTR [RBP+64]
            je .L_40e003

            call .L_433690

            mov RDI,RBP
            call .L_40dcd0

            mov ECX,DWORD PTR [RSP+8]
            jmp .L_40dfd1
.L_40e003:

            mov QWORD PTR [RSP+8],RDI
            call .L_401240

            mov RDI,QWORD PTR [RSP+8]
            mov EDX,50000
            mov ESI,EAX
            call .L_433770

            mov ECX,1
            jmp .L_40dfd1
.L_40e025:

            call __stack_chk_fail@PLT
.L_40e02a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40e030:

            jmp .L_40df20
.L_40e035:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e040:

            push RBX
            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RAX+2580],4
            je .L_40e058

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e058:

            lea RDI,QWORD PTR [RBX+64]
            call .L_433690

            mov RDI,RBX
            pop RBX
            jmp .L_40dcd0
.L_40e06a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40e070:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402ad0

            add RSP,8
            mov RDI,RAX
            jmp .L_40e040
.L_40e08a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40e090:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+64]
            call .L_433690

            mov RDI,RBX
            pop RBX
            jmp .L_40dcd0
.L_40e0a6:
          .string "c/lp"
.L_40e0ab:
          .string "c/la"
.L_40e0b0:
          .string "c/dc"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x90
.L_40e0c0:

            lea R8,QWORD PTR [RDI+6]
            mov RAX,RDI
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e0d0:

            movzx ECX,BYTE PTR [RAX]
            shl RDX,8
            add RAX,1
            or RDX,RCX
            cmp RAX,R8
            jne .L_40e0d0

            lea R9,QWORD PTR [RSI+6]
            mov RAX,RSI
            xor ECX,ECX
            nop
            nop
            nop
            nop
.L_40e0f0:

            movzx R8D,BYTE PTR [RAX]
            shl RCX,8
            add RAX,1
            or RCX,R8
            cmp RAX,R9
            jne .L_40e0f0

            cmp RCX,RDX
            movzx EDI,WORD PTR [RDI+6]
            movzx ESI,WORD PTR [RSI+6]
            mov EAX,1
            ja .L_40e13b

            jb .L_40e136

            rol DI,8
            rol SI,8
            mov EDX,EDI
            mov ECX,ESI
            shr DX,1
            shr CX,1
            cmp CX,DX
            sbb ESI,ESI
            cmp CX,DX
            cmovbe EAX,ESI
            ret 
.L_40e136:

            mov EAX,4294967295
.L_40e13b:

            ret 
.L_40e13d:

            nop
            nop
            nop
.L_40e140:

            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+32]
            mov RBP,RSI
            sub RSP,8
.L_40e150:

            mov BYTE PTR [RDI-32],0
            mov BYTE PTR [RDI-31],0
            mov QWORD PTR [RDI-24],0
            mov QWORD PTR [RDI-16],0
            mov QWORD PTR [RDI-8],0
            call .L_4047f0

            lea RDX,QWORD PTR [RIP+.L_40fbc0]
            lea RDI,QWORD PTR [RBX+64]
            mov RCX,RBX
            mov RSI,RBP
            call .L_4051f0

            lea RDI,QWORD PTR [RBX+80]
            mov RSI,RBP
            call .L_411060

            lea RDI,QWORD PTR [RBX+88]
            mov RSI,RBP
            call .L_43dc80

            lea RDI,QWORD PTR [RBX+104]
            mov RSI,RBP
            call .L_411d10

            add RSP,8
.L_40e1b3:

            lea RDI,QWORD PTR [RBX+120]
            mov RSI,RBP
            pop RBX
            pop RBP
            jmp .L_410860
.L_40e1c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e1d0:

            push RBX
            mov EBX,ESI
            call .L_4334e0

            lea EDX,DWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RAX+24624]
            xor ESI,ESI
            pop RBX
            movzx EDX,DX
            jmp .L_403790
.L_40e1ed:

            nop
            nop
            nop
.L_40e1f0:

            movzx EDI,DI
            mov EDX,16
            jmp .L_404270
.L_40e1fd:

            nop
            nop
            nop
.L_40e200:

            push R12
            push RBP
            mov R12D,ECX
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            xor EDI,EDI
            movzx ESI,DX
            call .L_404250

            movzx ESI,R12W
            movzx EDI,AX
            call .L_404250

            mov RSI,RBP
            movzx EDI,AX
            mov EDX,16
            call .L_404270

            mov RSI,RBX
            movzx EDI,AX
            mov EDX,16
            pop RBX
            pop RBP
            pop R12
            jmp .L_404270
.L_40e247:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e250:

            mov QWORD PTR [RDI+8],RSI
            mov QWORD PTR [RDI+16],RDX
            ret 
.L_40e259:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e260:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            xor ESI,ESI
            xor ECX,ECX
            add RDI,120
            mov RBX,RDX
            add RDX,8
            sub RSP,32
.L_40e27a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDX-2]
            lea RBP,QWORD PTR [RSP+11]
            mov WORD PTR [RSP+17],SI
            mov WORD PTR [RSP+11],CX
            mov BYTE PTR [RSP+10],0
            mov RSI,RBP
            mov BYTE PTR [RSP+9],AL
            call .L_4108f0

            movzx EAX,BYTE PTR [RSP+12]
            lea EDX,DWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RDX+2]
            test AL,7
            je .L_40e2e6

            lea RSI,QWORD PTR [RSP+17]
            mov EAX,1
            mov EDX,2
            mov RDI,R12
            mov WORD PTR [RSP+17],AX
            call .L_403df0

            test EAX,EAX
            jne .L_40e2f8

            movzx EAX,BYTE PTR [RSP+12]
            lea EDX,DWORD PTR [RAX+2]
.L_40e2e6:

            movzx EDX,DL
            mov RSI,RBP
            mov RDI,R12
            call .L_403df0

            test EAX,EAX
            je .L_40e318
.L_40e2f8:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40e347

            add RSP,32
.L_40e30c:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e318:

            lea RSI,QWORD PTR [RSP+9]
            mov EDX,2
            mov RDI,R12
            call .L_403df0

            test EAX,EAX
            jne .L_40e2f8

            movzx EDX,WORD PTR [RBX+4]
            mov BYTE PTR [RBX+6],0
            rol DX,8
            add EDX,8
            rol DX,8
            mov WORD PTR [RBX+4],DX
            jmp .L_40e2f8
.L_40e347:

            call __stack_chk_fail@PLT
.L_40e34c:

            nop
            nop
            nop
            nop
.L_40e350:

            push R15
            push R14
            mov EDX,40
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            mov RDI,RBX
            xor ESI,ESI
            sub RSP,120
            lea R13,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov RCX,R13
            call .L_4038b0

            cmp BYTE PTR [RSP+54],0
            je .L_40e3b8
.L_40e38f:

            xor EAX,EAX
.L_40e391:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40e629

            add RSP,120
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e3b8:

            lea RAX,QWORD PTR [RSP+37]
            mov EDX,2
            mov ESI,40
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+38]
            lea EAX,DWORD PTR [RAX*8+8]
            lea R12D,DWORD PTR [RAX+40]
            cmp R12W,WORD PTR [RBX+58]
            mov WORD PTR [RSP+22],AX
            ja .L_40e588

            lea RAX,QWORD PTR [RSP+39]
            mov R14D,42
            xor EDX,EDX
            movzx EDI,R12W
            mov QWORD PTR [RSP+8],R13
            xor R15D,R15D
            mov R13D,R14D
            mov BYTE PTR [RSP+7],0
            mov WORD PTR [RSP+20],DX
            mov DWORD PTR [RSP+16],EDI
            mov R14,RAX
            jmp .L_40e478
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e430:

            jb .L_40e578

            cmp AL,109
            jne .L_40e560

            movzx EAX,BYTE PTR [RSP+40]
            cmp R13W,42
            mov BYTE PTR [RSP+7],AL
            je .L_40e598
.L_40e452:

            add EBP,8
            cmp EBP,DWORD PTR [RSP+16]
            mov EAX,1
            cmove R15D,EAX
.L_40e462:

            movzx EAX,BYTE PTR [RSP+7]
            mov WORD PTR [RSP+20],R13W
            lea R13D,DWORD PTR [R13+RAX*1+2]
.L_40e472:

            cmp R13W,R12W
            jae .L_40e4ae
.L_40e478:

            movzx EBP,R13W
            xor EAX,EAX
            mov RCX,R14
            mov EDX,2
            mov ESI,EBP
            mov RDI,RBX
            mov WORD PTR [RSP+39],AX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+39]
            cmp AL,1
            jne .L_40e430

            movzx EAX,BYTE PTR [RSP+40]
            lea R13D,DWORD PTR [R13+RAX*1+2]
            cmp R13W,R12W
            jb .L_40e478
.L_40e4ae:

            mov R13,QWORD PTR [RSP+8]
            jne .L_40e588

            test R15B,R15B
            je .L_40e5b0

            movzx R14D,WORD PTR [RSP+22]
            lea RBP,QWORD PTR [RSP+96]
            xor R12D,R12D
            add R14D,32
            nop
            nop
            nop
            nop
.L_40e4d8:

            lea R15D,DWORD PTR [R14-8]
            mov RCX,RBP
            mov EDX,8
            mov RDI,RBX
            movzx ESI,R15W
            call .L_4038b0

            movzx ESI,R14W
            mov RCX,RBP
            mov EDX,8
            mov RDI,RBX
            mov R14D,R15D
            call .L_403b10

            cmp R15W,R12W
            jne .L_40e4d8

            mov ESI,8
            mov RDI,RBX
            call .L_403860

            cmp WORD PTR [RSP+20],42
            jne .L_40e608

            movzx EAX,BYTE PTR [RSP+37]
            mov BYTE PTR [RSP+54],AL
.L_40e52f:

            movzx EAX,WORD PTR [RSP+52]
            mov RCX,R13
            mov EDX,40
            xor ESI,ESI
            mov RDI,RBX
            rol AX,8
            sub EAX,8
            rol AX,8
            mov WORD PTR [RSP+52],AX
            call .L_403b10

            xor EAX,EAX
            jmp .L_40e391
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40e560:

            movzx EAX,BYTE PTR [RSP+40]
            xor R15D,R15D
            lea R13D,DWORD PTR [R13+RAX*1+2]
            jmp .L_40e472
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40e578:

            add R13D,1
            jmp .L_40e472
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e588:

            mov EAX,6
            jmp .L_40e391
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40e598:

            cmp BYTE PTR [RSP+38],0
            jne .L_40e452

            mov R15D,1
            jmp .L_40e462
          .byte 0x66
          .byte 0x90
.L_40e5b0:

            cmp WORD PTR [RSP+20],0
            je .L_40e38f

            movzx EAX,BYTE PTR [RSP+7]
            lea R12,QWORD PTR [RSP+41]
            xor ESI,ESI
            mov ECX,5
            mov BYTE PTR [RSP+41],1
            lea RDI,QWORD PTR [R12+2]
            lea EBP,DWORD PTR [RAX+2]
            mov BYTE PTR [RSP+42],AL
            movzx EDX,BPL
            sub RDX,2
            call __memset_chk@PLT

            movzx ESI,WORD PTR [RSP+20]
            movzx EDX,BPL
            mov RCX,R12
            mov RDI,RBX
            call .L_403b10

            jmp .L_40e38f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e608:

            mov RCX,QWORD PTR [RSP+24]
            mov EDX,2
            mov ESI,40
            mov RDI,RBX
            sub BYTE PTR [RSP+38],1
            call .L_403b10

            jmp .L_40e52f
.L_40e629:

            call __stack_chk_fail@PLT
.L_40e62e:

            nop
            nop
.L_40e630:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,40
.L_40e640:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+1],0
            je .L_40e698

            mov RDI,RDX
            mov R12,RDX
            mov R13D,ECX
            call .L_410070

            test AL,AL
            jne .L_40e740

            mov RDI,R12
            call .L_4100b0

            test AL,AL
            jne .L_40e740

            cmp R13B,17
            je .L_40e6f0

            cmp R13B,58
            jne .L_40e698

            cmp BYTE PTR [RBX+98],0
            jne .L_40e770

            nop
            nop
            nop
            nop
            nop
            nop
.L_40e698:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            call .L_404070

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40e6c8

            mov RSI,RBP
            mov RDI,RBX
            call .L_40e350

            mov RSI,QWORD PTR [RBX+16]
            mov RDI,RBP
            call QWORD PTR [RBX+8]

            xor EAX,EAX
.L_40e6c8:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40e793

            add RSP,40
.L_40e6e0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e6f0:

            movzx ESI,WORD PTR [RBP+60]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+10]
            rol AX,8
            cmp AX,19788
            je .L_40e750

            cmp AX,61631
            jne .L_40e698

            mov RDI,RBX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+12720]
            mov RSI,R12
            call .L_42d9c0

            test AL,AL
            je .L_40e698

            nop
            nop
.L_40e740:

            mov EAX,4
            jmp .L_40e6c8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e750:

            mov RDI,R12
            call .L_40ff50

            test AL,AL
            jne .L_40e740

            mov RDI,R12
            call .L_410270

            test AL,AL
            je .L_40e698

            jmp .L_40e740
          .byte 0x66
          .byte 0x90
.L_40e770:

            movzx ESI,WORD PTR [RBP+60]
            lea RCX,QWORD PTR [RSP+16]
            mov EDX,8
            mov RDI,RBP
            call .L_4038b0

            cmp BYTE PTR [RSP+16],128
            jne .L_40e698

            jmp .L_40e740
.L_40e793:

            call __stack_chk_fail@PLT
.L_40e798:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e7a0:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+32]
            call .L_404a60

            lea RDI,QWORD PTR [RBX+64]
            pop RBX
            jmp .L_405290
.L_40e7b7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e7c0:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            mov R14,RDX
            mov RDI,RBX
            mov EDX,2
            sub RSP,24
.L_40e7e2:

            movzx ESI,WORD PTR [RSI+60]
            lea RCX,QWORD PTR [RSP+4]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+6],AX
            call .L_4038b0

            cmp AX,2
            jne .L_40e8b0

            movzx EBP,BYTE PTR [RSP+5]
            movzx EAX,WORD PTR [RBX+60]
            lea EBP,DWORD PTR [RAX+RBP*8+8]
            cmp BP,WORD PTR [RBX+58]
            ja .L_40e8b0

            lea R12,QWORD PTR [RSP+6]
            mov ESI,2
            mov RDI,RBX
            call .L_403530
.L_40e83a:

            movzx ESI,WORD PTR [RBX+60]
            cmp BP,SI
            jbe .L_40e8a6
.L_40e843:

            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            cmp AX,2
            jne .L_40e8b0

            movzx EAX,BYTE PTR [RSP+6]
            test AL,AL
            je .L_40e900

            movzx EDX,BYTE PTR [RSP+7]
            movzx ECX,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RCX+RDX*1+2]
            mov RSI,RDX
            movzx EDX,BP
            cmp RCX,RDX
            ja .L_40e8b0

            cmp AL,109
            je .L_40e8d8

            and EAX,4294967232
            cmp AL,128
            je .L_40e8b0

            cmp AL,192
            je .L_40e8b0

            cmp AL,64
            je .L_40e8b0
.L_40e892:

            add ESI,2
            mov RDI,RBX
            call .L_403530

            movzx ESI,WORD PTR [RBX+60]
            cmp BP,SI
            ja .L_40e843
.L_40e8a6:

            xor EAX,EAX
            jmp .L_40e8b5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40e8b0:

            mov EAX,2
.L_40e8b5:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_40e912

            add RSP,24
.L_40e8c9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e8d8:

            movzx ECX,BYTE PTR [R15]
            lea RDX,QWORD PTR [R14+8]
            lea RDI,QWORD PTR [R13+120]
            mov RSI,RBX
            call .L_410ca0

            test EAX,EAX
            jne .L_40e8b5

            movzx ESI,BYTE PTR [RSP+7]
            jmp .L_40e892
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e900:

            mov ESI,1
            mov RDI,RBX
            call .L_403530

            jmp .L_40e83a
.L_40e912:

            call __stack_chk_fail@PLT
.L_40e917:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e920:

            push RBX
            mov RBX,RSI
            mov EDX,8
            mov RDI,RBX
            sub RSP,16
.L_40e930:

            movzx ESI,WORD PTR [RSI+60]
            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,8
            mov ECX,2
            jne .L_40e980

            movzx EDX,WORD PTR [RSP+2]
            rol DX,8
            test DX,65528
            jne .L_40e980

            and EDX,1
            jne .L_40e980

            mov ESI,8
            mov RDI,RBX
            call .L_403530

            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
.L_40e980:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_40e998

            add RSP,16
.L_40e996:

            pop RBX
            ret 
.L_40e998:

            call __stack_chk_fail@PLT
.L_40e99d:

            nop
            nop
            nop
.L_40e9a0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RSI
            mov R12D,R9D
            sub RSP,40
.L_40e9bd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+12]
            lea R13,QWORD PTR [RSP+22]
            mov BYTE PTR [RSP+12],R8B
            mov QWORD PTR [RSP],RAX
.L_40e9e0:

            test R12B,R12B
            jne .L_40e9eb

            cmp BYTE PTR [RBP],0
            jne .L_40ea68
.L_40e9eb:

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R13
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            cmp AX,2
            jne .L_40ea3c

            movzx EAX,BYTE PTR [RBP]
            cmp AL,44
            je .L_40ea70

            ja .L_40ea60

            test AL,AL
            jne .L_40ea38
.L_40ea13:

            mov RCX,QWORD PTR [RSP]
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R14
            call .L_40e7c0

            test EAX,EAX
            jne .L_40ea41
.L_40ea29:

            movzx EAX,BYTE PTR [RSP+22]
            mov BYTE PTR [RBP],AL
            jmp .L_40e9e0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ea38:

            cmp AL,43
            jne .L_40ea68
.L_40ea3c:

            mov EAX,2
.L_40ea41:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40ea81

            add RSP,40
.L_40ea55:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40ea60:

            cmp AL,59
            je .L_40ea3c

            cmp AL,60
            je .L_40ea13
.L_40ea68:

            xor EAX,EAX
            jmp .L_40ea41
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ea70:

            mov RSI,RBX
            mov RDI,R14
            call .L_40e920

            test EAX,EAX
            je .L_40ea29

            jmp .L_40ea41
.L_40ea81:

            call __stack_chk_fail@PLT
.L_40ea86:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ea90:

            cmp CL,17
            je .L_40eab0

            cmp CL,58
            jne .L_40eaa8

            add RDI,88
            jmp .L_43e040
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eaa8:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eab0:

            add RDI,104
            jmp .L_411e60
.L_40eab9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eac0:

            test R8B,R8B
            jne .L_40ead8

            cmp QWORD PTR [RDI+8],0
            je .L_40eae0

            movzx ECX,CL
            jmp .L_40e630
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ead8:

            mov EAX,2
            ret 
          .byte 0x66
          .byte 0x90
.L_40eae0:

            mov EAX,4
            ret 
.L_40eae6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eaf0:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            je .L_40eb20

            cmp RAX,RSI
            je .L_40eb30

            movzx EDX,BYTE PTR [RAX+24]
            cmp BYTE PTR [RSI+24],DL
            je .L_40eb30

            cmp QWORD PTR [RAX+32],0
            je .L_40eb10
.L_40eb0e:

            jmp .L_40eb0e
.L_40eb10:

            mov QWORD PTR [RAX+32],RSI
            mov QWORD PTR [RSI+32],0
            xor EAX,EAX
            ret 
          .byte 0x90
.L_40eb20:

            mov QWORD PTR [RDI+24],RSI
            xor EAX,EAX
            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x90
.L_40eb30:

            mov EAX,24
            ret 
.L_40eb36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eb40:

            mov RDX,QWORD PTR [RDI+24]
            test RDX,RDX
            je .L_40eba8

            cmp RDX,RSI
            mov RAX,QWORD PTR [RDX+32]
            je .L_40eb90

            test RAX,RAX
            je .L_40eb6b
.L_40eb57:

            cmp RSI,RAX
            mov RCX,QWORD PTR [RAX+32]
            je .L_40eb78

            mov RDX,RAX
            mov RAX,RCX
            test RAX,RAX
            jne .L_40eb57
.L_40eb6b:

            mov EAX,23
            jmp .L_40eb7e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eb78:

            mov QWORD PTR [RDX+32],RCX
            xor EAX,EAX
.L_40eb7e:

            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40eb90:

            mov QWORD PTR [RDI+24],RAX
            mov EAX,23
            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eba8:

            mov EAX,23
            ret 
.L_40ebae:

            nop
            nop
.L_40ebb0:

            mov RAX,QWORD PTR [RDI+24]
            mov EDX,ESI
            test RAX,RAX
            je .L_40ebd6

            cmp SIL,BYTE PTR [RAX+24]
            jne .L_40ebcd

            jmp .L_40ebe0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ebc8:

            cmp DL,BYTE PTR [RAX+24]
            je .L_40ebd6
.L_40ebcd:

            mov RAX,QWORD PTR [RAX+32]
            test RAX,RAX
            jne .L_40ebc8
.L_40ebd6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ebe0:

            ret 
.L_40ebe2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ebf0:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+24]
            test RBX,RBX
            je .L_40ec30

            mov RBP,RSI
            jmp .L_40ec11
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ec08:

            mov RBX,QWORD PTR [RBX+32]
            test RBX,RBX
            je .L_40ec30
.L_40ec11:

            mov RSI,RBP
            mov RDI,RBX
            call .L_411990

            test AL,AL
            je .L_40ec08

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ec30:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_40ec39:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ec40:

            push R15
            push R14
            push R13
            push R12
            lea R13,QWORD PTR [RSI+16]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R13
            sub RSP,40
.L_40ec58:

            movzx EAX,BYTE PTR [RSI+36]
            mov QWORD PTR [RSP+24],RSI
            mov BYTE PTR [RSP+14],AL
            call .L_410210

            mov R15,QWORD PTR [RBX+24]
            mov BYTE PTR [RSP+12],AL
            test R15,R15
            je .L_40efb5

            xor EBX,EBX
            mov BYTE PTR [RSP+13],0
            xor R12D,R12D
            jmp .L_40eca8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ec90:

            movzx EDX,BYTE PTR [RSP+11]
            cmp BYTE PTR [RSP+14],DL
            je .L_40ecc9
.L_40ec9b:

            mov R15,QWORD PTR [R15+32]
            test R15,R15
            je .L_40edd5
.L_40eca8:

            movzx EAX,BYTE PTR [R15+24]
            mov RDI,R13
            mov BYTE PTR [RSP+11],AL
            call .L_40ff50

            test AL,AL
            jne .L_40ec90

            mov RDI,R13
            call .L_40ff70

            test AL,AL
            jne .L_40ec90
.L_40ecc9:

            mov R14,QWORD PTR [R15+8]
            test R14,R14
            je .L_40ec9b

            mov QWORD PTR [RSP+16],R15
            mov R15D,EBX
            jmp .L_40ed67
          .byte 0x90
.L_40ece0:

            mov RSI,R13
            mov RDI,R14
            call .L_4103b0

            test AL,AL
            jne .L_40ede1

            movzx ESI,BYTE PTR [R14+17]
            test SIL,4
            je .L_40ee90

            shr SIL,3
            and ESI,15
.L_40ed09:

            movzx EAX,BYTE PTR [R12+17]
            test AL,4
            je .L_40ee70

            shr AL,3
            and EAX,15
.L_40ed1d:

            movzx ECX,BYTE PTR [R14+17]
            mov EDI,ECX
            shr DIL,2
            and EDI,1
            cmp AL,SIL
            jbe .L_40ee00

            test DIL,DIL
            je .L_40ef10

            shr CL,3
            and ECX,15
.L_40ed43:

            movzx EAX,BYTE PTR [RSP+13]
            movzx EDX,BYTE PTR [RSP+11]
            cmp BL,CL
            cmovbe R15D,EBP
            cmovbe R12,R14
            cmovbe EAX,EDX
            mov BYTE PTR [RSP+13],AL
.L_40ed5e:

            mov R14,QWORD PTR [R14+24]
            test R14,R14
            je .L_40edc0
.L_40ed67:

            mov RSI,R14
            mov RDI,R13
            call .L_410360

            cmp BYTE PTR [R14+16],AL
            mov EBP,EAX
            movzx EBX,BYTE PTR [RSP+12]
            ja .L_40ed93

            movzx EBX,BYTE PTR [R14+17]
            test BL,4
            je .L_40ee58

            shr BL,3
            and EBX,15
.L_40ed93:

            mov RDI,R14
            call .L_4100b0

            test AL,AL
            jne .L_40ed5e

            test R12,R12
            jne .L_40ece0
.L_40eda8:

            movzx EAX,BYTE PTR [RSP+11]
            mov R15D,EBP
            mov R12,R14
            mov BYTE PTR [RSP+13],AL
.L_40edb7:

            mov R14,QWORD PTR [R14+24]
            test R14,R14
            jne .L_40ed67
.L_40edc0:

            mov EBX,R15D
            mov R15,QWORD PTR [RSP+16]
            mov R15,QWORD PTR [R15+32]
            test R15,R15
            jne .L_40eca8
.L_40edd5:

            movzx EAX,BYTE PTR [RSP+13]
            mov R14,R12
            mov BYTE PTR [RSP+11],AL
.L_40ede1:

            movzx EDX,BYTE PTR [RSP+11]
            mov RAX,QWORD PTR [RSP+24]
            mov BYTE PTR [RAX+36],DL
            add RSP,40
.L_40edf2:

            mov RAX,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40ee00:

            test DIL,DIL
            je .L_40ef88

            shr CL,3
            and ECX,15
.L_40ee0f:

            movzx EAX,BYTE PTR [R12+17]
            test AL,4
            je .L_40ef20

            mov ESI,EAX
            shr SIL,3
            and ESI,15
            cmp SIL,CL
            jae .L_40eea0
.L_40ee2b:

            shr AL,3
            and EAX,15
.L_40ee31:

            movzx EDX,BYTE PTR [RSP+13]
            movzx ECX,BYTE PTR [RSP+11]
            cmp BL,AL
            cmova R15D,EBP
            cmova R12,R14
            cmova EDX,ECX
            mov BYTE PTR [RSP+13],DL
            jmp .L_40ed5e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ee58:

            mov RDI,R14
            call .L_410210

            mov EBX,EAX
            jmp .L_40ed93
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ee70:

            mov RDI,R12
            mov BYTE PTR [RSP+15],SIL
            call .L_410210

            movzx ESI,BYTE PTR [RSP+15]
            jmp .L_40ed1d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ee90:

            mov RDI,R14
            call .L_410210

            mov ESI,EAX
            jmp .L_40ed09
          .byte 0x90
.L_40eea0:

            shr AL,3
            and EAX,15
            cmp AL,3
            je .L_40ef53
.L_40eeae:

            test BYTE PTR [R14+17],1
            je .L_40eec1

            test BYTE PTR [R12+17],1
            je .L_40eda8
.L_40eec1:

            mov RAX,QWORD PTR [RSP+24]
            movzx EDX,BYTE PTR [RSP+11]
            movzx EAX,BYTE PTR [RAX+36]
            test AL,AL
            setne CL
            cmp AL,DL
            sete AL
            test CL,AL
            je .L_40eeea

            movzx EAX,BYTE PTR [RSP+13]
            cmp DL,AL
            jne .L_40eda8
.L_40eeea:

            cmp BPL,R15B
            jbe .L_40ed5e

            movzx EAX,BYTE PTR [RSP+11]
            mov R15D,EBP
            mov R12,R14
            mov BYTE PTR [RSP+13],AL
            jmp .L_40edb7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ef10:

            mov RDI,R14
            call .L_410210

            mov ECX,EAX
            jmp .L_40ed43
          .byte 0x90
.L_40ef20:

            mov RDI,R12
            mov BYTE PTR [RSP+15],CL
            call .L_410210

            movzx ECX,BYTE PTR [RSP+15]
            cmp AL,CL
            movzx EAX,BYTE PTR [R12+17]
            jb .L_40efa0

            test AL,4
            jne .L_40eea0

            mov RDI,R12
            call .L_410210

            cmp AL,3
            jne .L_40eeae
.L_40ef53:

            cmp BL,3
            mov RDI,R12
            ja .L_40ef5e

            mov RDI,R14
.L_40ef5e:

            call .L_410070

            movzx EDX,BYTE PTR [RSP+13]
            movzx ECX,BYTE PTR [RSP+11]
            test AL,AL
            cmovne R15D,EBP
            cmovne R12,R14
            cmovne EDX,ECX
            mov BYTE PTR [RSP+13],DL
            jmp .L_40ed5e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ef88:

            mov RDI,R14
            call .L_410210

            mov ECX,EAX
            jmp .L_40ee0f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40efa0:

            test AL,4
            jne .L_40ee2b

            mov RDI,R12
            call .L_410210

            jmp .L_40ee31
.L_40efb5:

            mov BYTE PTR [RSP+11],0
            xor R14D,R14D
            jmp .L_40ede1
.L_40efc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40efd0:

            push R12
            push RBP
            mov R8D,16425
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,112
.L_40efe4:

            movdqu XMM0,XMMWORD PTR [RCX]
            lea RSI,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov EAX,1023
            mov QWORD PTR [RSP+66],0
            mov DWORD PTR [RSP],96
            movdqu XMM0,XMMWORD PTR [RCX+32]
            mov ECX,4294966272
            mov WORD PTR [RSP+6],R8W
            movaps XMMWORD PTR [RSP+80],XMM0
            mov DWORD PTR [RSI+26],0
            mov WORD PTR [RSP+64],AX
            movzx EAX,WORD PTR [RDX+4]
            mov WORD PTR [RSP+78],CX
            movdqa XMM0,XMMWORD PTR [RSP+64]
            movups XMMWORD PTR [RSP+24],XMM0
            rol AX,8
            add EAX,40
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_40ec40

            mov RDX,RAX
            mov EAX,20
            test RDX,RDX
            je .L_40f08c

            movdqu XMM0,XMMWORD PTR [RDX]
            mov R12,RSP
            mov RSI,RBX
            mov RDX,R12
            mov RDI,RBP
            movups XMMWORD PTR [RSP+8],XMM0
            call .L_40e260

            test EAX,EAX
            je .L_40f0a8
.L_40f08c:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40f0ba

            add RSP,112
.L_40f0a0:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40f0a8:

            mov EDX,40
            mov RSI,R12
            mov RDI,RBX
            call .L_403df0

            jmp .L_40f08c
.L_40f0ba:

            call __stack_chk_fail@PLT
.L_40f0bf:

            nop
.L_40f0c0:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RDX
            mov RDI,RBX
            mov RBP,RSI
            sub RSP,72
.L_40f0dd:

            movzx R14D,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+16],96
            mov BYTE PTR [RSP+22],CL
            mov EAX,R14D
            rol AX,8
            mov WORD PTR [RSP+20],AX
            movzx EAX,BYTE PTR [RDX+37]
            mov EDX,64
            test AL,AL
            cmove EAX,EDX
            mov BYTE PTR [RSP+23],AL
            call .L_40ff00

            test AL,AL
            jne .L_40f135

            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            je .L_40f248
.L_40f135:

            mov RSI,RBX
            mov RDI,R12
            call .L_40ec40

            test RAX,RAX
            je .L_40f280

            movdqu XMM0,XMMWORD PTR [RAX]
            movups XMMWORD PTR [RSP+24],XMM0
.L_40f152:

            lea R13,QWORD PTR [RSP+16]
            lea RAX,QWORD PTR [R13+24]
            movdqu XMM0,XMMWORD PTR [RBX+16]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            movups XMMWORD PTR [RSP+40],XMM0
            call .L_40ff50

            test AL,AL
            je .L_40f260
.L_40f179:

            cmp BYTE PTR [RBX+36],0
            mov R8D,2
            je .L_40f1b0
.L_40f185:

            lea RAX,QWORD PTR [RBX+16]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_410290

            test AL,AL
            je .L_40f1e0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            call .L_40e260

            test EAX,EAX
            mov R8D,EAX
            je .L_40f1e0

            nop
            nop
.L_40f1b0:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R8D
            jne .L_40f395

            add RSP,72
.L_40f1cb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f1e0:

            mov EDX,40
            mov RSI,R13
            mov RDI,RBP
            call .L_403df0

            test EAX,EAX
            mov R8D,EAX
            jne .L_40f1b0

            lea RSI,QWORD PTR [R13+24]
            lea RDI,QWORD PTR [R13+8]
            movzx EDX,R14W
            mov ECX,R15D
            mov DWORD PTR [RSP+12],EAX
            call .L_40e200

            cmp R15D,17
            mov R8D,DWORD PTR [RSP+12]
            je .L_40f2e0

            cmp R15D,58
            jne .L_40f29a

            lea RDI,QWORD PTR [R12+88]
            movzx EDX,AX
            mov RSI,RBP
            mov DWORD PTR [RSP+12],R8D
            call .L_43e150

            test EAX,EAX
            je .L_40f290
.L_40f23d:

            mov R8D,EAX
            jmp .L_40f1b0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40f248:

            movdqu XMM0,XMMWORD PTR [RBX]
            movups XMMWORD PTR [RSP+24],XMM0
            jmp .L_40f152
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f260:

            mov RDI,QWORD PTR [RSP]
            call .L_410270

            test AL,AL
            jne .L_40f179

            jmp .L_40f185
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f280:

            mov R8D,20
            jmp .L_40f1b0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f290:

            mov R8D,DWORD PTR [RSP+12]
.L_40f295:

            mov DWORD PTR [RSP+12],R8D
.L_40f29a:

            mov RDI,QWORD PTR [RSP]
            call .L_4102b0

            test AL,AL
            mov R8D,DWORD PTR [RSP+12]
            jne .L_40f308
.L_40f2ac:

            movzx EAX,BYTE PTR [RBX+36]
            lea RDI,QWORD PTR [R12+32]
            mov RSI,RBP
            mov DWORD PTR [RSP],R8D
            mov BYTE PTR [RBP+75],AL
            call .L_404a60

            lea RDI,QWORD PTR [R12+64]
            call .L_405290

            mov R8D,DWORD PTR [RSP]
            jmp .L_40f1b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f2e0:

            lea RDI,QWORD PTR [R12+104]
            movzx EDX,AX
            mov RSI,RBP
            mov DWORD PTR [RSP+12],R8D
            call .L_412010

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+12]
            jne .L_40f23d

            jmp .L_40f295
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f308:

            mov RDI,R12
            mov DWORD PTR [RSP],R8D
            call .L_4334e0

            lea RSI,QWORD PTR [R13+24]
            lea RDI,QWORD PTR [RAX+15288]
            call .L_425990

            test AL,AL
            mov R8D,DWORD PTR [RSP]
            jne .L_40f358
.L_40f32c:

            mov RCX,RBX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [RSP],R8D
            call .L_40efd0

            test EAX,EAX
            mov R8D,DWORD PTR [RSP]
            je .L_40f2ac

            jmp .L_40f23d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f358:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            mov DWORD PTR [RSP],R8D
            call .L_404070

            test RAX,RAX
            mov R8D,DWORD PTR [RSP]
            je .L_40f32c

            movzx EDX,BYTE PTR [RBX+36]
            lea RDI,QWORD PTR [R12+32]
            mov RSI,RAX
            mov BYTE PTR [RAX+75],DL
            call .L_404a60

            lea RDI,QWORD PTR [R12+64]
            call .L_405290

            mov R8D,DWORD PTR [RSP]
            jmp .L_40f32c
.L_40f395:

            call __stack_chk_fail@PLT
.L_40f39a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40f3a0:

            push R12
            push RBP
            push RBX
            mov R12,QWORD PTR [RDI+24]
            test R12,R12
            je .L_40f3f2

            mov RBP,RSI
.L_40f3b0:

            mov RBX,QWORD PTR [R12+8]
            test RBX,RBX
            jne .L_40f3c9

            jmp .L_40f3e8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f3c0:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_40f3e8
.L_40f3c9:

            mov RSI,RBP
            mov RDI,RBX
            call .L_410360

            cmp BYTE PTR [RBX+16],AL
            ja .L_40f3c0

            movzx EAX,BYTE PTR [R12+24]
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f3e8:

            mov R12,QWORD PTR [R12+32]
            test R12,R12
            jne .L_40f3b0
.L_40f3f2:

            pop RBX
            mov EAX,4294967295
            pop RBP
            pop R12
            ret 
.L_40f3fc:

            nop
            nop
            nop
            nop
.L_40f400:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov RBX,RSI
            call .L_40ff70

            test AL,AL
            je .L_40f420
.L_40f416:

            movzx EAX,BYTE PTR [RBX+36]
.L_40f41a:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_40f420:

            mov RDI,RBX
            call .L_40ff50

            test AL,AL
            mov R12D,EAX
            jne .L_40f416

            mov RSI,RBX
            mov RDI,RBP
            call .L_40f3a0

            test AL,AL
            jg .L_40f41a

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RBP+80]
            mov RDX,RBX
            call .L_411130

            test AL,AL
            cmovs EAX,R12D
            jmp .L_40f41a
.L_40f456:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f460:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13D,ECX
            pxor XMM0,XMM0
            mov RBX,RSI
            sub RSP,168
.L_40f481:

            lea RBP,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP],R8
            mov DWORD PTR [RSP+20],R9D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            movaps XMMWORD PTR [RSP+128],XMM0
            call .L_4107b0

            test EAX,EAX
            mov R11D,EAX
            je .L_40f500
.L_40f4c3:

            mov RDI,RBX
            mov DWORD PTR [RSP],R11D
            call .L_403400

            mov R11D,DWORD PTR [RSP]
.L_40f4d3:

            mov RDX,QWORD PTR [RSP+152]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R11D
            jne .L_40f8df

            add RSP,168
.L_40f4f4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_40f500:

            movzx EAX,BYTE PTR [RSP+55]
            lea RSI,QWORD PTR [RBP+24]
            mov BYTE PTR [RSP+132],R13B
            movdqu XMM0,XMMWORD PTR [RSP+56]
            mov RDI,RSI
            mov QWORD PTR [RSP+8],RSI
            movaps XMMWORD PTR [RSP+112],XMM0
            mov BYTE PTR [RSP+133],AL
            mov RAX,QWORD PTR [RSP]
            movdqu XMM0,XMMWORD PTR [RSP+72]
            mov QWORD PTR [RSP+136],RAX
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_40ff70

            test AL,AL
            mov BYTE PTR [RSP+29],AL
            mov RSI,QWORD PTR [RSP+8]
            jne .L_40f680

            mov R15,QWORD PTR [R12+24]
            test R15,R15
            je .L_40f710

            mov QWORD PTR [RSP+8],RSI
            jmp .L_40f57d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40f570:

            mov R15,QWORD PTR [R15+32]
            test R15,R15
            je .L_40f710
.L_40f57d:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_411990

            test AL,AL
            mov R10D,EAX
            je .L_40f570

            mov BYTE PTR [RSP+31],0
            xor R8D,R8D
            mov R9D,1
.L_40f59f:

            mov ESI,40
            mov RDI,RBX
            mov BYTE PTR [RBX+75],R13B
            mov DWORD PTR [RSP+24],R8D
            mov DWORD PTR [RSP+8],R9D
            mov BYTE PTR [RSP+30],R10B
            call .L_4035a0

            movzx EAX,BYTE PTR [RSP+54]
            mov R9D,DWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RSP+46]
            mov R8D,DWORD PTR [RSP+24]
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+46],AL
            call .L_40e9a0

            test EAX,EAX
            mov R11D,EAX
            jne .L_40f4c3

            cmp BYTE PTR [R12],1
            movzx R10D,BYTE PTR [RSP+30]
            je .L_40f611

            movzx ECX,BYTE PTR [RSP+29]
            test R14,R14
            mov EAX,0
            cmovne ECX,EAX
            mov BYTE PTR [RSP+29],CL
.L_40f611:

            test R10B,R10B
            je .L_40f740

            movzx ECX,BYTE PTR [RSP+46]
            cmp CL,41
            je .L_40f89e

            cmp BYTE PTR [RSP+20],0
            lea RBP,QWORD PTR [RSP+96]
            jne .L_40f657

            cmp QWORD PTR [R12+8],0
            je .L_40f657

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40e630

            movzx ECX,BYTE PTR [RSP+46]
            mov R11D,DWORD PTR [RSP]
.L_40f657:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40ea90

            test EAX,EAX
            je .L_40f76f

            mov R11D,EAX
            jmp .L_40f4c3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f680:

            test R14,R14
            je .L_40f7d0

            mov RDI,R14
            call .L_4112a0

            test AL,AL
            mov R10D,EAX
            jne .L_40f7f0

            movzx EAX,BYTE PTR [R14+25]
            xor R9D,R9D
            mov BYTE PTR [RSP+31],AL
.L_40f6a8:

            lea R15,QWORD PTR [RBP+24]
            mov DWORD PTR [RSP+24],R9D
            mov BYTE PTR [RSP+8],R10B
            mov RDI,R15
            call .L_4102b0

            xor R8D,R8D
            test AL,AL
            mov BYTE PTR [RSP+29],AL
            movzx R10D,BYTE PTR [RSP+8]
            mov R9D,DWORD PTR [RSP+24]
            je .L_40f59f

            mov RDI,R12
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+15288]
            mov RSI,R15
            call .L_425990

            movzx R10D,BYTE PTR [RSP+8]
            mov BYTE PTR [RSP+29],AL
            movzx R8D,AL
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_40f59f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f710:

            lea RDI,QWORD PTR [RBP+24]
            call .L_40ff50

            test R14,R14
            mov BYTE PTR [RSP+31],0
            sete DL
            xor EAX,1
            xor R10D,R10D
            or EAX,EDX
            xor R9D,R9D
            movzx R8D,AL
            mov BYTE PTR [RSP+29],AL
            jmp .L_40f59f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f740:

            cmp BYTE PTR [RSP+31],0
            je .L_40f773

            cmp BYTE PTR [RSP+20],0
            jne .L_40f773

            cmp QWORD PTR [R12+8],0
            je .L_40f773

            movzx ECX,BYTE PTR [RSP+46]
            lea RDX,QWORD PTR [RSP+96]
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40e630
.L_40f76f:

            mov R11D,DWORD PTR [RSP]
.L_40f773:

            cmp BYTE PTR [RSP+29],0
            je .L_40f4c3

            lea R13,QWORD PTR [RSP+96]
            mov RDI,R12
            mov RSI,R13
            call .L_40f400

            test AL,AL
            mov EBP,EAX
            jne .L_40f800

            cmp BYTE PTR [RSP+20],0
            jne .L_40f888

            cmp QWORD PTR [R12+8],0
            je .L_40f893

            movzx ECX,BYTE PTR [RSP+46]
            mov RDX,R13
            mov RSI,RBX
            mov RDI,R12
            call .L_40e630

            mov R11D,EAX
            jmp .L_40f4c3
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f7d0:

            mov R8D,1
            xor R9D,R9D
            mov BYTE PTR [RSP+31],0
            xor R10D,R10D
            jmp .L_40f59f
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f7f0:

            mov R9D,1
            mov BYTE PTR [RSP+31],0
            jmp .L_40f6a8
.L_40f800:

            test R14,R14
            movzx EAX,BYTE PTR [RSP+55]
            je .L_40f811

            sub EAX,1
            mov BYTE PTR [RSP+55],AL
.L_40f811:

            test AL,AL
            je .L_40f888

            lea RCX,QWORD PTR [RSP+47]
            mov RDI,RBX
            mov EDX,1
            mov ESI,7
            mov BYTE PTR [RSP+47],AL
            call .L_403b10

            mov RDI,QWORD PTR [R12+24]
            test RDI,RDI
            jne .L_40f849

            jmp .L_40f893
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f840:

            mov RDI,QWORD PTR [RDI+32]
            test RDI,RDI
            je .L_40f893
.L_40f849:

            cmp BPL,BYTE PTR [RDI+24]
            jne .L_40f840

            mov RAX,QWORD PTR [RDI]
            lea RDX,QWORD PTR [RIP+.L_40fdb0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_40f8d5

            add RDI,2256
            mov RSI,RBX
            call .L_414610

            mov R11D,EAX
.L_40f873:

            test R11D,R11D
            je .L_40f4d3

            jmp .L_40f4c3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f888:

            mov R11D,2
            jmp .L_40f4c3
.L_40f893:

            mov R11D,4
            jmp .L_40f4c3
.L_40f89e:

            movzx ESI,WORD PTR [RBX+60]
            mov RDI,RBX
            mov DWORD PTR [RSP+8],R11D
            call .L_403860

            movzx R9D,BYTE PTR [RSP+20]
            mov R8,QWORD PTR [RSP]
            movsx ECX,R13B
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R12
            call .L_40f460

            mov R11D,DWORD PTR [RSP+8]
            jmp .L_40f4d3
.L_40f8d5:

            mov RSI,RBX
            call RAX

            mov R11D,EAX
            jmp .L_40f873
.L_40f8df:

            call __stack_chk_fail@PLT
.L_40f8e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f8f0:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+24]
            mov R12,RSI
            mov RBP,RDX
            sub RSP,40
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_40ff70

            test AL,AL
            jne .L_40f950
.L_40f92a:

            xor EAX,EAX
.L_40f92c:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40fb5e

            add RSP,40
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_40f950:

            mov RDI,RBX
            call .L_410210

            cmp AL,2
            jbe .L_40f92a

            mov RDI,RBX
            call .L_410290

            test AL,AL
            je .L_40fab8

            mov ESI,40
            mov RDI,R12
            call .L_403860

            cmp BYTE PTR [RBP+6],0
            jne .L_40fae0

            lea R14,QWORD PTR [RSP+9]
            xor EAX,EAX
            mov EDX,2
            xor ESI,ESI
            mov RDI,R12
            mov WORD PTR [RSP+11],AX
            mov RCX,R14
            call .L_4038b0

            movzx EBX,BYTE PTR [RSP+10]
            movzx EDX,WORD PTR [RBP+4]
            mov EAX,6
            mov ECX,EBX
            lea EBX,DWORD PTR [RBX*8+8]
            rol DX,8
            cmp BX,DX
            ja .L_40f92c

            add ECX,1
            xor ESI,ESI
            mov EDX,2
            mov BYTE PTR [RSP+10],CL
            mov RDI,R12
            mov RCX,R14
            call .L_403b10

            xor ESI,ESI
            mov EDX,8
            mov RDI,R12
            call .L_403df0

            test EAX,EAX
            jne .L_40f92c

            movzx R14D,BX
            mov R8,R12
            xor EDX,EDX
            mov ECX,R14D
            mov ESI,8
            mov RDI,R12
            lea R15,QWORD PTR [RSP+11]
            call .L_403fa0

            lea RDI,QWORD PTR [R13+120]
            lea RDX,QWORD PTR [RBP+8]
            mov RSI,R15
            call .L_4108f0

            movzx EAX,BYTE PTR [RSP+12]
            mov RCX,R15
            mov ESI,R14D
            mov RDI,R12
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_403b10

            movzx EAX,BYTE PTR [RSP+12]
            lea R13D,DWORD PTR [RAX+2]
            mov EAX,R13D
            and EAX,7
            je .L_40fa9c

            mov R14D,8
            mov EDX,6
            lea RDI,QWORD PTR [RSP+19]
            sub R14D,EAX
            sub EDX,EAX
            mov ECX,5
            mov BYTE PTR [RSP+18],DL
            movzx EDX,R14B
            xor ESI,ESI
            sub RDX,2
            mov BYTE PTR [RSP+17],1
            lea R15,QWORD PTR [RSP+17]
            call __memset_chk@PLT

            movzx ESI,R13B
            movzx EDX,R14B
            mov RCX,R15
            add ESI,EBX
            mov RDI,R12
            movzx ESI,SI
            call .L_403b10
.L_40fa9c:

            movzx EAX,WORD PTR [RBP+4]
            rol AX,8
            add EAX,8
            rol AX,8
            mov WORD PTR [RBP+4],AX
            jmp .L_40faf6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fab8:

            mov RDI,RBX
            call .L_4102b0

            test AL,AL
            jne .L_40fb10
.L_40fac4:

            mov RCX,R14
            mov RDX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_40efd0

            jmp .L_40f92c

            nop
            nop
            nop
            nop
            nop
            nop
.L_40fae0:

            mov RDX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_40e260

            test EAX,EAX
            jne .L_40f92c
.L_40faf6:

            mov EDX,40
            mov RSI,RBP
            mov RDI,R12
            call .L_403df0

            jmp .L_40f92c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40fb10:

            mov RDI,R13
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+15288]
            mov RSI,RBX
            call .L_425990

            test AL,AL
            je .L_40fac4

            movzx ESI,WORD PTR [R12+58]
            mov RDI,R12
            call .L_404070

            test RAX,RAX
            je .L_40fac4

            movsx ECX,BYTE PTR [R14+36]
            mov R9D,1
            xor R8D,R8D
            xor EDX,EDX
            mov RSI,RAX
            mov RDI,R13
            call .L_40f460

            jmp .L_40fac4
.L_40fb5e:

            call __stack_chk_fail@PLT
.L_40fb63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fb70:

            push R12
            mov R12,RDI
            push RBP
            lea RBP,QWORD PTR [RDI+32]
            push RBX
            jmp .L_40fba2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40fb80:

            mov RSI,RAX
            mov RDI,RBP
            call .L_404a80

            movsx ECX,BYTE PTR [RBX+75]
            xor R9D,R9D
            xor R8D,R8D
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_40f460
.L_40fba2:

            mov RDI,RBP
            call .L_404860

            test RAX,RAX
            mov RBX,RAX
            jne .L_40fb80

            pop RBX
            pop RBP
            pop R12
            ret 
.L_40fbb7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fbc0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a90

            add RSP,8
            mov RDI,RAX
            jmp .L_40fb70
.L_40fbda:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40fbe0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            pxor XMM0,XMM0
            sub RSP,136
.L_40fbfe:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_4107b0

            test EAX,EAX
            je .L_40fc68
.L_40fc2e:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_40fc3e:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40fce2

            add RSP,136
.L_40fc59:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40fc68:

            movdqu XMM0,XMMWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RBP+24]
            movzx EAX,BYTE PTR [RSP+23]
            mov BYTE PTR [RSP+100],R15B
            movsx R14D,R15B
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+104],0
            movdqu XMM0,XMMWORD PTR [RSP+40]
            mov BYTE PTR [RSP+101],AL
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_40ff70

            test AL,AL
            je .L_40fcc4

            lea R13,QWORD PTR [RSP+64]
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov RCX,R13
            call .L_40f8f0

            test EAX,EAX
            jne .L_40fc2e
.L_40fcc4:

            mov R9D,1
            xor R8D,R8D
            mov ECX,R14D
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_40f460

            jmp .L_40fc3e
.L_40fce2:

            call __stack_chk_fail@PLT
.L_40fce7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fcf0:

            cmp EDI,60
            ja .L_40fda0

            lea RDX,QWORD PTR [RIP+.L_40fdf8]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40fd10:

            lea RAX,QWORD PTR [RIP+.L_40fdbc]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd20:

            lea RAX,QWORD PTR [RIP+.L_40fdc4]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd30:

            lea RAX,QWORD PTR [RIP+.L_40fdc8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd40:

            lea RAX,QWORD PTR [RIP+.L_40fdcc]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd50:

            lea RAX,QWORD PTR [RIP+.L_40fdd0]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd60:

            lea RAX,QWORD PTR [RIP+.L_40fdd8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd70:

            lea RAX,QWORD PTR [RIP+.L_40fddd]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd80:

            lea RAX,QWORD PTR [RIP+.L_40fde3]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fd90:

            lea RAX,QWORD PTR [RIP+.L_40fde8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fda0:

            lea RAX,QWORD PTR [RIP+.L_40fdf0]
            ret 
.L_40fda8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fdb0:

            add RDI,2256
            jmp .L_414610
.L_40fdbc:
          .string "HopOpts"
.L_40fdc4:
          .string "TCP"
.L_40fdc8:
          .string "UDP"
.L_40fdcc:
          .string "IP6"
.L_40fdd0:
          .string "Routing"
.L_40fdd8:
          .string "Frag"
.L_40fddd:
          .string "ICMP6"
.L_40fde3:
          .string "None"
.L_40fde8:
          .string "DstOpts"
.L_40fdf0:
          .string "Unknown"
.L_40fdf8:
          .long .L_40fd10-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fd20-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fd30-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fd40-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fd50-.L_40fdf8
          .long .L_40fd60-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fda0-.L_40fdf8
          .long .L_40fd70-.L_40fdf8
          .long .L_40fd80-.L_40fdf8
          .long .L_40fd90-.L_40fdf8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40fef0:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            ret 
.L_40fef8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff00:

            mov ESI,DWORD PTR [RDI]
            xor EAX,EAX
            test ESI,ESI
            jne .L_40ff1e

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ff1e

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ff1e

            mov EAX,DWORD PTR [RDI+12]
            test EAX,EAX
            sete AL
.L_40ff1e:

            ret 
.L_40ff20:

            mov ESI,DWORD PTR [RDI]
            xor EAX,EAX
            test ESI,ESI
            jne .L_40ff40

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ff40

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ff40

            cmp DWORD PTR [RDI+12],16777216
            sete AL
.L_40ff40:

            ret 
.L_40ff42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff50:

            xor EAX,EAX
            cmp BYTE PTR [RDI],254
            je .L_40ff60

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ff60:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,4294967232
            cmp AL,128
            sete AL
            ret 
.L_40ff6d:

            nop
            nop
            nop
.L_40ff70:

            cmp BYTE PTR [RDI],255
            sete AL
            ret 
.L_40ff77:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff80:

            xor EAX,EAX
            cmp DWORD PTR [RDI],767
            je .L_40ff90
.L_40ff8a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ff90:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ff8a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ff8a

            cmp DWORD PTR [RDI+12],16777216
            sete AL
            ret 
.L_40ffa9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ffb0:

            xor EAX,EAX
            cmp DWORD PTR [RDI],767
            je .L_40ffc0
.L_40ffba:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ffc0:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ffba

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ffba

            cmp DWORD PTR [RDI+12],33554432
            sete AL
            ret 
.L_40ffd9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ffe0:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_40fff0
.L_40ffea:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40fff0:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ffea

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ffea

            cmp DWORD PTR [RDI+12],16777216
            sete AL
            ret 
.L_410009:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410010:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_410020
.L_41001a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410020:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_41001a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_41001a

            cmp DWORD PTR [RDI+12],33554432
            sete AL
            ret 
.L_410039:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410040:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_410050
.L_41004a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410050:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_41004a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_41004a

            cmp DWORD PTR [RDI+12],4227858432
            sete AL
            ret 
.L_410069:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410070:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_410081

            cmp WORD PTR [RDI+10],65280
            je .L_410088
.L_410081:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410088:

            cmp WORD PTR [RDI+12],254
            jne .L_410081

            movzx EDX,BYTE PTR [RDI+14]
            cmp DL,251
            ja .L_410081

            mov EAX,EDX
            shr AL,1
            xor EAX,1
            and EAX,1
            ret 
.L_4100a4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4100b0:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_4100c1

            cmp WORD PTR [RDI+10],65280
            je .L_4100c8
.L_4100c1:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4100c8:

            cmp WORD PTR [RDI+12],254
            jne .L_4100c1

            cmp BYTE PTR [RDI+14],252
            sete AL
            ret 
.L_4100d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4100e0:

            mov EDX,DWORD PTR [RDI+8]
            xor EAX,EAX
            test EDX,EDX
            jne .L_4100f1

            mov EAX,DWORD PTR [RDI+12]
            test EAX,EAX
            sete AL
.L_4100f1:

            ret 
.L_4100f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410100:

            xor EAX,EAX
            cmp DWORD PTR [RDI+8],-3
            je .L_410110
.L_410108:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410110:

            cmp WORD PTR [RDI+12],-1
            jne .L_410108

            cmp BYTE PTR [RDI+14],255
            jne .L_410108

            movzx EAX,BYTE PTR [RDI+15]
            shr AL,7
            ret 
.L_410125:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410130:

            mov EAX,DWORD PTR [RDI+8]
            test EAX,EAX
            jne .L_410160

            mov EDX,DWORD PTR [RDI+12]
            mov EAX,1
            test EDX,EDX
            je .L_410180
.L_410143:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_410154

            cmp WORD PTR [RDI+10],65280
            je .L_410188
.L_410154:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410160:

            cmp EAX,-3
            jne .L_410143

            cmp WORD PTR [RDI+12],-1
            jne .L_410143

            cmp BYTE PTR [RDI+14],255
            jne .L_410143

            cmp BYTE PTR [RDI+15],0
            mov EAX,1
            jns .L_410143

            jmp .L_410154
          .byte 0x90
.L_410180:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410188:

            cmp WORD PTR [RDI+12],254
            jne .L_410154

            cmp BYTE PTR [RDI+14],252
            sete AL
            ret 
.L_410198:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4101a0:

            lea RAX,QWORD PTR [RDI+8]
            ret 
.L_4101a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4101b0:

            lea RAX,QWORD PTR [RDI+8]
            ret 
.L_4101b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4101c0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+8],RAX
            ret 
.L_4101c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4101d0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+8],RAX
            xor BYTE PTR [RDI+8],2
            ret 
.L_4101dc:

            nop
            nop
            nop
            nop
.L_4101e0:

            mov RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RSI],RAX
            xor BYTE PTR [RSI],2
            ret 
.L_4101eb:

            nop
            nop
            nop
            nop
            nop
.L_4101f0:

            push RBX
            mov RBX,RSI
            lea RSI,QWORD PTR [RDI+8]
            xor EDX,EDX
            mov RDI,RBX
            call .L_408dc0

            xor BYTE PTR [RBX],2
            pop RBX
            ret 
.L_410207:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410210:

            movzx EAX,BYTE PTR [RDI]
            cmp AL,255
            je .L_410260

            cmp AL,254
            je .L_410248
.L_41021b:

            mov ESI,DWORD PTR [RDI]
            mov EAX,14
            test ESI,ESI
            jne .L_410258

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_410258

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_410258

            cmp DWORD PTR [RDI+12],16777216
            mov EDX,0
            cmove EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410248:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,4294967232
            cmp AL,128
            jne .L_41021b

            mov EAX,2
.L_410258:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410260:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,15
            ret 
.L_410268:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410270:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_410280

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410280:

            call .L_410210

            cmp AL,2
            sete AL
            ret 
.L_41028b:

            nop
            nop
            nop
            nop
            nop
.L_410290:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_4102a0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4102a0:

            call .L_410210

            cmp AL,3
            sete AL
            ret 
.L_4102ab:

            nop
            nop
            nop
            nop
            nop
.L_4102b0:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_4102c0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4102c0:

            call .L_410210

            cmp AL,3
            seta AL
            ret 
.L_4102cb:

            nop
            nop
            nop
            nop
            nop
.L_4102d0:

            cmp DL,16
            mov R9D,16
            cmovbe R9D,EDX
            test DL,DL
            je .L_410340

            movzx ECX,BYTE PTR [RDI]
            movzx EAX,BYTE PTR [RSI]
            mov EDX,1
            cmp CL,AL
            je .L_41030b

            jmp .L_410350
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4102f8:

            movzx ECX,BYTE PTR [RDI+RDX*1]
            add RDX,1
            movzx R8D,BYTE PTR [RSI+RDX*1-1]
            cmp CL,R8B
            jne .L_410320
.L_41030b:

            cmp DL,R9B
            lea EAX,DWORD PTR [RDX*8]
            jb .L_4102f8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410320:

            xor ECX,R8D
.L_410323:

            test CL,CL
            js .L_410348

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410330:

            add EAX,1
            add CL,CL
            jns .L_410330

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410340:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410348:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410350:

            xor ECX,EAX
            xor EAX,EAX
            jmp .L_410323
.L_410356:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410360:

            xor EDX,EDX
            xor EAX,EAX
            jmp .L_41037b
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410370:

            add EAX,8
            add RDX,1
            cmp AL,128
            je .L_4103a0
.L_41037b:

            movzx ECX,BYTE PTR [RDI+RDX*1]
            movzx R8D,BYTE PTR [RSI+RDX*1]
            cmp CL,R8B
            je .L_410370

            xor CL,R8B
            js .L_410397

            nop
            nop
.L_410390:

            add EAX,1
            add CL,CL
            jns .L_410390
.L_410397:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4103a0:

            ret 
.L_4103a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4103b0:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RDI+8]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            sete AL
            ret 
.L_4103c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4103d0:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RDI+8]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            setne AL
            ret 
.L_4103e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4103f0:

            pxor XMM0,XMM0
            push RBP
            lea RAX,QWORD PTR [RDI+15]
            push RBX
.L_4103fa:

            sub RDI,1
            mov EBP,1
            xor R8D,R8D
            xor EBX,EBX
            movups XMMWORD PTR [RDI+1],XMM0
            xor R11D,R11D
.L_41040f:

            movzx EDX,BYTE PTR [RSI]
            mov R9D,EDX
            mov ECX,EDX
            and R9D,4294967263
            and ECX,15
            lea R10D,DWORD PTR [R9-65]
            cmp R10B,5
            ja .L_410448

            add ECX,9
.L_41042b:

            shl EBX,4
            movzx EDX,CL
            add R8D,1
            or EBX,EDX
            cmp R8B,4
            ja .L_41045a

            xor EBP,EBP
.L_41043f:

            add RSI,1
            jmp .L_41040f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410448:

            cmp DL,58
            je .L_410468

            test R9B,R9B
            je .L_410468

            sub EDX,48
            cmp DL,9
            jbe .L_41042b
.L_41045a:

            mov EAX,6
            pop RBX
.L_410460:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410468:

            test R8B,R8B
            je .L_4104c8

            lea RDX,QWORD PTR [RDI+2]
            cmp RDX,RAX
            ja .L_41045a

            movzx ECX,BH
            test R9B,R9B
            mov BYTE PTR [RDI+2],BL
            mov BYTE PTR [RDI+1],CL
            mov RDI,RDX
            jne .L_4104e0
.L_410487:

            test R11,R11
            jne .L_41049f

            jmp .L_4104a4
          .byte 0x66
          .byte 0x90
.L_410490:

            sub RDI,1
            movzx EDX,BYTE PTR [RDI+1]
            sub RAX,1
            mov BYTE PTR [RAX+1],DL
.L_41049f:

            cmp R11,RDI
            jb .L_410490
.L_4104a4:

            cmp RAX,RDI
            jbe .L_4104bd

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4104b0:

            sub RAX,1
            mov BYTE PTR [RAX+1],0
            cmp RAX,RDI
            jne .L_4104b0
.L_4104bd:

            xor EAX,EAX
            pop RBX
.L_4104c0:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4104c8:

            cmp DL,58
            jne .L_410487

            test R11,R11
            je .L_4104d7

            test BPL,BPL
            je .L_41045a
.L_4104d7:

            mov R11,RDI
            jmp .L_41043f
          .byte 0x90
.L_4104e0:

            xor R8D,R8D
            xor EBX,EBX
            jmp .L_41043f
.L_4104ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4104f0:

            push RBX
            movzx EAX,WORD PTR [RDI+14]
            mov RBX,RSI
            movzx R9D,WORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_410582]
            movzx ESI,DX
            sub RSP,8
            mov RCX,-1
            mov EDX,1
            rol AX,8
            movzx EAX,AX
            rol R9W,8
            push RAX
            movzx EAX,WORD PTR [RDI+12]
            movzx R9D,R9W
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+10]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+8]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+6]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+4]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+2]
            mov RDI,RBX
            rol AX,8
            movzx EAX,AX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,64
            mov RAX,RBX
            pop RBX
            ret 
.L_410582:
          .string "%x:%x:%x:%x:%x:%x:%x:%x"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4105a0:

            mov DWORD PTR [RDI],0
            ret 
.L_4105a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4105b0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
            movzx EBX,BYTE PTR [RSI+78]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            shr BL,7
            test BL,BL
            je .L_410600
.L_4105d5:

            mov EBX,1
.L_4105da:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_4106ed

            add RSP,104
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410600:

            lea R13,QWORD PTR [RSP+48]
            mov RBP,RSI
            mov R12,RDI
            xor ESI,ESI
            mov EDX,40
            mov RDI,RBP
            mov RCX,R13
            call .L_4038b0

            cmp AX,40
            jne .L_4105da

            add R13,24
            mov RDI,R13
            call .L_40ff50

            test AL,AL
            je .L_4106d8
.L_410637:

            movzx EAX,BYTE PTR [RSP+54]
            cmp AL,6
            je .L_4106a8

            cmp AL,17
            jne .L_4105da

            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,40
            mov RDI,RBP
            call .L_4038b0

            cmp AX,8
            jne .L_4105da

            movzx EAX,WORD PTR [RSP+10]
            rol AX,8
            cmp AX,19788
            je .L_4105d5
.L_410678:

            movzx EDX,WORD PTR [R12]
            cmp AX,DX
            jne .L_41068b

            test DX,DX
            jne .L_4105d5
.L_41068b:

            movzx EDX,WORD PTR [R12+2]
            cmp AX,DX
            sete BL
            test DX,DX
            setne AL
            and EBX,EAX
            jmp .L_4105da
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4106a8:

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,20
            mov ESI,40
            mov RDI,RBP
            call .L_4038b0

            cmp AX,20
            jne .L_4105da

            movzx EAX,WORD PTR [RSP+18]
            rol AX,8
            jmp .L_410678
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4106d8:

            mov RDI,R13
            call .L_410270

            test AL,AL
            jne .L_410637

            jmp .L_4105da
.L_4106ed:

            call __stack_chk_fail@PLT
.L_4106f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410700:

            movzx EAX,WORD PTR [RDI]
            cmp SI,AX
            je .L_410738

            movzx EDX,WORD PTR [RDI+2]
            cmp SI,DX
            je .L_410738

            test AX,AX
            je .L_410740

            test DX,DX
            mov EAX,3
            je .L_410728

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410728:

            mov EAX,1
.L_41072d:

            mov WORD PTR [RDI+RAX*2],SI
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410738:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410740:

            xor EAX,EAX
            jmp .L_41072d
.L_410744:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410750:

            cmp SI,WORD PTR [RDI]
            movzx EAX,WORD PTR [RDI+2]
            je .L_410768

            cmp AX,SI
            je .L_41076b

            mov EAX,23
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410768:

            mov WORD PTR [RDI],AX
.L_41076b:

            xor EAX,EAX
            mov WORD PTR [RDI+2],AX
            xor EAX,EAX
            ret 
.L_410774:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410780:

            mov BYTE PTR [RSI],0
            cmp WORD PTR [RDI],0
            mov RAX,RDI
            je .L_4107a8

            mov BYTE PTR [RSI],1
            cmp WORD PTR [RDI+2],0
            je .L_4107a0

            mov BYTE PTR [RSI],2
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4107a0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4107a8:

            ret 
.L_4107aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4107b0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RCX,RDI
            mov EDX,40
            xor ESI,ESI
            sub RSP,8
.L_4107c3:

            mov RBX,RDI
            mov RDI,RBP
            call .L_4038b0

            cmp AX,40
            mov EDX,6
            jne .L_410801

            movzx EAX,BYTE PTR [RBX]
            and EAX,4294967280
            cmp AL,96
            jne .L_410801

            movzx EAX,WORD PTR [RBX+4]
            rol AX,8
            add EAX,40
            cmp WORD PTR [RBP+58],AX
            jne .L_4107fc

            xor EDX,EDX
            cmp AX,1280
            jbe .L_410801
.L_4107fc:

            mov EDX,6
.L_410801:

            add RSP,8
.L_410805:

            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_41080a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_410810:

            push RBX
            mov EBX,EDX
            mov EAX,EDX
            xor EDX,EDX
            sub RSP,16
            test BL,BL
            je .L_410841

            mov DWORD PTR [RSP+12],ESI
            mov QWORD PTR [RSP],RDI
            call .L_401460

            movzx EAX,AL
            movzx ECX,BL
            mov ESI,DWORD PTR [RSP+12]
            cdq 
            mov RDI,QWORD PTR [RSP]
            idiv ECX
            mov EAX,EBX
            sub EAX,EDX
.L_410841:

            movzx ECX,BYTE PTR [RDI+8]
            mov BYTE PTR [RDI+8],AL
            add ESI,ECX
            add EDX,ESI
            mov DWORD PTR [RDI+4],EDX
            add RSP,16
            pop RBX
            ret 
.L_410855:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410860:

            lea RAX,QWORD PTR [RIP+.L_411040]
            push RBX

            mov RBX,RDI
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov DWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_410fc0]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RDI+32]
            lea RDI,QWORD PTR [RDI+192]
            mov QWORD PTR [RDI-144],RAX
            call .L_404490

            lea RDI,QWORD PTR [RBX+72]
            mov QWORD PTR [RBX+64],0
            mov QWORD PTR [RBX+184],0
            xor EAX,EAX
            and RDI,-8
            sub EBX,EDI
            lea ECX,DWORD PTR [RBX+192]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            pop RBX

            ret 
.L_4108e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4108f0:

            push RBP
            push RBX
            mov EAX,1133
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,8
.L_410901:

            mov WORD PTR [RSI],AX
            mov BYTE PTR [RSI+2],0
            movzx EAX,BYTE PTR [RDI+1]
            lea ECX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+1],CL
            mov BYTE PTR [RSI+3],AL
            mov RSI,QWORD PTR [RDI+56]
            test RSI,RSI
            je .L_410960

            mov RDI,RDX
            call .L_4103b0

            test AL,AL
            jne .L_410950

            movzx EAX,BYTE PTR [RBX+2]
            and EAX,63
            or EAX,64
.L_410934:

            mov BYTE PTR [RBX+2],AL
            movzx EAX,WORD PTR [RBP+2]
            rol AX,8
            mov WORD PTR [RBX+4],AX
            add RSP,8
.L_410947:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410950:

            and BYTE PTR [RBX+2],63
            sub BYTE PTR [RBX+1],2
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_410960:

            mov EAX,64
            jmp .L_410934
.L_410967:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410970:

            push RBX
.L_410971:

            mov R10D,ESI
            lea RAX,QWORD PTR [RDI+64]
            lea R9,QWORD PTR [RDI+192]
            xor ECX,ECX
            jmp .L_410998
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410988:

            test RCX,RCX
            cmove RCX,RAX
.L_41098f:

            add RAX,4
            cmp RAX,R9
            je .L_4109e0
.L_410998:

            cmp BYTE PTR [RAX+3],0
            mov R8,RAX
            je .L_410988

            cmp R10W,WORD PTR [RAX]
            jne .L_41098f

            mov EBX,EDX
            sub BL,BYTE PTR [RAX+2]
            test BL,BL
            jle .L_4109ef
.L_4109b0:

            mov WORD PTR [R8],SI
            mov BYTE PTR [R8+2],DL
            mov RBX,RDI
            mov BYTE PTR [R8+3],5
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            mov ESI,EAX
            mov EDX,1000
            call .L_433770

            xor EAX,EAX
.L_4109d7:

            pop RBX
.L_4109d8:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4109e0:

            test RCX,RCX
            mov EAX,2
            je .L_4109d7

            mov R8,RCX
            jmp .L_4109b0
.L_4109ef:

            mov EAX,2
            pop RBX
            ret 
.L_4109f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410a00:

            push R15
            push R14
            mov R14D,EDX
            push R13
            lea R13,QWORD PTR [RDI+192]
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R13
            mov EBP,ESI
            sub RSP,40
.L_410a20:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+15],0
            mov BYTE PTR [RSP+23],0
            call .L_4045c0

            cmp BYTE PTR [RBX],0
            je .L_410ab8

            test RAX,RAX
            mov R15,RAX
            je .L_410ab8

            lea R12,QWORD PTR [RSP+15]
            jmp .L_410a68
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410a60:

            test RBX,RBX
            mov R15,RBX
            je .L_410ab8
.L_410a68:

            mov RDI,R15
            call .L_403410

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R12
            mov EDX,9
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_4038b0

            cmp BP,WORD PTR [RSP+15]
            jne .L_410a60

            sub R14B,BYTE PTR [RSP+17]
            test R14B,R14B
            jle .L_410ab8

            mov RDI,R13
            mov RSI,R15
            call .L_404690

            mov RDI,R15
            call .L_403400

            nop
            nop
            nop
            nop
            nop
            nop
.L_410ab8:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_410ad7

            add RSP,40
.L_410acc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_410ad7:

            call __stack_chk_fail@PLT
.L_410adc:

            nop
            nop
            nop
            nop
.L_410ae0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R14D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            mov R12D,R8D
            sub RSP,56
.L_410afd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_401240

            cmp BYTE PTR [RBX],0
            mov QWORD PTR [RSP+31],0
            mov BYTE PTR [RSP+39],0
            mov BYTE PTR [RSP+30],0
            jne .L_410b50
.L_410b2a:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_410c96

            add RSP,56
.L_410b42:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410b50:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            mov R13D,EAX
            call .L_404070

            test RAX,RAX
            mov R8,RAX
            je .L_410b2a

            test R12B,R12B
            je .L_410bd8

            mov WORD PTR [RSP+31],R15W
            mov BYTE PTR [RSP+33],R14B
            mov EAX,1
.L_410b7c:

            mov QWORD PTR [RSP+8],R8
            mov BYTE PTR [RSP+34],AL
            call .L_401460

            movzx EDX,BYTE PTR [RSP+39]
            and EAX,63
            mov R8,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RSP+31]
            mov RDI,R8
            add EDX,R13D
            add EDX,EAX
            mov DWORD PTR [RSP+35],EDX
            mov EDX,64
            sub EDX,EAX
            mov BYTE PTR [RSP+39],DL
            mov EDX,9
            call .L_403d80

            test EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            je .L_410c40
.L_410bc6:

            mov RDI,R8
            call .L_403400

            jmp .L_410b2a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410bd8:

            lea R12,QWORD PTR [RSP+30]
            mov EDX,1
            mov ESI,7
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            mov RCX,R12
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+30]
            mov R8,QWORD PTR [RSP+8]
            lea EDX,DWORD PTR [RAX-1]
            cmp AL,1
            mov BYTE PTR [RSP+30],DL
            jbe .L_410bc6

            mov RDI,R8
            mov RCX,R12
            mov EDX,1
            mov ESI,7
            call .L_403b10

            mov WORD PTR [RSP+31],R15W
            mov BYTE PTR [RSP+33],R14B
            xor EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            jmp .L_410b7c
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410c40:

            lea RDI,QWORD PTR [RBX+192]
            mov EDX,1
            mov RSI,R8
            lea RBP,QWORD PTR [RBX+32]
            call .L_4045d0

            cmp RBP,QWORD PTR [RBX+48]
            je .L_410c90

            mov EDX,DWORD PTR [RSP+35]
            mov EAX,DWORD PTR [RBX+40]
            sub EAX,EDX
            mov EBX,EDX
            test EAX,EAX
            jle .L_410b2a
.L_410c71:

            sub EBX,R13D
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,RBP
            call .L_433770

            jmp .L_410b2a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410c90:

            mov EBX,DWORD PTR [RSP+35]
            jmp .L_410c71
.L_410c96:

            call __stack_chk_fail@PLT
.L_410c9b:

            nop
            nop
            nop
            nop
            nop
.L_410ca0:

            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov R13,RDX
            mov RDI,RBX
            sub RSP,40
.L_410cb9:

            movzx ESI,WORD PTR [RSI+60]
            mov EDX,6
            lea RCX,QWORD PTR [RSP+18]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+18],AX
            call .L_4038b0

            cmp AX,1
            jbe .L_410d70

            movzx EDX,BYTE PTR [RSP+20]
            mov EAX,2
            mov ECX,EDX
            and ECX,4294967232
            test DL,DL
            js .L_410d45

            test CL,CL
            je .L_410d60

            movzx ESI,WORD PTR [RSP+22]
.L_410d09:

            movzx EDX,BYTE PTR [RSP+21]
            rol SI,8
            mov RDI,RBP
            movzx ESI,SI
            call .L_410a00

            movzx ESI,WORD PTR [RSP+22]
            movzx EDX,BYTE PTR [RSP+21]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_410970

            test EAX,EAX
            je .L_410d80

            test R12B,R12B
            mov EDX,0
            cmovne EAX,EDX
.L_410d45:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_410daa

            add RSP,40
.L_410d59:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_410d60:

            movzx ESI,WORD PTR [R13+14]
            mov WORD PTR [RSP+22],SI
            jmp .L_410d09
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410d70:

            mov EAX,2
            jmp .L_410d45
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410d80:

            movzx EDX,WORD PTR [RSP+22]
            movzx ECX,BYTE PTR [RSP+21]
            movzx R8D,R12B
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            rol DX,8
            movzx EDX,DX
            call .L_410ae0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_410d45
.L_410daa:

            call __stack_chk_fail@PLT
.L_410daf:

            nop
.L_410db0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,56
.L_410dc6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_401240

            mov EBP,EAX
            lea RAX,QWORD PTR [R13+192]
            mov QWORD PTR [RSP+31],0
            mov BYTE PTR [RSP+39],0
            lea R14,QWORD PTR [RSP+31]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_4045c0

            test RAX,RAX
            mov R15,RAX
            jne .L_410eb3

            jmp .L_410f77
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410e18:

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_404070

            test RAX,RAX
            mov RSI,RAX
            je .L_410e61

            cmp BYTE PTR [RSP+34],1
            jbe .L_410e47

            movzx EAX,BYTE PTR [RAX+78]
            and EAX,4294967235
            or EAX,20
            mov BYTE PTR [RSI+78],AL
.L_410e47:

            mov RDI,R13
            mov QWORD PTR [RSP+8],RSI
            call .L_4334f0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RAX
            call .L_40e7a0
.L_410e61:

            call .L_401460

            movzx EDX,BYTE PTR [RSP+39]
            and EAX,63
            mov ECX,64
            sub ECX,EAX
            mov RDI,R15
            mov BYTE PTR [RSP+39],CL
            mov RCX,R14
            add EDX,EBP
            add EDX,EAX
            movzx EAX,WORD PTR [R15+58]
            mov DWORD PTR [RSP+35],EDX
            mov EDX,9
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403b10

            mov EAX,DWORD PTR [RSP+35]
.L_410ea0:

            sub EAX,EBP
            cmp EBX,EAX
            cmova EBX,EAX
.L_410ea7:

            test R12,R12
            mov R15,R12
            je .L_410f60
.L_410eb3:

            mov RDI,R15
            call .L_403410

            mov R12,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R14
            mov EDX,9
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_4038b0

            mov EAX,DWORD PTR [RSP+35]
            cmp EBP,EAX
            js .L_410ea0

            movzx EAX,BYTE PTR [RSP+34]
            add EAX,1
            cmp AL,BYTE PTR [R13]
            mov BYTE PTR [RSP+34],AL
            jb .L_410e18

            mov RDI,QWORD PTR [RSP]
            mov RSI,R15
            call .L_404690

            movzx EAX,BYTE PTR [RSP+34]
            cmp AL,BYTE PTR [R13]
            jne .L_410fa0

            cmp AL,1
            jbe .L_410f25

            movzx EAX,BYTE PTR [R15+78]
            and EAX,4294967235
            or EAX,20
            mov BYTE PTR [R15+78],AL
.L_410f25:

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403470

            mov RDI,R13
            call .L_4334f0

            mov RSI,R15
            mov RDI,RAX
            mov R15,R12
            call .L_40e7a0

            test R12,R12
            jne .L_410eb3

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410f60:

            cmp EBX,-1
            je .L_410f77

            call .L_401240

            lea RDI,QWORD PTR [R13+32]
            mov EDX,EBX
            mov ESI,EAX
            call .L_433770
.L_410f77:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_410fad

            add RSP,56
.L_410f8b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410fa0:

            mov RDI,R15
            call .L_403400

            jmp .L_410ea7
.L_410fad:

            call __stack_chk_fail@PLT
.L_410fb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410fc0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b40

            add RSP,8
            mov RDI,RAX
            jmp .L_410db0
.L_410fdd:

            nop
            nop
            nop
.L_410fe0:

            lea RAX,QWORD PTR [RDI+67]
            lea RCX,QWORD PTR [RDI+195]
            xor ESI,ESI
            nop
            nop
            nop
.L_410ff0:

            movzx EDX,BYTE PTR [RAX]
            test DL,DL
            je .L_411001

            sub EDX,1
            mov ESI,1
            mov BYTE PTR [RAX],DL
.L_411001:

            add RAX,4
            cmp RAX,RCX
            jne .L_410ff0

            test SIL,SIL
            jne .L_411018

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411018:

            push RBX
            mov RBX,RDI
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_411032:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411040:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b40

            add RSP,8
            mov RDI,RAX
            jmp .L_410fe0
.L_41105a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_411060:

            mov QWORD PTR [RDI],0
            ret 
.L_411068:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411070:

            mov RDX,QWORD PTR [RDI]
            test RDX,RDX
            je .L_411096

            cmp RDX,RSI
            je .L_4110a0

            mov RAX,RDX
            jmp .L_41108d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411088:

            cmp RSI,RAX
            je .L_4110a0
.L_41108d:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_411088
.L_411096:

            mov QWORD PTR [RSI+24],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI],RSI
            ret 
.L_4110a0:

            mov EAX,24
            ret 
.L_4110a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4110b0:

            mov RDX,QWORD PTR [RDI]
            cmp RDX,RSI
            je .L_411110

            test RDX,RDX
            je .L_4110e1

            mov RAX,QWORD PTR [RDX+24]
            cmp RSI,RAX
            jne .L_4110dc

            jmp .L_4110f0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4110d0:

            mov RDX,QWORD PTR [RAX+24]
            cmp RDX,RSI
            je .L_4110f3

            mov RAX,RDX
.L_4110dc:

            test RAX,RAX
            jne .L_4110d0
.L_4110e1:

            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4110f0:

            mov RAX,RDX
.L_4110f3:

            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411110:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI],RAX
            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
.L_411122:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411130:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13D,4294967295
            push RBP
            push RBX
            mov R14,RSI
            mov RBP,RDX
            mov R12D,R13D
            sub RSP,24
.L_411150:

            mov RBX,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_4111a5

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411170:

            mov RSI,RBP
            mov RDI,RBX
            call .L_410360

            movzx EDX,BYTE PTR [RBX+16]
            mov BYTE PTR [RSP+7],AL
            cmp DL,AL
            ja .L_41119c

            jae .L_41118f

            mov BYTE PTR [RSP+7],DL
            mov EAX,EDX
.L_41118f:

            cmp AL,R12B
            jl .L_41119c

            movzx R13D,BYTE PTR [RBX+17]
            mov R12D,EAX
.L_41119c:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            jne .L_411170
.L_4111a5:

            mov RDI,R15
            call .L_4334f0

            mov RBX,QWORD PTR [RAX+24]
            test RBX,RBX
            je .L_4111f1

            lea R15,QWORD PTR [RSP+7]
            nop
            nop
            nop
            nop
            nop
.L_4111c0:

            mov RAX,QWORD PTR [RBX]
            mov RCX,R15
            mov RDX,RBP
            mov RSI,R14
            mov RDI,RBX
            call QWORD PTR [RAX+16]

            test EAX,EAX
            jne .L_4111e8

            movzx EAX,BYTE PTR [RSP+7]
            cmp AL,R12B
            jle .L_4111e8

            movzx R13D,BYTE PTR [RBX+24]
            mov R12D,EAX
.L_4111e8:

            mov RBX,QWORD PTR [RBX+32]
            test RBX,RBX
            jne .L_4111c0
.L_4111f1:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_411213

            add RSP,24
.L_411208:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_411213:

            call __stack_chk_fail@PLT
.L_411218:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411220:

            lea RAX,QWORD PTR [RIP+.L_676d38]
            mov QWORD PTR [RDI+8],0
            mov BYTE PTR [RDI+24],DL
            mov BYTE PTR [RDI+25],0
            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RDI+40]
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RDI+72]
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+104]
            mov QWORD PTR [RDI+128],RAX
            lea RAX,QWORD PTR [RDI+136]
            mov QWORD PTR [RDI+160],RAX
            lea RAX,QWORD PTR [RDI+168]
            mov QWORD PTR [RDI+184],RAX
            lea RAX,QWORD PTR [RDI+192]
            mov QWORD PTR [RDI+208],RAX
            lea RAX,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RDI+16],RAX
            ret 
.L_411292:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4112a0:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+16]
            test RBX,RBX
            je .L_4112e0

            mov RBP,RSI
            jmp .L_4112c1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4112b8:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            je .L_4112e0
.L_4112c1:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4112b8

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4112e0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_4112e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4112f0:

            mov RDX,QWORD PTR [RDI+16]
            lea RCX,QWORD PTR [RIP+.L_676800]
            cmp RDX,RCX
            je .L_411358

            test RDX,RDX
            je .L_411336

            lea RSI,QWORD PTR [RIP+.L_6767c0]
            cmp RDX,RSI
            je .L_411368

            mov RAX,QWORD PTR [RDX+16]
            cmp RAX,RCX
            jne .L_411331

            jmp .L_41136e
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411320:

            cmp RAX,RSI
            je .L_411368

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RCX
            je .L_411378

            mov RAX,RDX
.L_411331:

            test RAX,RAX
            jne .L_411320
.L_411336:

            sub RSP,8

            call .L_433530

            mov ESI,4096
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411358:

            lea RAX,QWORD PTR [RIP+.L_6767c0]
            mov QWORD PTR [RDI+16],RAX
            jmp .L_411336
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411368:

            mov EAX,24
            ret 
.L_41136e:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411378:

            mov QWORD PTR [RAX+16],RSI
            jmp .L_411336
.L_41137e:

            nop
            nop
.L_411380:

            mov RDX,QWORD PTR [RDI+16]
            lea RCX,QWORD PTR [RIP+.L_6767c0]
            cmp RDX,RCX
            je .L_4113f0

            test RDX,RDX
            je .L_4113b1

            mov RAX,QWORD PTR [RDX+16]
            cmp RAX,RCX
            jne .L_4113ac

            jmp .L_4113c0
.L_4113a0:

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RCX
            je .L_4113c8

            mov RAX,RDX
.L_4113ac:

            test RAX,RAX
            jne .L_4113a0
.L_4113b1:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4113c0:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
.L_4113c8:

            lea RSI,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RAX+16],RSI
.L_4113d3:

            sub RSP,8

            call .L_433530

            mov ESI,8192
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
            add RSP,8
            ret 
.L_4113f0:

            lea RAX,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RDI+16],RAX
            jmp .L_4113d3
.L_4113fd:

            nop
            nop
            nop
.L_411400:

            mov RDX,QWORD PTR [RDI+16]
            test RDX,RDX
            je .L_411426

            cmp RDX,RSI
            je .L_411450

            mov RAX,RDX
            jmp .L_41141d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411418:

            cmp RSI,RAX
            je .L_411450
.L_41141d:

            mov RAX,QWORD PTR [RAX+16]
            test RAX,RAX
            jne .L_411418
.L_411426:

            sub RSP,8
            mov QWORD PTR [RSI+16],RDX
            mov QWORD PTR [RDI+16],RSI
            call .L_433530

            mov ESI,4096
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411450:

            mov EAX,24
            ret 
.L_411456:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411460:

            mov RDX,QWORD PTR [RDI+16]
            cmp RDX,RSI
            je .L_411490

            test RDX,RDX
            jne .L_411478

            jmp .L_411481
.L_411470:

            cmp RSI,RAX
            je .L_4114b8

            mov RDX,RAX
.L_411478:

            mov RAX,QWORD PTR [RDX+16]
            test RAX,RAX
            jne .L_411470
.L_411481:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411490:

            mov RAX,QWORD PTR [RDX+16]
            mov QWORD PTR [RDI+16],RAX
.L_411498:

            sub RSP,8
            call .L_433530

            mov ESI,8192
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4114b8:

            mov RAX,QWORD PTR [RSI+16]
            mov QWORD PTR [RDX+16],RAX
            jmp .L_411498
.L_4114c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4114d0:

            movzx ECX,BYTE PTR [RSI]
            mov EAX,23
            cmp CL,1
            ja .L_41150d

            movzx EAX,CL
            lea RAX,QWORD PTR [RAX+RAX*2]
            lea RAX,QWORD PTR [RDI+RAX*8+168]
            nop
            nop
            nop
            nop
.L_4114f0:

            cmp QWORD PTR [RAX+16],RAX
            lea EDI,DWORD PTR [RCX+1]
            jne .L_411510

            add RAX,24
            cmp DIL,2
            mov ECX,1
            jne .L_4114f0

            mov EAX,23
.L_41150d:

            ret 
          .byte 0x90
.L_411510:

            movdqu XMM0,XMMWORD PTR [RAX]
            xor EAX,EAX
            movups XMMWORD PTR [RDX],XMM0
            mov BYTE PTR [RSI],DIL
            ret 
.L_41151d:

            nop
            nop
            nop
.L_411520:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,QWORD PTR [RDI+16]
            mov RBP,RSI
            test RBX,RBX
            jne .L_411541

            jmp .L_411560
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411538:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            je .L_411560
.L_411541:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_411538

            pop RBX
            mov EAX,24
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411560:

            mov RDX,QWORD PTR [R12+184]
            lea RAX,QWORD PTR [R12+168]
            cmp RDX,RAX
            je .L_411598

            mov RDX,QWORD PTR [R12+208]
            lea RCX,QWORD PTR [R12+192]
            mov EAX,3
            cmp RDX,RCX
            je .L_411598

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411598:

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RDI,R12
            movups XMMWORD PTR [RDX],XMM0
            mov RAX,QWORD PTR [R12+16]
            mov QWORD PTR [RDX+16],RAX
            mov QWORD PTR [R12+16],RDX
            call .L_433530

            mov ESI,4096
            mov RDI,RAX
            call .L_402d80

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_4115ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4115d0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_4115da:

            mov RBX,QWORD PTR [RDI+16]
            test RBX,RBX
            je .L_411660

            mov RBP,RSI
            mov R13,RDI
            xor R12D,R12D
            jmp .L_4115ff
          .byte 0x66
          .byte 0x90
.L_4115f0:

            mov RAX,QWORD PTR [RBX+16]
            mov R12,RBX
            test RAX,RAX
            je .L_411660

            mov RBX,RAX
.L_4115ff:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4115f0

            lea RDX,QWORD PTR [R13+168]
            mov EAX,7
            cmp RBX,RDX
            jb .L_411665

            lea RDX,QWORD PTR [R13+216]
            cmp RBX,RDX
            jae .L_411665

            test R12,R12
            mov RAX,QWORD PTR [RBX+16]
            je .L_411670

            mov QWORD PTR [R12+16],RAX
.L_411639:

            mov RDI,R13
            mov QWORD PTR [RBX+16],RBX
            call .L_433530

            mov ESI,8192
            mov RDI,RAX
            call .L_402d80

            add RSP,8
.L_411656:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_411660:

            mov EAX,23
.L_411665:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_411670:

            mov QWORD PTR [R13+16],RAX
            jmp .L_411639
.L_411676:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411680:

            push RBX
            lea RSI,QWORD PTR [RDI+168]
            cmp RSI,QWORD PTR [RDI+184]
            mov RBX,RDI
            je .L_411699

            call .L_4115d0
.L_411699:

            lea RSI,QWORD PTR [RBX+192]
            cmp RSI,QWORD PTR [RBX+208]
            je .L_4116b8

            mov RDI,RBX
            pop RBX
            jmp .L_4115d0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4116b8:

            pop RBX
            ret 
.L_4116ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4116c0:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_4116e6

            cmp RDX,RSI
            je .L_411718

            mov RAX,RDX
            jmp .L_4116dd
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4116d8:

            cmp RSI,RAX
            je .L_411718
.L_4116dd:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_4116d8
.L_4116e6:

            push RBX
            mov RBX,RSI
            mov QWORD PTR [RSI+24],RDX
            mov QWORD PTR [RDI+8],RSI
            call .L_433530

            movzx EDX,BYTE PTR [RBX+17]
            mov RDI,RAX
            shr DL,7
            cmp DL,1
            sbb ESI,ESI
            and ESI,4294967265
            add ESI,32
            call .L_402d80

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411718:

            mov EAX,24
            ret 
.L_41171e:

            nop
            nop
.L_411720:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            je .L_411750

            test RDX,RDX
            jne .L_411738

            jmp .L_411741
.L_411730:

            cmp RSI,RAX
            je .L_411780

            mov RDX,RAX
.L_411738:

            mov RAX,QWORD PTR [RDX+24]
            test RAX,RAX
            jne .L_411730
.L_411741:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411750:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI+8],RAX
.L_411758:

            push RBX
            mov RBX,RSI
            call .L_433530

            movzx EDX,BYTE PTR [RBX+17]
            mov RDI,RAX
            shr DL,7
            cmp DL,1
            sbb ESI,ESI
            and ESI,4294967234
            add ESI,64
            call .L_402d80

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x90
.L_411780:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDX+24],RAX
            jmp .L_411758
.L_41178a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_411790:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_411797:

            mov RDI,RSI
            mov RBP,RSI
            call .L_40ff50

            test AL,AL
            jne .L_411820

            mov RBX,QWORD PTR [R12+8]
            test RBX,RBX
            jne .L_4117c1

            jmp .L_411830
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4117b8:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_411830
.L_4117c1:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4117b8

            lea RAX,QWORD PTR [R12+40]
            cmp RBX,RAX
            jb .L_411820

            add R12,168
            cmp RBX,R12
            jae .L_411820

            movzx EAX,BYTE PTR [RBP+16]
            mov BYTE PTR [RBX+16],AL
            movzx EAX,BYTE PTR [RBX+17]
            movzx EDX,BYTE PTR [RBP+17]
            and EAX,4294967294
            and EDX,1
            or EAX,EDX
            mov BYTE PTR [RBX+17],AL
            movzx EDX,BYTE PTR [RBP+17]
            and EAX,4294967293
            and EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+17],AL
            xor EAX,EAX
            pop RBX
.L_411812:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411820:

            pop RBX
            mov EAX,7
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411830:

            lea RAX,QWORD PTR [R12+40]
            lea RDX,QWORD PTR [R12+168]
.L_41183d:

            cmp QWORD PTR [RAX+24],RAX
            je .L_411860

            add RAX,32
            cmp RAX,RDX
            jne .L_41183d

            pop RBX
            mov EAX,3
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411860:

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RDI,R12
            movups XMMWORD PTR [RAX],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movups XMMWORD PTR [RAX+16],XMM0
            mov RDX,QWORD PTR [R12+8]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [R12+8],RAX
            call .L_433530

            mov ESI,1
            mov RDI,RAX
            call .L_402d80

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_41189b:

            nop
            nop
            nop
            nop
            nop
.L_4118a0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_4118aa:

            mov RBX,QWORD PTR [RDI+8]
            test RBX,RBX
            je .L_411930

            mov RBP,RSI
            mov R13,RDI
            xor R12D,R12D
            jmp .L_4118cf
          .byte 0x66
          .byte 0x90
.L_4118c0:

            mov RAX,QWORD PTR [RBX+24]
            mov R12,RBX
            test RAX,RAX
            je .L_411930

            mov RBX,RAX
.L_4118cf:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4118c0

            lea RDX,QWORD PTR [R13+40]
            mov EAX,7
            cmp RBX,RDX
            jb .L_411935

            lea RDX,QWORD PTR [R13+168]
            cmp RBX,RDX
            jae .L_411935

            test R12,R12
            mov RAX,QWORD PTR [RBX+24]
            je .L_411940

            mov QWORD PTR [R12+24],RAX
.L_411906:

            mov RDI,R13
            mov QWORD PTR [RBX+24],RBX
            call .L_433530

            mov ESI,2
            mov RDI,RAX
            call .L_402d80

            add RSP,8
.L_411923:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411930:

            mov EAX,23
.L_411935:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_411940:

            mov QWORD PTR [R13+8],RAX
            jmp .L_411906
.L_411946:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411950:

            push R12
            lea R12,QWORD PTR [RDI+168]
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+40]
            mov RBP,RDI
.L_411962:

            cmp QWORD PTR [RBX+24],RBX
            je .L_411973

            mov RSI,RBX
            mov RDI,RBP
            call .L_4118a0
.L_411973:

            add RBX,32
            cmp RBX,R12
            jne .L_411962

            pop RBX
            pop RBP
            pop R12
            ret 
.L_411981:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411990:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+8]
            test RBX,RBX
            je .L_4119d0

            mov RBP,RSI
            jmp .L_4119b1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4119a8:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_4119d0
.L_4119b1:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4119a8

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4119d0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_4119d9:
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4119e0:
          .string "N2ot15InstanceLocatorE"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411a00:

            xor R13B,BYTE PTR [RDI+116]
            xor ECX,DWORD PTR [RCX+112]
            xor EAX,1769235790
            add R15B,R15B
            add EAX,DWORD PTR [RAX]
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            cld 
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
# WARNING: found overlapping blocks at address 117e6

.L_411a30:

            mov QWORD PTR [RDI+56],RSI
            ret 
.L_411a35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411a40:

            push RBX
            mov RDI,QWORD PTR [RDI+56]
            mov EBX,ESI
            call .L_4334f0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40e1d0
.L_411a5b:

            nop
            nop
            nop
            nop
            nop
.L_411a60:

            pxor XMM0,XMM0
            mov RCX,QWORD PTR [RDI+56]
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+36],0
            mov QWORD PTR [RDI+40],RSI
            mov QWORD PTR [RDI+48],RDX
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            mov RDX,QWORD PTR [RCX+8]
            test RDX,RDX
            je .L_411aae

            cmp RDI,RDX
            je .L_411ab6

            mov RAX,RDX
            jmp .L_411aa5
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411aa0:

            cmp RDI,RAX
            je .L_411ab6
.L_411aa5:

            mov RAX,QWORD PTR [RAX+64]
            test RAX,RAX
            jne .L_411aa0
.L_411aae:

            mov QWORD PTR [RDI+64],RDX
            mov QWORD PTR [RCX+8],RDI
.L_411ab6:

            xor EAX,EAX
            ret 
.L_411ab9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411ac0:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            mov EAX,DWORD PTR [RSI+16]
            test AX,AX
            mov DWORD PTR [RDI+16],EAX
            jne .L_411aef

            mov RCX,QWORD PTR [RDI+56]
            mov ESI,4294950912
            movzx EAX,WORD PTR [RCX]
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ESI
            mov WORD PTR [RCX],DX
            mov WORD PTR [RDI+16],AX
.L_411aef:

            xor EAX,EAX
            ret 
.L_411af2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411b00:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+20],XMM0
            mov EAX,DWORD PTR [RSI+16]
            mov DWORD PTR [RDI+36],EAX
            xor EAX,EAX
            ret 
.L_411b11:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411b20:

            mov RAX,QWORD PTR [RDI+56]
            mov RDX,QWORD PTR [RAX+8]
            cmp RDI,RDX
            je .L_411b90

            test RDX,RDX
            je .L_411b51

            mov RAX,QWORD PTR [RDX+64]
            cmp RDI,RAX
            jne .L_411b4c

            jmp .L_411b78
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411b40:

            mov RDX,QWORD PTR [RAX+64]
            cmp RDI,RDX
            je .L_411b80

            mov RAX,RDX
.L_411b4c:

            test RAX,RAX
            jne .L_411b40
.L_411b51:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+64],0
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+36],0
            xor EAX,EAX
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411b78:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
.L_411b80:

            mov RDX,QWORD PTR [RDI+64]
            mov QWORD PTR [RAX+64],RDX
            jmp .L_411b51
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411b90:

            mov RDX,QWORD PTR [RDI+64]
            mov QWORD PTR [RAX+8],RDX
            jmp .L_411b51
.L_411b9a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_411ba0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,80
.L_411bae:

            movdqu XMM0,XMMWORD PTR [RDX]
            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40ff00

            test AL,AL
            je .L_411bf5

            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+16],XMM0
.L_411bf5:

            cmp WORD PTR [RBX+16],0
            jne .L_411c19

            mov RCX,QWORD PTR [RBX+56]
            mov ESI,4294950912
            movzx EAX,WORD PTR [RCX]
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ESI
            mov WORD PTR [RCX],DX
            mov WORD PTR [RBX+16],AX
.L_411c19:

            lea RDI,QWORD PTR [RBP+16]
            call .L_40ff00

            test AL,AL
            jne .L_411ce0
.L_411c2a:

            movzx EAX,WORD PTR [RSP+50]
            test AX,AX
            jne .L_411c46

            movzx EAX,WORD PTR [RBX+36]
            test AX,AX
            je .L_411cd0

            mov WORD PTR [RSP+50],AX
.L_411c46:

            rol AX,8
            movzx EDX,WORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+8]
            mov WORD PTR [RSP+10],AX
            movzx EAX,WORD PTR [R12+58]
            mov RDI,R12
            rol DX,8
            add EAX,8
            mov WORD PTR [RSP+8],DX
            mov EDX,8
            rol AX,8
            mov WORD PTR [RSP+12],AX
            xor EAX,EAX
            mov WORD PTR [RSP+14],AX
            call .L_403df0

            test EAX,EAX
            je .L_411ca8
.L_411c8b:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_411cfc

            add RSP,80
.L_411c9f:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411ca8:

            xor ESI,ESI
            mov RDI,R12
            call .L_4035a0

            mov RDI,QWORD PTR [RBX+56]
            call .L_4334f0

            mov ECX,17
            mov RDX,RBP
            mov RSI,R12
            mov RDI,RAX
            call .L_40f0c0

            jmp .L_411c8b
.L_411cd0:

            mov EAX,7
            jmp .L_411c8b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411ce0:

            lea RDI,QWORD PTR [RBX+20]
            call .L_40ff00

            test AL,AL
            jne .L_411cd0

            movdqu XMM0,XMMWORD PTR [RBX+20]
            movaps XMMWORD PTR [RSP+32],XMM0
            jmp .L_411c2a
.L_411cfc:

            call __stack_chk_fail@PLT
.L_411d01:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411d10:

            mov EAX,4294950912
            mov QWORD PTR [RDI+8],0
            mov WORD PTR [RDI],AX
            ret 
.L_411d21:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411d30:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_411d56

            cmp RDX,RSI
            je .L_411d5e

            mov RAX,RDX
            jmp .L_411d4d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411d48:

            cmp RSI,RAX
            je .L_411d5e
.L_411d4d:

            mov RAX,QWORD PTR [RAX+64]
            test RAX,RAX
            jne .L_411d48
.L_411d56:

            mov QWORD PTR [RSI+64],RDX
            mov QWORD PTR [RDI+8],RSI
.L_411d5e:

            xor EAX,EAX
            ret 
.L_411d61:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411d70:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            je .L_411dd0

            test RDX,RDX
            je .L_411da1

            mov RAX,QWORD PTR [RDX+64]
            cmp RSI,RAX
            jne .L_411d9c

            jmp .L_411db0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411d90:

            mov RDX,QWORD PTR [RAX+64]
            cmp RSI,RDX
            je .L_411db3

            mov RAX,RDX
.L_411d9c:

            test RAX,RAX
            jne .L_411d90
.L_411da1:

            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411db0:

            mov RAX,RDX
.L_411db3:

            mov RDX,QWORD PTR [RSI+64]
            mov QWORD PTR [RAX+64],RDX
            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411dd0:

            mov RAX,QWORD PTR [RSI+64]
            mov QWORD PTR [RDI+8],RAX
            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
.L_411de3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411df0:

            movzx EAX,WORD PTR [RDI]
            mov ECX,4294950912
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ECX
            mov WORD PTR [RDI],DX
            ret 
.L_411e06:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411e10:

            push RBX
            mov EBX,ESI
            call .L_4334f0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40e1d0
.L_411e27:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411e30:

            push R12
            push RBP
            mov R12D,ECX
            push RBX
            mov RBP,RDX
            mov RBX,RSI
            call .L_4334f0

            mov ECX,R12D
            mov RDX,RBP
            mov RSI,RBX
            pop RBX
            pop RBP
            pop R12
            mov RDI,RAX
            jmp .L_40f0c0
.L_411e57:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411e60:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,16
.L_411e6c:

            movzx ECX,WORD PTR [RSI+58]
            sub CX,WORD PTR [RSI+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp CX,7
            jbe .L_411ef0

            lea R14,QWORD PTR [RDX+16]
            movzx EBX,CX
            mov R12,RDX
            mov RBP,RSI
            mov ECX,17
            mov EDX,EBX
            mov RSI,R12
            mov R13,RDI
            mov RDI,R14
            call .L_40e200

            movzx EDX,WORD PTR [RBP+60]
            movzx ESI,AX
            mov ECX,EBX
            mov RDI,RBP
            call .L_4042c0

            mov EDX,EAX
            mov EAX,2
            cmp DX,-1
            je .L_411f00
.L_411eca:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_411ffe

            add RSP,16
.L_411ee2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411ef0:

            mov EAX,6
            jmp .L_411eca
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411f00:

            movzx ESI,WORD PTR [RBP+60]
            mov RCX,RSP
            mov EDX,8
            mov RDI,RBP
            call .L_4038b0

            cmp AX,8
            jne .L_411ef0

            mov ESI,8
            mov RDI,RBP
            call .L_403530

            movzx EAX,WORD PTR [RSP]
            rol AX,8
            mov WORD PTR [R12+34],AX
            movzx EAX,WORD PTR [RSP+2]
            mov EDX,EAX
            rol DX,8
            mov WORD PTR [R12+32],DX
            mov RBX,QWORD PTR [R13+8]
            test RBX,RBX
            jne .L_411f5d

            jmp .L_411fa1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411f58:

            movzx EAX,WORD PTR [RSP+2]
.L_411f5d:

            rol AX,8
            cmp WORD PTR [RBX+16],AX
            jne .L_411f98

            movzx EAX,BYTE PTR [RBX+18]
            test AL,AL
            je .L_411f76

            cmp AL,BYTE PTR [R12+36]
            jne .L_411f98
.L_411f76:

            mov RDI,R12
            call .L_40ff70

            test AL,AL
            je .L_411fb0
.L_411f82:

            movzx EAX,WORD PTR [RBX+36]
            test AX,AX
            jne .L_411fd0
.L_411f8b:

            mov RDI,QWORD PTR [RBX+48]
            mov RDX,R12
            mov RSI,RBP
            call QWORD PTR [RBX+40]
.L_411f98:

            mov RBX,QWORD PTR [RBX+64]
            test RBX,RBX
            jne .L_411f58
.L_411fa1:

            xor EAX,EAX
            jmp .L_411eca
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411fb0:

            mov RDI,RBX
            call .L_40ff00

            test AL,AL
            jne .L_411f82

            mov RSI,R12
            mov RDI,RBX
            call .L_4103d0

            test AL,AL
            je .L_411f82

            jmp .L_411f98
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_411fd0:

            movzx EDX,WORD PTR [RSP]
            rol DX,8
            cmp AX,DX
            jne .L_411f98

            lea R13,QWORD PTR [RBX+20]
            mov RDI,R13
            call .L_40ff00

            test AL,AL
            jne .L_411f8b

            mov RSI,R14
            mov RDI,R13
            call .L_4103d0

            test AL,AL
            je .L_411f8b

            jmp .L_411f98
.L_411ffe:

            call __stack_chk_fail@PLT
.L_412003:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412010:

            push RBX
            mov RBX,RSI
            mov ESI,EDX
            mov RDI,RBX
            movzx ESI,SI
            sub RSP,16

            movzx ECX,WORD PTR [RBX+58]
            mov WORD PTR [RSP+12],DX
            movzx EDX,WORD PTR [RBX+60]
            sub ECX,EDX
            movzx ECX,CX
            call .L_4042c0

            mov EDX,EAX
            cmp AX,-1
            lea RCX,QWORD PTR [RSP+12]
            not EDX
            mov RDI,RBX
            cmovne EAX,EDX
            mov EDX,2
            rol AX,8
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBX+60]
            lea ESI,DWORD PTR [RAX+6]
            movzx ESI,SI
            call .L_403b10

            add RSP,16

            xor EAX,EAX
            pop RBX
            ret 
.L_41206f:

            nop
.L_412070:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RSI
            mov EDX,40
            sub RSP,56
            movzx ESI,WORD PTR [RSI+60]
            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,40
            je .L_4120d0
.L_4120aa:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_412159

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4120d0:

            lea RBX,QWORD PTR [R13+96]
            xor EBP,EBP
            add R12,24
            jmp .L_4120ec
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4120e0:

            add EBP,1
            add RBX,40
            cmp EBP,10
            je .L_4120aa
.L_4120ec:

            mov EAX,DWORD PTR [RBX+36]
            test EAX,EAX
            je .L_4120e0

            mov RSI,R12
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_4120e0

            movsxd RBP,EBP
            lea RAX,QWORD PTR [R13+130]
            lea RSI,QWORD PTR [R13+530]
            lea RDX,QWORD PTR [RBP+RBP*4]
            lea RCX,QWORD PTR [R13+RDX*8]
            nop
            nop
            nop
.L_412120:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+130]
            jbe .L_412130

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_412130:

            add RAX,40
            cmp RAX,RSI
            jne .L_412120

            lea RAX,QWORD PTR [RBP+RBP*4]
            lea RAX,QWORD PTR [R13+RAX*8]
            mov BYTE PTR [RAX+130],9
            mov DWORD PTR [RAX+132],0
            jmp .L_4120aa
.L_412159:

            call __stack_chk_fail@PLT
.L_41215e:

            nop
            nop
.L_412160:

            cmp BYTE PTR [RCX],1
            je .L_412170
.L_412165:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412170:

            cmp BYTE PTR [RCX+1],0
            jne .L_412165

            jmp .L_412070
.L_41217b:

            nop
            nop
            nop
            nop
            nop
.L_412180:

            push R13
            lea RAX,QWORD PTR [RIP+.L_4134bb]
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R13,QWORD PTR [RDI+32]
            lea R12,QWORD PTR [RDI+64]
            lea RBP,QWORD PTR [RDI+496]
            sub RSP,8
.L_4121a3:

            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_413010]
            lea RDX,QWORD PTR [RBX+130]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_4134c0]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_413390]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_4134c5]
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_412dc0]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RIP+.L_412160]
            mov QWORD PTR [RBX+80],RDI
            mov QWORD PTR [RDI+88],0
            mov QWORD PTR [RDI+496],RAX
            lea RAX,QWORD PTR [RIP+.L_413480]
            mov QWORD PTR [RBX+504],RDI
            mov QWORD PTR [RDI+512],0
            mov DWORD PTR [RDI+528],0
            mov QWORD PTR [RDI+520],RAX
            lea RAX,QWORD PTR [RDI+520]
            mov QWORD PTR [RDI+96],0
            mov QWORD PTR [RDI+488],0
            lea RDI,QWORD PTR [RDI+104]
            mov QWORD PTR [RDI+432],RAX
            mov EAX,EBX
            and RDI,-8
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+496]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            nop
            nop
            nop
            nop
            nop
.L_412280:

            mov BYTE PTR [RDX],AL
            add EAX,1
            add RDX,40
            cmp AL,10
            jne .L_412280

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,R13
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,R12
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            mov RDI,RAX
            call .L_4334f0

            add RSP,8
.L_4122e6:

            mov RSI,RBP
            lea RDI,QWORD PTR [RAX+88]
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_43dcc0
.L_4122f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412300:

            mov RDX,RDI
            mov QWORD PTR [RDI+96],0
            mov QWORD PTR [RDI+488],0
            lea RDI,QWORD PTR [RDI+104]
            mov EAX,EDX
            and RDI,-8
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+496]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [RDX+130]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412340:

            mov BYTE PTR [RDI],AL
            add EAX,1
            add RDI,40
            cmp AL,10
            jne .L_412340

            ret 
.L_41234f:

            nop
.L_412350:

            cmp SIL,9
            mov EAX,7
            ja .L_412390

            movzx EAX,SIL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movdqu XMM0,XMMWORD PTR [RDI+RAX*8+96]
            lea RAX,QWORD PTR [RDI+RAX*8]
            movups XMMWORD PTR [RDX],XMM0
            movzx ECX,WORD PTR [RAX+124]
            mov WORD PTR [RDX+16],CX
            cmp DWORD PTR [RAX+132],2
            movzx EAX,BYTE PTR [RDX+18]
            sete CL
            and EAX,4294967294
            or EAX,ECX
            mov BYTE PTR [RDX+18],AL
            xor EAX,EAX
.L_412390:

            ret 
.L_412392:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4123a0:

            lea RCX,QWORD PTR [RDI+124]
            lea R9,QWORD PTR [RDI+524]
            lea R8,QWORD PTR [RDI+530]
            jmp .L_4123c1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4123b8:

            add RCX,40
            cmp RCX,R9
            je .L_412402
.L_4123c1:

            movzx EAX,WORD PTR [RCX]
            sar EAX,10
            cmp SIL,AL
            jne .L_4123b8

            lea RAX,QWORD PTR [RDI+130]
            nop
            nop
            nop
            nop
            nop
.L_4123d8:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+6]
            jbe .L_4123e5

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_4123e5:

            add RAX,40
            cmp RAX,R8
            jne .L_4123d8

            mov BYTE PTR [RCX+6],9
            mov DWORD PTR [RCX+8],0
            add RCX,40
            cmp RCX,R9
            jne .L_4123c1
.L_412402:

            ret 
.L_412404:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412410:

            lea RCX,QWORD PTR [RDI+124]
            lea R9,QWORD PTR [RDI+524]
            lea R8,QWORD PTR [RDI+530]
            jmp .L_412431
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_412428:

            add RCX,40
            cmp RCX,R9
            je .L_41246a
.L_412431:

            cmp WORD PTR [RCX],SI
            jne .L_412428

            lea RAX,QWORD PTR [RDI+130]
            nop
            nop
            nop
.L_412440:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+6]
            jbe .L_41244d

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_41244d:

            add RAX,40
            cmp R8,RAX
            jne .L_412440

            mov BYTE PTR [RCX+6],9
            mov DWORD PTR [RCX+8],0
            add RCX,40
            cmp RCX,R9
            jne .L_412431
.L_41246a:

            ret 
.L_41246c:

            nop
            nop
            nop
            nop
.L_412470:

            lea RDX,QWORD PTR [RDI+96]
            lea RCX,QWORD PTR [RDI+496]
            xor EAX,EAX
            jmp .L_41249a
          .byte 0x90
.L_412480:

            test RAX,RAX
            je .L_4124ab
.L_412485:

            movzx ESI,BYTE PTR [RDX+34]
            cmp BYTE PTR [RAX+34],SIL
            cmovb RAX,RDX
.L_412491:

            add RDX,40
            cmp RDX,RCX
            je .L_4124b7
.L_41249a:

            cmp DWORD PTR [RDX+36],1
            jne .L_412480

            cmp BYTE PTR [RDX+33],0
            je .L_412491

            test RAX,RAX
            jne .L_412485
.L_4124ab:

            mov RAX,RDX
            add RDX,40
            cmp RDX,RCX
            jne .L_41249a
.L_4124b7:

            test RAX,RAX
            je .L_4124f1

            lea RDX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
            nop
            nop
            nop
            nop
.L_4124d0:

            movzx ECX,BYTE PTR [RDX]
            cmp CL,BYTE PTR [RAX+34]
            jbe .L_4124dd

            sub ECX,1
            mov BYTE PTR [RDX],CL
.L_4124dd:

            add RDX,40
            cmp RDI,RDX
            jne .L_4124d0

            mov BYTE PTR [RAX+34],9
            mov DWORD PTR [RAX+36],0
.L_4124f1:

            ret 
.L_4124f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412500:

            lea RAX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
.L_412510:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RSI+34]
            jae .L_41251d

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_41251d:

            add RAX,40
            cmp RAX,RDI
            jne .L_412510

            mov BYTE PTR [RSI+34],0
            ret 
.L_41252b:

            nop
            nop
            nop
            nop
            nop
.L_412530:

            cmp EDI,1
            lea RAX,QWORD PTR [RIP+.L_4134de]
            je .L_412566

            lea RAX,QWORD PTR [RIP+.L_45fd50-313477]
            jb .L_412566

            cmp EDI,2
            lea RAX,QWORD PTR [RIP+.L_4134ee]
            je .L_412566

            lea RAX,QWORD PTR [RIP+.L_413505]
            lea RDX,QWORD PTR [RIP+.L_4134ca]
            cmp EDI,3
            cmovne RAX,RDX
.L_412566:

            ret 
.L_412568:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412570:

            lea RAX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
.L_412580:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RSI+34]
            jbe .L_41258d

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_41258d:

            add RAX,40
            cmp RAX,RDI
            jne .L_412580

            mov BYTE PTR [RSI+34],9
            mov DWORD PTR [RSI+36],0
            ret 
.L_4125a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4125b0:

            push R14
            push R13
            mov R14D,EDX
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+96]
            push RBX
.L_4125bf:

            mov R12,RDI
            mov R13,RSI
            xor EBX,EBX
.L_4125c7:

            mov ESI,DWORD PTR [RBP+36]
            test ESI,ESI
            je .L_412640

            mov RSI,R13
            mov RDI,RBP
            call .L_4103d0

            test AL,AL
            jne .L_412640

            movsxd RBX,EBX
            lea RAX,QWORD PTR [RBX+RBX*4]
            lea RAX,QWORD PTR [R12+RAX*8]
            cmp WORD PTR [RAX+124],R14W
            je .L_412650

            cmp DWORD PTR [RAX+132],2
            mov WORD PTR [RAX+124],R14W
            je .L_412650

            xor EDX,EDX
            xor ECX,ECX
            mov RDI,R12
            mov WORD PTR [RAX+126],DX
            mov DWORD PTR [RAX+120],4294967295
            mov WORD PTR [RAX+128],CX
            mov DWORD PTR [RAX+132],2
            call .L_433510

            pop RBX
.L_412626:

            mov RSI,R13
            lea RDI,QWORD PTR [RAX+2256]
            xor EDX,EDX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_4148e0
          .byte 0x66
          .byte 0x90
.L_412640:

            add EBX,1
            add RBP,40
            cmp EBX,10
            jne .L_4125c7
.L_412650:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_412659:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412660:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            lea R15,QWORD PTR [RBP+520]
            sub RSP,264
.L_41267e:

            lea RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor EDI,EDI
            mov R12,RAX
            lea RAX,QWORD PTR [RSP+48]
            mov EDX,2
            mov WORD PTR [RSP+16],DI
            mov ESI,16
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov QWORD PTR [RSP+8],RAX
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_4134c0]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_412808

            mov ESI,4096
            movdqu XMM0,XMMWORD PTR [R14]
            mov WORD PTR [RSP+16],SI
            lea RSI,QWORD PTR [RSP+16]
            mov EDX,18
            mov RDI,RAX
            movups XMMWORD PTR [RSP+18],XMM0
            call .L_403d80

            test EAX,EAX
            mov ECX,EAX
            je .L_412788

            cmp QWORD PTR [RBP+536],R15
            je .L_412820
.L_412748:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],ECX
            call .L_403400

            mov ECX,DWORD PTR [RSP+8]
.L_412758:

            mov RDX,QWORD PTR [RSP+248]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_41285c

            add RSP,264
.L_412778:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412788:

            lea RDI,QWORD PTR [R12+2568]
            mov EDX,512
            mov EAX,1023
            mov WORD PTR [RSP+78],DX
            mov WORD PTR [RSP+64],AX
            call .L_4172a0

            mov ECX,4294963391
            movdqu XMM0,XMMWORD PTR [RAX]
            mov WORD PTR [RSP+82],CX
            movzx EAX,BYTE PTR [R12+24]
            xor ECX,ECX
            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,R13
            movaps XMMWORD PTR [RSP+48],XMM0
            mov BYTE PTR [RSP+84],AL
            call .L_430850

            mov ECX,EAX
            cmp R15,QWORD PTR [RBP+536]
            je .L_412854

            test EAX,EAX
            setne BPL
.L_4127ec:

            test RBX,RBX
            je .L_412758

            test BPL,BPL
            je .L_412758

            jmp .L_412748
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412808:

            cmp R15,QWORD PTR [RBP+536]
            je .L_412848

            mov ECX,3
            jmp .L_412758
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412820:

            mov EBP,1
.L_412825:

            mov DWORD PTR [RSP+8],ECX
            call .L_401240

            mov EDX,1000
            mov ESI,EAX
            mov RDI,R15
            call .L_433770

            mov ECX,DWORD PTR [RSP+8]
            jmp .L_4127ec
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412848:

            mov EBP,1
            mov ECX,3
            jmp .L_412825
.L_412854:

            test EAX,EAX
            setne BPL
            jmp .L_412825
.L_41285c:

            call __stack_chk_fail@PLT
.L_412861:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412870:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            lea RBX,QWORD PTR [RDI+96]
            lea R12,QWORD PTR [RDI+496]
            sub RSP,8
.L_412892:

            jmp .L_4128a1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_412898:

            add RBX,40
            cmp RBX,R12
            je .L_412920
.L_4128a1:

            mov EDX,DWORD PTR [RBX+36]
            mov RBP,RBX
            test EDX,EDX
            je .L_412898

            mov RSI,R14
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            je .L_412898
.L_4128ba:

            mov EAX,DWORD PTR [RBP+36]
            cmp EAX,1
            je .L_412998

            jb .L_412948

            cmp EAX,2
            jne .L_412980

            movzx EAX,WORD PTR [RBP+28]
            mov WORD PTR [R15],AX
            lea RAX,QWORD PTR [R13+130]
            add R13,530
            nop
            nop
            nop
            nop
            nop
.L_4128f0:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RBP+34]
            jae .L_4128fd

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_4128fd:

            add RAX,40
            cmp R13,RAX
            jne .L_4128f0

            mov BYTE PTR [RBP+34],0
            add RSP,8
.L_41290e:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412920:

            mov RDI,R13
            call .L_412470

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            jne .L_4128ba
.L_412935:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_412948:

            mov RSI,R14
            mov RDI,R13
            call .L_412660

            test EAX,EAX
            jne .L_412935

            movdqu XMM0,XMMWORD PTR [R14]
            mov EAX,3
            mov WORD PTR [RBP+32],AX
            mov DWORD PTR [RBP+28],1048574
            mov EAX,9
            movups XMMWORD PTR [RBP],XMM0
            mov DWORD PTR [RBP+36],1
            jmp .L_412935
          .byte 0x66
          .byte 0x90
.L_412980:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412998:

            cmp BYTE PTR [RBP+32],0
            mov EAX,9
            jne .L_412935

            cmp WORD PTR [RBP+30],0
            mov EAX,2
            jne .L_412935

            mov RSI,R14
            mov RDI,R13
            call .L_412660

            test EAX,EAX
            jne .L_412935

            mov BYTE PTR [RBP+32],3
            mov EAX,9
            jmp .L_412935
.L_4129d0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov R14,RSI
            sub RSP,232
.L_4129ea:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ESI,ESI
            test R12,R12
            mov EDX,2
            mov RDI,RBX
            sete SIL
            mov RBP,RAX
            shl ESI,4
            lea R13,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_4134bb]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_412a95

            mov EDX,18
            mov RSI,R14
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            je .L_412ac0
.L_412a85:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_412a95:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_412b46

            add RSP,232
.L_412ab3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_412ac0:

            mov EDX,10
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_412a85

            test R12,R12
            je .L_412b30

            movdqu XMM0,XMMWORD PTR [R12]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_412ae4:

            lea RDI,QWORD PTR [RBP+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+50],AX
            movzx EAX,BYTE PTR [RBP+24]
            lea RDX,QWORD PTR [RSP+16]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            mov BYTE PTR [RSP+52],AL
            call .L_430850

            test EAX,EAX
            je .L_412a95

            jmp .L_412a85
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_412b30:

            mov EDX,1023
            mov ECX,512
            mov WORD PTR [RSP+32],DX
            mov WORD PTR [RSP+46],CX
            jmp .L_412ae4
.L_412b46:

            call __stack_chk_fail@PLT
.L_412b4b:

            nop
            nop
            nop
            nop
            nop
.L_412b50:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDI
            sub RSP,104
.L_412b6a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            test BYTE PTR [R13],48
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+54],CX
            mov WORD PTR [RSP+44],SI
            mov WORD PTR [RSP+48],DI
            jne .L_412ba9

            cmp BYTE PTR [R13+1],2
            je .L_412bd0
.L_412ba9:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_412d9d

            add RSP,104
.L_412bc1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_412bd0:

            lea R12,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R14
            mov R15,RAX
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_412ba9

            cmp BYTE PTR [RSP+65],16
            jne .L_412ba9

            lea RAX,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,3
            mov RDI,R14
            mov RCX,RAX
            mov QWORD PTR [RSP],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_412ba9

            cmp BYTE PTR [RSP+55],8
            jne .L_412ba9

            lea RCX,QWORD PTR [RSP+44]
            mov EDX,4
            mov ESI,2
            mov RDI,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_412ba9

            cmp BYTE PTR [RSP+45],2
            jne .L_412ba9

            lea RCX,QWORD PTR [RSP+48]
            mov EDX,6
            mov ESI,6
            mov RDI,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_412da2

            cmp BYTE PTR [RSP+49],4
            jne .L_412ba9

            mov R14D,DWORD PTR [RSP+50]
            bswap R14D
.L_412c7a:

            lea RAX,QWORD PTR [RBX+496]
            lea R8,QWORD PTR [RBX+96]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R12+2]
            mov QWORD PTR [RSP+8],RAX
.L_412c94:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R8
            mov QWORD PTR [RSP+24],R8
            call .L_4103d0

            test AL,AL
            mov R8,QWORD PTR [RSP+24]
            jne .L_412d89

            mov EAX,DWORD PTR [R8+36]
            cmp EAX,1
            je .L_412ce6

            cmp EAX,2
            jne .L_412d89

            mov EAX,DWORD PTR [R8+24]
            cmp EAX,-1
            je .L_412ce6

            mov RSI,QWORD PTR [R8+16]
            cmp QWORD PTR [RSP+56],RSI
            jne .L_412daa

            cmp EAX,R14D
            jbe .L_412ba9
.L_412ce6:

            mov RAX,QWORD PTR [RSP+56]
            lea RCX,QWORD PTR [RBX+530]
            mov WORD PTR [R8+30],0
            mov DWORD PTR [R8+24],R14D
            mov BYTE PTR [R8+32],0
            mov BYTE PTR [R8+33],0
            mov DWORD PTR [R8+36],2
            mov QWORD PTR [R8+16],RAX
            movzx EAX,WORD PTR [RSP+46]
            rol AX,8
            mov WORD PTR [R8+28],AX
            lea RAX,QWORD PTR [RBX+130]
.L_412d28:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [R8+34]
            jae .L_412d36

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_412d36:

            add RAX,40
            cmp RAX,RCX
            jne .L_412d28

            mov BYTE PTR [R8+34],0
            test BYTE PTR [R13],48
            jne .L_412d6c

            lea RDI,QWORD PTR [R15+216]
            mov RCX,RBP
            mov RDX,R13
            mov ESI,68
            mov QWORD PTR [RSP+24],R8
            call .L_430ae0

            mov R8,QWORD PTR [RSP+24]
.L_412d6c:

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R15+2256]
            xor EDX,EDX
            mov QWORD PTR [RSP+24],R8
            call .L_4148e0

            mov R8,QWORD PTR [RSP+24]
.L_412d89:

            add R8,40
            cmp QWORD PTR [RSP+16],R8
            jne .L_412c94

            jmp .L_412ba9
.L_412d9d:

            call __stack_chk_fail@PLT
.L_412da2:

            xor R14D,R14D
            jmp .L_412c7a
.L_412daa:

            mov RDX,QWORD PTR [RSP]
            xor ECX,ECX
            mov RSI,R12
            mov RDI,RBX
            call .L_4129d0

            jmp .L_412ba9
.L_412dc0:

            jmp .L_412b50
.L_412dc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412dd0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov R12,RDX
            mov RBP,RDI
            sub RSP,104
.L_412dea:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBX],48
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+38],CX
            jne .L_412e18

            cmp BYTE PTR [RBX+1],2
            je .L_412e40
.L_412e18:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_413006

            add RSP,104
.L_412e30:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412e40:

            mov RDI,R13
            mov R14,RAX
            call .L_40ff70

            test AL,AL
            jne .L_412e70

            test BYTE PTR [RBX],48
            jne .L_412e70

            lea RDI,QWORD PTR [R14+216]
            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            call .L_430ae0

            nop
            nop
            nop
            nop
            nop
.L_412e70:

            lea RBX,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R12
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_412e18

            cmp BYTE PTR [RSP+65],16
            jne .L_412e18

            lea R13,QWORD PTR [RSP+38]
            mov EDX,10
            mov ESI,3
            mov RDI,R12
            mov RCX,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_412e18

            cmp BYTE PTR [RSP+39],8
            jne .L_412e18

            mov R15,QWORD PTR [R14+8]
            lea RAX,QWORD PTR [R14+2568]
            mov QWORD PTR [RSP+8],RAX
            test R15,R15
            je .L_412f24

            lea R12,QWORD PTR [RBX+2]
            jmp .L_412ee9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412ee0:

            mov R15,QWORD PTR [R15+24]
            test R15,R15
            je .L_412f24
.L_412ee9:

            mov RSI,R12
            mov RDI,R15
            call .L_4103b0

            test AL,AL
            je .L_412ee0

            mov RDI,QWORD PTR [RSP+8]
            call .L_4172b0

            mov RDI,RAX
            call .L_4101a0

            mov RCX,QWORD PTR [RSP+40]
            cmp QWORD PTR [RAX],RCX
            je .L_412ee0

            mov RSI,R15
            mov RDI,R14
            call .L_411720

            jmp .L_412e18
.L_412f24:

            mov RDI,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RSP+29]
            call .L_41e330

            mov RDX,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+30],RDX
            xor EDX,2
            cmp BYTE PTR [RSP+29],0
            mov BYTE PTR [RSP+30],DL
            je .L_412e18

            mov R15,RAX
            lea RAX,QWORD PTR [RSP+30]
            xor R12D,R12D
            mov QWORD PTR [RSP+8],RAX
            jmp .L_412f81
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412f68:

            movzx EAX,BYTE PTR [RSP+29]
            add R12D,1
            add R15,136
            cmp EAX,R12D
            jle .L_412e18
.L_412f81:

            movzx EAX,BYTE PTR [R15+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_412f68

            shr AL,3
            and EAX,2
            mov R14D,EAX
            jne .L_412f68

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_408db0

            test AL,AL
            je .L_412f68

            mov RDI,RBP
            call .L_4334e0

            lea RDX,QWORD PTR [RBX+2]
            mov RSI,RAX
            mov RDI,R15
            call .L_42df40

            test EAX,EAX
            jne .L_412f68

            lea RDX,QWORD PTR [RSP+50]
            mov EAX,R14D
            mov ECX,14
            lea R12,QWORD PTR [RSP+48]
            mov RSI,R15
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,R12
            mov WORD PTR [RSP+48],33022
            call .L_4101d0

            mov RCX,R12
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_4129d0

            jmp .L_412e18
.L_413006:

            call __stack_chk_fail@PLT
.L_41300b:

            nop
            nop
            nop
            nop
            nop
.L_413010:

            jmp .L_412dd0
.L_413015:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413020:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R14,RDX
            sub RSP,248
.L_41303a:

            mov QWORD PTR [RSP+8],R8
            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ECX,ECX
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+28],CX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_4134c5]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            mov EDX,2
            mov RSI,RBX
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            je .L_4130da

            mov EDX,18
            mov RSI,R13
            mov RDI,RAX
            mov RBX,RAX
            call .L_403d80

            test EAX,EAX
            je .L_413108
.L_4130d2:

            mov RDI,RBX
            call .L_403400
.L_4130da:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4131c0

            add RSP,248
.L_4130f8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413108:

            mov EDX,10
            mov RSI,R14
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_4130d2

            add RBP,2568
            mov EDX,514
            mov RDI,RBP
            mov WORD PTR [RSP+28],DX
            call .L_416dd0

            lea RSI,QWORD PTR [RSP+28]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            jne .L_4130d2

            test R15,R15
            je .L_413175

            mov EDX,6
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_4130d2
.L_413175:

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [RAX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_4172a0

            lea RDX,QWORD PTR [RSP+32]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R12
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+66],AX
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_430850

            test EAX,EAX
            je .L_4130da

            jmp .L_4130d2
.L_4131c0:

            call __stack_chk_fail@PLT
.L_4131c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4131d0:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,72
.L_4131ea:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            mov R13,RAX
            movzx EAX,BYTE PTR [RBX]
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+32],CX
            mov WORD PTR [RSP+22],SI
            mov WORD PTR [RSP+16],DI
            and EAX,48
            cmp AL,16
            je .L_413248
.L_413221:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41337d

            add RSP,72
.L_413239:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_413248:

            cmp BYTE PTR [RBX+1],2
            jne .L_413221

            lea RBX,QWORD PTR [RSP+32]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R12
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_413221

            cmp BYTE PTR [RSP+33],16
            jne .L_413221

            lea R12,QWORD PTR [RBX+2]
            mov EAX,2051
            mov EDX,1030
            mov RDI,R13
            mov WORD PTR [RSP+22],AX
            mov WORD PTR [RSP+16],DX
            mov RSI,R12
            call .L_411990

            test AL,AL
            lea RDI,QWORD PTR [R13+2568]
            jne .L_41334d

            lea RSI,QWORD PTR [RSP+15]
            call .L_41e330

            cmp BYTE PTR [RSP+15],0
            je .L_413221

            mov R13,RAX
            xor R15D,R15D
            jmp .L_4132d9
          .byte 0x90
.L_4132c0:

            movzx EAX,BYTE PTR [RSP+15]
            add R15D,1
            add R13,136
            cmp EAX,R15D
            jle .L_413221
.L_4132d9:

            movzx EAX,BYTE PTR [R13+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_4132c0

            shr AL,3
            test AL,2
            jne .L_4132c0

            cmp BYTE PTR [R13+27],3
            ja .L_4132c0

            mov RDI,RBP
            call .L_4334e0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_42e040

            test AL,AL
            je .L_4132c0

            mov RAX,QWORD PTR [R13]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,2
            mov BYTE PTR [RSP+24],AL
            call .L_401240

            sub EAX,DWORD PTR [R13+8]
            lea RCX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RSP+22]
            lea R8,QWORD PTR [R14+16]
            mov RSI,RBX
            mov RDI,RBP
            bswap EAX
            mov DWORD PTR [RSP+18],EAX
            call .L_413020

            jmp .L_413221
.L_41334d:

            call .L_4172b0

            mov RDI,RAX
            call .L_4101a0

            mov RAX,QWORD PTR [RAX]
            lea RDX,QWORD PTR [RSP+22]
            lea R8,QWORD PTR [R14+16]
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,RBP
            mov QWORD PTR [RSP+24],RAX
            call .L_413020

            jmp .L_413221
.L_41337d:

            call __stack_chk_fail@PLT
.L_413382:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413390:

            jmp .L_4131d0
.L_413395:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4133a0:

            push R12
            xor EAX,EAX
            push RBP
            mov R12,RDI
            push RBX
.L_4133a9:

            lea RBP,QWORD PTR [RDI+526]
            lea RBX,QWORD PTR [RDI+126]
            jmp .L_41340f
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4133c0:

            sub EAX,1
            test AL,AL
            mov BYTE PTR [RBX+2],AL
            jne .L_41342b

            movzx ECX,BYTE PTR [RBX+3]
            mov EAX,15
            shl EAX,CL
            cmp AX,28799
            mov WORD PTR [RBX],AX
            ja .L_413448

            add ECX,1
            mov BYTE PTR [RBX+3],CL
.L_4133e4:

            mov RDI,R12
            call .L_433510

            lea RSI,QWORD PTR [RBX-30]
            lea RDI,QWORD PTR [RAX+2256]
            mov EDX,2
            call .L_4148e0

            mov EAX,1
.L_413406:

            add RBX,40
            cmp RBX,RBP
            je .L_413439
.L_41340f:

            cmp DWORD PTR [RBX+6],1
            jne .L_413406

            movzx EAX,BYTE PTR [RBX+2]
            test AL,AL
            jne .L_4133c0

            movzx EAX,WORD PTR [RBX]
            test AX,AX
            je .L_41342b

            sub EAX,1
            mov WORD PTR [RBX],AX
.L_41342b:

            add RBX,40
            mov EAX,1
            cmp RBX,RBP
            jne .L_41340f
.L_413439:

            test AL,AL
            jne .L_413458

            pop RBX
.L_41343e:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413448:

            mov EAX,28800
            mov WORD PTR [RBX],AX
            jmp .L_4133e4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413458:

            call .L_401240

            pop RBX
            lea RDI,QWORD PTR [R12+520]
            mov EDX,1000
            mov ESI,EAX
            pop RBP
            pop R12
            jmp .L_433770
.L_413475:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413480:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402ac0

            add RSP,8
            mov RDI,RAX
            jmp .L_4133a0
.L_41349d:

            nop
            nop
            nop
.L_4134a0:

            cmp BYTE PTR [RCX],1
            je .L_4134b0
.L_4134a5:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4134b0:

            cmp BYTE PTR [RCX+1],0
            jne .L_4134a5

            jmp .L_412070
.L_4134bb:
          .string "a/ae"
.L_4134c0:
          .string "a/aq"
.L_4134c5:
          .string "a/an"
.L_4134ca:

            add BYTE PTR [RDX+101],DH
          .byte 0x6d
          .byte 0x6f
          .byte 0x76
          .byte 0x69

            outsb DX,BYTE PTR [RSI]
            and BYTE PTR [EDX+111],DH
            jne .L_41354c

            jb .L_4134fb
          .byte 0x69
          .byte 0x64
          .byte 0x0
.L_4134de:
          .string "removing rloc16"
.L_4134ee:

            jb .L_413555
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x64
          .byte 0x20
          .byte 0x69
          .byte 0x63
          .byte 0x6d
          .byte 0x70
.L_4134fb:

            and BYTE PTR [RSI+111],CH
            and BYTE PTR [RDX+111],DH
            jne .L_413577
          .byte 0x65
          .byte 0x0
.L_413505:
          .string "evicting for new entry"
# WARNING: found overlapping blocks at address 132e6
# WARNING: found overlapping blocks at address 132ea

.L_41351c:

            nop
            nop
            nop
            nop
.L_413520:

            lea RAX,QWORD PTR [RIP+.L_413940]
            mov QWORD PTR [RDI],0
            mov DWORD PTR [RDI+8],0
            mov DWORD PTR [RDI+24],0
            mov BYTE PTR [RDI+40],0
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RDI+16]
            mov BYTE PTR [RDI+41],0
.L_41354c:

            mov QWORD PTR [RDI+32],RAX
            ret 
.L_413551:
          .byte 0x90
          .byte 0xf
          .byte 0x1f
          .byte 0x40
.L_413555:

            add BYTE PTR [RSI+46],AH
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413560:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+16]
            call .L_433690

            mov BYTE PTR [RBX+41],0
            mov BYTE PTR [RBX+40],0
            pop RBX
            ret 
.L_413577:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413580:

            mov EAX,DWORD PTR [RDI+4]
            test EAX,EAX
            je .L_413590

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
.L_41358c:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_413590:

            sub RSP,8
            call .L_433510

            imul EAX,DWORD PTR [RAX+2888],1000
            add RSP,8
            sub EAX,5000
            ret 
.L_4135ad:

            nop
            nop
            nop
.L_4135b0:

            movzx EDX,BYTE PTR [RDI+41]
            movzx ECX,BYTE PTR [RDI+40]
            mov EAX,DWORD PTR [RDI+4]
            and EDX,4294967280
            test CL,2
            je .L_4135d8

            test EAX,EAX
            je .L_413610

            mov EDX,100
.L_4135cc:

            cmp EAX,EDX
            cmova EAX,EDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4135d8:

            mov ESI,ECX
            shr SIL,3
            and ESI,1
            and ECX,4
            je .L_413600

            test SIL,SIL
            jne .L_413620

            test DL,DL
            jne .L_413630

            test EAX,EAX
            je .L_413688

            mov EDX,1000
            jmp .L_4135cc
          .byte 0x66
          .byte 0x90
.L_413600:

            test SIL,SIL
            jne .L_413620

            test DL,DL
            jne .L_413630

            test EAX,EAX
            je .L_413660

            ret 
          .byte 0x90
.L_413610:

            mov EAX,100
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413620:

            test DL,DL
            jne .L_413630

            test EAX,EAX
            jne .L_413650

            mov EAX,200
            ret 
          .byte 0x66
          .byte 0x90
.L_413630:

            test EAX,EAX
            je .L_413640

            mov EDX,188
            cmp EAX,EDX
            cmova EAX,EDX
            ret 
          .byte 0x90
.L_413640:

            mov EAX,188
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413650:

            mov EDX,200
            jmp .L_4135cc
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413660:

            sub RSP,8

            call .L_433510

            imul EAX,DWORD PTR [RAX+2888],1000
            mov EDX,10
            sub EAX,5000
            cmove EAX,EDX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_413688:

            mov EAX,1000
            ret 
.L_41368e:

            nop
            nop
.L_413690:

            push RBX
            mov RBX,RDI
            sub RSP,16
            cmp ESI,1
            je .L_4136e0
.L_41369d:

            lea RDI,QWORD PTR [RBX+16]
            cmp RDI,QWORD PTR [RBX+32]
            je .L_4136c0

            mov EDX,DWORD PTR [RBX+8]
            mov ESI,DWORD PTR [RBX]
            add RSP,16
            pop RBX
            jmp .L_433770
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4136c0:

            mov QWORD PTR [RSP+8],RDI
            call .L_401240

            mov EDX,DWORD PTR [RBX+8]
            mov DWORD PTR [RBX],EAX
            mov ESI,EAX
            mov RDI,QWORD PTR [RSP+8]
            add RSP,16
            pop RBX
            jmp .L_433770
.L_4136e0:

            call .L_4135b0

            mov DWORD PTR [RBX+8],EAX
            jmp .L_41369d
.L_4136ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4136f0:

            test BYTE PTR [RDI+40],1
            mov EAX,24
            jne .L_413730

            push RBX
            mov RBX,RDI
            call .L_433510

            mov RDX,RAX
            mov EAX,13
            test BYTE PTR [RDX+2624],2
            jne .L_413728

            or BYTE PTR [RBX+40],1
            mov ESI,1
            mov RDI,RBX
            call .L_413690

            xor EAX,EAX
.L_413728:

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413730:

            ret 
.L_413732:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413740:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+16]
            sub RSP,24
            call .L_433510

            test BYTE PTR [RBX+40],1
            je .L_413768

            test BYTE PTR [RAX+1564],64
            mov RBP,RAX
            je .L_413790
.L_413768:

            mov RDI,R12
            call .L_433690

            mov BYTE PTR [RBX+41],0
            mov BYTE PTR [RBX+40],0
            mov EAX,13
.L_41377d:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413790:

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41c0d0

            test RAX,RAX
            je .L_413768

            movzx EAX,BYTE PTR [RAX+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_4137b4

            cmp AL,1
            jne .L_413768
.L_4137b4:

            mov RDI,R12
            call .L_433690

            lea RDI,QWORD PTR [RBP+2352]
            call .L_404860

            test RAX,RAX
            jne .L_4137dd

            jmp .L_413800
          .byte 0x90
.L_4137d0:

            mov RDI,RAX
            call .L_403410

            test RAX,RAX
            je .L_413800
.L_4137dd:

            movzx EDX,BYTE PTR [RAX+78]
            and EDX,3
            cmp DL,2
            jne .L_4137d0
.L_4137e9:

            xor ESI,ESI
            mov RDI,RBX
            call .L_413690

            mov EAX,24
            jmp .L_41377d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413800:

            mov RDI,RBX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            mov ESI,2
            call .L_403790

            test RAX,RAX
            mov R13,RAX
            je .L_413860

            lea RDI,QWORD PTR [RBP+2256]
            mov RSI,RAX
            call .L_414610

            test EAX,EAX
            jne .L_4138a0

            movzx EDX,BYTE PTR [RBX+40]
            mov DWORD PTR [RSP+12],EAX
            test DL,8
            je .L_413888

            and EDX,4294967287
            mov ESI,1
            mov RDI,RBX
            mov BYTE PTR [RBX+40],DL
            call .L_413690

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41377d
          .byte 0x90
.L_413860:

            mov EAX,3
.L_413865:

            or BYTE PTR [RBX+40],8
            mov ESI,1
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_413690

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41377d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413888:

            xor ESI,ESI
            mov RDI,RBX
            call .L_413690

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41377d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4138a0:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            cmp EAX,13
            je .L_413768

            cmp EAX,24
            jne .L_413865

            jmp .L_4137e9
.L_4138c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4138d0:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_4138fb

            mov EDX,EAX
            and EAX,15
            shr DL,4
            add EDX,1
            and EDX,15
            mov ECX,EDX
            shl ECX,4
            or EAX,ECX
            cmp DL,4
            mov BYTE PTR [RDI+40],AL
            jbe .L_413900

            and EAX,15
            mov BYTE PTR [RDI+40],AL
.L_4138fb:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_413900:

            jmp .L_413740
.L_413905:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413910:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_413926

            and EAX,15
            mov BYTE PTR [RDI+40],AL
            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],16
            jne .L_413930
.L_413926:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413930:

            jmp .L_413740
.L_413935:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413940:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b00

            add RSP,8
            mov RDI,RAX
            jmp .L_413740
.L_41395d:

            nop
            nop
            nop
.L_413960:

            cmp DWORD PTR [RDI+4],ESI
            je .L_41396e

            test BYTE PTR [RDI+40],1
            mov DWORD PTR [RDI+4],ESI
            jne .L_413970
.L_41396e:

            ret 
.L_413970:

            mov ESI,1
            jmp .L_413690
.L_41397a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_413980:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_4139a6

            test ESI,ESI
            jne .L_4139b0

            shr AL,2
            and EAX,1
            test BYTE PTR [RDI+41],240
            je .L_4139d8

            sub BYTE PTR [RDI+41],16
            test AL,AL
            jne .L_4139dc

            test BYTE PTR [RDI+41],240
            je .L_4139e4
.L_4139a6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4139b0:

            movzx EDX,BYTE PTR [RDI+41]
            lea ECX,DWORD PTR [RDX+1]
            and EDX,4294967280
            and ECX,15
            or EDX,ECX
            cmp CL,4
            mov BYTE PTR [RDI+41],DL
            ja .L_4139dc

            test AL,4
            jne .L_4139a6

            or EAX,4
            mov BYTE PTR [RDI+40],AL
            jmp .L_4139e4
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4139d8:

            test AL,AL
            je .L_4139a6
.L_4139dc:

            and BYTE PTR [RDI+40],251
            and BYTE PTR [RDI+41],240
.L_4139e4:

            mov ESI,1
            jmp .L_413690
.L_4139ee:

            nop
            nop
.L_4139f0:

            test BYTE PTR [RDI+40],1
            jne .L_413a00

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413a00:

            mov ESI,1
            jmp .L_413690
.L_413a0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_413a10:

            movzx EAX,BYTE PTR [RDI+40]
            mov EDX,EAX
            shr DL,1
            and EDX,1
            cmp DL,SIL
            je .L_413a31

            and ESI,1
            and EAX,4294967293
            add ESI,ESI
            or EAX,ESI
            test AL,1
            mov BYTE PTR [RDI+40],AL
            jne .L_413a38
.L_413a31:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413a38:

            mov ESI,1
            jmp .L_413690
.L_413a42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413a50:

            movzx EAX,BYTE PTR [RDI+41]
            mov R8D,EAX
            and R8D,4294967280
            test SIL,SIL
            je .L_413a98

            cmp SIL,15
            mov EDX,15
            cmova ESI,EDX
            movzx ECX,SIL
.L_413a70:

            mov EDX,EAX
            shr DL,4
            movzx EDX,DL
            cmp EDX,ECX
            jge .L_413a88

            shl ESI,4
            and EAX,15
            or ESI,EAX
            mov BYTE PTR [RDI+41],SIL
.L_413a88:

            test BYTE PTR [RDI+40],1
            je .L_413a93

            test R8B,R8B
            je .L_413aa8
.L_413a93:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_413a98:

            mov ECX,8
            mov ESI,8
            jmp .L_413a70
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_413aa8:

            mov ESI,1
            jmp .L_413690
.L_413ab2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413ac0:

            sub RSP,8
            call .L_433510

            imul EAX,DWORD PTR [RAX+2888],1000
            add RSP,8
            sub EAX,5000
            ret 
.L_413add:

            nop
            nop
            nop
.L_413ae0:

            movabs RAX,2886218022912
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+84],0
            mov QWORD PTR [RDI+100],RAX
            lea RAX,QWORD PTR [RIP+.L_414040]
            mov QWORD PTR [RDI+92],0
            mov DWORD PTR [RDI+108],624
            mov BYTE PTR [RDI+112],0
            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RDI+120]
            mov DWORD PTR [RDI+128],0
            mov DWORD PTR [RDI+176],0
            mov BYTE PTR [RDI+180],255
            mov QWORD PTR [RDI+136],RAX
            ret 
.L_413b42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413b50:

            add RDI,120
            jmp .L_433690
.L_413b59:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413b60:

            lea RAX,QWORD PTR [RDI+144]
            ret 
.L_413b68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413b70:

            mov RAX,QWORD PTR [RDI+144]
            mov RDX,QWORD PTR [RDI+152]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            je .L_413bb0

            sub RSP,8
            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+144],XMM0
            call .L_433530

            mov ESI,2097152
            mov RDI,RAX
            add RSP,8
            jmp .L_402d80
          .byte 0x90
.L_413bb0:

            ret 
.L_413bb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413bc0:

            mov RAX,RDI
            ret 
.L_413bc4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413bd0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBP,ESI
            mov R12,RDX
            sub RSP,56
.L_413be2:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
.L_413bf8:

            call .L_4347c0
.L_413bfd:

            mov EDX,16
            mov RSI,R13
            mov RDI,RBX
.L_413c08:

            call .L_434800

            mov EAX,EBP
            lea RSI,QWORD PTR [RSP+36]
            mov EDX,4
            shr EAX,24
            mov RDI,RBX
            mov BYTE PTR [RSP+39],BPL
            mov BYTE PTR [RSP+36],AL
            mov EAX,EBP
            shr EAX,16
            mov BYTE PTR [RSP+37],AL
            mov EAX,EBP
            mov BYTE PTR [RSP+38],AH
            call .L_434810

            lea RSI,QWORD PTR [RIP+.L_41405a]
            mov EDX,6
            mov RDI,RBX
            call .L_434810

            mov RSI,R12
            mov RDI,RBX
            call .L_434820
.L_413c5b:

            mov RDI,RBX
.L_413c5e:

            call .L_4347f0
.L_413c63:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_413c80

            add RSP,56
.L_413c79:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_413c80:

            call __stack_chk_fail@PLT
.L_413c85:

            mov RBP,RAX
            mov RDI,RBX
            call .L_4347f0

            mov RDI,RBP
.L_413c93:

            call _Unwind_Resume@PLT
.L_413c98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413ca0:

            push RBP
            push RBX
            sub RSP,24
.L_413ca6:

            mov RDX,QWORD PTR [RDI+8]
            xor RDX,QWORD PTR [RSI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            xor RAX,QWORD PTR [RSI]
            or RDX,RAX
            je .L_413de0

            movdqu XMM0,XMMWORD PTR [RSI]
            lea RDX,QWORD PTR [RDI+20]
            xor ESI,ESI
            mov RBX,RDI
            mov DWORD PTR [RDI+16],0
            lea RBP,QWORD PTR [RSP+7]
            movups XMMWORD PTR [RDI],XMM0
            call .L_413bd0

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41c0c0

            mov RDI,RBX
            mov QWORD PTR [RAX+12],0
            mov DWORD PTR [RAX+20],0
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41f0f0

            movzx ECX,BYTE PTR [RSP+7]
            test CL,CL
            je .L_413d65

            sub ECX,1
            lea RDX,QWORD PTR [RAX+12]
            movzx ECX,CL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RAX,QWORD PTR [RAX+RCX*8+52]
            nop
            nop
            nop
            nop
.L_413d48:

            mov DWORD PTR [RDX+8],0
            mov DWORD PTR [RDX],0
            add RDX,40
            mov DWORD PTR [RDX-36],0
            cmp RDX,RAX
            jne .L_413d48
.L_413d65:

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41e330

            movzx ECX,BYTE PTR [RSP+7]
            test CL,CL
            je .L_413dcb

            sub ECX,1
            lea RDX,QWORD PTR [RAX+12]
            movzx ECX,CL
            mov RSI,RCX
            shl RSI,4
            add RCX,RSI
            lea RAX,QWORD PTR [RAX+RCX*8+148]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413da8:

            mov DWORD PTR [RDX+8],0
            mov DWORD PTR [RDX],0
            add RDX,136
            mov DWORD PTR [RDX-132],0
            cmp RAX,RDX
            jne .L_413da8
.L_413dcb:

            mov RDI,RBX
            call .L_433530

            mov ESI,1048832
            mov RDI,RAX
            call .L_402d80
.L_413de0:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_413df9

            add RSP,24
.L_413df6:

            pop RBX
            pop RBP
            ret 
.L_413df9:

            call __stack_chk_fail@PLT
.L_413dfe:

            nop
            nop
.L_413e00:

            push RBX
            lea RDX,QWORD PTR [RDI+52]
            mov RBX,RDI
            call .L_413bd0

            lea RAX,QWORD PTR [RBX+68]
            pop RBX
            ret 
.L_413e13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413e20:

            push RBX
            lea RBX,QWORD PTR [RDI+52]
            mov RDX,RBX
            call .L_413bd0

            mov RAX,RBX
            pop RBX
            ret 
.L_413e32:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413e40:

            mov EAX,DWORD PTR [RDI+84]
            add EAX,1
            cmp EAX,DWORD PTR [RDI+92]
            mov DWORD PTR [RDI+84],EAX
            jae .L_413e50

            ret 
.L_413e50:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            add RSP,8
            jmp .L_416300
.L_413e69:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413e70:

            mov EAX,DWORD PTR [RDI+88]
            add EAX,1
            cmp EAX,DWORD PTR [RDI+96]
            mov DWORD PTR [RDI+88],EAX
            jae .L_413e80

            ret 
.L_413e80:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            add RSP,8
            jmp .L_416300
.L_413e99:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413ea0:

            movdqu XMM0,XMMWORD PTR [RSI]
            mov DWORD PTR [RDI+176],0
            movups XMMWORD PTR [RDI+160],XMM0
            ret 
.L_413eb6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413ec0:

            test ESI,ESI
            mov EAX,7
            je .L_413ece

            mov DWORD PTR [RDI+104],ESI
            xor EAX,EAX
.L_413ece:

            ret 
.L_413ed0:

            cmp BYTE PTR [RDI+180],SIL
            je .L_413f00

            sub RSP,8
            mov BYTE PTR [RDI+180],SIL
            call .L_433530

            mov ESI,4194304
            mov RDI,RAX
            add RSP,8
            jmp .L_402d80
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413f00:

            ret 
.L_413f02:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413f10:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI+100],0
            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov EDX,3600000
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_413f31:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413f40:

            mov BYTE PTR [RDI+112],0
            jmp .L_413f10
.L_413f46:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413f50:

            mov EAX,DWORD PTR [RDI+16]
            cmp EAX,ESI
            je .L_413ff0

            push RBP
            push RBX
            add EAX,1
            lea RBP,QWORD PTR [RDI+120]
            sub RSP,8
.L_413f68:

            cmp EAX,ESI
            jne .L_413f90

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            je .L_413f90

            cmp QWORD PTR [RDI+136],RBP
            je .L_413f90

            cmp BYTE PTR [RDI+112],0
            je .L_413f90

            cmp EAX,DWORD PTR [RDI+100]
            ja .L_413fe0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413f90:

            lea RDX,QWORD PTR [RDI+20]
            mov RBX,RDI
            mov DWORD PTR [RDI+16],ESI
            call .L_413bd0

            cmp QWORD PTR [RBX+136],RBP
            mov QWORD PTR [RBX+84],0
            je .L_413fbc

            mov BYTE PTR [RBX+112],1
            mov RDI,RBX
            call .L_413f10
.L_413fbc:

            mov RDI,RBX
            call .L_433530

            add RSP,8
.L_413fc8:

            mov ESI,256
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_402d80
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413fe0:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413ff0:

            ret 
.L_413ff2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414000:

            push RBX
            add DWORD PTR [RDI+100],1
            mov RBX,RDI
            mov ESI,DWORD PTR [RDI+128]
            mov EDX,3600000
            add RDI,120
            call .L_433770

            mov EAX,DWORD PTR [RBX+104]
            cmp DWORD PTR [RBX+100],EAX
            jae .L_414030

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414030:

            mov EAX,DWORD PTR [RBX+16]
            mov RDI,RBX
            pop RBX
            lea ESI,DWORD PTR [RAX+1]
            jmp .L_413f50
.L_41403f:

            nop
.L_414040:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402ab0

            add RSP,8
            mov RDI,RAX
            jmp .L_414000
.L_41405a:

            push RSP
            push 1684104562
.L_414060:

            sub RSP,16
            movzx EAX,WORD PTR [RDI]
            mov R10,RSI
            movzx ESI,DX
            lea RDX,QWORD PTR [RIP+.L_676840]
            lea R8,QWORD PTR [RIP+.L_4144f9]
            mov RCX,-1
            mov RDI,R10
            mov R9D,EAX
            and EAX,7
            and R9D,2047
            push QWORD PTR [RDX+RAX*8]
            mov EDX,1
            sar R9D,3
            xor EAX,EAX
            neg R9D
            call __snprintf_chk@PLT

            add RSP,24
            ret 
.L_4140ad:

            nop
            nop
            nop
.L_4140b0:

            movzx R8D,WORD PTR [RDI]
            movzx ECX,DX
            cmp SIL,1
            lea EAX,DWORD PTR [RCX-1]
            sbb ESI,ESI
            mov EDX,ECX
            shr EDX,1
            movzx ESI,SI
            imul EAX,R8D
            add EAX,EDX
            xor EDX,EDX
            add EAX,ESI
            div ECX
            mov WORD PTR [RDI],AX
            ret 
.L_4140d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4140e0:

            xor EAX,EAX
            mov WORD PTR [RDI],AX
            ret 
.L_4140e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4140f0:

            cmp SIL,127
            je .L_4141c0

            movzx ECX,BYTE PTR [RDI+1]
            test SIL,SIL
            mov EAX,0
            cmovg ESI,EAX
            movsx SI,SIL
            neg ESI
            mov R8D,ECX
            shl ESI,3
            shr R8B,3
            test CL,248
            je .L_414158

            movzx R9D,WORD PTR [RDI]
            movzx ESI,SI
            mov EDX,R9D
            and EDX,2047
            cmp R8B,6
            jbe .L_414180

            lea EAX,DWORD PTR [RSI+RDX*8]
            and R9W,63488
            sub EAX,EDX
            sar EAX,3
            and AX,2047
            or R9D,EAX
            xor EAX,EAX
            mov WORD PTR [RDI],R9W
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414158:

            lea R8D,DWORD PTR [R8*8+8]
            and ECX,7
            and SI,2047
            or ECX,R8D
            mov BYTE PTR [RDI+1],CL
            movzx EAX,WORD PTR [RDI]
            and AX,63488
            or ESI,EAX
            xor EAX,EAX
            mov WORD PTR [RDI],SI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414180:

            add R8D,1
            and ECX,7
            and R8D,31
            lea EAX,DWORD PTR [R8*8]
            movzx R8D,R8B
            or ECX,EAX
            lea EAX,DWORD PTR [R8-1]
            mov BYTE PTR [RDI+1],CL
            imul EAX,EDX
            add EAX,ESI
            movzx ESI,WORD PTR [RDI]
            cdq 
            idiv R8D
            and SI,63488
            and AX,2047
            or EAX,ESI
            mov WORD PTR [RDI],AX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4141c0:

            mov EAX,7
            ret 
.L_4141c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4141d0:

            test BYTE PTR [RDI+1],248
            mov EAX,127
            je .L_4141f8

            movzx EDX,WORD PTR [RDI]
            mov EAX,EDX
            and EDX,7
            and EAX,2047
            sar EAX,3
            mov ECX,EAX
            not EAX
            neg ECX
            cmp DX,3
            cmovbe EAX,ECX
.L_4141f8:

            ret 
.L_4141fa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_414200:

            test BYTE PTR [RDI+1],248
            mov RAX,RSI
            jne .L_414218

            test DX,DX
            jne .L_414210

            ret 
.L_414210:

            mov BYTE PTR [RSI],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_414218:

            sub RSP,24
            movzx EDX,DX
            mov QWORD PTR [RSP+8],RSI
            call .L_414060

            mov RAX,QWORD PTR [RSP+8]
            add RSP,24
            ret 
.L_414233:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414240:

            mov QWORD PTR [RDI],2130706432
            ret 
.L_414248:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414250:

            mov DWORD PTR [RDI],2130706432
            ret 
.L_414257:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414260:

            cmp DL,127
            je .L_414310

            push RBX
.L_41426a:

            test BYTE PTR [RDI+1],248
            mov EBX,255
            mov BYTE PTR [RDI+3],DL
            je .L_41427c

            movzx EBX,BYTE PTR [RDI+2]
.L_41427c:

            mov R11D,ESI
            movsx ESI,DL
            mov R10,RDI
            call .L_4140f0

            test EAX,EAX
            jne .L_414304

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,248
            je .L_4142f0

            movzx EAX,WORD PTR [RDI]
            mov EDX,EAX
            and EAX,7
            and EDX,2047
            sar EDX,3
            mov ECX,EDX
            not EDX
            neg ECX
            cmp AX,3
            cmovbe EDX,ECX
            mov EAX,EDX
            sub AL,R11B
            js .L_414318

            cmp DL,127
            je .L_414318

            cmp BL,2
            jbe .L_414328

            mov ECX,20
            mov EDI,10
            mov ESI,2
.L_4142d7:

            cmp CL,AL
            mov EDX,3
            jb .L_414300

            cmp DIL,AL
            jae .L_4142fa

            mov EDX,2
            jmp .L_414300
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4142f0:

            cmp BL,2
            mov ESI,2
            jbe .L_414328
.L_4142fa:

            cmp AL,SIL
            seta DL
.L_414300:

            mov BYTE PTR [R10+2],DL
.L_414304:

            pop RBX
.L_414305:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414310:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414318:

            xor EDX,EDX
            cmp BL,2
            ja .L_414300

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414328:

            lea RDX,QWORD PTR [RIP+.L_414549]
            mov ECX,22
            movzx ESI,BYTE PTR [RDX+RBX*1]
            lea RDX,QWORD PTR [RIP+.L_414546]
            movzx EDI,BYTE PTR [RDX+RBX*1]
            jmp .L_4142d7
.L_414345:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414350:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,56
            movzx R13D,BYTE PTR [RDI+2]
            movsx R12D,BYTE PTR [RDI+3]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test BYTE PTR [RDI+1],248
            jne .L_4143d0

            lea R9,QWORD PTR [RSP+30]
            mov BYTE PTR [RSP+30],0
.L_414389:

            push R13
            lea R8,QWORD PTR [RIP+.L_414520]
            push R12
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            movzx ESI,BX
            mov RDI,RBP
            call __snprintf_chk@PLT

            pop RAX
            pop RDX
            mov RAX,RBP
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4143ee

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4143d0:

            lea R9,QWORD PTR [RSP+30]
            mov EDX,10
            mov RSI,R9
            mov QWORD PTR [RSP+8],R9
            call .L_414060

            mov R9,QWORD PTR [RSP+8]
            jmp .L_414389
.L_4143ee:

            call __stack_chk_fail@PLT
.L_4143f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414400:

            mov EAX,ESI
            sub AL,DIL
            js .L_414410

            cmp SIL,127
            je .L_414410

            ret 
          .byte 0x90
.L_414410:

            xor EAX,EAX
            ret 
.L_414413:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414420:

            cmp DIL,20
            mov EAX,3
            ja .L_41443d

            cmp DIL,10
            mov EAX,2
            ja .L_41443d

            cmp DIL,2
            seta AL
.L_41443d:

            ret 
.L_41443f:

            nop
.L_414440:

            mov EDX,ESI
            sub DL,DIL
            js .L_414460

            cmp SIL,127
            je .L_414460

            cmp DL,20
            mov EAX,3
            jle .L_414468
.L_414457:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414460:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414468:

            cmp DL,10
            mov EAX,2
            ja .L_414457

            cmp DL,2
            seta AL
            ret 
.L_414479:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414480:

            sub ESI,1
            mov EAX,EDI
            cmp SIL,2
            ja .L_41449e

            lea RAX,QWORD PTR [RIP+.L_41454c]
            movzx ESI,SIL
            movzx EDX,BYTE PTR [RAX+RSI*1]
            add EDX,EDI
            mov EAX,EDX
.L_41449e:

            ret 
.L_4144a0:

            cmp SIL,2
            movzx EAX,SIL
            ja .L_4144e8

            lea RDX,QWORD PTR [RIP+.L_414549]
            movzx ESI,BYTE PTR [RDX+RAX*1]
            lea RDX,QWORD PTR [RIP+.L_414546]
            movzx ECX,BYTE PTR [RDX+RAX*1]
            mov EDX,22
.L_4144c5:

            cmp DL,DIL
            mov EAX,3
            jb .L_4144df

            cmp CL,DIL
            mov EAX,2
            jb .L_4144df

            cmp SIL,DIL
            setb AL
.L_4144df:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4144e8:

            mov EDX,20
            mov ECX,10
            mov ESI,2
            jmp .L_4144c5
.L_4144f9:
          .string "%d.%s"
.L_4144ff:
          .string "0"
.L_414501:
          .string "125"
.L_414505:
          .string "25"
.L_414508:
          .string "375"
.L_41450c:
          .string "5"
.L_41450e:
          .string "625"
.L_414512:
          .string "75"
.L_414515:
          .string "875"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414520:
          .string "aveRss:%s, lastRss:%d, linkQuality:%d"
.L_414546:

            or AL,12
            or AL,BYTE PTR [RDX+RAX*1]
# WARNING: found overlapping blocks at address 14319
.set .L_414549, . - 2

          .byte 0x2
.L_41454c:
          .byte 0x5
          .byte 0xf
          .byte 0x32
          .byte 0x90
.L_414550:

            push R14
            lea R14,QWORD PTR [RDI+96]
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_41455f:

            mov RDI,R14
            mov R13,RSI
            call .L_404860

            test RAX,RAX
            mov RBX,RAX
            je .L_4145db

            nop
            nop
            nop
            nop
            nop
            nop
.L_414578:

            mov RDI,RBX
            call .L_403410

            mov RDI,RBP
            mov R12,RAX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41e310

            mov RDI,RBX
            movzx ESI,AL
            call .L_404180

            mov RDI,RBX
            call .L_404220

            test AL,AL
            jne .L_4145d3

            test BYTE PTR [RBX+78],64
            jne .L_4145d3

            cmp QWORD PTR [RBP+144],RBX
            je .L_414600
.L_4145c0:

            mov RDI,R14
            mov RSI,RBX
            call .L_404a80

            mov RDI,RBX
            call .L_403400
.L_4145d3:

            test R12,R12
            mov RBX,R12
            jne .L_414578
.L_4145db:

            pop RBX
.L_4145dc:

            mov QWORD PTR [R13+112],0
            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R13
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_42d520
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414600:

            mov QWORD PTR [RBP+144],0
            jmp .L_4145c0
.L_41460d:

            nop
            nop
            nop
.L_414610:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,72
.L_414624:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            mov R13,RAX
            movzx EAX,BYTE PTR [RBX+78]
            mov EDX,EAX
            and EDX,3
            je .L_414708

            cmp DL,3
            je .L_4146b0

            or EAX,64
            mov BYTE PTR [RBX+78],AL
.L_414656:

            xor ESI,ESI
            mov RDI,RBX
            call .L_4035a0

            xor EAX,EAX
            lea RDI,QWORD PTR [RBP+96]
            mov RSI,RBX
            mov WORD PTR [RBX+62],AX
            call .L_404a60

            test EAX,EAX
            mov R12D,EAX
            jne .L_414685

            lea RDI,QWORD PTR [RBP+192]
            call .L_405290
.L_414685:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_4148d5

            add RSP,72
.L_4146a0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4146b0:

            lea RDI,QWORD PTR [R13+11232]
            mov RSI,RBX
            mov R12D,2
            call .L_42e4a0

            test RAX,RAX
            mov R14,RAX
            je .L_414685

            test BYTE PTR [RAX+26],64
            jne .L_414685

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,RAX
            call .L_41e310

            mov RDI,RBX
            movzx ESI,AL
            call .L_4041d0

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R14
            call .L_42d3b0

            jmp .L_414656
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414708:

            lea R14,QWORD PTR [RSP+16]
            xor ESI,ESI
            mov EDX,40
            mov RDI,RBX
            lea R12,QWORD PTR [R14+24]
            mov RCX,R14
            call .L_4038b0

            mov RDI,R12
            call .L_40ff70

            test AL,AL
            je .L_414800

            mov RDI,R12
            call .L_4102b0

            test AL,AL
            jne .L_414743

            or BYTE PTR [RBX+78],64
.L_414743:

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,5
            je .L_414656

            add R13,2568
            lea RSI,QWORD PTR [RSP+15]
            add R14,24
            mov RDI,R13
            call .L_41e330

            mov RDI,R13
            mov R12,RAX
            call .L_416db0

            mov RDI,R14
            mov RSI,RAX
            call .L_4103b0

            test AL,AL
            je .L_414860
.L_41478b:

            cmp BYTE PTR [RSP+15],0
            je .L_414656

            xor R14D,R14D
            lea R13,QWORD PTR [RBP+248]
            jmp .L_4147c3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4147a8:

            cmp DL,1
            je .L_4147d6
.L_4147ad:

            add R14D,1
            add R12,136
            cmp BYTE PTR [RSP+15],R14B
            jbe .L_414656
.L_4147c3:

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            and EDX,7
            lea ECX,DWORD PTR [RDX-6]
            cmp CL,1
            ja .L_4147a8
.L_4147d6:

            shr AL,3
            test AL,8
            jne .L_4147ad

            movzx ESI,R14B
            mov RDI,RBX
            call .L_4041d0

            mov RSI,R12
            mov RDI,R13
            call .L_42d3b0

            jmp .L_4147ad
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414800:

            add R13,2568
            mov RSI,R12
            mov RDI,R13
            call .L_41e600

            test RAX,RAX
            mov R12,RAX
            je .L_414826

            test BYTE PTR [RAX+26],64
            jne .L_414826

            test BYTE PTR [RBX+78],64
            je .L_414830
.L_414826:

            or BYTE PTR [RBX+78],64
            jmp .L_414656
          .byte 0x90
.L_414830:

            mov RDI,R13
            mov RSI,RAX
            call .L_41e310

            mov RDI,RBX
            movzx ESI,AL
            call .L_4041d0

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42d3b0

            jmp .L_414656
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414860:

            mov RDI,R13
            call .L_416dc0

            mov RDI,R14
            mov RSI,RAX
            call .L_4103b0

            test AL,AL
            jne .L_41478b

            cmp BYTE PTR [RSP+15],0
            je .L_414656

            xor R15D,R15D
            jmp .L_4148a6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414890:

            add R15D,1
            add R12,136
            cmp BYTE PTR [RSP+15],R15B
            jbe .L_414656
.L_4148a6:

            mov RDX,R12
            mov RSI,R14
            mov RDI,R13
            call .L_425930

            test AL,AL
            je .L_414890

            movzx ESI,R15B
            mov RDI,RBX
            call .L_4041d0

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42d3b0

            jmp .L_414890
.L_4148d5:

            call __stack_chk_fail@PLT
.L_4148da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4148e0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_4148f4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RDI+240]
            mov DWORD PTR [RSP],EDX
            lea RBX,QWORD PTR [RSP+16]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4045c0

            test RAX,RAX
            mov BYTE PTR [RSP+7],0
            mov R14,RAX
            jne .L_414938

            jmp .L_4149a7
          .byte 0x90
.L_414930:

            test R15,R15
            mov R14,R15
            je .L_4149a0
.L_414938:

            mov RDI,R14
            call .L_403410

            test BYTE PTR [R14+78],3
            mov R15,RAX
            jne .L_414930

            mov RCX,RBX
            mov EDX,16
            mov ESI,24
            mov RDI,R14
            call .L_4038b0

            mov RSI,R12
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            mov R13D,EAX
            je .L_414930

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_404690

            mov EAX,DWORD PTR [RSP]
            test EAX,EAX
            jne .L_4149d0

            lea RDI,QWORD PTR [RBP+96]
            mov RSI,R14
            mov R14,R15
            call .L_404a60

            test R15,R15
            mov BYTE PTR [RSP+7],R13B
            jne .L_414938

            nop
            nop
.L_4149a0:

            cmp BYTE PTR [RSP+7],0
            jne .L_4149f8
.L_4149a7:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_414a06

            add RSP,56
.L_4149bb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4149d0:

            mov R8D,DWORD PTR [RSP]
            mov RDI,RBP
            xor ECX,ECX
            mov RDX,R14
            mov ESI,3
            call .L_4428d0

            mov RDI,R14
            call .L_403400

            jmp .L_414930
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4149f8:

            lea RDI,QWORD PTR [RBP+192]
            call .L_405290

            jmp .L_4149a7
.L_414a06:

            call __stack_chk_fail@PLT
.L_414a0b:

            nop
            nop
            nop
            nop
            nop
.L_414a10:

            test WORD PTR [RSI+126],8191
            jne .L_414a20

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414a20:

            jmp .L_414550
.L_414a25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414a30:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,16
.L_414a3b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            cmp BYTE PTR [RSP+7],0
            je .L_414ab1

            mov R12,RAX
            xor EBX,EBX
            nop
            nop
            nop
.L_414a70:

            movzx ECX,BL
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            lea RSI,QWORD PTR [R12+RDX*8]
            movzx EDX,BYTE PTR [RSI+26]
            and EDX,7
            lea ECX,DWORD PTR [RDX-6]
            cmp CL,1
            jbe .L_414aa8

            cmp DL,1
            je .L_414aa8

            test WORD PTR [RSI+126],8191
            je .L_414aa8

            mov RDI,RBP
            call .L_414550

            nop
            nop
            nop
.L_414aa8:

            add EBX,1
            cmp BYTE PTR [RSP+7],BL
            ja .L_414a70
.L_414ab1:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_414aca

            add RSP,16
.L_414ac5:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_414aca:

            call __stack_chk_fail@PLT
.L_414acf:

            nop
.L_414ad0:

            push RBP
            push RBX
            mov RBP,RDI
            add RDI,96
            sub RSP,8
            call .L_404860

            test RAX,RAX
            mov RBX,RAX
            je .L_414b20
.L_414aea:

            mov RDI,RBX
            call .L_404220

            test AL,AL
            je .L_414b10

            mov RSI,RBX
            mov RDI,RBP
            call .L_440a10

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414b10:

            mov RDI,RBX
            call .L_403410

            test RAX,RAX
            mov RBX,RAX
            jne .L_414aea
.L_414b20:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_414b2c:

            nop
            nop
            nop
            nop
.L_414b30:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RDI
            sub RSP,8
.L_414b43:

            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R12
            call .L_41e310

            movzx EBX,AL
            mov RDI,R13
            mov ESI,EBX
            call .L_404130

            test AL,AL
            mov EDX,23
            je .L_414b8f

            mov ESI,EBX
            mov RDI,R13
            call .L_404180

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42d4e0

            xor EDX,EDX
            cmp R13,QWORD PTR [R12+112]
            je .L_414ba0
.L_414b8f:

            add RSP,8
.L_414b93:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_414ba0:

            mov QWORD PTR [R12+112],0
            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_414bb6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414bc0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RSI
            mov EBX,EDX
            sub RSP,104
.L_414bd6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            mov RBP,RAX
            lea RAX,QWORD PTR [R12+96]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_404860

            test RAX,RAX
            je .L_414cfc

            mov R14,RAX
            lea RAX,QWORD PTR [RSP+48]
            lea R15,QWORD PTR [RSP+42]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+72]
            mov QWORD PTR [RSP+24],RAX
            lea RAX,QWORD PTR [RBP+2568]
            mov QWORD PTR [RSP],RAX
.L_414c30:

            mov RDI,R14
            call .L_403410

            test BL,BL
            mov RBP,RAX
            je .L_414c52

            movzx EAX,BYTE PTR [R14+78]
            shr AL,2
            and EAX,15
            cmp BL,AL
            jne .L_414cf0
.L_414c52:

            mov RDX,R13
            mov RSI,R14
            mov RDI,R12
            call .L_414b30

            test EAX,EAX
            je .L_414cb0

            movzx EAX,BYTE PTR [R14+78]
            and EAX,3
            je .L_414d20

            cmp AL,1
            jne .L_414cb0

            xor EAX,EAX
            mov RSI,R14
            mov RDI,R15
            mov DWORD PTR [R15],0
            mov WORD PTR [R15+4],AX
            call .L_4405f0

            movzx ESI,WORD PTR [RSP+46]
            mov RDI,QWORD PTR [RSP]
            rol SI,8
            movzx ESI,SI
            call .L_41e380

            cmp R13,RAX
            je .L_414d4b

            nop
            nop
            nop
.L_414cb0:

            mov RDI,R14
            call .L_404220

            test AL,AL
            jne .L_414cf0

            test BYTE PTR [R14+78],64
            jne .L_414cf0

            cmp QWORD PTR [R12+144],R14
            je .L_414d58
.L_414cd1:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_404a80

            mov RDI,R14
            call .L_403400

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414cf0:

            test RBP,RBP
            mov R14,RBP
            jne .L_414c30
.L_414cfc:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_414d69

            add RSP,104
.L_414d10:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414d20:

            mov RCX,QWORD PTR [RSP+16]
            xor ESI,ESI
            mov EDX,40
            mov RDI,R14
            call .L_4038b0

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP]
            call .L_41e600

            cmp R13,RAX
            jne .L_414cb0
.L_414d4b:

            and BYTE PTR [R14+78],191
            jmp .L_414cb0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414d58:

            mov QWORD PTR [R12+144],0
            jmp .L_414cd1
.L_414d69:

            call __stack_chk_fail@PLT
.L_414d6e:

            nop
            nop
.L_414d70:

            push R15
            push R14
            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+96]
            push RBX
            mov RBX,RDI
            sub RSP,88
.L_414d85:

            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_404860

            test RAX,RAX
            je .L_414e47

            lea R12,QWORD PTR [RSP+32]
            mov R15,RAX
            lea RAX,QWORD PTR [R12+24]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+31]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_414dd8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414dc8:

            mov RDI,R15
            call .L_403410

            test RAX,RAX
            mov R15,RAX
            je .L_414e47
.L_414dd8:

            movzx EAX,BYTE PTR [R15+78]
            shr AL,2
            and EAX,15
            cmp AL,9
            jne .L_414dc8

            xor ESI,ESI
            mov RCX,R12
            mov EDX,40
            mov RDI,R15
            call .L_4038b0

            mov RDI,QWORD PTR [RSP]
            call .L_40ff70

            test AL,AL
            je .L_414e80
.L_414e06:

            cmp QWORD PTR [RBX+144],R15
            je .L_414e70
.L_414e0f:

            mov RSI,R15
            mov RDI,RBP
            call .L_404a80

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov ESI,3
            mov RDI,RBX
            call .L_4428d0

            mov RDI,R15
            call .L_403400

            mov RDI,R15
            call .L_403410

            test RAX,RAX
            mov R15,RAX
            jne .L_414dd8
.L_414e47:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_414edd

            add RSP,88
.L_414e5f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414e70:

            mov QWORD PTR [RBX+144],0
            jmp .L_414e0f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414e80:

            mov RDI,RBX
            call .L_433510

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            cmp BYTE PTR [RSP+31],0
            mov R14,RAX
            je .L_414e06

            xor R13D,R13D
            nop
            nop
            nop
            nop
            nop
            nop
.L_414eb0:

            movzx EDX,R13B
            mov RSI,R15
            mov RDI,RBX
            mov RAX,RDX
            add R13D,1
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [R14+RAX*8]
            call .L_414b30

            cmp BYTE PTR [RSP+31],R13B
            ja .L_414eb0

            jmp .L_414e06
.L_414edd:

            call __stack_chk_fail@PLT
.L_414ee2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414ef0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R14,QWORD PTR [R12+96]
            sub RSP,56
.L_414f09:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R15
            call .L_41e310

            mov RDI,R14
            movzx EBP,AL
            call .L_404860

            test RAX,RAX
            je .L_41502e

            mov RBX,RAX
            lea RAX,QWORD PTR [R12+248]
            mov QWORD PTR [RSP+8],RAX
.L_414f51:

            mov RDI,RBX
            call .L_403410

            mov ESI,EBP
            mov RDI,RBX
            mov R13,RAX
            call .L_404130

            test AL,AL
            je .L_415022

            movzx EAX,BYTE PTR [RBX+78]
            and EAX,3
            cmp AL,3
            jne .L_414f88

            movzx EAX,WORD PTR [R15+126]
            and AX,8191
            cmp AX,1
            ja .L_414ff8
.L_414f88:

            movzx EAX,WORD PTR [R15+120]
            lea RSI,QWORD PTR [RSP+28]
            mov RDI,R15
            mov QWORD PTR [R15+112],RBX
            mov BYTE PTR [R15+123],0
            mov DWORD PTR [RSP+36],0
            and AX,32768
            mov WORD PTR [R15+120],AX
            mov BYTE PTR [R15+121],128
            call .L_42e110

            xor R8D,R8D
            mov RCX,RAX
            mov RDX,RBX
            mov ESI,2
            mov RDI,R12
            call .L_4428d0
.L_414fcf:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov RAX,RBX
            jne .L_415055

            add RSP,56
.L_414fe6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414ff8:

            mov ESI,EBP
            mov RDI,RBX
            call .L_404180

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_42d4e0

            mov RDI,R14
            mov RSI,RBX
            call .L_404a80

            mov RDI,RBX
            call .L_403400
.L_415022:

            test R13,R13
            mov RBX,R13
            jne .L_414f51
.L_41502e:

            movzx EAX,WORD PTR [R15+120]
            mov QWORD PTR [R15+112],0
            xor EBX,EBX
            mov BYTE PTR [R15+123],0
            and AX,32768
            mov WORD PTR [R15+120],AX
            mov BYTE PTR [R15+121],128
            jmp .L_414fcf
.L_415055:

            call __stack_chk_fail@PLT
.L_41505a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_415060:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            sub RSP,56
.L_415073:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDX+123],0
            je .L_4150ad

            mov BYTE PTR [RDI+152],1
            mov EAX,DWORD PTR [RDX+104]
            mov DWORD PTR [RDI+252],EAX
            movzx EAX,BYTE PTR [RDX+122]
            mov BYTE PTR [RDI+256],AL
            movzx EAX,BYTE PTR [RDX+124]
            mov BYTE PTR [RDI+257],AL
.L_4150ad:

            movzx ESI,WORD PTR [RBP+120]
            mov RDI,R12
            and ESI,32767
            call .L_4035a0

            movzx EAX,BYTE PTR [R12+78]
            and EAX,3
            je .L_415100

            cmp AL,3
            jne .L_415168

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RBP
            call .L_42e110
.L_4150e1:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_415187

            add RSP,56
.L_4150f9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_415100:

            mov R13,RSP
            xor ESI,ESI
            mov EDX,40
            mov RCX,R13
            mov RDI,R12
            call .L_4038b0

            lea RDX,QWORD PTR [RBX+156]
            lea RSI,QWORD PTR [R13+8]
            mov RDI,RBX
            add R13,24
            mov BYTE PTR [RBX+184],0
            call .L_440cd0

            mov RDI,R13
            call .L_40ff50

            test AL,AL
            lea RDX,QWORD PTR [RBX+168]
            je .L_415158

            mov RSI,R13
            mov RDI,RBX
            call .L_440d20

            jmp .L_4150e1
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415158:

            mov RSI,RDX
            mov RDI,RBP
            call .L_42e110

            jmp .L_4150e1
.L_415168:

            lea RCX,QWORD PTR [RIP+.L_416220]
            lea RSI,QWORD PTR [RIP+.L_416162]
            lea RDI,QWORD PTR [RIP+.L_416180]
            mov EDX,531
            call __assert_fail@PLT
.L_415187:

            call __stack_chk_fail@PLT
.L_41518c:

            nop
            nop
            nop
            nop
.L_415190:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,32
.L_41519b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            mov RDI,RBX
            mov R12,RAX
            call .L_414a30

            lea RSI,QWORD PTR [RSP+23]
            lea RDI,QWORD PTR [R12+2568]
            call .L_41e330

            movzx EBP,BYTE PTR [RBX+258]
            movzx ESI,BYTE PTR [RSP+23]
            cmp BPL,SIL
            jb .L_4151e7

            mov BYTE PTR [RBX+258],0
            xor EBP,EBP
.L_4151e7:

            test SIL,SIL
            je .L_415231

            mov R10D,ESI
            xor R11D,R11D
.L_4151f2:

            movzx ECX,BPL
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            lea ECX,DWORD PTR [RBP+1]
            lea RDX,QWORD PTR [RAX+RDX*8]
            cmp SIL,CL
            movzx EDI,BYTE PTR [RDX+26]
            cmove ECX,R11D
            mov R8D,EDI
            and R8D,7
            lea R9D,DWORD PTR [R8-6]
            cmp R9B,1
            jbe .L_415240

            cmp R8B,1
            je .L_415240
.L_415229:

            sub R10B,1
            mov EBP,ECX
            jne .L_4151f2
.L_415231:

            mov EAX,23
            jmp .L_41527e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415240:

            test DIL,DIL
            jns .L_415229

            mov RSI,QWORD PTR [RDX+112]
            mov BYTE PTR [RBX+153],1
            test RSI,RSI
            mov QWORD PTR [RBX+144],RSI
            je .L_4152a0
.L_41525c:

            mov RDI,RBX
            call .L_415060
.L_415264:

            lea RSI,QWORD PTR [RBX+24]
            lea RDI,QWORD PTR [R12+1560]
            mov BYTE PTR [RBX+258],BPL
            call .L_406150

            xor EAX,EAX
.L_41527e:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_41531b

            add RSP,32
.L_415296:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4152a0:

            mov RSI,RDX
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RDX
            call .L_414ef0

            test RAX,RAX
            mov RSI,RAX
            mov QWORD PTR [RBX+144],RAX
            mov RDX,QWORD PTR [RSP+8]
            jne .L_41525c

            test BYTE PTR [RDX+127],32
            je .L_415300

            movzx EAX,WORD PTR [R12+1664]
            mov DWORD PTR [RBX+164],1
            mov WORD PTR [RBX+156],AX
.L_4152e4:

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RDX
            call .L_42e110

            jmp .L_415264
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415300:

            mov RAX,QWORD PTR [R12+1656]
            mov DWORD PTR [RBX+164],2
            mov QWORD PTR [RBX+156],RAX
            jmp .L_4152e4
.L_41531b:

            call __stack_chk_fail@PLT
.L_415320:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,8
.L_415333:

            call .L_433510

            mov EDX,13
            mov R13,RAX
            mov ESI,39017
            mov RDI,RBX
            call .L_409800

            movzx ESI,WORD PTR [R13+1666]
            mov RDI,RBX
            call .L_408f70

            movzx ESI,WORD PTR [R12+168]
            mov RDI,RBX
            call .L_409040

            movzx ESI,WORD PTR [R12+156]
            mov RDI,RBX
            call .L_4092e0

            movzx R13D,WORD PTR [RBP+58]
            mov RDI,RBX
            call .L_409b50

            movzx EAX,AL
            cmp AX,R13W
            jb .L_4153d4

            mov RDI,RBX
            call .L_409c00

            movzx EDX,WORD PTR [RBP+58]
            mov RDI,RBP
            mov RCX,RAX
            xor ESI,ESI
            call .L_4038b0

            movzx ESI,BYTE PTR [RBP+58]
            mov RDI,RBX
            call .L_409bc0

            movzx EAX,WORD PTR [RBP+58]
            mov WORD PTR [R12+138],AX
            add RSP,8
.L_4153cb:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4153d4:

            lea RCX,QWORD PTR [RIP+.L_4161c0]
            lea RSI,QWORD PTR [RIP+.L_416162]
            lea RDI,QWORD PTR [RIP+.L_416188]
            mov EDX,552
            call __assert_fail@PLT
.L_4153f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415400:

            push R12
            push RBP
            mov RBP,RDX
            push RBX
.L_415407:

            mov R12,RSI
            mov RBX,RDI
            call .L_433510

            cmp BYTE PTR [RBP+5],0
            je .L_415470

            cmp DWORD PTR [RAX+2580],1
            je .L_415470

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R12
            call .L_41e290

            test RAX,RAX
            mov RBP,RAX
            je .L_415470

            call .L_401240

            test WORD PTR [RBP+126],8191
            mov DWORD PTR [RBP+8],EAX
            mov BYTE PTR [RBP+27],0
            jne .L_415455

            cmp BYTE PTR [RBX+248],1
            je .L_415459
.L_415455:

            or BYTE PTR [RBP+26],128
.L_415459:

            lea RDI,QWORD PTR [RBX+192]
            pop RBX
.L_415461:

            pop RBP
            pop R12
            jmp .L_405290
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415470:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_415475:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415480:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,EDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RCX
            sub RSP,24
.L_41549a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea R13,QWORD PTR [RAX+2568]
            mov RSI,RBX
            mov R12,RAX
            mov RDI,R13
            call .L_41e290

            test RAX,RAX
            je .L_41551a

            and BYTE PTR [RAX+26],127
            mov RBX,RAX
            mov RAX,QWORD PTR [RBP+144]
            test RAX,RAX
            je .L_41551a

            cmp RAX,QWORD PTR [RBX+112]
            je .L_415558

            movzx EAX,WORD PTR [RAX+58]
            cmp WORD PTR [RBP+138],AX
            jb .L_415515
.L_4154ef:

            mov RDI,R13
            mov RSI,RBX
            call .L_41e310

            mov RDI,QWORD PTR [RBP+144]
            movzx R13D,AL
            mov ESI,R13D
            call .L_404130

            test AL,AL
            jne .L_4155a8
.L_415515:

            test R14D,R14D
            je .L_415540
.L_41551a:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41569d

            add RSP,24
.L_415532:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415540:

            lea RDI,QWORD PTR [R12+11232]
            mov RSI,RBX
            call .L_42e720

            jmp .L_41551a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415558:

            add BYTE PTR [RBP+258],1
            test R14D,R14D
            jne .L_4155d0

            mov BYTE PTR [RBX+123],0
            movzx EAX,WORD PTR [RBP+138]
            mov RDX,QWORD PTR [RBP+144]
.L_415576:

            cmp WORD PTR [RDX+58],AX
            mov RCX,QWORD PTR [RBX+112]
            jbe .L_415650

            cmp RDX,RCX
            jne .L_415515

            movzx EDX,WORD PTR [RBX+120]
            and AX,32767
            and DX,32768
            or EAX,EDX
            mov WORD PTR [RBX+120],AX
            jmp .L_415515
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4155a8:

            mov RDI,QWORD PTR [RBP+144]
            mov ESI,R13D
            call .L_404180

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,RBX
            call .L_42d4e0

            jmp .L_415515
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4155d0:

            movzx EAX,BYTE PTR [RBX+123]
            add EAX,1
            cmp AL,3
            mov BYTE PTR [RBX+123],AL
            ja .L_415628

            mov RAX,QWORD PTR [R15]
            movzx EAX,BYTE PTR [RAX+2]
            mov BYTE PTR [RBX+124],AL
            mov RAX,QWORD PTR [R15]
            test BYTE PTR [RAX],8
            je .L_41551a

            lea RSI,QWORD PTR [RSP+4]
            mov RDI,R15
            call .L_409530

            mov EAX,DWORD PTR [RSP+4]
            lea RSI,QWORD PTR [RSP+3]
            mov RDI,R15
            mov DWORD PTR [RBX+104],EAX
            call .L_409710

            movzx EAX,BYTE PTR [RSP+3]
            mov BYTE PTR [RBX+122],AL
            jmp .L_41551a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415628:

            and BYTE PTR [RBX+121],127
            mov BYTE PTR [RBX+123],0
            mov RDX,QWORD PTR [RBP+144]
            movzx EAX,WORD PTR [RDX+58]
            mov WORD PTR [RBP+138],AX
            jmp .L_415576
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415650:

            cmp RDX,RCX
            jne .L_4154ef

            movzx EAX,WORD PTR [RBX+120]
            lea RDI,QWORD PTR [RBX+34]
            mov QWORD PTR [RBX+112],0
            mov EDX,128
            and AX,32768
            mov WORD PTR [RBX+120],AX
            movzx EAX,AH
            shr AL,7
            movzx ESI,AL
            call .L_4140b0

            lea RDI,QWORD PTR [RBP+248]
            mov EDX,1
            mov RSI,RBX
            call .L_42d530

            jmp .L_4154ef
.L_41569d:

            call __stack_chk_fail@PLT
.L_4156a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4156b0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,16
.L_4156be:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RSP+2]
            mov RSI,R12
            mov RBP,RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],0
            lea R12,QWORD PTR [RBP+2568]
            mov WORD PTR [RSP+6],AX
            call .L_4405f0

            movzx ESI,WORD PTR [RSP+6]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_41ede0

            cmp AX,-2
            je .L_4157a0

            movzx ESI,AX
            mov RDI,R12
            call .L_41e380

            test RAX,RAX
            je .L_4157bd
.L_41572b:

            movzx EAX,WORD PTR [RAX+24]
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            movzx EAX,WORD PTR [RBP+1664]
            mov DWORD PTR [RBX+164],1
            mov BYTE PTR [RBX+184],1
            mov WORD PTR [RBX+156],AX
            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            mov WORD PTR [RBX+182],AX
            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            mov WORD PTR [RBX+180],AX
            xor EAX,EAX
.L_415781:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4157c4

            add RSP,16
.L_415795:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4157a0:

            movzx ESI,WORD PTR [RSP+6]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_41e380

            test RAX,RAX
            jne .L_41572b
.L_4157bd:

            mov EAX,2
            jmp .L_415781
.L_4157c4:

            call __stack_chk_fail@PLT
.L_4157c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4157d0:

            push R14
            push R13
            mov R14,R8
            push R12
            push RBP
            mov R13,RCX
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,64
.L_4157e7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RSP+10]
            mov R12,RAX
            movzx EDX,BL
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+10],0
            mov WORD PTR [RSP+14],AX
            call .L_4405a0

            test EAX,EAX
            jne .L_415890

            movzx EDX,BYTE PTR [RSP+10]
            and EDX,15
            cmp DL,15
            sete DL
            xor ECX,ECX
            movzx R8D,DL
            add EDX,5
            add R8,5
            sub BL,DL
            je .L_41586b

            add R8,RBP
            movzx EDX,WORD PTR [R8]
            rol DX,8
            mov ECX,EDX
            and CX,55296
            cmp CX,49152
            je .L_4158e0
.L_41585e:

            movzx EAX,BYTE PTR [R8]
            xor ECX,ECX
            and EAX,4294967264
            cmp AL,96
            je .L_4158a0
.L_41586b:

            mov RSI,QWORD PTR [RSP+56]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_41592b

            add RSP,64
.L_415885:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_415890:

            mov ECX,2
            jmp .L_41586b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4158a0:

            lea RBP,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R12+1552]
            movzx R9D,BL
            mov RCX,R14
            mov RDX,R13
            mov RSI,RBP
            call .L_43f910

            test EAX,EAX
            jle .L_415890

            movzx EDX,WORD PTR [R14]
            movzx ESI,WORD PTR [R13]
            lea RDI,QWORD PTR [R12+2568]
            mov RCX,RBP
            call .L_41fb00

            mov ECX,EAX
            jmp .L_41586b
.L_4158e0:

            cmp BL,4
            jbe .L_415890

            and DH,32
            jne .L_415918

            mov EAX,4
.L_4158ef:

            add R8,RAX
            movzx EAX,WORD PTR [R8]
            rol AX,8
            test AH,32
            setne AL
            add EAX,4
            sub BL,AL
            jne .L_41585e

            xor ECX,ECX
            jmp .L_41586b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415918:

            cmp BYTE PTR [R8+4],0
            mov ECX,EAX
            mov EAX,5
            je .L_4158ef

            jmp .L_41586b
.L_41592b:

            call __stack_chk_fail@PLT
.L_415930:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,72
.L_41594c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RSP+10]
            mov R13,RAX
            movzx EDX,BL
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+10],0
            mov WORD PTR [RSP+14],AX
            call .L_4405a0

            test EAX,EAX
            jne .L_4159a3

            movzx EAX,BYTE PTR [RSP+10]
            and EAX,15
            cmp AL,15
            sete AL
            movzx R8D,AL
            add EAX,5
            add R8,5
            sub BL,AL
            jne .L_4159d0
.L_4159a3:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_415ae7

            add RSP,72
.L_4159bb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4159d0:

            add R8,RBP
            movzx EAX,WORD PTR [R8]
            rol AX,8
            mov EDX,EAX
            and DX,55296
            cmp DX,49152
            je .L_415aa0
.L_4159ed:

            movzx EAX,BYTE PTR [R8]
            and EAX,4294967264
            cmp AL,96
            jne .L_4159a3

            lea RBP,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+1552]
            movzx R9D,BL
            mov RCX,R15
            mov RDX,R14
            mov RSI,RBP
            call .L_43f910

            test EAX,EAX
            jle .L_4159a3

            lea R14,QWORD PTR [R13+2568]
            add RBP,8
            mov RSI,RBP
            mov RDI,R14
            call .L_41e600

            test RAX,RAX
            mov RBX,RAX
            je .L_4159a3

            test BYTE PTR [RAX+26],16
            jne .L_4159a3

            movzx EDX,WORD PTR [RSP+12]
            lea RDI,QWORD PTR [R13+10688]
            mov RSI,RBP
            rol DX,8
            movzx EDX,DX
            call .L_4125b0

            movzx EBP,WORD PTR [RSP+12]
            mov RDI,R12
            call .L_433510

            movzx EAX,WORD PTR [RAX+1664]
            rol BP,8
            movzx EBP,BP
            sar EBP,10
            sar EAX,10
            cmp BPL,AL
            je .L_4159a3

            mov RSI,RBX
            mov RDI,R14
            call .L_4221d0

            jmp .L_4159a3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415aa0:

            cmp BL,4
            jbe .L_4159a3

            test AH,32
            je .L_415ae0

            cmp BYTE PTR [R8+4],0
            mov EAX,5
            jne .L_4159a3
.L_415abe:

            add R8,RAX
            movzx EAX,WORD PTR [R8]
            rol AX,8
            test AH,32
            setne AL
            add EAX,4
            sub BL,AL
            jne .L_4159ed

            jmp .L_4159a3
          .byte 0x90
.L_415ae0:

            mov EAX,4
            jmp .L_415abe
.L_415ae7:

            call __stack_chk_fail@PLT
.L_415aec:

            nop
            nop
            nop
            nop
.L_415af0:

            push R15
            push R14
            mov R14,R8
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov EBX,EDX
            mov RBP,RSI
            movzx R13D,BL
            sub RSP,88
.L_415b0d:

            mov QWORD PTR [RSP+8],RCX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RSP+42]
            mov R15,RAX
            mov EDX,R13D
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+56],0
            mov DWORD PTR [RSP+68],0
            mov DWORD PTR [RSP+42],0
            mov WORD PTR [RSP+46],AX
            call .L_4405a0

            test EAX,EAX
            jne .L_415b68

            cmp BYTE PTR [R14+5],0
            jne .L_415b90

            nop
            nop
            nop
            nop
.L_415b68:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_415dce

            add RSP,88
.L_415b80:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415b90:

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,48
            cmp AL,48
            jne .L_415b68

            movzx EAX,WORD PTR [RSP+44]
            lea R8,QWORD PTR [RSP+48]
            mov RSI,RBP
            mov EDX,R13D
            mov RDI,R12
            mov DWORD PTR [RSP+68],1
            mov DWORD PTR [RSP+56],1
            mov QWORD PTR [RSP+16],R8
            rol AX,8
            mov WORD PTR [RSP+60],AX
            movzx EAX,WORD PTR [RSP+46]
            rol AX,8
            mov WORD PTR [RSP+48],AX
            lea RAX,QWORD PTR [RSP+60]
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_415930

            movzx ESI,WORD PTR [RSP+48]
            cmp SI,WORD PTR [R15+1664]
            jne .L_415c60
.L_415bfc:

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,15
            cmp AL,15
            sete AL
            movzx EDX,AL
            add EAX,5
            lea RSI,QWORD PTR [RBP+RDX*1+5]
            sub EBX,EAX
            movzx EAX,WORD PTR [RSI]
            rol AX,8
            and AX,55296
            cmp AX,49152
            je .L_415d48

            movzx EAX,BYTE PTR [RSI]
            and EAX,4294967264
            cmp AL,96
            jne .L_415b68

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            movzx EDX,BL
            mov R9,R14
            mov RDI,R12
            call .L_442570

            jmp .L_415b68
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415c60:

            add R15,2568
            mov RDI,R15
            call .L_41e460

            test AL,AL
            jne .L_415bfc

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,15
            cmp AL,15
            jne .L_415c84

            movzx EAX,BYTE PTR [RSP+43]
.L_415c84:

            test AL,AL
            je .L_415b68

            mov RAX,QWORD PTR [RSP+8]
            movzx EDX,WORD PTR [RSP+48]
            mov RDI,R15
            movzx ESI,WORD PTR [RAX]
            call .L_41fab0

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_4157d0

            test EAX,EAX
            jne .L_415b68

            movzx EAX,BYTE PTR [RSP+42]
            mov EDX,EAX
            and EDX,15
            cmp DL,15
            je .L_415d85

            sub EDX,1
            cmp DL,14
            jbe .L_415d65

            mov EDX,4294967295
.L_415ce5:

            or EAX,15
            mov BYTE PTR [RSP+43],DL
            mov BYTE PTR [RSP+42],AL
            mov BYTE PTR [RBP],AL
.L_415cf3:

            movzx EDX,BYTE PTR [RSP+43]
            lea RAX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP+1],DL
.L_415cff:

            mov EDX,DWORD PTR [RSP+44]
            mov RDI,R12
            mov DWORD PTR [RAX],EDX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            mov ESI,1
            call .L_403790

            test RAX,RAX
            mov RBX,RAX
            je .L_415b68

            mov ESI,R13D
            mov RDI,RAX
            call .L_403470

            test EAX,EAX
            je .L_415d92

            mov RDI,RBX
            call .L_403400

            jmp .L_415b68
.L_415d48:

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            movzx EDX,BL
            mov R9,R14
            mov RDI,R12
            call .L_4421f0

            jmp .L_415b68
.L_415d65:

            and EAX,4294967280
            or EAX,EDX
            mov BYTE PTR [RSP+42],AL
            mov BYTE PTR [RBP],AL
            and EAX,15
            cmp AL,15
            je .L_415cf3

            lea RAX,QWORD PTR [RBP+1]
            jmp .L_415cff
.L_415d85:

            movzx ECX,BYTE PTR [RSP+43]
            lea EDX,DWORD PTR [RCX-1]
            jmp .L_415ce5
.L_415d92:

            mov EDX,R13D
            xor ESI,ESI
            mov RDI,RBX
            mov RCX,RBP
            call .L_403b10

            movzx EDX,BYTE PTR [R14+5]
            movzx EAX,BYTE PTR [RBX+78]
            mov RSI,RBX
            mov RDI,R12
            shl EDX,7
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            movzx EAX,WORD PTR [R14]
            mov WORD PTR [RBX+76],AX
            call .L_414610

            jmp .L_415b68
.L_415dce:

            call __stack_chk_fail@PLT
.L_415dd3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415de0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBX,ESI
            sub RSP,8
.L_415df3:

            call .L_433510

            lea ESI,DWORD PTR [RBX-16]
            lea RDI,QWORD PTR [RAX+7520]
            mov RBP,RAX
            movzx ESI,SIL
            call .L_42a3a0

            test RAX,RAX
            je .L_415ee8

            cmp BYTE PTR [RAX+2],0
            lea RBX,QWORD PTR [RAX+3]
            js .L_415ed8

            lea RDX,QWORD PTR [RAX+7]
            mov ECX,5
.L_415e2e:

            movzx EDX,BYTE PTR [RDX]
            add RDX,RCX
            add RBX,RDX
            movzx EDX,BYTE PTR [RAX+1]
            lea R14,QWORD PTR [RAX+RDX*1+2]
            cmp R14,RBX
            jbe .L_415ee8

            add RBP,2568
            mov R15D,4294967294
            mov R12D,16
            jmp .L_415e6e
          .byte 0x66
          .byte 0x90
.L_415e60:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RBX
            jbe .L_415eb8
.L_415e6e:

            movzx EDX,BYTE PTR [RBX]
            sar EDX,1
            cmp EDX,6
            jne .L_415e60

            movzx ESI,WORD PTR [RBX+2]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_41ef70

            cmp R15W,-2
            je .L_415e97

            cmp AL,R12B
            jae .L_415e60
.L_415e97:

            mov R12D,EAX
            movzx EAX,BYTE PTR [RBX+1]
            movzx R15D,WORD PTR [RBX+2]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            rol R15W,8
            cmp R14,RBX
            ja .L_415e6e

            nop
            nop
            nop
            nop
            nop
            nop
.L_415eb8:

            cmp R15W,-2
            je .L_415ee8

            mov WORD PTR [R13],R15W
            add RSP,8
.L_415ec8:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415ed8:

            mov RDX,RBX
            mov ECX,1
            jmp .L_415e2e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415ee8:

            add RSP,8
            mov EAX,2
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_415efc:

            nop
            nop
            nop
            nop
.L_415f00:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [R12+24]
            sub RSP,40
.L_415f19:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            lea R13,QWORD PTR [RAX+2568]
            mov RSI,RBX
            mov R14,RAX
            mov RDI,R13
            call .L_41a720

            test AL,AL
            je .L_416038

            movzx EDX,WORD PTR [R12+38]
            rol DX,8
            movzx EAX,DX
            sar EAX,10
            cmp EAX,63
            je .L_416008
.L_415f64:

            mov WORD PTR [RBP+182],DX
.L_415f6b:

            cmp DX,-2
            je .L_416008

            movzx ESI,WORD PTR [R14+1664]
            movzx EDX,DX
            mov RCX,R12
            mov RDI,R13
            mov WORD PTR [RBP+180],SI
            call .L_41fb00

            test EAX,EAX
            mov EBX,EAX
            jne .L_41600d

            movzx ESI,WORD PTR [RBP+182]
            mov RDI,R13
            call .L_41ede0

            cmp WORD PTR [RBP+182],AX
            mov WORD PTR [RBP+168],AX
            mov DWORD PTR [RBP+176],1
            je .L_41600d

            movzx EAX,WORD PTR [RBP+180]
            mov DWORD PTR [RBP+164],1
            mov BYTE PTR [RBP+184],1
            mov WORD PTR [RBP+156],AX
            jmp .L_41600d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415fe8:

            lea RDX,QWORD PTR [RSP+22]
            lea RDI,QWORD PTR [R14+7520]
            and ESI,15
            call .L_4283c0

            test EAX,EAX
            je .L_4160c8

            nop
            nop
            nop
            nop
.L_416008:

            mov EBX,2
.L_41600d:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_41615d

            add RSP,40
.L_416027:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_416038:

            mov RSI,RBX
            mov RDI,R13
            call .L_41c070

            test AL,AL
            je .L_416090

            movzx ESI,WORD PTR [R12+38]
            rol SI,8
            cmp SI,64512
            je .L_4160b0

            cmp SI,64527
            jbe .L_415fe8

            lea EAX,DWORD PTR [RSI+1008]
            cmp AX,31
            ja .L_416008

            lea RDX,QWORD PTR [RBP+182]
            movzx ESI,SI
            mov RDI,RBP
            call .L_415de0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41600d
.L_416083:

            movzx EDX,WORD PTR [RBP+182]
            jmp .L_415f6b
          .byte 0x90
.L_416090:

            mov RSI,RBX
            mov RDI,R13
            call .L_41e600

            test RAX,RAX
            je .L_416108

            movzx EDX,WORD PTR [RAX+24]
            jmp .L_415f64
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4160b0:

            mov RDI,R13
            call .L_4171f0

            mov EDX,EAX
            shl EDX,10
            jmp .L_415f64
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4160c8:

            movzx EDX,WORD PTR [RSP+22]
            test DX,511
            je .L_415f64

            and DX,64512
            mov RDI,R13
            mov DWORD PTR [RSP+12],EDX
            mov DWORD PTR [RSP+8],EDX
            call .L_416dd0

            mov EDX,DWORD PTR [RSP+12]
            cmp AX,DX
            jne .L_415f64

            movzx EDX,WORD PTR [RSP+22]
            jmp .L_415f64
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416108:

            lea R15,QWORD PTR [R14+7520]
            mov RSI,RBX
            mov RDI,R15
            call .L_428480

            test AL,AL
            lea R8,QWORD PTR [RBP+182]
            je .L_416146

            lea RDI,QWORD PTR [R14+10688]
            mov RSI,RBX
            mov RDX,R8
            call .L_412870

            test EAX,EAX
            mov EBX,EAX
            je .L_416083

            jmp .L_41600d
.L_416146:

            lea RSI,QWORD PTR [R12+8]
            xor ECX,ECX
            mov RDX,RBX
            mov RDI,R15
            call .L_428990

            jmp .L_416083
.L_41615d:

            call __stack_chk_fail@PLT
.L_416162:
          .string "thread/mesh_forwarder_ftd.cpp"
.L_416180:
          .string "false"
          .byte 0x66
          .byte 0x90
.L_416188:
          .string "aMessage.GetLength() <= aFrame.GetMaxPayloadLength()"
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4161c0:

            outsd DX,DWORD PTR [RSI]
            je .L_416208
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x68
          .byte 0x46
          .byte 0x6f
          .byte 0x72
          .byte 0x77
          .byte 0x61
          .byte 0x72
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x6e
          .byte 0x64
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x68
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x63
          .byte 0x3a
          .byte 0x3a
          .byte 0x46
          .byte 0x72
          .byte 0x61
          .byte 0x6d
          .byte 0x65
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416208:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_416220:
          .string "void ot::MeshForwarder::PrepareIndirectTransmission(ot::Message&, const ot::Child&)"
# WARNING: found overlapping blocks at address 15ffd
# WARNING: found overlapping blocks at address 15fff
# WARNING: found overlapping blocks at address 1600b
# WARNING: found overlapping blocks at address 1600d
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_416280:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+248]
            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RIP+.L_41c060]
            sub RSP,40
.L_416298:

            mov RDX,RDI
            mov RDI,RBX
.L_41629e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,19788
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_411a60

            test EAX,EAX
            jne .L_4162d8

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_411ac0
.L_4162d8:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4162ef

            add RSP,40
.L_4162ec:

            pop RBX
            pop RBP
            ret 
.L_4162ef:

            call __stack_chk_fail@PLT
.L_4162f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416300:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,64
.L_41630b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            mov RBX,RAX
            mov EAX,DWORD PTR [RBP+12]
            lea R12,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            mov DWORD PTR [RSP+48],0
            lea EDX,DWORD PTR [RAX-2]
            movaps XMMWORD PTR [RSP+16],XMM0
            cmp EDX,2
            movaps XMMWORD PTR [RSP+32],XMM0
            ja .L_416410

            mov RDI,RBP
            movzx EDX,BYTE PTR [RBP+56]
            mov BYTE PTR [RSP+16],AL
            mov BYTE PTR [RSP+17],DL
            call .L_433510

            movzx EAX,WORD PTR [RAX+1664]
            cmp DWORD PTR [RBP+12],2
            mov WORD PTR [RSP+18],AX
            mov EAX,DWORD PTR [RBP+2]
            bswap EAX
            mov DWORD PTR [RSP+32],EAX
            mov RAX,QWORD PTR [RBX+1656]
            mov QWORD PTR [RSP+36],RAX
            mov RAX,QWORD PTR [RBP+472]
            mov QWORD PTR [RSP+44],RAX
            je .L_416440
.L_416398:

            mov EAX,DWORD PTR [RBX+1384]
            mov RDI,RBX
            mov DWORD PTR [RSP+20],EAX
            mov EAX,DWORD PTR [RBX+1456]
            add EAX,1000
            mov DWORD PTR [RSP+24],EAX
            mov EAX,DWORD PTR [RBX+1452]
            add EAX,1000
            mov DWORD PTR [RSP+28],EAX
            call .L_4334e0

            mov ECX,36
            mov RDX,R12
            mov ESI,3
            mov RDI,RAX
            call .L_401540

            test EAX,EAX
            jne .L_4163f5

            mov EDX,DWORD PTR [RSP+24]
            mov DWORD PTR [RBX+1464],EDX
            mov EDX,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+1460],EDX
.L_4163f5:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416472

            add RSP,64
.L_416409:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_416410:

            mov RDI,RBX
            mov EAX,36
            mov WORD PTR [RSP+6],AX
            call .L_4334e0

            lea R8,QWORD PTR [RSP+6]
            mov RCX,R12
            xor EDX,EDX
            mov ESI,3
            mov RDI,RAX
            call .L_401530

            jmp .L_416398
          .byte 0x66
          .byte 0x90
.L_416440:

            mov RAX,QWORD PTR [RBP+16]
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_4334e0

            lea RDX,QWORD PTR [RSP+8]
            mov ECX,8
            mov ESI,4
            mov RDI,RAX
            call .L_401540

            test EAX,EAX
            je .L_416398

            jmp .L_4163f5
.L_416472:

            call __stack_chk_fail@PLT
.L_416477:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416480:

            movzx EAX,BYTE PTR [RDI+360]
            ret 
.L_416488:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416490:

            mov BYTE PTR [RDI+360],0
            mov BYTE PTR [RDI+361],0
            mov RSI,QWORD PTR [RDI+352]
            mov RAX,QWORD PTR [RDI+344]
            xor EDI,EDI
            jmp RAX
.L_4164b0:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_4164b7:

            mov RBX,RDI
            call .L_433510

            mov ECX,DWORD PTR [RBX+12]
            mov RBP,RAX
            mov EAX,13
            test ECX,ECX
            je .L_41656b

            mov EDX,DWORD PTR [RBX+60]
            mov EAX,5
            test EDX,EDX
            jne .L_41656b

            cmp DWORD PTR [RBX+64],1
            je .L_416580
.L_4164ec:

            pxor XMM0,XMM0
            mov QWORD PTR [RBX+236],0
            mov DWORD PTR [RBX+60],2
            mov DWORD PTR [RBX+180],R12D
            movups XMMWORD PTR [RBX+220],XMM0
            and BYTE PTR [RBX+230],248
            cmp R12D,3
            movups XMMWORD PTR [RBX+204],XMM0
            je .L_41652a

            test BYTE PTR [RBX+56],2
            jne .L_416570
.L_41652a:

            lea RDI,QWORD PTR [RBP+2256]
            mov ESI,1
            call .L_440c70

            call .L_401460

            mov EBP,EAX
            call .L_401240

            mov EDX,91625969
            mov ESI,EAX
            mov EAX,EBP
            mul EDX
            lea RDI,QWORD PTR [RBX+72]
            shr EDX,4
            imul EDX,EDX,750
            sub EBP,EDX
            lea EDX,DWORD PTR [RBP+1]
            call .L_433770

            xor EAX,EAX
.L_41656b:

            pop RBX
.L_41656c:

            pop RBP
            pop R12
            ret 
.L_416570:

            lea RDI,QWORD PTR [RBP+2568]
            call .L_41cb50

            jmp .L_41652a
          .byte 0x66
          .byte 0x90
.L_416580:

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40a580

            test EAX,EAX
            sete AL
            movzx EAX,AL
            add EAX,EAX
            mov DWORD PTR [RBX+64],EAX
            jmp .L_4164ec
.L_41659e:

            nop
            nop
.L_4165a0:

            mov EAX,DWORD PTR [RDI+12]
            sub EAX,2
            cmp EAX,2
            setbe AL
            ret 
.L_4165ad:

            nop
            nop
            nop
.L_4165b0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_4165b9:

            call .L_433510

            cmp DWORD PTR [RBX+12],1
            mov RBP,RAX
            jne .L_416630
.L_4165c7:

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],1
            mov DWORD PTR [RBX+60],0
            call .L_433690

            lea RDI,QWORD PTR [RBX+120]
            call .L_433690

            lea RDI,QWORD PTR [RBP+2256]
            mov ESI,1
            call .L_440c70

            and BYTE PTR [RBP+1564],127
            lea RDI,QWORD PTR [RBP+2568]
            call .L_41cb10

            mov RDI,RBP
            call .L_4334f0

            mov RDI,RBP
            mov BYTE PTR [RAX],0
            call .L_4334f0

            mov BYTE PTR [RAX+120],0
            add RSP,8
.L_416626:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_416630:

            mov RDI,RBX
            call .L_433530

            mov ESI,4
            mov RDI,RAX
            call .L_402d80

            cmp DWORD PTR [RBX+12],4
            jne .L_4165c7

            lea RSI,QWORD PTR [RBX+368]
            mov RDI,RBP
            call .L_411720

            jmp .L_4165c7
.L_416663:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416670:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_416677:

            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+1368]
            mov RBP,RAX
            call .L_413b50

            mov RDI,RBX
            call .L_4165b0

            lea RSI,QWORD PTR [RBX+496]
            mov RDI,RBP
            call .L_411720

            test R12B,R12B
            je .L_4166c2

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40a6e0

            lea RDI,QWORD PTR [RBP+1208]
            call .L_40a6e0
.L_4166c2:

            mov DWORD PTR [RBX+12],0
            xor EAX,EAX
            pop RBX
.L_4166cc:

            pop RBP
            pop R12
            ret 
.L_4166d0:

            push RBX
            xor ESI,ESI
            mov RBX,RDI
            call .L_416670

            test EAX,EAX
            je .L_4166e8

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4166e8:

            lea RDI,QWORD PTR [RBX+248]
            pop RBX
            jmp .L_411b20
.L_4166f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416700:

            cmp WORD PTR [RDI+364],-1
            je .L_416715

            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-2]
            cmp EDX,1
            jbe .L_416720
.L_416715:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416720:

            push RBX
.L_416721:

            test BYTE PTR [RDI+56],2
            mov RBX,RDI
            je .L_41673d

            cmp EAX,3
            je .L_41673d

            call .L_433510

            cmp BYTE PTR [RAX+7245],0
            jne .L_416770
.L_41673d:

            mov EAX,4294967295
            mov RDI,RBX
            mov WORD PTR [RBX+364],AX
            call .L_433510

            movzx ECX,BYTE PTR [RBX+363]
            mov ESI,1
            lea RDI,QWORD PTR [RAX+11296]
            pop RBX
.L_416765:

            shl ESI,CL
            jmp .L_43e280
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416770:

            pop RBX
            ret 
.L_416772:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416780:

            lea RAX,QWORD PTR [RDI+432]
            ret 
.L_416788:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416790:

            push R12
            push RBP
            push RBX
.L_416794:

            mov RBX,RDI
            lea R12,QWORD PTR [RBX+432]
            call .L_433510

            mov RSI,R12
            mov RBP,RAX
            mov RDI,RAX
            call .L_411720

            lea RSI,QWORD PTR [RBP+1656]
            mov RDI,R12
            call .L_4101d0

            mov RSI,R12
            mov RDI,RBP
            call .L_4116c0

            mov RDI,RBX
            call .L_433530

            mov ESI,8
            mov RDI,RAX
            call .L_402d80

            pop RBX
.L_4167e1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_4167e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4167f0:

            lea RAX,QWORD PTR [RDI+496]
            ret 
.L_4167f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416800:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,24
            call .L_433510

            mov RBX,RAX
            mov RAX,QWORD PTR [R15+464]
            cmp QWORD PTR [RBP],RAX
            jne .L_416840
.L_416829:

            add RSP,24
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_416840:

            lea R12,QWORD PTR [R15+464]
            mov RDI,RBX
            lea R14,QWORD PTR [R15+528]
            lea R13,QWORD PTR [R15+552]
            mov RSI,R12
            call .L_411720

            lea RAX,QWORD PTR [R15+496]
            mov RDI,RBX
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_411720

            mov RSI,R14
            mov RDI,RBX
            call .L_411460

            mov RSI,R13
            mov RDI,RBX
            call .L_411460

            cmp WORD PTR [R15+414],65279
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [R15+464],RAX
            mov QWORD PTR [R15+496],RAX
            je .L_4168dd

            lea RBP,QWORD PTR [R15+400]
            mov RDI,RBX
            mov RSI,RBP
            call .L_411720

            mov RAX,QWORD PTR [R15+464]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [R15+400],RAX
            call .L_4116c0

            mov RAX,QWORD PTR [R15+464]
.L_4168dd:

            mov RSI,R12
            mov RDI,RBX
            mov BYTE PTR [R15+531],64
            mov QWORD PTR [R15+532],RAX
            mov BYTE PTR [R15+555],64
            mov QWORD PTR [R15+556],RAX
            call .L_4116c0

            mov RSI,R14
            mov RDI,RBX
            call .L_411400

            mov RSI,R13
            mov RDI,RBX
            call .L_411400

            cmp DWORD PTR [R15+12],1
            jg .L_416940
.L_416923:

            mov RDI,R15
            call .L_433530

            mov ESI,16
            mov RDI,RAX
            call .L_402d80

            jmp .L_416829
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_416940:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_4116c0

            cmp DWORD PTR [R15+12],4
            jne .L_416923

            lea RBP,QWORD PTR [R15+368]
            mov RDI,RBX
            mov RSI,RBP
            call .L_411720

            mov RAX,QWORD PTR [R15+464]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [R15+368],RAX
            call .L_4116c0

            jmp .L_416923
.L_416981:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416990:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+44]
            xor R13D,R13D
            sub RSP,56
.L_4169ad:

            mov WORD PTR [RDI-44],SI
            mov BYTE PTR [RDI-34],0
            mov DWORD PTR [RDI-32],0
            lea R15,QWORD PTR [RBX+496]
            lea RBP,QWORD PTR [RBX+432]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_414240

            lea RAX,QWORD PTR [RIP+.L_41b5c0]
            xor EDI,EDI
            mov BYTE PTR [RBX+56],12
            mov WORD PTR [RBX+148],DI
            lea RDI,QWORD PTR [RBX+152]
            mov DWORD PTR [RBX+60],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+64],0
            mov DWORD PTR [RBX+80],0
            mov DWORD PTR [RBX+104],0
            lea R14,QWORD PTR [RSP+32]
            mov QWORD PTR [RBX+88],RAX
            lea RAX,QWORD PTR [RIP+.L_418940]
            mov DWORD PTR [RBX+128],0
            mov DWORD PTR [RBX+144],0
            mov BYTE PTR [RBX+150],0
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RBX+96]
            mov QWORD PTR [RBX+112],RAX
            lea RAX,QWORD PTR [RIP+.L_41b640]
            mov QWORD PTR [RBX+120],RAX
            lea RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+136],RAX
            call .L_404490

            xor R8D,R8D
            lea RDI,QWORD PTR [RBX+232]
            mov DWORD PTR [RBX+180],0
            mov WORD PTR [RBX+188],R8W
            mov DWORD PTR [RBX+184],0
            mov BYTE PTR [RBX+190],0
            mov BYTE PTR [RBX+199],0
            mov BYTE PTR [RBX+200],0
            mov BYTE PTR [RBX+201],0
            call .L_414240

            lea RDI,QWORD PTR [R12+12720]
            call .L_4334f0

            lea RDI,QWORD PTR [RBX+248]
            lea RSI,QWORD PTR [RAX+104]
            call .L_411a30

            lea RDI,QWORD PTR [RBX+328]
            lea RDX,QWORD PTR [RIP+.L_41b610]
            mov RCX,RBX
            mov RSI,R12
            mov DWORD PTR [RBX+320],240
            call .L_4051f0

            lea RAX,QWORD PTR [RBX+576]
            lea RSI,QWORD PTR [RIP+.L_417ff0]
            mov RDX,RBX
            mov QWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+352],0
            mov RDI,RAX
            mov BYTE PTR [RBX+360],0
            mov BYTE PTR [RBX+361],0
            mov DWORD PTR [RBX+362],4294901771
            mov QWORD PTR [RSP+8],RAX
            call .L_402c40

            pxor XMM0,XMM0
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RBX+8],R9W
            mov QWORD PTR [RBX],0
            mov WORD PTR [RBX+197],R10W
            mov QWORD PTR [RBX+189],0
            mov R11D,4294934782
            movups XMMWORD PTR [RBX+432],XMM0
            mov QWORD PTR [RBX+48],0
            mov QWORD PTR [RBX+160],0
            mov RDI,RBX
            movups XMMWORD PTR [RBX+16],XMM0
            movups XMMWORD PTR [RBX+32],XMM0
            movups XMMWORD PTR [RBX+448],XMM0
            movups XMMWORD PTR [RBX+464],XMM0
            movups XMMWORD PTR [RBX+480],XMM0
            movups XMMWORD PTR [RBX+496],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            mov BYTE PTR [RBX+168],0
            movups XMMWORD PTR [R15+16],XMM0
            mov WORD PTR [RBX+432],R11W
            mov QWORD PTR [RBX+544],0
            movups XMMWORD PTR [RBX+528],XMM0
            movups XMMWORD PTR [RBX+552],XMM0
            movups XMMWORD PTR [RBX+368],XMM0
            movups XMMWORD PTR [RBX+384],XMM0
            movups XMMWORD PTR [RBX+204],XMM0
            movups XMMWORD PTR [RBX+220],XMM0
            mov QWORD PTR [RBX+568],0
            mov QWORD PTR [RBX+236],0
            call .L_433510

            lea RSI,QWORD PTR [RAX+1656]
            mov RDI,RBP
            call .L_4101d0

            or BYTE PTR [RBX+449],3
            mov RDI,RBX
            mov BYTE PTR [RBX+448],64
            call .L_433510

            mov RSI,RBP
            mov RDI,RAX
            mov EBP,4294967039
            call .L_4116c0

            movzx EAX,BYTE PTR [RBX+385]
            mov BYTE PTR [RBX+384],128
            mov RDI,RBX
            movdqa XMM0,XMMWORD PTR [RSP+16]
            mov BYTE PTR [RSP+32],253
            movups XMMWORD PTR [RBX+416],XMM0
            and EAX,4294967168
            mov BYTE PTR [RBX+416],128
            mov BYTE PTR [RBX+417],31
            movups XMMWORD PTR [RBX+400],XMM0
            or EAX,31
            mov WORD PTR [RBX+414],BP
            mov BYTE PTR [RBX+385],AL
            lea RBP,QWORD PTR [RBX+480]
            call .L_433510

            mov EDX,DWORD PTR [RAX+1686]
            movzx EAX,BYTE PTR [RAX+1690]
            mov DWORD PTR [RSP+33],EDX
            mov BYTE PTR [R14+5],AL
            mov WORD PTR [RSP+38],R13W
            lea R13,QWORD PTR [RBX+472]
            nop
            nop
            nop
            nop
            nop
            nop
.L_416cd0:

            add R13,1
            call .L_401460

            cmp R13,RBP
            mov BYTE PTR [R13-1],AL
            jne .L_416cd0

            movzx EAX,BYTE PTR [RBX+481]
            mov RDI,RBX
            mov BYTE PTR [RBX+480],64
            mov DWORD PTR [RBX+504],4278190080
            mov BYTE PTR [RBX+512],64
            mov BYTE PTR [RBX+513],159
            and EAX,4294967168
            or EAX,31
            mov BYTE PTR [RBX+481],AL
            mov EAX,254
            mov WORD PTR [RBX+508],AX
            call .L_433510

            mov RDI,RAX
            call .L_4334f0

            mov EDX,13055
            mov ECX,13311
            mov QWORD PTR [RAX+176],R15
            mov RSI,R14
            mov WORD PTR [RBX+528],DX
            mov WORD PTR [RBX+552],CX
            mov RDI,RBX
            mov DWORD PTR [RBX+540],16777216
            mov DWORD PTR [RBX+564],16777216
            call .L_416800

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R12+32]
            call .L_402c90

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_416d9c

            add RSP,56
.L_416d91:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_416d9c:

            call __stack_chk_fail@PLT
.L_416da1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416db0:

            lea RAX,QWORD PTR [RDI+528]
            ret 
.L_416db8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416dc0:

            lea RAX,QWORD PTR [RDI+552]
            ret 
.L_416dc8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416dd0:

            sub RSP,8
            call .L_433510

            movzx EAX,WORD PTR [RAX+1664]
            add RSP,8
            ret 
.L_416de5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416df0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R13,QWORD PTR [R12+496]
            mov EBX,ESI
            sub RSP,8
.L_416e07:

            call .L_433510

            mov RSI,R13
            mov RDI,RAX
            mov RBP,RAX
            call .L_411720

            cmp BX,-2
            je .L_416e3a

            mov EAX,EBX
            mov RSI,R13
            mov RDI,RBP
            rol AX,8
            mov WORD PTR [R12+510],AX
            call .L_4116c0
.L_416e3a:

            lea RDI,QWORD PTR [RBP+1560]
            movzx ESI,BX
            call .L_405eb0

            mov RDI,RBP
            call .L_4334f0

            mov WORD PTR [RAX+122],BX
            add RSP,8
.L_416e59:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_416e62:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416e70:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,64
.L_416e7f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            mov RBX,RAX
            lea R14,QWORD PTR [RSP+6]
            lea R13,QWORD PTR [RSP+16]
            call .L_40a580

            lea RDI,QWORD PTR [RBX+1208]
            call .L_40a580

            mov EDX,36
            mov RDI,RBX
            mov WORD PTR [RSP+6],DX
            call .L_4334e0

            xor EDX,EDX
            mov R8,R14
            mov RCX,R13
            mov ESI,3
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            jne .L_417000

            cmp WORD PTR [RSP+6],35
            jbe .L_417020

            mov ESI,DWORD PTR [RSP+20]
            lea RDI,QWORD PTR [RBX+1368]
            call .L_413f50

            mov EAX,DWORD PTR [RSP+24]
            cmp BYTE PTR [RSP+16],1
            mov DWORD PTR [RBX+1456],EAX
            mov EAX,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+1452],EAX
            jbe .L_417000

            movzx EAX,BYTE PTR [RSP+17]
            movzx ESI,WORD PTR [RSP+18]
            mov RDI,R12
            mov BYTE PTR [R12+56],AL
            call .L_416df0

            lea RSI,QWORD PTR [R13+20]
            lea RDI,QWORD PTR [RBX+1560]
            call .L_405e30

            mov RDI,R12
            call .L_416790

            mov RAX,QWORD PTR [RSP+44]
            mov QWORD PTR [R12+472],RAX
            movzx EAX,WORD PTR [RSP+18]
            cmp AX,-2
            je .L_417000

            test AX,511
            je .L_417030

            mov EAX,8
            mov RDI,RBX
            mov WORD PTR [RSP+6],AX
            call .L_4334e0

            lea RCX,QWORD PTR [RSP+8]
            xor EDX,EDX
            mov R8,R14
            mov ESI,4
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            jne .L_417000

            cmp WORD PTR [RSP+6],7
            jbe .L_417068

            pxor XMM0,XMM0
            mov RAX,QWORD PTR [RSP+8]
            mov QWORD PTR [R12+48],0
            movups XMMWORD PTR [R12+16],XMM0
            mov QWORD PTR [R12+16],RAX
            movzx EAX,WORD PTR [RSP+18]
            movups XMMWORD PTR [R12+32],XMM0
            sar EAX,10
            shl EAX,10
            mov WORD PTR [R12+40],AX
            movzx EAX,BYTE PTR [R12+42]
            and EAX,4294967168
            or EAX,121
            mov BYTE PTR [R12+42],AL
            nop
            nop
            nop
            nop
            nop
            nop
.L_417000:

            mov RDX,QWORD PTR [RSP+56]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_41706f

            add RSP,64
.L_417016:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_417020:

            mov EBP,23
            jmp .L_417000
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417030:

            mov RDI,R12
            lea R13,QWORD PTR [RBX+2568]
            call .L_433510

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,R13
            sar ESI,10
            call .L_41f0e0

            mov EAX,DWORD PTR [RSP+32]
            mov RDI,R13
            mov DWORD PTR [RBX+7240],EAX
            call .L_41f420

            jmp .L_417000
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_417068:

            mov EBP,6
            jmp .L_417000
.L_41706f:

            call __stack_chk_fail@PLT
.L_417074:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417080:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_417087:

            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RBX+12],2
            mov RBP,RAX
            jne .L_417120
.L_41709c:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_416df0

            mov DWORD PTR [RBX+12],2
            mov DWORD PTR [RBX+60],0
            mov DWORD PTR [RBX+64],0
            mov BYTE PTR [RBX+188],0
            and BYTE PTR [RBP+1564],127
            movzx EAX,BYTE PTR [RBX+56]
            test AL,8
            jne .L_417158
.L_4170d7:

            test AL,2
            je .L_4170ed

            mov ESI,DWORD PTR [RBX+180]
            lea RDI,QWORD PTR [RBP+2568]
            call .L_424190
.L_4170ed:

            lea RDI,QWORD PTR [RBP+7248]
            call .L_427f30

            mov RDI,RBP
            call .L_4334f0

            mov RDI,RBP
            mov BYTE PTR [RAX],0
            call .L_4334f0

            mov RDI,RBX
            mov BYTE PTR [RAX+120],0
            call .L_416700

            pop RBX
.L_417119:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_417120:

            mov RDI,RBX
            call .L_433530

            mov ESI,4
            mov RDI,RAX
            call .L_402d80

            cmp DWORD PTR [RBX+12],4
            jne .L_41709c

            lea RSI,QWORD PTR [RBX+368]
            mov RDI,RBP
            call .L_411720

            jmp .L_41709c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417158:

            imul R12D,DWORD PTR [RBX+320],1000
            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov ESI,EAX
            sub R12D,4000
            mov EDX,R12D
            call .L_433770

            movzx EAX,BYTE PTR [RBX+56]
            jmp .L_4170d7
.L_417186:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417190:

            push RBX
.L_417191:

            mov RBX,RDI
            call .L_433510

            mov ECX,DWORD PTR [RBX+12]
            mov EDX,13
            test ECX,ECX
            je .L_4171d1

            mov EDX,DWORD PTR [RBX+64]
            test EDX,EDX
            je .L_4171d8
.L_4171ac:

            mov RDI,RBX
            call .L_4165b0

            and BYTE PTR [RBX+42],248
            mov ESI,65534
            mov RDI,RBX
            call .L_416df0

            xor ESI,ESI
            mov RDI,RBX
            call .L_4164b0

            xor EDX,EDX
.L_4171d1:

            mov EAX,EDX
            pop RBX
.L_4171d4:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4171d8:

            lea RDI,QWORD PTR [RAX+1208]
            call .L_40a6e0

            jmp .L_4171ac
.L_4171e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4171f0:

            movzx EAX,BYTE PTR [RDI+9]
            ret 
.L_4171f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417200:

            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            mov R12D,ECX
            sub RSP,8
.L_417215:

            mov EAX,DWORD PTR [RDI+2]
            bswap EAX
            cmp ESI,EAX
            je .L_417279

            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41c750

            mov EAX,DWORD PTR [RBX+2]
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RBX+144],EAX
            call .L_433510

            movzx EAX,BYTE PTR [RAX+3312]
            mov RDI,RBX
            mov BYTE PTR [RBX+148],AL
            call .L_433510

            movzx EAX,BYTE PTR [RAX+7228]
            mov RDI,RBX
            mov BYTE PTR [RBX+149],AL
            call .L_433530

            mov ESI,128
            mov RDI,RAX
            call .L_402d80
.L_417279:

            bswap EBP
            mov BYTE PTR [RBX+6],R13B
            mov BYTE PTR [RBX+9],R12B
            mov DWORD PTR [RBX+2],EBP
            add RSP,8
.L_41728a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_417291:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4172a0:

            lea RAX,QWORD PTR [RDI+496]
            ret 
.L_4172a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4172b0:

            lea RAX,QWORD PTR [RDI+464]
            ret 
.L_4172b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4172c0:

            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,8
.L_4172cc:

            call .L_433510

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_41730b

            mov RAX,QWORD PTR [RBP+496]
            mov DWORD PTR [RBX+8],4278190080
            xor EDX,EDX
            mov QWORD PTR [RBX],RAX
            mov EAX,254
            mov WORD PTR [RBX+12],AX
            movzx EAX,BYTE PTR [RBP+9]
            shl EAX,10
            rol AX,8
            mov WORD PTR [RBX+14],AX
.L_41730b:

            add RSP,8
.L_41730f:

            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_417314:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417320:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_433510

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_41735b

            mov RAX,QWORD PTR [RBX+496]
            xor EDX,EDX
            mov QWORD PTR [RBP],RAX
            movabs RAX,70932789330968576
            mov QWORD PTR [RBP+8],RAX
.L_41735b:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_417364:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417370:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_417377:

            mov RBP,RDX
            mov EBX,ESI
            call .L_433510

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_4173be

            mov RAX,QWORD PTR [R12+496]
            movzx EBX,BL
            mov DWORD PTR [RBP+8],4278190080
            sub BX,1008
            xor EDX,EDX
            rol BX,8
            mov QWORD PTR [RBP],RAX
            mov EAX,254
            mov WORD PTR [RBP+14],BX
            mov WORD PTR [RBP+12],AX
.L_4173be:

            pop RBX
.L_4173bf:

            mov EAX,EDX
            pop RBP
            pop R12
            ret 
.L_4173c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4173d0:

            cmp DWORD PTR [RDI+12],4
            je .L_4173e0

            mov EAX,13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4173e0:

            push RBP
            lea RBP,QWORD PTR [RDI+368]
            push RBX
            mov RBX,RDI
            sub RSP,8
            mov RSI,RBP
            call .L_417320

            test EAX,EAX
            je .L_417408

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417408:

            mov RDI,RBX
            call .L_433510

            add RSP,8
            mov RSI,RBP
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_4116c0
.L_417421:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417430:

            push RBX
            mov RBX,RDI
            call .L_433510

            movzx EDX,BYTE PTR [RAX+7785]
            mov BYTE PTR [RBX+7],DL
            movzx EAX,BYTE PTR [RAX+7784]
            mov BYTE PTR [RBX+8],AL
            mov RAX,RBX
            pop RBX
            ret 
.L_417452:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417460:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_41746c:

            call .L_433510

            movzx EDX,BYTE PTR [RAX+7785]
            cmp DWORD PTR [RBX+12],1
            mov BYTE PTR [RBX+7],DL
            movzx EAX,BYTE PTR [RAX+7784]
            mov BYTE PTR [RBX+8],AL
            jbe .L_4174c0

            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBP],EAX
            movzx EAX,BYTE PTR [RBX+6]
            mov BYTE PTR [RBP+4],AL
            movzx EAX,BYTE PTR [RBX+7]
            mov BYTE PTR [RBP+5],AL
            movzx EAX,BYTE PTR [RBX+8]
            mov BYTE PTR [RBP+6],AL
            movzx EAX,BYTE PTR [RBX+9]
            mov BYTE PTR [RBP+7],AL
            add RSP,8
.L_4174b3:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4174c0:

            add RSP,8
            mov EAX,16
            pop RBX
            pop RBP
            ret 
.L_4174cc:

            nop
            nop
            nop
            nop
.L_4174d0:

            mov RAX,QWORD PTR [RSI]
            mov BYTE PTR [R8+11],DL
            mov BYTE PTR [R8+12],CL
            mov QWORD PTR [R8],RAX
            mov EAX,EDX
            shr EAX,24
            mov BYTE PTR [R8+8],AL
            mov EAX,EDX
            shr EAX,16
            mov BYTE PTR [R8+9],AL
            movzx EAX,DH
            mov BYTE PTR [R8+10],AL
            ret 
.L_4174f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417500:

            push RBX
            add RDI,248
            xor ESI,ESI
            call .L_411a40

            test RAX,RAX
            mov RBX,RAX
            je .L_41752e

            movzx EAX,BYTE PTR [RAX+78]
            xor ESI,ESI
            mov RDI,RBX
            and EAX,67
            or EAX,24
            mov BYTE PTR [RBX+78],AL
            call .L_4035e0
.L_41752e:

            mov RAX,RBX
            pop RBX
            ret 
.L_417533:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417540:

            sub RSP,40
.L_417544:

            mov RDI,RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,1280
            mov WORD PTR [RSP+12],AX
            lea EAX,DWORD PTR [RDX-16]
            cmp EAX,1
            jbe .L_4175a0

            mov BYTE PTR [RSP+23],DL
            mov BYTE PTR [RSP+13],21
            mov EDX,12
.L_417577:

            lea RSI,QWORD PTR [RSP+12]
            call .L_403d80

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4175b0

            add RSP,40
.L_417595:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4175a0:

            mov BYTE PTR [RSP+13],DL
            mov BYTE PTR [RSP+12],255
            mov EDX,2
            jmp .L_417577
.L_4175b0:

            call __stack_chk_fail@PLT
.L_4175b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4175c0:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_4175c8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,512
            mov WORD PTR [RSP+4],AX
            call .L_433510

            movzx EAX,WORD PTR [RAX+1664]
            lea RSI,QWORD PTR [RSP+4]
            mov EDX,4
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41761f

            add RSP,16
.L_41761d:

            pop RBX
            ret 
.L_41761f:

            call __stack_chk_fail@PLT
.L_417624:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417630:

            sub RSP,24
.L_417634:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,273
            mov WORD PTR [RSP+5],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417679

            add RSP,24
.L_417678:

            ret 
.L_417679:

            call __stack_chk_fail@PLT
.L_41767e:

            nop
            nop
.L_417680:

            sub RSP,24
.L_417684:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,257
            mov WORD PTR [RSP+5],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4176c9

            add RSP,24
.L_4176c8:

            ret 
.L_4176c9:

            call __stack_chk_fail@PLT
.L_4176ce:

            nop
            nop
.L_4176d0:

            sub RSP,24
.L_4176d4:

            mov RDI,RSI
            bswap EDX
            lea RSI,QWORD PTR [RSP+2]
            mov DWORD PTR [RSP+4],EDX
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1026
            mov WORD PTR [RSP+2],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41771b

            add RSP,24
.L_41771a:

            ret 
.L_41771b:

            call __stack_chk_fail@PLT
.L_417720:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_417738:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],3
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            test EAX,EAX
            jne .L_41776d

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d80
.L_41776d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417786

            add RSP,16
.L_417781:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_417786:

            call __stack_chk_fail@PLT
.L_41778b:

            nop
            nop
            nop
            nop
            nop
.L_417790:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_4177a8:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],4
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            test EAX,EAX
            jne .L_4177dd

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d80
.L_4177dd:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4177f6

            add RSP,16
.L_4177f1:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4177f6:

            call __stack_chk_fail@PLT
.L_4177fb:

            nop
            nop
            nop
            nop
            nop
.L_417800:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_417808:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1029
            mov WORD PTR [RSP+2],AX
            call .L_433510

            mov EAX,DWORD PTR [RAX+1452]
            lea RSI,QWORD PTR [RSP+2]
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+4],EAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41785b

            add RSP,16
.L_417859:

            pop RBX
            ret 
.L_41785b:

            call __stack_chk_fail@PLT
.L_417860:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_417868:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1032
            mov WORD PTR [RSP+2],AX
            call .L_433510

            mov EAX,DWORD PTR [RAX+1456]
            lea RSI,QWORD PTR [RSP+2]
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+4],EAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4178bb

            add RSP,16
.L_4178b9:

            pop RBX
            ret 
.L_4178bb:

            call __stack_chk_fail@PLT
.L_4178c0:

            sub RSP,24
.L_4178c4:

            rol DX,8
            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+4]
            mov WORD PTR [RSP+6],DX
            mov EDX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,522
            mov WORD PTR [RSP+4],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41790e

            add RSP,24
.L_41790d:

            ret 
.L_41790e:

            call __stack_chk_fail@PLT
.L_417913:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417920:

            push RBP
            push RBX
            mov EAX,2059
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
            mov WORD PTR [RDI],AX
            call .L_433510

            movzx EAX,BYTE PTR [RAX+7785]
            mov RDI,RBX
            mov BYTE PTR [RBX+7],AL
            call .L_433510

            movzx EAX,BYTE PTR [RAX+7784]
            mov RSI,RBX
            mov RDI,RBP
            mov EDX,10
            mov BYTE PTR [RBX+8],AL
            add RSP,8
            pop RBX
            pop RBP
            jmp .L_403d80
.L_41796b:

            nop
            nop
            nop
            nop
            nop
.L_417970:

            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,24
.L_41797b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],255
            call .L_433510

            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RBP+2]
            lea RDI,QWORD PTR [RAX+7520]
            movzx ESI,BL
            call .L_427890

            movzx EAX,BYTE PTR [RSP+7]
            mov BYTE PTR [RBP+1],AL
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4179cc

            add RSP,24
.L_4179c9:

            pop RBX
            pop RBP
            ret 
.L_4179cc:

            call __stack_chk_fail@PLT
.L_4179d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4179e0:

            push RBP
            push RBX
            mov RBP,RSI
            movzx EDX,DL
            sub RSP,280
.L_4179ef:

            mov RBX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,4294967052
            mov WORD PTR [RSP],AX
            call .L_417970

            movzx EAX,BYTE PTR [RSP+1]
            mov RSI,RBX
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417a46

            add RSP,280
.L_417a43:

            pop RBX
            pop RBP
            ret 
.L_417a46:

            call __stack_chk_fail@PLT
.L_417a4b:

            nop
            nop
            nop
            nop
            nop
.L_417a50:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_417a68:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],13
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            test EAX,EAX
            jne .L_417a9d

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d80
.L_417a9d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417ab6

            add RSP,16
.L_417ab1:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_417ab6:

            call __stack_chk_fail@PLT
.L_417abb:

            nop
            nop
            nop
            nop
            nop
.L_417ac0:

            sub RSP,24
.L_417ac4:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,270
            mov WORD PTR [RSP+5],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417b09

            add RSP,24
.L_417b08:

            ret 
.L_417b09:

            call __stack_chk_fail@PLT
.L_417b0e:

            nop
            nop
.L_417b10:

            sub RSP,24
.L_417b14:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,272
            mov WORD PTR [RSP+5],AX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417b59

            add RSP,24
.L_417b58:

            ret 
.L_417b59:

            call __stack_chk_fail@PLT
.L_417b5e:

            nop
            nop
.L_417b60:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],33554962
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417ba3

            add RSP,24
            ret 
.L_417ba3:

            call __stack_chk_fail@PLT
.L_417ba8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417bb0:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_417bb8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            xor R8D,R8D
            mov WORD PTR [RSP+14],R8W
            call .L_40a460

            xor EDX,EDX
            test RAX,RAX
            je .L_417c24

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2070
            xor ECX,ECX
            xor EDI,EDI
            mov DWORD PTR [RSP+16],0
            mov WORD PTR [RSP+14],DX
            mov WORD PTR [RSI+6],CX
            mov WORD PTR [RSP+22],DI
            mov EDX,10
            mov RAX,QWORD PTR [RAX]
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RAX
            call .L_403d80

            mov EDX,EAX
.L_417c24:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_417c3c

            add RSP,32
.L_417c3a:

            pop RBX
            ret 
.L_417c3c:

            call __stack_chk_fail@PLT
.L_417c41:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417c50:

            push RBX
            mov RBX,RSI
            xor ESI,ESI
            sub RSP,32
.L_417c5a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+14],SI
            call .L_433510

            lea RDI,QWORD PTR [RAX+1208]
            call .L_40a460

            mov R8,RAX
            xor EAX,EAX
            test R8,R8
            je .L_417cb2

            lea RDI,QWORD PTR [R8+6]
            mov RCX,R8
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
.L_417c98:

            movzx ESI,BYTE PTR [RCX]
            shl RDX,8
            add RCX,1
            or RDX,RSI
            cmp RCX,RDI
            jne .L_417c98

            xor EAX,EAX
            test RDX,RDX
            jne .L_417cd0
.L_417cb2:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_417d0b

            add RSP,32
.L_417cc6:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417cd0:

            lea RSI,QWORD PTR [RSP+14]
            xor EDX,EDX
            mov EAX,2071
            xor ECX,ECX
            mov DWORD PTR [RSP+16],0
            mov WORD PTR [RSP+14],AX
            mov WORD PTR [RSI+6],DX
            mov WORD PTR [RSP+22],CX
            mov EDX,10
            mov RAX,QWORD PTR [R8]
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RAX
            call .L_403d80

            jmp .L_417cb2
.L_417d0b:

            call __stack_chk_fail@PLT
.L_417d10:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,40
.L_417d21:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            mov RDI,RBP
            mov R15,RAX
            call .L_433510

            mov EDX,DWORD PTR [RBP+12]
            movzx EBX,WORD PTR [RAX+1664]
            mov BYTE PTR [RSP+19],0
            mov DWORD PTR [RSP+20],0
            test EDX,EDX
            je .L_417df0

            movzx ESI,WORD PTR [RBP+414]
            lea RAX,QWORD PTR [RBP+400]
            lea R12,QWORD PTR [R15+7520]
            mov QWORD PTR [RSP+8],RAX
            rol SI,8
            cmp SI,-2
            je .L_417d99

            sub ESI,16
            mov EDX,EBX
            mov RDI,R12
            movzx ESI,SIL
            call .L_427110

            test AL,AL
            je .L_417e10
.L_417d99:

            lea R14,QWORD PTR [RSP+19]
            lea R13,QWORD PTR [RSP+20]
            nop
            nop
            nop
            nop
            nop
.L_417da8:

            mov RCX,R14
            mov EDX,EBX
            mov RSI,R13
            mov RDI,R12
            call .L_426c30

            test EAX,EAX
            jne .L_417df0

            cmp WORD PTR [RBP+414],65279
            movzx ESI,BYTE PTR [RSP+19]
            jne .L_417da8

            mov RDX,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_417370

            test EAX,EAX
            jne .L_417df0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_4116c0

            jmp .L_417da8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_417df0:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_417e30

            add RSP,40
.L_417e04:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_417e10:

            lea RSI,QWORD PTR [RBP+400]
            mov RDI,R15
            call .L_411720

            mov EAX,4294967039
            mov WORD PTR [RBP+414],AX
            jmp .L_417d99
.L_417e30:

            call __stack_chk_fail@PLT
.L_417e35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417e40:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,24
.L_417e53:

            call .L_433510

            mov EDX,DWORD PTR [RBX+12]
            test EDX,EDX
            je .L_417ec9

            mov R13D,EBP
            mov R12,RAX
            and R13D,12288
            test BPL,3
            jne .L_417f00
.L_417e76:

            test R13D,R13D
            je .L_417e90

            cmp DWORD PTR [RBX+12],2
            jne .L_417e90

            movzx EAX,BYTE PTR [RBX+56]
.L_417e85:

            test AL,10
            je .L_417fb8

            nop
            nop
            nop
.L_417e90:

            test EBP,512
            je .L_417ec1

            test BYTE PTR [RBX+56],2
            jne .L_417f88

            test BPL,4
            je .L_417fa0
.L_417eac:

            lea RDI,QWORD PTR [R12+7248]
            call .L_42bed0

            mov RDI,RBX
            call .L_417d10
.L_417ec1:

            and EBP,260
            jne .L_417ee0
.L_417ec9:

            add RSP,24
.L_417ecd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417ee0:

            add RSP,24
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_416300
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417f00:

            lea RAX,QWORD PTR [RBX+464]
            mov RDI,R12
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_411990

            test AL,AL
            jne .L_417f64

            lea R15,QWORD PTR [RBX+472]
            lea R14,QWORD PTR [RBX+480]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417f30:

            add R15,1
            call .L_401460

            cmp R14,R15
            mov BYTE PTR [R15-1],AL
            jne .L_417f30

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_4116c0

            mov RDI,RBX
            call .L_433530

            mov ESI,16
            mov RDI,RAX
            call .L_402d80
.L_417f64:

            cmp DWORD PTR [RBX+12],2
            jne .L_417e90

            movzx EAX,BYTE PTR [RBX+56]
            test AL,2
            je .L_417fd0

            test R13D,R13D
            jne .L_417e85

            jmp .L_417e90
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_417f88:

            lea RDI,QWORD PTR [R12+2568]
            call .L_41ec30

            jmp .L_417eac
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417fa0:

            lea RDI,QWORD PTR [RBX+328]
            call .L_405290

            jmp .L_417eac
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417fb8:

            lea RDI,QWORD PTR [RBX+328]
            call .L_405290

            jmp .L_417e90
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417fd0:

            lea RDI,QWORD PTR [RBX+328]
            call .L_405290

            jmp .L_417e76
.L_417fe1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417ff0:

            push RBX
            mov EBX,ESI
            call .L_402890

            mov RDI,RAX
            call .L_402a60

            mov ESI,EBX
            mov RDI,RAX
            pop RBX
            jmp .L_417e40
.L_41800b:

            nop
            nop
            nop
            nop
            nop
.L_418010:

            push R12
            lea R12,QWORD PTR [RDI+152]
            push RBP
            push RBX
            mov RDI,R12
            sub RSP,32
.L_418022:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_4045c0

            pxor XMM0,XMM0
            test RAX,RAX
            mov DWORD PTR [RSP+16],0
            movaps XMMWORD PTR [RSP],XMM0
            je .L_4180a3

            mov RBX,RAX
            mov RBP,RSP
            jmp .L_418068
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418058:

            mov RDI,RBX
            call .L_403410

            test RAX,RAX
            mov RBX,RAX
            je .L_4180a3
.L_418068:

            movzx EAX,WORD PTR [RBX+58]
            mov RCX,RBP
            mov EDX,20
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_4038b0

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,9
            jne .L_418058

            mov RDI,R12
            mov RSI,RBX
            call .L_404690

            mov RDI,RBX
            call .L_403400
.L_4180a3:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4180bc

            add RSP,32
.L_4180b7:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4180bc:

            call __stack_chk_fail@PLT
.L_4180c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4180d0:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,568
.L_4180e7:

            lea R13,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+8],RDX
            lea RBP,QWORD PTR [RSP+20]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
.L_418109:

            call .L_433510

            mov RDI,R13
            mov R14,RAX
            call .L_434780
.L_418119:

            pxor XMM0,XMM0
            mov RCX,RBP
            mov EDX,12
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
.L_418139:

            call .L_4038b0

            cmp BYTE PTR [RSP+20],0
            jne .L_418334

            mov EAX,DWORD PTR [R14+1456]
            mov RCX,RBP
            xor ESI,ESI
            mov RDI,RBX
            mov DWORD PTR [RSP+22],EAX
            mov EAX,DWORD PTR [R14+1384]
            mov EDX,EAX
            and EAX,127
            bswap EDX
            add EAX,1
            mov DWORD PTR [RSP+26],EDX
            mov EDX,12
            mov BYTE PTR [RSP+30],AL
            call .L_403b10

            mov EAX,DWORD PTR [R14+1456]
            mov RDX,QWORD PTR [R14+1656]
            lea RSI,QWORD PTR [R14+1388]
            mov RDI,R13
            mov BYTE PTR [RSP+479],5
            mov QWORD PTR [RSP+467],RDX
            mov EDX,EAX
            mov BYTE PTR [RSP+477],AH
            shr EDX,24
            mov BYTE PTR [RSP+478],AL
            mov BYTE PTR [RSP+475],DL
            mov EDX,EAX
            shr EDX,16
            mov BYTE PTR [RSP+476],DL
            mov EDX,16
            call .L_433f30

            cmp BYTE PTR [RSP+20],1
            movzx EDX,WORD PTR [RBX+58]
            lea R8,QWORD PTR [RSP+467]
            mov R9D,13
            mov ECX,4
            mov ESI,42
            mov RDI,R13
            sbb EAX,EAX
            and EAX,10
            add EAX,1
            sub EDX,EAX
            call .L_433f50

            test EAX,EAX
            jne .L_418383

            lea RSI,QWORD PTR [R15+432]
            mov EDX,16
            mov RDI,R13
            call .L_434220

            mov RSI,QWORD PTR [RSP+8]
            mov EDX,16
            mov RDI,R13
            call .L_434220

            lea RSI,QWORD PTR [RBP+1]
            mov EDX,10
            mov RDI,R13
            call .L_434220

            cmp BYTE PTR [RSP+20],1
            mov RDI,RBX
            sbb ESI,ESI
            and ESI,10
            add ESI,1
            call .L_4035a0

            lea R12,QWORD PTR [RSP+480]
            jmp .L_4182b4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418270:

            mov RCX,R12
            mov EDX,64
            mov RDI,RBX
            call .L_4038b0

            movzx EBP,AX
            mov R8D,1
            mov RDX,R12
            mov ECX,EBP
            mov RSI,R12
            mov RDI,R13
            call .L_434330

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R12
            mov EDX,EBP
            mov RDI,RBX
            call .L_403b10

            mov ESI,EBP
            mov RDI,RBX
            call .L_403530
.L_4182b4:

            movzx ESI,WORD PTR [RBX+60]
            cmp WORD PTR [RBX+58],SI
            ja .L_418270

            lea RBP,QWORD PTR [RSP+463]
            lea RDX,QWORD PTR [RSP+19]
            mov RDI,R13
            mov BYTE PTR [RSP+19],4
            mov RSI,RBP
            call .L_434570

            movzx EDX,BYTE PTR [RSP+19]
            mov RSI,RBP
            mov RDI,RBX
            call .L_403d80
.L_4182eb:

            test EAX,EAX
            mov EBP,EAX
            je .L_418328
.L_4182f1:

            mov RDI,R13
.L_4182f4:

            call .L_4347b0
.L_4182f9:

            mov RCX,QWORD PTR [RSP+552]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_4183a2

            add RSP,568
.L_418319:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418328:

            lea RDI,QWORD PTR [R14+1368]
.L_41832f:

            call .L_413e70
.L_418334:

            mov RAX,QWORD PTR [RSP+8]
            lea RDX,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R15+248]
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,19788
            mov WORD PTR [RSP+66],AX
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+69],255
            movdqu XMM0,XMMWORD PTR [R15+432]
            mov BYTE PTR [RSP+68],AL
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_411ba0
.L_41837c:

            mov EBP,EAX
            jmp .L_4182f1
.L_418383:

            lea RCX,QWORD PTR [RIP+.L_41c360]
            lea RSI,QWORD PTR [RIP+.L_41c1f2]
            lea RDI,QWORD PTR [RIP+.L_41c201]
            mov EDX,2120
            call __assert_fail@PLT
.L_4183a2:

            call __stack_chk_fail@PLT
.L_4183a7:

            mov RBX,RAX
            mov RDI,R13
            call .L_4347b0

            mov RDI,RBX
.L_4183b5:

            call _Unwind_Resume@PLT
.L_4183ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4183c0:

            push R14
            push R13
            mov R14D,ESI
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R13D,EDX
            xor EBX,EBX
            sub RSP,80
.L_4183d7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_433510

            xor R11D,R11D
            mov R12,RAX
            mov RDI,RBP
            xor EAX,EAX
            mov WORD PTR [RSP+29],BX
            mov WORD PTR [RSP+33],R11W
            mov WORD PTR [RSP+38],AX
            call .L_417500

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41844e

            movzx EAX,BYTE PTR [RBX+78]
            mov BYTE PTR [RBX+76],R14B
            mov EDX,15
            mov RSI,RBX
            mov RDI,RBP
            and EAX,67
            or EAX,4294967172
            mov BYTE PTR [RBX+78],AL
            call .L_417540

            test EAX,EAX
            je .L_418470
.L_41843e:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41844e:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_418588

            add RSP,80
.L_418466:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_418470:

            movzx EAX,BYTE PTR [R12+1668]
            lea RSI,QWORD PTR [RSP+33]
            mov R10D,788
            mov EDX,5
            mov RDI,RBX
            mov WORD PTR [RSP+33],R10W
            mov BYTE PTR [RSP+35],0
            rol AX,8
            mov WORD PTR [RSP+36],AX
            call .L_403d80

            test EAX,EAX
            jne .L_41843e

            test R13B,R13B
            je .L_418570

            lea RSI,QWORD PTR [RSP+38]
            xor R8D,R8D
            mov EDI,2070
            mov WORD PTR [RSP+38],DI
            mov DWORD PTR [RSP+40],0
            mov R9D,256
            mov WORD PTR [RSI+6],R8W
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+46],R9W
            call .L_403d80

            test EAX,EAX
            jne .L_41843e
.L_4184f2:

            movzx EAX,WORD PTR [R12+1666]
            mov ESI,533
            mov EDX,4
            mov WORD PTR [RSP+29],SI
            lea RSI,QWORD PTR [RSP+29]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+31],AX
            call .L_403d80

            test EAX,EAX
            jne .L_41843e

            lea RDX,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP+50],0
            mov EAX,767
            mov ECX,256
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+48],AX
            mov WORD PTR [RSP+62],CX
            call .L_4180d0

            test EAX,EAX
            je .L_41844e

            jmp .L_41843e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418570:

            mov RSI,RBX
            mov RDI,RBP
            call .L_417bb0

            test EAX,EAX
            jne .L_41843e

            jmp .L_4184f2
.L_418588:

            call __stack_chk_fail@PLT
.L_41858d:

            nop
            nop
            nop
.L_418590:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_418599:

            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            mov ESI,53
            call .L_40a510

            test RAX,RAX
            je .L_418613

            movzx EDI,BYTE PTR [RAX+3]
            movzx R8D,BYTE PTR [RBP+362]
            add RAX,2
            mov R11D,128
            mov R9D,11
            shl EDI,3
            mov EBX,R8D
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4185e0:

            movzx ESI,BL
            cmp ESI,EDI
            jge .L_418604

            mov EDX,EBX
            mov ECX,EBX
            shr DL,3
            and ECX,7
            movzx EDX,DL
            movzx R10D,BYTE PTR [RAX+RDX*1+2]
            mov EDX,R11D
            sar EDX,CL
            test R10D,EDX
            jne .L_418620
.L_418604:

            add EBX,1
            cmp BL,27
            cmovae EBX,R9D
            cmp BL,R8B
            jne .L_4185e0
.L_418613:

            add RSP,8
.L_418617:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_418620:

            mov RDI,RBP
            add EBX,1
            mov EDX,1
            call .L_4183c0

            cmp BL,26
            mov EAX,11
            cmova EBX,EAX
            mov BYTE PTR [RBP+362],BL
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_418648:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418650:

            push R14
            push R13
            xor R10D,R10D
            push R12
            push RBP
            xor R11D,R11D
            push RBX
            mov R13D,EDX
            sub RSP,64
.L_418665:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+360],0
            mov DWORD PTR [RSP+12],ESI
            mov EAX,5
            mov RDX,QWORD PTR [RSP+112]
            mov WORD PTR [RSP+26],R10W
            mov WORD PTR [RSP+28],R11W
            jne .L_418713

            mov BYTE PTR [RDI+361],R8B
            mov QWORD PTR [RDI+344],R9
            mov RBX,RDI
            mov QWORD PTR [RDI+352],RDX
            mov R12D,ECX
            call .L_433510

            mov ESI,DWORD PTR [RSP+12]
            lea RDI,QWORD PTR [RAX+2256]
            call .L_441f40

            mov RDI,RBX
            call .L_417500

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_418713

            movzx EAX,BYTE PTR [RBP+78]
            mov WORD PTR [RBP+76],R13W
            mov EDX,16
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,8
            mov BYTE PTR [RBP+78],AL
            call .L_417540

            test EAX,EAX
            je .L_418738
.L_418703:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_418713:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4187fe

            add RSP,64
.L_41872b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418738:

            lea R13,QWORD PTR [RSP+26]
            mov EDX,2
            mov RDI,RBP
            mov BYTE PTR [RSP+26],26
            mov RSI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_418703

            cmp R12B,1
            mov ESI,640
            mov EDX,4
            sbb EAX,EAX
            mov WORD PTR [RSP+28],SI
            lea RSI,QWORD PTR [RSP+28]
            and EAX,4294967288
            mov RDI,RBP
            movzx R14D,WORD PTR [RBP+58]
            add EAX,40
            mov BYTE PTR [RSP+31],0
            mov BYTE PTR [RSP+30],AL
            call .L_403d80

            test EAX,EAX
            jne .L_418703

            movzx EAX,BYTE PTR [RBP+58]
            lea ESI,DWORD PTR [R14-2]
            mov EDX,2
            mov RCX,R13
            mov RDI,RBP
            movzx ESI,SI
            sub EAX,R14D
            mov BYTE PTR [RSP+27],AL
            call .L_403b10

            lea RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+34],0
            mov EAX,767
            mov ECX,512
            mov RSI,RBP
            mov RDI,RBX
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+32],AX
            mov WORD PTR [RSP+46],CX
            call .L_4180d0

            test EAX,EAX
            jne .L_418703

            mov BYTE PTR [RBX+360],1
            jmp .L_418713
.L_4187fe:

            call __stack_chk_fail@PLT
.L_418803:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418810:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,56
.L_41882a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov DWORD PTR [RSP+32],0
            lea R13,QWORD PTR [RSP+16]
            call .L_401240

            mov R12D,EAX
            lea RAX,QWORD PTR [R14+152]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4045c0

            test RAX,RAX
            mov R15,RAX
            jne .L_418888

            jmp .L_418917
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_418878:

            sub EAX,R12D
            cmp EBX,EAX
            cmova EBX,EAX
.L_418880:

            test RBP,RBP
            mov R15,RBP
            je .L_418900
.L_418888:

            mov RDI,R15
            call .L_403410

            mov RBP,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R13
            mov EDX,20
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_4038b0

            mov EAX,DWORD PTR [RSP+32]
            cmp R12D,EAX
            js .L_418878

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_404690

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_403470

            mov RDX,R13
            mov RSI,R15
            mov RDI,R14
            call .L_4180d0

            test EAX,EAX
            je .L_418880

            mov RDI,R15
            mov R15,RBP
            call .L_403400

            test RBP,RBP
            jne .L_418888

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418900:

            cmp EBX,-1
            je .L_418917

            call .L_401240

            lea RDI,QWORD PTR [R14+96]
            mov EDX,EBX
            mov ESI,EAX
            call .L_433770
.L_418917:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_418936

            add RSP,56
.L_41892b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_418936:

            call __stack_chk_fail@PLT
.L_41893b:

            nop
            nop
            nop
            nop
            nop
.L_418940:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a60

            add RSP,8
            mov RDI,RAX
            jmp .L_418810
.L_41895d:

            nop
            nop
            nop
.L_418960:

            push R15
            push R14
            push R13
            push R12
            lea R13,QWORD PTR [RDI+169]
            push RBP
            push RBX
            lea R12,QWORD PTR [RDI+177]
            mov RBP,RDI
            mov RBX,R13
            sub RSP,72
.L_418982:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_418998:

            add RBX,1
            call .L_401460

            cmp RBX,R12
            mov BYTE PTR [RBX-1],AL
            jne .L_418998

            mov EAX,DWORD PTR [RBP+60]
            cmp EAX,3
            je .L_418a30

            cmp EAX,4
            jne .L_418b99
.L_4189ba:

            mov RDI,RBP
            call .L_417500

            test RAX,RAX
            mov RBX,RAX
            je .L_418a90

            mov EDX,9
            mov RSI,RAX
            mov RDI,RBP
            call .L_417540

            test EAX,EAX
            jne .L_418a90

            mov R15D,64
            mov BYTE PTR [RSP+15],192
.L_4189f1:

            movzx EAX,BYTE PTR [RBP+56]
            lea R14,QWORD PTR [RSP+28]
            mov EDI,257
            mov WORD PTR [RSP+28],DI
            mov EDX,3
            mov RDI,RBX
            mov RSI,R14
            mov R12D,1
            mov BYTE PTR [RSP+30],AL
            call .L_403d80

            test EAX,EAX
            je .L_418ae2
.L_418a26:

            test R15B,R15B
            je .L_418a70

            jmp .L_418a96
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_418a30:

            mov EAX,DWORD PTR [RBP+180]
            sub EAX,1
            cmp EAX,1
            jbe .L_4189ba

            mov RDI,RBP
            call .L_417500

            test RAX,RAX
            mov RBX,RAX
            je .L_418a6a

            mov EDX,9
            mov RSI,RAX
            mov RDI,RBP
            call .L_417540

            test EAX,EAX
            je .L_418b87
.L_418a6a:

            mov R12D,1
.L_418a70:

            call .L_401240

            lea RDI,QWORD PTR [RBP+72]
            mov EDX,750
            mov ESI,EAX
            call .L_433770

            jmp .L_418aab
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418a90:

            mov R12D,1
.L_418a96:

            call .L_401240

            lea RDI,QWORD PTR [RBP+72]
            mov EDX,1250
            mov ESI,EAX
            call .L_433770
.L_418aab:

            test RBX,RBX
            je .L_418abd

            test R12B,R12B
            je .L_418abd

            mov RDI,RBX
            call .L_403400
.L_418abd:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_418b94

            add RSP,72
.L_418ad7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_418ae2:

            mov ECX,8
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_417720

            test EAX,EAX
            jne .L_418a26

            movzx EAX,BYTE PTR [RSP+15]
            mov ESI,270
            mov EDX,3
            mov WORD PTR [RSP+28],SI
            mov RDI,RBX
            mov RSI,R14
            mov BYTE PTR [RSP+30],AL
            call .L_403d80

            test EAX,EAX
            jne .L_418a26

            mov EDX,4
            mov RSI,R14
            mov RDI,RBX
            mov DWORD PTR [RSP+28],33554962
            call .L_403d80

            test EAX,EAX
            jne .L_418a26

            lea RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+34],0
            mov EAX,767
            mov ECX,512
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+32],AX
            mov WORD PTR [RSP+46],CX
            call .L_4180d0

            test EAX,EAX
            setne R12B
            jmp .L_418a26
.L_418b87:

            xor R15D,R15D
            mov BYTE PTR [RSP+15],128
            jmp .L_4189f1
.L_418b94:

            call __stack_chk_fail@PLT
.L_418b99:

            lea RCX,QWORD PTR [RIP+.L_41c400]
            lea RSI,QWORD PTR [RIP+.L_41c1f2]
            lea RDI,QWORD PTR [RIP+.L_41c218]
            mov EDX,1669
            call __assert_fail@PLT
.L_418bb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418bc0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov EBX,ECX
            mov R12,RDI
            sub RSP,40
.L_418bd5:

            movzx EBX,BX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_401240

            movdqu XMM0,XMMWORD PTR [RBP]
            add EAX,EBX
            mov RSI,RSP
            mov EDX,20
            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            movaps XMMWORD PTR [RSP],XMM0
            call .L_403d80

            test EAX,EAX
            mov EBP,EAX
            je .L_418c30
.L_418c12:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_418c71

            add RSP,40
.L_418c28:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_418c30:

            lea RDI,QWORD PTR [R12+152]
            mov RSI,R13
            mov EDX,1
            lea R13,QWORD PTR [R12+96]
            call .L_4045d0

            cmp R13,QWORD PTR [R12+112]
            je .L_418c5e

            mov EAX,DWORD PTR [R12+104]
            sub EAX,DWORD PTR [RSP+16]
            test EAX,EAX
            jle .L_418c12
.L_418c5e:

            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R13
            call .L_433770

            jmp .L_418c12
.L_418c71:

            call __stack_chk_fail@PLT
.L_418c76:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418c80:

            push R15
            push R14
            mov R14D,R8D
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,ECX
            mov EBX,3
            sub RSP,24
            mov QWORD PTR [RSP+8],RSI
            call .L_417500

            test RAX,RAX
            je .L_418ccf

            mov EDX,7
            mov RSI,RAX
            mov RDI,RBP
            mov R15,RAX
            call .L_417540

            test EAX,EAX
            mov EBX,EAX
            je .L_418ce0
.L_418cc7:

            mov RDI,R15
            call .L_403400
.L_418ccf:

            add RSP,24
            mov EAX,EBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_418ce0:

            movzx ECX,R12B
            mov RDX,R13
            mov RSI,R15
            mov RDI,RBP
            call .L_417a50

            test EAX,EAX
            mov EBX,EAX
            jne .L_418cc7

            mov RSI,R15
            mov RDI,RBP
            call .L_417bb0

            test EAX,EAX
            mov EBX,EAX
            jne .L_418cc7

            mov RSI,R15
            mov RDI,RBP
            call .L_417c50

            test EAX,EAX
            mov EBX,EAX
            jne .L_418cc7

            test R14W,R14W
            je .L_418d40

            mov RDX,QWORD PTR [RSP+8]
            movzx ECX,R14W
            mov RSI,R15
            mov RDI,RBP
            call .L_418bc0

            test EAX,EAX
            mov EBX,EAX
            je .L_418ccf

            jmp .L_418cc7
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418d40:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R15
            mov RDI,RBP
            call .L_4180d0

            test EAX,EAX
            mov EBX,EAX
            jne .L_418cc7

            test BYTE PTR [RBP+56],8
            jne .L_418ccf

            mov RDI,RBP
            call .L_433510

            lea RDI,QWORD PTR [RAX+2520]
            mov ESI,8
            call .L_413a50

            jmp .L_418ccf
.L_418d82:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418d90:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,344
.L_418daa:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+44],CX
            lea RCX,QWORD PTR [RSP+34]
            xor R8D,R8D
            xor R9D,R9D
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+54],SI
            mov WORD PTR [RSP+28],DI
            mov R13,RAX
            mov EDX,10
            xor EAX,EAX
            mov ESI,11
            mov RDI,RBP
            mov WORD PTR [RSP+34],AX
            mov WORD PTR [RSP+30],R8W
            mov WORD PTR [RSP+32],R9W
            call .L_4339f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_418e40

            cmp BYTE PTR [RSP+35],8
            jne .L_418eb0

            mov EAX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RBX+2],EAX
            mov ESI,EAX
            bswap ESI
            je .L_418ec0
.L_418e34:

            cmp DWORD PTR [RBX+12],2
            je .L_418e70

            mov R15D,2
.L_418e40:

            mov RDX,QWORD PTR [RSP+328]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_419147

            add RSP,344
.L_418e61:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418e70:

            movzx ECX,BYTE PTR [RSP+43]
            movzx EDX,BYTE PTR [RSP+40]
            mov RDI,RBX
            call .L_417200

            mov BYTE PTR [RBX+10],1
.L_418e86:

            lea R14,QWORD PTR [RSP+44]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_418f08

            cmp BYTE PTR [RSP+45],8
            je .L_4190d0

            nop
.L_418eb0:

            mov R15D,6
            jmp .L_418e40
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418ec0:

            movzx EAX,BYTE PTR [RBX+6]
            cmp BYTE PTR [RSP+40],AL
            jne .L_418e34

            movzx EAX,BYTE PTR [RSP+43]
            cmp BYTE PTR [RBX+9],AL
            jne .L_418e34

            cmp BYTE PTR [RBX+10],0
            jne .L_418e86

            test BYTE PTR [RBX+56],1
            je .L_419136

            movzx EAX,BYTE PTR [RSP+41]
            sub AL,BYTE PTR [R13+7785]
.L_418ef8:

            test AL,AL
            jg .L_418e86

            jmp .L_418e40
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418f08:

            mov BYTE PTR [RSP+45],0
.L_418f0d:

            lea RAX,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,23
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP],RAX
            call .L_4339f0

            test EAX,EAX
            je .L_419048

            mov BYTE PTR [RSP+55],0
.L_418f38:

            lea R8,QWORD PTR [RSP+64]
            mov EDX,257
            mov ESI,12
            mov RDI,RBP
            mov RCX,R8
            mov QWORD PTR [RSP+8],R8
            call .L_4339f0

            test EAX,EAX
            jne .L_4190a0

            movzx R9D,BYTE PTR [RSP+65]
            cmp R9B,255
            je .L_418eb0

            movzx ECX,BYTE PTR [RBX+56]
            mov R8,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R13+7520]
            movzx EDX,BYTE PTR [RSP+42]
            movzx ESI,BYTE PTR [RSP+41]
            add R8,2
            not ECX
            and ECX,1
            call .L_428a80

            cmp BYTE PTR [RSP+45],0
            je .L_418fe8

            movzx EAX,WORD PTR [RSP+28]
            test AX,AX
            je .L_418fe8

            lea RCX,QWORD PTR [RSP+32]
            movzx ESI,AX
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+28]
            movzx R8D,BYTE PTR [RSP+33]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R13+1080]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40ae10

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418fe8:

            cmp BYTE PTR [RSP+55],0
            je .L_419036

            movzx EAX,WORD PTR [RSP+30]
            test AX,AX
            je .L_419036

            lea RCX,QWORD PTR [RSP+32]
            movzx ESI,AX
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+30]
            mov RSI,QWORD PTR [RSP]
            lea RDI,QWORD PTR [R13+1208]
            movzx R8D,BYTE PTR [RSP+33]
            mov RDX,RBP
            add RSI,2
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40b040
.L_419036:

            mov BYTE PTR [RBX+10],0
            xor R15D,R15D
            jmp .L_418e40
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419048:

            cmp BYTE PTR [RSP+55],8
            jne .L_418eb0

            lea RDI,QWORD PTR [R13+1208]
            call .L_40a460

            test RAX,RAX
            je .L_41907c

            mov RDI,QWORD PTR [RSP]
            lea RSI,QWORD PTR [RDI+2]
            mov RDI,RAX
            call .L_40e0c0

            test EAX,EAX
            je .L_418f38
.L_41907c:

            lea RDX,QWORD PTR [RSP+30]
            mov ESI,25
            mov RDI,RBP
            call .L_4338c0

            test EAX,EAX
            je .L_418f38

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4190a0:

            mov RDI,R12
            call .L_40ff70

            test AL,AL
            mov R8D,10
            jne .L_419110
.L_4190b2:

            lea RSI,QWORD PTR [R12+16]
            lea RDX,QWORD PTR [RIP+.L_41c46e]
            mov ECX,1
            mov RDI,RBX
            call .L_418c80

            jmp .L_418e40
.L_4190d0:

            lea RDI,QWORD PTR [R13+1080]
            call .L_40a460

            test RAX,RAX
            je .L_4190f5

            lea RSI,QWORD PTR [R14+2]
            mov RDI,RAX
            call .L_40e0c0

            test EAX,EAX
            je .L_418f0d
.L_4190f5:

            lea RDX,QWORD PTR [RSP+28]
            mov ESI,24
            mov RDI,RBP
            call .L_4338c0

            test EAX,EAX
            jne .L_4190a0

            jmp .L_418f0d
.L_419110:

            call .L_401460

            movzx ECX,AX
            mov EDX,274877907
            mov EAX,ECX
            mul EDX
            shr EDX,6
            imul R8D,EDX,1000
            sub ECX,R8D
            mov R8D,ECX
            jmp .L_4190b2
.L_419136:

            movzx EAX,BYTE PTR [RSP+42]
            sub AL,BYTE PTR [R13+7784]
            jmp .L_418ef8
.L_419147:

            call __stack_chk_fail@PLT
.L_41914c:

            nop
            nop
            nop
            nop
.L_419150:

            jmp .L_418d90
.L_419155:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419160:

            movzx EAX,BYTE PTR [RDI+241]
            movzx R9D,BYTE PTR [RDI+234]
            and EAX,3
            cmp AL,R9B
            cmova EAX,R9D
            cmp AL,DL
            je .L_419188
.L_41917d:

            setb AL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419188:

            and ESI,511
            sete AL
            test WORD PTR [RDI+228],511
            sete DL
            cmp AL,DL
            je .L_4191a8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4191a8:

            movzx EAX,BYTE PTR [R8+2]
            shl EAX,24
            sar EAX,30
            cmp BYTE PTR [RDI+184],AL
            je .L_4191c0

            setl AL
            ret 
          .byte 0x90
.L_4191c0:

            movzx EAX,BYTE PTR [R8+3]
            cmp BYTE PTR [RDI+185],AL
            jne .L_41917d

            movzx EAX,BYTE PTR [R8+4]
            cmp BYTE PTR [RDI+186],AL
            jne .L_41917d

            movzx EAX,BYTE PTR [RDI+187]
            cmp BYTE PTR [R8+5],AL
            jne .L_4191ed

            cmp CL,BYTE PTR [RDI+199]
.L_4191ed:

            seta AL
            ret 
.L_4191f1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419200:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+236],0
            movups XMMWORD PTR [RDI+220],XMM0
            and BYTE PTR [RDI+230],248
            movups XMMWORD PTR [RDI+204],XMM0
            ret 
.L_419225:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419230:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,120
.L_41924a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+54],CX
            lea RCX,QWORD PTR [RSP+38]
            xor R9D,R9D
            xor R8D,R8D
            xor R10D,R10D
            mov WORD PTR [RSP+38],DX
            mov WORD PTR [RSP+35],SI
            mov R13,RAX
            mov WORD PTR [RSP+64],DI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+48],R9W
            mov R14,QWORD PTR [R12+40]
            mov WORD PTR [RSP+84],AX
            mov WORD PTR [RSP+42],R8W
            mov WORD PTR [RSP+94],R10W
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_4192cd

            cmp BYTE PTR [RSP+39],2
            je .L_4192f8
.L_4192c7:

            mov R9D,6
.L_4192cd:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_419709

            add RSP,120
.L_4192e8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4192f8:

            lea RCX,QWORD PTR [RSP+84]
            mov EDX,10
            mov ESI,4
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_4192cd

            cmp BYTE PTR [RSP+85],8
            jne .L_4192c7

            mov RAX,QWORD PTR [RBP+169]
            cmp QWORD PTR [RSP+86],RAX
            jne .L_4192c7

            lea RSI,QWORD PTR [RSP+76]
            lea RDI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP],RSI
            call .L_4101e0

            cmp DWORD PTR [RBP+12],2
            je .L_4196e0
.L_419348:

            lea R12,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,11
            mov RDI,RBX
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_4192cd

            cmp BYTE PTR [RSP+55],8
            jne .L_4192c7

            lea RCX,QWORD PTR [RSP+35]
            mov EDX,3
            mov ESI,16
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_4192cd

            cmp BYTE PTR [RSP+36],1
            jne .L_4192c7

            movsx ESI,BYTE PTR [R14+3]
            mov DWORD PTR [RSP+16],EAX
            lea RAX,QWORD PTR [R13+1560]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            mov DWORD PTR [RSP],ESI
            call .L_4084f0

            mov ESI,DWORD PTR [RSP]
            movsx EDI,AL
            call .L_414400

            movzx EDX,BYTE PTR [RSP+37]
            cmp BYTE PTR [RSP+37],AL
            cmovbe EAX,EDX
            mov BYTE PTR [RSP+27],AL
            movzx EAX,AL
            mov EDI,EAX
            mov DWORD PTR [RSP],EAX
            call .L_414420

            cmp DWORD PTR [RBP+60],3
            mov BYTE PTR [RSP+26],AL
            mov R9D,DWORD PTR [RSP+16]
            jne .L_419404

            cmp AL,3
            jne .L_4192cd
.L_419404:

            lea RAX,QWORD PTR [RSP+64]
            mov EDX,12
            mov ESI,15
            mov RDI,RBX
            mov DWORD PTR [RSP+28],R9D
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_419701

            movzx EAX,BYTE PTR [RSP+65]
            mov R9D,DWORD PTR [RSP+28]
            cmp AL,7
            je .L_419446

            cmp AL,10
            jne .L_4192c7
.L_419446:

            test BYTE PTR [RBP+56],2
            je .L_41970e

            cmp DWORD PTR [RBP+12],1
            je .L_419491

            mov EDX,DWORD PTR [RBP+180]
            movzx EAX,BYTE PTR [RSP+71]
            sub AL,BYTE PTR [R13+3312]
            cmp EDX,2
            ja .L_419794

            cmp EDX,1
            jae .L_419732

            mov EDX,DWORD PTR [RSP+56]
            mov ECX,DWORD PTR [RBP+2]
            test AL,AL
            bswap EDX
            bswap ECX
            jg .L_419491

            cmp ECX,EDX
            je .L_4192cd
.L_419491:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_419507
.L_41949f:

            xor EDI,EDI
            cmp BYTE PTR [RSP+72],1
            movzx EDX,BYTE PTR [RBP+200]
            lea RCX,QWORD PTR [RBP+189]
            mov RSI,R12
            mov DWORD PTR [RSP+28],R9D
            setbe DIL
            call .L_41d170

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+28]
            js .L_4192cd

            jne .L_419507
.L_4194d4:

            movzx ESI,WORD PTR [RSP+40]
            movzx EDX,BYTE PTR [RSP+26]
            mov RDI,RBP
            mov R8,QWORD PTR [RSP+16]
            mov ECX,DWORD PTR [RSP]
            mov DWORD PTR [RSP+28],R9D
            rol SI,8
            movzx ESI,SI
            call .L_419160

            test AL,AL
            mov R9D,DWORD PTR [RSP+28]
            je .L_4192cd
.L_419507:

            lea RCX,QWORD PTR [RSP+42]
            mov EDX,6
            mov ESI,5
            mov RDI,RBX
            mov DWORD PTR [RSP],R9D
            call .L_4339f0

            test EAX,EAX
            mov R9D,DWORD PTR [RSP]
            jne .L_419701

            cmp BYTE PTR [RSP+43],4
            jne .L_4192c7

            lea RCX,QWORD PTR [RSP+48]
            mov EDX,6
            mov ESI,8
            mov RDI,RBX
            mov DWORD PTR [RSP],R9D
            call .L_4339f0

            test EAX,EAX
            jne .L_419725

            cmp BYTE PTR [RSP+49],4
            mov R9D,DWORD PTR [RSP]
            jne .L_4192cd
.L_41956b:

            lea R12,QWORD PTR [RSP+94]
            mov EDX,10
            mov ESI,3
            mov RDI,RBX
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_4192cd

            movzx EAX,BYTE PTR [RSP+95]
            lea EDX,DWORD PTR [RAX-4]
            cmp DL,4
            ja .L_4192c7

            lea RDX,QWORD PTR [RBP+160]
            lea RSI,QWORD PTR [R12+2]
            movzx ECX,AL
            lea R12,QWORD PTR [RBP+232]
            mov DWORD PTR [RSP],R9D
            mov RDI,RDX

            rep movsb 

            mov BYTE PTR [RBP+168],AL
            mov RAX,QWORD PTR [RSP+76]
            mov RDI,R12
            or BYTE PTR [RBP+230],120
            mov QWORD PTR [RBP+204],RAX
            movzx EAX,WORD PTR [RSP+40]
            rol AX,8
            mov WORD PTR [RBP+228],AX
            mov EAX,DWORD PTR [RSP+44]
            bswap EAX
            mov DWORD PTR [RBP+216],EAX
            mov EAX,DWORD PTR [RSP+50]
            bswap EAX
            mov DWORD PTR [RBP+220],EAX
            call .L_414250

            movsx EBX,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            call .L_4084f0

            mov EDX,EBX
            movsx ESI,AL
            mov RDI,R12
            call .L_414260

            movzx EDI,BYTE PTR [RSP+37]
            mov BYTE PTR [RBP+231],0
            call .L_414420

            and EAX,3
            mov DWORD PTR [RBP+224],R15D
            mov R9D,DWORD PTR [RSP]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBP+241]
            and EAX,4294967292
            or EAX,EDX
            mov BYTE PTR [RBP+241],AL
            movzx EAX,BYTE PTR [RBP+230]
            and EAX,4294967288
            or EAX,3
            mov BYTE PTR [RBP+230],AL
            movzx EAX,BYTE PTR [RSP+66]
            shl EAX,24
            sar EAX,30
            cmp BYTE PTR [RSP+72],1
            mov BYTE PTR [RBP+184],AL
            movzx EAX,BYTE PTR [RSP+67]
            setbe BYTE PTR [RBP+200]
            mov BYTE PTR [RBP+185],AL
            movzx EAX,BYTE PTR [RSP+68]
            mov BYTE PTR [RBP+186],AL
            movzx EAX,BYTE PTR [RSP+69]
            mov BYTE PTR [RBP+187],AL
            movzx EAX,BYTE PTR [RSP+70]
            mov BYTE PTR [RBP+150],AL
            mov RAX,QWORD PTR [RSP+54]
            mov QWORD PTR [RBP+189],RAX
            movzx EAX,WORD PTR [RSP+62]
            mov WORD PTR [RBP+197],AX
            movzx EAX,BYTE PTR [RSP+27]
            mov BYTE PTR [RBP+199],AL
            jmp .L_4192cd
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4196e0:

            mov RSI,QWORD PTR [RSP]
            lea RDI,QWORD PTR [RBP+16]
            call .L_408da0

            test AL,AL
            je .L_419348

            mov BYTE PTR [RBP+201],1
            jmp .L_419348
.L_419701:

            mov R9D,EAX
            jmp .L_4192cd
.L_419709:

            call __stack_chk_fail@PLT
.L_41970e:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_419507

            jmp .L_4194d4
.L_419725:

            mov EAX,DWORD PTR [RSP+44]
            mov DWORD PTR [RSP+50],EAX
            jmp .L_41956b
.L_419732:

            mov EDX,DWORD PTR [RSP+56]
            cmp DWORD PTR [RBP+2],EDX
            jne .L_4192cd

            cmp AL,0
            jg .L_419491

            jne .L_4192cd

            lea RDI,QWORD PTR [R13+2568]
            mov DWORD PTR [RSP+28],R9D
            call .L_41ca70

            movzx EDX,BYTE PTR [R13+7228]
            mov R9D,DWORD PTR [RSP+28]
            cmp EDX,EAX
            jbe .L_4192cd
.L_419773:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_419507

            test BYTE PTR [RBP+56],2
            jne .L_41949f

            jmp .L_4194d4
.L_419794:

            cmp EDX,3
            jne .L_419773

            mov EAX,DWORD PTR [RSP+56]
            cmp DWORD PTR [RBP+2],EAX
            je .L_4192cd

            lea RDI,QWORD PTR [R13+2568]
            mov DWORD PTR [RSP+28],R9D
            call .L_41d120

            xor EDI,EDI
            cmp BYTE PTR [RSP+72],1
            movzx EDX,AL
            mov RCX,RBP
            mov RSI,R12
            setbe DIL
            call .L_41d170

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+28]
            jg .L_419773

            jmp .L_4192cd
.L_4197de:

            nop
            nop
.L_4197e0:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            sub RSP,400
.L_4197f5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+14],CX
            lea RCX,QWORD PTR [RSP+10]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RSP+10],DX
            mov WORD PTR [RSP+128],SI
            mov R12,RAX
            mov WORD PTR [RSP+48],DI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBP
            mov WORD PTR [RSP+18],AX
            mov WORD PTR [RSP+28],R8W
            mov WORD PTR [RSP+38],R9W
            mov WORD PTR [RSP+8],R10W
            call .L_4339f0

            test EAX,EAX
            jne .L_419876

            cmp BYTE PTR [RSP+11],2
            jne .L_4198a0

            cmp DWORD PTR [RBX+60],5
            je .L_4198b0
.L_419876:

            mov RDX,QWORD PTR [RSP+392]
            xor RDX,QWORD PTR FS:[40]
            jne .L_419b25

            add RSP,400
.L_419894:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4198a0:

            mov EAX,6
            jmp .L_419876
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4198b0:

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_419876

            cmp BYTE PTR [RSP+19],8
            jne .L_4198a0

            lea RCX,QWORD PTR [RSP+14]
            mov EDX,4
            mov ESI,10
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_419876

            cmp BYTE PTR [RSP+15],2
            jne .L_4198a0

            lea R13,QWORD PTR [RSP+128]
            mov EDX,257
            mov ESI,12
            mov RDI,RBP
            mov RCX,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_419876

            lea R14,QWORD PTR [RSP+28]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_419994

            cmp BYTE PTR [RSP+29],8
            jne .L_4198a0

            lea RDX,QWORD PTR [RSP+6]
            mov ESI,24
            mov RDI,RBP
            call .L_4338c0

            test EAX,EAX
            jne .L_419994

            movzx ESI,WORD PTR [RSP+6]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+6]
            movzx R8D,BYTE PTR [RSP+9]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R12+1080]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40ae10
.L_419994:

            cmp DWORD PTR [RBX+64],3
            je .L_419b4e
.L_41999e:

            lea R14,QWORD PTR [RSP+38]
            mov EDX,10
            mov ESI,23
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_419b3c

            cmp BYTE PTR [RSP+39],8
            jne .L_4198a0

            lea RDX,QWORD PTR [RSP+6]
            mov ESI,25
            mov RDI,RBP
            call .L_4338c0

            test EAX,EAX
            jne .L_419a1d

            movzx ESI,WORD PTR [RSP+6]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+6]
            movzx R8D,BYTE PTR [RSP+9]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R12+1208]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40b040
.L_419a1d:

            lea RDI,QWORD PTR [RBX+72]
            lea R14,QWORD PTR [R12+2256]
            call .L_433690

            mov RDI,RBX
            call .L_4165b0

            mov ESI,DWORD PTR [RSP+20]
            movzx ECX,BYTE PTR [RSP+27]
            mov RDI,RBX
            movzx EDX,BYTE PTR [RSP+24]
            bswap ESI
            call .L_417200

            test BYTE PTR [RBX+56],8
            jne .L_419b2a

            lea RDI,QWORD PTR [R12+2520]
            xor ESI,ESI
            call .L_413a10

            xor ESI,ESI
            mov RDI,R14
            call .L_440c70
.L_419a71:

            lea R14,QWORD PTR [RSP+48]
            mov EDX,74
            mov ESI,9
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_419a99

            test BYTE PTR [RBX+56],2
            jne .L_419b60
.L_419a99:

            lea RDX,QWORD PTR [RBX+204]
            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RBX+204]
            mov ECX,38
            movzx R9D,BYTE PTR [RSP+129]

            rep movsb 

            mov RDI,RDX
            mov ECX,10
            movzx ESI,BYTE PTR [RSP+25]
            movzx EDX,BYTE PTR [RSP+26]
            lea R8,QWORD PTR [R13+2]

            rep stosd DWORD PTR [RDI]

            movzx EAX,WORD PTR [RSP+12]
            lea RDI,QWORD PTR [R12+7520]
            mov BYTE PTR [RBX+230],0
            movzx ECX,BYTE PTR [RBX+56]
            rol AX,8
            mov WORD PTR [RBX+40],AX
            not ECX
            and ECX,1
            call .L_428a80

            lea RDI,QWORD PTR [R12+1080]
            call .L_40a630

            movzx ESI,WORD PTR [RSP+16]
            mov RDI,RBX
            rol SI,8
            movzx ESI,SI
            call .L_417080

            jmp .L_419876
.L_419b25:

            call __stack_chk_fail@PLT
.L_419b2a:

            mov ESI,1
            mov RDI,R14
            call .L_440c70

            jmp .L_419a71
.L_419b3c:

            lea RDI,QWORD PTR [R12+1208]
            call .L_40af90

            jmp .L_419a1d
.L_419b4e:

            lea RDI,QWORD PTR [R12+1208]
            call .L_40af70

            jmp .L_41999e
.L_419b60:

            lea RDI,QWORD PTR [R12+2568]
            mov RSI,R14
            call .L_41d030

            test EAX,EAX
            je .L_419a99

            jmp .L_419876
.L_419b7d:

            nop
            nop
            nop
.L_419b80:

            push R14
            push R13
            mov R14,RDX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,48
.L_419b95:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+30],CX
            lea RCX,QWORD PTR [RSP+2]
            xor R8D,R8D
            xor R9D,R9D
            mov WORD PTR [RSP+5],DX
            mov WORD PTR [RSP+12],SI
            mov WORD PTR [RSP+18],DI
            mov R13,RAX
            mov EDX,3
            xor EAX,EAX
            mov ESI,17
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov WORD PTR [RSP+8],R8W
            mov WORD PTR [RSP+24],R9W
            call .L_4339f0

            test EAX,EAX
            je .L_419d50

            lea RCX,QWORD PTR [RSP+5]
            mov EDX,3
            mov ESI,1
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d28

            cmp BYTE PTR [RSP+6],1
            jne .L_419d60

            movzx EAX,BYTE PTR [RSP+7]
            cmp BYTE PTR [RBP+56],AL
            jne .L_419d70

            mov EAX,DWORD PTR [RBP+12]
            cmp EAX,1
            je .L_419d80

            cmp EAX,2
            jne .L_419e77
.L_419c50:

            lea RCX,QWORD PTR [RSP+8]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d28

            cmp BYTE PTR [RSP+9],2
            jne .L_419d60

            movzx EBX,WORD PTR [RSP+10]
            mov RDI,RBP
            call .L_433510

            movzx EAX,WORD PTR [RAX+1664]
            rol BX,8
            movzx EBX,BX
            sar EBX,10
            sar EAX,10
            cmp BL,AL
            jne .L_419d50

            mov RDX,R14
            mov RSI,R12
            mov RDI,RBP
            call .L_418d90

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d28

            lea RCX,QWORD PTR [RSP+24]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_419ce8

            cmp BYTE PTR [RSP+25],4
            jne .L_419d60

            mov EAX,DWORD PTR [RSP+26]
            bswap EAX
            mov DWORD PTR [RBP+320],EAX
.L_419ce8:

            test BYTE PTR [RBP+56],8
            lea R14,QWORD PTR [RBP+120]
            lea R12,QWORD PTR [R13+2256]
            jne .L_419e41

            lea RDI,QWORD PTR [R13+2520]
            xor ESI,ESI
            call .L_413a10

            mov RDI,R12
            xor ESI,ESI
            call .L_440c70

            mov RDI,R14
            call .L_433690
.L_419d1d:

            mov BYTE PTR [RBP+188],0
            nop
            nop
            nop
            nop
.L_419d28:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_419e3c

            add RSP,48
.L_419d42:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419d50:

            mov RDI,RBP
            xor EBX,EBX
            call .L_417190

            jmp .L_419d28
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_419d60:

            mov EBX,6
            jmp .L_419d28
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419d70:

            mov EBX,2
            jmp .L_419d28
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419d80:

            lea RCX,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d28

            cmp BYTE PTR [RSP+31],8
            jne .L_419d60

            mov RAX,QWORD PTR [RBP+169]
            cmp QWORD PTR [RSP+32],RAX
            jne .L_419d70

            lea RCX,QWORD PTR [RSP+12]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d28

            cmp BYTE PTR [RSP+13],4
            jne .L_419d60

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_419e32

            cmp BYTE PTR [RSP+19],4
            jne .L_419d60

            mov EAX,DWORD PTR [RSP+14]
.L_419e04:

            bswap EAX
            or BYTE PTR [RBP+42],7
            mov RDI,RBP
            mov DWORD PTR [RBP+28],EAX
            mov EAX,DWORD PTR [RSP+20]
            bswap EAX
            mov DWORD PTR [RBP+32],EAX
            call .L_433510

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,RBP
            call .L_417080

            jmp .L_419c50
.L_419e32:

            mov EAX,DWORD PTR [RSP+14]
            mov DWORD PTR [RSP+20],EAX
            jmp .L_419e04
.L_419e3c:

            call __stack_chk_fail@PLT
.L_419e41:

            imul R13D,DWORD PTR [RBP+320],1000
            call .L_401240

            mov RDI,R14
            mov ESI,EAX
            sub R13D,4000
            mov EDX,R13D
            call .L_433770

            mov ESI,1
            mov RDI,R12
            call .L_440c70

            jmp .L_419d1d
.L_419e77:

            lea RCX,QWORD PTR [RIP+.L_41c2e0]
            lea RSI,QWORD PTR [RIP+.L_41c1f2]
            lea RDI,QWORD PTR [RIP+.L_41c218]
            mov EDX,3185
            call __assert_fail@PLT
.L_419e96:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419ea0:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            xor EBX,EBX
            sub RSP,248
.L_419ec1:

            mov R14,QWORD PTR [RDX+40]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+360],0
            mov WORD PTR [RSP+60],CX
            mov WORD PTR [RSP+58],AX
            mov WORD PTR [RSP+70],R8W
            mov EAX,2
            mov WORD PTR [RSP+86],R9W
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+128],R11W
            mov WORD PTR [RSP+74],BX
            je .L_41a138

            mov RBX,RSI
            mov R12,RDX
            lea RDX,QWORD PTR [RSP+56]
            mov R13,RDI
            mov ESI,26
            mov RDI,RBX
            call .L_4338c0

            test EAX,EAX
            jne .L_41a168

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+58]
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+56]
            movzx EBP,BYTE PTR [RSP+59]
            lea RSI,QWORD PTR [RSP+160]
            pxor XMM0,XMM0
            mov QWORD PTR [RSP+208],0
            mov DWORD PTR [RSP+216],0
            lea RDI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+16],RSI
            add EAX,2
            movaps XMMWORD PTR [RSP+160],XMM0
            mov WORD PTR [RSP+56],AX
            add EBP,EAX
            movaps XMMWORD PTR [RSP+176],XMM0
            movaps XMMWORD PTR [RSP+192],XMM0
            movzx EAX,WORD PTR [R14]
            mov WORD PTR [RSP+210],AX
            movzx EAX,BYTE PTR [R14+2]
            mov BYTE PTR [RSP+214],AL
            movzx EAX,BYTE PTR [R14+3]
            mov BYTE PTR [RSP+215],AL
            movzx EAX,BYTE PTR [R14+4]
            mov BYTE PTR [RSP+216],AL
            call .L_4101e0

            movzx ESI,WORD PTR [RSP+56]
            cmp BP,SI
            jbe .L_41a120

            lea RAX,QWORD PTR [RSP+128]
            lea R12,QWORD PTR [RSP+60]
            mov QWORD PTR [RSP+24],RAX
            lea RAX,QWORD PTR [RSP+62]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RSP+98]
            mov QWORD PTR [RSP+40],RAX
            jmp .L_41a09c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41a020:

            cmp AL,2
            je .L_41a170

            cmp AL,3
            jne .L_41a080

            movzx ESI,WORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+32]
            mov EDX,18
            mov RDI,RBX
            call .L_4038b0

            movzx R14D,BYTE PTR [RSP+97]
            cmp R14B,16
            ja .L_41a168

            mov RAX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+40]
            movzx EDX,R14B
            mov ECX,52
            lea RDI,QWORD PTR [RAX+8]
            call __memcpy_chk@PLT

            mov BYTE PTR [RSP+R14*1+168],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a080:

            movzx ESI,WORD PTR [RSP+56]
            movzx EAX,BYTE PTR [RSP+61]
            lea ESI,DWORD PTR [RSI+RAX*1+2]
            cmp SI,BP
            mov WORD PTR [RSP+56],SI
            jae .L_41a120
.L_41a09c:

            movzx ESI,SI
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+60]
            cmp AL,8
            je .L_41a1a0

            jbe .L_41a020

            cmp AL,18
            je .L_41a200

            cmp AL,129
            jne .L_41a080

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+70]
            mov EDX,4
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+71],2
            jne .L_41a168

            movzx EDX,BYTE PTR [RSP+72]
            mov EAX,EDX
            add EDX,EDX
            shr EAX,4
            and EDX,16
            and EAX,15
            mov ECX,EAX
            movzx EAX,BYTE PTR [RSP+217]
            and EAX,4294967264
            or EAX,ECX
            or EAX,EDX
            mov BYTE PTR [RSP+217],AL
            jmp .L_41a080
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a120:

            mov RSI,QWORD PTR [R13+352]
            mov RDI,QWORD PTR [RSP+16]
            call QWORD PTR [R13+344]
.L_41a133:

            xor EAX,EAX
            nop
            nop
            nop
.L_41a138:

            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_41a324

            add RSP,248
.L_41a156:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a168:

            mov EAX,6
            jmp .L_41a138
          .byte 0x90
.L_41a170:

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+86]
            mov EDX,10
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+87],8
            jne .L_41a168

            mov RAX,QWORD PTR [RSP+88]
            mov QWORD PTR [RSP+185],RAX
            jmp .L_41a080
.L_41a1a0:

            movzx ESI,WORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+24]
            mov EDX,18
            mov RDI,RBX
            call .L_4038b0

            movzx ECX,BYTE PTR [RSP+129]
            lea EAX,DWORD PTR [RCX-1]
            cmp AL,15
            ja .L_41a168

            cmp BYTE PTR [R13+361],0
            jne .L_41a240
.L_41a1d0:

            mov RAX,QWORD PTR [RSP+24]
            mov BYTE PTR [RSP+193],CL
            movzx EDX,CL
            mov ECX,26
            lea RSI,QWORD PTR [RAX+2]
            mov RAX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+34]
            call __memcpy_chk@PLT

            jmp .L_41a080
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a200:

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+74]
            mov EDX,4
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+75],2
            jne .L_41a168

            movzx EAX,WORD PTR [RSP+76]
            rol AX,8
            mov WORD PTR [RSP+212],AX
            jmp .L_41a080
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a240:

            mov RDI,QWORD PTR [RSP]
            lea R14,QWORD PTR [RSP+66]
            mov ESI,4129
            lea R15,QWORD PTR [RSP+78]
            call .L_432590

            mov ESI,32773
            mov RDI,R14
            call .L_432590

            mov RDI,R13
            call .L_4334e0

            mov RSI,R15
            mov RDI,RAX
            call .L_4012d0

            mov RSI,R15
            mov RDI,R15
            call .L_43a870

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
            nop
.L_41a290:

            movzx ESI,BYTE PTR [R15]
            mov RDI,QWORD PTR [RSP]
            add R15,1
            call .L_4325a0

            movzx ESI,BYTE PTR [R15-1]
            mov RDI,R14
            call .L_4325a0

            cmp QWORD PTR [RSP+8],R15
            jne .L_41a290

            movzx ESI,BYTE PTR [RSP+129]
            movzx EAX,WORD PTR [RSP+64]
            lea EDI,DWORD PTR [RSI*8]
            cdq 
            mov ECX,ESI
            sub ESI,1
            movzx EDI,DIL
            mov R8D,ESI
            idiv EDI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub R8D,EAX
            movsxd RAX,R8D
            movzx EAX,BYTE PTR [RSP+RAX*1+130]
            bt EAX,EDX
            jae .L_41a133

            movzx EAX,WORD PTR [RSP+68]
            cdq 
            idiv EDI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub ESI,EAX
            movsxd RSI,ESI
            movzx EAX,BYTE PTR [RSP+RSI*1+130]
            bt EAX,EDX
            jb .L_41a1d0

            xor EAX,EAX
            jmp .L_41a138
.L_41a324:

            call __stack_chk_fail@PLT
.L_41a329:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a330:

            movzx EAX,BYTE PTR [RDI+42]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41a368

            cmp AL,1
            je .L_41a368
.L_41a343:

            movzx EAX,BYTE PTR [RDI+230]
            and EAX,7
            cmp AL,7
            jne .L_41a378

            cmp SI,WORD PTR [RDI+228]
            jne .L_41a378

            lea RAX,QWORD PTR [RDI+204]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a368:

            cmp SI,WORD PTR [RDI+40]
            lea RAX,QWORD PTR [RDI+16]
            jne .L_41a343

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a378:

            xor EAX,EAX
            ret 
.L_41a37b:

            nop
            nop
            nop
            nop
            nop
.L_41a380:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            movzx EAX,BYTE PTR [RDI+42]
            mov RBX,RDI
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41a3d0

            cmp AL,1
            je .L_41a3d0

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,7
            jne .L_41a3f1
.L_41a3ab:

            lea RBP,QWORD PTR [RBX+204]
            mov RSI,R12
            mov RDI,RBP
            call .L_408da0

            test AL,AL
            je .L_41a3f1
.L_41a3c1:

            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a3d0:

            lea RBP,QWORD PTR [RBX+16]
            mov RSI,R12
            mov RDI,RBP
            call .L_408da0

            test AL,AL
            jne .L_41a3c1

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,7
            je .L_41a3ab
.L_41a3f1:

            xor EBP,EBP
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_41a3fb:

            nop
            nop
            nop
            nop
            nop
.L_41a400:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,152
.L_41a41a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+48],CX
            lea RCX,QWORD PTR [RSP+26]
            mov WORD PTR [RSP+30],DX
            mov R13,RAX
            mov EDX,4
            xor EAX,EAX
            mov RDI,RBX
            mov WORD PTR [RSP+26],AX
            mov BYTE PTR [RSP+135],12
            call .L_4339f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_41a47a

            cmp BYTE PTR [RSP+27],2
            je .L_41a4b0
.L_41a474:

            mov R15D,6
.L_41a47a:

            mov RBX,QWORD PTR [RSP+136]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_41a696

            add RSP,152
.L_41a49b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a4b0:

            lea RCX,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,11
            mov RDI,RBX
            call .L_4339f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_41a47a

            cmp BYTE PTR [RSP+31],8
            jne .L_41a474

            lea RAX,QWORD PTR [R12+16]
            lea R14,QWORD PTR [RSP+40]
            mov RDI,RAX
            mov RSI,R14
            mov QWORD PTR [RSP+8],RAX
            call .L_4101e0

            cmp DWORD PTR [RBP+12],1
            je .L_41a47a

            test BYTE PTR [RBP+56],2
            je .L_41a5b8

            lea RDI,QWORD PTR [R13+2568]
            mov RDX,R12
            mov RSI,RBX
            call .L_423420

            test EAX,EAX
            jne .L_41a620
.L_41a519:

            mov EAX,DWORD PTR [RBP+12]
            cmp EAX,2
            je .L_41a5f0

            jb .L_41a47a

            cmp EAX,4
            ja .L_41a47a

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,R14
            call .L_41e4b0

            test RAX,RAX
            je .L_41a47a

            movzx EAX,BYTE PTR [RAX+26]
            and EAX,7
            cmp AL,7
            jne .L_41a47a
.L_41a55b:

            cmp BYTE PTR [RBP+10],0
            jne .L_41a575

            movzx EAX,BYTE PTR [RSP+37]
            sub AL,BYTE PTR [R13+7785]
            test AL,AL
            jle .L_41a47a
.L_41a575:

            call .L_401460

            movzx R8D,AX
            mov EDX,274877907
            mov RSI,QWORD PTR [RSP+8]
            mov EAX,R8D
            mov ECX,1
            mov RDI,RBP
            mul EDX
            shr EDX,6
            imul EAX,EDX,1000
            lea RDX,QWORD PTR [RSP+135]
            sub R8D,EAX
            call .L_418c80

            jmp .L_41a47a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a5b8:

            mov RSI,R14
            mov RDI,RBP
            call .L_41a380

            lea RDX,QWORD PTR [RBP+16]
            cmp RAX,RDX
            jne .L_41a519

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,WORD PTR [RBP+40]
            je .L_41a519

            mov RDI,RBP
            call .L_417190

            jmp .L_41a519
.L_41a5f0:

            lea RDI,QWORD PTR [RBP+16]
            mov RSI,R14
            call .L_408db0

            test AL,AL
            jne .L_41a47a

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,WORD PTR [RBP+40]
            je .L_41a628
.L_41a613:

            call .L_401240

            mov DWORD PTR [RBP+24],EAX
            jmp .L_41a55b
.L_41a620:

            mov R15D,EAX
            jmp .L_41a47a
.L_41a628:

            mov EDX,DWORD PTR [RSP+32]
            cmp DWORD PTR [RBP+2],EDX
            movzx EAX,BYTE PTR [RSP+39]
            mov ESI,EDX
            bswap ESI
            jne .L_41a63f

            cmp AL,BYTE PTR [RBP+9]
            je .L_41a613
.L_41a63f:

            movzx EDX,BYTE PTR [RSP+36]
            movzx ECX,AL
            mov RDI,RBP
            call .L_417200

            test BYTE PTR [RBP+56],2
            jne .L_41a65b
.L_41a655:

            mov BYTE PTR [RBP+10],1
            jmp .L_41a613
.L_41a65b:

            lea R12,QWORD PTR [RSP+48]
            mov EDX,74
            mov ESI,9
            mov RDI,RBX
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_41a655

            movzx EAX,BYTE PTR [RSP+49]
            sub EAX,9
            cmp AL,63
            ja .L_41a655

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,R12
            call .L_41d030

            jmp .L_41a655
.L_41a696:

            call __stack_chk_fail@PLT
.L_41a69b:

            nop
            nop
            nop
            nop
            nop
.L_41a6a0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41a6b8

            cmp EAX,2
            jne .L_41a6f0

            jmp .L_41a380
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a6b8:

            movzx EAX,BYTE PTR [RDI+42]
            movzx EDX,WORD PTR [RSI]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_41a6ce

            cmp AL,1
            jne .L_41a6d8
.L_41a6ce:

            cmp DX,WORD PTR [RDI+40]
            lea RAX,QWORD PTR [RDI+16]
            je .L_41a6f2
.L_41a6d8:

            movzx EAX,BYTE PTR [RDI+230]
            and EAX,7
            cmp AL,7
            jne .L_41a6f0

            cmp DX,WORD PTR [RDI+228]
            je .L_41a6f8

            nop
.L_41a6f0:

            xor EAX,EAX
.L_41a6f2:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a6f8:

            lea RAX,QWORD PTR [RDI+204]
            ret 
.L_41a700:

            movzx EDX,BYTE PTR [RDI+42]
            mov EAX,4294967294
            and EDX,7
            cmp DL,7
            jne .L_41a715

            movzx EAX,WORD PTR [RDI+40]
.L_41a715:

            ret 
.L_41a717:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a720:

            mov RCX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+496],RCX
            je .L_41a730
.L_41a72c:

            xor EAX,EAX
            ret 
          .byte 0x90
.L_41a730:

            mov EDX,DWORD PTR [RSI+8]
            cmp DWORD PTR [RDI+504],EDX
            jne .L_41a72c

            movzx EDX,WORD PTR [RSI+12]
            cmp WORD PTR [RDI+508],DX
            jne .L_41a72c

            movzx EDX,BYTE PTR [RSI+14]
            xor EAX,EAX
            cmp DL,251
            ja .L_41a75d

            mov EAX,EDX
            shr AL,1
            xor EAX,1
            and EAX,1
.L_41a75d:

            ret 
.L_41a75f:

            nop
.L_41a760:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,136
.L_41a777:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_433510

            mov QWORD PTR [RSP+24],RAX
            mov R15,RAX
            movzx EAX,WORD PTR [R13+58]
            lea RCX,QWORD PTR [RSP+62]
            mov EDX,2
            mov RDI,R13
            mov RSI,RCX
            mov QWORD PTR [RSP+40],RCX
            mov WORD PTR [RSP+38],AX
            mov EAX,19
            mov WORD PTR [RSP+62],AX
            call .L_403d80

            test EAX,EAX
            mov R14D,EAX
            jne .L_41a8f8

            mov RAX,R15
            mov R15,QWORD PTR [R15+8]
            test R15,R15
            je .L_41aa0d

            add RAX,7520
            lea RCX,QWORD PTR [RSP+64]
            xor EBP,EBP
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+96]
            xor R12D,R12D
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+16],RAX
            jmp .L_41a874
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a808:

            mov RDX,QWORD PTR [RSP]
            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_428150

            test EAX,EAX
            je .L_41a928

            mov BYTE PTR [RSP+96],0
            mov EDX,17
            movdqu XMM0,XMMWORD PTR [R15]
            movups XMMWORD PTR [RSP+97],XMM0
.L_41a835:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_41a9f0

            movzx EAX,BYTE PTR [RSP+96]
            add EBP,1
            sar AL,7
            and EAX,4294967288
            cmp BPL,3
            lea R12D,DWORD PTR [R12+RAX*1+17]
            ja .L_41aa00
.L_41a867:

            mov R15,QWORD PTR [R15+24]
            test R15,R15
            je .L_41a960
.L_41a874:

            mov RDI,R15
            call .L_40ff50

            test AL,AL
            jne .L_41a867

            mov RSI,R15
            mov RDI,RBX
            call .L_41a720

            test AL,AL
            jne .L_41a867

            mov RCX,QWORD PTR [R15]
            cmp QWORD PTR [RBX+496],RCX
            jne .L_41a808

            mov ECX,DWORD PTR [R15+8]
            cmp DWORD PTR [RBX+504],ECX
            jne .L_41a808

            movzx ESI,WORD PTR [R15+12]
            cmp WORD PTR [RBX+508],SI
            jne .L_41a808

            cmp BYTE PTR [R15+14],252
            jne .L_41a808

            jmp .L_41a867
.L_41a8ce:

            xor EDX,EDX
.L_41a8d0:

            mov R14D,EAX
.L_41a8d3:

            test R12B,R12B
            je .L_41a8f8

            test DL,DL
            je .L_41a8f8

            movzx ESI,WORD PTR [RSP+38]
            mov RCX,QWORD PTR [RSP+40]
            mov EDX,2
            mov RDI,R13
            mov BYTE PTR [RSP+63],R12B
            call .L_403b10
.L_41a8f8:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_41aa2b

            add RSP,136
.L_41a916:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a928:

            movzx EAX,BYTE PTR [RSP+73]
            mov RDI,R15
            or EAX,4294967168
            mov BYTE PTR [RSP+96],AL
            call .L_4101a0

            movsx EDX,BYTE PTR [RSP+96]
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RSP+97],RAX
            sar EDX,31
            and EDX,4294967288
            add EDX,17
            jmp .L_41a835
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a960:

            test BYTE PTR [RBX+56],8
            mov EDX,1
            jne .L_41a8d3
.L_41a96f:

            lea RAX,QWORD PTR [RSP+61]
            mov BYTE PTR [RSP+61],0
            lea RBX,QWORD PTR [RSP+80]
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP],RAX
            jmp .L_41a9d2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a990:

            mov RSI,QWORD PTR [RSP]
            mov EDX,17
            mov RDI,R13
            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov BYTE PTR [RSP+96],0
            movups XMMWORD PTR [RSP+97],XMM0
            call .L_403d80

            test EAX,EAX
            jne .L_41a8ce

            movzx EDX,BYTE PTR [RSP+96]
            add EBP,1
            sar DL,7
            and EDX,4294967288
            cmp BPL,3
            lea R12D,DWORD PTR [R12+RDX*1+17]
            ja .L_41aa21
.L_41a9d2:

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,RBX
            mov RSI,R15
            call .L_4114d0

            test EAX,EAX
            je .L_41a990

            mov EDX,1
            jmp .L_41a8d3
.L_41a9f0:

            mov R14D,EAX
            jmp .L_41a8f8
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41aa00:

            xor R14D,R14D
            mov EDX,1
            jmp .L_41a8d3
.L_41aa0d:

            test BYTE PTR [RBX+56],8
            jne .L_41a8f8

            xor EBP,EBP
            xor R12D,R12D
            jmp .L_41a96f
.L_41aa21:

            mov EDX,1
            jmp .L_41a8d0
.L_41aa2b:

            call __stack_chk_fail@PLT
.L_41aa30:

            push R14
            push R13
            lea R13,QWORD PTR [RDI+204]
            push R12
            push RBP
            mov ECX,3082
            push RBX
            mov RSI,R13
            mov RBX,RDI
            add RDI,16
            sub RSP,48
.L_41aa52:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+37],CX
            mov BYTE PTR [RSP+39],9
            call .L_408da0

            test AL,AL
            je .L_41aa83

            cmp DWORD PTR [RBX+12],2
            je .L_41ac80

            and BYTE PTR [RBX+42],248
.L_41aa83:

            mov RDI,RBX
            mov EBP,3
            call .L_417500

            test RAX,RAX
            mov R12,RAX
            je .L_41aab6

            mov EDX,11
            mov RSI,RAX
            mov RDI,RBX
            call .L_417540

            test EAX,EAX
            mov EBP,EAX
            je .L_41aae0
.L_41aaae:

            mov RDI,R12
            call .L_403400
.L_41aab6:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_41ac8a

            add RSP,48
.L_41aad0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41aae0:

            movzx ECX,BYTE PTR [RBX+168]
            lea RDX,QWORD PTR [RBX+160]
            mov RSI,R12
            mov RDI,RBX
            call .L_417790

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov RSI,R12
            mov RDI,RBX
            call .L_417800

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov RSI,R12
            mov RDI,RBX
            call .L_417860

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            movzx EAX,BYTE PTR [RBX+56]
            lea R14,QWORD PTR [RSP+12]
            mov EDX,257
            mov WORD PTR [RSP+12],DX
            mov RDI,R12
            mov EDX,3
            mov RSI,R14
            mov BYTE PTR [RSP+14],AL
            call .L_403d80

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov EDX,DWORD PTR [RBX+320]
            mov RSI,R12
            mov RDI,RBX
            call .L_4176d0

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov EDX,4
            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],33554962
            call .L_403d80

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            test BYTE PTR [RBX+56],2
            jne .L_41ac8f

            mov RSI,R12
            mov RDI,RBX
            call .L_41a760

            mov EBP,EAX
            mov EAX,2
            test EBP,EBP
            jne .L_41aaae
.L_41abb3:

            lea RDX,QWORD PTR [RSP+37]
            movzx ECX,AL
            mov RSI,R12
            mov RDI,RBX
            call .L_417a50

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov RSI,R12
            mov RDI,RBX
            call .L_417bb0

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            mov RSI,R12
            mov RDI,RBX
            call .L_417c50

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            lea RDX,QWORD PTR [RSP+18]
            xor EAX,EAX
            mov ECX,14
            or BYTE PTR [RBX+230],7
            lea RBP,QWORD PTR [RSP+16]
            mov RSI,R13
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,RBP
            mov WORD PTR [RSP+16],33022
            call .L_4101d0

            mov RDX,RBP
            mov RSI,R12
            mov RDI,RBX
            call .L_4180d0

            test EAX,EAX
            mov EBP,EAX
            jne .L_41aaae

            test BYTE PTR [RBX+56],8
            jne .L_41aab6

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2520]
            mov ESI,1
            call .L_413a10

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2256]
            xor ESI,ESI
            call .L_440c70

            jmp .L_41aab6
          .byte 0x90
.L_41ac80:

            mov EBP,24
            jmp .L_41aab6
.L_41ac8a:

            call __stack_chk_fail@PLT
.L_41ac8f:

            mov EAX,3
            jmp .L_41abb3
.L_41ac99:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41aca0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,72
.L_41acb1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBX+188],3
            ja .L_41ad80

            mov R12,RAX
            movzx EAX,BYTE PTR [RBX+42]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41acf8

            cmp AL,1
            je .L_41acf8

            mov RDI,RBX
            call .L_417190

            xor EAX,EAX
            jmp .L_41ad55
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41acf8:

            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            add BYTE PTR [RBX+188],1
            mov RDI,RBX
            call .L_417500

            test RAX,RAX
            mov RBP,RAX
            je .L_41ad98

            movzx EAX,BYTE PTR [RAX+78]
            mov EDX,13
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,32
            mov BYTE PTR [RBP+78],AL
            call .L_417540

            test EAX,EAX
            je .L_41ada0
.L_41ad45:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41ad55:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41af26

            add RSP,72
.L_41ad6d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ad80:

            mov BYTE PTR [RBX+188],0
            mov RDI,RBX
            call .L_417190

            xor EAX,EAX
            jmp .L_41ad55
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ad98:

            mov EAX,3
            jmp .L_41ad55
          .byte 0x90
.L_41ada0:

            movzx EAX,BYTE PTR [RBX+56]
            lea RSI,QWORD PTR [RSP+29]
            mov ECX,257
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+29],CX
            mov BYTE PTR [RSP+31],AL
            call .L_403d80

            test EAX,EAX
            jne .L_41ad45

            test BYTE PTR [RBX+56],2
            je .L_41adf0
.L_41add2:

            cmp DWORD PTR [RBX+12],4
            ja .L_41ae90

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_41c220]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0x90
.L_41adf0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_41a760

            test EAX,EAX
            jne .L_41ad45

            jmp .L_41add2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41ae08:

            lea R15,QWORD PTR [RBX+169]
            lea R14,QWORD PTR [RBX+177]
            mov R13,R15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ae20:

            add R13,1
            call .L_401460

            cmp R13,R14
            mov BYTE PTR [R13-1],AL
            jne .L_41ae20

            mov ECX,8
            mov RDX,R15
            mov RSI,RBP
            mov RDI,RBX
            call .L_417720

            test EAX,EAX
            jne .L_41ad45

            jmp .L_41ae90
          .byte 0x90
.L_41ae50:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4175c0

            test EAX,EAX
            jne .L_41ad45

            mov RSI,RBP
            mov RDI,RBX
            call .L_417920

            test EAX,EAX
            jne .L_41ad45

            mov EDX,DWORD PTR [RBX+320]
            mov RSI,RBP
            mov RDI,RBX
            call .L_4176d0

            test EAX,EAX
            jne .L_41ad45

            nop
.L_41ae90:

            lea R13,QWORD PTR [RSP+32]
            lea RSI,QWORD PTR [RBX+16]
            xor EAX,EAX
            mov EDX,4294934782
            mov WORD PTR [RSP+46],AX
            mov QWORD PTR [RSP+34],0
            mov RDI,R13
            mov WORD PTR [RSP+32],DX
            mov DWORD PTR [RSP+42],0
            call .L_4101d0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_4180d0

            test EAX,EAX
            jne .L_41ad45

            test BYTE PTR [RBX+56],8
            lea RBP,QWORD PTR [R12+2256]
            mov DWORD PTR [RSP+12],EAX
            jne .L_41af10

            lea RDI,QWORD PTR [R12+2520]
            mov ESI,1
            call .L_413a10

            xor ESI,ESI
            mov RDI,RBP
            call .L_440c70

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41ad55
.L_41af10:

            mov ESI,1
            mov RDI,RBP
            call .L_440c70

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41ad55
.L_41af26:

            call __stack_chk_fail@PLT
.L_41af2b:

            lea RCX,QWORD PTR [RIP+.L_41c3c0]
            lea RSI,QWORD PTR [RIP+.L_41c1f2]
            lea RDI,QWORD PTR [RIP+.L_41c218]
            mov EDX,1904
            call __assert_fail@PLT
.L_41af4a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41af50:

            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov R12D,EDX
            mov RBX,RDI
            sub RSP,8
.L_41af63:

            call .L_433510

            mov RDI,RAX
            mov RBP,RAX
            call .L_4334e0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            mov EDX,13
            jne .L_41b00e

            cmp BYTE PTR [RBP+8120],0
            je .L_41b00e

            mov RDI,RBX
            mov DWORD PTR [RBX+12],1
            call .L_433530

            mov ESI,4
            mov RDI,RAX
            call .L_402d80

            mov RDI,RBX
            call .L_4165b0

            lea RDI,QWORD PTR [RBP+1368]
            call .L_413f40

            test R13B,R13B
            je .L_41afcd

            mov DWORD PTR [RBX+64],1
.L_41afcd:

            test R12B,R12B
            jne .L_41b020

            mov RDI,RBX
            call .L_433510

            cmp WORD PTR [RAX+1664],-2
            je .L_41b020

            mov RDI,RBX
            call .L_433510

            test WORD PTR [RAX+1664],511
            jne .L_41b040

            lea RDI,QWORD PTR [RBP+2568]
            mov ESI,2
            call .L_41fed0

            test EAX,EAX
            jne .L_41b020

            xor EDX,EDX
.L_41b00e:

            add RSP,8
.L_41b012:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b020:

            mov RDI,RBX
            xor ESI,ESI
            call .L_4164b0

            add RSP,8
            xor EDX,EDX
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b040:

            mov DWORD PTR [RBX+60],1
            mov BYTE PTR [RBX+188],0
            mov RDI,RBX
            call .L_41aca0

            xor EDX,EDX
            jmp .L_41b00e
.L_41b05a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41b060:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBP,RSI
            sub RSP,32
.L_41b072:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            xor ECX,ECX
            xor EDX,EDX
            mov R13,RAX
            mov WORD PTR [RSP+5],CX
            lea RCX,QWORD PTR [RSP+9]
            xor EAX,EAX
            mov WORD PTR [RSP+14],DX
            mov ESI,20
            mov EDX,5
            mov RDI,RBP
            mov WORD PTR [RSP+9],AX
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b0c8

            cmp BYTE PTR [RSP+10],3
            je .L_41b0f0
.L_41b0c3:

            mov EBX,6
.L_41b0c8:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_41b1fa

            add RSP,32
.L_41b0e2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b0f0:

            lea R14,QWORD PTR [RSP+14]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b0c8

            cmp BYTE PTR [RSP+15],8
            jne .L_41b0c3

            lea RCX,QWORD PTR [RSP+5]
            mov EDX,4
            mov ESI,21
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b0c8

            cmp BYTE PTR [RSP+6],2
            jne .L_41b0c3

            lea RDI,QWORD PTR [R13+1080]
            call .L_40a460

            test RAX,RAX
            mov RBP,RAX
            je .L_41b162

            add R14,2
            mov RDI,RAX
            mov RSI,R14
            call .L_40e0c0

            test EAX,EAX
            jle .L_41b1cb
.L_41b162:

            xor ESI,ESI
            mov RDI,R12
            add R13,1560
            call .L_416670

            movzx EAX,BYTE PTR [R13+108]
            movzx ESI,WORD PTR [RSP+12]
            mov BYTE PTR [R12+363],AL
            movzx EAX,WORD PTR [R13+106]
            rol SI,8
            mov RDI,R13
            movzx ESI,SIL
            mov WORD PTR [R12+364],AX
            call .L_406270

            movzx ESI,WORD PTR [RSP+7]
            mov RDI,R13
            rol SI,8
            movzx ESI,SI
            call .L_406120

            mov EDX,1
            xor ESI,ESI
            mov RDI,R12
            call .L_41af50

            jmp .L_41b0c8
.L_41b1cb:

            mov RSI,R14
            mov RDI,RBP
            call .L_40e0c0

            test EAX,EAX
            jns .L_41b0c8

            movzx ESI,WORD PTR [RSP+12]
            xor EDX,EDX
            mov RDI,R12
            rol SI,8
            movzx ESI,SIL
            call .L_4183c0

            jmp .L_41b0c8
.L_41b1fa:

            call __stack_chk_fail@PLT
.L_41b1ff:

            nop
.L_41b200:

            cmp DWORD PTR [RDI+320],ESI
            je .L_41b240

            cmp ESI,5
            mov EAX,5
            push RBX
            cmovb ESI,EAX
            mov RBX,RDI
            mov DWORD PTR [RDI+320],ESI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2520]
            call .L_4139f0

            cmp DWORD PTR [RBX+12],2
            je .L_41b248

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b240:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b248:

            mov RDI,RBX
            call .L_41aca0

            xor EAX,EAX
            pop RBX
            ret 
.L_41b254:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b260:

            mov EAX,ESI
            and EAX,10
            cmp AL,2
            je .L_41b2c0

            movzx EAX,BYTE PTR [RDI+56]
            cmp AL,SIL
            je .L_41b2d0

            push RBX
            mov EDX,DWORD PTR [RDI+12]
            mov RBX,RDI
            mov BYTE PTR [RDI+56],SIL
            cmp EDX,2
            je .L_41b2a0

            jb .L_41b292

            cmp EDX,4
            ja .L_41b292

            test AL,2
            je .L_41b292

            and ESI,2
            je .L_41b2d8
.L_41b292:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b2a0:

            call .L_433510

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,RBX
            call .L_417080

            mov RDI,RBX
            call .L_41aca0

            xor EAX,EAX
            pop RBX
            ret 
.L_41b2c0:

            mov EAX,7
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b2d0:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b2d8:

            call .L_417190

            xor EAX,EAX
            pop RBX
            ret 
.L_41b2e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b2f0:

            push R12
            push RBP
            push RBX
.L_41b2f4:

            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RBX+60],5
            ja .L_41b372

            mov RBP,RAX
            mov EAX,DWORD PTR [RBX+60]
            lea RDX,QWORD PTR [RIP+.L_41c234]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b320:

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,3
            je .L_41b3e9
.L_41b332:

            pxor XMM0,XMM0
            mov EAX,DWORD PTR [RBX+64]
            mov DWORD PTR [RBX+60],0
            mov QWORD PTR [RBX+236],0
            movups XMMWORD PTR [RBX+220],XMM0
            and BYTE PTR [RBX+230],248
            cmp EAX,2
            movups XMMWORD PTR [RBX+204],XMM0
            je .L_41b380

            cmp EAX,3
            je .L_41b488
.L_41b36e:

            test EAX,EAX
            je .L_41b39e
.L_41b372:

            pop RBX
.L_41b373:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b380:

            lea R12,QWORD PTR [RBP+1208]
            mov RDI,R12
            call .L_40a580

            test EAX,EAX
            je .L_41b540

            mov DWORD PTR [RBX+64],0
.L_41b39e:

            mov EAX,DWORD PTR [RBX+180]
            cmp EAX,1
            je .L_41b478

            jb .L_41b4a8

            cmp EAX,2
            jne .L_41b372

            xor ESI,ESI
.L_41b3ba:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_4164b0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b3d0:

            movzx EAX,BYTE PTR [RBX+230]
            mov DWORD PTR [RBX+60],4
            and EAX,7
            cmp AL,3
            jne .L_41b465
.L_41b3e9:

            cmp DWORD PTR [RBX+12],2
            jne .L_41b408

            cmp BYTE PTR [RBX+201],0
            jne .L_41b408

            cmp DWORD PTR [RBX+180],3
            jne .L_41b332

            nop
            nop
            nop
.L_41b408:

            mov RDI,RBX
            call .L_41aa30

            test EAX,EAX
            jne .L_41b332

            mov DWORD PTR [RBX+60],5
            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov EDX,1250
            mov ESI,EAX
            pop RBX
.L_41b430:

            pop RBP
            pop R12
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b440:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_41aca0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b450:

            and BYTE PTR [RBX+230],248
            mov DWORD PTR [RBX+60],3
            mov BYTE PTR [RBX+201],0
.L_41b465:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_418960
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b478:

            mov ESI,2
            jmp .L_41b3ba
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b488:

            lea RDI,QWORD PTR [RBP+1080]
            mov DWORD PTR [RBX+64],0
            call .L_40a580

            mov EAX,DWORD PTR [RBX+64]
            jmp .L_41b36e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b4a8:

            cmp DWORD PTR [RBX+12],2
            je .L_41b4f0

            cmp WORD PTR [RBX+364],-1
            jne .L_41b578

            test BYTE PTR [RBX+56],2
            je .L_41b5ae

            lea RDI,QWORD PTR [RBP+2568]
            call .L_422750

            test EAX,EAX
            je .L_41b372
.L_41b4da:

            mov RDI,RBX
            pop RBX
.L_41b4de:

            pop RBP
            pop R12
            jmp .L_417190
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b4f0:

            test BYTE PTR [RBX+56],8
            jne .L_41b372

            lea RBX,QWORD PTR [RBP+2256]
            lea RDI,QWORD PTR [RBP+2520]
            xor ESI,ESI
            call .L_413a10

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            pop RBP
            pop R12
            jmp .L_440c70
.L_41b51d:

            lea RCX,QWORD PTR [RIP+.L_41c440]
            lea RSI,QWORD PTR [RIP+.L_41c1f2]
            lea RDI,QWORD PTR [RIP+.L_41c218]
            mov EDX,1456
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b540:

            mov RDI,R12
            call .L_40a630

            mov DWORD PTR [RBX+64],3
            mov DWORD PTR [RBX+60],2
            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov ESI,EAX
            mov EDX,750
            call .L_433770

            mov EAX,DWORD PTR [RBX+64]
            jmp .L_41b36e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b578:

            movzx ESI,BYTE PTR [RBX+363]
            add RBP,1560
            mov RDI,RBP
            call .L_406270

            movzx ESI,WORD PTR [RBX+364]
            mov RDI,RBP
            call .L_406120

            mov EAX,4294967295
            mov WORD PTR [RBX+364],AX
            jmp .L_41b4da
.L_41b5ae:

            mov RDI,RBX
            call .L_418590

            jmp .L_41b4da
.L_41b5bb:

            nop
            nop
            nop
            nop
            nop
.L_41b5c0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a60

            add RSP,8
            mov RDI,RAX
            jmp .L_41b2f0
.L_41b5dd:

            nop
            nop
            nop
.L_41b5e0:

            push RBX
            mov RBX,RDI
            call .L_433530

            mov EAX,DWORD PTR [RAX]
            test EAX,EAX
            jne .L_41b600

            mov RDI,RBX
            pop RBX
            jmp .L_41aca0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b600:

            lea RDI,QWORD PTR [RBX+328]
            pop RBX
            jmp .L_405290
.L_41b60d:

            nop
            nop
            nop
.L_41b610:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a60

            add RSP,8
            mov RDI,RAX
            jmp .L_41b5e0
.L_41b62a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41b630:

            jmp .L_41aca0
.L_41b635:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b640:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a60

            add RSP,8
            mov RDI,RAX
            jmp .L_41aca0
.L_41b65d:

            nop
            nop
            nop
.L_41b660:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RSI
            sub RSP,56
.L_41b67a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_417500

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_41b6c0

            mov EDX,14
            mov RSI,RBP
            mov RDI,R12
            call .L_417540

            test EAX,EAX
            je .L_41b6e8
.L_41b6b0:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41b6c0:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41b840

            add RSP,56
.L_41b6d8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b6e8:

            mov RSI,RBP
            mov RDI,R12
            call .L_4175c0

            test EAX,EAX
            jne .L_41b6b0

            mov RSI,RBP
            mov RDI,R12
            call .L_417920

            test EAX,EAX
            jne .L_41b6b0

            test R14B,R14B
            je .L_41b751

            movzx R14D,R14B
            lea R15,QWORD PTR [RIP+.L_41c24c]
            lea EAX,DWORD PTR [R14-1]
            lea R14,QWORD PTR [RBX+RAX*1+1]
            nop
.L_41b720:

            cmp BYTE PTR [RBX],19
            ja .L_41b748

            movzx EAX,BYTE PTR [RBX]
            movsxd RAX,DWORD PTR [R15+RAX*4]
            add RAX,R15
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b738:

            test BYTE PTR [R12+56],2
            je .L_41b828

            nop
            nop
            nop
            nop
.L_41b748:

            add RBX,1
            cmp RBX,R14
            jne .L_41b720
.L_41b751:

            lea RBX,QWORD PTR [RSP+16]
            xor EAX,EAX
            lea RSI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+18],0
            mov EDX,4294934782
            mov WORD PTR [RBX+14],AX
            mov DWORD PTR [RBX+10],0
            mov RDI,RBX
            mov WORD PTR [RSP+16],DX
            call .L_4101d0

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_4180d0

            test EAX,EAX
            je .L_41b6c0

            jmp .L_41b6b0
          .byte 0x66
          .byte 0x90
.L_41b7a0:

            mov EDX,DWORD PTR [R12+320]
            mov RSI,RBP
            mov RDI,R12
            call .L_4176d0

            test EAX,EAX
            je .L_41b748

            jmp .L_41b6b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b7c0:

            mov RSI,RBP
            mov RDI,R12
            call .L_417860

            test EAX,EAX
            je .L_41b748

            jmp .L_41b6b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b7e0:

            mov RSI,RBP
            mov RDI,R12
            call .L_417800

            test EAX,EAX
            je .L_41b748

            jmp .L_41b6b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b800:

            movzx ECX,BYTE PTR [R13+1]
            lea RDX,QWORD PTR [R13+2]
            mov RSI,RBP
            mov RDI,R12
            call .L_417790

            test EAX,EAX
            je .L_41b748

            jmp .L_41b6b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b828:

            mov RSI,RBP
            mov RDI,R12
            call .L_41a760

            test EAX,EAX
            je .L_41b748

            jmp .L_41b6b0
.L_41b840:

            call __stack_chk_fail@PLT
.L_41b845:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b850:

            push R14
            push R13
            xor ECX,ECX
            push R12
            push RBP
            mov R13,RDX
            push RBX
            xor EDX,EDX
            mov RBP,RSI
            xor ESI,ESI
            mov R12,RDI
            mov RDI,RBP
            sub RSP,48
.L_41b86e:

            mov WORD PTR [RSP],CX
            lea RCX,QWORD PTR [RSP+3]
            mov WORD PTR [RSP+15],DX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+25],SI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov WORD PTR [RSP+3],AX
            mov DWORD PTR [RSP+35],0
            mov BYTE PTR [RSP+39],0
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b8d8

            cmp BYTE PTR [RSP+4],2
            jne .L_41b900

            movzx EAX,WORD PTR [RSP+5]
            rol AX,8
            cmp AX,WORD PTR [R12+40]
            je .L_41b910
.L_41b8cf:

            mov EBX,2
            nop
            nop
            nop
            nop
.L_41b8d8:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_41ba52

            add RSP,48
.L_41b8f2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b900:

            mov EBX,6
            jmp .L_41b8d8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b910:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            call .L_418d90

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b8d8

            mov RCX,RSP
            mov EDX,3
            mov ESI,17
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_41b977

            cmp BYTE PTR [RSP+1],1
            jne .L_41b900

            lea R14,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [R13+16]
            mov RSI,R14
            call .L_4101e0

            lea RDI,QWORD PTR [R12+16]
            mov RSI,R14
            call .L_408da0

            test AL,AL
            je .L_41b8cf

            cmp BYTE PTR [RSP+2],1
            je .L_41ba45
.L_41b977:

            lea RBX,QWORD PTR [RSP+25]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_41ba3d

            movzx R13D,BYTE PTR [RSP+26]
            cmp R13B,5
            ja .L_41b900

            lea RSI,QWORD PTR [RBX+2]
            lea RDI,QWORD PTR [RSP+35]
            movzx EDX,R13B
            mov ECX,5
            call __memcpy_chk@PLT
.L_41b9c0:

            lea R14,QWORD PTR [RSP+15]
            mov EDX,10
            mov ESI,3
            mov RDI,RBP
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_41ba22

            movzx EAX,BYTE PTR [RSP+16]
            sub EAX,4
            cmp AL,4
            ja .L_41b900

            cmp R13B,2
            movzx EAX,R13B
            mov EBX,3
            ja .L_41b8d8

            mov BYTE PTR [RSP+RAX*1+35],4
            lea EDX,DWORD PTR [R13+1]
            lea EAX,DWORD PTR [R13+2]
            add R13D,3
            movzx EDX,DL
            movzx EAX,AL
            mov BYTE PTR [RSP+RDX*1+35],8
            mov BYTE PTR [RSP+RAX*1+35],5
.L_41ba22:

            lea RSI,QWORD PTR [RSP+35]
            movzx EDX,R13B
            mov RCX,R14
            mov RDI,R12
            call .L_41b660

            mov EBX,EAX
            jmp .L_41b8d8
.L_41ba3d:

            xor R13D,R13D
            jmp .L_41b9c0
.L_41ba45:

            mov RDI,R12
            call .L_417190

            jmp .L_41b8d8
.L_41ba52:

            call __stack_chk_fail@PLT
.L_41ba57:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ba60:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R12,RDI
            sub RSP,568
.L_41ba7a:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
.L_41ba92:

            call .L_433510

            mov RDI,RBX
            mov R14,RAX
            call .L_434780

            cmp QWORD PTR [RBP+40],0
            je .L_41baaf

            cmp BYTE PTR [RBP+37],255
            je .L_41bae0
.L_41baaf:

            mov RDI,RBX
            call .L_4347b0
.L_41bab7:

            mov RAX,QWORD PTR [RSP+552]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41be8f

            add RSP,568
.L_41bad5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_41bae0:

            movzx ESI,WORD PTR [R13+60]
            lea R15,QWORD PTR [RSP+60]
            mov EDX,12
            mov RDI,R13
            mov RCX,R15
.L_41baf5:

            call .L_4038b0

            movzx EDX,BYTE PTR [RSP+60]
            cmp DL,255
            je .L_41be00

            test DL,DL
            jne .L_41baaf

            cmp BYTE PTR [RSP+61],21
            jne .L_41baaf

            cmp AX,11
            jbe .L_41baaf

            lea RAX,QWORD PTR [R14+2568]
            mov QWORD PTR [RSP+8],RAX
            mov EAX,DWORD PTR [R12+12]
            test EAX,EAX
            je .L_41baaf

            mov EAX,DWORD PTR [RSP+66]
            bswap EAX
            cmp EAX,DWORD PTR [R14+1384]
            mov DWORD PTR [RSP+32],EAX
            jne .L_41be50

            lea RAX,QWORD PTR [R14+1388]
            mov EDX,12
            mov QWORD PTR [RSP+16],RAX
            movzx EAX,WORD PTR [R13+60]
.L_41bb5b:

            movzx ECX,WORD PTR [R13+58]
            add EAX,EDX
            cdqe 
            add RAX,4
            cmp RAX,RCX
            ja .L_41baaf

            lea ESI,DWORD PTR [RDX-1]
            mov RDI,R13
            call .L_403530

            movzx EAX,WORD PTR [R13+58]
            lea RCX,QWORD PTR [RSP+459]
            mov EDX,4
            mov RDI,R13
            lea ESI,DWORD PTR [RAX-4]
            movzx ESI,SI
            call .L_4038b0

            movzx EAX,WORD PTR [R13+58]
            mov RDI,R13
            lea ESI,DWORD PTR [RAX-4]
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            jne .L_41baaf

            lea RAX,QWORD PTR [RSP+72]
            lea RDI,QWORD PTR [RBP+16]
            mov RSI,RAX
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP+24],RAX
            call .L_4101e0

            mov ECX,DWORD PTR [RSP+62]
            mov RAX,QWORD PTR [RSP+72]
            mov EDX,16
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+479],5
            mov QWORD PTR [RSP+467],RAX
            mov EAX,ECX
            mov DWORD PTR [RSP+36],ECX
            shr EAX,24
            mov BYTE PTR [RSP+477],CH
            mov BYTE PTR [RSP+478],CL
            mov BYTE PTR [RSP+475],AL
            mov EAX,ECX
            shr EAX,16
            mov BYTE PTR [RSP+476],AL
            call .L_433f30

            movzx EDX,WORD PTR [R13+58]
            movzx EAX,WORD PTR [R13+60]
            lea R8,QWORD PTR [RSP+467]
            mov R9D,13
            mov ECX,4
            mov ESI,42
            mov RDI,RBX
            sub EDX,EAX
            call .L_433f50

            test EAX,EAX
            jne .L_41baaf

            mov RSI,QWORD PTR [RSP+40]
            mov EDX,16
            mov RDI,RBX
            call .L_434220

            mov EDX,16
            mov RSI,RBP
            mov RDI,RBX
            call .L_434220

            lea RSI,QWORD PTR [R15+1]
            mov EDX,10
            mov RDI,RBX
            call .L_434220

            movzx EAX,WORD PTR [R13+60]
            lea R15,QWORD PTR [RSP+480]
            mov WORD PTR [RSP+40],AX
            jmp .L_41bcf4
.L_41bca2:

            movzx ESI,AX
            mov RCX,R15
            mov EDX,64
            mov RDI,R13
            call .L_4038b0

            movzx EAX,AX
            xor R8D,R8D
            mov RDX,R15
            mov ECX,EAX
            mov RSI,R15
            mov RDI,RBX
            mov DWORD PTR [RSP+16],EAX
            call .L_434330

            movzx ESI,WORD PTR [R13+60]
            mov EDX,DWORD PTR [RSP+16]
            mov RCX,R15
            mov RDI,R13
            call .L_403b10

            mov ESI,DWORD PTR [RSP+16]
            mov RDI,R13
            call .L_403530

            movzx EAX,WORD PTR [R13+60]
.L_41bcf4:

            cmp WORD PTR [R13+58],AX
            ja .L_41bca2

            lea RDX,QWORD PTR [RSP+58]
            lea RSI,QWORD PTR [RSP+463]
            mov RDI,RBX
            mov BYTE PTR [RSP+58],4
            call .L_434570

            mov EAX,DWORD PTR [RSP+459]
            cmp DWORD PTR [RSP+463],EAX
            jne .L_41baaf

            mov EAX,DWORD PTR [RSP+32]
            cmp EAX,DWORD PTR [R14+1384]
            jbe .L_41bd46

            mov ESI,DWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R14+1368]
            call .L_413f50
.L_41bd46:

            movzx ESI,WORD PTR [RSP+40]
            mov RDI,R13
            call .L_4035a0

            movzx ESI,WORD PTR [R13+60]
            lea RCX,QWORD PTR [RSP+59]
            mov EDX,1
            mov RDI,R13
            call .L_4038b0

            mov ESI,1
            mov RDI,R13
            call .L_403530

            mov EAX,DWORD PTR [R12+12]
            cmp EAX,1
            jb .L_41bdbe

            cmp EAX,2
            jbe .L_41be94

            cmp EAX,4
            ja .L_41bdbe

            cmp BYTE PTR [RSP+59],12
            mov RSI,QWORD PTR [RSP+24]
            je .L_41beb9

            mov RDI,QWORD PTR [RSP+8]
            call .L_41e4b0
.L_41bda9:

            test RAX,RAX
            je .L_41bdbe

            movzx EDX,BYTE PTR [RAX+26]
            and EDX,7
            cmp DL,7
            je .L_41bec6
.L_41bdbe:

            movzx EAX,BYTE PTR [RSP+59]
            cmp AL,15
            ja .L_41baaf

            mov EDX,60951
            bt RDX,RAX
            jae .L_41baaf
.L_41bdda:

            cmp BYTE PTR [RSP+59],15
            ja .L_41baaf

            movzx EAX,BYTE PTR [RSP+59]
            lea RDX,QWORD PTR [RIP+.L_41c29c]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41be00:

            cmp AX,1
            jbe .L_41baaf

            mov ESI,2
            mov RDI,R13
            add R14,2568
            call .L_403530

            cmp BYTE PTR [RSP+60],255
            movzx EAX,BYTE PTR [RSP+61]
            je .L_41be2f

            movzx EAX,BYTE PTR [RSP+71]
.L_41be2f:

            cmp EAX,16
            je .L_41be7c

            cmp EAX,17
            jne .L_41baaf

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_419ea0

            jmp .L_41baaf
.L_41be50:

            mov ESI,DWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R14+1368]
            call .L_413e20

            cmp BYTE PTR [RSP+60],1
            mov QWORD PTR [RSP+16],RAX
            movzx EAX,WORD PTR [R13+60]
            sbb EDX,EDX
            and EDX,10
            add EDX,2
            jmp .L_41bb5b
.L_41be7c:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R14
            call .L_41dc60

            jmp .L_41baaf
.L_41be8f:

            call __stack_chk_fail@PLT
.L_41be94:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,R12
            call .L_41a380
.L_41bea1:

            jmp .L_41bda9
.L_41bea6:

            mov RBP,RAX
            mov RDI,RBX
            call .L_4347b0

            mov RDI,RBP
.L_41beb4:

            call _Unwind_Resume@PLT
.L_41beb9:

            mov RDI,R12
.L_41bebc:

            call .L_41a380

            jmp .L_41bda9
.L_41bec6:

            mov ECX,DWORD PTR [RSP+32]
            cmp ECX,DWORD PTR [RAX+20]
            je .L_41bf05

            jbe .L_41baaf

            mov ECX,DWORD PTR [RSP+32]
            mov DWORD PTR [RAX+12],0
            mov DWORD PTR [RAX+20],ECX
.L_41bee3:

            mov EDX,DWORD PTR [RSP+36]
            add EDX,1
            mov DWORD PTR [RAX+16],EDX
            jmp .L_41bdda
.L_41bef2:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_41b060

            jmp .L_41baaf
.L_41bf05:

            mov ECX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RAX+16],ECX
            jbe .L_41bee3

            jmp .L_41baaf
.L_41bf13:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41bf53

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_419b80

            jmp .L_41baaf
.L_41bf33:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41bf6c

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_41b850

            jmp .L_41baaf
.L_41bf53:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_424880

            jmp .L_41baaf
.L_41bf6c:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_424530

            jmp .L_41baaf
.L_41bf85:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_4197e0

            jmp .L_41baaf
.L_41bf98:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_424ef0

            jmp .L_41baaf
.L_41bfb1:

            mov ECX,DWORD PTR [RSP+32]
            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_419230

            jmp .L_41baaf
.L_41bfc8:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_420da0

            jmp .L_41baaf
.L_41bfdd:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_418d90

            jmp .L_41baaf
.L_41bff0:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_41ea60

            jmp .L_41baaf
.L_41c005:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_41a400

            jmp .L_41baaf
.L_41c018:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_423410

            jmp .L_41baaf
.L_41c031:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_423400

            jmp .L_41baaf
.L_41c04a:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_4228f0
.L_41c05a:

            jmp .L_41baaf
.L_41c05f:

            nop
.L_41c060:

            jmp .L_41ba60
.L_41c065:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c070:

            mov RDX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+496],RDX
            je .L_41c080
.L_41c07c:

            xor EAX,EAX
            ret 
          .byte 0x90
.L_41c080:

            mov ECX,DWORD PTR [RSI+8]
            cmp DWORD PTR [RDI+504],ECX
            jne .L_41c07c

            movzx ECX,WORD PTR [RSI+12]
            cmp WORD PTR [RDI+508],CX
            jne .L_41c07c

            cmp BYTE PTR [RSI+14],252
            sete AL
            ret 
.L_41c0a0:

            mov RAX,RSI
            lea RSI,QWORD PTR [RDI+496]
            sub RSP,8
            mov RDI,RAX
            call .L_410360

            cmp AL,63
            seta AL
            add RSP,8
            ret 
.L_41c0c0:

            lea RAX,QWORD PTR [RDI+16]
            ret 
.L_41c0c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c0d0:

            movzx EDX,BYTE PTR [RDI+230]
            lea RAX,QWORD PTR [RDI+204]
            add RDI,16
            and EDX,7
            cmp DL,7
            cmovne RAX,RDI
            ret 
.L_41c0ed:

            nop
            nop
            nop
.L_41c0f0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov R12,RCX
            mov RBX,RDI
            sub RSP,72
.L_41c10a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov RDI,RBX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_433510

            cmp R15W,WORD PTR [RAX+1664]
            je .L_41c170
.L_41c146:

            xor EAX,EAX
.L_41c148:

            mov RDX,QWORD PTR [RSP+56]
            xor RDX,QWORD PTR FS:[40]
            jne .L_41c1cc

            add RSP,72
.L_41c15c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c170:

            lea RSI,QWORD PTR [R12+24]
            mov RDI,RBP
            call .L_411990

            test AL,AL
            jne .L_41c146

            movdqu XMM0,XMMWORD PTR [RBX+496]
            rol R13W,8
            mov RDI,RBP
            mov R14,RSP
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+30],R13W
            movzx EAX,BYTE PTR [RBP+24]
            mov BYTE PTR [RSP+36],AL
            call .L_4334f0

            lea RDI,QWORD PTR [RAX+88]
            mov R8,R12
            mov RCX,R14
            xor EDX,EDX
            mov ESI,1
            call .L_43ddc0

            mov EAX,2
            jmp .L_41c148
.L_41c1cc:

            call __stack_chk_fail@PLT
.L_41c1d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c1e0:

            ret 
.L_41c1e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c1f0:

            ret 
.L_41c1f2:
          .string "thread/mle.cpp"
.L_41c201:
          .string "error == OT_ERROR_NONE"
.L_41c218:
          .string "false"
          .byte 0x66
          .byte 0x90
.L_41c220:
          .long .L_41af2b-.L_41c220
          .long .L_41ae08-.L_41c220
          .long .L_41ae50-.L_41c220
          .long .L_41af2b-.L_41c220
          .long .L_41af2b-.L_41c220
.L_41c234:
          .long .L_41b51d-.L_41c234
          .long .L_41b440-.L_41c234
          .long .L_41b450-.L_41c234
          .long .L_41b3d0-.L_41c234
          .long .L_41b320-.L_41c234
          .long .L_41b332-.L_41c234
.L_41c24c:
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b7a0-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b800-.L_41c24c
          .long .L_41b7e0-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b7c0-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b748-.L_41c24c
          .long .L_41b738-.L_41c24c
.L_41c29c:
          .long .L_41c04a-.L_41c29c
          .long .L_41c031-.L_41c29c
          .long .L_41c018-.L_41c29c
          .long .L_41baaf-.L_41c29c
          .long .L_41c005-.L_41c29c
          .long .L_41baaf-.L_41c29c
          .long .L_41baaf-.L_41c29c
          .long .L_41bff0-.L_41c29c
          .long .L_41bfdd-.L_41c29c
          .long .L_41bfc8-.L_41c29c
          .long .L_41bfb1-.L_41c29c
          .long .L_41bf98-.L_41c29c
          .long .L_41bf85-.L_41c29c
          .long .L_41bf33-.L_41c29c
          .long .L_41bf13-.L_41c29c
          .long .L_41bef2-.L_41c29c
          .zero 4
.L_41c2e0:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20

            outsd DX,DWORD PTR [RSI]
            je .L_41c325
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x52
          .byte 0x65
          .byte 0x73
          .byte 0x70
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x65
          .byte 0x28
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x63
.L_41c325:

            outsd DX,DWORD PTR [RSI]
            outsb DX,BYTE PTR [RSI]
            jae .L_41c39d
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x70
          .byte 0x36

            cmp BH,BYTE PTR [RDX]
            jae .L_41c3aa
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x49
          .byte 0x6e
          .byte 0x66
          .byte 0x6f
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c360:

            outsd DX,DWORD PTR [RSI]
            je .L_41c3a8

            jb .L_41c3d7
          .byte 0x6f
          .byte 0x72
          .byte 0x20

            outsd DX,DWORD PTR [RSI]
            je .L_41c3a5

            cmp CL,BYTE PTR [RBP+108]
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            cmp BH,BYTE PTR GS:[RDX]
            push RBX
            outsb DX,BYTE PTR GS:[RSI]
            jae .L_41c3f1
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x70
          .byte 0x36
.L_41c39d:

            cmp BH,BYTE PTR [RDX]
            jb .L_41c409
          .byte 0x73
.L_41c3a5:

            jae .L_41c3cd
          .byte 0x29
.L_41c3a8:

            add BYTE PTR [RAX],AL
.L_41c3aa:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_41c3c0:

            outsd DX,DWORD PTR [RSI]
            je .L_41c408
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
.L_41c3cd:

            insb BYTE PTR [RDI],DX
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            cmp BH,BYTE PTR GS:[RDX]
            push RBX
.L_41c3d7:

            outsb DX,BYTE PTR GS:[RSI]
            push 1432644713
            jo .L_41c446
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x52
          .byte 0x65
          .byte 0x71
          .byte 0x75
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x28
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c3f1:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
          .zero 3
.L_41c400:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72

            outsd DX,DWORD PTR [RSI]
            jb .L_41c428
.L_41c408:

            outsd DX,DWORD PTR [RSI]
.L_41c409:

            je .L_41c445
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x6e
          .byte 0x64
          .byte 0x50
          .byte 0x61
          .byte 0x72
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x52
          .byte 0x65
          .byte 0x71
          .byte 0x75
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x28
.L_41c428:

            sub DWORD PTR [RAX],EAX
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_41c440:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
.L_41c445:

            outsd DX,DWORD PTR [RSI]
.L_41c446:

            je .L_41c482
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x50
          .byte 0x61
          .byte 0x72
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x52
          .byte 0x65
          .byte 0x71
          .byte 0x75
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x54
          .byte 0x69
          .byte 0x6d
          .byte 0x65
          .byte 0x72
          .byte 0x28
          .byte 0x29
          .byte 0x0
.L_41c46e:

            or AL,144
.L_41c470:

            push RBX
            lea RBX,QWORD PTR [RDI+592]
            mov RDI,RBX
            call .L_433c20

            test AL,AL
.L_41c482:

            je .L_41c490

            mov RDI,RBX
            pop RBX
            jmp .L_433d40

            nop
            nop
            nop
.L_41c490:

            mov RDI,RBX
            xor ECX,ECX
            mov EDX,32000
            mov ESI,1000
            call .L_433cc0

            mov RDI,RBX
            pop RBX
            jmp .L_433d40
.L_41c4ad:

            nop
            nop
            nop
.L_41c4b0:

            mov EDX,DWORD PTR [RDI+2]
            mov ECX,DWORD PTR [RSI+2]
            xor EAX,EAX
            bswap EDX
            bswap ECX
            cmp EDX,ECX
            je .L_41c4ca

            cmp ECX,EDX
            sbb EAX,EAX
            and EAX,2
            sub EAX,1
.L_41c4ca:

            ret 
.L_41c4cc:

            nop
            nop
            nop
            nop
.L_41c4d0:

            xor R9D,R9D
            xor EAX,EAX
            mov R8D,128
            jmp .L_41c4ed
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41c4e0:

            mov R9D,1
.L_41c4e6:

            add EAX,1
            cmp AL,63
            je .L_41c518
.L_41c4ed:

            mov EDX,EAX
            mov ECX,EAX
            shr DL,3
            and ECX,7
            and EDX,31
            movzx ESI,BYTE PTR [RDI+RDX*1+3]
            mov EDX,R8D
            sar EDX,CL
            test ESI,EDX
            je .L_41c4e6

            cmp R9B,1
            jne .L_41c4e0

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c518:

            mov EAX,1
            ret 
.L_41c51e:

            nop
            nop
.L_41c520:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_41c52b:

            mov RBX,RSI
            lea R13,QWORD PTR [R12+752]
            lea RBP,QWORD PTR [R12+3300]
            call .L_416990

            lea RDI,QWORD PTR [R12+592]
            lea RDX,QWORD PTR [RIP+.L_421a20]
            mov RSI,RBX
            mov R8,R12
            xor ECX,ECX
            lea RBX,QWORD PTR [R12+780]
            call .L_433be0
          .byte 0x48
          .byte 0x8d
          .byte 0x5
          .byte 0x42
          .byte 0x7b
          .byte 0x0
          .byte 0x0
          .byte 0x41
          .byte 0xc7
          .byte 0x84
          .byte 0x24
          .byte 0x98
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4d
          .byte 0x89
          .byte 0xa4
          .byte 0x24
          .byte 0xb8
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x49
          .byte 0xc7
          .byte 0x84
          .byte 0x24
          .byte 0xc0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4d
          .byte 0x89
          .byte 0xa4
          .byte 0x24
          .byte 0xd8
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x49
          .byte 0x89
          .byte 0x84
          .byte 0x24
          .byte 0x90
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x49
          .byte 0x8d

            test BYTE PTR [RAX+RDX*4],AH
            add AL,BYTE PTR [RAX]
            add BYTE PTR [RCX-57],CL
            test BYTE PTR [RAX],AH
            add AL,BYTE PTR [RAX]
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RCX-58],AL
            test BYTE PTR [RAX+RBP*8],AH
            add AL,BYTE PTR [RAX]
            add BYTE PTR [RAX],AL
            mov DWORD PTR [R12+748],0
            mov QWORD PTR [R12+672],RAX
            lea RAX,QWORD PTR [RIP+.L_425a19]
            mov QWORD PTR [R12+680],RAX
            lea RAX,QWORD PTR [RIP+.L_4205e0]
            mov QWORD PTR [R12+688],RAX
            lea RAX,QWORD PTR [RIP+.L_425a1e]
            mov QWORD PTR [R12+712],RAX
            lea RAX,QWORD PTR [RIP+.L_420750]
            mov QWORD PTR [R12+720],RAX
            nop
            nop
            nop
            nop
            nop
.L_41c610:

            mov RDI,RBX
            add RBX,40
            call .L_414240

            cmp RBX,RBP
            jne .L_41c610

            lea RBP,QWORD PTR [R12+3280]
            lea RBX,QWORD PTR [R12+3308]
            lea R14,QWORD PTR [R12+4668]
            mov BYTE PTR [R12+3272],10
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c648:

            mov RDI,RBX
            add RBX,136
            call .L_414240

            cmp RBX,R14
            jne .L_41c648

            movabs RAX,70467804725759
            lea RDI,QWORD PTR [RBP+8]
            mov EDX,120
            mov QWORD PTR [R12+4658],RAX
            xor EAX,EAX
            mov QWORD PTR [R12+4640],0
            mov WORD PTR [R12+4666],AX
            movzx EAX,BYTE PTR [R12+4668]
            and RDI,-8
            mov BYTE PTR [R12+4648],0
            mov DWORD PTR [R12+4672],0
            mov WORD PTR [R12+4676],DX
            mov BYTE PTR [R12+4678],254
            or BYTE PTR [R12+56],3
            mov QWORD PTR [R12+3280],0
            or EAX,1
            and EAX,4294967293
            mov BYTE PTR [R12+4668],AL
            xor EAX,EAX
            mov QWORD PTR [RBP+1352],0
            sub RBP,RDI
            lea ECX,DWORD PTR [RBP+1360]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [R13+8]
            mov QWORD PTR [R12+752],0
            mov QWORD PTR [R13+2512],0
            and RDI,-8
            sub R13,RDI
            lea ECX,DWORD PTR [R13+2520]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,16191
            mov WORD PTR [R12+4669],CX
            pop RBX
.L_41c73c:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41c744:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c750:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+10688]
            mov RBX,RAX
            call .L_412300

            add RSP,8
            lea RDI,QWORD PTR [RBX+216]
            mov RDX,RBP
            pop RBX
            pop RBP
            lea RSI,QWORD PTR [RIP+.L_425920]
            jmp .L_42fbe0
.L_41c789:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c790:

            movzx EAX,BYTE PTR [RDI+4668]
            and EAX,1
            je .L_41c7a5

            movzx EAX,BYTE PTR [RDI+56]
            shr AL,1
            and EAX,1
.L_41c7a5:

            ret 
.L_41c7a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c7b0:

            movzx EAX,BYTE PTR [RDI+4668]
            mov EDX,ESI
            and EDX,1
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RDI+4668],AL
            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,2
            je .L_41c7e0

            jb .L_41c7db

            cmp EAX,4
            ja .L_41c810

            test SIL,SIL
            je .L_41c818
.L_41c7db:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41c7e0:

            push RBX
            mov RBX,RDI
            call .L_433510

            movzx EDX,BYTE PTR [RBX+4668]
            mov ECX,EDX
            movzx EDX,BYTE PTR [RAX+1564]
            shl ECX,7
            and EDX,127
            or EDX,ECX
            mov BYTE PTR [RAX+1564],DL
            pop RBX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c810:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41c818:

            jmp .L_417190
.L_41c81d:

            nop
            nop
            nop
.L_41c820:

            cmp SIL,62
            push R12
            push RBP
            push RBX
.L_41c828:

            ja .L_41c88d

            movzx EAX,SIL
            mov EBX,ESI
            mov RBP,RDI
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RSI,QWORD PTR [RDI+RAX*8+784]
            mov EAX,63
            movzx EDX,BYTE PTR [RSI+5]
            test DL,64
            jne .L_41c888

            movzx EAX,BL
            or EDX,64
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov BYTE PTR [RSI+5],DL
            lea R12,QWORD PTR [RDI+RAX*8+752]
            call .L_401240

            mov QWORD PTR [R12],0
            mov DWORD PTR [R12+8],EAX
            add BYTE PTR [RBP+744],1
            call .L_401240

            mov DWORD PTR [RBP+748],EAX
            mov EAX,EBX
.L_41c888:

            pop RBX
.L_41c889:

            pop RBP
            pop R12
            ret 
.L_41c88d:

            lea RCX,QWORD PTR [RIP+.L_4260a0]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a39]
            mov EDX,184
            call __assert_fail@PLT
.L_41c8ac:

            nop
            nop
            nop
            nop
.L_41c8b0:

            push RBP
            push RBX
            xor EAX,EAX
            xor ECX,ECX
            xor EBP,EBP
            sub RSP,8
.L_41c8bc:

            jmp .L_41c8cb
          .byte 0x66
          .byte 0x90
.L_41c8c0:

            add EAX,1
            add ECX,1
            cmp EAX,63
            je .L_41c8f1
.L_41c8cb:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            test DL,64
            jne .L_41c8c0

            shr DL,7
            cmp DL,1
            adc BPL,0
            add EAX,1
            cmp EAX,63
            jne .L_41c8cb
.L_41c8f1:

            cmp CL,31
            ja .L_41c950

            test BPL,BPL
            je .L_41c950

            mov RBX,RDI
            movzx EBP,BPL
            call .L_401460

            movzx EAX,AL
            xor ESI,ESI
            cdq 
            idiv EBP
            jmp .L_41c923
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c918:

            sub EDX,1
.L_41c91b:

            add ESI,1
            cmp ESI,63
            je .L_41c950
.L_41c923:

            movsxd RAX,ESI
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            test AL,64
            jne .L_41c91b

            test AL,AL
            js .L_41c91b

            test DL,DL
            jne .L_41c918

            add RSP,8
.L_41c942:

            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_41c820
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41c950:

            add RSP,8
            mov EAX,63
            pop RBX
            pop RBP
            ret 
.L_41c95c:

            nop
            nop
            nop
            nop
.L_41c960:

            push R14
            push R13
            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,ESI
            sub RSP,16
.L_41c974:

            call .L_433510

            cmp R12B,62
            mov R13,RAX
            mov EAX,7
            ja .L_41ca46

            cmp DWORD PTR [RBP+12],4
            mov EAX,13
            jne .L_41ca46

            movzx EAX,R12B
            mov R14,RAX
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RDX,QWORD PTR [RBP+RAX*8]
            movzx EAX,BYTE PTR [RDX+789]
            and EAX,4294967231
            or EAX,4294967168
            mov BYTE PTR [RDX+789],AL
            movzx EAX,R12B
            lea RAX,QWORD PTR [RAX+RAX*4]
            and BYTE PTR [RBP+RAX*8+778],248
            mov BYTE PTR [RDX+788],63
            lea RDX,QWORD PTR [RBP+788]
            xor EAX,EAX
            nop
            nop
            nop
.L_41c9e0:

            cmp BL,BYTE PTR [RDX]
            jne .L_41c9f6

            movsxd RCX,EAX
            mov BYTE PTR [RDX],63
            lea RCX,QWORD PTR [RCX+RCX*4]
            and BYTE PTR [RBP+RCX*8+789],195
.L_41c9f6:

            add RAX,1
            add RDX,40
            cmp RAX,63
            jne .L_41c9e0

            add BYTE PTR [RBP+744],1
            shl R12D,10
            call .L_401240

            lea RDI,QWORD PTR [R13+10688]
            mov DWORD PTR [RBP+748],EAX
            mov ESI,R14D
            call .L_4123a0

            lea RDI,QWORD PTR [R13+7520]
            movzx ESI,R12W
            call .L_42af50

            mov EAX,DWORD PTR [RBP+12]
            lea EDX,DWORD PTR [RAX-3]
            xor EAX,EAX
            cmp EDX,1
            jbe .L_41ca53
.L_41ca46:

            add RSP,16
.L_41ca4a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41ca53:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41c470

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41ca46
.L_41ca65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ca70:

            push RBX
            mov RBX,RDI
            call .L_401240

            sub EAX,DWORD PTR [RBX+748]
            mov EDX,274877907
            pop RBX
            mul EDX
            mov EAX,EDX
            shr EAX,6
            ret 
.L_41ca8d:

            nop
            nop
            nop
.L_41ca90:

            push R12
            push RBP
            push RBX
.L_41ca94:

            mov RBX,RDI
            call .L_433510

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+680]
            mov RBP,RAX
            mov RDI,R12
            call .L_42f8a0

            lea RSI,QWORD PTR [RBX+712]
            mov RDI,R12
            call .L_42f8a0

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40bf40

            lea RDI,QWORD PTR [RBP+1208]
            call .L_40bfc0

            lea RDI,QWORD PTR [RBX+592]
            call .L_433c30

            lea RDI,QWORD PTR [RBP+7520]
            call .L_4294e0

            mov RDI,RBP
            call .L_411380

            mov RDI,RBX
            pop RBX
.L_41cb00:

            pop RBP
            pop R12
            jmp .L_41c750
.L_41cb08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cb10:

            push RBX
            xor EAX,EAX
            mov RBX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cb20:

            movsxd RDX,EAX
            add EAX,1
            lea RDX,QWORD PTR [RDX+RDX*4]
            and BYTE PTR [RBX+RDX*8+778],248
            cmp EAX,63
            jne .L_41cb20

            mov RDI,RBX
            call .L_41ca90

            lea RDI,QWORD PTR [RBX+656]
            call .L_433690

            xor EAX,EAX
            pop RBX
            ret 
.L_41cb4f:

            nop
.L_41cb50:

            add RDI,592
            jmp .L_433c30
.L_41cb5c:

            nop
            nop
            nop
            nop
.L_41cb60:

            mov EAX,DWORD PTR [RDI+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41cb70

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41cb70:

            jmp .L_41c470
.L_41cb75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cb80:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_41cb98:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_417500

            test RAX,RAX
            je .L_41cc30

            xor EDX,EDX
            mov RSI,RAX
            mov RDI,RBP
            mov RBX,RAX
            call .L_417540

            test EAX,EAX
            je .L_41cc00
.L_41cbcb:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41cbdb:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41ce00

            add RSP,56
.L_41cbf3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41cc00:

            mov RSI,RBX
            mov RDI,RBP
            call .L_417b60

            test EAX,EAX
            jne .L_41cbcb

            cmp DWORD PTR [RBP+12],4
            ja .L_41cca0

            mov EAX,DWORD PTR [RBP+12]
            lea RDX,QWORD PTR [RIP+.L_425c40]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41cc30:

            mov EAX,3
            jmp .L_41cbdb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41cc40:

            test R12,R12
            je .L_41cc56

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            cmp AL,7
            je .L_41cdef
.L_41cc56:

            lea RDX,QWORD PTR [RIP+.L_45fd50-236659]
            mov ECX,1
.L_41cc62:

            mov RSI,RBX
            mov RDI,RBP
            call .L_417a50

            test EAX,EAX
            jne .L_41cbcb
.L_41cc75:

            mov RSI,RBX
            mov RDI,RBP
            call .L_4175c0

            test EAX,EAX
            jne .L_41cbcb

            mov RSI,RBX
            mov RDI,RBP
            call .L_417920

            test EAX,EAX
            jne .L_41cbcb

            nop
            nop
            nop
            nop
            nop
.L_41cca0:

            test R12,R12
            je .L_41cd58

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            cmp AL,7
            je .L_41cdc0

            mov RDI,R12
            call .L_42dce0

            lea RDX,QWORD PTR [R12+12]
            mov ECX,8
.L_41cccc:

            mov RSI,RBX
            mov RDI,RBP
            call .L_417720

            test EAX,EAX
            jne .L_41cbcb

            lea R13,QWORD PTR [RSP+16]
            mov EAX,4294934782
            mov RSI,R12
            mov WORD PTR [RSP+16],AX
            mov RDI,R13
            call .L_4101d0
.L_41ccf9:

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_4180d0

            test EAX,EAX
            jne .L_41cbcb

            lea RSI,QWORD PTR [RIP+.L_425a4e]
            mov RDX,R13
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41cbdb
          .byte 0x66
          .byte 0x90
.L_41cd30:

            lea RDX,QWORD PTR [RIP+.L_4260de]
            mov ECX,2
            mov RSI,RBX
            mov RDI,RBP
            call .L_417a50

            test EAX,EAX
            jne .L_41cbcb

            jmp .L_41cca0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41cd58:

            lea R14,QWORD PTR [RBP+4649]
            lea R13,QWORD PTR [RBP+4657]
            mov R12,R14
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cd70:

            add R12,1
            call .L_401460

            cmp R12,R13
            mov BYTE PTR [R12-1],AL
            jne .L_41cd70

            mov BYTE PTR [RBP+4648],2
            mov ECX,8
            mov RDX,R14
            mov RSI,RBX
            mov RDI,RBP
            call .L_417720

            test EAX,EAX
            jne .L_41cbcb

            mov EDX,767
            mov BYTE PTR [RSP+31],2
            lea R13,QWORD PTR [RSP+16]
            mov WORD PTR [RSP+16],DX
            jmp .L_41ccf9
          .byte 0x66
          .byte 0x90
.L_41cdc0:

            lea R15,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [R15+8]
            mov R13,R15
            nop
            nop
            nop
            nop
.L_41cdd0:

            add R13,1
            call .L_401460

            cmp R13,R14
            mov BYTE PTR [R13-1],AL
            jne .L_41cdd0

            mov ECX,8
            mov RDX,R15
            jmp .L_41cccc
.L_41cdef:

            mov ECX,2
            lea RDX,QWORD PTR [RIP+.L_45fd50-236661]
            jmp .L_41cc62
.L_41ce00:

            call __stack_chk_fail@PLT
.L_41ce05:

            lea RCX,QWORD PTR [RIP+.L_425fc0]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,625
            call __assert_fail@PLT
.L_41ce24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ce30:

            movzx EAX,BYTE PTR [RDI+3272]
            test EAX,EAX
            je .L_41ce72

            test BYTE PTR [RDI+3306],7
            je .L_41ce88

            xor ECX,ECX
            jmp .L_41ce6b
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ce50:

            movsxd RSI,ECX
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            shl RDX,3
            test BYTE PTR [RDI+RDX*1+3306],7
            je .L_41ce78
.L_41ce6b:

            add ECX,1
            cmp ECX,EAX
            jne .L_41ce50
.L_41ce72:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41ce78:

            add RDX,3280
.L_41ce7f:

            lea RAX,QWORD PTR [RDI+RDX*1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41ce88:

            mov EDX,3280
            jmp .L_41ce7f
.L_41ce8f:

            nop
.L_41ce90:

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41ceea

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ceb0:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            test BYTE PTR [RDI+RAX*8+3306],7
            je .L_41cedb

            movzx R8D,WORD PTR [RCX+24]
            mov RAX,RCX
            and R8W,511
            cmp SI,R8W
            je .L_41ceec
.L_41cedb:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            jne .L_41ceb0
.L_41ceea:

            xor EAX,EAX
.L_41ceec:

            ret 
.L_41ceee:

            nop
            nop
.L_41cef0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41cef8:

            cmp BYTE PTR [RDI+3272],0
            je .L_41cf70

            mov RBP,RSI
            mov R13,RDI
            xor EBX,EBX
            lea R12,QWORD PTR [RDI+3280]
            jmp .L_41cf2b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41cf18:

            movzx EDX,BYTE PTR [R13+3272]
            lea EAX,DWORD PTR [RBX+1]
            add RBX,1
            cmp EDX,EAX
            jle .L_41cf70
.L_41cf2b:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            test BYTE PTR [R13+RAX*8+3306],7
            je .L_41cf18

            mov RAX,RBX
            mov RSI,RBP
            shl RAX,4
            add RAX,RBX
            lea R14,QWORD PTR [R12+RAX*8]
            mov RDI,R14
            call .L_408da0

            test AL,AL
            je .L_41cf18

            pop RBX
.L_41cf61:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41cf70:

            xor R14D,R14D
            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41cf7f:

            nop
.L_41cf80:

            sub EDI,1
            mov EAX,16
            cmp DIL,2
            ja .L_41cf9d

            lea RAX,QWORD PTR [RIP+.L_425d30]
            movzx EDI,DIL
            movzx EAX,BYTE PTR [RAX+RDI*1]
.L_41cf9d:

            ret 
.L_41cf9f:

            nop
.L_41cfa0:

            cmp SIL,62
            movzx EDX,SIL
            mov EAX,16
            ja .L_41d009

            cmp BYTE PTR [RDI+4669],SIL
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx ECX,SIL
            lea R8,QWORD PTR [RDI+RDX*8+752]
            je .L_41d009

            movzx EDX,BYTE PTR [R8+26]
            and EDX,7
            cmp DL,7
            jne .L_41d009

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            mov ECX,EDX
            movzx EDX,BYTE PTR [R8+30]
            and ECX,3
            cmp DL,CL
            cmova EDX,ECX
            sub EDX,1
            cmp DL,2
            ja .L_41d009

            lea RAX,QWORD PTR [RIP+.L_425d30]
            movzx EDX,DL
            movzx EAX,BYTE PTR [RAX+RDX*1]
.L_41d009:

            ret 
.L_41d00b:

            nop
            nop
            nop
            nop
            nop
.L_41d010:

            test SIL,SIL
            mov EAX,7
            je .L_41d023

            mov BYTE PTR [RDI+4676],SIL
            xor EAX,EAX
.L_41d023:

            ret 
.L_41d025:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d030:

            push R13
            push R12
            mov R13D,128
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            xor EBX,EBX
            sub RSP,8
.L_41d048:

            movzx EAX,BYTE PTR [RSI+2]
            mov BYTE PTR [RDI+744],AL
            call .L_401240

            mov DWORD PTR [RBP+748],EAX
            jmp .L_41d06a
          .byte 0x90
.L_41d060:

            add RBX,1
            cmp RBX,63
            je .L_41d0e0
.L_41d06a:

            movsxd RAX,EBX
            mov ECX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            and ECX,7
            lea RSI,QWORD PTR [RBP+RAX*8+784]
            mov EAX,EBX
            shr AL,3
            and EAX,31
            movzx EDX,BYTE PTR [RSI+5]
            movzx EDI,BYTE PTR [R12+RAX*1+3]
            mov EAX,R13D
            sar EAX,CL
            test EDI,EAX
            mov EAX,EDX
            setne CL
            and EAX,4294967231
            mov EDI,ECX
            shl EDI,6
            or EAX,EDI
            and EDX,64
            mov BYTE PTR [RSI+5],AL
            je .L_41d060

            test CL,CL
            jne .L_41d060

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RDI,RBP
            mov BYTE PTR [RBP+RAX*8+788],63
            call .L_433510

            lea RDI,QWORD PTR [RAX+10688]
            mov ESI,EBX
            add RBX,1
            call .L_4123a0

            cmp RBX,63
            jne .L_41d06a

            nop
            nop
.L_41d0e0:

            xor EAX,EAX
            cmp DWORD PTR [RBP+12],3
            je .L_41d0f3
.L_41d0e8:

            add RSP,8
.L_41d0ec:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_41d0f3:

            movzx EDX,BYTE PTR [RBP+4669]
            lea RDX,QWORD PTR [RDX+RDX*4]
            test BYTE PTR [RBP+RDX*8+789],64
            jne .L_41d0e8

            mov RDI,RBP
            call .L_417190

            mov EAX,4
            jmp .L_41d0e8
.L_41d117:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d120:

            push RBX
            mov RBX,RDI
            call .L_4165a0

            test AL,AL
            je .L_41d168

            test BYTE PTR [RBX+56],2
            je .L_41d15f

            movzx ESI,BYTE PTR [RBX+4669]
            xor EDX,EDX
            jmp .L_41d148
          .byte 0x66
          .byte 0x90
.L_41d140:

            add EDX,1
            cmp EDX,63
            je .L_41d15f
.L_41d148:

            cmp ESI,EDX
            je .L_41d140

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            test BYTE PTR [RBX+RCX*8+789],64
            je .L_41d140

            xor EAX,EAX
.L_41d15f:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d168:

            mov EAX,1
            pop RBX
            ret 
.L_41d16f:

            nop
.L_41d170:

            cmp DIL,DL
            mov RAX,RSI
            je .L_41d188

            cmp DL,1
            sbb EAX,EAX
            or EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d188:

            movzx EDX,BYTE PTR [RSI+6]
            movzx ESI,BYTE PTR [RCX+6]
            cmp DL,SIL
            je .L_41d1a8

            cmp SIL,DL
            sbb EAX,EAX
            and EAX,2
            sub EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d1a8:

            mov RSI,RCX
            mov RDI,RAX
            jmp .L_41c4b0
.L_41d1b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d1c0:

            xor ECX,ECX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_41d1c8:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            shr DL,6
            and EDX,1
            cmp DL,1
            sbb AL,255
            add ECX,1
            cmp ECX,63
            jne .L_41d1c8

            ret 
.L_41d1ec:

            nop
            nop
            nop
            nop
.L_41d1f0:

            xor EDX,EDX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_41d1f8:

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            movzx ECX,BYTE PTR [RDI+RCX*8+778]
            and ECX,7
            cmp CL,7
            sete CL
            add EDX,1
            add EAX,ECX
            cmp EDX,63
            jne .L_41d1f8

            ret 
.L_41d21c:

            nop
            nop
            nop
            nop
.L_41d220:

            movzx EAX,BYTE PTR [RDI+1]
            sub EAX,9
            cmp AL,63
            jbe .L_41d230

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x90
.L_41d230:

            jmp .L_41c4d0
.L_41d235:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d240:

            movzx EAX,DL
            push R15
            push R14
            mov R11,RAX
            lea RAX,QWORD PTR [RAX+RAX*4]
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            mov R8,RSI
            sub RSP,40
.L_41d266:

            mov QWORD PTR [RSP+8],RAX
            movzx EAX,DL
            lea RAX,QWORD PTR [RAX+RAX*4]
            shl RAX,3
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d280:

            xor EBX,EBX
            xor ESI,ESI
            mov BYTE PTR [RSP+29],0
            jmp .L_41d38b
          .byte 0x66
          .byte 0x90
.L_41d290:

            lea R13,QWORD PTR [RBX+RBX*4]
            shl R13,3
            movzx R15D,BYTE PTR [R12+R13*1+788]
            lea R9,QWORD PTR [R12+R13*1+752]
            cmp R15B,62
            seta R10B
            cmp R11B,R15B
            sete DIL
            or EDI,R10D
            cmp R11B,BL
            je .L_41d49f

            movzx EBP,BYTE PTR [R8+RSI*1+11]
            mov ESI,16
            and EBP,15
            cmove EBP,ESI
            test DIL,DIL
            je .L_41d4b0

            cmp R11B,62
            movzx EAX,BPL
            mov ESI,16
            ja .L_41d30e

            cmp CL,R11B
            je .L_41d30e

            mov RDI,QWORD PTR [RSP+8]
            movzx EDI,BYTE PTR [RDI+26]
            mov ECX,EDI
            mov BYTE PTR [RSP+30],DIL
            and ECX,7
            cmp CL,7
            je .L_41d540
.L_41d30e:

            add EAX,ESI
            cmp EAX,16
            jg .L_41d420

            cmp R15B,62
            jbe .L_41d340

            movzx EAX,BYTE PTR [R9+26]
            and EAX,7
            cmp AL,7
            je .L_41d5d0
.L_41d32f:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41d620
.L_41d340:

            lea RAX,QWORD PTR [R14+R14*4]
            and EBP,15
            mov BYTE PTR [R12+R13*1+788],R11B
            lea RCX,QWORD PTR [R12+RAX*8+784]
            lea EAX,DWORD PTR [RBP*4]
            movzx EBP,BYTE PTR [RCX+5]
            and EBP,4294967235
            or EBP,EAX
            mov BYTE PTR [RCX+5],BPL
            cmp BYTE PTR [R12+R13*1+788],R15B
            setne AL
            or BYTE PTR [RSP+29],AL
.L_41d37a:

            movzx ESI,DL
.L_41d37d:

            add RBX,1
            cmp RBX,63
            je .L_41d650
.L_41d38b:

            mov EDX,EBX
            mov ECX,EBX
            mov EAX,EBX
            shr DL,3
            and ECX,7
            and EDX,31
            movzx EDI,BYTE PTR [R8+RDX*1+3]
            mov EDX,128
            sar EDX,CL
            test EDI,EDX
            je .L_41d37d

            movsxd RDX,EBX
            movsxd R14,EBX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDI,BYTE PTR [R12+RDX*8+789]
            lea EDX,DWORD PTR [RSI+1]
            shr DIL,6
            and EDI,1
            je .L_41d37a

            movzx ECX,BYTE PTR [R12+4669]
            cmp CL,BL
            jne .L_41d290

            movzx EAX,BYTE PTR [R8+RSI*1+11]
            mov RSI,QWORD PTR [RSP]
            lea RSI,QWORD PTR [R12+RSI*1+784]
            sar EAX,4
            movzx ECX,BYTE PTR [RSI+5]
            and EAX,3
            mov R9D,ECX
            and R9D,3
            cmp AL,R9B
            je .L_41d37a

            and ECX,4294967292
            mov BYTE PTR [RSP+29],DIL
            or EAX,ECX
            mov BYTE PTR [RSI+5],AL
            jmp .L_41d37a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d420:

            cmp R11B,R15B
            jne .L_41d37a

            movzx EAX,BYTE PTR [R9+26]
            and EAX,7
            cmp AL,7
            je .L_41d6c0
.L_41d439:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41d710
.L_41d44a:

            lea RAX,QWORD PTR [R14+R14*4]
            mov BYTE PTR [R12+R13*1+788],63
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            and BYTE PTR [R12+RAX*8+789],195
            call .L_401240

            cmp BYTE PTR [R12+R13*1+788],R15B
            mov DWORD PTR [R12+R13*1+760],EAX
            movzx EDX,BYTE PTR [RSP+30]
            mov R8,QWORD PTR [RSP+16]
            movzx R11D,BYTE PTR [RSP+31]
            setne AL
            or BYTE PTR [RSP+29],AL
            jmp .L_41d37a
.L_41d49f:

            xor EBP,EBP
            test DIL,DIL
            jne .L_41d37a

            nop
            nop
            nop
            nop
            nop
            nop
.L_41d4b0:

            lea RSI,QWORD PTR [R14+R14*4]
            movzx ESI,BYTE PTR [R12+RSI*8+789]
            mov BYTE PTR [RSP+30],16
            shr SIL,2
            and ESI,15
            cmp CL,R15B
            je .L_41d4f4

            movzx EDI,R15B
            movzx R10D,R15B
            lea RDI,QWORD PTR [RDI+RDI*4]
            lea R9,QWORD PTR [R12+RDI*8+752]
            movzx EDI,BYTE PTR [R9+26]
            and EDI,7
            cmp DIL,7
            je .L_41d588
.L_41d4f4:

            add SIL,BYTE PTR [RSP+30]
            cmp R11B,62
            mov EDI,16
            ja .L_41d522

            cmp CL,R11B
            je .L_41d522

            mov RCX,QWORD PTR [RSP+8]
            movzx ECX,BYTE PTR [RCX+26]
            mov BYTE PTR [RSP+30],CL
            and ECX,7
            cmp CL,7
            je .L_41d670
.L_41d522:

            add EDI,EBP
            cmp SIL,DIL
            jbe .L_41d37a

            cmp R11B,AL
            jne .L_41d340

            jmp .L_41d37a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d540:

            mov RDI,QWORD PTR [RSP]
            mov R10,QWORD PTR [RSP+8]
            movzx EDI,BYTE PTR [R12+RDI*1+789]
            movzx ECX,BYTE PTR [R10+30]
            mov BYTE PTR [RSP+30],DIL
            and EDI,3
            cmp CL,DIL
            cmova ECX,EDI
            sub ECX,1
            cmp CL,2
            ja .L_41d30e

            lea RSI,QWORD PTR [RIP+.L_425d30]
            movzx ECX,CL
            movzx ESI,BYTE PTR [RSI+RCX*1]
            jmp .L_41d30e
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d588:

            lea RDI,QWORD PTR [R10+R10*4]
            movzx R10D,BYTE PTR [R12+RDI*8+789]
            movzx EDI,BYTE PTR [R9+30]
            and R10D,3
            cmp DIL,R10B
            cmova EDI,R10D
            sub EDI,1
            cmp DIL,2
            ja .L_41d4f4

            lea R9,QWORD PTR [RIP+.L_425d30]
            movzx EDI,DIL
            movzx EDI,BYTE PTR [R9+RDI*1]
            mov BYTE PTR [RSP+30],DIL
            jmp .L_41d4f4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d5d0:

            lea RAX,QWORD PTR [R14+R14*4]
            movzx EAX,BYTE PTR [R12+RAX*8+789]
            and EAX,3
            mov ECX,EAX
            movzx EAX,BYTE PTR [R12+R13*1+782]
            cmp AL,CL
            cmova EAX,ECX
            sub EAX,1
            cmp AL,2
            ja .L_41d32f

            lea RCX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            cmp BYTE PTR [RCX+RAX*1],15
            jbe .L_41d340

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41d340
.L_41d620:

            mov RDI,R12
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            call .L_41c470

            movzx R11D,BYTE PTR [RSP+31]
            mov R8,QWORD PTR [RSP+16]
            movzx EDX,BYTE PTR [RSP+30]
            jmp .L_41d340
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d650:

            cmp BYTE PTR [RSP+29],0
            jne .L_41d280

            add RSP,40
.L_41d65f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d670:

            mov RCX,QWORD PTR [RSP]
            mov R10,QWORD PTR [RSP+8]
            movzx ECX,BYTE PTR [R12+RCX*1+789]
            mov R9D,ECX
            mov BYTE PTR [RSP+30],CL
            movzx ECX,BYTE PTR [R10+30]
            and R9D,3
            cmp CL,R9B
            cmova ECX,R9D
            sub ECX,1
            cmp CL,2
            ja .L_41d522

            lea RDI,QWORD PTR [RIP+.L_425d30]
            movzx ECX,CL
            movzx EDI,BYTE PTR [RDI+RCX*1]
            jmp .L_41d522
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d6c0:

            lea RAX,QWORD PTR [R14+R14*4]
            movzx EAX,BYTE PTR [R12+RAX*8+789]
            and EAX,3
            mov ECX,EAX
            movzx EAX,BYTE PTR [R12+R13*1+782]
            cmp AL,CL
            cmova EAX,ECX
            sub EAX,1
            cmp AL,2
            ja .L_41d439

            lea RCX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            cmp BYTE PTR [RCX+RAX*1],15
            jbe .L_41d44a

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41d44a
.L_41d710:

            mov RDI,R12
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            call .L_41c470

            movzx R11D,BYTE PTR [RSP+31]
            mov R8,QWORD PTR [RSP+16]
            movzx EDX,BYTE PTR [RSP+30]
            jmp .L_41d44a
.L_41d73b:

            nop
            nop
            nop
            nop
            nop
.L_41d740:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            movzx R12D,DX
            mov RBX,RDI
            mov EBP,EDX
            mov RDI,R14
            sub RSP,136
.L_41d763:

            mov EDX,2
            lea RCX,QWORD PTR [RSP+62]
            mov QWORD PTR [RSP+8],RSI
            mov ESI,R12D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+62],AX
            call .L_4038b0

            cmp AX,2
            jne .L_41d920

            movzx EAX,WORD PTR [R14+58]
            movzx ECX,BYTE PTR [RSP+63]
            sub EAX,R12D
            cdqe 
            sub RAX,2
            cmp RCX,RAX
            ja .L_41d920

            add EBP,2
            mov RDI,R13
            lea R15D,DWORD PTR [RCX+RBP*1]
            mov WORD PTR [RSP+30],R15W
            call .L_42dd10

            lea RAX,QWORD PTR [RSP+96]
            cmp BP,R15W
            mov QWORD PTR [RSP+16],RAX
            jae .L_41d919

            lea RCX,QWORD PTR [RSP+64]
            lea RAX,QWORD PTR [RSP+97]
            lea R12,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+32],RCX
            mov QWORD PTR [RSP+40],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d800:

            mov RCX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            movzx R15D,BP
            mov EDX,1
            mov ESI,R15D
            call .L_4038b0

            cmp AX,1
            jne .L_41d920

            movsx R8W,BYTE PTR [RSP+96]
            movsx EDX,BYTE PTR [RSP+96]
            mov ESI,R15D
            mov RCX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            sar R8W,15
            sar EDX,31
            mov R14D,R8D
            and EDX,4294967288
            and R14D,4294967288
            add EDX,17
            add R14D,17
            call .L_4038b0

            cmp AX,R14W
            jne .L_41d920

            add EBP,EAX
            cmp BYTE PTR [RSP+96],0
            js .L_41d950

            movdqu XMM0,XMMWORD PTR [RSP+97]
            movaps XMMWORD PTR [RSP+80],XMM0
.L_41d87e:

            mov RDI,RBX
            call .L_4334e0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_42de40

            mov RDI,R12
            call .L_40ff70

            test AL,AL
            jne .L_41d90e

            cmp BYTE PTR [RBX+3272],0
            je .L_41d90e

            lea R14,QWORD PTR [RBX+3280]
            xor R15D,R15D
            nop
            nop
            nop
            nop
            nop
.L_41d8b8:

            movsxd RDX,R15D
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41d8dc

            cmp AL,1
            jne .L_41d8f7
.L_41d8dc:

            cmp R13,R14
            je .L_41d8f7

            mov RDI,RBX
            call .L_4334e0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R14
            call .L_42df40
.L_41d8f7:

            movzx EAX,BYTE PTR [RBX+3272]
            add R15D,1
            add R14,136
            cmp EAX,R15D
            jg .L_41d8b8
.L_41d90e:

            cmp WORD PTR [RSP+30],BP
            ja .L_41d800
.L_41d919:

            xor EAX,EAX
            jmp .L_41d925
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41d920:

            mov EAX,6
.L_41d925:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41d9a3

            add RSP,136
.L_41d93c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d950:

            mov RDI,RBX
            call .L_433510

            movzx ESI,BYTE PTR [RSP+96]
            mov RDX,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [RAX+7520]
            and ESI,15
            call .L_4282b0

            movzx EDX,BYTE PTR [RSP+72]
            mov RSI,QWORD PTR [RSP+64]
            mov RDI,R12
            mov ECX,16
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            call __memcpy_chk@PLT

            mov RSI,QWORD PTR [RSP+40]
            mov RDI,R12
            call .L_4101c0

            jmp .L_41d87e
.L_41d9a3:

            call __stack_chk_fail@PLT
.L_41d9a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d9b0:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,104
.L_41d9c7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            xor EDI,EDI
            xor ESI,ESI
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RSP+46],DI
            mov RDI,RBP
            mov R12,RAX
            mov WORD PTR [RSP+44],SI
            mov WORD PTR [RSP+54],R8W
            mov WORD PTR [RSP+64],R9W
            mov WORD PTR [RSP+50],R10W
            call .L_417500

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41da53

            movzx EAX,BYTE PTR [RBX+78]
            mov WORD PTR [RBX+76],R14W
            mov EDX,17
            mov RSI,RBX
            mov RDI,RBP
            and EAX,4294967235
            or EAX,12
            mov BYTE PTR [RBX+78],AL
            call .L_417540

            test EAX,EAX
            je .L_41da80
.L_41da43:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
.L_41da53:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41dc54

            add RSP,104
.L_41da6b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41da80:

            lea R14,QWORD PTR [RSP+44]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+44],26
            mov RSI,R14
            call .L_403d80

            test EAX,EAX
            jne .L_41da43

            test BYTE PTR [R12+1548],64
            movzx R15D,WORD PTR [RBX+58]
            mov DWORD PTR [RSP+46],2097793
            je .L_41dabb

            mov BYTE PTR [RSP+48],40
.L_41dabb:

            lea RSI,QWORD PTR [RSP+46]
            mov EDX,4
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_41da43

            mov RAX,QWORD PTR [R12+1686]
            lea RSI,QWORD PTR [RSP+54]
            mov ECX,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+54],CX
            mov QWORD PTR [RSP+56],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_41da43

            lea R10,QWORD PTR [R12+1669]
            mov EDX,4099
            mov ESI,16
            mov WORD PTR [RSP+64],DX
            mov RDI,R10
            mov QWORD PTR [RSP+24],R10
            call strnlen@PLT

            mov R10,QWORD PTR [RSP+24]
            lea R9,QWORD PTR [RSP+64]
            lea RDI,QWORD PTR [RSP+66]
            mov ECX,16
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            mov QWORD PTR [RSP+16],R9
            mov RSI,R10
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP+8]
            mov R9,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+65],R8B
            movzx R8D,R8B
            mov RSI,R9
            lea EDX,DWORD PTR [R8+2]
            call .L_403d80

            test EAX,EAX
            jne .L_41da43

            lea RDI,QWORD PTR [R12+7520]
            mov ESI,8
            call .L_428ba0

            test RAX,RAX
            je .L_41dbae

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            mov RDI,RBX
            add EDX,2
            call .L_403d80

            test EAX,EAX
            jne .L_41da43
.L_41dbae:

            lea RDI,QWORD PTR [R12+10368]
            mov EAX,530
            mov WORD PTR [RSP+50],AX
            call .L_40caf0

            rol AX,8
            lea RSI,QWORD PTR [RSP+50]
            mov RDI,RBX
            mov WORD PTR [RSP+52],AX
            movzx EAX,BYTE PTR [RSP+51]
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            test EAX,EAX
            jne .L_41da43

            movzx EAX,BYTE PTR [RBX+58]
            lea ESI,DWORD PTR [R15-2]
            mov RCX,R14
            mov EDX,2
            mov RDI,RBX
            movzx ESI,SI
            sub EAX,R15D
            mov BYTE PTR [RSP+45],AL
            call .L_403b10

            call .L_401460

            movzx EAX,AX
            mov ESI,251
            mov RDI,RBP
            cdq 
            idiv ESI
            mov RSI,RBX
            mov ECX,EDX
            mov RDX,R13
            call .L_418bc0

            test EAX,EAX
            jne .L_41da43

            lea RSI,QWORD PTR [RIP+.L_425a60]
            mov RDX,R13
            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_41da53
.L_41dc54:

            call __stack_chk_fail@PLT
.L_41dc59:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41dc60:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            add R14,16
            sub RSP,72
.L_41dc7b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            xor ESI,ESI
            xor EDX,EDX
            xor ECX,ECX
            mov WORD PTR [RSP+46],SI
            lea RSI,QWORD PTR [RIP+.L_425a79]
            mov WORD PTR [RSP+40],DX
            mov R15,RAX
            mov RDX,R14
            xor EAX,EAX
            mov RDI,R13
            mov WORD PTR [RSP+38],AX
            mov WORD PTR [RSP+42],CX
            call .L_41c1e0

            test BYTE PTR [R13+56],2
            mov EAX,13
            je .L_41ddf0

            lea RDX,QWORD PTR [RSP+36]
            mov ESI,26
            mov RDI,RBX
            call .L_4338c0

            test EAX,EAX
            jne .L_41de10

            movzx ESI,WORD PTR [RSP+36]
            lea RCX,QWORD PTR [RSP+38]
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+36]
            movzx EBP,BYTE PTR [RSP+39]
            lea ESI,DWORD PTR [RAX+2]
            lea EBP,DWORD PTR [RSI+RBP*1+2]
            mov WORD PTR [RSP+36],SI
            cmp SI,BP
            jae .L_41de38

            lea RAX,QWORD PTR [RSP+46]
            lea R12,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+42]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R15+7520]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_41dd9d
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dd50:

            cmp AL,128
            jne .L_41dd81

            movzx ESI,WORD PTR [RSP+36]
            mov RCX,QWORD PTR [RSP+16]
            mov EDX,4
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+43],2
            jne .L_41de10

            test BYTE PTR [RSP+44],8
            jne .L_41de20
.L_41dd81:

            movzx ESI,WORD PTR [RSP+36]
            movzx EAX,BYTE PTR [RSP+41]
            lea ESI,DWORD PTR [RSI+RAX*1+2]
            cmp SI,BP
            mov WORD PTR [RSP+36],SI
            jae .L_41de38
.L_41dd9d:

            movzx ESI,SI
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+40]
            cmp AL,2
            jne .L_41dd50

            movzx ESI,WORD PTR [RSP+36]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,10
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+47],8
            jne .L_41de10

            mov RAX,QWORD PTR [RSP+48]
            cmp QWORD PTR [R15+1686],RAX
            jne .L_41dd81
.L_41dde5:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ddf0:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41de49

            add RSP,72
.L_41de04:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_41de10:

            mov EAX,6
            jmp .L_41ddf0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41de20:

            mov RDI,QWORD PTR [RSP+24]
            call .L_428c20

            test AL,AL
            jne .L_41dd81

            jmp .L_41dde5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41de38:

            movzx EDX,WORD PTR [RBX+76]
            mov RSI,R14
            mov RDI,R13
            call .L_41d9b0

            jmp .L_41ddf0
.L_41de49:

            call __stack_chk_fail@PLT
.L_41de4e:

            nop
            nop
.L_41de50:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,48
.L_41de62:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_433510

            test BYTE PTR [R13+26],64
            jne .L_41def0

            mov R14,RAX
            lea RAX,QWORD PTR [RAX+5848]
            mov RBP,R13
            lea RDI,QWORD PTR [R14+2352]
            sub RBP,RAX
            movabs RAX,-1085102592571150095
            sar RBP,3
            imul RBP,RAX
            call .L_404860

            test RAX,RAX
            mov RBX,RAX
            je .L_41def0

            movzx EBP,BPL
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41dec0:

            mov ESI,EBP
            mov RDI,RBX
            call .L_404130

            test AL,AL
            je .L_41dee0

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,8
            je .L_41e090
.L_41dee0:

            mov RDI,RBX
            call .L_403410

            test RAX,RAX
            mov RBX,RAX
            jne .L_41dec0
.L_41def0:

            mov RDI,R12
            call .L_417500

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41df36

            movzx EAX,BYTE PTR [RBX+78]
            mov EDX,13
            mov RSI,RBX
            mov RDI,R12
            and EAX,4294967235
            or EAX,32
            mov BYTE PTR [RBX+78],AL
            call .L_417540

            test EAX,EAX
            je .L_41df60
.L_41df26:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41df36:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41e0c7

            add RSP,48
.L_41df4e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41df60:

            mov RSI,RBX
            mov RDI,R12
            call .L_4175c0

            test EAX,EAX
            jne .L_41df26

            mov RSI,RBX
            mov RDI,R12
            call .L_417920

            test EAX,EAX
            jne .L_41df26

            movzx EDX,BYTE PTR [R13+26]
            mov RSI,RBX
            mov RDI,R12
            shr DL,3
            not EDX
            and EDX,1
            call .L_4179e0

            test EAX,EAX
            jne .L_41df26

            mov RSI,RBX
            mov RDI,R12
            call .L_417bb0

            test EAX,EAX
            jne .L_41df26

            mov RSI,RBX
            mov RDI,R12
            call .L_417c50

            test EAX,EAX
            jne .L_41df26

            movzx EAX,BYTE PTR [R13+26]
            and EAX,7
            cmp AL,7
            je .L_41e00f

            lea RDX,QWORD PTR [RIP+.L_45fd50-236666]
            mov ECX,2
            mov RSI,RBX
            mov RDI,R12
            call .L_417a50

            test EAX,EAX
            jne .L_41df26

            mov RDI,R13
            call .L_42e0e0

            lea RDX,QWORD PTR [R13+96]
            mov ECX,8
            mov RSI,RBX
            mov RDI,R12
            call .L_417720

            test EAX,EAX
            jne .L_41df26
.L_41e00f:

            lea RBP,QWORD PTR [RSP+16]
            xor EAX,EAX
            mov ECX,14
            mov RSI,R13
            lea RDX,QWORD PTR [RBP+2]
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,RBP
            mov WORD PTR [RSP+16],33022
            call .L_4101d0

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            call .L_4180d0

            test EAX,EAX
            jne .L_41df26

            movzx EDX,BYTE PTR [R13+26]
            mov ECX,EDX
            shr CL,3
            and CL,8
            je .L_41e065

            and EDX,4294967288
            or EDX,6
            mov BYTE PTR [R13+26],DL
.L_41e065:

            movzx ECX,WORD PTR [R13+24]
            lea RSI,QWORD PTR [RIP+.L_4260e0]
            mov RDX,RBP
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1f0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41df36
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e090:

            movzx EAX,BYTE PTR [R13+26]
            and EAX,7
            cmp AL,1
            je .L_41e0c0

            cmp AL,6
            je .L_41e0c0

            lea RDI,QWORD PTR [R14+2256]
            mov EDX,8
            mov RSI,R13
            call .L_414bc0

            jmp .L_41def0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e0c0:

            xor EAX,EAX
            jmp .L_41df36
.L_41e0c7:

            call __stack_chk_fail@PLT
.L_41e0cc:

            nop
            nop
            nop
            nop
.L_41e0d0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_433510

            mov R12,RAX
            mov EAX,DWORD PTR [RBP+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41e0f0
.L_41e0ea:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_41e0f0:

            cmp BYTE PTR [RBP+3272],0
            je .L_41e0ea

            xor EBX,EBX
            jmp .L_41e13a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41e100:

            movzx ECX,BYTE PTR [R12+7785]
.L_41e109:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RSI,QWORD PTR [RBP+RAX*8+3280]
            cmp CL,BYTE PTR [RSI+125]
            je .L_41e12f

            mov RDI,RBP
            call .L_41de50

            test EAX,EAX
            jne .L_41e0ea
.L_41e12f:

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            jbe .L_41e0ea
.L_41e13a:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_41e12f

            shr AL,3
            and EAX,15
            test AL,8
            jne .L_41e12f

            test AL,1
            jne .L_41e100

            movzx ECX,BYTE PTR [R12+7784]
            jmp .L_41e109
.L_41e172:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e180:

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41e1e0

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41e1b3
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e1a0:

            cmp AL,1
            je .L_41e1d5
.L_41e1a4:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            je .L_41e1e0
.L_41e1b3:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea R8D,DWORD PTR [RAX-6]
            cmp R8B,1
            ja .L_41e1a0
.L_41e1d5:

            cmp SI,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41e1a4

            ret 
.L_41e1e0:

            xor EAX,EAX
            ret 
.L_41e1e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e1f0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41e1f8:

            cmp BYTE PTR [RDI+3272],0
            je .L_41e278

            mov RBP,RSI
            mov R13,RDI
            lea R12,QWORD PTR [RDI+3280]
            xor EBX,EBX
            jmp .L_41e232
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e218:

            cmp AL,1
            je .L_41e253
.L_41e21c:

            movzx EAX,BYTE PTR [R13+3272]
            add EBX,1
            add R12,136
            cmp EAX,EBX
            jle .L_41e278
.L_41e232:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [R13+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_41e218
.L_41e253:

            mov RSI,RBP
            mov RDI,R12
            mov R14,R12
            call .L_408da0

            test AL,AL
            je .L_41e21c

            pop RBX
.L_41e266:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e278:

            xor R14D,R14D
            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41e287:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e290:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41e2b0

            cmp EAX,2
            jne .L_41e2a8

            jmp .L_41e1f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e2a8:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e2b0:

            movzx R8D,BYTE PTR [RDI+3272]
            movzx R9D,WORD PTR [RSI]
            test R8D,R8D
            je .L_41e2a8

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41e2e3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e2d0:

            cmp AL,1
            je .L_41e304
.L_41e2d4:

            add EDX,1
            add RCX,136
            cmp EDX,R8D
            je .L_41e2a8
.L_41e2e3:

            movsxd RSI,EDX
            mov RAX,RSI
            shl RAX,4
            add RAX,RSI
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea ESI,DWORD PTR [RAX-6]
            cmp SIL,1
            ja .L_41e2d0
.L_41e304:

            cmp R9W,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41e2d4

            ret 
.L_41e310:

            add RDI,3280
            mov RAX,RSI
            movabs RSI,-1085102592571150095
            sub RAX,RDI
            sar RAX,3
            imul RAX,RSI
            ret 
.L_41e330:

            test RSI,RSI
            je .L_41e33e

            movzx EAX,BYTE PTR [RDI+3272]
            mov BYTE PTR [RSI],AL
.L_41e33e:

            lea RAX,QWORD PTR [RDI+3280]
            ret 
.L_41e346:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e350:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp DL,9
            ja .L_41e372

            mov EDX,DWORD PTR [RDI+12]
            mov EAX,13
            test EDX,EDX
            jne .L_41e372

            mov BYTE PTR [RDI+3272],SIL
            xor EAX,EAX
.L_41e372:

            ret 
.L_41e374:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e380:

            lea EAX,DWORD PTR [RSI+2]
            mov R10D,ESI
            cmp AX,1
            jbe .L_41e410

            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,1
            jb .L_41e410

            cmp EAX,2
            jbe .L_41e408

            cmp EAX,4
            ja .L_41e410

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41e418

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41e3d3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e3c0:

            cmp AL,1
            je .L_41e3f5
.L_41e3c4:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            je .L_41e418
.L_41e3d3:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea R8D,DWORD PTR [RAX-6]
            cmp R8B,1
            ja .L_41e3c0
.L_41e3f5:

            cmp R10W,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41e3c4

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e408:

            movzx ESI,SI
            jmp .L_41a330
.L_41e410:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e418:

            test ESI,511
            movzx EAX,SI
            jne .L_41e410

            sar EAX,10
            cdqe 
            lea RDX,QWORD PTR [RAX+RAX*4]
            shl RDX,3
            lea RAX,QWORD PTR [RDI+RDX*1+752]
            movzx EDX,BYTE PTR [RDI+RDX*1+778]
            and EDX,7
            cmp DL,7
            jne .L_41e410

            cmp WORD PTR [RAX+24],SI
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_41e456:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e460:

            push RBX
            mov EBX,ESI
            call .L_433510

            movzx EDX,WORD PTR [RAX+1664]
            movzx ESI,BX
            mov ECX,ESI
            sar ECX,10
            sar EDX,10
            cmp DL,CL
            je .L_41e488
.L_41e47e:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e488:

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e380

            test RAX,RAX
            je .L_41e47e

            movzx EAX,BYTE PTR [RAX+26]
            pop RBX
            shr AL,3
            and EAX,15
            shr AL,1
            xor EAX,1
            and EAX,1
            ret 
.L_41e4ad:

            nop
            nop
            nop
.L_41e4b0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41e4b8:

            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,1
            jb .L_41e540

            cmp EAX,2
            jbe .L_41e55d

            cmp EAX,4
            ja .L_41e540

            xor EBX,EBX
            cmp BYTE PTR [RDI+3272],0
            mov R12,RSI
            mov RBP,RDI
            lea R13,QWORD PTR [RDI+3280]
            jne .L_41e509

            jmp .L_41e570
          .byte 0x90
.L_41e4f0:

            cmp AL,1
            je .L_41e529
.L_41e4f4:

            movzx EAX,BYTE PTR [RBP+3272]
            add EBX,1
            add R13,136
            cmp EAX,EBX
            jle .L_41e570
.L_41e509:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_41e4f0
.L_41e529:

            mov RSI,R12
            mov RDI,R13
            mov R14,R13
            call .L_408da0

            test AL,AL
            je .L_41e4f4

            jmp .L_41e543
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41e540:

            xor R14D,R14D
.L_41e543:

            pop RBX
.L_41e544:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_41e550:

            mov EAX,DWORD PTR [RBP+60]
            test EAX,EAX
            je .L_41e540

            mov RSI,R12
            mov RDI,RBP
.L_41e55d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_41a380
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e570:

            xor EBX,EBX
            lea R13,QWORD PTR [RBP+752]
            jmp .L_41e58a

            nop
            nop
            nop
            nop
            nop
.L_41e580:

            add RBX,1
            cmp RBX,63
            je .L_41e550
.L_41e58a:

            movzx EAX,BYTE PTR [RBP+4669]
            cmp EAX,EBX
            je .L_41e580

            movsxd RAX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBP+RAX*8+778]
            and EAX,7
            cmp AL,7
            jne .L_41e580

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RSI,R12
            lea R14,QWORD PTR [R13+RAX*8]
            mov RDI,R14
            call .L_408da0

            test AL,AL
            je .L_41e580

            jmp .L_41e543
.L_41e5c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e5d0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41e5f0

            cmp EAX,2
            jne .L_41e5e8

            jmp .L_41e4b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e5e8:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e5f0:

            movzx ESI,WORD PTR [RSI]
            jmp .L_41e380
.L_41e5f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e600:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,48
.L_41e615:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+36],0
            call .L_40ff50

            test AL,AL
            je .L_41e690

            cmp WORD PTR [RBP+8],0
            jne .L_41e649

            cmp WORD PTR [RBP+10],65280
            je .L_41e7a0
.L_41e649:

            lea R12,QWORD PTR [RSP+28]
            mov RDI,RBP
            mov RSI,R12
            call .L_4101f0
.L_41e659:

            mov RSI,R12
            mov RDI,RBX
            call .L_41e5d0

            mov R12,RAX
.L_41e667:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            mov RAX,R12
            jne .L_41e846

            add RSP,48
.L_41e682:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e690:

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+7520]
            mov RDX,RSP
            mov RSI,RBP
            call .L_428150

            test EAX,EAX
            jne .L_41e770

            cmp BYTE PTR [RBX+3272],0
            movzx ECX,BYTE PTR [RSP+9]
            je .L_41e7d0
.L_41e6c4:

            lea R13,QWORD PTR [RBX+3280]
            xor R14D,R14D
            jmp .L_41e70e
.L_41e6d0:

            mov RDI,RBX
            call .L_4334e0

            mov RDX,RBP
            mov RSI,RAX
            mov RDI,R13
            call .L_42e040

            test AL,AL
            jne .L_41e667

            movzx ECX,BYTE PTR [RSP+9]
.L_41e6f3:

            movzx EAX,BYTE PTR [RBX+3272]
            add R14D,1
            add R13,136
            cmp EAX,R14D
            jle .L_41e7d0
.L_41e70e:

            movsxd RDX,R14D
            mov R12,R13
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41e735

            cmp AL,1
            jne .L_41e6f3
.L_41e735:

            test CL,CL
            jne .L_41e6d0

            cmp WORD PTR [RBP+8],0
            jne .L_41e6d0

            cmp WORD PTR [RBP+10],65280
            jne .L_41e6d0

            cmp WORD PTR [RBP+12],254
            jne .L_41e6d0

            movzx EAX,WORD PTR [R13+24]
            rol AX,8
            cmp WORD PTR [RBP+14],AX
            jne .L_41e6d0

            jmp .L_41e667
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e770:

            cmp BYTE PTR [RBX+3272],0
            mov BYTE PTR [RSP+9],255
            mov ECX,4294967295
            jne .L_41e6c4

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e790:

            xor R12D,R12D
            jmp .L_41e667
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e7a0:

            cmp WORD PTR [RBP+12],254
            jne .L_41e649

            movzx EAX,WORD PTR [RBP+14]
            mov DWORD PTR [RSP+36],1
            lea R12,QWORD PTR [RSP+28]
            rol AX,8
            mov WORD PTR [RSP+28],AX
            jmp .L_41e659
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e7d0:

            test CL,CL
            jne .L_41e790

            xor EAX,EAX
            lea RCX,QWORD PTR [RBX+752]
            jmp .L_41e7ea
          .byte 0x90
.L_41e7e0:

            add RAX,1
            cmp RAX,63
            je .L_41e790
.L_41e7ea:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RBX+RDX*8+778]
            and EDX,7
            cmp DL,7
            jne .L_41e7e0

            movzx EDX,BYTE PTR [RBX+4669]
            cmp EDX,EAX
            je .L_41e7e0

            cmp WORD PTR [RBP+8],0
            jne .L_41e7e0

            cmp WORD PTR [RBP+10],65280
            jne .L_41e7e0

            cmp WORD PTR [RBP+12],254
            jne .L_41e7e0

            lea RDX,QWORD PTR [RAX+RAX*4]
            shl RDX,3
            lea R12,QWORD PTR [RCX+RDX*1]
            movzx EDX,WORD PTR [RBX+RDX*1+776]
            rol DX,8
            cmp WORD PTR [RBP+14],DX
            jne .L_41e7e0

            jmp .L_41e667
.L_41e846:

            call __stack_chk_fail@PLT
.L_41e84b:

            nop
            nop
            nop
            nop
            nop
.L_41e850:

            xor EAX,EAX
            cmp BYTE PTR [RDI+10],0
            je .L_41e860

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e860:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov R12D,R8D
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,24
.L_41e87d:

            call .L_417500

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_41e8c2

            movzx EAX,BYTE PTR [R15+78]
            mov EDX,8
            mov RSI,R15
            mov RDI,R14
            and EAX,4294967235
            or EAX,36
            mov BYTE PTR [R15+78],AL
            call .L_417540

            test EAX,EAX
            je .L_41e8d8
.L_41e8b2:

            mov RDI,R15
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_41e8c2:

            add RSP,24
.L_41e8c6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e8d8:

            mov RSI,R15
            mov RDI,R14
            call .L_4175c0

            test EAX,EAX
            jne .L_41e8b2

            mov RSI,R15
            mov RDI,R14
            call .L_417920

            test EAX,EAX
            jne .L_41e8b2

            mov RSI,R15
            mov RDI,R14
            call .L_417bb0

            test EAX,EAX
            jne .L_41e8b2

            mov RSI,R15
            mov RDI,R14
            call .L_417c50

            test EAX,EAX
            jne .L_41e8b2

            test R13B,R13B
            je .L_41e9cc

            movzx R13D,R13B
            lea EAX,DWORD PTR [R13-1]
            lea R13,QWORD PTR [RBX+RAX*1+1]
            jmp .L_41e945
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e930:

            cmp AL,25
            je .L_41e9a8

            cmp AL,12
            je .L_41e970
.L_41e938:

            add RBX,1
            cmp R13,RBX
            je .L_41e9cc
.L_41e945:

            movzx EAX,BYTE PTR [RBX]
            cmp AL,24
            jne .L_41e930

            mov RDI,R14
            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,R15
            call .L_40a4a0

            test EAX,EAX
            je .L_41e938

            jmp .L_41e8b2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e970:

            mov RSI,RBP
            mov RDI,R14
            call .L_41e600

            xor EDX,EDX
            test RAX,RAX
            je .L_41e98e

            movzx EDX,BYTE PTR [RAX+26]
            shr DL,3
            not EDX
            and EDX,1
.L_41e98e:

            mov RSI,R15
            mov RDI,R14
            call .L_4179e0

            test EAX,EAX
            je .L_41e938

            jmp .L_41e8b2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e9a8:

            mov RDI,R14
            call .L_433510

            lea RDI,QWORD PTR [RAX+1208]
            mov RSI,R15
            call .L_40a4a0

            test EAX,EAX
            je .L_41e938

            jmp .L_41e8b2
.L_41e9cc:

            test R12W,R12W
            je .L_41ea27

            mov RDI,R14
            call .L_433510

            lea RDI,QWORD PTR [RAX+2256]
            call .L_414d70

            mov RDI,R14
            call .L_418010

            movzx ECX,R12W
            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_418bc0

            test EAX,EAX
            jne .L_41e8b2

            lea RSI,QWORD PTR [RIP+.L_425a93]
            mov RDX,RBP
            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41e8c2
.L_41ea27:

            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_4180d0

            test EAX,EAX
            jne .L_41e8b2

            lea RSI,QWORD PTR [RIP+.L_425aa7]
            mov RDX,RBP
            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41e8c2
.L_41ea5c:

            nop
            nop
            nop
            nop
.L_41ea60:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            add RBX,16
            sub RSP,88
.L_41ea7b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            lea R13,QWORD PTR [RSP+38]
            call .L_433510

            xor EDX,EDX
            lea RSI,QWORD PTR [RIP+.L_425aba]
            xor ECX,ECX
            mov WORD PTR [RSP+48],DX
            mov RDI,RBP
            mov RDX,RBX
            mov R14,RAX
            xor EAX,EAX
            mov WORD PTR [RSP+58],CX
            mov WORD PTR [RSP+38],AX
            call .L_41c1e0

            mov RCX,R13
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_41eae8

            cmp BYTE PTR [RSP+39],4
            jbe .L_41eb10
.L_41eae2:

            mov R15D,6
.L_41eae8:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_41ec1e

            add RSP,88
.L_41eb03:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41eb10:

            lea RAX,QWORD PTR [RSP+48]
            mov EDX,10
            mov ESI,22
            mov RDI,R12
            mov BYTE PTR [RSP+49],0
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_41eb3f

            cmp BYTE PTR [RSP+49],8
            jne .L_41eae2
.L_41eb3f:

            lea RAX,QWORD PTR [RSP+58]
            mov EDX,10
            mov ESI,23
            mov RDI,R12
            mov BYTE PTR [RSP+59],0
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_41eb72

            cmp BYTE PTR [RSP+59],8
            jne .L_41eae2
.L_41eb72:

            movzx EDX,BYTE PTR [RSP+39]
            lea RDI,QWORD PTR [RSP+68]
            lea RSI,QWORD PTR [R13+2]
            mov ECX,4
            mov DWORD PTR [RSP+68],4294967295
            mov QWORD PTR [RSP+16],RDI
            mov R12,RDX
            call __memcpy_chk@PLT

            cmp BYTE PTR [RSP+49],0
            jne .L_41ebe0
.L_41eba1:

            movzx R8D,R12B
            lea R13D,DWORD PTR [R12+1]
            mov BYTE PTR [RSP+R8*1+68],24
.L_41ebb0:

            cmp BYTE PTR [RSP+59],0
            jne .L_41ec00
.L_41ebb7:

            lea ECX,DWORD PTR [R13+1]
            movzx R13D,R13B
            mov BYTE PTR [RSP+R13*1+68],25
.L_41ebc5:

            mov RDX,QWORD PTR [RSP+16]
            movzx ECX,CL
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,RBP
            call .L_41e850

            jmp .L_41eae8
.L_41ebe0:

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+1080]
            add RSI,2
            call .L_40a480

            test EAX,EAX
            jne .L_41eba1

            mov R13D,R12D
            jmp .L_41ebb0
          .byte 0x66
          .byte 0x90
.L_41ec00:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R14+1208]
            add RSI,2
            call .L_40a480

            test EAX,EAX
            jne .L_41ebb7

            mov ECX,R13D
            jmp .L_41ebc5
.L_41ec1e:

            call __stack_chk_fail@PLT
.L_41ec23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ec30:

            push RBP
            push RBX
            sub RSP,40
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-3]
            cmp EDX,1
            jbe .L_41ec70
.L_41ec51:

            xor EAX,EAX
            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            jne .L_41ecf1

            add RSP,40
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41ec70:

            mov RBP,RSP
            mov EDX,767
            mov ECX,256
            xor R8D,R8D
            cmp EAX,4
            mov QWORD PTR [RSP+2],0
            mov RBX,RDI
            mov DWORD PTR [RBP+10],0
            mov WORD PTR [RSP],DX
            mov WORD PTR [RSP+14],CX
            jne .L_41ecc8
.L_41eca1:

            lea RDX,QWORD PTR [RIP+.L_45fd50-236664]
            mov RDI,RBX
            mov ECX,1
            mov RSI,RBP
            call .L_41e850

            mov RDI,RBX
            call .L_41e0d0

            jmp .L_41ec51
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ecc8:

            call .L_401460

            movzx ECX,AX
            mov R8D,274877907
            mov EAX,ECX
            mul R8D
            mov R8D,EDX
            shr R8D,5
            imul R8D,R8D,500
            sub ECX,R8D
            mov R8D,ECX
            jmp .L_41eca1
.L_41ecf1:

            call __stack_chk_fail@PLT
.L_41ecf6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ed00:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41ed08:

            cmp DWORD PTR [RDI+12],2
            jne .L_41ed80

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41ed90

            cmp EAX,2
            jne .L_41ed80

            mov RBP,RSI
            mov R13,RDI
            xor EBX,EBX
            lea R12,QWORD PTR [RDI+752]
            jmp .L_41ed3a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41ed30:

            add RBX,1
            cmp RBX,63
            je .L_41ed80
.L_41ed3a:

            movzx EAX,BYTE PTR [R13+4669]
            cmp EAX,EBX
            je .L_41ed30

            movsxd RAX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R13+RAX*8+778]
            and EAX,7
            cmp AL,7
            jne .L_41ed30

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RSI,RBP
            lea R14,QWORD PTR [R12+RAX*8]
            mov RDI,R14
            call .L_408da0

            test AL,AL
            jne .L_41ed83

            add RBX,1
            cmp RBX,63
            jne .L_41ed3a

            nop
            nop
.L_41ed80:

            xor R14D,R14D
.L_41ed83:

            pop RBX
.L_41ed84:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_41ed90:

            movzx EAX,WORD PTR [RSI]
            test AX,511
            mov EDX,EAX
            jne .L_41ed80

            sar EAX,10
            cdqe 
            lea RAX,QWORD PTR [RAX+RAX*4]
            shl RAX,3
            lea R14,QWORD PTR [RDI+RAX*1+752]
            movzx EAX,BYTE PTR [RDI+RAX*1+778]
            and EAX,7
            cmp AL,7
            jne .L_41ed80

            cmp DX,WORD PTR [R14+24]
            jne .L_41ed80

            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41edd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ede0:

            movzx EAX,SI
            mov EDX,EAX
            sar EDX,10
            cmp DWORD PTR [RDI+12],2
            je .L_41eeb0

            movzx ECX,BYTE PTR [RDI+4669]
            mov EAX,ESI
            cmp CL,DL
            je .L_41eea8

            cmp DL,62
            mov EAX,4294967294
            ja .L_41eea8

            movsxd R8,EDX
            lea RSI,QWORD PTR [R8+R8*4]
            shl RSI,3
            lea R11,QWORD PTR [RDI+RSI*1+752]
            movzx R9D,BYTE PTR [R11+26]
            movzx R10D,BYTE PTR [R11+36]
            and R9D,7
            cmp R9B,7
            je .L_41ef10
.L_41ee3c:

            cmp R10B,62
            mov EAX,4294967294
            ja .L_41eea8

            mov R9D,16
            mov ESI,16
.L_41ee52:

            lea RAX,QWORD PTR [R8+R8*4]
            movzx R8D,R10B
            movzx R11D,R10B
            lea R8,QWORD PTR [R8+R8*4]
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            lea R8,QWORD PTR [RDI+R8*8+752]
            shr AL,2
            and EAX,15
            cmp CL,R10B
            je .L_41ee8a

            movzx ECX,BYTE PTR [R8+26]
            and ECX,7
            cmp CL,7
            je .L_41eec0
.L_41ee8a:

            add EAX,16
            cmp EAX,R9D
            jge .L_41ef00

            test BYTE PTR [R8+26],7
            mov EAX,4294967294
            je .L_41eea8
.L_41ee9e:

            mov EAX,R10D
            shl EAX,10
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41eea8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41eeb0:

            mov ESI,EAX
            jmp .L_41a700
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41eec0:

            lea RCX,QWORD PTR [R11+R11*4]
            movzx ECX,BYTE PTR [RDI+RCX*8+789]
            and ECX,3
            mov EDI,ECX
            movzx ECX,BYTE PTR [R8+30]
            cmp CL,DIL
            cmova ECX,EDI
            mov EDI,16
            sub ECX,1
            cmp CL,2
            ja .L_41eef7

            lea RDI,QWORD PTR [RIP+.L_425d30]
            movzx ECX,CL
            movzx EDI,BYTE PTR [RDI+RCX*1]
.L_41eef7:

            add EAX,EDI
            cmp R9D,EAX
            jg .L_41ee9e

            nop
            nop
.L_41ef00:

            cmp SIL,15
            ja .L_41ef5e

            mov EAX,EDX
            shl EAX,10
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41ef10:

            movzx ESI,BYTE PTR [RDI+RSI*1+789]
            and ESI,3
            mov R9D,ESI
            movzx ESI,BYTE PTR [R11+30]
            cmp SIL,R9B
            cmova ESI,R9D
            sub ESI,1
            cmp SIL,2
            ja .L_41ee3c

            lea R9,QWORD PTR [RIP+.L_425d30]
            movzx ESI,SIL
            cmp R10B,62
            movzx ESI,BYTE PTR [R9+RSI*1]
            jbe .L_41ef55

            cmp SIL,32
            jbe .L_41ef00

            ret 
.L_41ef55:

            movzx R9D,SIL
            jmp .L_41ee52
.L_41ef5e:

            mov EAX,4294967294
            ret 
.L_41ef64:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ef70:

            movzx ESI,SI
            mov EAX,16
            sar ESI,10
            cmp ESI,63
            je .L_41f028

            movzx R9D,BYTE PTR [RDI+4669]
            movsxd RCX,ESI
            lea RDX,QWORD PTR [RCX+RCX*4]
            shl RDX,3
            cmp R9B,SIL
            lea R8,QWORD PTR [RDI+RDX*1+752]
            je .L_41efb2

            movzx ESI,BYTE PTR [R8+26]
            and ESI,7
            cmp SIL,7
            je .L_41f030
.L_41efb2:

            movzx EDX,BYTE PTR [R8+36]
            cmp DL,62
            ja .L_41f028

            lea RCX,QWORD PTR [RCX+RCX*4]
            mov ESI,16
            movzx ECX,BYTE PTR [RDI+RCX*8+789]
            shr CL,2
            and ECX,15
            cmp R9B,DL
            je .L_41f019

            movzx R9D,DL
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea R8,QWORD PTR [RDI+RDX*8+752]
            movzx EDX,BYTE PTR [R8+26]
            and EDX,7
            cmp DL,7
            jne .L_41f019

            lea RDX,QWORD PTR [R9+R9*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            mov EDI,EDX
            movzx EDX,BYTE PTR [R8+30]
            and EDI,3
            cmp DL,DIL
            cmova EDX,EDI
            sub EDX,1
            cmp DL,2
            jbe .L_41f070
.L_41f019:

            add ECX,ESI
            cmp AL,CL
            cmova EAX,ECX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f028:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41f030:

            movzx EDX,BYTE PTR [RDI+RDX*1+789]
            and EDX,3
            mov ESI,EDX
            movzx EDX,BYTE PTR [R8+30]
            cmp DL,SIL
            cmova EDX,ESI
            sub EDX,1
            cmp DL,2
            ja .L_41efb2

            lea RAX,QWORD PTR [RIP+.L_425d30]
            movzx EDX,DL
            movzx EAX,BYTE PTR [RAX+RDX*1]
            jmp .L_41efb2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f070:

            lea RSI,QWORD PTR [RIP+.L_425d30]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RSI+RDX*1]
            jmp .L_41f019
.L_41f080:

            movzx ESI,SI
            mov EAX,16
            sar ESI,10
            cmp ESI,63
            je .L_41f0b1

            movsxd RSI,ESI
            lea RDX,QWORD PTR [RSI+RSI*4]
            lea RDX,QWORD PTR [RDI+RDX*8]
            cmp BYTE PTR [RDX+788],62
            ja .L_41f0b1

            movzx EAX,BYTE PTR [RDX+789]
            shr AL,2
            and EAX,15
.L_41f0b1:

            ret 
.L_41f0b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f0c0:

            cmp DWORD PTR [RDI+12],1
            mov EAX,13
            ja .L_41f0d4

            mov BYTE PTR [RDI+4670],SIL
            xor EAX,EAX
.L_41f0d4:

            ret 
.L_41f0d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f0e0:

            mov BYTE PTR [RDI+4669],SIL
            mov BYTE PTR [RDI+4670],SIL
            ret 
.L_41f0ef:

            nop
.L_41f0f0:

            test RSI,RSI
            je .L_41f0f8

            mov BYTE PTR [RSI],63
.L_41f0f8:

            lea RAX,QWORD PTR [RDI+752]
            ret 
.L_41f100:

            cmp SIL,62
            movzx EAX,SIL
            ja .L_41f120

            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f120:

            xor EAX,EAX
            ret 
.L_41f123:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f130:

            cmp SIL,62
            movzx EAX,SIL
            ja .L_41f150

            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f150:

            xor EAX,EAX
            ret 
.L_41f153:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f160:

            cmp BYTE PTR [RDI+3272],SIL
            jbe .L_41f192

            mov R8D,ESI
            movzx ESI,SIL
            mov RAX,RSI
            shl RAX,4
            add RSI,RAX
            movzx EAX,BYTE PTR [RDI+RSI*8+3306]
            and EAX,7
            lea ESI,DWORD PTR [RAX-6]
            cmp SIL,1
            jbe .L_41f1a0

            cmp AL,1
            je .L_41f1a0
.L_41f192:

            mov EAX,7
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f1a0:

            movzx EAX,R8B
            push R12
.L_41f1a6:

            push RBP
            push RBX
            mov RBX,RDX
            mov RDX,RAX
            shl RDX,4
            mov RBP,RCX
            add RAX,RDX
            lea R12,QWORD PTR [RDI+RAX*8+3280]
            call .L_4334e0

            mov RCX,RBP
            mov RDX,RBX
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            mov RSI,RAX
            jmp .L_42dd90
.L_41f1da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41f1e0:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov EBP,ESI
            xor EBX,EBX
            sub RSP,48
.L_41f1f3:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea R14,QWORD PTR [RSP+14]
            lea R13,QWORD PTR [RSP+16]
.L_41f20d:

            mov EAX,16
            mov RDI,R12
            mov WORD PTR [RSP+14],AX
            call .L_4334e0

            mov R8,R14
            mov RCX,R13
            mov EDX,EBX
            mov ESI,5
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_41f24f

            cmp WORD PTR [RSP+14],15
            jbe .L_41f270

            cmp WORD PTR [RSP+28],BP
            je .L_41f280

            add EBX,1
            cmp EBX,10
            jne .L_41f20d
.L_41f24f:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41f299

            add RSP,48
.L_41f263:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41f270:

            mov EAX,6
            jmp .L_41f24f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f280:

            mov RDI,R12
            call .L_4334e0

            mov EDX,EBX
            mov ESI,5
            mov RDI,RAX
            call .L_401560

            jmp .L_41f24f
.L_41f299:

            call __stack_chk_fail@PLT
.L_41f29e:

            nop
            nop
.L_41f2a0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R8D,ESI
            and R8W,511
            sub RSP,40
.L_41f2b6:

            movzx EDI,BYTE PTR [RDI+3272]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test EDI,EDI
            je .L_41f317

            lea RBX,QWORD PTR [R12+3280]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
.L_41f2e0:

            movsxd RCX,EDX
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            lea RBP,QWORD PTR [R12+RAX*8+3296]
            test BYTE PTR [RBP+10],7
            je .L_41f309

            movzx EAX,WORD PTR [RBX+24]
            and AX,511
            cmp AX,R8W
            je .L_41f340
.L_41f309:

            add EDX,1
            add RBX,136
            cmp EDX,EDI
            jne .L_41f2e0
.L_41f317:

            mov EAX,23
.L_41f31c:

            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            jne .L_41f399

            add RSP,40
.L_41f330:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f340:

            movzx ESI,SI
            mov RDI,R12
            mov R13,RSP
            call .L_41f1e0

            xor EAX,EAX
            mov RDI,R12
            mov WORD PTR [RSP+14],AX
            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RSP],RAX
            mov EAX,DWORD PTR [RBX+92]
            mov DWORD PTR [RSP+8],EAX
            movzx EAX,WORD PTR [RBX+24]
            mov WORD PTR [RSP+12],AX
            movzx EAX,BYTE PTR [RBP+10]
            shr AL,3
            and EAX,15
            mov BYTE PTR [RSP+14],AL
            call .L_4334e0

            mov ECX,16
            mov RDX,R13
            mov ESI,5
            mov RDI,RAX
            call .L_401550

            jmp .L_41f31c
.L_41f399:

            call __stack_chk_fail@PLT
.L_41f39e:

            nop
            nop
.L_41f3a0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_41f3a7:

            call .L_4334e0

            mov EDX,4294967295
            mov ESI,5
            mov RDI,RAX
            call .L_401560

            test EAX,EAX
            mov R12D,EAX
            jne .L_41f412

            xor EBX,EBX
            jmp .L_41f3da
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f3d0:

            add RBX,1
            cmp RBX,10
            je .L_41f412
.L_41f3da:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            test BYTE PTR [RBP+RAX*8+3306],7
            je .L_41f3d0

            mov RAX,RBX
            mov RDI,RBP
            shl RAX,4
            add RAX,RBX
            movzx ESI,WORD PTR [RBP+RAX*8+3304]
            call .L_41f2a0

            test EAX,EAX
            je .L_41f3d0

            mov R12D,EAX
.L_41f412:

            mov EAX,R12D
            pop RBX
.L_41f416:

            pop RBP
            pop R12
            ret 
.L_41f41a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41f420:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            xor R12D,R12D
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_41f437:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea R14,QWORD PTR [RSP+14]
            lea R13,QWORD PTR [RSP+16]
            jmp .L_41f4f2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f460:

            mov R15D,1
.L_41f466:

            lea RDI,QWORD PTR [RBX+8]
            mov RCX,RBX
            xor EAX,EAX
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+128],0
            add R12D,1
            and RDI,-8
            sub RCX,RDI
            add ECX,136
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RAX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBX],RAX
            movzx EAX,WORD PTR [RSP+28]
            mov WORD PTR [RBX+24],AX
            mov EAX,DWORD PTR [RSP+24]
            mov DWORD PTR [RBX+92],EAX
            movzx EAX,BYTE PTR [RSP+30]
            and EAX,15
            lea EDX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,4294967168
            or EAX,EDX
            or EAX,1
            mov BYTE PTR [RBX+26],AL
            call .L_401240

            mov RDI,RBP
            mov DWORD PTR [RBX+8],EAX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2504]
            mov EDX,1
            mov RSI,RBX
            call .L_42d530
.L_41f4f2:

            mov EAX,16
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            call .L_4334e0

            movzx EDX,R12B
            mov R8,R14
            mov RCX,R13
            mov ESI,5
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_41f5c0

            cmp WORD PTR [RSP+14],15
            jbe .L_41f582

            mov RSI,R13
            mov RDI,RBP
            call .L_41cef0

            test RAX,RAX
            mov RBX,RAX
            jne .L_41f460

            movzx ECX,BYTE PTR [RBP+3272]
            test ECX,ECX
            je .L_41f582

            test BYTE PTR [RBP+3306],7
            je .L_41f5d0

            xor EAX,EAX
            jmp .L_41f57b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41f560:

            movsxd RDX,EAX
            mov RBX,RDX
            shl RBX,4
            add RBX,RDX
            shl RBX,3
            test BYTE PTR [RBP+RBX*1+3306],7
            je .L_41f5b0
.L_41f57b:

            add EAX,1
            cmp EAX,ECX
            jne .L_41f560
.L_41f582:

            mov RDI,RBP
            call .L_41f3a0
.L_41f58a:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41f5d7

            add RSP,56
.L_41f59e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f5b0:

            add RBX,3280
.L_41f5b7:

            add RBX,RBP
            jmp .L_41f466
          .byte 0x90
.L_41f5c0:

            cmp R12B,10
            ja .L_41f582

            test R15B,R15B
            je .L_41f58a

            jmp .L_41f582
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41f5d0:

            mov EBX,3280
            jmp .L_41f5b7
.L_41f5d7:

            call __stack_chk_fail@PLT
.L_41f5dc:

            nop
            nop
            nop
            nop
.L_41f5e0:

            movzx ECX,BYTE PTR [RSI+26]
            and ECX,7
            lea EAX,DWORD PTR [RCX-6]
            cmp AL,1
            jbe .L_41f5fc

            cmp CL,1
            mov EAX,23
            jne .L_41f700
.L_41f5fc:

            pxor XMM0,XMM0
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDX
            sub RSP,8
.L_41f60c:

            movups XMMWORD PTR [RDX+16],XMM0
            movups XMMWORD PTR [RDX],XMM0
            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDX],RAX
            mov EAX,DWORD PTR [RSI+92]
            mov DWORD PTR [RDX+8],EAX
            movzx EAX,WORD PTR [RSI+24]
            mov WORD PTR [RDX+16],AX
            movzx EAX,WORD PTR [RSI+24]
            and AX,511
            mov WORD PTR [RDX+18],AX
            movzx EAX,BYTE PTR [RSI+125]
            mov BYTE PTR [RDX+20],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            lea RDI,QWORD PTR [RBP+28]
            mul EDX
            shr EDX,6
            mov DWORD PTR [RBX+12],EDX
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+21],AL
            call .L_4141d0

            mov BYTE PTR [RBX+22],AL
            movzx EAX,BYTE PTR [RBP+31]
            mov BYTE PTR [RBX+23],AL
            movzx EAX,WORD PTR [RBP+32]
            mov WORD PTR [RBX+24],AX
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+26],AX
            movzx EAX,BYTE PTR [RBP+26]
            shr AL,3
            and EAX,15
            shr AL,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+28]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967293
            shr DL,3
            shr DX,2
            and EDX,1
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967291
            shr DL,3
            shr DX,1
            and EDX,1
            shl EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967287
            and EDX,8
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx ECX,BYTE PTR [RBP+26]
            and ECX,7
            cmp CL,6
            sete DL
            cmp CL,1
            sete CL
            and EAX,4294967279
            or EDX,ECX
            shl EDX,4
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            add RSP,8
.L_41f6f7:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41f700:

            ret 
.L_41f702:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f710:

            movzx R9D,BYTE PTR [RDI+3272]
            mov R10D,ESI
            and R10W,511
            test ESI,65024
            cmove R10D,ESI
            test R9D,R9D
            je .L_41f774

            lea RSI,QWORD PTR [RDI+3280]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f740:

            movsxd R8,ECX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            test BYTE PTR [RDI+RAX*8+3306],7
            je .L_41f765

            movzx EAX,WORD PTR [RSI+24]
            and AX,511
            cmp R10W,AX
            je .L_41f780
.L_41f765:

            add ECX,1
            add RSI,136
            cmp ECX,R9D
            jne .L_41f740
.L_41f774:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41f780:

            jmp .L_41f5e0
.L_41f785:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f790:

            cmp BYTE PTR [RDI+3272],SIL
            movzx EAX,SIL
            jbe .L_41f7b8

            mov RCX,RAX
            shl RCX,4
            add RAX,RCX
            lea RSI,QWORD PTR [RDI+RAX*8+3280]
            jmp .L_41f5e0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41f7b8:

            mov EAX,7
            ret 
.L_41f7be:

            nop
            nop
.L_41f7c0:

            cmp SI,62
            jbe .L_41f7d2

            test ESI,511
            je .L_41f890
.L_41f7d2:

            cmp SIL,62
            mov EAX,23
            ja .L_41f8a5
.L_41f7e1:

            movzx EAX,SIL
            push RBP
            push RBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov RBX,RDX
            sub RSP,8
.L_41f7f2:

            lea RBP,QWORD PTR [RDI+RAX*8+752]
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RDX],RAX
            movzx EAX,SIL
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RCX,QWORD PTR [RDI+RAX*8+784]
            movzx EAX,BYTE PTR [RCX+5]
            mov BYTE PTR [RBX+10],SIL
            shl ESI,10
            mov WORD PTR [RBX+8],SI
            shr AL,6
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+16]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EDX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+11],DL
            movzx EDX,BYTE PTR [RBP+26]
            and EDX,7
            cmp DL,7
            sete DL
            and EAX,4294967293
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EAX,BYTE PTR [RCX+5]
            shr AL,2
            and EAX,15
            mov BYTE PTR [RBX+12],AL
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+13],AL
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,3
            mov BYTE PTR [RBX+14],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            mul EDX
            xor EAX,EAX
            shr EDX,6
            mov BYTE PTR [RBX+15],DL
            add RSP,8
.L_41f88b:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41f890:

            shr ESI,10
            mov EAX,23
            and ESI,63
            cmp SIL,62
            jbe .L_41f7e1
.L_41f8a5:

            ret 
.L_41f8a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f8b0:

            pxor XMM0,XMM0
            push RBP
            push RBX
            sub RSP,8
.L_41f8ba:

            mov DWORD PTR [RDX+32],0
            movups XMMWORD PTR [RDX],XMM0
            movups XMMWORD PTR [RDX+16],XMM0
            movzx ECX,WORD PTR [RSI]
            test CX,CX
            js .L_41fa00

            movzx R9D,BYTE PTR [RDI+3272]
            movsx RAX,CX
            cmp EAX,R9D
            jl .L_41f900

            jmp .L_41fa90
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41f8f0:

            add ECX,1
            movsx RAX,CX
            cmp EAX,R9D
            jge .L_41fa90
.L_41f900:

            mov R8,RAX
            shl R8,4
            add R8,RAX
            movzx R8D,BYTE PTR [RDI+R8*8+3306]
            and R8D,7
            cmp R8B,7
            jne .L_41f8f0

            mov R8,RAX
            add ECX,1
            or BYTE PTR [RDX+32],16
            shl R8,4
            mov WORD PTR [RSI],CX
            add RAX,R8
            lea RBP,QWORD PTR [RDI+RAX*8+3280]
.L_41f939:

            mov RAX,QWORD PTR [RBP]
            mov RBX,RDX
            mov QWORD PTR [RDX],RAX
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            lea RDI,QWORD PTR [RBP+28]
            mul EDX
            shr EDX,6
            mov DWORD PTR [RBX+8],EDX
            movzx EAX,WORD PTR [RBP+24]
            mov WORD PTR [RBX+12],AX
            mov EAX,DWORD PTR [RBP+12]
            mov DWORD PTR [RBX+16],EAX
            mov EAX,DWORD PTR [RBP+16]
            mov DWORD PTR [RBX+20],EAX
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+24],AL
            call .L_4141d0

            mov BYTE PTR [RBX+25],AL
            movzx EAX,BYTE PTR [RBP+31]
            mov BYTE PTR [RBX+26],AL
            movzx EAX,WORD PTR [RBP+32]
            mov WORD PTR [RBX+28],AX
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+30],AX
            movzx EAX,BYTE PTR [RBP+26]
            shr AL,3
            and EAX,15
            shr AL,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+32]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967293
            shr DL,3
            shr DX,2
            and EDX,1
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967291
            shr DL,3
            shr DX,1
            and EDX,1
            shl EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967287
            and EDX,8
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            add RSP,8
.L_41f9f4:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fa00:

            neg ECX
            cmp CX,62
            mov R8D,ECX
            jg .L_41fa58

            movsx RAX,CX
.L_41fa0f:

            lea R9,QWORD PTR [RAX+RAX*4]
            add R8D,1
            movsx R8,R8W
            movzx R9D,BYTE PTR [RDI+R9*8+778]
            and R9D,7
            cmp R9B,7
            jne .L_41fa4e

            jmp .L_41fa70
.L_41fa30:

            movsxd RAX,R8D
            add R8,1
            lea R9,QWORD PTR [RAX+RAX*4]
            movzx R9D,BYTE PTR [RDI+R9*8+778]
            and R9D,7
            cmp R9B,7
            je .L_41fa70
.L_41fa4e:

            cmp R8W,62
            mov ECX,R8D
            jle .L_41fa30
.L_41fa58:

            neg ECX
            mov EAX,23
            mov WORD PTR [RSI],CX
            add RSP,8
.L_41fa66:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fa70:

            lea RAX,QWORD PTR [RAX+RAX*4]
            not ECX
            and BYTE PTR [RDX+32],239
            mov WORD PTR [RSI],CX
            lea RBP,QWORD PTR [RDI+RAX*8+752]
            jmp .L_41f939
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41fa90:

            xor EAX,EAX
            xor ECX,ECX
            xor R8D,R8D
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            jmp .L_41fa0f
.L_41faa1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fab0:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            movzx EBX,DX
            mov RBP,RDI
            mov ESI,EBX
            call .L_41ede0

            cmp AX,R12W
            je .L_41fad0
.L_41faca:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_41fad0:

            sar EBX,10
            cmp EBX,63
            je .L_41faca

            movsxd RBX,EBX
            lea RAX,QWORD PTR [RBX+RBX*4]
            mov BYTE PTR [RBP+RAX*8+788],63
            mov EAX,DWORD PTR [RBP+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41faca

            pop RBX
            mov RDI,RBP
            pop RBP
            pop R12
            jmp .L_41c470
.L_41fafe:

            nop
            nop
.L_41fb00:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13D,EDX
            mov EBX,ESI
            mov RBP,RCX
            sub RSP,72
.L_41fb1c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            cmp DWORD PTR [R12+12],2
            pxor XMM0,XMM0
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            je .L_41fc50

            mov R14,RAX
            cmp R13W,WORD PTR [RAX+1664]
            je .L_41fc70

            movzx ESI,R13W
            mov EAX,ESI
            sar EAX,10
            cmp BYTE PTR [R12+4669],AL
            jne .L_41fbf0

            movzx EDI,BYTE PTR [R12+3272]
            test EDI,EDI
            je .L_41fbfe

            lea RSI,QWORD PTR [R12+3304]
            xor EDX,EDX
            jmp .L_41fba2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41fb90:

            cmp AL,1
            je .L_41fbc3
.L_41fb94:

            add EDX,1
            add RSI,136
            cmp EDX,EDI
            je .L_41fbfe
.L_41fba2:

            movsxd RCX,EDX
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [R12+RAX*8+3306]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            ja .L_41fb90
.L_41fbc3:

            cmp R15W,WORD PTR [RSI]
            jne .L_41fb94
.L_41fbc9:

            xor EAX,EAX
.L_41fbcb:

            mov RBX,QWORD PTR [RSP+56]
            xor RBX,QWORD PTR FS:[40]
            jne .L_41fca0

            add RSP,72
.L_41fbe3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41fbf0:

            mov RDI,R12
            call .L_41ede0

            cmp AX,-2
            jne .L_41fbc9
.L_41fbfe:

            mov RDI,R12
            rol BX,8
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R14
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+30],BX
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+36],AL
            call .L_4334f0

            lea RDI,QWORD PTR [RAX+88]
            mov RCX,RSP
            mov R8,RBP
            xor EDX,EDX
            mov ESI,1
            call .L_43ddc0

            mov EAX,2
            jmp .L_41fbcb
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fc50:

            movzx EDX,R13W
            movzx ESI,BX
            mov RCX,RBP
            mov RDI,R12
            call .L_41c0f0

            jmp .L_41fbcb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fc70:

            lea R13,QWORD PTR [RBP+24]
            mov RDI,RAX
            mov RSI,R13
            call .L_411990

            test AL,AL
            jne .L_41fbc9

            mov RSI,R13
            mov RDI,R12
            call .L_41e600

            test RAX,RAX
            jne .L_41fbc9

            jmp .L_41fbfe
.L_41fca0:

            call __stack_chk_fail@PLT
.L_41fca5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fcb0:

            push R14
            push R13
            mov R13D,ESI
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,256
.L_41fcc5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_433510

            xor EDI,EDI
            xor R8D,R8D
            xor R9D,R9D
            mov R12,RAX
            xor EAX,EAX
            test BYTE PTR [RBX+4668],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+38],DI
            mov WORD PTR [RSP+34],R8W
            mov WORD PTR [RSP+31],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            je .L_41fd40
.L_41fd17:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41febf

            add RSP,256
.L_41fd35:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_41fd40:

            lea RBP,QWORD PTR [RSP+96]
            mov EDX,2
            xor ESI,ESI
            lea R14,QWORD PTR [R12+216]
            mov RDI,RBP
            call .L_431360

            mov RDI,RBP
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_425a19]
            mov RDI,RBP
            call .L_4318a0

            mov RDI,RBP
            call .L_431b50

            mov RSI,RBP
            mov EDX,2
            mov RDI,R14
            call .L_42f920

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_41fd17

            mov ESI,2049
            mov RAX,QWORD PTR [R12+1656]
            mov EDX,10
            mov WORD PTR [RSP+38],SI
            lea RSI,QWORD PTR [RSP+38]
            mov RDI,RBP
            mov QWORD PTR [RSP+40],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_41fe08

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            ja .L_41fe20

            mov EDX,514
            shl EAX,10
            lea RSI,QWORD PTR [RSP+34]
            rol AX,8
            mov WORD PTR [RSP+34],DX
            mov RDI,RBP
            mov EDX,4
            mov WORD PTR [RSP+36],AX
            call .L_403d80

            test EAX,EAX
            je .L_41fe20

            nop
            nop
            nop
.L_41fe08:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41fd17
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41fe20:

            lea RSI,QWORD PTR [RSP+31]
            mov ECX,260
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+31],CX
            mov BYTE PTR [RSP+33],R13B
            call .L_403d80

            test EAX,EAX
            jne .L_41fe08

            lea R13,QWORD PTR [RSP+64]
            mov RDI,RBX
            lea R12,QWORD PTR [RSP+48]
            mov RSI,R13
            call .L_4172c0

            test EAX,EAX
            jne .L_41fe08

            mov RDI,RBX
            call .L_4172a0

            lea RCX,QWORD PTR [RIP+.L_425920]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov R8,RBX
            mov EAX,4294963391
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R14
            mov WORD PTR [RSP+82],AX
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_430850

            test EAX,EAX
            jne .L_41fe08

            or BYTE PTR [RBX+4668],2
            lea RSI,QWORD PTR [RIP+.L_425acf]
            mov RDX,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41fd17
.L_41febf:

            call __stack_chk_fail@PLT
.L_41fec4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fed0:

            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,8
.L_41fedb:

            call .L_433510

            mov EDX,DWORD PTR [RBX+12]
            test EDX,EDX
            je .L_41ff50

            cmp EDX,3
            je .L_41ff30

            test BYTE PTR [RBX+4668],1
            je .L_41ff40

            test BYTE PTR [RBX+56],2
            je .L_41ff40

            lea RDI,QWORD PTR [RAX+2256]
            mov ESI,1
            call .L_440c70

            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBX+4677],0
            cmp EAX,1
            je .L_41ff60

            cmp EAX,2
            jne .L_41ff8a

            add RSP,8
.L_41ff24:

            mov ESI,EBP
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_41fcb0
.L_41ff30:

            xor EBP,EBP
.L_41ff32:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ff40:

            mov EBP,27
            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41ff50:

            mov EBP,13
            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41ff60:

            xor ESI,ESI
            mov RDI,RBX
            call .L_41cb80

            test EAX,EAX
            mov EBP,EAX
            jne .L_41ff32

            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            jmp .L_41ff32
.L_41ff8a:

            lea RCX,QWORD PTR [RIP+.L_45fd50-236816]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,269
            call __assert_fail@PLT
.L_41ffa9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ffb0:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,240
.L_41ffc2:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ESI,ESI
            xor EDI,EDI
            mov EDX,2
            mov WORD PTR [RSP+18],SI
            mov WORD PTR [RSP+22],DI
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov RDI,RBX
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_425a1e]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_42009e

            movzx EAX,BYTE PTR [RBP+4669]
            lea RSI,QWORD PTR [RSP+18]
            mov ECX,514
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+18],CX
            shl EAX,10
            rol AX,8
            mov WORD PTR [RSP+20],AX
            call .L_403d80

            test EAX,EAX
            je .L_4200c8
.L_42008e:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_42009e:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_420166

            add RSP,240
.L_4200bc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4200c8:

            mov RAX,QWORD PTR [R12+1656]
            mov EDX,2049
            lea RSI,QWORD PTR [RSP+22]
            mov WORD PTR [RSP+22],DX
            mov RDI,RBX
            mov EDX,10
            mov QWORD PTR [RSP+24],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_42008e

            lea R14,QWORD PTR [RSP+32]
            mov RDI,RBP
            call .L_4172a0

            lea R12,QWORD PTR [R14+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            mov RSI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_4172c0

            test EAX,EAX
            jne .L_42008e

            mov EAX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_430850

            test EAX,EAX
            jne .L_42008e

            lea RSI,QWORD PTR [RIP+.L_425ae4]
            mov RDX,R12
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42009e
.L_420166:

            call __stack_chk_fail@PLT
.L_42016b:

            nop
            nop
            nop
            nop
            nop
.L_420170:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,EDX
            push RBP
            push RBX
            mov RBP,RCX
            mov R12,RDI
            sub RSP,200
.L_42018d:

            lea R13,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_433510

            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            mov RBX,RAX
            mov WORD PTR [RSP+14],SI
            mov WORD PTR [RSP+21],DI
            mov RSI,R15
            mov RDI,R13
            mov WORD PTR [RSP+17],R8W
            add RBX,216
            call .L_431cf0

            mov RDI,R13
            call .L_431b50

            mov EDX,2
            mov RSI,R13
            mov RDI,RBX
            call .L_42f920

            test RAX,RAX
            je .L_42022d

            mov ECX,260
            cmp R14B,62
            mov R13,RAX
            mov WORD PTR [RSP+14],CX
            jbe .L_420260

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,3
            mov RDI,RAX
            mov BYTE PTR [RSP+16],1
            call .L_403d80

            test EAX,EAX
            je .L_420328
.L_420225:

            mov RDI,R13
            call .L_403400
.L_42022d:

            mov RAX,QWORD PTR [RSP+184]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42035b

            add RSP,200
.L_42024b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420260:

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,3
            mov RDI,RAX
            mov BYTE PTR [RSP+16],0
            call .L_403d80

            test EAX,EAX
            jne .L_420225

            mov EDX,514
            shl R14D,10
            lea RSI,QWORD PTR [RSP+17]
            mov WORD PTR [RSP+17],DX
            rol R14W,8
            mov EDX,4
            mov RDI,R13
            mov WORD PTR [RSP+19],R14W
            call .L_403d80

            test EAX,EAX
            jne .L_420225

            mov EAX,2311
            mov QWORD PTR [RSP+24],0
            xor ESI,ESI
            mov WORD PTR [RSP+21],AX
            movzx EAX,BYTE PTR [R12+744]
            mov EDX,128
            mov BYTE PTR [RSP+23],AL
            nop
            nop
            nop
.L_4202d8:

            movsxd RCX,ESI
            lea RAX,QWORD PTR [RCX+RCX*4]
            test BYTE PTR [R12+RAX*8+789],64
            je .L_420300

            mov EDI,ESI
            mov ECX,ESI
            mov EAX,EDX
            shr DIL,3
            and ECX,7
            and EDI,31
            sar EAX,CL
            or BYTE PTR [RSP+RDI*1+24],AL
.L_420300:

            add ESI,1
            cmp ESI,63
            jne .L_4202d8

            lea RSI,QWORD PTR [RSP+21]
            mov EDX,11
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_420225

            nop
            nop
            nop
            nop
            nop
            nop
.L_420328:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R13
            mov RDI,RBX
            call .L_430850

            test EAX,EAX
            jne .L_420225

            lea RDX,QWORD PTR [RBP+16]
            lea RSI,QWORD PTR [RIP+.L_425af9]
            mov RDI,R12
            call .L_41c1e0

            jmp .L_42022d
.L_42035b:

            call __stack_chk_fail@PLT
.L_420360:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            xor R9D,R9D
            push RBP
            push RBX
            sub RSP,56
.L_420374:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI],48
            mov WORD PTR [RSP+26],R8W
            mov WORD PTR [RSP+30],AX
            mov WORD PTR [RSP+23],R9W
            jne .L_4203a5

            cmp BYTE PTR [RSI+1],2
            mov RBX,RSI
            je .L_4203d0
.L_4203a5:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_420556

            add RSP,56
.L_4203bd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4203d0:

            mov R13,RDX
            lea RSI,QWORD PTR [RIP+.L_425b0c]
            lea RDX,QWORD PTR [RCX+16]
            lea R14,QWORD PTR [RSP+30]
            mov RBP,RDI
            mov R12,RCX
            call .L_41c1e0

            mov RCX,R14
            mov EDX,10
            mov ESI,1
            mov RDI,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_4203a5

            cmp BYTE PTR [RSP+31],8
            jne .L_4203a5

            lea RCX,QWORD PTR [RSP+23]
            mov EDX,3
            mov ESI,4
            mov RDI,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_4203a5

            cmp BYTE PTR [RSP+24],1
            jne .L_4203a5

            lea RAX,QWORD PTR [R14+2]
            xor R15D,R15D
            mov QWORD PTR [RSP+8],RAX
            jmp .L_42045a
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420450:

            add R15,1
            cmp R15,63
            je .L_42049f
.L_42045a:

            movsxd RAX,R15D
            lea RAX,QWORD PTR [RAX+RAX*4]
            test BYTE PTR [RBP+RAX*8+789],64
            je .L_420450

            lea RAX,QWORD PTR [R15+R15*4]
            mov RSI,QWORD PTR [RSP+8]
            mov DWORD PTR [RSP],R15D
            lea RDI,QWORD PTR [RBP+RAX*8+752]
            call .L_408da0

            test AL,AL
            mov EDX,DWORD PTR [RSP]
            je .L_420450
.L_42048c:

            mov RCX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_420170

            jmp .L_4203a5
.L_42049f:

            movzx EAX,BYTE PTR [RSP+25]
            cmp AL,2
            je .L_42055b

            jb .L_4203a5

            cmp AL,4
            ja .L_4203a5
.L_4204ba:

            lea RCX,QWORD PTR [RSP+26]
            mov EDX,4
            mov ESI,2
            mov RDI,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_420593

            cmp BYTE PTR [RSP+27],2
            jne .L_4203a5

            movzx R13D,WORD PTR [RSP+28]
            rol R13W,8
            movzx R13D,R13W
            sar R13D,10
            cmp R13D,63
            je .L_420593

            movsxd R15,R13D
            imul RAX,R15,40
            lea RDX,QWORD PTR [RBP+RAX*1+784]
            test BYTE PTR [RDX+5],64
            jne .L_4205aa
.L_42051a:

            imul R15,R15,40
            cmp BYTE PTR [RBP+R15*1+789],0
            js .L_420593
.L_420529:

            mov ESI,R13D
            mov RDI,RBP
            call .L_41c820

            cmp AL,62
            movzx ECX,AL
            ja .L_420593
.L_42053b:

            movsxd RAX,ECX
            mov RDX,QWORD PTR [RSP+32]
            imul RAX,RAX,40
            mov QWORD PTR [RBP+RAX*1+752],RDX
            mov EDX,ECX
            jmp .L_42048c
.L_420556:

            call __stack_chk_fail@PLT
.L_42055b:

            xor ECX,ECX
            xor EDX,EDX
            nop
.L_420560:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBP+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_420560

            cmp BYTE PTR [RBP+4661],CL
            jbe .L_42048c

            jmp .L_4204ba
.L_420593:

            mov RDI,RBP
            call .L_41c8b0

            movzx ECX,AL
            cmp AL,62
            mov EDX,ECX
            ja .L_42048c

            jmp .L_42053b
.L_4205aa:

            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [RBP+RAX*1+752]
            mov QWORD PTR [RSP],RDX
            call .L_408db0

            test AL,AL
            jne .L_420593

            mov RDX,QWORD PTR [RSP]
            test BYTE PTR [RDX+5],64
            je .L_42051a

            jmp .L_420529
.L_4205d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4205e0:

            jmp .L_420360
.L_4205e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4205f0:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_420601:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI],48
            mov WORD PTR [RSP+14],R8W
            mov WORD PTR [RSP+10],AX
            jne .L_42062c

            cmp BYTE PTR [RSI+1],2
            mov RBX,RSI
            je .L_420650
.L_42062c:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_420740

            add RSP,40
.L_420644:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_420650:

            lea R14,QWORD PTR [RCX+16]
            lea RSI,QWORD PTR [RIP+.L_425b24]
            mov RBP,RDX
            mov R12,RDI
            mov R13,RCX
            mov RDX,R14
            call .L_41c1e0

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,4
            mov ESI,2
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42062c

            cmp BYTE PTR [RSP+11],2
            jne .L_42062c

            lea R15,QWORD PTR [RSP+14]
            mov EDX,10
            mov ESI,1
            mov RDI,RBP
            mov RCX,R15
            call .L_4339f0

            test EAX,EAX
            jne .L_42062c

            cmp BYTE PTR [RSP+15],8
            jne .L_42062c

            movzx EBP,WORD PTR [RSP+12]
            rol BP,8
            movzx EBP,BP
            sar EBP,10
            cmp EBP,63
            je .L_42062c

            movsxd RAX,EBP
            lea RSI,QWORD PTR [R15+2]
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RDI,QWORD PTR [R12+RAX*8+752]
            call .L_408da0

            test AL,AL
            je .L_42062c

            mov ESI,EBP
            mov RDI,R12
            call .L_41c960

            mov RDI,R12
            call .L_433510

            test BYTE PTR [RBX],48
            jne .L_42062c

            lea RDI,QWORD PTR [RAX+216]
            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            call .L_430ae0

            test EAX,EAX
            jne .L_42062c

            lea RSI,QWORD PTR [RIP+.L_425b3c]
            mov RDX,R14
            mov RDI,R12
            call .L_41c1e0

            jmp .L_42062c
.L_420740:

            call __stack_chk_fail@PLT
.L_420745:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420750:

            jmp .L_4205f0
.L_420755:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420760:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_420770:

            movzx EAX,BYTE PTR [RDI+4678]
            cmp AL,254
            je .L_4209e0
.L_42077f:

            movsx EAX,AL
            xor EDX,EDX
            mov BYTE PTR [RBP+5],0
            shl EAX,6
            mov WORD PTR [RBP+3],DX
            mov RDI,RBX
            mov BYTE PTR [RBP+2],AL
            call .L_4171f0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx R12D,BYTE PTR [RBX+RAX*8+789]
            shr R12B,2
            and R12D,15
            cmp DWORD PTR [RBX+12],4
            ja .L_420815

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_425c54]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_4207cb:

            movzx EAX,BYTE PTR [RBX+46]
            cmp AL,2
            je .L_420a99

            cmp AL,3
            je .L_420aa6

            cmp AL,1
            jne .L_4207eb

            add BYTE PTR [RBP+5],1
            movzx EAX,BYTE PTR [RBX+46]
.L_4207eb:

            sub EAX,1
            mov EDX,16
            cmp AL,2
            ja .L_420805

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            movzx EDX,BYTE PTR [RDX+RAX*1]
.L_420805:

            add R12D,EDX
            mov EAX,16
            cmp R12B,16
            cmova R12D,EAX
.L_420815:

            mov BYTE PTR [RBP+8],0
            xor EAX,EAX
            jmp .L_420842
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420820:

            cmp DL,3
            je .L_4208e0

            cmp DL,1
            jne .L_420838

            add BYTE PTR [RBP+5],1
            nop
            nop
            nop
            nop
            nop
            nop
.L_420838:

            add RAX,1
            cmp RAX,63
            je .L_4208b6
.L_420842:

            movsxd RDX,EAX
            mov ECX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            test BYTE PTR [RBX+RDX*8+789],64
            je .L_420859

            add BYTE PTR [RBP+8],1
.L_420859:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDI,QWORD PTR [RBX+RDX*8]
            movzx EDX,BYTE PTR [RDI+778]
            and EDX,7
            cmp DL,7
            jne .L_420838

            movzx EDX,BYTE PTR [RBX+4669]
            cmp EDX,ECX
            je .L_420838

            movzx EDX,BYTE PTR [RDI+789]
            lea RSI,QWORD PTR [RAX+RAX*4]
            shl RSI,3
            mov ECX,EDX
            movzx EDX,BYTE PTR [RBX+RSI*1+782]
            and ECX,3
            cmp DL,CL
            cmova EDX,ECX
            cmp DL,2
            jne .L_420820

            add RAX,1
            add BYTE PTR [RBP+4],1
            cmp RAX,63
            jne .L_420842
.L_4208b6:

            mov BYTE PTR [RBP+6],R12B
            movzx EAX,BYTE PTR [RBX+744]
            mov BYTE PTR [RBP+11],1
            mov BYTE PTR [RBP+7],AL
            mov EAX,5
            mov WORD PTR [RBP+9],AX
            add RSP,8
.L_4208d5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4208e0:

            add BYTE PTR [RBP+3],1
            jmp .L_420838
.L_4208e9:

            mov RDI,RBX
            mov R13D,16
            call .L_4171f0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+788]
            cmp AL,62
            ja .L_420933

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_420933

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_420ab3
.L_420933:

            mov RDI,RBX
            call .L_4171f0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            cmp BYTE PTR [RBX+RAX*8+788],62
            jbe .L_420a45
.L_420950:

            mov RDI,RBX
            mov R12D,16
            call .L_4171f0

            cmp AL,62
            ja .L_420815

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_420815

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            jne .L_420815

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_420815

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            movzx ECX,BYTE PTR [RDX+RAX*1]
            cmp CL,16
            cmovbe R12D,ECX
            jmp .L_420815
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4209d8:

            xor R12D,R12D
            jmp .L_420815
.L_4209e0:

            movzx EDI,BYTE PTR [RDI+3272]
            test EDI,EDI
            mov R8D,EDI
            je .L_420a25

            xor EAX,EAX
            xor ESI,ESI
            nop
            nop
            nop
            nop
            nop
            nop
.L_4209f8:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            movzx EDX,BYTE PTR [RBX+RDX*8+3306]
            and EDX,7
            cmp DL,7
            sete DL
            add EAX,1
            add ESI,EDX
            cmp EDI,EAX
            jne .L_4209f8

            movzx ESI,SIL
            sub EDI,ESI
.L_420a25:

            movzx EDX,R8B
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            movzx EAX,AL
            cmp EAX,EDI
            setg AL
            neg EAX
            jmp .L_42077f
.L_420a45:

            mov RDI,RBX
            call .L_4171f0

            cmp AL,62
            mov ESI,16
            ja .L_420a7b

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_420a7b

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_420aef
.L_420a7b:

            add R12D,R13D
            cmp R12B,SIL
            ja .L_420950

            cmp R12B,16
            mov EAX,16
            cmova R12D,EAX
            jmp .L_420815
.L_420a99:

            add BYTE PTR [RBP+4],1
            movzx EAX,BYTE PTR [RBX+46]
            jmp .L_4207eb
.L_420aa6:

            add BYTE PTR [RBP+3],1
            movzx EAX,BYTE PTR [RBX+46]
            jmp .L_4207eb
.L_420ab3:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_420933

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            movzx R13D,BYTE PTR [RDX+RAX*1]
            jmp .L_420933
.L_420aef:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_420a7b

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            movzx ESI,BYTE PTR [RDX+RAX*1]
            jmp .L_420a7b
.L_420b2a:

            lea RCX,QWORD PTR [RIP+.L_425da0]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,4589
            call __assert_fail@PLT
.L_420b49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420b50:

            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,40
.L_420b59:

            lea RBX,QWORD PTR [RSP+12]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,2575
            mov WORD PTR [RSP+12],AX
            call .L_420760

            mov EDX,12
            mov RSI,RBX
            mov RDI,RBP
            call .L_403d80

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_420ba7

            add RSP,40
.L_420ba4:

            pop RBX
            pop RBP
            ret 
.L_420ba7:

            call __stack_chk_fail@PLT
.L_420bac:

            nop
            nop
            nop
            nop
.L_420bb0:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R13,RSI
            push RBX
            mov RBP,RDI
            mov R12,RDX
            sub RSP,32
.L_420bc8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_417500

            test RAX,RAX
            je .L_420c05

            or BYTE PTR [RAX+78],64
            mov EDX,10
            mov RSI,RAX
            mov RDI,RBP
            mov RBX,RAX
            call .L_417540

            test EAX,EAX
            je .L_420c30
.L_420bfd:

            mov RDI,RBX
            call .L_403400
.L_420c05:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_420d81

            add RSP,32
.L_420c1f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420c30:

            mov RSI,RBX
            mov RDI,RBP
            call .L_4175c0

            test EAX,EAX
            jne .L_420bfd

            mov RSI,RBX
            mov RDI,RBP
            call .L_417920

            test EAX,EAX
            jne .L_420bfd

            mov RSI,RBX
            mov RDI,RBP
            call .L_417800

            test EAX,EAX
            jne .L_420bfd

            mov RSI,RBX
            mov RDI,RBP
            call .L_417860

            test EAX,EAX
            jne .L_420bfd

            movzx ECX,BYTE PTR [R12+1]
            lea RDX,QWORD PTR [R12+2]
            mov RSI,RBX
            mov RDI,RBP
            call .L_417790

            test EAX,EAX
            jne .L_420bfd

            mov RDI,R13
            call .L_42e0e0

            lea RDX,QWORD PTR [R13+96]
            mov ECX,8
            mov RSI,RBX
            mov RDI,RBP
            call .L_417720

            test EAX,EAX
            jne .L_420bfd

            mov RDI,RBP
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            lea RDI,QWORD PTR [R13+28]
            mov R12D,EAX
            call .L_4141d0

            movsx EDI,R12B
            movsx ESI,AL
            call .L_414400

            mov RSI,RBX
            movzx EDX,AL
            mov RDI,RBP
            call .L_417b10

            test EAX,EAX
            jne .L_420bfd

            mov RSI,RBX
            mov RDI,RBP
            call .L_420b50

            test EAX,EAX
            jne .L_420bfd

            mov RSI,RBX
            mov RDI,RBP
            call .L_417b60

            test EAX,EAX
            jne .L_420bfd

            mov R12,RSP
            mov ECX,14
            mov RSI,R13
            lea RDX,QWORD PTR [R12+2]
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,R12
            mov WORD PTR [RSP],33022
            call .L_4101d0

            test R14B,R14B
            je .L_420d86

            call .L_401460

            movzx EAX,AX
            mov ECX,500
            cdq 
            idiv ECX
            lea EAX,DWORD PTR [RDX+1]
.L_420d51:

            movzx ECX,AX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_418bc0

            test EAX,EAX
            jne .L_420bfd

            lea RSI,QWORD PTR [RIP+.L_425b57]
            mov RDX,R12
            mov RDI,RBP
            call .L_41c1e0

            jmp .L_420c05
.L_420d81:

            call __stack_chk_fail@PLT
.L_420d86:

            call .L_401460

            movzx EAX,AX
            mov ECX,1000
            cdq 
            idiv ECX
            lea EAX,DWORD PTR [RDX+1]
            jmp .L_420d51
.L_420d9b:

            nop
            nop
            nop
            nop
            nop
.L_420da0:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            lea RBP,QWORD PTR [RDX+16]
            mov RBX,RDI
            mov R14D,13
            sub RSP,56
.L_420dc2:

            mov R13,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+30],SI
            lea RSI,QWORD PTR [RIP+.L_425b6d]
            mov RDX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+15],CX
            mov WORD PTR [RSP+18],AX
            call .L_41c1e0

            test BYTE PTR [RBX+4668],1
            je .L_421028

            test BYTE PTR [RBX+56],2
            je .L_421028

            call .L_401240

            sub EAX,DWORD PTR [RBX+748]
            mov EDX,274877907
            movzx ECX,BYTE PTR [RBX+4660]
            mul EDX
            shr EDX,6
            cmp ECX,EDX
            jbe .L_421050

            cmp DWORD PTR [RBX+12],4
            je .L_420ef0

            mov RDI,RBX
            call .L_4171f0

            cmp AL,62
            ja .L_420e70

            cmp AL,BYTE PTR [RBX+4669]
            movzx EDX,AL
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDX,QWORD PTR [RBX+RDX*8+752]
            je .L_420e70

            movzx EAX,BYTE PTR [RDX+26]
            and EAX,7
            cmp AL,7
            je .L_4210f0
.L_420e70:

            cmp DWORD PTR [RBX+12],2
            je .L_421070
.L_420e7a:

            mov RDI,RBX
            call .L_4171f0

            movzx EAX,AL
            mov RDI,RBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx R14D,BYTE PTR [RBX+RAX*8+789]
            call .L_4171f0

            movzx EAX,AL
            mov EDX,16
            lea RAX,QWORD PTR [RAX+RAX*4]
            shr R14B,2
            movzx EAX,BYTE PTR [RBX+RAX*8+788]
            and R14D,15
            cmp AL,62
            ja .L_420ee3

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx ESI,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_420ee3

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_4210a0
.L_420ee3:

            add R14D,EDX
            cmp R14D,15
            jg .L_421050
.L_420ef0:

            lea R15,QWORD PTR [RSP+22]
            mov RDI,RBP
            mov RSI,R15
            call .L_4101e0

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov R14D,EAX
            jne .L_421028

            cmp BYTE PTR [RSP+19],2
            jne .L_421060

            movzx EAX,WORD PTR [RSP+20]
            rol AX,8
            cmp AX,1
            jbe .L_421060

            lea RCX,QWORD PTR [RSP+15]
            mov EDX,3
            mov ESI,14
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov R14D,EAX
            jne .L_421028

            cmp BYTE PTR [RSP+16],1
            jne .L_421060

            cmp DWORD PTR [RBX+12],4
            ja .L_420f91

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_425c68]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_420f86:

            test BYTE PTR [RSP+17],64
            je .L_421028
.L_420f91:

            lea RBP,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,3
            mov RDI,R12
            mov RCX,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42112c

            movzx EAX,BYTE PTR [RSP+31]
            sub EAX,4
            cmp AL,4
            ja .L_421060

            mov RSI,R15
            mov RDI,RBX
            call .L_41cef0

            test RAX,RAX
            mov R12,RAX
            je .L_421139
.L_420fda:

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_421002

            sub AL,1
            je .L_421002

            call .L_401240

            mov DWORD PTR [R12+92],5
            mov DWORD PTR [R12+8],EAX
.L_421002:

            movzx ECX,BYTE PTR [RSP+17]
            mov RDX,RBP
            mov RSI,R12
            mov RDI,RBX
            shr CL,6
            xor ECX,1
            and ECX,1
            call .L_420bb0

            mov R14D,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421028:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_421134

            add RSP,56
.L_421043:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_421050:

            mov R14D,2
            jmp .L_421028
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421060:

            mov R14D,6
            jmp .L_421028
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421070:

            mov RDI,RBX
            call .L_4171f0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            xor EAX,60
            test AL,60
            jne .L_420ef0

            jmp .L_420e7a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4210a0:

            lea RAX,QWORD PTR [RSI+RSI*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov ESI,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,SIL
            cmova EAX,ESI
            sub EAX,1
            cmp AL,2
            ja .L_420ee3

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            movzx EDX,BYTE PTR [RDX+RAX*1]
            jmp .L_420ee3
.L_4210d9:

            cmp BYTE PTR [RSP+17],0
            jns .L_421028

            jmp .L_420f91
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4210f0:

            lea RAX,QWORD PTR [RCX+RCX*4]
            movzx EDX,BYTE PTR [RDX+30]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_420e70

            lea RDX,QWORD PTR [RIP+.L_425d30]
            movzx EAX,AL
            cmp BYTE PTR [RDX+RAX*1],15
            jbe .L_420ef0

            jmp .L_420e70
.L_42112c:

            mov R14D,EAX
            jmp .L_421028
.L_421134:

            call __stack_chk_fail@PLT
.L_421139:

            movzx ECX,BYTE PTR [RBX+3272]
            test ECX,ECX
            je .L_421028

            test BYTE PTR [RBX+3306],7
            je .L_421178

            xor EAX,EAX
            jmp .L_42116c
.L_421155:

            movsxd RDX,EAX
            mov RSI,RDX
            shl RSI,4
            add RSI,RDX
            test BYTE PTR [RBX+RSI*8+3306],7
            je .L_42117a
.L_42116c:

            add EAX,1
            cmp EAX,ECX
            jne .L_421155

            jmp .L_421028
.L_421178:

            xor EDX,EDX
.L_42117a:

            imul RDX,RDX,136
            xor EAX,EAX
            mov ECX,32
            lea R12,QWORD PTR [RBX+RDX*1+3280]
            lea RDX,QWORD PTR [R12+8]
            lea R14,QWORD PTR [R12+28]
            mov RDI,RDX

            rep stosd DWORD PTR [RDI]

            mov RDI,R14
            mov RAX,QWORD PTR [RSP+22]
            mov QWORD PTR [R12],RAX
            call .L_414250

            movsx R13D,BYTE PTR [R13+3]
            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            mov EDX,R13D
            movsx ESI,AL
            mov RDI,R14
            call .L_414260

            movzx EAX,BYTE PTR [R12+26]
            mov BYTE PTR [R12+27],0
            and EAX,120
            or EAX,2
            mov BYTE PTR [R12+26],AL
            jmp .L_420fda
.L_4211f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421200:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            sub RSP,136
.L_42121a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_433510

            mov R15,RAX
            xor EAX,EAX
            mov EDX,19
            mov WORD PTR [RSP+60],AX
            movzx EAX,WORD PTR [R12+58]
            mov RDI,R12
            mov WORD PTR [RSP+62],DX
            mov EDX,2
            mov WORD PTR [RSP+38],AX
            lea RAX,QWORD PTR [RSP+62]
            mov RSI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_403d80

            test EAX,EAX
            mov DWORD PTR [RSP+32],EAX
            jne .L_42136c

            lea RAX,QWORD PTR [RSP+60]
            xor EBP,EBP
            lea RBX,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R15+7520]
            lea R15,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_4212df
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4212a8:

            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov EDX,17
            mov RSI,R15
            mov RDI,R12
            mov BYTE PTR [RSP+96],0
            movups XMMWORD PTR [RSP+97],XMM0
            call .L_403d80

            test EAX,EAX
            jne .L_421368
.L_4212d0:

            movzx EAX,BYTE PTR [RSP+96]
            sar AL,7
            and EAX,4294967288
            lea EBP,DWORD PTR [RBP+RAX*1+17]
.L_4212df:

            mov RDI,R13
            call .L_4334e0

            mov RDX,QWORD PTR [RSP+8]
            mov RCX,RBX
            mov RSI,RAX
            mov RDI,R14
            call .L_42dd90

            test EAX,EAX
            jne .L_421398

            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            jne .L_4212a8

            mov RDX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+24]
            mov RSI,RBX
            call .L_428150

            test EAX,EAX
            jne .L_4212a8

            movzx EAX,BYTE PTR [RSP+73]
            mov RDI,RBX
            or EAX,4294967168
            mov BYTE PTR [RSP+96],AL
            call .L_4101b0

            movsx EDX,BYTE PTR [RSP+96]
            mov RAX,QWORD PTR [RAX]
            mov RSI,R15
            mov RDI,R12
            mov QWORD PTR [RSP+97],RAX
            sar EDX,31
            and EDX,4294967288
            add EDX,17
            call .L_403d80

            test EAX,EAX
            je .L_4212d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421368:

            mov DWORD PTR [RSP+32],EAX
.L_42136c:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+32]
            jne .L_4213b6

            add RSP,136
.L_421387:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421398:

            movzx ESI,WORD PTR [RSP+38]
            mov RCX,QWORD PTR [RSP+40]
            mov EDX,2
            mov RDI,R12
            mov BYTE PTR [RSP+63],BPL
            call .L_403b10

            jmp .L_42136c
.L_4213b6:

            call __stack_chk_fail@PLT
.L_4213bb:

            nop
            nop
            nop
            nop
            nop
.L_4213c0:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            mov EBP,R8D
            sub RSP,24
.L_4213da:

            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP],R9
            call .L_417500

            test RAX,RAX
            je .L_421488

            mov EDX,14
            mov RSI,RAX
            mov RDI,R13
            mov R12,RAX
            call .L_417540

            test EAX,EAX
            jne .L_421480

            test BPL,BPL
            je .L_4214c5

            movzx EBP,BPL
            lea EAX,DWORD PTR [RBP-1]
            lea RBP,QWORD PTR [RIP+.L_425c7c]
            lea RBX,QWORD PTR [R15+RAX*1+1]
            nop
            nop
            nop
            nop
.L_421428:

            cmp BYTE PTR [R15],19
            ja .L_4214b8

            movzx EAX,BYTE PTR [R15]
            movsxd RAX,DWORD PTR [RBP+RAX*4]
            add RAX,RBP
            jmp RAX
.L_421440:

            movzx EDX,BYTE PTR [R14+26]
            mov RSI,R12
            mov RDI,R13
            shr DL,3
            not EDX
            and EDX,1
            call .L_4179e0

            test EAX,EAX
            jne .L_421480

            mov RSI,R12
            mov RDI,R13
            call .L_417bb0

            test EAX,EAX
            jne .L_421480

            mov RSI,R12
            mov RDI,R13
            call .L_417c50

            test EAX,EAX
            je .L_4214b8

            nop
            nop
            nop
            nop
            nop
            nop
.L_421480:

            mov RDI,R12
            call .L_403400
.L_421488:

            add RSP,24
.L_42148c:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4214a0:

            mov RDX,R14
            mov RSI,R12
            mov RDI,R13
            call .L_421200

            test EAX,EAX
            jne .L_421480

            nop
            nop
            nop
            nop
            nop
            nop
.L_4214b8:

            add R15,1
            cmp RBX,R15
            jne .L_421428
.L_4214c5:

            mov RBX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R13
            add RBX,16
            mov RDX,RBX
            call .L_4180d0

            test EAX,EAX
            jne .L_421480

            test R14,R14
            je .L_421603

            movzx ECX,WORD PTR [R14+24]
            lea RSI,QWORD PTR [RIP+.L_45fd50-236616]
            mov RDX,RBX
            mov RDI,R13
            call .L_41c1f0

            jmp .L_421488
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421508:

            mov EDX,1
            mov RSI,R12
            mov RDI,R13
            call .L_417630

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421528:

            mov RSI,R12
            mov RDI,R13
            call .L_417920

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_421540:

            mov RSI,R12
            mov RDI,R13
            call .L_417860

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421560:

            mov RSI,R12
            mov RDI,R13
            call .L_417800

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421580:

            mov RAX,QWORD PTR [RSP]
            mov RSI,R12
            mov RDI,R13
            movzx ECX,BYTE PTR [RAX+1]
            lea RDX,QWORD PTR [RAX+2]
            call .L_417790

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4215a8:

            mov EDX,DWORD PTR [R14+92]
            mov RSI,R12
            mov RDI,R13
            call .L_4176d0

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4215c8:

            mov RSI,R12
            mov RDI,R13
            call .L_4175c0

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
.L_4215e0:

            movzx EDX,BYTE PTR [R14+26]
            mov RSI,R12
            mov RDI,R13
            shr DL,3
            and EDX,15
            call .L_417680

            test EAX,EAX
            je .L_4214b8

            jmp .L_421480
.L_421603:

            lea RSI,QWORD PTR [RIP+.L_45fd50-236616]
            mov RDX,RBX
            mov RDI,R13
            call .L_41c1e0

            jmp .L_421488
.L_42161a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_421620:

            movzx EAX,BYTE PTR [RDI+744]
            push R15
            lea R9,QWORD PTR [RDI+752]
            push R14
            mov QWORD PTR [RSI+3],0
            xor EDX,EDX
            push R13
            xor R14D,R14D
            push R12
            push RBP
            mov EBP,128
            push RBX
.L_42164a:

            mov BYTE PTR [RSI+2],AL
            xor EBX,EBX
            jmp .L_42172d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_421658:

            movzx R8D,BYTE PTR [R9+26]
            movzx R11D,BYTE PTR [R9+36]
            and R8D,7
            cmp R8B,7
            je .L_421780
.L_421670:

            xor R10D,R10D
            cmp R11B,62
            mov R8D,16
            ja .L_4216d7
.L_42167f:

            lea R10,QWORD PTR [RAX+RAX*4]
            mov R13D,16
            movzx R10D,BYTE PTR [RDI+R10*8+789]
            shr R10B,2
            and R10D,15
            cmp R12B,R11B
            je .L_4216c2

            movzx R12D,R11B
            lea R11,QWORD PTR [R11+R11*4]
            lea R15,QWORD PTR [RDI+R11*8+752]
            movzx R11D,BYTE PTR [R15+26]
            and R11D,7
            cmp R11B,7
            je .L_4217c8
.L_4216c2:

            add R10D,R13D
            cmp R8B,R10B
            cmova R8D,R10D
.L_4216cc:

            cmp R8B,15
            mov R10D,R8D
            cmova R10D,R14D
.L_4216d7:

            movzx R8D,BYTE PTR [RSI+RCX*1+11]
            lea RAX,QWORD PTR [RAX+RAX*4]
            and R8D,4294967280
            or R8D,R10D
            mov BYTE PTR [RSI+RCX*1+11],R8B
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            and R8D,63
            shl EAX,6
            or EAX,R8D
            mov BYTE PTR [RSI+RCX*1+11],AL
            movzx R8D,BYTE PTR [R9+30]
            and EAX,4294967247
            shl R8D,4
            and R8D,48
            or EAX,R8D
            mov BYTE PTR [RSI+RCX*1+11],AL
.L_42171a:

            add EBX,1
.L_42171d:

            add EDX,1
            add R9,40
            cmp EDX,63
            je .L_421810
.L_42172d:

            movsxd RAX,EDX
            lea RCX,QWORD PTR [RAX+RAX*4]
            lea R10,QWORD PTR [RDI+RCX*8+784]
            test BYTE PTR [R10+5],64
            je .L_42171d

            mov R8D,EDX
            mov ECX,EDX
            mov R15D,EBP
            shr R8B,3
            and ECX,7
            and R8D,31
            sar R15D,CL
            movzx ECX,BL
            or BYTE PTR [RSI+R8*1+3],R15B
            movzx R12D,BYTE PTR [RDI+4669]
            cmp R12B,DL
            jne .L_421658

            mov BYTE PTR [RSI+RCX*1+11],1
            jmp .L_42171a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421780:

            movzx R8D,BYTE PTR [R10+5]
            mov R10D,R8D
            movzx R8D,BYTE PTR [R9+30]
            and R10D,3
            cmp R8B,R10B
            cmova R8D,R10D
            sub R8D,1
            cmp R8B,2
            ja .L_421670

            lea R15,QWORD PTR [RIP+.L_425d30]
            movzx R8D,R8B
            cmp R11B,62
            movzx R8D,BYTE PTR [R15+R8*1]
            ja .L_4216cc

            jmp .L_42167f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4217c8:

            lea R11,QWORD PTR [R12+R12*4]
            movzx R11D,BYTE PTR [RDI+R11*8+789]
            and R11D,3
            mov R12D,R11D
            movzx R11D,BYTE PTR [R15+30]
            cmp R11B,R12B
            cmova R11D,R12D
            sub R11D,1
            cmp R11B,2
            ja .L_4216c2

            lea R15,QWORD PTR [RIP+.L_425d30]
            movzx R11D,R11B
            movzx R13D,BYTE PTR [R15+R11*1]
            jmp .L_4216c2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421810:

            add EBX,9
            mov BYTE PTR [RSI+1],BL
            pop RBX
.L_421817:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_421821:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421830:

            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,104
.L_421839:

            mov RBX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,18441
            mov WORD PTR [RSP],AX
            call .L_421620

            movzx EAX,BYTE PTR [RSP+1]
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_421884

            add RSP,104
.L_421881:

            pop RBX
            pop RBP
            ret 
.L_421884:

            call __stack_chk_fail@PLT
.L_421889:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421890:

            push R12
            push RBP
            push RBX
            sub RSP,48
            mov ECX,DWORD PTR [RDI+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test ECX,ECX
            jne .L_4218e0

            test BYTE PTR [RDI+4668],2
            mov RBX,RDI
            je .L_4218e8
.L_4218bb:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4219cc

            add RSP,48
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4218e0:

            xor EAX,EAX
            jmp .L_4218bb
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4218e8:

            call .L_417500

            test RAX,RAX
            mov RBP,RAX
            je .L_421920

            mov EDX,4
            mov RSI,RAX
            mov RDI,RBX
            call .L_417540

            test EAX,EAX
            je .L_421930
.L_421909:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_4218bb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421920:

            mov EAX,3
            jmp .L_4218bb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421930:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4175c0

            test EAX,EAX
            jne .L_421909

            mov RSI,RBP
            mov RDI,RBX
            call .L_417920

            test EAX,EAX
            jne .L_421909

            mov EAX,DWORD PTR [RBX+12]
            cmp EAX,1
            jbe .L_4219d1

            sub EAX,3
            cmp EAX,1
            ja .L_42196d

            mov RSI,RBP
            mov RDI,RBX
            call .L_421830

            test EAX,EAX
            jne .L_421909
.L_42196d:

            lea R12,QWORD PTR [RSP+16]
            mov EDX,256
            mov EAX,767
            mov WORD PTR [RSP+30],DX
            mov RSI,RBP
            mov RDI,RBX
            mov RDX,R12
            mov QWORD PTR [RSP+18],0
            mov DWORD PTR [RSP+26],0
            mov WORD PTR [RSP+16],AX
            call .L_4180d0

            test EAX,EAX
            jne .L_421909

            lea RSI,QWORD PTR [RIP+.L_425b84]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_4218bb
.L_4219cc:

            call __stack_chk_fail@PLT
.L_4219d1:

            lea RCX,QWORD PTR [RIP+.L_426000]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,578
            call __assert_fail@PLT
.L_4219f0:

            test BYTE PTR [RDI+56],2
            jne .L_421a00

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421a00:

            sub RSP,8
            call .L_421890

            mov EAX,1
            add RSP,8
            ret 
.L_421a13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421a20:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a70

            xor EDX,EDX
            test BYTE PTR [RAX+56],2
            je .L_421a46

            mov RDI,RAX
            call .L_421890

            mov EDX,1
.L_421a46:

            mov EAX,EDX
            add RSP,8
            ret 
.L_421a4d:

            nop
            nop
            nop
.L_421a50:

            push R15
            push R14
            mov R15D,1
            push R13
            push R12
            mov R13,R8
            push RBP
            push RBX
            mov R12,RSI
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,24
.L_421a70:

            mov RAX,QWORD PTR [RSI+40]
            test RDX,RDX
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+8],RAX
            je .L_421a96

            movzx EAX,BYTE PTR [RDX+26]
            xor R15D,R15D
            and EAX,7
            cmp AL,7
            setne R15B
            add R15D,1
.L_421a96:

            mov RDI,RBX
            call .L_417500

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_421acb

            mov EDX,R15D
            mov RSI,R14
            mov RDI,RBX
            call .L_417540

            test EAX,EAX
            je .L_421ae0
.L_421abd:

            mov RDI,R14
            mov DWORD PTR [RSP],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP]
.L_421acb:

            add RSP,24
.L_421acf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421ae0:

            mov RSI,R14
            mov RDI,RBX
            call .L_417b60

            test EAX,EAX
            jne .L_421abd

            mov RSI,R14
            mov RDI,RBX
            call .L_4175c0

            test EAX,EAX
            jne .L_421abd

            movzx ECX,BYTE PTR [R13+1]
            lea RDX,QWORD PTR [R13+2]
            mov RSI,R14
            mov RDI,RBX
            call .L_417790

            test EAX,EAX
            jne .L_421abd

            mov RSI,R14
            mov RDI,RBX
            call .L_417800

            test EAX,EAX
            jne .L_421abd

            mov RSI,R14
            mov RDI,RBX
            call .L_417860

            test EAX,EAX
            jne .L_421abd

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBX
            movsx R13D,BYTE PTR [RAX+3]
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            mov ESI,R13D
            movsx EDI,AL
            call .L_414400

            mov RSI,R14
            movzx EDX,AL
            mov RDI,RBX
            call .L_417b10

            test EAX,EAX
            jne .L_421abd

            test RBP,RBP
            je .L_421cc5

            test WORD PTR [RBP+24],511
            je .L_421cd8
.L_421b88:

            mov RAX,QWORD PTR [RSP]
            cmp BYTE PTR [RAX+1],0
            je .L_421bf0
.L_421b92:

            mov RAX,QWORD PTR [RSP]
            xor R15D,R15D
            lea R13,QWORD PTR [RAX+2]
.L_421b9d:

            movzx EAX,R15B
            movzx EAX,BYTE PTR [R13+RAX*1]
            cmp AL,10
            je .L_421bc1

            cmp AL,16
            je .L_421bdd

            cmp AL,9
            je .L_421cad
.L_421bb7:

            mov EAX,2
            jmp .L_421abd
.L_421bc1:

            test RBP,RBP
            je .L_421bb7

            movzx EDX,WORD PTR [RBP+24]
            mov RSI,R14
            mov RDI,RBX
            call .L_4178c0

            test EAX,EAX
            jne .L_421abd
.L_421bdd:

            mov RAX,QWORD PTR [RSP]
            add R15D,1
            cmp R15B,BYTE PTR [RAX+1]
            jb .L_421b9d

            test RBP,RBP
            je .L_421c53
.L_421bf0:

            movzx EAX,BYTE PTR [RBP+26]
            and EAX,7
            cmp AL,7
            je .L_421c53

            mov RDI,RBP
            call .L_42dce0

            lea RDX,QWORD PTR [RBP+12]
            mov ECX,8
            mov RSI,R14
            mov RDI,RBX
            call .L_417720

            test EAX,EAX
            jne .L_421abd

            lea RDX,QWORD PTR [RIP+.L_4260da]
            mov ECX,1
            mov RSI,R14
            mov RDI,RBX
            call .L_417a50

            test EAX,EAX
            jne .L_421abd

            call .L_401240

            mov DWORD PTR [RBP+8],EAX
            movzx EAX,BYTE PTR [RBP+26]
            and EAX,4294967288
            or EAX,5
            mov BYTE PTR [RBP+26],AL
.L_421c53:

            mov RDI,R12
            add R12,16
            call .L_40ff70

            test AL,AL
            je .L_421cf0

            call .L_401460

            movzx EAX,AX
            mov ECX,1000
            mov RSI,R14
            cdq 
            mov RDI,RBX
            idiv ECX
            lea ECX,DWORD PTR [RDX+1]
            mov RDX,R12
            call .L_418bc0

            test EAX,EAX
            jne .L_421abd

            lea RSI,QWORD PTR [RIP+.L_425b97]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP]
            jmp .L_421acb
.L_421cad:

            mov RSI,R14
            mov RDI,RBX
            call .L_421830

            test EAX,EAX
            je .L_421bdd

            jmp .L_421abd
.L_421cc5:

            mov RAX,QWORD PTR [RSP]
            cmp BYTE PTR [RAX+1],0
            jne .L_421b92

            jmp .L_421c53
.L_421cd8:

            mov RSI,R14
            mov RDI,RBX
            call .L_417920

            test EAX,EAX
            jne .L_421abd

            jmp .L_421b88
.L_421cf0:

            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_4180d0

            test EAX,EAX
            jne .L_421abd

            lea RSI,QWORD PTR [RIP+.L_425ba9]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_41c1e0

            mov EAX,DWORD PTR [RSP]
            jmp .L_421acb
.L_421d23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421d30:

            push RBX
            mov RBX,RSI
            call .L_433510

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+1080]
            pop RBX
            jmp .L_40a4a0
.L_421d49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421d50:

            push RBX
            mov RBX,RSI
            call .L_433510

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+1208]
            pop RBX
            jmp .L_40a4a0
.L_421d69:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421d70:

            xor EAX,EAX
            xor R8D,R8D
            nop
            nop
            nop
.L_421d78:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RSI,QWORD PTR [RDI+RDX*8]
            movzx EDX,BYTE PTR [RSI+778]
            and EDX,7
            cmp DL,7
            jne .L_421db9

            lea RCX,QWORD PTR [RAX+RAX*4]
            movzx EDX,BYTE PTR [RSI+789]
            shl RCX,3
            movzx ESI,BYTE PTR [RDI+RCX*1+782]
            and EDX,3
            cmp SIL,DL
            cmovbe EDX,ESI
            cmp DL,2
            sbb R8B,255
.L_421db9:

            add RAX,1
            cmp RAX,63
            jne .L_421d78

            cmp R8B,6
            seta AL
            ret 
.L_421dcb:

            nop
            nop
            nop
            nop
            nop
.L_421dd0:

            push RBP
            movzx R10D,BYTE PTR [RDI+4669]
            xor EAX,EAX
            push RBX
.L_421ddc:

            xor R11D,R11D
            mov EBX,128
            jmp .L_421dfe
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421df0:

            add RAX,1
            cmp RAX,63
            je .L_421eb2
.L_421dfe:

            cmp R10B,AL
            mov ECX,EAX
            je .L_421ea0

            movsxd R8,EAX
            lea R8,QWORD PTR [R8+R8*4]
            lea R9,QWORD PTR [RDI+R8*8]
            movzx R8D,BYTE PTR [R9+778]
            and R8D,7
            cmp R8B,7
            jne .L_421df0

            cmp DL,AL
            je .L_421ea0

            lea RBP,QWORD PTR [RAX+RAX*4]
            movzx R8D,BYTE PTR [R9+789]
            shl RBP,3
            movzx R9D,BYTE PTR [RDI+RBP*1+782]
            and R8D,3
            cmp R9B,R8B
            cmovbe R8D,R9D
            cmp R8B,1
            jbe .L_421ea0

            mov R9D,EAX
            and ECX,7
            mov EBP,EBX
            shr R9B,3
            sar EBP,CL
            and R9D,31
            movzx R9D,BYTE PTR [RSI+R9*1+3]
            test R9D,EBP
            je .L_421e95

            movzx ECX,R11B
            movzx R9D,BYTE PTR [RSI+RCX*1+11]
            mov ECX,R9D
            shr R9B,6
            shr CX,4
            and ECX,3
            cmp CL,R9B
            cmova ECX,R9D
            cmp R8B,CL
            jbe .L_421ea0
.L_421e95:

            xor EAX,EAX
            pop RBX
.L_421e98:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421ea0:

            add RAX,1
            add R11D,1
            cmp RAX,63
            jne .L_421dfe
.L_421eb2:

            mov EAX,1
            pop RBX
            pop RBP
            ret 
.L_421eba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_421ec0:

            movzx ESI,BYTE PTR [RDI+3272]
            test SIL,SIL
            je .L_421f38

            movzx EDX,BYTE PTR [RDI+3306]
            and EDX,7
            cmp DL,3
            seta AL
            cmp DL,1
            sete DL
            or AL,DL
            jne .L_421f31

            sub ESI,1
            mov ECX,1
            movzx ESI,SIL
            add RSI,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421f00:

            cmp RSI,RCX
            je .L_421f38

            movsxd RDX,ECX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EDX,BYTE PTR [RDI+RAX*8+3306]
            and EDX,7
            cmp DL,3
            seta AL
            cmp DL,1
            sete DL
            add RCX,1
            or AL,DL
            je .L_421f00
.L_421f31:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421f38:

            xor EAX,EAX
            ret 
.L_421f3b:

            nop
            nop
            nop
            nop
            nop
.L_421f40:

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
.L_421f48:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_421f48

            movzx R10D,BYTE PTR [RDI+4662]
            xor EAX,EAX
            cmp R10B,CL
            jae .L_421fd4

            movzx EAX,BYTE PTR [RDI+3272]
            test AL,AL
            je .L_421fd6

            lea R9D,DWORD PTR [RAX-1]
            xor R8D,R8D
            xor EAX,EAX
            movzx R9D,R9B
            add R9D,1
            nop
            nop
            nop
.L_421f98:

            movsxd RSI,EAX
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            movzx EDX,BYTE PTR [RDI+RDX*8+3306]
            and EDX,7
            cmp DL,7
            sete DL
            add EAX,1
            add R8D,EDX
            cmp R9D,EAX
            jne .L_421f98

            movzx R8D,R8B
.L_421fc5:

            movzx ECX,CL
            sub ECX,R10D
            lea EAX,DWORD PTR [RCX+RCX*2]
            cmp EAX,R8D
            setg AL
.L_421fd4:

            ret 
.L_421fd6:

            xor R8D,R8D
            jmp .L_421fc5
.L_421fdb:

            nop
            nop
            nop
            nop
            nop
.L_421fe0:

            xor EDX,EDX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_421fe8:

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea R8,QWORD PTR [RDI+RCX*8]
            movzx ECX,BYTE PTR [R8+778]
            and ECX,7
            cmp CL,7
            jne .L_42202b

            lea RSI,QWORD PTR [RDX+RDX*4]
            movzx ECX,BYTE PTR [R8+789]
            shl RSI,3
            movzx R8D,BYTE PTR [RDI+RSI*1+782]
            and ECX,3
            cmp R8B,CL
            cmovbe ECX,R8D
            cmp CL,2
            sbb AL,255
.L_42202b:

            add RDX,1
            cmp RDX,63
            jne .L_421fe8

            ret 
.L_422037:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422040:

            movzx EAX,BYTE PTR [RDI+4678]
            ret 
.L_422048:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422050:

            lea EDX,DWORD PTR [RSI+2]
            mov EAX,7
            cmp DL,3
            ja .L_422066

            mov BYTE PTR [RDI+4678],SIL
            xor EAX,EAX
.L_422066:

            ret 
.L_422068:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422070:

            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-3]
            mov EAX,13
            cmp EDX,1
            ja .L_4220f5

            cmp BYTE PTR [RDI+3272],0
            je .L_4220f0

            xor EDX,EDX
            mov EAX,23
.L_422090:

            movzx R8D,DL
            mov RCX,R8
            shl RCX,4
            add RCX,R8
            movzx ECX,BYTE PTR [RDI+RCX*8+3306]
            mov R8D,ECX
            and R8D,7
            cmp R8B,7
            jne .L_4220e0

            shr CL,3
            and ECX,2
            jne .L_4220e0

            movzx ECX,DL
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            mov ECX,DWORD PTR [RDI+RAX*8+3372]
            xor EAX,EAX
            cmp DWORD PTR [RSI],ECX
            jae .L_4220e0

            mov DWORD PTR [RSI],ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4220e0:

            add EDX,1
            cmp BYTE PTR [RDI+3272],DL
            ja .L_422090

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4220f0:

            mov EAX,23
.L_4220f5:

            ret 
.L_4220f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422100:

            push R12
            push RBP
            mov EBP,ESI
            push RBX
            mov RBX,RDI
            sub RSP,48
.L_42210d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+4640],0
            je .L_422144

            mov R12,RSP
            mov RSI,RDX
            mov RDX,R12
            call .L_41f5e0

            test EAX,EAX
            jne .L_4221ac

            mov RSI,R12
            mov EDI,EBP
            call QWORD PTR [RBX+4640]
.L_422144:

            test EBP,EBP
            je .L_422190

            cmp EBP,1
            je .L_422170
.L_42214d:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4221a7

            add RSP,48
.L_422161:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422170:

            mov RDI,RBX
            call .L_433530

            mov ESI,2048
            mov RDI,RAX
            call .L_402d80

            jmp .L_42214d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422190:

            mov RDI,RBX
            call .L_433530

            mov ESI,1024
            mov RDI,RAX
            call .L_402d80

            jmp .L_42214d
.L_4221a7:

            call __stack_chk_fail@PLT
.L_4221ac:

            lea RCX,QWORD PTR [RIP+.L_425d40]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425bba]
            mov EDX,5022
            call __assert_fail@PLT
.L_4221cb:

            nop
            nop
            nop
            nop
            nop
.L_4221d0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            sub RSP,8
.L_4221e4:

            call .L_433510

            mov R15,RAX
            mov EAX,DWORD PTR [R14+12]
            cmp EAX,2
            je .L_4222a0

            jb .L_42227a

            cmp EAX,4
            ja .L_42227a

            test WORD PTR [R12+24],511
            movzx EAX,BYTE PTR [R12+26]
            je .L_4222b8

            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_422358

            cmp AL,1
            je .L_422358
.L_42222b:

            and BYTE PTR [R12+26],248
            lea RDI,QWORD PTR [R15+2256]
            mov RSI,R12
            call .L_414a10

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+7520]
            call .L_42aa60

            test BYTE PTR [R12+26],16
            je .L_42226c

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+10688]
            call .L_412410
.L_42226c:

            movzx ESI,WORD PTR [R12+24]
            mov RDI,R14
            call .L_41f1e0
.L_42227a:

            lea RDI,QWORD PTR [R12+28]
            call .L_414250

            and BYTE PTR [R12+26],248
            add RSP,8
.L_42228e:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4222a0:

            lea RAX,QWORD PTR [R14+16]
            cmp R12,RAX
            jne .L_42227a

            mov RDI,R14
            call .L_417190

            jmp .L_42227a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4222b8:

            and EAX,7
            cmp AL,7
            jne .L_42227a

            and BYTE PTR [R12+37],252
            lea RBX,QWORD PTR [R14+752]
            xor EBP,EBP
            lea R13,QWORD PTR [RIP+.L_425d30]
            call .L_401240

            mov DWORD PTR [R12+8],EAX
            jmp .L_4222fa
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4222e8:

            add RBP,1
            add RBX,40
            cmp RBP,63
            je .L_422398
.L_4222fa:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+36],AL
            jne .L_4222e8

            movsxd RAX,EBP
            mov BYTE PTR [RBX+36],63
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [R14+RAX*8+784]
            movzx EDX,BYTE PTR [RAX+5]
            mov ECX,EDX
            and ECX,4294967235
            mov BYTE PTR [RAX+5],CL
            cmp BYTE PTR [R14+4669],BPL
            je .L_42233b

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,7
            cmp AL,7
            je .L_422370
.L_42233b:

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            ja .L_4222e8

            mov RDI,R14
            call .L_41c470

            jmp .L_4222e8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422358:

            mov RDX,R12
            mov ESI,1
            mov RDI,R14
            call .L_422100

            jmp .L_42222b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_422370:

            movzx EAX,BYTE PTR [RBX+30]
            and EDX,3
            cmp AL,DL
            cmovbe EDX,EAX
            sub EDX,1
            cmp DL,2
            ja .L_42233b

            movzx EDX,DL
            cmp BYTE PTR [R13+RDX*1],15
            jbe .L_4222e8

            jmp .L_42233b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_422398:

            cmp BYTE PTR [R12+36],63
            jne .L_42227a

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_4223ca
.L_4223b0:

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+10688]
            sar ESI,10
            call .L_4123a0

            jmp .L_42227a
.L_4223ca:

            mov RDI,R14
            call .L_41c470

            jmp .L_4223b0
.L_4223d4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4223e0:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_4223e7:

            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RBX+12],3
            mov RBP,RAX
            je .L_42240d

            mov RDI,RBX
            call .L_433530

            mov ESI,4
            mov RDI,RAX
            call .L_402d80
.L_42240d:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_416df0

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],3
            mov DWORD PTR [RBX+60],0
            call .L_433690

            lea RDI,QWORD PTR [RBX+120]
            call .L_433690

            lea RDI,QWORD PTR [RBX+592]
            call .L_433c30

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_422557
.L_422454:

            mov RDI,RBP
            call .L_4112f0

            movzx EDX,BYTE PTR [RBX+4669]
            lea RDI,QWORD PTR [RBP+7520]
            mov RAX,RDX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov BYTE PTR [RBX+RDX*8+788],AL
            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBX+4672],EAX
            call .L_4294e0

            mov RDI,RBP
            call .L_4334f0

            mov RDI,RBP
            mov BYTE PTR [RAX],1
            call .L_4334f0

            mov BYTE PTR [RAX+120],2
            or BYTE PTR [RBP+1564],128
            lea RCX,QWORD PTR [RBX+788]
            xor EDX,EDX
            nop
.L_4224b0:

            movsxd RAX,EDX
            add EDX,1
            add RCX,40
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RBX+RAX*8]
            and BYTE PTR [RAX+789],63
            and BYTE PTR [RAX+778],248
            mov BYTE PTR [RCX-40],63
            cmp EDX,63
            jne .L_4224b0

            cmp BYTE PTR [RBX+3272],0
            je .L_422550

            lea R12,QWORD PTR [RBX+3280]
            xor EBP,EBP
            jmp .L_422509
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4224f0:

            cmp AL,1
            je .L_422529
.L_4224f4:

            movzx EAX,BYTE PTR [RBX+3272]
            add EBP,1
            add R12,136
            cmp EAX,EBP
            jle .L_422550
.L_422509:

            movsxd RDX,EBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_4224f0
.L_422529:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+4669],AL
            je .L_4224f4

            mov RSI,R12
            mov RDI,RBX
            call .L_4221d0

            jmp .L_4224f4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422550:

            pop RBX
.L_422551:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_422557:

            mov RDI,RBX
            call .L_41c470

            jmp .L_422454
.L_422564:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422570:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_422577:

            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RBX+12],4
            mov RBP,RAX
            je .L_42259d

            mov RDI,RBX
            call .L_433530

            mov ESI,4
            mov RDI,RAX
            call .L_402d80
.L_42259d:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_416df0

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],4
            mov DWORD PTR [RBX+60],0
            call .L_433690

            lea RDI,QWORD PTR [RBX+120]
            call .L_433690

            lea RDI,QWORD PTR [RBX+592]
            call .L_433c30

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_422740
.L_4225e4:

            mov RDI,RBX
            call .L_4173d0

            mov RDI,RBP
            call .L_4112f0

            movzx EDX,BYTE PTR [RBX+4669]
            mov RAX,RDX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov BYTE PTR [RBX+RDX*8+788],AL
            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBX+4672],EAX
            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            movzx EAX,BYTE PTR [RBX+4669]
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea R12,QWORD PTR [RBX+RAX*8+752]
            call .L_401240

            lea RDI,QWORD PTR [RBP+7520]
            mov DWORD PTR [R12+8],EAX
            lea R12,QWORD PTR [RBP+216]
            call .L_429490

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40bf10

            lea RDI,QWORD PTR [RBP+1208]
            call .L_40bf90

            lea RSI,QWORD PTR [RBX+680]
            mov RDI,R12
            call .L_42f860

            lea RSI,QWORD PTR [RBX+712]
            mov RDI,R12
            call .L_42f860

            mov RDI,RBP
            call .L_4334f0

            mov RDI,RBP
            mov BYTE PTR [RAX],1
            call .L_4334f0

            mov BYTE PTR [RAX+120],2
            or BYTE PTR [RBP+1564],128
            lea RDI,QWORD PTR [RBP+10688]
            call .L_412300

            cmp BYTE PTR [RBX+3272],0
            je .L_422730

            lea R12,QWORD PTR [RBX+3280]
            xor EBP,EBP
            jmp .L_4226e9
.L_4226d0:

            cmp AL,1
            je .L_422709
.L_4226d4:

            movzx EAX,BYTE PTR [RBX+3272]
            add EBP,1
            add R12,136
            cmp EAX,EBP
            jle .L_422730
.L_4226e9:

            movsxd RDX,EBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_4226d0
.L_422709:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+4669],AL
            je .L_4226d4

            mov RSI,R12
            mov RDI,RBX
            call .L_4221d0

            jmp .L_4226d4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422730:

            pop RBX
.L_422731:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422740:

            mov RDI,RBX
            call .L_41c470

            jmp .L_4225e4
.L_42274d:

            nop
            nop
            nop
.L_422750:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_42275d:

            call .L_433510

            mov RBP,RAX
            mov EAX,DWORD PTR [RBX+12]
            test EAX,EAX
            je .L_422880

            cmp EAX,4
            je .L_422870

            test BYTE PTR [RBX+4668],1
            je .L_422890

            test BYTE PTR [RBX+56],2
            je .L_422890

            lea RCX,QWORD PTR [RBX+788]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4227a0:

            movsxd RAX,EDX
            add EDX,1
            add RCX,40
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RBX+RAX*8]
            and BYTE PTR [RAX+789],63
            and BYTE PTR [RAX+778],248
            mov BYTE PTR [RCX-40],63
            cmp EDX,63
            jne .L_4227a0

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            jbe .L_4228a0

            mov RDI,RBX
            call .L_41c8b0
.L_4227e0:

            cmp AL,62
            ja .L_4228da

            mov BYTE PTR [RBX+4669],AL
            mov BYTE PTR [RBX+4670],AL
            movzx EAX,AL
            mov RDX,QWORD PTR [RBP+1656]
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov QWORD PTR [RBX+RAX*8+752],RDX
            mov ESI,DWORD PTR [RBX+4664]
            test ESI,ESI
            je .L_4228b0

            movzx ECX,BYTE PTR [RBX+4669]
            movzx EDX,BYTE PTR [RBX+4663]
            mov RDI,RBX
            call .L_417200
.L_42282e:

            call .L_401460

            lea RDI,QWORD PTR [RBP+7520]
            mov BYTE PTR [RBX+744],AL
            call .L_429370

            lea RDI,QWORD PTR [RBP+10528]
            call .L_40dcd0

            movzx ESI,BYTE PTR [RBX+4669]
            add RSP,8
.L_42285c:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            shl ESI,10
            movzx ESI,SI
            jmp .L_422570
.L_422870:

            xor EAX,EAX
.L_422872:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_422880:

            add RSP,8
            mov EAX,13
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_422890:

            add RSP,8
            mov EAX,27
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4228a0:

            movzx ESI,AL
            mov RDI,RBX
            call .L_41c820

            jmp .L_4227e0
.L_4228b0:

            movzx R13D,BYTE PTR [RBX+4669]
            movzx R12D,BYTE PTR [RBX+4663]
            call .L_401460

            mov RDI,RBX
            mov ESI,EAX
            mov ECX,R13D
            mov EDX,R12D
            call .L_417200

            jmp .L_42282e
.L_4228da:

            mov EAX,3
            jmp .L_422872
.L_4228e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4228f0:

            push R15
            push R14
            lea R14,QWORD PTR [RDX+16]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            sub RSP,88
.L_42290f:

            xor R10D,R10D
            mov RBX,RDI
            mov WORD PTR [RSP+26],SI
            lea RSI,QWORD PTR [RIP+.L_425bd1]
            mov RBP,RDX
            mov RDX,R14
            mov WORD PTR [RSP+52],CX
            mov WORD PTR [RSP+34],R8W
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+30],R9W
            mov WORD PTR [RSP+62],R10W
            call .L_41c1e0

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            ja .L_4229b0

            mov EAX,DWORD PTR [RBX+60]
            test EAX,EAX
            jne .L_4229b0

            lea R13,QWORD PTR [RSP+44]
            mov RDI,R14
            lea R14,QWORD PTR [RSP+52]
            mov RSI,R13
            call .L_4101e0

            mov EDX,10
            mov RCX,R14
            mov ESI,3
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EDX,EAX
            jne .L_4229b5

            movzx EAX,BYTE PTR [RSP+53]
            sub EAX,4
            cmp AL,4
            jbe .L_4229e0
.L_4229a1:

            mov EDX,6
            jmp .L_4229b5
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4229b0:

            mov EDX,13
.L_4229b5:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_422bd8

            add RSP,88
.L_4229cf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4229e0:

            lea RCX,QWORD PTR [RSP+26]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EDX,EAX
            jne .L_4229b5

            cmp BYTE PTR [RSP+27],2
            jne .L_4229a1

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,1
            jbe .L_4229a1

            lea RCX,QWORD PTR [RSP+34]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_422a46

            cmp BYTE PTR [RSP+35],8
            jne .L_4229a1

            mov EAX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RBX+2],EAX
            jne .L_4229b0
.L_422a46:

            lea RCX,QWORD PTR [RSP+30]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_422b94

            cmp BYTE PTR [RSP+31],2
            jne .L_4229a1

            movzx R15D,WORD PTR [RSP+32]
            mov RSI,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_41e4b0

            mov EDX,DWORD PTR [RSP+8]
            rol R15W,8
            test RAX,RAX
            je .L_422aa6

            cmp WORD PTR [RAX+24],R15W
            je .L_422aa6

            mov RSI,RAX
            mov RDI,RBX
            call .L_4221d0

            mov EDX,DWORD PTR [RSP+8]
.L_422aa6:

            test R15W,511
            jne .L_422bd0

            movzx EAX,R15W
            sar EAX,10
            cmp EAX,63
            je .L_4229a1

            cdqe 
            imul RAX,RAX,40
            lea R15,QWORD PTR [RBX+RAX*1+752]
            movzx EAX,BYTE PTR [R15+26]
            and EAX,7
            cmp EAX,5
            je .L_422be7

            cmp EAX,7
            je .L_422bf1

            mov RAX,QWORD PTR [RSP+44]
            lea RCX,QWORD PTR [R15+28]
            mov R13,QWORD PTR [RBP+40]
            mov RDI,RCX
            mov QWORD PTR [RSP+8],RCX
            mov QWORD PTR [R15],RAX
            call .L_414250

            mov RDI,RBX
            movsx R13D,BYTE PTR [R13+3]
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            mov RCX,QWORD PTR [RSP+8]
            movsx ESI,AL
            mov EDX,R13D
            mov RDI,RCX
            call .L_414260

            mov BYTE PTR [R15+27],0
            call .L_401240

            mov DWORD PTR [R15+8],EAX
            movzx EAX,BYTE PTR [R15+26]
            and EAX,4294967288
            or EAX,5
            mov BYTE PTR [R15+26],AL
.L_422b50:

            lea R13,QWORD PTR [RSP+62]
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            mov RCX,R13
            call .L_4339f0

            test EAX,EAX
            jne .L_422bc9

            cmp BYTE PTR [RSP+63],8
            ja .L_4229a1
.L_422b79:

            mov RDX,R15
            mov R8,R14
            mov RCX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_421a50

            mov EDX,EAX
            jmp .L_4229b5
.L_422b94:

            mov RSI,R13
            mov RDI,RBX
            call .L_41e4b0

            test RAX,RAX
            mov R15,RAX
            je .L_422bdd

            movzx EAX,BYTE PTR [RAX+26]
            mov EDX,2
            and EAX,7
            cmp AL,7
            jne .L_4229b5

            test WORD PTR [R15+24],511
            je .L_422b50

            jmp .L_4229b5
.L_422bc9:

            mov BYTE PTR [RSP+63],0
            jmp .L_422b79
.L_422bd0:

            xor R15D,R15D
            jmp .L_422b50
.L_422bd8:

            call __stack_chk_fail@PLT
.L_422bdd:

            mov EDX,2
            jmp .L_4229b5
.L_422be7:

            mov EDX,24
            jmp .L_4229b5
.L_422bf1:

            mov RSI,R13
            mov RDI,R15
            mov DWORD PTR [RSP+8],EDX
            call .L_408da0

            test AL,AL
            jne .L_422b50

            mov EDX,DWORD PTR [RSP+8]
            jmp .L_4229b5
.L_422c11:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422c20:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            xor R13D,R13D
            push RBP
            push RBX
            xor R12D,R12D
            xor EDI,EDI
            mov RBP,RSI
            xor ESI,ESI
            sub RSP,232
.L_422c41:

            xor R9D,R9D
            xor R10D,R10D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+53],R12W
            lea R12,QWORD PTR [RDX+16]
            mov WORD PTR [RSP+108],R13W
            lea R13,QWORD PTR [RSP+90]
            xor R11D,R11D
            mov DWORD PTR [RSP+20],ECX
            mov WORD PTR [RSP+60],SI
            xor ECX,ECX
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+68],DI
            mov WORD PTR [RSP+56],AX
            mov RSI,R13
            xor EAX,EAX
            mov RDI,R12
            mov R15D,R8D
            xor R8D,R8D
            mov WORD PTR [RSP+64],R9W
            mov RBX,RDX
            mov WORD PTR [RSP+98],CX
            mov WORD PTR [RSP+74],R8W
            mov WORD PTR [RSP+128],R10W
            mov WORD PTR [RSP+80],R11W
            mov WORD PTR [RSP+118],AX
            call .L_4101e0

            lea RCX,QWORD PTR [RSP+60]
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_422e60

            cmp BYTE PTR [RSP+61],2
            jne .L_422e90

            movzx ECX,WORD PTR [RSP+62]
            mov RDX,R12
            rol CX,8
            test R15B,R15B
            movzx ECX,CX
            jne .L_422ea0

            lea RSI,QWORD PTR [RIP+.L_425be6]
            mov RDI,R14
            call .L_41c1f0
.L_422d1e:

            lea RCX,QWORD PTR [RSP+56]
            mov EDX,4
            mov ESI,18
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_422e60

            cmp BYTE PTR [RSP+57],2
            jne .L_422e90

            lea RCX,QWORD PTR [RSP+98]
            mov EDX,10
            mov ESI,4
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_422e60

            cmp BYTE PTR [RSP+99],8
            jne .L_422e90

            mov RSI,R13
            mov RDI,R14
            call .L_41e4b0

            test RAX,RAX
            je .L_422da2

            movzx EDX,WORD PTR [RSP+62]
            rol DX,8
            cmp DX,WORD PTR [RAX+24]
            je .L_422da2

            mov RSI,RAX
            mov RDI,R14
            call .L_4221d0
.L_422da2:

            lea RCX,QWORD PTR [RSP+68]
            mov EDX,6
            mov ESI,5
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_422e60

            cmp BYTE PTR [RSP+69],4
            jne .L_422e90

            lea RCX,QWORD PTR [RSP+74]
            mov EDX,6
            mov ESI,8
            mov RDI,RBP
            mov DWORD PTR [RSP+24],EAX
            call .L_4339f0

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+24]
            jne .L_422eb4

            cmp BYTE PTR [RSP+75],4
            jne .L_422e90
.L_422e02:

            movzx EAX,WORD PTR [RSP+62]
            mov EDX,EAX
            rol DX,8
            test DX,511
            jne .L_422e90

            movzx EDX,DX
            sar EDX,10
            cmp EDX,63
            mov DWORD PTR [RSP+24],EDX
            je .L_422e90

            movsxd RSI,EDX
            imul RDX,RSI,40
            mov QWORD PTR [RSP+32],RSI
            lea R13,QWORD PTR [R14+RDX*1+752]
            movzx EDX,BYTE PTR [R13+26]
            and EDX,7
            cmp DL,5
            je .L_422ec6

            cmp DL,7
            je .L_422ed5

            test DL,DL
            je .L_4231e6

            mov R9D,13
            nop
.L_422e60:

            mov RDX,QWORD PTR [RSP+216]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_422ec1

            add RSP,232
.L_422e7d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422e90:

            mov R9D,6
            jmp .L_422e60
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422ea0:

            lea RSI,QWORD PTR [RIP+.L_426130]
            mov RDI,R14
            call .L_41c1f0

            jmp .L_422d1e
.L_422eb4:

            mov EAX,DWORD PTR [RSP+70]
            mov DWORD PTR [RSP+76],EAX
            jmp .L_422e02
.L_422ec1:

            call __stack_chk_fail@PLT
.L_422ec6:

            mov RSI,QWORD PTR [RSP+100]
            cmp QWORD PTR [R13+12],RSI
            jne .L_423202
.L_422ed5:

            cmp DWORD PTR [R14+12],4
            ja .L_422f52

            mov EAX,DWORD PTR [R14+12]
            lea RDX,QWORD PTR [RIP+.L_425ccc]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_422ef0:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R9D
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            cmp BYTE PTR [RSP+54],1
            jne .L_422e90

            movzx EDI,BYTE PTR [RSP+55]
            call .L_414420

            imul RDX,QWORD PTR [RSP+32],40
            and EAX,3
            mov R9D,DWORD PTR [RSP+24]
            lea RCX,QWORD PTR [R14+RDX*1+784]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967292
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            movzx EAX,WORD PTR [RSP+62]
.L_422f52:

            rol AX,8
            mov RDX,QWORD PTR [RSP+90]
            mov DWORD PTR [RSP+24],R9D
            mov WORD PTR [R13+24],AX
            mov EAX,DWORD PTR [RSP+70]
            lea R12,QWORD PTR [R13+28]
            mov QWORD PTR [R13],RDX
            bswap EAX
            mov DWORD PTR [R13+12],EAX
            mov EAX,DWORD PTR [RSP+76]
            bswap EAX
            mov DWORD PTR [R13+16],EAX
            call .L_401240

            mov DWORD PTR [R13+8],EAX
            movzx EAX,BYTE PTR [R13+26]
            mov RDI,R12
            and EAX,4294967175
            or EAX,88
            mov BYTE PTR [R13+26],AL
            call .L_414250

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,R14
            movsx EDX,BYTE PTR [RAX+3]
            mov DWORD PTR [RSP+8],EDX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            mov EDX,DWORD PTR [RSP+8]
            movsx ESI,AL
            mov RDI,R12
            call .L_414260

            mov EAX,DWORD PTR [RSP+20]
            or BYTE PTR [R13+26],7
            test R15B,R15B
            mov BYTE PTR [R13+27],0
            mov R9D,DWORD PTR [RSP+24]
            mov DWORD PTR [R13+20],EAX
            je .L_422e60

            lea R12,QWORD PTR [RSP+108]
            mov EDX,10
            mov ESI,3
            mov RDI,RBP
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            mov R9D,EAX
            jne .L_422e60

            movzx EAX,BYTE PTR [RSP+109]
            sub EAX,4
            cmp AL,4
            ja .L_422e90

            lea R15,QWORD PTR [RSP+118]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,R15
            call .L_4339f0

            test EAX,EAX
            jne .L_423348

            cmp BYTE PTR [RSP+119],8
            ja .L_422e90
.L_423053:

            mov R8,R12
            mov RCX,R15
            mov RDX,R13
            mov RSI,RBX
            mov RDI,R14
            call .L_421a50

            mov R9D,EAX
            jmp .L_422e60
.L_42306f:

            lea RCX,QWORD PTR [RSP+80]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            mov DWORD PTR [RSP+40],R9D
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            cmp BYTE PTR [RSP+81],8
            jne .L_422e90

            mov EAX,DWORD PTR [RSP+82]
            cmp DWORD PTR [R14+2],EAX
            mov R9D,DWORD PTR [RSP+40]
            jne .L_422e60

            cmp BYTE PTR [R14+10],0
            je .L_4233b0
.L_4230bc:

            lea RDX,QWORD PTR [RIP+.L_45fd50-236663]
            xor R8D,R8D
            mov ECX,1
            mov RSI,R12
            mov RDI,R14
            mov DWORD PTR [RSP+40],R9D
            call .L_418c80

            mov R9D,DWORD PTR [RSP+40]
.L_4230e0:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            mov DWORD PTR [RSP+40],R9D
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            cmp BYTE PTR [RSP+54],1
            jne .L_422e90

            movzx EDI,BYTE PTR [RSP+55]
            lea R12,QWORD PTR [RSP+128]
            call .L_414420

            imul RDX,QWORD PTR [RSP+32],40
            and EAX,3
            mov ESI,9
            mov RDI,RBP
            lea RCX,QWORD PTR [R14+RDX*1+784]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967292
            or EAX,EDX
            mov EDX,74
            mov BYTE PTR [RCX+5],AL
            mov RCX,R12
            call .L_4339f0

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+40]
            jne .L_423366

            movzx EAX,BYTE PTR [RSP+129]
            sub EAX,9
            cmp AL,63
            ja .L_422e90

            mov RSI,R12
            mov RDI,R14
            mov DWORD PTR [RSP+32],R9D
            call .L_41d030

            test EAX,EAX
            je .L_423352
.L_42318d:

            mov R9D,EAX
            jmp .L_422e60
.L_423195:

            lea RCX,QWORD PTR [RSP+64]
            mov EDX,4
            mov ESI,10
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R9D
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            cmp BYTE PTR [RSP+65],2
            jne .L_422e90

            mov RDI,R14
            call .L_416dd0

            movzx EDX,WORD PTR [RSP+66]
            mov R9D,DWORD PTR [RSP+24]
            rol DX,8
            cmp AX,DX
            je .L_42322c

            mov R9D,2
            jmp .L_422e60
.L_4231e6:

            cmp BYTE PTR [R14+4648],0
            je .L_423202

            mov RDI,QWORD PTR [RSP+100]
            cmp QWORD PTR [R14+4649],RDI
            je .L_422ed5
.L_423202:

            mov R9D,8
            jmp .L_422e60
.L_42320d:

            lea RCX,QWORD PTR [RIP+.L_425f40]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,1000
            call __assert_fail@PLT
.L_42322c:

            lea R8,QWORD PTR [RSP+128]
            mov EDX,74
            mov ESI,9
            mov RDI,RBP
            mov DWORD PTR [RSP+32],R9D
            mov RCX,R8
            mov QWORD PTR [RSP+24],R8
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            movzx EAX,BYTE PTR [RSP+129]
            mov R8,QWORD PTR [RSP+24]
            mov R9D,DWORD PTR [RSP+32]
            sub EAX,9
            cmp AL,63
            ja .L_422e90

            mov RSI,R8
            mov RDI,R14
            mov DWORD PTR [RSP+24],R9D
            call .L_41d030

            test EAX,EAX
            jne .L_42318d

            lea RCX,QWORD PTR [RSP+80]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42318d

            cmp BYTE PTR [RSP+81],8
            mov R9D,DWORD PTR [RSP+24]
            jne .L_422e90

            mov ESI,DWORD PTR [RSP+82]
            movzx ECX,BYTE PTR [RSP+89]
            mov RDI,R14
            movzx EDX,BYTE PTR [RSP+86]
            mov DWORD PTR [RSP+32],R9D
            bswap ESI
            call .L_417200

            movzx EAX,BYTE PTR [R14+9]
            mov RDI,R14
            mov BYTE PTR [RSP+24],AL
            call .L_416dd0

            movzx EAX,AX
            mov R9D,DWORD PTR [RSP+32]
            mov RDI,R14
            sar EAX,10
            cmp BYTE PTR [RSP+24],AL
            mov DWORD PTR [RSP+24],R9D
            je .L_423391

            call .L_416dd0

            mov RDI,R14
            movzx ESI,AX
            call .L_4223e0

            lea RDX,QWORD PTR [RIP+.L_45fd50-236663]
            mov BYTE PTR [R14+10],1
            xor R8D,R8D
            mov ECX,1
            mov RSI,R12
            mov RDI,R14
            call .L_418c80

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_422f52
.L_423348:

            mov BYTE PTR [RSP+119],0
            jmp .L_423053
.L_423352:

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,R12
            mov RDI,R14
            call .L_41d240

            mov R9D,DWORD PTR [RSP+32]
.L_423366:

            movzx EAX,BYTE PTR [RSP+24]
            cmp BYTE PTR [R14+4669],AL
            je .L_423387

            cmp BYTE PTR [R13+36],62
            jbe .L_423387

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_4233e3
.L_423387:

            movzx EAX,WORD PTR [RSP+62]
            jmp .L_422f52
.L_423391:

            call .L_416dd0

            mov RDI,R14
            movzx ESI,AX
            call .L_422570

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_422f52
.L_4233b0:

            movzx EDX,BYTE PTR [RSP+87]
            mov RDI,R14
            mov DWORD PTR [RSP+44],R9D
            mov BYTE PTR [RSP+40],DL
            call .L_433510

            movzx EDX,BYTE PTR [RSP+40]
            mov R9D,DWORD PTR [RSP+44]
            sub DL,BYTE PTR [RAX+7785]
            test DL,DL
            jg .L_4230bc

            jmp .L_4230e0
.L_4233e3:

            mov RDI,R14
            mov DWORD PTR [RSP+24],R9D
            call .L_41c470

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_422f52
.L_4233ff:

            nop
.L_423400:

            xor R8D,R8D
            jmp .L_422c20
.L_423408:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423410:

            mov R8D,1
            jmp .L_422c20
.L_42341b:

            nop
            nop
            nop
            nop
            nop
.L_423420:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            sub RSP,168
.L_42343a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_433510

            mov R14,QWORD PTR [RBX+40]
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            movsx R13D,BYTE PTR [R14+3]
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            mov ESI,R13D
            movsx EDI,AL
            lea R13,QWORD PTR [RSP+56]
            call .L_414400

            lea RDI,QWORD PTR [RBX+16]
            xor EDX,EDX
            xor ECX,ECX
            mov RSI,R13
            mov R15D,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+42],AX
            mov WORD PTR [RSP+46],DX
            mov WORD PTR [RSP+64],CX
            call .L_4101e0

            lea RCX,QWORD PTR [RSP+42]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov R8D,EAX
            jne .L_4234d0

            cmp BYTE PTR [RSP+43],2
            je .L_423500
.L_4234ca:

            mov R8D,6
.L_4234d0:

            mov RDX,QWORD PTR [RSP+152]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R8D
            jne .L_4239d8

            add RSP,168
.L_4234f1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_423500:

            mov RSI,R13
            mov RDI,RBP
            call .L_41e4b0

            test RAX,RAX
            je .L_42352a

            movzx EDX,WORD PTR [RSP+44]
            rol DX,8
            cmp DX,WORD PTR [RAX+24]
            je .L_42352a

            mov RSI,RAX
            mov RDI,RBP
            call .L_4221d0
.L_42352a:

            lea RBX,QWORD PTR [RSP+46]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            mov R8D,EAX
            jne .L_4234d0

            cmp BYTE PTR [RSP+47],8
            jne .L_4234ca

            mov DWORD PTR [RSP+24],EAX
            lea RAX,QWORD PTR [RSP+64]
            mov EDX,74
            mov ESI,9
            mov RDI,R12
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4339f0

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+24]
            jne .L_423610

            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            ja .L_4234ca
.L_423596:

            mov EAX,DWORD PTR [RSP+48]
            cmp DWORD PTR [RBP+2],EAX
            mov EDX,EAX
            bswap EDX
            je .L_423625

            cmp R15B,9
            jbe .L_42361a

            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            jbe .L_4236a7
.L_4235bd:

            cmp DWORD PTR [RBP+12],2
            je .L_423661
.L_4235c7:

            mov RDI,RBP
            call .L_41d120

            mov R10D,EAX
            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            jbe .L_4236e8

            xor EAX,EAX
.L_4235e4:

            cmp R10B,AL
            je .L_42368e

            test R10B,R10B
            je .L_4235ff
.L_4235f2:

            mov ESI,3
            mov RDI,RBP
            call .L_4164b0
.L_4235ff:

            mov R8D,2
            jmp .L_4234d0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_423610:

            mov BYTE PTR [RSP+65],0
            jmp .L_423596
.L_42361a:

            mov R8D,34
            jmp .L_4234d0
.L_423625:

            movzx EBX,BYTE PTR [RSP+55]
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R8D
            call .L_4171f0

            mov R8D,DWORD PTR [RSP+24]
            cmp AL,BL
            je .L_4236f7

            cmp DWORD PTR [RBP+12],2
            je .L_4234d0

            mov RDI,RBP
            call .L_417190

            mov R8D,2
            jmp .L_4234d0
.L_423661:

            lea RDI,QWORD PTR [RBP+16]
            mov RSI,R13
            mov DWORD PTR [RSP+8],R8D
            call .L_408da0

            test AL,AL
            mov R8D,DWORD PTR [RSP+8]
            jne .L_4234d0

            test BYTE PTR [RBP+56],2
            jne .L_4235c7

            jmp .L_4234d0
.L_42368e:

            movzx EAX,BYTE PTR [RBP+6]
            cmp BYTE PTR [RSP+52],AL
            je .L_4239c0

            ja .L_4235f2

            jmp .L_4235ff
.L_4236a7:

            test BYTE PTR [RBP+56],2
            je .L_4235bd

            cmp BYTE PTR [RBP+149],0
            je .L_4235bd

            cmp DWORD PTR [RBP+144],EDX
            jne .L_4235bd

            movzx EAX,BYTE PTR [RSP+66]
            sub EAX,DWORD PTR [RBP+148]
            test AL,AL
            jg .L_4235bd

            jmp .L_4235ff
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4236e8:

            mov RDI,QWORD PTR [RSP+16]
            call .L_41c4d0

            jmp .L_4235e4
.L_4236f7:

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            test AX,511
            jne .L_4234d0

            movzx ECX,BYTE PTR [RSP+65]
            lea EDX,DWORD PTR [RCX-9]
            cmp DL,63
            ja .L_4234d0

            movzx EBX,AX
            sar EBX,10
            cmp EBX,63
            mov DWORD PTR [RSP+24],EBX
            je .L_4234ca

            movsxd R12,EBX
            imul RDX,R12,40
            test BYTE PTR [RBP+56],2
            lea RBX,QWORD PTR [RBP+RDX*1+752]
            je .L_423784

            movzx EDX,BYTE PTR [RSP+66]
            sub EDX,DWORD PTR [RBP+744]
            test DL,DL
            jle .L_423784

            mov EDX,DWORD PTR [RBP+12]
            cmp EDX,2
            je .L_4239e5

            jb .L_423784

            cmp EDX,4
            ja .L_423784
.L_423765:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_41d030

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+28]
            jne .L_4239dd
.L_423784:

            cmp DWORD PTR [RBP+12],4
            ja .L_4238c6

            mov EAX,DWORD PTR [RBP+12]
            lea RDX,QWORD PTR [RIP+.L_425ce0]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_4237a1:

            xor EAX,EAX
            xor ESI,ESI
            mov EDI,128
.L_4237aa:

            mov EDX,EAX
            mov ECX,EAX
            mov R9D,EDI
            shr DL,3
            and ECX,7
            and EDX,31
            sar R9D,CL
            movzx EDX,BYTE PTR [RSP+RDX*1+67]
            and EDX,R9D
            cmp EDX,1
            sbb SIL,255
            add EAX,1
            cmp AL,63
            jne .L_4237aa

            cmp BYTE PTR [RBP+4662],SIL
            jae .L_42388c

            movzx ECX,BYTE PTR [RBP+4677]
            test CL,CL
            jne .L_42388c

            xor EDX,EDX
.L_4237f1:

            movsxd RAX,EDX
            imul RAX,RAX,40
            add RAX,RBP
            movzx ESI,BYTE PTR [RAX+778]
            and ESI,7
            cmp SIL,7
            jne .L_42382e

            imul RDI,RDX,40
            movzx EAX,BYTE PTR [RAX+789]
            movzx ESI,BYTE PTR [RBP+RDI*1+782]
            and EAX,3
            cmp SIL,AL
            cmovbe EAX,ESI
            cmp AL,1
            jbe .L_42382e

            add ECX,1
.L_42382e:

            add RDX,1
            cmp RDX,63
            jne .L_4237f1

            cmp CL,6
            jbe .L_42388c

            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_421f40

            test AL,AL
            mov R8D,DWORD PTR [RSP+28]
            je .L_42388c

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            call .L_421dd0

            test AL,AL
            mov R8D,DWORD PTR [RSP+28]
            je .L_42388c

            movzx R13D,BYTE PTR [RBP+4676]
            call .L_401460

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+28]
            cdq 
            idiv R13D
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBP+4677],AL
.L_42388c:

            imul R12,R12,40
            test BYTE PTR [RBP+R12*1+789],64
            je .L_423b11

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,5
            cmp AL,5
            je .L_4238b4

            cmp R15B,9
            ja .L_423b1c
.L_4238b4:

            mov DWORD PTR [RSP+28],R8D
            call .L_401240

            mov R8D,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+8],EAX
.L_4238c6:

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_41d240

            mov RDI,QWORD PTR [RSP+8]
            add RDI,7248
            call .L_42bed0

            mov R8D,DWORD PTR [RSP+28]
            jmp .L_4234d0
.L_4238f7:

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            cmp WORD PTR [RBP+40],AX
            je .L_423a9c

            movzx EAX,BYTE PTR [RBX+26]
.L_42390e:

            and EAX,7
            cmp AL,7
            je .L_423a9c
.L_423919:

            lea R12,QWORD PTR [RBP+16]
            mov RSI,R13
            mov DWORD PTR [RSP+16],R8D
            mov RDI,R12
            call .L_408da0

            test AL,AL
            mov R8D,DWORD PTR [RSP+16]
            je .L_423a19

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            cmp WORD PTR [RBP+40],AX
            jne .L_423a06

            test BYTE PTR [RBP+56],2
            je .L_4239a5

            xor R13D,R13D
            xor R15D,R15D
            mov R14D,128
.L_42395f:

            mov EAX,R15D
            mov ECX,R15D
            shr AL,3
            and ECX,7
            and EAX,31
            movzx EDX,BYTE PTR [RSP+RAX*1+67]
            mov EAX,R14D
            sar EAX,CL
            test EDX,EAX
            je .L_42399b

            mov RDI,RBP
            mov DWORD PTR [RSP+8],R8D
            call .L_4171f0

            cmp AL,R15B
            mov R8D,DWORD PTR [RSP+8]
            je .L_423b6c

            add R13D,1
.L_42399b:

            add R15D,1
            cmp R15B,63
            jne .L_42395f
.L_4239a5:

            mov DWORD PTR [RSP+8],R8D
            call .L_401240

            mov R8D,DWORD PTR [RSP+8]
            mov DWORD PTR [R12+8],EAX
            jmp .L_4234d0
          .byte 0x66
          .byte 0x90
.L_4239c0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_41c4b0

            test EAX,EAX
            jg .L_4235f2

            jmp .L_4235ff
.L_4239d8:

            call __stack_chk_fail@PLT
.L_4239dd:

            mov R8D,EAX
            jmp .L_4234d0
.L_4239e5:

            cmp WORD PTR [RBP+40],AX
            je .L_423765

            movzx EAX,BYTE PTR [RBX+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_42390e

            jmp .L_423765
.L_423a06:

            mov RDI,RBP
            call .L_417190

            mov R8D,4
            jmp .L_4234d0
.L_423a19:

            test BYTE PTR [RBP+56],2
            je .L_423b09

            movzx EAX,BYTE PTR [RBX+26]
            mov R12,RBX
            and EAX,5
            cmp AL,5
            je .L_4239a5

            mov RAX,QWORD PTR [RSP+56]
            lea R13,QWORD PTR [RBX+28]
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_414250

            movsx R12D,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            add RDI,1560
            call .L_4084f0

            mov EDX,R12D
            movsx ESI,AL
            mov RDI,R13
            call .L_414260

            mov BYTE PTR [RBX+27],0
            call .L_401240

            mov DWORD PTR [RBX+8],EAX
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,4294967288
.L_423a80:

            or EAX,5
            mov RSI,RBX
            mov RDI,RBP
            mov BYTE PTR [RBX+26],AL
            call .L_41cb80

            mov R8D,4
            jmp .L_4234d0
.L_423a9c:

            test BYTE PTR [RBP+56],2
            je .L_423919

            movzx EAX,BYTE PTR [RBP+4677]
            test AL,AL
            jne .L_423919

            xor EDX,EDX
.L_423ab7:

            movsxd RCX,EDX
            imul RCX,RCX,40
            test BYTE PTR [RBP+RCX*1+789],64
            setne CL
            add EDX,1
            add EAX,ECX
            cmp EDX,63
            jne .L_423ab7

            cmp BYTE PTR [RBP+4661],AL
            jbe .L_423919

            movzx EBX,BYTE PTR [RBP+4676]
            mov DWORD PTR [RSP+8],R8D
            call .L_401460

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            cdq 
            idiv EBX
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBP+4677],AL
            jmp .L_4234d0
.L_423b09:

            mov R12,RBX
            jmp .L_4239a5
.L_423b11:

            mov R8D,4
            jmp .L_4234d0
.L_423b1c:

            mov RAX,QWORD PTR [RSP+56]
            lea R13,QWORD PTR [RBX+28]
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_414250

            movsx R12D,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            add RDI,1560
            call .L_4084f0

            mov EDX,R12D
            movsx ESI,AL
            mov RDI,R13
            call .L_414260

            mov BYTE PTR [RBX+27],0
            call .L_401240

            mov DWORD PTR [RBX+8],EAX
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,120
            jmp .L_423a80
.L_423b6c:

            movzx R13D,R13B
            mov DWORD PTR [RSP+8],R8D
            mov RDI,RBP
            test BYTE PTR [RSP+R13*1+75],15
            je .L_423bd5

            call .L_4171f0

            movzx EAX,AL
            movzx ECX,BYTE PTR [RSP+24]
            mov RDI,RBP
            imul RAX,RAX,40
            mov BYTE PTR [RBP+RAX*1+788],CL
            call .L_4171f0

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            imul RAX,RAX,40
            lea RCX,QWORD PTR [RBP+RAX*1+784]
            movzx EAX,BYTE PTR [RSP+R13*1+75]
            and EAX,15
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967235
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            jmp .L_4239a5
.L_423bd5:

            call .L_4171f0

            movzx EAX,AL
            mov RDI,RBP
            imul RAX,RAX,40
            mov BYTE PTR [RBP+RAX*1+788],63
            call .L_4171f0

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            imul RAX,RAX,40
            and BYTE PTR [RBP+RAX*1+789],195
            jmp .L_4239a5
.L_423c0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_423c10:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_423c21:

            call .L_401240

            lea RDI,QWORD PTR [R14+656]
            mov ESI,EAX
            mov EDX,1000
            call .L_433770

            movzx EAX,BYTE PTR [R14+4648]
            test AL,AL
            je .L_423c4f

            sub EAX,1
            mov BYTE PTR [R14+4648],AL
.L_423c4f:

            movzx EAX,BYTE PTR [R14+149]
            test AL,AL
            je .L_423c65

            sub EAX,1
            mov BYTE PTR [R14+149],AL
.L_423c65:

            movzx ECX,BYTE PTR [R14+4677]
            mov EAX,DWORD PTR [R14+12]
            test CL,CL
            je .L_423ca0

            sub ECX,1
            test CL,CL
            mov BYTE PTR [R14+4677],CL
            jne .L_423ca0

            cmp EAX,4
            ja .L_423d30

            lea RDX,QWORD PTR [RIP+.L_425cf4]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_423ca0:

            cmp EAX,4
            ja .L_423d30

            lea RDX,QWORD PTR [RIP+.L_425d08]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_423cb9:

            xor EBX,EBX
.L_423cbb:

            call .L_401240

            sub EAX,DWORD PTR [R14+748]
            mov EDX,274877907
            movzx ECX,BYTE PTR [R14+4660]
            mul EDX
            shr EDX,6
            cmp ECX,EDX
            jbe .L_42401b
.L_423ce1:

            test BL,BL
            je .L_423d30

            xor EDX,EDX
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423cf0:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R14+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_423cf0

            cmp BYTE PTR [R14+4662],CL
            jae .L_423d30

            mov ESI,1
            mov RDI,R14
            call .L_4164b0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423d30:

            cmp BYTE PTR [R14+3272],0
            je .L_423e30

            movzx ECX,BYTE PTR [R14+3306]
            mov EAX,1
            and ECX,7
            shl RAX,CL
            test AL,40
            jne .L_42406e

            lea R12,QWORD PTR [R14+3280]
            xor EBX,EBX
            mov EBP,1
            jmp .L_423dc5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_423d70:

            test AL,17
            jne .L_423d84

            call .L_401240
.L_423d79:

            mov RSI,R12
            mov RDI,R14
            call .L_4221d0
.L_423d84:

            movzx EAX,BYTE PTR [R14+3272]
            add EBX,1
            cmp EAX,EBX
            jle .L_423e30
.L_423d97:

            movsxd RDX,EBX
            add R12,136
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx ECX,BYTE PTR [R14+RAX*8+3306]
            mov RAX,RBP
            and ECX,7
            shl RAX,CL
            test AL,40
            jne .L_42406e
.L_423dc5:

            test AL,198
            je .L_423d70

            imul R13D,DWORD PTR [R12+92],1000
            call .L_401240

            sub EAX,DWORD PTR [R12+8]
            cmp EAX,R13D
            jae .L_423d79

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            ja .L_423d84

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [R14+RAX*8+3306]
            and EAX,7
            cmp AL,1
            jne .L_423d84

            mov RSI,R12
            mov RDI,R14
            add EBX,1
            call .L_41de50

            movzx EAX,BYTE PTR [R14+3272]
            cmp EAX,EBX
            jg .L_423d97

            nop
            nop
            nop
            nop
.L_423e30:

            lea R15,QWORD PTR [R14+752]
            xor EBX,EBX
            lea R13,QWORD PTR [RIP+.L_425d30]
            jmp .L_423e69
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_423e48:

            cmp EAX,1999
            jbe .L_423e54

            cmp ECX,5
            je .L_423e99
.L_423e54:

            cmp DWORD PTR [R14+12],4
            je .L_423ed0
.L_423e5b:

            add RBX,1
            add R15,40
            cmp RBX,63
            je .L_423eb2
.L_423e69:

            call .L_401240

            movsxd RDX,EBX
            sub EAX,DWORD PTR [R15+8]
            mov R12D,EBX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov EBP,EBX
            movzx EDX,BYTE PTR [R14+RDX*8+778]
            and EDX,7
            movzx ECX,DL
            cmp ECX,7
            jne .L_423e48

            cmp EAX,99999
            jbe .L_423e54
.L_423e99:

            mov RSI,R15
            mov RDI,R14
            add RBX,1
            call .L_4221d0

            add R15,40
            cmp RBX,63
            jne .L_423e69
.L_423eb2:

            add RSP,8
.L_423eb6:

            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_41e0d0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_423ed0:

            movsxd RCX,EBP
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RSI,QWORD PTR [R14+RCX*8+784]
            movzx ECX,BYTE PTR [RSI+5]
            test CL,64
            je .L_423f20

            cmp BYTE PTR [R15+36],62
            jbe .L_423e5b

            cmp BYTE PTR [R14+4669],R12B
            je .L_423f01

            cmp DL,7
            je .L_423f40
.L_423f01:

            cmp EAX,89999
            jbe .L_423e5b

            mov ESI,EBP
            mov RDI,R14
            call .L_41c960

            jmp .L_423e5b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_423f20:

            test CL,CL
            jns .L_423e5b

            cmp EAX,189999
            jbe .L_423e5b

            and ECX,127
            mov BYTE PTR [RSI+5],CL
            jmp .L_423e5b
          .byte 0x66
          .byte 0x90
.L_423f40:

            movzx EDX,BYTE PTR [R15+30]
            and ECX,3
            cmp DL,CL
            cmovbe ECX,EDX
            sub ECX,1
            cmp CL,2
            ja .L_423f01

            movzx ECX,CL
            cmp BYTE PTR [R13+RCX*1],15
            jbe .L_423e5b

            jmp .L_423f01
.L_423f66:

            call .L_401240

            sub EAX,DWORD PTR [R14+748]
            cmp EAX,9999
            jbe .L_423d30

            add BYTE PTR [R14+744],1
            call .L_401240

            mov DWORD PTR [R14+748],EAX
            jmp .L_423d30
.L_423f96:

            cmp BYTE PTR [R14+4648],0
            jne .L_423d30

            add RSP,8
.L_423fa8:

            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_417190
.L_423fba:

            xor EDX,EDX
            nop
            nop
            nop
            nop
.L_423fc0:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R14+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_423fc0

            cmp BYTE PTR [R14+4661],CL
            jbe .L_42402d

            mov ESI,2
            mov RDI,R14
            call .L_41fed0
.L_423ff9:

            lea RBX,QWORD PTR [R14+592]
            mov RDI,RBX
            call .L_433c20

            test AL,AL
            je .L_424041

            add RSP,8
.L_424010:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42401b:

            mov ESI,1
            mov RDI,R14
            call .L_4164b0

            jmp .L_423ce1
.L_42402d:

            mov RDI,R14
            call .L_416700

            jmp .L_423ff9
.L_424037:

            mov EBX,1
            jmp .L_423cbb
.L_424041:

            mov RDI,R14
            call .L_421890

            add RSP,8
            mov RDI,RBX
            mov ECX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            mov EDX,630000
            mov ESI,570000
            jmp .L_433cc0
.L_42406e:

            lea RCX,QWORD PTR [RIP+.L_45fd50-237136]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,1921
            call __assert_fail@PLT
.L_42408d:

            lea RCX,QWORD PTR [RIP+.L_45fd50-237136]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,1830
            call __assert_fail@PLT
.L_4240ac:

            nop
            nop
            nop
            nop
.L_4240b0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a70

            add RSP,8
            mov RDI,RAX
            jmp .L_423c10
.L_4240cd:

            nop
            nop
            nop
.L_4240d0:

            push RBX
            mov RBX,RDI
            call .L_41e5d0

            test RAX,RAX
            je .L_4240f0

            mov RDI,RBX
            mov RSI,RAX
            pop RBX
            jmp .L_4221d0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4240f0:

            mov EAX,23
            pop RBX
            ret 
.L_4240f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424100:

            cmp BYTE PTR [RDI+3272],0
            je .L_424180

            push RBP
            push RBX
            mov RBP,RDI
            xor EBX,EBX
            sub RSP,8
.L_424114:

            jmp .L_42412f
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424120:

            cmp AL,1
            je .L_42414f

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            jbe .L_424177
.L_42412f:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_424120
.L_42414f:

            movzx EDX,BL
            mov RDI,RBP
            add EBX,1
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RSI,QWORD PTR [RBP+RAX*8+3280]
            call .L_4221d0

            cmp BYTE PTR [RBP+3272],BL
            ja .L_42412f
.L_424177:

            add RSP,8
.L_42417b:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_424180:

            ret 
.L_424182:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424190:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,8
.L_42419f:

            call .L_433510

            mov R13,RAX
            call .L_401240

            movzx R12D,BYTE PTR [RBX+4676]
            mov DWORD PTR [RBX+748],EAX
            call .L_401460

            movzx EAX,AL
            mov RDI,RBX
            cdq 
            idiv R12D
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBX+4677],AL
            call .L_41ca90

            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            test BYTE PTR [RBX+4668],1
            je .L_424200

            or BYTE PTR [R13+1564],128
.L_424200:

            mov RDI,R13
            call .L_4112f0

            cmp BYTE PTR [RBX+4670],62
            mov EAX,13
            ja .L_42429b

            cmp EBP,2
            ja .L_424352

            cmp EBP,1
            jae .L_424362
.L_42422c:

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_424299

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_424495

            cmp DL,3
            ja .L_424495

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_424294
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424268:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,1
            je .L_424495

            cmp AL,3
            ja .L_424495
.L_424294:

            cmp RSI,RDX
            jne .L_424268
.L_424299:

            xor EAX,EAX
.L_42429b:

            xor ESI,ESI
            xor ECX,ECX
            nop
.L_4242a0:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RBX+RDX*8+789]
            shr DL,6
            and EDX,1
            cmp DL,1
            sbb SIL,255
            add ECX,1
            cmp ECX,63
            jne .L_4242a0

            cmp BYTE PTR [RBX+4661],SIL
            ja .L_424347

            cmp BYTE PTR [RBX+4670],62
            ja .L_42433b

            movzx EDX,BYTE PTR [RBX+3272]
            test DL,DL
            je .L_42433b

            movzx ECX,BYTE PTR [RBX+3306]
            and ECX,7
            cmp CL,1
            je .L_424347

            cmp CL,3
            ja .L_424347

            lea EDI,DWORD PTR [RDX-1]
            mov ECX,1
            movzx EDI,DIL
            add RDI,1
            jmp .L_424336
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424310:

            movsxd RSI,ECX
            add RCX,1
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            movzx EDX,BYTE PTR [RBX+RDX*8+3306]
            and EDX,7
            cmp DL,3
            ja .L_424347

            cmp DL,1
            je .L_424347
.L_424336:

            cmp RCX,RDI
            jne .L_424310
.L_42433b:

            mov EDX,16191
            mov WORD PTR [RBX+4669],DX
.L_424347:

            add RSP,8
.L_42434b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_424352:

            cmp EBP,3
            je .L_42422c

            xor EAX,EAX
            jmp .L_42429b
.L_424362:

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424370:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_424370

            cmp BYTE PTR [RBX+4662],CL
            jb .L_424418

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_424299

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_4244ba

            cmp DL,3
            ja .L_4244ba

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_42440c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4243e0:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,3
            ja .L_4244ba

            cmp AL,1
            je .L_4244ba
.L_42440c:

            cmp RDX,RSI
            jne .L_4243e0

            xor EAX,EAX
            jmp .L_42429b
.L_424418:

            mov RDI,RBX
            call .L_41ffb0

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_424482

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_4244ce

            cmp DL,3
            ja .L_4244ce

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_42447d
.L_424459:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,3
            ja .L_4244ce

            cmp AL,1
            je .L_4244ce
.L_42447d:

            cmp RSI,RDX
            jne .L_424459
.L_424482:

            mov ECX,16191
            xor EAX,EAX
            mov WORD PTR [RBX+4669],CX
            jmp .L_42429b
.L_424495:

            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            cmp DWORD PTR [RBX+4672],EAX
            je .L_424299

            mov ESI,4
            mov RDI,RBX
            call .L_41fed0

            xor EAX,EAX
            jmp .L_42429b
.L_4244ba:

            mov ESI,3
            mov RDI,RBX
            call .L_41fed0

            xor EAX,EAX
            jmp .L_42429b
.L_4244ce:

            mov RDI,RBX
            call .L_424100

            jmp .L_424482
.L_4244d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4244e0:

            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,8
            or BYTE PTR [RSI+26],7
            movzx ESI,WORD PTR [RSI+24]
            call .L_41f2a0

            add RSP,8
            mov RDX,RBX
            mov RDI,RBP
            pop RBX
            pop RBP
            xor ESI,ESI
            jmp .L_422100
.L_42450c:

            nop
            nop
            nop
            nop
.L_424510:

            movzx EAX,BYTE PTR [RSI+26]
            and EAX,7
            cmp AL,7
            je .L_424520

            jmp .L_4244e0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424520:

            ret 
.L_424522:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424530:

            push R15
            push R14
            lea R14,QWORD PTR [RDX+16]
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            mov RBP,RSI
            xor ESI,ESI
            xor R9D,R9D
            xor R10D,R10D
            sub RSP,120
.L_424550:

            xor R11D,R11D
            mov R12,RDX
            mov WORD PTR [RSP+74],SI
            lea RSI,QWORD PTR [RIP+.L_426150]
            mov RDX,R14
            mov R13D,ECX
            xor ECX,ECX
            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+47],CX
            mov WORD PTR [RSP+56],R8W
            mov WORD PTR [RSP+50],R9W
            mov WORD PTR [RSP+84],R10W
            mov WORD PTR [RSP+44],R11W
            call .L_41c1e0

            lea RCX,QWORD PTR [RSP+47]
            mov EDX,3
            mov ESI,1
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_4245ca

            cmp BYTE PTR [RSP+48],1
            je .L_4245f0
.L_4245c4:

            mov R15D,6
.L_4245ca:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_424879

            add RSP,120
.L_4245e5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4245f0:

            lea RAX,QWORD PTR [RSP+66]
            mov RDI,R14
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4101e0

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBX
            mov RSI,RAX
            call .L_41cef0

            mov R14,RAX
            mov BYTE PTR [RSP+94],0
            movzx EAX,BYTE PTR [RSP+49]
            test R14,R14
            je .L_424631

            movzx EDX,BYTE PTR [R14+26]
            test DL,7
            jne .L_424660
.L_424631:

            test AL,8
            je .L_4245ca

            lea RCX,QWORD PTR [RSP+94]
            xor R9D,R9D
            mov R8D,2
            mov RDX,R12
            xor ESI,ESI
            mov RDI,RBX
            mov BYTE PTR [RSP+95],17
            call .L_4213c0

            jmp .L_4245ca
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_424660:

            and EAX,15
            and EDX,4294967175
            mov ESI,3
            shl EAX,3
            mov RDI,RBP
            or EAX,EDX
            mov EDX,2817
            mov BYTE PTR [R14+26],AL
            lea RAX,QWORD PTR [RSP+74]
            mov WORD PTR [RSP+95],DX
            mov EDX,10
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_424848

            movzx EAX,BYTE PTR [RSP+75]
            sub EAX,4
            cmp AL,4
            ja .L_4245c4

            mov EAX,2052
            mov BYTE PTR [RSP+99],5
            mov BYTE PTR [RSP+8],6
            mov WORD PTR [RSP+97],AX
.L_4246c4:

            lea RDX,QWORD PTR [RSP+44]
            mov ESI,19
            mov RDI,RBP
            call .L_4338c0

            test EAX,EAX
            jne .L_42470a

            movzx EDX,WORD PTR [RSP+44]
            mov RCX,R14
            mov RSI,RBP
            mov RDI,RBX
            call .L_41d740

            test EAX,EAX
            jne .L_424852

            movzx EAX,BYTE PTR [RSP+8]
            mov RSI,RAX
            mov BYTE PTR [RSP+RAX*1+94],19
            add ESI,1
            mov BYTE PTR [RSP+8],SIL
.L_42470a:

            lea RCX,QWORD PTR [RSP+56]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_424730

            cmp BYTE PTR [RSP+57],8
            jne .L_4245c4
.L_424730:

            lea RCX,QWORD PTR [RSP+50]
            mov EDX,6
            mov ESI,2
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_424775

            cmp BYTE PTR [RSP+51],4
            jne .L_4245c4

            mov EAX,DWORD PTR [RSP+52]
            bswap EAX
            mov DWORD PTR [R14+92],EAX
            movzx EAX,BYTE PTR [RSP+8]
            mov RSI,RAX
            mov BYTE PTR [RSP+RAX*1+94],2
            add ESI,1
            mov BYTE PTR [RSP+8],SIL
.L_424775:

            lea RAX,QWORD PTR [RSP+84]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_42485a

            movzx ECX,BYTE PTR [RSP+85]
            cmp CL,8
            ja .L_4245c4

            movzx EAX,BYTE PTR [RSP+8]
            mov EDX,10
            movzx ESI,CL
            sub EDX,EAX
            mov EBP,EAX
            cmp ESI,EDX
            jg .L_4245c4

            test CL,CL
            je .L_424808

            mov RDX,QWORD PTR [RSP+24]
            sub ECX,1
            movzx ECX,CL
            lea RSI,QWORD PTR [RDX+RCX*1+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4247e0:

            movzx ECX,BYTE PTR [RDX+2]
            mov EBP,EAX
            cmp CL,11
            je .L_4247ff

            add BYTE PTR [RSP+8],1
            mov BYTE PTR [RSP+RAX*1+94],CL
            movzx EDI,BYTE PTR [RSP+8]
            movzx EAX,DIL
            mov EBP,EAX
.L_4247ff:

            add RDX,1
            cmp RDX,RSI
            jne .L_4247e0
.L_424808:

            call .L_401240

            mov DWORD PTR [R14+8],EAX
            movzx EAX,BYTE PTR [R14+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,1
            je .L_424861

            cmp DL,6
            je .L_424861
.L_424825:

            mov R9,QWORD PTR [RSP+16]
            lea RCX,QWORD PTR [RSP+94]
            mov R8D,EBP
            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_4213c0

            jmp .L_4245ca
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424848:

            mov BYTE PTR [RSP+8],3
            jmp .L_4246c4
.L_424852:

            mov R15D,EAX
            jmp .L_4245ca
.L_42485a:

            movzx EBP,BYTE PTR [RSP+8]
            jmp .L_424808
.L_424861:

            and EAX,7
            cmp AL,7
            je .L_424873

            mov RSI,R14
            mov RDI,RBX
            call .L_4244e0
.L_424873:

            mov DWORD PTR [R14+20],R13D
            jmp .L_424825
.L_424879:

            call __stack_chk_fail@PLT
.L_42487e:

            nop
            nop
.L_424880:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+16]
            xor EDI,EDI
            mov R12,RSI
            xor ESI,ESI
            sub RSP,72
.L_42489f:

            xor R9D,R9D
            xor R10D,R10D
            lea RBP,QWORD PTR [RSP+38]
            xor R11D,R11D
            mov WORD PTR [RSP+46],SI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+3],DI
            xor EAX,EAX
            mov RSI,RBP
            mov RDI,RBX
            mov R15D,ECX
            xor ECX,ECX
            mov R14,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+6],AX
            mov WORD PTR [RSP+10],CX
            mov WORD PTR [RSP+16],R8W
            mov WORD PTR [RSP+22],R9W
            mov WORD PTR [RSP+28],R10W
            mov WORD PTR [RSP],R11W
            call .L_4101e0

            mov RSI,RBP
            mov RDI,R13
            call .L_41cef0

            test RAX,RAX
            je .L_424b30

            lea RCX,QWORD PTR [RSP+6]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            mov RBP,RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_424b20

            cmp BYTE PTR [RSP+7],2
            jne .L_424af8

            movzx EAX,WORD PTR [RSP+8]
            movzx ECX,WORD PTR [RBP+24]
            rol AX,8
            cmp AX,CX
            jne .L_424ae0
.L_424952:

            lea RSI,QWORD PTR [RIP+.L_4261b0]
            mov RDX,RBX
            mov RDI,R13
            call .L_41c1f0

            lea RCX,QWORD PTR [RSP+46]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_42499e

            cmp BYTE PTR [RSP+47],8
            mov EAX,8
            jne .L_424afd

            mov RBX,QWORD PTR [RBP+96]
            cmp QWORD PTR [RSP+48],RBX
            jne .L_424afd
.L_42499e:

            lea RCX,QWORD PTR [RSP+3]
            mov EDX,3
            mov ESI,17
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_4249cf

            cmp BYTE PTR [RSP+4],1
            jne .L_424af8

            cmp BYTE PTR [RSP+5],1
            je .L_424b90
.L_4249cf:

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_4249fe

            cmp BYTE PTR [RSP+17],4
            jne .L_424af8

            mov EAX,DWORD PTR [RSP+18]
            bswap EAX
            mov DWORD PTR [RBP+12],EAX
.L_4249fe:

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_424a2d

            cmp BYTE PTR [RSP+23],4
            jne .L_424af8

            mov EAX,DWORD PTR [RSP+24]
            bswap EAX
            mov DWORD PTR [RBP+16],EAX
.L_424a2d:

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_424a5c

            cmp BYTE PTR [RSP+11],4
            jne .L_424af8

            mov EAX,DWORD PTR [RSP+12]
            bswap EAX
            mov DWORD PTR [RBP+92],EAX
.L_424a5c:

            mov RDX,RSP
            mov ESI,19
            mov RDI,R12
            call .L_4338c0

            test EAX,EAX
            je .L_424b50
.L_424a74:

            lea RCX,QWORD PTR [RSP+28]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            je .L_424b70

            movzx EAX,BYTE PTR [RBP+26]
.L_424a97:

            and EAX,7
            cmp AL,7
            je .L_424aa9

            mov RSI,RBP
            mov RDI,R13
            call .L_4244e0
.L_424aa9:

            call .L_401240

            mov DWORD PTR [RBP+20],R15D
            mov DWORD PTR [RBP+8],EAX
            mov RDI,R13
            movsx EBX,BYTE PTR [R14+3]
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            call .L_4084f0

            lea RDI,QWORD PTR [RBP+28]
            movsx ESI,AL
            mov EDX,EBX
            call .L_414260

            xor EAX,EAX
            jmp .L_424afd
.L_424ae0:

            lea RSI,QWORD PTR [RIP+.L_426178]
            movzx ECX,AX
            mov RDX,RBX
            mov RDI,R13
            call .L_41c1f0

            nop
            nop
            nop
.L_424af8:

            mov EAX,6
.L_424afd:

            mov RBX,QWORD PTR [RSP+56]
            xor RBX,QWORD PTR FS:[40]
            jne .L_424baf

            add RSP,72
.L_424b15:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_424b20:

            movzx ECX,WORD PTR [RBP+24]
            jmp .L_424952
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424b30:

            lea RSI,QWORD PTR [RIP+.L_426178]
            mov RDX,RBX
            mov RDI,R13
            call .L_41c1e0

            mov EAX,23
            jmp .L_424afd
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424b50:

            movzx EDX,WORD PTR [RSP]
            mov RCX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_41d740

            test EAX,EAX
            je .L_424a74

            jmp .L_424afd
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_424b70:

            cmp BYTE PTR [RSP+29],8
            jne .L_424af8

            movzx EAX,BYTE PTR [RBP+26]
            test AL,8
            je .L_424ba2

            movzx EDX,BYTE PTR [RSP+35]
            mov BYTE PTR [RBP+125],DL
            jmp .L_424a97
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_424b90:

            mov RSI,RBP
            mov RDI,R13
            call .L_4221d0

            xor EAX,EAX
            jmp .L_424afd
.L_424ba2:

            movzx EDX,BYTE PTR [RSP+36]
            mov BYTE PTR [RBP+125],DL
            jmp .L_424a97
.L_424baf:

            call __stack_chk_fail@PLT
.L_424bb4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424bc0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,56
.L_424bd4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_433510

            mov RDI,RBX
            mov R13,RAX
            call .L_417500

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_424c25

            mov EDX,12
            mov RSI,RBP
            mov RDI,RBX
            call .L_417540

            test EAX,EAX
            je .L_424c50
.L_424c15:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_424c25:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_424eeb

            add RSP,56
.L_424c3d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424c50:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4175c0

            test EAX,EAX
            jne .L_424c15

            mov RSI,RBP
            mov RDI,RBX
            call .L_417920

            test EAX,EAX
            jne .L_424c15

            mov RSI,RBP
            mov RDI,RBX
            call .L_417bb0

            test EAX,EAX
            jne .L_424c15

            mov RSI,RBP
            mov RDI,RBX
            call .L_417c50

            test EAX,EAX
            jne .L_424c15

            movzx EDI,WORD PTR [R12+24]
            test DI,DI
            jne .L_424d11

            movzx R8D,BYTE PTR [RBX+3272]
            movzx EDI,WORD PTR [RBX+4658]
.L_424ca6:

            add EDI,1
            cmp DI,511
            ja .L_424e20

            mov WORD PTR [RBX+4658],DI
.L_424cbb:

            test R8D,R8D
            je .L_424d03

            lea RSI,QWORD PTR [RBX+3304]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424cd0:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            test BYTE PTR [RBX+RDX*8+3306],7
            je .L_424cf4

            movzx EDX,WORD PTR [RSI]
            and DX,511
            cmp DI,DX
            je .L_424ca6
.L_424cf4:

            add EAX,1
            add RSI,136
            cmp EAX,R8D
            jne .L_424cd0
.L_424d03:

            or DI,WORD PTR [R13+1664]
            mov WORD PTR [R12+24],DI
.L_424d11:

            movzx EDX,DI
            mov RSI,RBP
            mov RDI,RBX
            call .L_4178c0

            test EAX,EAX
            jne .L_424c15

            lea R14,QWORD PTR [R12+96]
            lea R15,QWORD PTR [R12+101]
.L_424d31:

            movzx EAX,BYTE PTR [R14]
            cmp AL,12
            je .L_424e60

            jbe .L_424e36

            cmp AL,24
            je .L_424e90

            cmp AL,25
            jne .L_424d6e

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1208]
            mov RSI,RBP
            call .L_40a4a0

            test EAX,EAX
            jne .L_424c15
.L_424d6e:

            add R14,1
            cmp R15,R14
            jne .L_424d31

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            shr DL,3
            and EDX,2
            je .L_424eb4
.L_424d8b:

            mov EDX,EAX
            and EDX,7
            cmp DL,7
            je .L_424da6

            mov RSI,R12
            mov RDI,RBX
            call .L_4244e0

            movzx EAX,BYTE PTR [R12+26]
.L_424da6:

            shr AL,3
            test AL,8
            je .L_424ed5
.L_424db1:

            lea R13,QWORD PTR [RSP+16]
            xor EAX,EAX
            mov EDX,4294934782
            mov RSI,R12
            mov WORD PTR [RSP+30],AX
            mov WORD PTR [RSP+16],DX
            mov RDI,R13
            mov QWORD PTR [RSP+18],0
            mov DWORD PTR [RSP+26],0
            call .L_4101d0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_4180d0

            test EAX,EAX
            jne .L_424c15

            movzx ECX,WORD PTR [R12+24]
            lea RSI,QWORD PTR [RIP+.L_425bfa]
            mov RDX,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41c1f0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_424c25
          .byte 0x66
          .byte 0x90
.L_424e20:

            mov ECX,1
            mov EDI,1
            mov WORD PTR [RBX+4658],CX
            jmp .L_424cbb
.L_424e36:

            cmp AL,9
            jne .L_424d6e

            mov RSI,RBP
            mov RDI,RBX
            call .L_421830

            test EAX,EAX
            je .L_424d6e

            jmp .L_424c15
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424e60:

            movzx EDX,BYTE PTR [R12+26]
            mov RSI,RBP
            mov RDI,RBX
            shr DL,3
            not EDX
            and EDX,1
            call .L_4179e0

            test EAX,EAX
            je .L_424d6e

            jmp .L_424c15
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424e90:

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,RBP
            call .L_40a4a0

            test EAX,EAX
            je .L_424d6e

            jmp .L_424c15
.L_424eb4:

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_421200

            test EAX,EAX
            jne .L_424c15

            movzx EAX,BYTE PTR [R12+26]
            jmp .L_424d8b
.L_424ed5:

            lea RDI,QWORD PTR [R13+2504]
            xor EDX,EDX
            mov RSI,R12
            call .L_42d530

            jmp .L_424db1
.L_424eeb:

            call __stack_chk_fail@PLT
.L_424ef0:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            add RBP,16
            sub RSP,152
.L_424f11:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_433510

            xor ESI,ESI
            mov R14,QWORD PTR [RBP+24]
            xor EDX,EDX
            xor EDI,EDI
            mov WORD PTR [RSP+67],SI
            lea RSI,QWORD PTR [RIP+.L_425c11]
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov WORD PTR [RSP+70],DX
            mov WORD PTR [RSP+82],DI
            mov R13,RAX
            mov RDX,RBP
            xor EAX,EAX
            mov RDI,RBX
            mov WORD PTR [RSP+76],CX
            mov WORD PTR [RSP+96],AX
            mov WORD PTR [RSP+106],R8W
            mov WORD PTR [RSP+116],R9W
            mov WORD PTR [RSP+126],R10W
            mov WORD PTR [RSP+64],R11W
            call .L_41c1e0

            test BYTE PTR [RBX+4668],1
            je .L_425098

            test BYTE PTR [RBX+56],2
            je .L_425098

            cmp DWORD PTR [RBX+12],1
            jle .L_425098

            lea RAX,QWORD PTR [RSP+88]
            mov RDI,RBP
            mov RSI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_4101e0

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBX
            call .L_41cef0

            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            je .L_4250e0

            lea RCX,QWORD PTR [RSP+96]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_42509d

            cmp BYTE PTR [RSP+97],8
            jne .L_4250d0

            mov R9,QWORD PTR [RSP+8]
            lea RAX,QWORD PTR [R9+96]
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR [R9+96]
            cmp QWORD PTR [RSP+98],RAX
            jne .L_4250d0

            lea RBP,QWORD PTR [R13+2256]
            mov RSI,R9
            mov EDX,6
            mov RDI,RBP
            call .L_414bc0

            mov R9,QWORD PTR [RSP+8]
            mov RDI,RBP
            mov EDX,8
            mov RSI,R9
            call .L_414bc0

            mov R9,QWORD PTR [RSP+8]
            mov RDI,RBP
            mov EDX,9
            mov RSI,R9
            call .L_414bc0

            lea RCX,QWORD PTR [RSP+70]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_42509d

            cmp BYTE PTR [RSP+71],4
            mov R9,QWORD PTR [RSP+8]
            je .L_4250e7
.L_42508b:

            mov EBP,6
            jmp .L_42509d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425098:

            mov EBP,13
.L_42509d:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_4253e5

            add RSP,152
.L_4250bd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4250d0:

            mov EBP,8
            jmp .L_42509d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4250e0:

            mov EBP,24
            jmp .L_42509d
.L_4250e7:

            lea RCX,QWORD PTR [RSP+76]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            mov QWORD PTR [RSP+8],R9
            call .L_4339f0

            test EAX,EAX
            mov R9,QWORD PTR [RSP+8]
            jne .L_4253d8

            cmp BYTE PTR [RSP+77],4
            jne .L_42508b
.L_42511b:

            lea RCX,QWORD PTR [RSP+67]
            mov EDX,3
            mov ESI,1
            mov RDI,R12
            mov QWORD PTR [RSP+8],R9
            call .L_4339f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_42509d

            cmp BYTE PTR [RSP+68],1
            jne .L_42508b

            lea RCX,QWORD PTR [RSP+82]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_42509d

            cmp BYTE PTR [RSP+83],4
            mov R9,QWORD PTR [RSP+8]
            jne .L_42508b

            lea RAX,QWORD PTR [RSP+106]
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            mov QWORD PTR [RSP+24],R9
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4339f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_42509d

            cmp BYTE PTR [RSP+107],5
            mov R9,QWORD PTR [RSP+24]
            ja .L_42508b

            lea RAX,QWORD PTR [RSP+116]
            mov EDX,10
            mov ESI,22
            mov RDI,R12
            mov QWORD PTR [RSP+32],R9
            mov BYTE PTR [RSP+117],0
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4339f0

            test EAX,EAX
            mov R9,QWORD PTR [RSP+32]
            jne .L_4251f8

            cmp BYTE PTR [RSP+117],8
            jne .L_42508b
.L_4251f8:

            lea RAX,QWORD PTR [RSP+126]
            mov EDX,10
            mov ESI,23
            mov RDI,R12
            mov QWORD PTR [RSP+40],R9
            mov BYTE PTR [RSP+127],0
            mov RCX,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_4339f0

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            jne .L_425235

            cmp BYTE PTR [RSP+127],8
            jne .L_42508b
.L_425235:

            test BYTE PTR [RSP+69],2
            je .L_4253ea
.L_425240:

            lea RAX,QWORD PTR [RBX+752]
            xor R12D,R12D
            mov QWORD PTR [RSP+40],RAX
            jmp .L_42525b
.L_425251:

            add R12,1
            cmp R12,63
            je .L_4252ac
.L_42525b:

            movsxd RAX,R12D
            imul RAX,RAX,40
            test BYTE PTR [RBX+RAX*1+778],7
            je .L_425251

            imul RCX,R12,40
            mov RSI,QWORD PTR [RSP]
            mov QWORD PTR [RSP+56],R9
            add RCX,QWORD PTR [RSP+40]
            mov RDI,RCX
            mov QWORD PTR [RSP+48],RCX
            call .L_408da0

            test AL,AL
            mov RCX,QWORD PTR [RSP+48]
            mov R9,QWORD PTR [RSP+56]
            je .L_425251

            mov RSI,RCX
            mov RDI,RBX
            mov QWORD PTR [RSP],R9
            call .L_4221d0

            mov R9,QWORD PTR [RSP]
.L_4252ac:

            movzx EAX,BYTE PTR [R9+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            je .L_4254e6

            and EAX,4294967288
            or EAX,4
            mov BYTE PTR [R9+26],AL
.L_4252c9:

            mov QWORD PTR [RSP],R9
            call .L_401240

            mov R9,QWORD PTR [RSP]
            lea RDI,QWORD PTR [R13+1560]
            mov DWORD PTR [R9+8],EAX
            mov EAX,DWORD PTR [RSP+72]
            mov DWORD PTR [R9+20],R15D
            bswap EAX
            mov DWORD PTR [R9+12],EAX
            mov EAX,DWORD PTR [RSP+78]
            bswap EAX
            mov DWORD PTR [R9+16],EAX
            movzx EAX,BYTE PTR [RSP+69]
            and EAX,15
            lea EDX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [R9+26]
            and EAX,4294967175
            or EAX,EDX
            mov BYTE PTR [R9+26],AL
            movsx R12D,BYTE PTR [R14+3]
            call .L_4084f0

            mov R9,QWORD PTR [RSP]
            movsx ESI,AL
            mov EDX,R12D
            lea RDI,QWORD PTR [R9+28]
            call .L_414260

            mov EAX,DWORD PTR [RSP+84]
            test BYTE PTR [RSP+69],1
            mov R9,QWORD PTR [RSP]
            bswap EAX
            mov DWORD PTR [R9+92],EAX
            je .L_4254d9

            movzx EAX,BYTE PTR [RBX+7]
            mov BYTE PTR [R9+125],AL
.L_425354:

            mov RAX,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+8]
            mov DWORD PTR [R9+96],4294967295
            movzx R12D,BYTE PTR [RSP+107]
            mov BYTE PTR [RAX+4],255
            add RDX,2
            xor EAX,EAX
            jmp .L_425385
.L_425378:

            movzx ECX,BYTE PTR [RDX+RAX*1]
            mov BYTE PTR [R9+RAX*1+96],CL
            add RAX,1
.L_425385:

            cmp R12B,AL
            ja .L_425378

            cmp BYTE PTR [RSP+117],0
            jne .L_4254af
.L_425395:

            movzx EAX,R12B
            add R12D,1
            mov BYTE PTR [R9+RAX*1+96],24
.L_4253a3:

            cmp BYTE PTR [RSP+127],0
            jne .L_425485
.L_4253ae:

            movzx R12D,R12B
            mov BYTE PTR [R9+R12*1+96],25
.L_4253b8:

            cmp DWORD PTR [RBX+12],4
            ja .L_42509d

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_425d1c]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4253d8:

            mov EAX,DWORD PTR [RSP+72]
            mov DWORD PTR [RSP+78],EAX
            jmp .L_42511b
.L_4253e5:

            call __stack_chk_fail@PLT
.L_4253ea:

            lea RDX,QWORD PTR [RSP+64]
            mov ESI,19
            mov RDI,R12
            mov QWORD PTR [RSP+40],R9
            call .L_4338c0

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            je .L_425411
.L_42540a:

            mov EBP,EAX
            jmp .L_42509d
.L_425411:

            movzx EDX,WORD PTR [RSP+64]
            mov RCX,R9
            mov RSI,R12
            mov RDI,RBX
            call .L_41d740

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            je .L_425240

            jmp .L_42540a
.L_425433:

            movzx EAX,BYTE PTR [R9+26]
            mov ESI,3
            mov RDI,RBX
            and EAX,4294967288
            or EAX,4
            mov BYTE PTR [R9+26],AL
            call .L_41fed0

            jmp .L_42509d
.L_425454:

            lea RCX,QWORD PTR [RIP+.L_425e80]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,2321
            call __assert_fail@PLT
.L_425473:

            mov RSI,R9
            mov RDI,RBX
            call .L_424bc0

            mov EBP,EAX
            jmp .L_42509d
.L_425485:

            mov RSI,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R13+1208]
            mov QWORD PTR [RSP],R9
            add RSI,2
            call .L_40a480

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            jne .L_4253ae

            jmp .L_4253b8
.L_4254af:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+1080]
            mov QWORD PTR [RSP],R9
            add RSI,2
            call .L_40a480

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            jne .L_425395

            jmp .L_4253a3
.L_4254d9:

            movzx EAX,BYTE PTR [RBX+8]
            mov BYTE PTR [R9+125],AL
            jmp .L_425354
.L_4254e6:

            mov RSI,R9
            mov RDI,RBX
            mov QWORD PTR [RSP],R9
            call .L_4221d0

            mov R9,QWORD PTR [RSP]
            jmp .L_4252c9
.L_4254fe:

            nop
            nop
.L_425500:

            push R12
            push RBP
            xor R9D,R9D
            push RBX
            xor R10D,R10D
            xor R11D,R11D
            mov RBX,RDI
            sub RSP,32
.L_425514:

            and BYTE PTR [RDI+4668],253
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RSI,RSI
            mov WORD PTR [RSP+6],R9W
            mov WORD PTR [RSP+9],R10W
            sete DIL
            test RDX,RDX
            mov WORD PTR [RSP+13],R11W
            sete AL
            or DIL,AL
            jne .L_42555a

            test R8D,R8D
            jne .L_42555a

            cmp BYTE PTR [RSI+1],68
            je .L_425580
.L_42555a:

            mov RDI,RBX
            call .L_416700

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4258ed

            add RSP,32
.L_42557a:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_425580:

            mov RBP,RDX
            lea RSI,QWORD PTR [RIP+.L_425c2a]
            lea RDX,QWORD PTR [RCX+16]
            mov RDI,RBX
            call .L_41c1e0

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,3
            mov ESI,4
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42555a

            cmp BYTE PTR [RSP+7],1
            jne .L_42555a

            cmp BYTE PTR [RSP+8],0
            je .L_42564a

            cmp BYTE PTR [RBX+4670],62
            ja .L_42555a

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_425639

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,3
            ja .L_4258e0

            cmp DL,1
            je .L_4258e0

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_425634
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_425608:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,1
            je .L_4258e0

            cmp AL,3
            ja .L_4258e0
.L_425634:

            cmp RSI,RDX
            jne .L_425608
.L_425639:

            mov EAX,16191
            mov WORD PTR [RBX+4669],AX
            jmp .L_42555a
.L_42564a:

            lea RCX,QWORD PTR [RSP+9]
            mov EDX,4
            mov ESI,2
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42555a

            cmp BYTE PTR [RSP+10],2
            jne .L_42555a

            movzx R12D,WORD PTR [RSP+11]
            rol R12W,8
            movzx R12D,R12W
            sar R12D,10
            cmp R12D,63
            je .L_42555a

            lea RCX,QWORD PTR [RSP+13]
            mov EDX,11
            mov ESI,7
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_42555a

            cmp BYTE PTR [RSP+14],9
            jne .L_42555a

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            ja .L_425704

            cmp AL,R12B
            je .L_425704

            movzx ECX,BYTE PTR [RBX+3272]
            xor EAX,EAX
            jmp .L_425700
.L_4256d6:

            movsxd RDX,EAX
            add EAX,1
            imul RDX,RDX,136
            movzx EDX,BYTE PTR [RBX+RDX*1+3306]
            and EDX,7
            cmp DL,1
            je .L_4258f2

            cmp DL,3
            ja .L_4258f2
.L_425700:

            cmp CL,AL
            ja .L_4256d6
.L_425704:

            movsxd RBP,R12D
            mov RDI,RBX
            mov BYTE PTR [RBX+4669],R12B
            imul RBP,RBP,40
            mov BYTE PTR [RBX+4670],R12B
            call .L_433510

            mov RAX,QWORD PTR [RAX+1656]
            mov RDI,RBX
            add RBP,RBX
            mov QWORD PTR [RBP+752],RAX
            movzx ESI,BYTE PTR [RBX+4669]
            shl ESI,10
            movzx ESI,SI
            call .L_4223e0

            test EAX,EAX
            jne .L_42555a

            movzx EAX,BYTE PTR [RSP+15]
            and BYTE PTR [RBP+789],195
            mov BYTE PTR [RBX+744],AL
            call .L_401240

            xor ESI,ESI
            mov DWORD PTR [RBX+748],EAX
            mov R8D,128
.L_425774:

            movsxd RAX,ESI
            mov ECX,ESI
            lea RAX,QWORD PTR [RAX+RAX*4]
            and ECX,7
            lea RDI,QWORD PTR [RBX+RAX*8+784]
            mov EAX,ESI
            shr AL,3
            and EAX,31
            movzx EDX,BYTE PTR [RSP+RAX*1+16]
            mov EAX,R8D
            sar EAX,CL
            test EDX,EAX
            setne AL
            add ESI,1
            shl EAX,6
            mov EDX,EAX
            movzx EAX,BYTE PTR [RDI+5]
            and EAX,4294967231
            or EAX,EDX
            cmp ESI,63
            mov BYTE PTR [RDI+5],AL
            jne .L_425774

            movzx EAX,WORD PTR [RBX+40]
            lea RSI,QWORD PTR [RBX+16]
            mov ECX,38
            sar EAX,10
            cdqe 
            imul RAX,RAX,40
            add RAX,RBX
            lea RDX,QWORD PTR [RAX+752]
            mov RDI,RDX

            rep movsb 

            lea RCX,QWORD PTR [RAX+784]
            mov BYTE PTR [RAX+788],63
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+789]
            mov EAX,EDX
            or EAX,64
            and EAX,4294967235
            mov BYTE PTR [RCX+5],AL
            call .L_4171f0

            movzx EDX,WORD PTR [RBX+40]
            sar EDX,10
            cmp AL,DL
            je .L_425878

            mov RDI,RBX
            call .L_4171f0

            movzx EAX,AL
            mov RDI,RBX
            imul RAX,RAX,40
            lea RCX,QWORD PTR [RBX+RAX*1+784]
            movzx EAX,BYTE PTR [RBX+150]
            and EAX,15
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967235
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            call .L_4171f0

            movzx EAX,AL
            mov RDI,RBX
            imul RAX,RAX,40
            or BYTE PTR [RBX+RAX*1+789],64
            call .L_4171f0

            movzx EDX,WORD PTR [RBX+40]
            movzx EAX,AL
            imul RAX,RAX,40
            sar EDX,10
            mov BYTE PTR [RBX+RAX*1+788],DL
.L_425878:

            xor ESI,ESI
            mov RDI,RBX
            xor EBP,EBP
            call .L_41cb80

            lea R12,QWORD PTR [RBX+3280]
            movzx EDX,BYTE PTR [RBX+3272]
            jmp .L_4258a0
.L_425894:

            cmp AL,5
            je .L_4258ff

            cmp AL,3
            je .L_4258ff
.L_42589c:

            add RBP,1
.L_4258a0:

            cmp EDX,EBP
            jle .L_42555a

            movsxd RAX,EBP
            imul RAX,RAX,136
            movzx EAX,BYTE PTR [RBX+RAX*1+3306]
            and EAX,7
            cmp AL,4
            jne .L_425894

            imul RSI,RBP,136
            mov RDI,RBX
            add RSI,R12
            call .L_424bc0

            movzx EDX,BYTE PTR [RBX+3272]
            jmp .L_42589c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4258e0:

            mov RDI,RBX
            call .L_424100

            jmp .L_425639
.L_4258ed:

            call __stack_chk_fail@PLT
.L_4258f2:

            mov RDI,RBX
            call .L_424100

            jmp .L_425704
.L_4258ff:

            lea RCX,QWORD PTR [RIP+.L_425e00]
            lea RSI,QWORD PTR [RIP+.L_425a23]
            lea RDI,QWORD PTR [RIP+.L_425a48]
            mov EDX,4318
            call __assert_fail@PLT
.L_42591e:

            nop
            nop
.L_425920:

            jmp .L_425500
.L_425925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425930:

            movzx EAX,BYTE PTR [RDX+26]
            mov ECX,EAX
            and ECX,7
            lea R8D,DWORD PTR [RCX-6]
            cmp R8B,1
            setbe R8B
            cmp CL,1
            sete CL
            or R8B,CL
            je .L_425957

            shr AL,3
            test AL,8
            je .L_425960
.L_425957:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425960:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDX
            sub RSP,8
            call .L_4334e0

            add RSP,8
            mov RDX,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            mov RSI,RAX
            jmp .L_42e040
.L_425985:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425990:

            cmp BYTE PTR [RDI+3272],0
            je .L_425a16

            push R12
            mov R12,RSI
            push RBP
            mov RBP,RDI
            push RBX
.L_4259a3:

            xor EBX,EBX
            nop
            nop
            nop
.L_4259a8:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_4259cc

            cmp AL,1
            jne .L_425a04
.L_4259cc:

            mov RAX,RDX
            shl RAX,4
            add RDX,RAX
            test BYTE PTR [RBP+RDX*8+3306],64
            jne .L_425a04

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [RBP+RAX*8+3280]
            call .L_425930

            test AL,AL
            jne .L_425a11
.L_425a04:

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            ja .L_4259a8

            xor EAX,EAX
.L_425a11:

            pop RBX
.L_425a12:

            pop RBP
            pop R12
            ret 
.L_425a16:

            xor EAX,EAX
            ret 
.L_425a19:
          .string "a/as"
.L_425a1e:
          .string "a/ar"
.L_425a23:
          .string "thread/mle_router.cpp"
.L_425a39:
          .string "router != NULL"
.L_425a48:
          .string "false"
.L_425a4e:
          .string "Send Link Request"
.L_425a60:
          .string "Delay Discovery Response"
.L_425a79:
          .string "Receive Discovery Request"
.L_425a93:
          .string "Delay Data Response"
.L_425aa7:
          .string "Send Data Response"
.L_425aba:
          .string "Receive Data Request"
.L_425acf:
          .string "Send Address Solicit"
.L_425ae4:
          .string "Send Address Release"
.L_425af9:
          .string "Send Address Reply"
.L_425b0c:
          .string "Receive Address Solicit"
.L_425b24:
          .string "Receive Address Release"
.L_425b3c:
          .string "Send Address Release Reply"
.L_425b57:
          .string "Delay Parent Response"
.L_425b6d:
          .string "Receive Parent Request"
.L_425b84:
          .string "Send Advertisement"
.L_425b97:
          .string "Delay Link Accept"
.L_425ba9:
          .string "Send Link Accept"
.L_425bba:
          .string "error == OT_ERROR_NONE"
.L_425bd1:
          .string "Receive Link Request"
.L_425be6:
          .string "Receive Link Accept"
.L_425bfa:
          .string "Send Child ID Response"
.L_425c11:
          .string "Receive Child ID Request"
.L_425c2a:
          .string "Receive Address Reply"
.L_425c40:
          .long .L_41ce05-.L_425c40
          .long .L_41cd30-.L_425c40
          .long .L_41cc75-.L_425c40
          .long .L_41cc40-.L_425c40
          .long .L_41cc40-.L_425c40
.L_425c54:
          .long .L_420b2a-.L_425c54
          .long .L_420b2a-.L_425c54
          .long .L_4207cb-.L_425c54
          .long .L_4208e9-.L_425c54
          .long .L_4209d8-.L_425c54
.L_425c68:
          .long .L_421028-.L_425c68
          .long .L_421028-.L_425c68
          .long .L_420f86-.L_425c68
          .long .L_4210d9-.L_425c68
          .long .L_4210d9-.L_425c68
.L_425c7c:
          .long .L_4215c8-.L_425c7c
          .long .L_4215e0-.L_425c7c
          .long .L_4215a8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_421580-.L_425c7c
          .long .L_421560-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_421540-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_421528-.L_425c7c
          .long .L_421440-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_421508-.L_425c7c
          .long .L_4214b8-.L_425c7c
          .long .L_4214a0-.L_425c7c
.L_425ccc:
          .long .L_42320d-.L_425ccc
          .long .L_423195-.L_425ccc
          .long .L_422ef0-.L_425ccc
          .long .L_42306f-.L_425ccc
          .long .L_42306f-.L_425ccc
.L_425ce0:
          .long .L_4234d0-.L_425ce0
          .long .L_4234d0-.L_425ce0
          .long .L_4238f7-.L_425ce0
          .long .L_4237a1-.L_425ce0
          .long .L_42388c-.L_425ce0
.L_425cf4:
          .long .L_42408d-.L_425cf4
          .long .L_423f96-.L_425cf4
          .long .L_423fba-.L_425cf4
          .long .L_424037-.L_425cf4
          .long .L_423f66-.L_425cf4
.L_425d08:
          .long .L_42408d-.L_425d08
          .long .L_423f96-.L_425d08
          .long .L_423cb9-.L_425d08
          .long .L_423cb9-.L_425d08
          .long .L_423f66-.L_425d08
.L_425d1c:
          .long .L_425454-.L_425d1c
          .long .L_425454-.L_425d1c
          .long .L_425433-.L_425d1c
          .long .L_425473-.L_425d1c
          .long .L_425473-.L_425d1c
.L_425d30:
          .byte 0x4
          .byte 0x2
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425d40:

            jbe .L_425db1
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x69
          .byte 0x67
          .byte 0x6e
          .byte 0x61
          .byte 0x6c
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x64
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x54
          .byte 0x68
          .byte 0x72
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x54
          .byte 0x61
          .byte 0x62
          .byte 0x6c
          .byte 0x65
          .byte 0x45
          .byte 0x76
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x2c
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425da0:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
.L_425db1:

            push RDX
            outsd DX,DWORD PTR [RSI]
            jne .L_425e29

            jb .L_425df2
          .byte 0x3a
          .byte 0x46
          .byte 0x69
          .byte 0x6c
          .byte 0x6c
          .byte 0x43
          .byte 0x6f
          .byte 0x6e
          .byte 0x6e
          .byte 0x65
          .byte 0x63
          .byte 0x74
          .byte 0x69
          .byte 0x76
          .byte 0x69
          .byte 0x74
          .byte 0x79
          .byte 0x54
          .byte 0x6c
          .byte 0x76
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x43
          .byte 0x6f
          .byte 0x6e
          .byte 0x6e
          .byte 0x65
          .byte 0x63
          .byte 0x74
          .byte 0x69
          .byte 0x76
          .byte 0x69
          .byte 0x74
          .byte 0x79
          .byte 0x54
          .byte 0x6c
          .byte 0x76
          .byte 0x26
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425df2:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_425e00:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x41
          .byte 0x64
          .byte 0x64
          .byte 0x72
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x53
          .byte 0x6f
          .byte 0x6c
.L_425e29:

            imul ESP,DWORD PTR [RBX+105],1936020084
          .byte 0x70
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x65
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x43
          .byte 0x6f
          .byte 0x61
          .byte 0x70
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x2a
          .byte 0x2c
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x2a
          .byte 0x2c
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x70
          .byte 0x36
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x49
          .byte 0x6e
          .byte 0x66
          .byte 0x6f
          .byte 0x2a
          .byte 0x2c
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x45

            jb .L_425eeb

            outsd DX,DWORD PTR [RSI]
          .byte 0x72
          .byte 0x29

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_425e80:

            outsd DX,DWORD PTR [RSI]
            je .L_425ec8

            jb .L_425ef7

            outsd DX,DWORD PTR [RSI]
            jb .L_425ea8
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x49
.L_425ea8:

            push RDX
            jno .L_425f22

            jae .L_425f24

            sub BYTE PTR [RBX+111],AH
            outsb DX,BYTE PTR [RSI]
            jae .L_425f2a

            and BYTE PTR [RDI+116],CH
            cmp BH,BYTE PTR [RDX]
            jae .L_425f32
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
.L_425ec8:

            jae .L_425f3e
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x70
          .byte 0x36

            cmp BH,BYTE PTR [RDX]
            jae .L_425f4b
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x49
          .byte 0x6e
          .byte 0x66
          .byte 0x6f
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33
          .byte 0x32
          .byte 0x5f
          .byte 0x74
          .byte 0x29
.L_425eeb:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_425ef7:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RSI+111],DH
            imul ESP,DWORD PTR [RAX+111],1295661684
            insb BYTE PTR [RDI],DX
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            push RDX
            outsd DX,DWORD PTR [RSI]
            jne .L_425f89

            jb .L_425f52

            cmp CL,BYTE PTR [RAX+97]
            outsb DX,BYTE PTR [RSI]
            insb BYTE PTR [RDI],DX
            push RBX
            je .L_425f83
.L_425f22:

            je .L_425f89
.L_425f24:

            push RBP
            jo .L_425f8b
          .byte 0x61
          .byte 0x74
          .byte 0x65
.L_425f2a:

            push RSP
            imul EBP,DWORD PTR [RBP+101],2697330
.L_425f32:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_425f3e:

            add BYTE PTR [RAX],AL
.L_425f40:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
.L_425f4b:

            cmp CL,BYTE PTR [RBP+108]
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
# WARNING: found overlapping blocks at address 25d22
.set .L_425f52, . - 1

          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x4c
          .byte 0x69
          .byte 0x6e
          .byte 0x6b
          .byte 0x41
          .byte 0x63
          .byte 0x63
          .byte 0x65
          .byte 0x70
          .byte 0x74
          .byte 0x28
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20

            outsd DX,DWORD PTR [RSI]
            je .L_425fb0
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x63
          .byte 0x6f
.L_425f83:

            outsb DX,BYTE PTR [RSI]
            jae .L_425ffa

            and BYTE PTR [RDI+116],CH
.L_425f89:

            cmp BH,BYTE PTR [RDX]
.L_425f8b:

            jo .L_425fc4

            cmp BH,BYTE PTR [RDX]
            jae .L_426007
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x49
          .byte 0x6e
          .byte 0x66
          .byte 0x6f
          .byte 0x26
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33
          .byte 0x32
          .byte 0x5f
          .byte 0x74
          .byte 0x2c
          .byte 0x20
          .byte 0x62
          .byte 0x6f
          .byte 0x6f
          .byte 0x6c
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425fb0:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_425fc0:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
.L_425fc4:

            jb .L_426035

            jb .L_425fe8
          .byte 0x6f
          .byte 0x74
          .byte 0x3a

            cmp CL,BYTE PTR [RBP+108]
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            push RDX
            outsd DX,DWORD PTR [RSI]
          .byte 0x75
          .byte 0x74

            jb .L_426015

            cmp DL,BYTE PTR [RBX+101]
            outsb DX,BYTE PTR [RSI]
            imul R13,QWORD PTR FS:[RSI+107],1970365778
.L_425fe8:

            jae .L_42605f
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x69
          .byte 0x67
          .byte 0x68
          .byte 0x62
          .byte 0x6f
          .byte 0x72
          .byte 0x2a
          .byte 0x29
.L_425ffa:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_426000:
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
.L_426007:

            and BYTE PTR [RDI+116],CH
            cmp BH,BYTE PTR [RDX]
            insb BYTE PTR [RDI],DX
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            push RDX
.L_426015:

            outsd DX,DWORD PTR [RSI]
            jne .L_42608c

            jb .L_426055
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x6e
          .byte 0x64
          .byte 0x41
          .byte 0x64
          .byte 0x76
          .byte 0x65

            jb .L_42609a

            imul ESI,DWORD PTR [RBX+101],1953391981
            sub BYTE PTR [RCX],CH
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_426035:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RDI+116],CH
            jb .L_4260b7
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a

            cmp CL,BYTE PTR [RBP+108]
            cmp BH,BYTE PTR GS:[RDX]
            insb BYTE PTR [RDI],DX
            push RDX
.L_426055:

            outsd DX,DWORD PTR [RSI]
            jne .L_4260cc
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x42
          .byte 0x65
          .byte 0x63
.L_42605f:

            outsd DX,DWORD PTR [RSI]
            insd DWORD PTR [RDI],DX
            push RDX
            outsd DX,DWORD PTR [RSI]
            jne .L_4260da

            jb .L_426091
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x54
          .byte 0x68
          .byte 0x72
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x53
          .byte 0x74
          .byte 0x61
          .byte 0x74
          .byte 0x75
          .byte 0x73
          .byte 0x54
          .byte 0x6c
          .byte 0x76
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x74
          .byte 0x61
          .byte 0x74
          .byte 0x75
          .byte 0x73
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42608c:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
          .zero 1
.L_426091:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
          .zero 5
.L_42609a:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_4260a0:
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6c
          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
.L_4260b7:

            je .L_42611e
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x41
          .byte 0x6c
          .byte 0x6c
          .byte 0x6f
          .byte 0x63
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x52
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x49
          .byte 0x64
.L_4260cc:

            sub BYTE PTR [RBP+105],DH
            outsb DX,BYTE PTR [RSI]
            je .L_42610a

            pop RDI
            je .L_4260fe

            add BYTE PTR [RDX],AL
            adc ECX,DWORD PTR [RSP+RCX*1]
.L_4260da:

            adc BYTE PTR [RAX],DL
            or DWORD PTR [RAX],EDX
.L_4260de:

            or CL,BYTE PTR [RCX]
.L_4260e0:

            push RBX
            outsb DX,BYTE PTR GS:[RSI]
            and BYTE PTR FS:[RBX+104],AL
            imul EBP,DWORD PTR [RSP+32],1633972309
            je .L_426156

            and BYTE PTR [RDX+101],DL
            jno .L_42616b
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x74
          .byte 0x6f
          .byte 0x20
          .byte 0x63
.L_4260fe:

            push 6581353
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RBX+101],DL
.L_42610a:

            outsb DX,BYTE PTR [RSI]
          .byte 0x64
          .byte 0x20
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x20
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65

            and BYTE PTR [RDX+101],DL
            jae .L_42618e
.L_42611e:

            outsd DX,DWORD PTR [RSI]
            outsb DX,BYTE PTR [RSI]
            jae .L_426187
          .byte 0x20
          .byte 0x74
          .byte 0x6f
          .byte 0x20
          .byte 0x63
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426130:
          .string "Receive Link Accept and Request"
.L_426150:
          .byte 0x52
          .byte 0x65
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
.L_426156:

            and BYTE PTR GS:[RBX+104],AL
            imul EBP,DWORD PTR [RSP+32],1633972309
            je .L_4261c9
          .byte 0x20
          .byte 0x52
          .byte 0x65
          .byte 0x71
          .byte 0x75

            jae .L_4261e0
# WARNING: found overlapping blocks at address 25f3b
.set .L_42616b, . - 1

# WARNING: found overlapping blocks at address 25f3c
          .byte 0x66
          .byte 0x72
          .byte 0x6f
          .byte 0x6d
          .byte 0x20
          .byte 0x63
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x0
# WARNING: found overlapping blocks at address 25f3d
.L_426178:
          .byte 0x52
          .byte 0x65
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x20
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x20
          .byte 0x55
# WARNING: found overlapping blocks at address 25f48
.L_426187:

            jo .L_4261ed
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x20
.L_42618d:

            push RDX
.L_42618e:

            jae .L_426201
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x65
          .byte 0x20
          .byte 0x66
          .byte 0x72
          .byte 0x6f
          .byte 0x6d
          .byte 0x20
          .byte 0x75
          .byte 0x6e
          .byte 0x6b
          .byte 0x6e
          .byte 0x6f
          .byte 0x77
          .byte 0x6e
          .byte 0x20
          .byte 0x63
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4261b0:
          .byte 0x52
          .byte 0x65
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x20
          .byte 0x43
          .byte 0x68
          .byte 0x69
          .byte 0x6c
          .byte 0x64
          .byte 0x20
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x20
          .byte 0x52
          .byte 0x65
          .byte 0x73
          .byte 0x70
.L_4261c9:

            outsd DX,DWORD PTR [RSI]
            outsb DX,BYTE PTR [RSI]
            jae .L_426232

            and BYTE PTR [RSI+114],AH
            outsd DX,DWORD PTR [RSI]
            insd DWORD PTR [RDI],DX
            and BYTE PTR [RBX+104],AH
            imul EBP,DWORD PTR [RSP],8396559
            add BYTE PTR [RAX],AL
          .zero 1
.L_4261e0:

            mov BYTE PTR [RDI+256],DL
            mov BYTE PTR [RDI+257],0
.L_4261ed:

            mov DWORD PTR [RDI+260],0
            mov BYTE PTR [RDI+255],0
            ret 
.L_4261ff:

            nop
.L_426200:
          .byte 0xc6
.L_426201:

            xchg EDI,EDI
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            ret 
.L_426208:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426210:

            push R14
            movzx EAX,BYTE PTR [RSI]
            movzx R14D,BYTE PTR [RDI+255]
            push R13
            push R12
            push RBP
            push RBX
.L_426223:

            add RAX,RDI
            add R14,RDI
            cmp RAX,R14
            jae .L_426272
.L_42622e:

            lea R8,QWORD PTR [RAX+2]
.L_426232:

            cmp R14,R8
            jb .L_426510

            movzx R8D,BYTE PTR [RAX+1]
            lea R12,QWORD PTR [RAX+R8*1+2]
            cmp R14,R12
            jb .L_426510

            movzx R8D,BYTE PTR [RAX]
            sar R8D,1
            cmp R8D,1
            je .L_426280
.L_42625b:

            movzx R8D,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+R8*1+2]
            xor R8D,R8D
            mov WORD PTR [RSI+1],R8W
            cmp R14,RAX
            ja .L_42622e
.L_426272:

            mov EAX,23
            jmp .L_4264d4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426280:

            movzx R8D,BYTE PTR [RAX+3]
            movzx R9D,BYTE PTR [RSI+1]
            add R8D,7
            sar R8D,3
            movsxd R8,R8D
            lea RBX,QWORD PTR [R8+R9*1+4]
            add RBX,RAX
            cmp RBX,R12
            jae .L_42625b

            lea R8,QWORD PTR [RBX+2]
            cmp R12,R8
            jb .L_426510

            movzx R8D,BYTE PTR [RBX+1]
            lea R13,QWORD PTR [RBX+R8*1+2]
            mov RBP,R8
            cmp R13,R12
            ja .L_426510

            movzx R8D,BYTE PTR [RBX]
            sar R8D,1
            cmp R8D,2
            je .L_426311
.L_4262d2:

            cmp R12,R13
            mov BYTE PTR [RSI+2],0
            jbe .L_42625b

            lea R8,QWORD PTR [R13+2]
            cmp R12,R8
            jb .L_426510

            movzx R8D,BYTE PTR [R13+1]
            mov RBX,R13
            mov RBP,R8
            lea R8,QWORD PTR [R13+R8*1+2]
            cmp R8,R12
            ja .L_426510

            mov R13,R8
            movzx R8D,BYTE PTR [RBX]
            sar R8D,1
            cmp R8D,2
            jne .L_4262d2
.L_426311:

            movzx R8D,BYTE PTR [RSI+2]
            shr BPL,2
            cmp R8B,BPL
            jae .L_4262d2

            lea R10,QWORD PTR [RBX+2]
            movzx R9D,R8B
            cmp DX,-1
            lea R11,QWORD PTR [R10+R9*4]
            je .L_426373

            movzx R9D,WORD PTR [R11]
            rol R9W,8
            cmp DX,R9W
            je .L_426373

            lea R9D,DWORD PTR [R8+1]
            movzx R9D,R9B
            lea R10,QWORD PTR [R10+R9*4]
            nop
            nop
            nop
            nop
.L_426350:

            add R8D,1
            cmp R8B,BPL
            je .L_4262d2

            mov R11,R10
            add R10,4
            movzx R9D,WORD PTR [R11]
            rol R9W,8
            cmp DX,R9W
            jne .L_426350
.L_426373:

            pxor XMM0,XMM0
            mov QWORD PTR [RCX+16],0
            lea R9,QWORD PTR [RAX+4]
            movups XMMWORD PTR [RCX],XMM0
            movzx EDX,BYTE PTR [RAX+3]
            add EDX,7
            sar EDX,3
            cmp EDX,8
            jb .L_4264e0

            mov R10,QWORD PTR [RAX+4]
            mov QWORD PTR [RCX],R10
            mov R10D,EDX
            mov RBP,QWORD PTR [R9+R10*1-8]
            mov QWORD PTR [RCX+R10*1-8],RBP
            lea R10,QWORD PTR [RCX+8]
            mov RBP,RCX
            and R10,-8
            sub RBP,R10
            add EDX,EBP
            sub R9,RBP
            and EDX,4294967288
            cmp EDX,8
            jb .L_4263e0

            and EDX,4294967288
            xor EBP,EBP
.L_4263cd:

            mov R12D,EBP
            add EBP,8
            mov R13,QWORD PTR [R9+R12*1]
            cmp EBP,EDX
            mov QWORD PTR [R10+R12*1],R13
            jb .L_4263cd

            nop
.L_4263e0:

            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RCX+16],DL
            movsx R10D,BYTE PTR [R11+2]
            mov R9D,R10D
            movzx R10D,BYTE PTR [RCX+17]
            shr R9B,6
            and R10D,4294967292
            or R10D,R9D
            mov BYTE PTR [RCX+17],R10B
            movzx R9D,BYTE PTR [R11+2]
            and R10D,4294967291
            shr R9B,3
            and R9D,4
            or R9D,R10D
            mov BYTE PTR [RCX+17],R9B
            movzx EDX,BYTE PTR [R11+2]
            and R9D,4294967287
            shr DL,1
            and EDX,8
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx R14D,BYTE PTR [R11+2]
            and EDX,4294967279
            lea R10D,DWORD PTR [R14+R14*1]
            and R10D,16
            or R10D,EDX
            mov BYTE PTR [RCX+17],R10B
            movzx EDX,BYTE PTR [R11+2]
            and R10D,4294967263
            lea R9D,DWORD PTR [RDX*8]
            and R9D,32
            or R9D,R10D
            mov BYTE PTR [RCX+17],R9B
            movzx EDX,BYTE PTR [R11+2]
            and R9D,4294967231
            shl EDX,5
            and EDX,64
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx R9D,BYTE PTR [R11+2]
            and EDX,127
            shl R9D,7
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx EDX,BYTE PTR [RCX+18]
            movzx R9D,BYTE PTR [RBX]
            and EDX,4294967294
            and R9D,1
            or EDX,R9D
            mov BYTE PTR [RCX+18],DL
            movzx EDX,WORD PTR [R11]
            rol DX,8
            mov WORD PTR [RCX+20],DX
            mov RDX,RAX
            sub RDX,RDI
            mov BYTE PTR [RSI],DL
            movzx EDX,BYTE PTR [RAX+3]
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            lea RAX,QWORD PTR [RAX+RDX*1+4]
            sub RBX,RAX
            add R8D,1
            xor EAX,EAX
            mov BYTE PTR [RSI+1],BL
            mov BYTE PTR [RSI+2],R8B
.L_4264d4:

            pop RBX
.L_4264d5:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4264e0:

            test DL,4
            jne .L_42651e

            test EDX,EDX
            je .L_4263e0

            movzx R10D,BYTE PTR [R9]
            test DL,2
            mov BYTE PTR [RCX],R10B
            je .L_4263e0

            movzx R9D,WORD PTR [R9+RDX*1-2]
            mov WORD PTR [RCX+RDX*1-2],R9W
            jmp .L_4263e0
          .byte 0x66
          .byte 0x90
.L_426510:

            pop RBX
            mov EAX,6
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42651e:

            mov R10D,DWORD PTR [R9]
            mov DWORD PTR [RCX],R10D
            mov R9D,DWORD PTR [R9+RDX*1-4]
            mov DWORD PTR [RCX+RDX*1-4],R9D
            jmp .L_4263e0
.L_426533:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426540:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_426210
.L_42654d:

            nop
            nop
            nop
.L_426550:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_42655e:

            movzx EBX,BYTE PTR [RSI]
            movzx R13D,BYTE PTR [RDI+255]
            add RBX,RDI
            add R13,RDI
            cmp RBX,R13
            jae .L_4265b1
.L_426574:

            lea RAX,QWORD PTR [RBX+2]
            cmp R13,RAX
            jb .L_426820

            movzx EAX,BYTE PTR [RBX+1]
            lea R11,QWORD PTR [RBX+RAX*1+2]
            cmp R13,R11
            jb .L_426820

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_4265c0
.L_42659d:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            xor EAX,EAX
            mov WORD PTR [RSI+1],AX
            cmp R13,RBX
            ja .L_426574
.L_4265b1:

            mov EAX,23
            jmp .L_4267e1
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4265c0:

            movzx EAX,BYTE PTR [RBX+3]
            movzx R8D,BYTE PTR [RSI+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea R12,QWORD PTR [RAX+R8*1+4]
            add R12,RBX
            cmp R12,R11
            jae .L_42659d

            lea RAX,QWORD PTR [R12+2]
            cmp R11,RAX
            jb .L_426820

            movzx R8D,BYTE PTR [R12+1]
            lea R14,QWORD PTR [R12+R8*1+2]
            mov RAX,R8
            cmp R14,R11
            ja .L_426820
.L_426603:

            test BYTE PTR [R12],254
            jne .L_42667c

            lea R10D,DWORD PTR [RAX+RAX*8]
            movzx EBP,BYTE PTR [RSI+2]
            lea EAX,DWORD PTR [RAX+R10*2]
            lea R10D,DWORD PTR [RAX+RAX*8]
            shr R10W,9
            cmp BPL,R10B
            jae .L_42667c

            movzx EAX,BPL
            lea R8,QWORD PTR [R12+2]
            lea R9,QWORD PTR [RAX+RAX*2]
            add R9,R8
            cmp DX,-1
            je .L_4266c0

            movzx EAX,WORD PTR [R9]
            rol AX,8
            cmp DX,AX
            je .L_4266c0

            lea EAX,DWORD PTR [RBP+1]
            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*2]
            add R8,RAX
            jmp .L_426674
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426660:

            mov R9,R8
            add R8,3
            movzx EAX,WORD PTR [R9]
            rol AX,8
            cmp DX,AX
            je .L_4266c0
.L_426674:

            add EBP,1
            cmp BPL,R10B
            jne .L_426660
.L_42667c:

            cmp R11,R14
            mov BYTE PTR [RSI+2],0
            jbe .L_42659d

            lea RAX,QWORD PTR [R14+2]
            cmp R11,RAX
            jb .L_426820

            movzx R8D,BYTE PTR [R14+1]
            mov R12,R14
            mov RAX,R8
            lea R8,QWORD PTR [R14+R8*1+2]
            cmp R8,R11
            ja .L_426820

            mov R14,R8
            jmp .L_426603
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4266c0:

            pxor XMM0,XMM0
            mov QWORD PTR [RCX+16],0
            lea RDX,QWORD PTR [RBX+4]
            movups XMMWORD PTR [RCX],XMM0
            movzx EAX,BYTE PTR [RBX+3]
            add EAX,7
            sar EAX,3
            cmp EAX,8
            jb .L_4267f0

            mov R8,QWORD PTR [RBX+4]
            mov QWORD PTR [RCX],R8
            mov R8D,EAX
            mov R10,QWORD PTR [RDX+R8*1-8]
            mov QWORD PTR [RCX+R8*1-8],R10
            lea R8,QWORD PTR [RCX+8]
            mov R10,RCX
            and R8,-8
            sub R10,R8
            add EAX,R10D
            sub RDX,R10
            and EAX,4294967288
            cmp EAX,8
            jb .L_426730

            and EAX,4294967288
            xor R10D,R10D
.L_42671c:

            mov R11D,R10D
            add R10D,8
            mov R13,QWORD PTR [RDX+R11*1]
            cmp R10D,EAX
            mov QWORD PTR [R8+R11*1],R13
            jb .L_42671c
.L_426730:

            movzx EAX,BYTE PTR [RBX+3]
            mov R14,RCX
            mov R13,RSI
            mov QWORD PTR [RSP+8],RDI
            mov BYTE PTR [RCX+16],AL
            movsx EAX,BYTE PTR [R9+2]
            mov ECX,EAX
            movzx EAX,BYTE PTR [R14+20]
            shr CL,6
            and EAX,4294967292
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            movzx ECX,BYTE PTR [R12]
            and EAX,4294967291
            and ECX,1
            shl ECX,2
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            movzx EAX,WORD PTR [R9]
            rol AX,8
            mov WORD PTR [R14+18],AX
            movzx R15D,WORD PTR [R9]
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            rol R15W,8
            call .L_416dd0

            cmp AX,R15W
            mov RDX,QWORD PTR [RSP+8]
            sete AL
            add EBP,1
            lea ECX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [R14+20]
            and EAX,4294967287
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            mov RAX,RBX
            sub RAX,RDX
            mov BYTE PTR [R13],AL
            movzx EAX,BYTE PTR [RBX+3]
            mov BYTE PTR [R13+2],BPL
            add EAX,7
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RBX+RAX*1+4]
            sub R12,RAX
            xor EAX,EAX
            mov BYTE PTR [R13+1],R12B
.L_4267e1:

            add RSP,24
.L_4267e5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4267f0:

            test AL,4
            jne .L_426834

            test EAX,EAX
            je .L_426730

            movzx R8D,BYTE PTR [RDX]
            test AL,2
            mov BYTE PTR [RCX],R8B
            je .L_426730

            movzx EDX,WORD PTR [RDX+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_426730
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426820:

            add RSP,24
            mov EAX,6
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_426834:

            mov R8D,DWORD PTR [RDX]
            mov DWORD PTR [RCX],R8D
            mov EDX,DWORD PTR [RDX+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_426730
.L_426847:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426850:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_426550
.L_42685d:

            nop
            nop
            nop
.L_426860:

            push RBP
            push RBX
.L_426862:

            mov RBX,RDI
            movzx R9D,BYTE PTR [RSI]
            add R9,RDI
            movzx EDI,BYTE PTR [RDI+255]
            add RDI,RBX
            cmp R9,RDI
            jae .L_426bb0

            lea RAX,QWORD PTR [R9+2]
            cmp RDI,RAX
            jb .L_426985

            movzx EAX,BYTE PTR [R9+1]
            mov R11,RCX
            mov R10,RSI
            lea RCX,QWORD PTR [R9+RAX*1+2]
            cmp RDI,RCX
            jb .L_426985

            movzx EAX,BYTE PTR [R9]
            sar EAX,1
            cmp EAX,5
            je .L_4268ee
.L_4268b0:

            cmp RDI,RCX
            mov BYTE PTR [R10+1],0
            jbe .L_426bb0

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_426985

            movzx EAX,BYTE PTR [RCX+1]
            mov R9,RCX
            lea RAX,QWORD PTR [RCX+RAX*1+2]
            cmp RDI,RAX
            jb .L_426985

            mov RCX,RAX
            movzx EAX,BYTE PTR [R9]
            sar EAX,1
            cmp EAX,5
            jne .L_4268b0
.L_4268ee:

            cmp BYTE PTR [R9+2],0
            lea RBP,QWORD PTR [R9+3]
            js .L_426990

            lea RSI,QWORD PTR [R9+7]
            mov R8D,4
.L_426907:

            movzx EAX,BYTE PTR [R10+1]
            lea R8,QWORD PTR [R8+RAX*1+1]
            movzx EAX,BYTE PTR [RSI]
            add R8,RAX
            add R8,RBP
            cmp R8,RCX
            jae .L_4268b0

            lea RAX,QWORD PTR [R8+2]
            cmp RCX,RAX
            jb .L_426985

            movzx EAX,BYTE PTR [R8+1]
            lea RAX,QWORD PTR [R8+RAX*1+2]
            cmp RAX,RCX
            jbe .L_426954

            jmp .L_426985
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426940:

            movzx ESI,BYTE PTR [RAX+1]
            mov R8,RAX
            lea RSI,QWORD PTR [RAX+RSI*1+2]
            cmp RSI,RCX
            ja .L_426985

            mov RAX,RSI
.L_426954:

            movzx ESI,BYTE PTR [R8]
            sar ESI,1
            cmp ESI,6
            jne .L_426973

            cmp DX,-1
            je .L_4269a0

            movzx ESI,WORD PTR [R8+2]
            rol SI,8
            cmp DX,SI
            je .L_4269a0
.L_426973:

            cmp RAX,RCX
            jae .L_4268b0

            lea RSI,QWORD PTR [RAX+2]
            cmp RCX,RSI
            jae .L_426940
.L_426985:

            mov EAX,6
.L_42698a:

            pop RBX
.L_42698b:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_426990:

            mov RSI,RBP
            xor R8D,R8D
            jmp .L_426907
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4269a0:

            lea RDI,QWORD PTR [R11+8]
            mov RCX,R11
            xor EAX,EAX
            mov QWORD PTR [R11],0
            mov QWORD PTR [R11+508],0
            and RDI,-8
            sub RCX,RDI
            add ECX,516
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movzx EAX,BYTE PTR [R9+2]
            and EAX,15
            mov BYTE PTR [R11],AL
            cmp BYTE PTR [R9+2],0
            mov EAX,44970
            js .L_4269eb

            mov EAX,DWORD PTR [R9+3]
            bswap EAX
.L_4269eb:

            mov DWORD PTR [R11+4],EAX
            cmp BYTE PTR [R9+2],0
            mov RAX,RBP
            js .L_4269fd

            lea RAX,QWORD PTR [R9+7]
.L_4269fd:

            movzx EAX,BYTE PTR [RAX]
            mov BYTE PTR [R11+8],AL
            cmp BYTE PTR [R9+2],0
            js .L_426b20

            lea RAX,QWORD PTR [R9+7]
            mov ESI,5
.L_426a18:

            movzx EAX,BYTE PTR [RAX]
            add RSI,RBP
            lea RCX,QWORD PTR [R11+9]
            cmp EAX,8
            jae .L_426b70

            test AL,4
            jne .L_426bdf

            test EAX,EAX
            je .L_426a46

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [R11+9],DL
            jne .L_426c05
.L_426a46:

            movzx EDX,BYTE PTR [R8]
            movzx EAX,BYTE PTR [R11+262]
            lea RCX,QWORD PTR [R11+264]
            lea RSI,QWORD PTR [R8+4]
            and EDX,1
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [R11+262],AL
            movzx EAX,BYTE PTR [R8+1]
            sub EAX,2
            mov BYTE PTR [R11+263],AL
            movzx EAX,BYTE PTR [R8+1]
            lea EDX,DWORD PTR [RAX-2]
            movzx EAX,DL
            cmp EAX,8
            jae .L_426b30

            test AL,4
            jne .L_426bc7

            test EAX,EAX
            je .L_426aad

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [R11+264],DL
            jne .L_426bf4
.L_426aad:

            movzx EAX,WORD PTR [R8+2]
            rol AX,8
            mov WORD PTR [R11+512],AX
            movzx EAX,BYTE PTR [R9+1]
            movzx EDX,BYTE PTR [R8+1]
            lea RAX,QWORD PTR [R9+RAX*1+2]
            lea RDX,QWORD PTR [R8+RDX*1+2]
            cmp RAX,RDX
            jbe .L_426ba0

            mov RAX,R9
            sub RAX,RBX
            mov BYTE PTR [R10],AL
            cmp BYTE PTR [R9+2],0
            js .L_426bba

            add R9,7
            mov ECX,5
.L_426af8:

            movzx EAX,BYTE PTR [R8+1]
            movzx EDX,BYTE PTR [R9]
            lea RAX,QWORD PTR [R8+RAX*1+2]
            add RDX,RCX
            add RBP,RDX
            sub RAX,RBP
            mov BYTE PTR [R10+1],AL
            xor EAX,EAX
            pop RBX
.L_426b16:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426b20:

            mov RAX,RBP
            mov ESI,1
            jmp .L_426a18
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_426b30:

            mov RDX,QWORD PTR [R8+4]
            mov QWORD PTR [R11+264],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [R11+272]
            mov RDX,RCX
            and RDI,-8
            sub RDX,RDI
            add EAX,EDX
            sub RSI,RDX
            shr EAX,3
            mov ECX,EAX

            rep movsq 

            jmp .L_426aad
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426b70:

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [R11+9],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [R11+17]
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            shr ECX,3

            rep movsq 

            jmp .L_426a46
          .byte 0x66
          .byte 0x90
.L_426ba0:

            sub RAX,RBX
            mov BYTE PTR [R10+1],0
            mov BYTE PTR [R10],AL
            xor EAX,EAX
            pop RBX
.L_426bae:

            pop RBP
            ret 
.L_426bb0:

            mov EAX,23
            jmp .L_42698a
.L_426bba:

            mov R9,RBP
            mov ECX,1
            jmp .L_426af8
.L_426bc7:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [R11+264],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_426aad
.L_426bdf:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [R11+9],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_426a46
.L_426bf4:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_426aad
.L_426c05:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_426a46
.L_426c16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426c20:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_426860
.L_426c2d:

            nop
            nop
            nop
.L_426c30:

            push R12
            movzx R11D,BYTE PTR [RSI]
            push RBP
            push RBX
.L_426c38:

            movzx EBX,BYTE PTR [RDI+255]
            add R11,RDI
            add RBX,RDI
            cmp R11,RBX
            jae .L_426de0

            lea RAX,QWORD PTR [R11+2]
            cmp RBX,RAX
            jb .L_426d52

            movzx EAX,BYTE PTR [R11+1]
            lea R8,QWORD PTR [R11+RAX*1+2]
            cmp RBX,R8
            jb .L_426d52

            movzx EAX,BYTE PTR [R11]
            sar EAX,1
            cmp EAX,5
            je .L_426cb7
.L_426c79:

            cmp RBX,R8
            mov BYTE PTR [RSI+1],0
            jbe .L_426de0

            lea RAX,QWORD PTR [R8+2]
            cmp RBX,RAX
            jb .L_426d52

            movzx EAX,BYTE PTR [R8+1]
            mov R11,R8
            lea RAX,QWORD PTR [R8+RAX*1+2]
            cmp RBX,RAX
            jb .L_426d52

            mov R8,RAX
            movzx EAX,BYTE PTR [R11]
            sar EAX,1
            cmp EAX,5
            jne .L_426c79
.L_426cb7:

            movzx R12D,BYTE PTR [R11+2]
            lea RBP,QWORD PTR [R11+3]
            test R12B,R12B
            js .L_426d60

            lea R9,QWORD PTR [R11+7]
            mov R10D,4
.L_426cd3:

            movzx EAX,BYTE PTR [RSI+1]
            lea R10,QWORD PTR [R10+RAX*1+1]
            movzx EAX,BYTE PTR [R9]
            add R10,RAX
            add R10,RBP
            cmp R10,R8
            jae .L_426c79

            lea RAX,QWORD PTR [R10+2]
            cmp R8,RAX
            jb .L_426d52

            movzx EAX,BYTE PTR [R10+1]
            lea RAX,QWORD PTR [R10+RAX*1+2]
            cmp R8,RAX
            jae .L_426d1d

            jmp .L_426d52
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_426d08:

            movzx R9D,BYTE PTR [RAX+1]
            mov R10,RAX
            lea R9,QWORD PTR [RAX+R9*1+2]
            cmp R9,R8
            ja .L_426d52

            mov RAX,R9
.L_426d1d:

            movzx R9D,BYTE PTR [R10]
            sar R9D,1
            cmp R9D,6
            jne .L_426d40

            cmp DX,-1
            je .L_426d70

            movzx R9D,WORD PTR [R10+2]
            rol R9W,8
            cmp DX,R9W
            je .L_426d70
.L_426d40:

            cmp R8,RAX
            jbe .L_426c79

            lea R9,QWORD PTR [RAX+2]
            cmp R8,R9
            jae .L_426d08
.L_426d52:

            mov EAX,6
.L_426d57:

            pop RBX
.L_426d58:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426d60:

            mov R9,RBP
            xor R10D,R10D
            jmp .L_426cd3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426d70:

            and R12D,15
            mov BYTE PTR [RCX],R12B
            movzx EAX,BYTE PTR [R11+1]
            movzx EDX,BYTE PTR [R10+1]
            lea RAX,QWORD PTR [R11+RAX*1+2]
            lea RDX,QWORD PTR [R10+RDX*1+2]
            cmp RAX,RDX
            jbe .L_426dd0

            mov RAX,R11
            sub RAX,RDI
            mov BYTE PTR [RSI],AL
            cmp BYTE PTR [R11+2],0
            js .L_426dea

            add R11,7
            mov ECX,5
.L_426da8:

            movzx EAX,BYTE PTR [R10+1]
            movzx EDX,BYTE PTR [R11]
            pop RBX
.L_426db2:

            lea RAX,QWORD PTR [R10+RAX*1+2]
            add RDX,RCX
            add RBP,RDX
            sub RAX,RBP
            mov BYTE PTR [RSI+1],AL
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426dd0:

            sub RAX,RDI
            mov BYTE PTR [RSI+1],0
            pop RBX
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_426de0:

            mov EAX,23
            jmp .L_426d57
.L_426dea:

            mov R11,RBP
            mov ECX,1
            jmp .L_426da8
.L_426df4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426e00:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,104
.L_426e17:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RSP+64]
            lea RBP,QWORD PTR [RSP+28]
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
.L_426e48:

            mov RSI,QWORD PTR [RSP+8]
            mov RCX,R13
            mov EDX,EBX
            mov RDI,R14
            call .L_426210

            test EAX,EAX
            jne .L_426ed8

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426e70:

            mov RCX,R15
            mov EDX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_426210

            test EAX,EAX
            jne .L_426eb0

            mov RAX,QWORD PTR [R13]
            mov RDX,QWORD PTR [R13+8]
            xor RAX,QWORD PTR [R15]
            xor RDX,QWORD PTR [R15+8]
            or RDX,RAX
            jne .L_426e70

            mov EAX,DWORD PTR [R15+16]
            cmp DWORD PTR [R13+16],EAX
            jne .L_426e70

            movzx EAX,WORD PTR [R15+20]
            cmp WORD PTR [R13+20],AX
            jne .L_426e70

            jmp .L_426e48
.L_426eb0:

            xor EAX,EAX
.L_426eb2:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_426edf

            add RSP,104
.L_426ec6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426ed8:

            mov EAX,1
            jmp .L_426eb2
.L_426edf:

            call __stack_chk_fail@PLT
.L_426ee4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426ef0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,104
.L_426f07:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RSP+64]
            lea RBP,QWORD PTR [RSP+28]
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426f40:

            mov RSI,QWORD PTR [RSP+8]
            mov RCX,R13
            mov EDX,EBX
            mov RDI,R14
            call .L_426550

            test EAX,EAX
            jne .L_426fc0

            mov DWORD PTR [RSP+28],0
            nop
            nop
.L_426f60:

            mov RCX,R15
            mov EDX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_426550

            test EAX,EAX
            jne .L_426f98

            mov RAX,QWORD PTR [R13]
            mov RDX,QWORD PTR [R13+8]
            xor RAX,QWORD PTR [R15]
            xor RDX,QWORD PTR [R15+8]
            or RDX,RAX
            jne .L_426f60

            mov RAX,QWORD PTR [R15+16]
            cmp QWORD PTR [R13+16],RAX
            jne .L_426f60

            jmp .L_426f40
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426f98:

            xor EAX,EAX
.L_426f9a:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_426fc7

            add RSP,104
.L_426fae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426fc0:

            mov EAX,1
            jmp .L_426f9a
.L_426fc7:

            call __stack_chk_fail@PLT
.L_426fcc:

            nop
            nop
            nop
            nop
.L_426fd0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,1096
.L_426fe7:

            lea RBP,QWORD PTR [RSP+560]
            lea R14,QWORD PTR [RSP+32]
            lea R12,QWORD PTR [RSP+28]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+1080],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R15,QWORD PTR [RBP+9]
            mov QWORD PTR [RSP],RSI
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
.L_427026:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP]
            mov RCX,R14
            mov EDX,EBX
            call .L_426860

            test EAX,EAX
            jne .L_4270ff

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427050:

            mov RCX,RBP
            mov EDX,EBX
            mov RSI,R12
            mov RDI,R13
            call .L_426860

            test EAX,EAX
            jne .L_4270d8

            mov EAX,DWORD PTR [RSP+564]
            cmp DWORD PTR [RSP+36],EAX
            jne .L_427050

            movzx EDX,BYTE PTR [RSP+40]
            cmp DL,BYTE PTR [RSP+568]
            jne .L_427050

            lea RDI,QWORD PTR [R14+9]
            mov RSI,R15
            call memcmp@PLT

            test EAX,EAX
            jne .L_427050

            movzx EAX,BYTE PTR [RSP+294]
            xor AL,BYTE PTR [RSP+822]
            test AL,1
            jne .L_427050

            movzx EAX,BYTE PTR [RSP+295]
            cmp AL,BYTE PTR [RSP+823]
            jne .L_427050

            lea RSI,QWORD PTR [RBP+264]
            lea RDI,QWORD PTR [R14+264]
            movzx EDX,AL
            call memcmp@PLT

            test EAX,EAX
            jne .L_427050

            jmp .L_427026
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4270d8:

            xor EAX,EAX
.L_4270da:

            mov RCX,QWORD PTR [RSP+1080]
            xor RCX,QWORD PTR FS:[40]
            jne .L_427106

            add RSP,1096
.L_4270f4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4270ff:

            mov EAX,1
            jmp .L_4270da
.L_427106:

            call __stack_chk_fail@PLT
.L_42710b:

            nop
            nop
            nop
            nop
            nop
.L_427110:

            movzx R8D,BYTE PTR [RDI+255]
            add R8,RDI
            cmp RDI,R8
            jae .L_42720f

            lea RAX,QWORD PTR [RDI+2]
            cmp R8,RAX
            jb .L_42720f

            movzx EAX,BYTE PTR [RDI+1]
            lea RAX,QWORD PTR [RDI+RAX*1+2]
            cmp R8,RAX
            jae .L_427176

            jmp .L_42720f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427148:

            cmp R8,RAX
            jbe .L_42720f

            lea RCX,QWORD PTR [RAX+2]
            cmp R8,RCX
            jb .L_42720f

            movzx ECX,BYTE PTR [RAX+1]
            mov RDI,RAX
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp R8,RCX
            jb .L_42720f

            mov RAX,RCX
.L_427176:

            movzx ECX,BYTE PTR [RDI]
            sar ECX,1
            cmp ECX,5
            jne .L_427148

            movzx ECX,BYTE PTR [RDI+2]
            mov R9D,ECX
            and R9D,15
            cmp R9B,SIL
            jne .L_427148

            test CL,CL
            lea R9,QWORD PTR [RDI+3]
            js .L_427218

            add RDI,7
            mov R10D,5
.L_4271a6:

            movzx ECX,BYTE PTR [RDI]
            add RCX,R10
            add R9,RCX
            cmp R9,RAX
            jae .L_427148

            lea RCX,QWORD PTR [R9+2]
            cmp RAX,RCX
            jb .L_42720f

            movzx ECX,BYTE PTR [R9+1]
            lea RCX,QWORD PTR [R9+RCX*1+2]
            cmp RCX,RAX
            jbe .L_4271e4

            jmp .L_42720f
          .byte 0x66
          .byte 0x90
.L_4271d0:

            movzx EDI,BYTE PTR [RCX+1]
            mov R9,RCX
            lea RDI,QWORD PTR [RCX+RDI*1+2]
            cmp RDI,RAX
            ja .L_42720f

            mov RCX,RDI
.L_4271e4:

            movzx EDI,BYTE PTR [R9]
            sar EDI,1
            cmp EDI,6
            jne .L_4271fd

            movzx EDI,WORD PTR [R9+2]
            rol DI,8
            cmp DX,DI
            je .L_427230
.L_4271fd:

            cmp RAX,RCX
            jbe .L_427148

            lea RDI,QWORD PTR [RCX+2]
            cmp RAX,RDI
            jae .L_4271d0
.L_42720f:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427218:

            mov RDI,R9
            mov R10D,1
            jmp .L_4271a6
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427230:

            mov EAX,1
            ret 
.L_427236:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427240:

            push R13
            push R12
            lea R8,QWORD PTR [RCX+3]
            push RBP
            push RBX
            mov RBP,RSI
            mov R12,RDX
            mov RBX,RCX
            sub RSP,8
.L_427257:

            cmp BYTE PTR [RCX+2],0
            js .L_427338

            lea RAX,QWORD PTR [RCX+7]
            mov EDX,5
.L_42726a:

            movzx EAX,BYTE PTR [RAX]
            movzx ECX,BYTE PTR [RBX+1]
            add RAX,RDX
            add R8,RAX
.L_427277:

            lea RAX,QWORD PTR [RBX+RCX*1+2]
            cmp R8,RAX
            jae .L_4272c2
.L_427281:

            movzx EAX,BYTE PTR [R8]
            movzx ESI,BYTE PTR [R8+1]
            test AL,1
            mov RDX,RSI
            lea RSI,QWORD PTR [R8+RSI*1+2]
            je .L_4272d0

            sar EAX,1
            cmp EAX,6
            jne .L_4272b5

            movzx EAX,BYTE PTR [RBX+2]
            and EAX,15
            sub AX,1008
            rol AX,8
            mov WORD PTR [R8+2],AX
            movzx ECX,BYTE PTR [RBX+1]
.L_4272b5:

            lea RAX,QWORD PTR [RBX+RCX*1+2]
            mov R8,RSI
            cmp R8,RAX
            jb .L_427281
.L_4272c2:

            add RSP,8
.L_4272c6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4272d0:

            lea R13D,DWORD PTR [RDX+2]
            movzx EDX,BYTE PTR [R12]
            mov RAX,RSI
            sub RAX,RBP
            mov RDI,R8
            sub RDX,RAX
            call memmove@PLT

            cmp BYTE PTR [RBX+2],0
            mov R8,RAX
            movzx EAX,BYTE PTR [RBX+1]
            js .L_427320

            movzx ECX,BYTE PTR [RBX+7]
            sub EAX,6
            mov EDX,6
            sub EAX,ECX
            sub EAX,R13D
.L_427308:

            add EAX,EDX
            add EAX,ECX
            mov BYTE PTR [RBX+1],AL
            sub BYTE PTR [R12],R13B
            movzx ECX,BYTE PTR [RBX+1]
            jmp .L_427277
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427320:

            movzx ECX,BYTE PTR [RBX+3]
            sub EAX,2
            mov EDX,2
            sub EAX,ECX
            sub EAX,R13D
            jmp .L_427308
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427338:

            mov RAX,R8
            mov EDX,1
            jmp .L_42726a
.L_427345:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427350:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            cmp RCX,RDX
            jbe .L_4273c1

            lea RAX,QWORD PTR [RDX+2]
            cmp RCX,RAX
            jb .L_4273c1

            movzx EAX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            jb .L_4273c1

            movzx ESI,BYTE PTR [RDX]
            sar ESI,1
            cmp ESI,2
            jne .L_4273bc

            jmp .L_4273c5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427398:

            lea RDX,QWORD PTR [RAX+2]
            cmp RCX,RDX
            jb .L_4273c1

            movzx EDX,BYTE PTR [RAX+1]
            lea RSI,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RSI
            jb .L_4273c1

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,2
            je .L_4273c3

            mov RAX,RSI
.L_4273bc:

            cmp RCX,RAX
            ja .L_427398
.L_4273c1:

            xor EAX,EAX
.L_4273c3:

            ret 
.L_4273c5:

            mov RAX,RDX
            ret 
.L_4273c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4273d0:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            lea RDI,QWORD PTR [RSI+RCX*1+2]
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RSI+RAX*1+4]
            cmp RDI,RAX
            jbe .L_427450

            lea RCX,QWORD PTR [RAX+2]
            cmp RDI,RCX
            jb .L_427450

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDI,RCX
            jae .L_427432

            jmp .L_427450
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427410:

            cmp RDI,RCX
            jbe .L_427450

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_427450

            movzx EAX,BYTE PTR [RCX+1]
            lea RSI,QWORD PTR [RCX+RAX*1+2]
            mov RAX,RCX
            cmp RDI,RSI
            jb .L_427450

            mov RCX,RSI
.L_427432:

            movzx ESI,BYTE PTR [RAX]
            mov R8D,ESI
            sar ESI,1
            cmp ESI,2
            jne .L_427410

            and R8D,1
            cmp DL,R8B
            jne .L_427410

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427450:

            xor EAX,EAX
            ret 
.L_427453:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427460:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RDX,QWORD PTR [RSI+RAX*1+2]
            cmp RDX,RCX
            jbe .L_4274c4

            lea RAX,QWORD PTR [RCX+2]
            cmp RDX,RAX
            jb .L_4274c4

            movzx EAX,BYTE PTR [RCX+1]
            lea RAX,QWORD PTR [RCX+RAX*1+2]
            cmp RDX,RAX
            jb .L_4274c4

            test BYTE PTR [RCX],254
            jne .L_4274bf

            jmp .L_4274c8
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4274a0:

            lea RCX,QWORD PTR [RAX+2]
            cmp RDX,RCX
            jb .L_4274c4

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDX,RCX
            jb .L_4274c4

            test BYTE PTR [RAX],254
            je .L_4274c6

            mov RAX,RCX
.L_4274bf:

            cmp RDX,RAX
            ja .L_4274a0
.L_4274c4:

            xor EAX,EAX
.L_4274c6:

            ret 
.L_4274c8:

            mov RAX,RCX
            ret 
.L_4274cc:

            nop
            nop
            nop
            nop
.L_4274d0:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            lea RDI,QWORD PTR [RSI+RCX*1+2]
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RSI+RAX*1+4]
            cmp RDI,RAX
            jbe .L_427543

            lea RCX,QWORD PTR [RAX+2]
            cmp RDI,RCX
            jb .L_427543

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDI,RCX
            jae .L_42752d

            jmp .L_427543
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427510:

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_427543

            movzx EAX,BYTE PTR [RCX+1]
            lea RSI,QWORD PTR [RCX+RAX*1+2]
            mov RAX,RCX
            cmp RDI,RSI
            jb .L_427543

            mov RCX,RSI
.L_42752d:

            movzx ESI,BYTE PTR [RAX]
            test SIL,254
            jne .L_42753e

            and ESI,1
            cmp DL,SIL
            je .L_427550
.L_42753e:

            cmp RDI,RCX
            ja .L_427510
.L_427543:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427550:

            ret 
.L_427552:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427560:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            cmp RCX,RDX
            jbe .L_4275d1

            lea RAX,QWORD PTR [RDX+2]
            cmp RCX,RAX
            jb .L_4275d1

            movzx EAX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            jb .L_4275d1

            movzx ESI,BYTE PTR [RDX]
            sar ESI,1
            cmp ESI,3
            jne .L_4275cc

            jmp .L_4275d5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4275a8:

            lea RDX,QWORD PTR [RAX+2]
            cmp RCX,RDX
            jb .L_4275d1

            movzx EDX,BYTE PTR [RAX+1]
            lea RSI,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RSI
            jb .L_4275d1

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,3
            je .L_4275d3

            mov RAX,RSI
.L_4275cc:

            cmp RCX,RAX
            ja .L_4275a8
.L_4275d1:

            xor EAX,EAX
.L_4275d3:

            ret 
.L_4275d5:

            mov RAX,RDX
            ret 
.L_4275d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4275e0:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RDX
            mov EBP,4294967039
            sub RSP,8
.L_4275ff:

            movzx EAX,BYTE PTR [RCX+3]
            movzx R9D,BYTE PTR [R14+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RCX+RAX*1+4]
.L_427615:

            lea RAX,QWORD PTR [R14+R9*1+2]
            cmp RCX,RAX
            jae .L_4276b9
.L_427623:

            movzx EAX,BYTE PTR [RCX]
            movzx ESI,BYTE PTR [RCX+1]
            test AL,1
            lea R8,QWORD PTR [RCX+RSI*1+2]
            je .L_4276d0

            sar EAX,1
            je .L_427700

            cmp EAX,2
            jne .L_4276a8

            mov RSI,R14
            mov RDI,R12
            call .L_427350

            mov RSI,R14
            mov R10,RAX
            call .L_427560

            test RAX,RAX
            je .L_4276a8

            movzx ESI,BYTE PTR [RAX+2]
            movzx EAX,BYTE PTR [R10+1]
            shr AL,2
            and ESI,15
            test AL,AL
            je .L_4276a8

            movzx ESI,SIL
            lea RAX,QWORD PTR [R10+2]
            xor ECX,ECX
            or SI,64512
            rol SI,8
            nop
            nop
            nop
.L_427688:

            test BYTE PTR [RAX+2],12
            mov EDX,EBP
            cmovne EDX,ESI
            add ECX,1
            add RAX,4
            mov WORD PTR [RAX-4],DX
            movzx EDX,BYTE PTR [R10+1]
            shr DL,2
            cmp CL,DL
            jb .L_427688
.L_4276a8:

            mov RCX,R8
.L_4276ab:

            lea RAX,QWORD PTR [R14+R9*1+2]
            cmp RCX,RAX
            jb .L_427623
.L_4276b9:

            add RSP,8
.L_4276bd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4276d0:

            movzx EDX,BYTE PTR [RBX]
            mov RAX,R8
            lea R15D,DWORD PTR [RSI+2]
            sub RAX,R13
            mov RDI,RCX
            mov RSI,R8
            sub RDX,RAX
            call memmove@PLT

            sub BYTE PTR [R14+1],R15B
            mov RCX,RAX
            sub BYTE PTR [RBX],R15B
            movzx R9D,BYTE PTR [R14+1]
            jmp .L_427615
          .byte 0x90
.L_427700:

            mov RSI,R14
            mov RDI,R12
            call .L_427460

            cmp BYTE PTR [RAX+1],2
            jbe .L_4276a8

            lea RDI,QWORD PTR [RAX+2]
            xor ESI,ESI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427720:

            mov EDX,4294967039
            add ESI,1
            add RDI,3
            mov WORD PTR [RDI-3],DX
            movzx ECX,BYTE PTR [RAX+1]
            lea EDX,DWORD PTR [RCX+RCX*8]
            lea EDX,DWORD PTR [RCX+RDX*2]
            lea EDX,DWORD PTR [RDX+RDX*8]
            shr DX,9
            cmp SIL,DL
            jb .L_427720

            mov RCX,R8
            jmp .L_4276ab
.L_42774e:

            nop
            nop
.L_427750:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_42775e:

            movzx EDX,BYTE PTR [RDX]
            mov RBP,RDI
            mov RBX,RSI
.L_427767:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_4277d1
.L_427770:

            movzx EAX,BYTE PTR [RBX]
            mov ECX,EAX
            sar EAX,1
            cmp EAX,1
            je .L_427820

            cmp EAX,5
            jne .L_4277e0

            mov RCX,RBX
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_427240

            cmp BYTE PTR [RBX+2],0
            movzx R14D,BYTE PTR [RBX+1]
            lea RCX,QWORD PTR [RBX+3]
            js .L_427860

            lea EAX,DWORD PTR [R14-4]
            lea RCX,QWORD PTR [RBX+7]
.L_4277b1:

            sub AL,BYTE PTR [RCX]
            movzx ESI,R14B
            movzx EDX,BYTE PTR [R13]
            lea RSI,QWORD PTR [RBX+RSI*1+2]
            cmp AL,2
            je .L_4277f1
.L_4277c5:

            lea RAX,QWORD PTR [R12+RDX*1]
            mov RBX,RSI
            cmp RBX,RAX
            jb .L_427770
.L_4277d1:

            pop RBX
.L_4277d2:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4277e0:

            movzx EAX,BYTE PTR [RBX+1]
            and ECX,1
            mov R14,RAX
            lea RSI,QWORD PTR [RBX+RAX*1+2]
            jne .L_4277c5
.L_4277f1:

            mov RAX,RSI
            mov RDI,RBX
            sub RAX,R12
            sub RDX,RAX
            call memmove@PLT

            movzx EAX,BYTE PTR [R13]
            lea EDX,DWORD PTR [RAX-2]
            sub EDX,R14D
            mov BYTE PTR [R13],DL
            movzx EDX,DL
            jmp .L_427767
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427820:

            mov RDI,RBP
            mov RCX,RBX
            mov RDX,R13
            mov RSI,R12
            call .L_4275e0

            movzx EAX,BYTE PTR [RBX+3]
            movzx R14D,BYTE PTR [RBX+1]
            add EAX,7
            mov EDI,R14D
            sar EAX,3
            sub EDI,EAX
            cmp DIL,2
            je .L_427870

            lea RBX,QWORD PTR [RBX+R14*1+2]
            movzx EDX,BYTE PTR [R13]
            jmp .L_427767
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427860:

            mov EAX,R14D
            jmp .L_4277b1
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427870:

            movzx EAX,R14B
            movzx EDX,BYTE PTR [R13]
            lea RSI,QWORD PTR [RBX+RAX*1+2]
            jmp .L_4277f1
.L_427883:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427890:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_427898:

            test RDX,RDX
            je .L_427907

            mov R8,RDX
            movzx EDX,BYTE PTR [RDI+255]
            mov RBX,RDI
            cmp BYTE PTR [RCX],DL
            mov RBP,RCX
            mov EAX,3
            jb .L_4278d8

            mov R12D,ESI
            mov RSI,RDI
            mov RDI,R8
            call memcpy@PLT

            mov R8,RAX
            movzx EAX,BYTE PTR [RBX+255]
            mov BYTE PTR [RBP],AL
            xor EAX,EAX
            test R12B,R12B
            jne .L_4278e8
.L_4278d8:

            add RSP,16
.L_4278dc:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4278e8:

            mov RDX,RBP
            mov RDI,RBX
            mov RSI,R8
            mov DWORD PTR [RSP+12],EAX
            call .L_427750

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
.L_427907:

            lea RCX,QWORD PTR [RIP+.L_4280a0]
            lea RSI,QWORD PTR [RIP+.L_427f38]
            lea RDI,QWORD PTR [RIP+.L_427f50]
            mov EDX,71
            call __assert_fail@PLT
.L_427926:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427930:

            movzx R8D,R8B
            add R8,RCX
            cmp RCX,R8
            jae .L_427a40

            lea RAX,QWORD PTR [RCX+2]
            cmp R8,RAX
            jb .L_427a40

            movzx EAX,BYTE PTR [RCX+1]
            lea RDI,QWORD PTR [RCX+RAX*1+2]
            cmp R8,RDI
            jb .L_427a40

            mov R11D,EDX
            movzx EDX,DL
            push R12
            push RBP
            push RBX
.L_427969:

            lea EBX,DWORD PTR [RDX+7]
            sar EBX,3
            lea R10D,DWORD PTR [RBX-1]
            movzx R10D,R10B
            jmp .L_4279a6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427980:

            cmp R8,RDI
            jbe .L_427a10

            lea RAX,QWORD PTR [RDI+2]
            cmp R8,RAX
            jb .L_427a10

            movzx EAX,BYTE PTR [RDI+1]
            mov RCX,RDI
            lea RAX,QWORD PTR [RDI+RAX*1+2]
            cmp R8,RAX
            jb .L_427a10

            mov RDI,RAX
.L_4279a6:

            movzx R9D,BYTE PTR [RCX]
            sar R9D,1
            cmp R9D,1
            jne .L_427980

            cmp R11B,BYTE PTR [RCX+3]
            jne .L_427980

            test EBX,EBX
            je .L_427a43

            movzx R9D,BYTE PTR [RCX+4]
            movzx R12D,BYTE PTR [RSI]
            xor EAX,EAX
            xor EBP,EBP
            cmp R9B,R12B
            je .L_4279f4

            xor R9D,R12D
            xor EBP,EBP
            jmp .L_427a23
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4279e0:

            movzx R9D,BYTE PTR [RCX+RAX*1+5]
            add RAX,1
            movzx R12D,BYTE PTR [RSI+RAX*1]
            cmp R9B,R12B
            jne .L_427a20
.L_4279f4:

            add EBP,8
            cmp R10,RAX
            jne .L_4279e0
.L_4279fc:

            movsx EBP,BPL
.L_427a00:

            cmp EDX,EBP
            jg .L_427980

            pop RBX
.L_427a09:

            mov RAX,RCX
            pop RBP
            pop R12
            ret 
.L_427a10:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427a20:

            xor R9D,R12D
.L_427a23:

            test R9B,R9B
            js .L_4279fc

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427a30:

            add EBP,1
            add R9B,R9B
            jns .L_427a30

            jmp .L_4279fc
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427a40:

            xor EAX,EAX
            ret 
.L_427a43:

            xor EBP,EBP
            jmp .L_427a00
.L_427a47:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427a50:

            movzx R8D,BYTE PTR [RDI+255]
            movzx EDX,DL
            mov RCX,RDI
            jmp .L_427930
.L_427a63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427a70:

            movzx ECX,CL
            lea EDI,DWORD PTR [RCX+7]
            sar EDI,3
            test EDI,EDI
            mov R9D,EDI
            je .L_427af0

            movzx R8D,BYTE PTR [RSI]
            movzx EAX,BYTE PTR [RDX]
            cmp R8B,AL
            jne .L_427af8

            sub R9D,1
            mov EDI,1
            movzx R9D,R9B
            add R9,1
            jmp .L_427ab4
          .byte 0x90
.L_427aa0:

            movzx R8D,BYTE PTR [RSI+RDI*1]
            add RDI,1
            movzx R10D,BYTE PTR [RDX+RDI*1-1]
            cmp R8B,R10B
            jne .L_427ad0
.L_427ab4:

            cmp RDI,R9
            lea EAX,DWORD PTR [RDI*8]
            jne .L_427aa0
.L_427ac0:

            movsx EDI,AL
.L_427ac3:

            cmp ECX,EDI
            mov EDX,4294967295
            cmovg EAX,EDX
            ret 
          .byte 0x66
          .byte 0x90
.L_427ad0:

            xor R8D,R10D
.L_427ad3:

            test R8B,R8B
            js .L_427ac0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427ae0:

            add EAX,1
            add R8B,R8B
            jns .L_427ae0

            jmp .L_427ac0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427af0:

            xor EAX,EAX
            jmp .L_427ac3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427af8:

            xor R8D,EAX
            xor EAX,EAX
            jmp .L_427ad3
.L_427aff:

            nop
.L_427b00:

            movzx R9D,R9B
            push R15
            push R14
            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [R8+R9*1]
            push RBX
            sub RSP,24
.L_427b16:

            cmp R8,RBP
            jae .L_427bf0

            lea RAX,QWORD PTR [R8+2]
            cmp RBP,RAX
            jb .L_427bf0

            movzx EAX,BYTE PTR [R8+1]
            lea RBX,QWORD PTR [R8+RAX*1+2]
            cmp RBP,RBX
            jb .L_427bf0

            mov R12D,ESI
            mov R13,RDX
            mov R14D,ECX
            movzx R15D,CL
            jmp .L_427b7a
          .byte 0x66
          .byte 0x90
.L_427b50:

            cmp RBP,RBX
            jbe .L_427bf0

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_427bf0

            movzx EAX,BYTE PTR [RBX+1]
            mov R8,RBX
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RAX
            jb .L_427bf0

            mov RBX,RAX
.L_427b7a:

            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,5
            jne .L_427b50

            cmp BYTE PTR [R8+2],0
            js .L_427bd0

            mov EAX,DWORD PTR [R8+3]
            lea RDX,QWORD PTR [R8+3]
            bswap EAX
            cmp R12D,EAX
            jne .L_427b50

            lea RAX,QWORD PTR [R8+7]
            mov ECX,4
.L_427ba4:

            cmp R14B,BYTE PTR [RAX]
            jne .L_427b50

            lea RDI,QWORD PTR [RDX+RCX*1+1]
            mov RSI,R13
            mov RDX,R15
            mov QWORD PTR [RSP+8],R8
            call memcmp@PLT

            test EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            jne .L_427b50

            mov RAX,R8
            jmp .L_427bf2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427bd0:

            cmp R12D,44970
            jne .L_427b50

            lea RDX,QWORD PTR [R8+3]
            xor ECX,ECX
            mov RAX,RDX
            jmp .L_427ba4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427bf0:

            xor EAX,EAX
.L_427bf2:

            add RSP,24
.L_427bf6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_427c01:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427c10:

            movzx R9D,BYTE PTR [RDI+255]
            movzx ECX,CL
            mov R8,RDI
            jmp .L_427b00
.L_427c23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427c30:

            push RBP
            push RBX
            movzx EAX,DL
            mov RBX,RDI
            mov EBP,EDX
            sub RSP,8
.L_427c3e:

            movzx ECX,BYTE PTR [RDI+255]
            add EAX,ECX
            cmp EAX,255
            jg .L_427c83

            cmp RDI,RSI
            ja .L_427c83

            lea RAX,QWORD PTR [RBX+RCX*1]
            movzx EDI,DL
            mov RDX,RCX
            cmp RSI,RAX
            ja .L_427c83

            mov RAX,RSI
            add RDI,RSI
            sub RAX,RBX
            sub RDX,RAX
            call memmove@PLT

            add BYTE PTR [RBX+255],BPL
            add RSP,8
.L_427c7e:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_427c83:

            lea RCX,QWORD PTR [RIP+.L_428060]
            lea RSI,QWORD PTR [RIP+.L_427f38]
            lea RDI,QWORD PTR [RIP+.L_427f68]
            mov EDX,980
            call __assert_fail@PLT
.L_427ca2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427cb0:

            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            mov RDI,RSI
            movzx ESI,DL
            sub RSP,8
            movzx EDX,BYTE PTR [RBX+255]
            cmp DL,BPL
            jb .L_427cff

            cmp RBX,RDI
            ja .L_427cff

            mov RAX,RDI
            sub RAX,RBX
            lea RCX,QWORD PTR [RSI+RAX*1]
            cmp RCX,RDX
            jg .L_427cff

            sub RDX,RSI
            add RSI,RDI
            sub RDX,RAX
            call memmove@PLT

            sub BYTE PTR [RBX+255],BPL
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_427cff:

            lea RCX,QWORD PTR [RIP+.L_428020]
            lea RSI,QWORD PTR [RIP+.L_427f38]
            lea RDI,QWORD PTR [RIP+.L_427fc0]
            mov EDX,988
            call __assert_fail@PLT
.L_427d1e:

            nop
            nop
.L_427d20:

            push R15
            push R14
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,232
.L_427d37:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBP+257],0
            pxor XMM0,XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_427d89

            call .L_401240

            mov EBX,24
            sub EAX,DWORD PTR [RBP+260]
            cmp EAX,299999
            jg .L_427e32
.L_427d89:

            lea RBX,QWORD PTR [RSP+64]
            mov EDX,2
            xor ESI,ESI
            lea R14,QWORD PTR [R12+216]
            mov RDI,RBX
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_427f5e]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            mov EDX,2
            mov RSI,RBX
            mov RDI,R14
            call .L_42f920

            test RAX,RAX
            mov R15,RAX
            je .L_427f20

            cmp BYTE PTR [RBP+256],0
            jne .L_427e60
.L_427dee:

            cmp R13W,-2
            je .L_427ea8

            mov EDX,514
            lea RSI,QWORD PTR [RSP+12]
            rol R13W,8
            mov WORD PTR [RSP+12],DX
            mov RDI,R15
            mov EDX,4
            mov WORD PTR [RSP+14],R13W
            call .L_403d80

            test EAX,EAX
            mov EBX,EAX
            je .L_427ea8
.L_427e2a:

            mov RDI,R15
            call .L_403400
.L_427e32:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_427f2a

            add RSP,232
.L_427e52:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427e60:

            movzx EAX,BYTE PTR [RBP+255]
            lea RSI,QWORD PTR [RSP+12]
            mov EDX,2
            mov RDI,R15
            mov BYTE PTR [RSP+12],10
            mov BYTE PTR [RSP+13],AL
            call .L_403d80

            test EAX,EAX
            mov EBX,EAX
            jne .L_427e2a

            movzx EDX,BYTE PTR [RBP+255]
            mov RSI,RBP
            mov RDI,R15
            call .L_403d80

            test EAX,EAX
            mov EBX,EAX
            jne .L_427e2a

            jmp .L_427dee
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427ea8:

            add R12,2568
            lea RSI,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+16]
            mov RDI,R12
            call .L_417320

            mov RDI,R12
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R14
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_430850

            test EAX,EAX
            mov EBX,EAX
            jne .L_427e2a

            cmp BYTE PTR [RBP+256],0
            je .L_427e32

            call .L_401240

            mov BYTE PTR [RBP+257],1
            mov DWORD PTR [RBP+260],EAX
            jmp .L_427e32
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427f20:

            mov EBX,3
            jmp .L_427e32
.L_427f2a:

            call __stack_chk_fail@PLT
.L_427f2f:

            nop
.L_427f30:

            mov BYTE PTR [RDI+257],0
            ret 
.L_427f38:
          .string "thread/network_data.cpp"
.L_427f50:
          .string "aData != NULL"
.L_427f5e:
          .string "a/sd"
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427f68:
          .string "aLength + mLength <= sizeof(mTlvs) && mTlvs <= aStart && aStart <= mTlvs + mLength"
          .zero 5
.L_427fc0:
          .string "aLength <= mLength && mTlvs <= aStart && (aStart - mTlvs) + aLength <= mLength"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428020:
          .string "otError ot::NetworkData::NetworkData::Remove(uint8_t*, uint8_t)"
.L_428060:

            outsd DX,DWORD PTR [RSI]
            je .L_4280a8

            jb .L_4280d7

            outsd DX,DWORD PTR [RSI]
            jb .L_428088
          .byte 0x6f
          .byte 0x74
          .byte 0x3a

            cmp CL,BYTE PTR [RSI+101]
            je .L_4280e7
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x49
          .byte 0x6e
.L_428088:

            jae .L_4280ef
          .byte 0x72
          .byte 0x74
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x2a
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x38
          .byte 0x5f
          .byte 0x74
          .byte 0x29
          .byte 0x0
.L_4280a0:

            outsd DX,DWORD PTR [RSI]
            je .L_4280e8
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
.L_4280a8:

            outsd DX,DWORD PTR [RSI]
            je .L_4280e5

            cmp CL,BYTE PTR [RSI+101]
            je .L_428127
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x47
          .byte 0x65
          .byte 0x74
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77

            outsd DX,DWORD PTR [RSI]
            jb .L_42813b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x28
          .byte 0x62
          .byte 0x6f
.L_4280d7:

            outsd DX,DWORD PTR [RSI]
            insb BYTE PTR [RDI],DX
            sub AL,32
            jne .L_428146

            outsb DX,BYTE PTR [RSI]
          .byte 0x74
          .byte 0x38

            pop RDI
            je .L_42810d

            sub AL,32
.L_4280e5:

            jne .L_428150
.L_4280e7:

            outsb DX,BYTE PTR [RSI]
.L_4280e8:

            je .L_428122
          .byte 0x5f
          .byte 0x74
          .byte 0x26
          .byte 0x29
          .byte 0x0
.L_4280ef:

            nop
.L_4280f0:

            push RBX
            mov RBX,RDI
            call .L_401460

            mov BYTE PTR [RBX+265],AL
            call .L_401460

            mov RDI,RBX
            mov BYTE PTR [RBX+264],AL
.L_42810d:

            mov BYTE PTR [RBX+255],0
            call .L_433530

            pop RBX
            mov ESI,512
            mov RDI,RAX
.L_428122:

            jmp .L_402d80
.L_428127:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428130:

            push RBX
            xor EDX,EDX
            mov RBX,RDI
            call .L_4261e0
.L_42813b:

            mov RDI,RBX
            pop RBX
            jmp .L_4280f0
.L_428141:
          .byte 0x90
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428146:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428150:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_42815e:

            mov RBP,RDI
            call .L_433510

            lea RBX,QWORD PTR [RAX+2568]
            mov BYTE PTR [R12+8],0
            mov RDI,RBX
            call .L_4167f0

            mov ECX,64
            mov RDX,R13
            mov RSI,RAX
            mov RDI,RBP
            call .L_427a70

            test AL,AL
            jns .L_428270

            movzx EDX,BYTE PTR [RBP+255]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jae .L_428240
.L_4281ab:

            mov RBX,RBP
            jmp .L_4281c3
.L_4281b0:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBX,RAX
            jae .L_428240
.L_4281c3:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_4281b0

            movzx ECX,BYTE PTR [RBX+3]
            lea R14,QWORD PTR [RBX+4]
            mov RDX,R13
            mov RDI,RBP
            mov RSI,R14
            call .L_427a70

            test AL,AL
            js .L_42822a

            mov RSI,RBX
            mov RDI,RBP
            call .L_427560

            test RAX,RAX
            je .L_42822a

            movzx ESI,BYTE PTR [RBX+3]
            cmp BYTE PTR [R12+8],SIL
            jae .L_42822a

            mov QWORD PTR [R12],R14
            movzx EDX,BYTE PTR [RBX+3]
            mov BYTE PTR [R12+8],DL
            movzx EDX,BYTE PTR [RAX+2]
            and EDX,15
            mov BYTE PTR [R12+9],DL
            movzx EAX,BYTE PTR [RAX+2]
            shr AL,4
            and EAX,1
            mov BYTE PTR [R12+10],AL
.L_42822a:

            movzx EDX,BYTE PTR [RBP+255]
            jmp .L_4281b0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428240:

            cmp BYTE PTR [R12+8],0
            je .L_428258
.L_428248:

            pop RBX
.L_428249:

            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428258:

            pop RBX
            mov EAX,23
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428270:

            mov RDI,RBX
            call .L_4167f0

            mov QWORD PTR [R12],RAX
            mov EAX,64
            mov BYTE PTR [R12+10],1
            mov WORD PTR [R12+8],AX
            movzx EDX,BYTE PTR [RBP+255]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jb .L_4281ab

            jmp .L_428248
.L_4282a4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4282b0:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_4282c0:

            test SIL,SIL
            je .L_428370

            movzx ECX,BYTE PTR [RDI+255]
            lea RAX,QWORD PTR [RDI+RCX*1]
            cmp RDI,RAX
            jae .L_4283a8

            mov R12D,ESI
            mov RBX,RDI
            jmp .L_4282ff
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4282e8:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RCX*1]
            cmp RBX,RAX
            jae .L_4283a8
.L_4282ff:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_4282e8

            mov RSI,RBX
            mov RDI,RBP
            call .L_427560

            test RAX,RAX
            je .L_428325

            movzx ECX,BYTE PTR [RAX+2]
            and ECX,15
            cmp R12B,CL
            je .L_428330
.L_428325:

            movzx ECX,BYTE PTR [RBP+255]
            jmp .L_4282e8
          .byte 0x66
          .byte 0x90
.L_428330:

            lea RDX,QWORD PTR [RBX+4]
            mov QWORD PTR [R13],RDX
            movzx EDX,BYTE PTR [RBX+3]
            mov BYTE PTR [R13+8],DL
            movzx EDX,BYTE PTR [RAX+2]
            and EDX,15
            mov BYTE PTR [R13+9],DL
            movzx EAX,BYTE PTR [RAX+2]
            shr AL,4
            and EAX,1
            mov BYTE PTR [R13+10],AL
            add RSP,8
.L_42835d:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428370:

            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4167f0

            mov QWORD PTR [R13],RAX
            mov EAX,64
            mov BYTE PTR [R13+10],1
            mov WORD PTR [R13+8],AX
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4283a8:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4283b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4283c0:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            movzx ESI,SIL
            mov RBP,RDI
            sub RSP,72
.L_4283d4:

            lea RDX,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_4282b0

            test EAX,EAX
            mov EDX,23
            jne .L_42843a

            mov DWORD PTR [RSP+12],0
            lea RBX,QWORD PTR [RSP+32]
            lea R12,QWORD PTR [RSP+12]
            jmp .L_428423
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428410:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_401820

            cmp BYTE PTR [RSP+48],AL
            jbe .L_428460
.L_428423:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,RBP
            call .L_426540

            test EAX,EAX
            je .L_428410

            mov EDX,23
.L_42843a:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_42846e

            add RSP,72
.L_428450:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428460:

            movzx EAX,WORD PTR [RSP+52]
            xor EDX,EDX
            mov WORD PTR [R13],AX
            jmp .L_42843a
.L_42846e:

            call __stack_chk_fail@PLT
.L_428473:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428480:

            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_428487:

            mov RBP,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R12],RAX
            je .L_428507

            movzx EDX,BYTE PTR [RBP+255]
            mov RBX,RBP
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jae .L_4284d5
.L_4284b8:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_4284e0
.L_4284c2:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBX,RAX
            jb .L_4284b8
.L_4284d5:

            pop RBX
.L_4284d6:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4284e0:

            movzx ECX,BYTE PTR [RBX+3]
            lea RSI,QWORD PTR [RBX+4]
            mov RDX,R12
            mov RDI,RBP
            call .L_427a70

            test AL,AL
            js .L_428518

            mov RSI,RBX
            mov RDI,RBP
            call .L_427350

            test RAX,RAX
            je .L_428518
.L_428507:

            pop RBX
            mov EAX,1
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428518:

            movzx EDX,BYTE PTR [RBP+255]
            jmp .L_4284c2
.L_428521:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428530:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,72
.L_428541:

            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+24],R8
            mov BYTE PTR [RSP+45],SIL
            call .L_433510

            movzx EDX,BYTE PTR [R13+255]
            lea RCX,QWORD PTR [R13+RDX*1]
            cmp R13,RCX
            jae .L_4287c0

            mov RBX,R13
            xor R15D,R15D
            add RAX,2568
            mov R13D,R15D
            xor R14D,R14D
            mov QWORD PTR [RSP+32],RAX
            mov R15,RBX
            jmp .L_4285a5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428590:

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
.L_428599:

            mov RBX,RAX
            lea RAX,QWORD PTR [R15+RDX*1]
            cmp RBX,RAX
            jae .L_428600
.L_4285a5:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_428590

            movzx EAX,BYTE PTR [RSP+45]
            cmp AL,BYTE PTR [RBX+2]
            jne .L_428590

            movzx ECX,BYTE PTR [RBX+3]
            mov RDX,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RBX+4]
            mov RDI,R15
            call .L_427a70

            movsx EDX,AL
            movzx EAX,R13B
            cmp EDX,EAX
            mov ECX,EDX
            jg .L_428640

            movzx EAX,BYTE PTR [RBX+1]
            movzx EDX,BYTE PTR [R15+255]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            mov RBX,RAX
            lea RAX,QWORD PTR [R15+RDX*1]
            cmp RBX,RAX
            jb .L_4285a5

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428600:

            test R14,R14
            mov R15D,R13D
            je .L_4287c0

            mov RSI,QWORD PTR [RSP+24]
            test RSI,RSI
            je .L_428621

            movzx EAX,WORD PTR [R14]
            rol AX,8
            mov WORD PTR [RSI],AX
.L_428621:

            mov RCX,QWORD PTR [RSP+16]
            xor EAX,EAX
            test RCX,RCX
            je .L_428630

            mov BYTE PTR [RCX],R15B
.L_428630:

            add RSP,72
.L_428634:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_428640:

            movzx EAX,BYTE PTR [RBX+3]
            movzx ESI,BYTE PTR [RBX+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RBX+RAX*1+4]
            lea RAX,QWORD PTR [RBX+RSI*1+2]
            cmp RDX,RAX
            jae .L_4286fc

            mov R8,RBX
            mov QWORD PTR [RSP+56],R15
            mov EBX,ECX
            mov R15D,R13D
            mov R13,RDX
            nop
            nop
            nop
            nop
            nop
.L_428678:

            test BYTE PTR [R13],254
            movzx EDI,BYTE PTR [R13+1]
            jne .L_4286e5

            cmp DIL,2
            jbe .L_4286e5

            lea RBP,QWORD PTR [R13+2]
            xor R12D,R12D
            jmp .L_4286b8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428698:

            je .L_428710
.L_42869a:

            movzx EDX,DIL
            add R12D,1
            add RBP,3
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            cmp AL,R12B
            jbe .L_4286e0
.L_4286b8:

            test R14,R14
            je .L_4286d0

            movsx EAX,BYTE PTR [RBP+2]
            movsx EDX,BYTE PTR [R14+2]
            sar EAX,6
            sar EDX,6
            cmp DL,AL
            jge .L_428698
.L_4286d0:

            mov R15D,EBX
            mov R14,RBP
            jmp .L_42869a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4286e0:

            movzx ESI,BYTE PTR [R8+1]
.L_4286e5:

            lea R13,QWORD PTR [R13+RDI*1+2]
            lea RAX,QWORD PTR [R8+RSI*1+2]
            cmp R13,RAX
            jb .L_428678

            mov R13D,R15D
            mov R15,QWORD PTR [RSP+56]
.L_4286fc:

            movzx EDX,BYTE PTR [R15+255]
            jmp .L_428599
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428710:

            movzx EAX,WORD PTR [RBP]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol AX,8
            mov WORD PTR [RSP+46],AX
            call .L_416dd0

            cmp AX,WORD PTR [RSP+46]
            mov R8,QWORD PTR [RSP+48]
            jne .L_428750
.L_428738:

            movzx EDI,BYTE PTR [R13+1]
            mov R15D,EBX
            mov R14,RBP
            jmp .L_42869a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428750:

            movzx EAX,WORD PTR [R14]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol AX,8
            mov WORD PTR [RSP+46],AX
            call .L_416dd0

            cmp AX,WORD PTR [RSP+46]
            mov R8,QWORD PTR [RSP+48]
            je .L_4287b6

            movzx ESI,WORD PTR [RBP]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol SI,8
            movzx ESI,SI
            call .L_41ef70

            movzx ESI,WORD PTR [R14]
            mov RDI,QWORD PTR [RSP+32]
            mov BYTE PTR [RSP+46],AL
            rol SI,8
            movzx ESI,SI
            call .L_41ef70

            cmp BYTE PTR [RSP+46],AL
            mov R8,QWORD PTR [RSP+48]
            jb .L_428738
.L_4287b6:

            movzx EDI,BYTE PTR [R13+1]
            jmp .L_42869a
.L_4287c0:

            add RSP,72
.L_4287c4:

            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4287d4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4287e0:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov R13,RDX
            sub RSP,24
.L_4287f7:

            call .L_433510

            movzx EDX,BYTE PTR [R12+3]
            movzx ESI,BYTE PTR [R12+1]
            add RAX,2568
            mov QWORD PTR [RSP],RAX
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            lea R14,QWORD PTR [R12+RDX*1+4]
            lea RDX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RDX
            jb .L_42883f

            jmp .L_428970
          .byte 0x90
.L_428830:

            lea R14,QWORD PTR [R14+RAX*1+2]
            lea RAX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RAX
            jae .L_4288bd
.L_42883f:

            movzx EDX,BYTE PTR [R14]
            movzx EAX,BYTE PTR [R14+1]
            sar EDX,1
            cmp EDX,2
            jne .L_428830

            mov EDX,EAX
            shr DL,2
            test DL,DL
            je .L_428830

            lea RBX,QWORD PTR [R14+2]
            xor EBP,EBP
            jmp .L_428881
.L_428860:

            je .L_4288f0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428870:

            mov EDX,EAX
            add EBP,1
            add RBX,4
            shr DL,2
            cmp DL,BPL
            jbe .L_4288a8
.L_428881:

            movsx EDX,BYTE PTR [RBX+2]
            test DL,2
            je .L_428870

            test R15,R15
            je .L_42889f

            movsx ESI,BYTE PTR [R15+2]
            sar EDX,6
            sar ESI,6
            cmp SIL,DL
            jge .L_428860
.L_42889f:

            mov R15,RBX
            jmp .L_428870
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4288a8:

            movzx ESI,BYTE PTR [R12+1]
            lea R14,QWORD PTR [R14+RAX*1+2]
            lea RAX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RAX
            jb .L_42883f
.L_4288bd:

            test R15,R15
            je .L_428970

            xor EAX,EAX
            test R13,R13
            je .L_4288da

            movzx EDX,WORD PTR [R15]
            rol DX,8
            mov WORD PTR [R13],DX
.L_4288da:

            add RSP,24
.L_4288de:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4288f0:

            movzx EAX,WORD PTR [RBX]
            mov RDI,QWORD PTR [RSP]
            rol AX,8
            mov WORD PTR [RSP+14],AX
            call .L_416dd0

            cmp AX,WORD PTR [RSP+14]
            jne .L_428920
.L_42890c:

            mov R15,RBX
.L_42890f:

            movzx EAX,BYTE PTR [R14+1]
            jmp .L_428870
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428920:

            movzx EAX,WORD PTR [R15]
            mov RDI,QWORD PTR [RSP]
            rol AX,8
            mov WORD PTR [RSP+14],AX
            call .L_416dd0

            cmp AX,WORD PTR [RSP+14]
            je .L_42890f

            movzx ESI,WORD PTR [RBX]
            mov RDI,QWORD PTR [RSP]
            rol SI,8
            movzx ESI,SI
            call .L_41ef70

            movzx ESI,WORD PTR [R15]
            mov RDI,QWORD PTR [RSP]
            mov BYTE PTR [RSP+14],AL
            rol SI,8
            movzx ESI,SI
            call .L_41ef70

            cmp BYTE PTR [RSP+14],AL
            jb .L_42890c

            jmp .L_42890f
.L_428970:

            add RSP,24
.L_428974:

            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_428984:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428990:

            movzx R9D,BYTE PTR [RDI+255]
            lea RAX,QWORD PTR [RDI+R9*1]
            cmp RDI,RAX
            jae .L_428a74

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,R8
            mov R14,RDX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_4289c5:

            jmp .L_4289e2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4289d0:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R15+R9*1]
            cmp RBX,RAX
            jae .L_428a60
.L_4289e2:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_4289d0

            movzx ECX,BYTE PTR [RBX+3]
            lea RSI,QWORD PTR [RBX+4]
            mov RDX,RBP
            mov RDI,R15
            call .L_427a70

            test AL,AL
            jns .L_428a10
.L_428a03:

            movzx R9D,BYTE PTR [R15+255]
            jmp .L_4289d0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_428a10:

            movzx ESI,BYTE PTR [RBX+2]
            mov R8,R12
            mov RCX,R13
            mov RDX,R14
            mov RDI,R15
            call .L_428530

            test EAX,EAX
            je .L_428a45

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R15
            call .L_4287e0

            test EAX,EAX
            jne .L_428a03

            test R13,R13
            je .L_428a45

            mov BYTE PTR [R13],0
.L_428a45:

            add RSP,8
.L_428a49:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428a60:

            add RSP,8
            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_428a74:

            mov EAX,4
            ret 
.L_428a7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_428a80:

            mov EAX,ECX
            movzx ECX,R9B
            push RBX
.L_428a87:

            cmp ECX,8
            mov RBX,RDI
            mov BYTE PTR [RDI+265],SIL
            mov BYTE PTR [RDI+264],DL
            jae .L_428ac8

            test CL,4
            jne .L_428b30

            test ECX,ECX
            je .L_428af7

            movzx EDX,BYTE PTR [R8]
            test CL,2
            mov BYTE PTR [RDI],DL
            je .L_428af7

            mov ECX,ECX
            movzx EDX,WORD PTR [R8+RCX*1-2]
            mov WORD PTR [RDI+RCX*1-2],DX
            jmp .L_428af7
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428ac8:

            mov RDX,QWORD PTR [R8]
            lea RDI,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI-8],RDX
            mov EDX,ECX
            mov RSI,QWORD PTR [R8+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-16],RSI
            and RDI,-8
            mov RDX,RBX
            sub RDX,RDI
            mov RSI,R8
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_428af7:

            test AL,AL
            mov BYTE PTR [RBX+255],R9B
            je .L_428b14

            lea RDX,QWORD PTR [RBX+255]
            mov RSI,RBX
            mov RDI,RBX
            call .L_427750
.L_428b14:

            mov RDI,RBX
            call .L_433530

            pop RBX
.L_428b1d:

            mov ESI,512
            mov RDI,RAX
            jmp .L_402d80
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428b30:

            mov EDX,DWORD PTR [R8]
            mov ECX,ECX
            mov DWORD PTR [RDI],EDX
            mov EDX,DWORD PTR [R8+RCX*1-4]
            mov DWORD PTR [RDI+RCX*1-4],EDX
            jmp .L_428af7
.L_428b42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428b50:

            movzx ECX,BYTE PTR [RDI+255]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_428b88

            movzx EDX,BYTE PTR [RDI]
            sar EDX,1
            cmp EDX,4
            jne .L_428b7a

            jmp .L_428b90
          .byte 0x66
          .byte 0x90
.L_428b70:

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,4
            je .L_428b8a
.L_428b7a:

            movzx EDX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RAX
            ja .L_428b70
.L_428b88:

            xor EAX,EAX
.L_428b8a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428b90:

            ret 
.L_428b92:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428ba0:

            movzx EDX,BYTE PTR [RDI+255]
            add RDX,RDI
            cmp RDX,RDI
            ja .L_428bc6

            jmp .L_428c05
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428bb8:

            movzx EAX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RAX*1+2]
            cmp RDX,RDI
            jbe .L_428c05
.L_428bc6:

            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            cmp EAX,4
            jne .L_428bb8

            movzx EDX,BYTE PTR [RDI+1]
            lea RAX,QWORD PTR [RDI+2]
            lea RCX,QWORD PTR [RDI+RDX*1+2]
            cmp RCX,RAX
            jbe .L_428c05

            movzx EDX,BYTE PTR [RDI+2]
            cmp ESI,EDX
            jne .L_428bf7

            jmp .L_428c18
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428bf0:

            movzx EDX,BYTE PTR [RAX]
            cmp ESI,EDX
            je .L_428c10
.L_428bf7:

            movzx EDX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RAX
            ja .L_428bf0
.L_428c05:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428c10:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428c18:

            ret 
.L_428c1a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_428c20:

            mov ESI,9
            mov R8,RDI
            call .L_428ba0

            xor R9D,R9D
            test RAX,RAX
            je .L_428c7a

            mov ESI,8
            mov RDI,R8
            call .L_428ba0

            test RAX,RAX
            je .L_428c7a

            movzx EDX,BYTE PTR [RAX+1]
            test DL,DL
            je .L_428c7a

            cmp BYTE PTR [RAX+2],0
            jne .L_428c80

            add RAX,3
            sub EDX,1
            add RDX,RAX
            jmp .L_428c72
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428c68:

            add RAX,1
            cmp BYTE PTR [RAX-1],0
            jne .L_428c80
.L_428c72:

            cmp RDX,RAX
            jne .L_428c68

            xor R9D,R9D
.L_428c7a:

            mov EAX,R9D
            ret 
          .byte 0x66
          .byte 0x90
.L_428c80:

            mov R9D,1
            mov EAX,R9D
            ret 
.L_428c8a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_428c90:

            movzx EDX,BYTE PTR [RDI+255]
            add RDX,RDI
            cmp RDI,RDX
            jae .L_428cc8

            movzx EAX,BYTE PTR [RDI]
            mov RSI,RDI
            sar EAX,1
            cmp EAX,4
            jne .L_428cba

            jmp .L_428cd0
          .byte 0x66
          .byte 0x90
.L_428cb0:

            movzx EAX,BYTE PTR [RSI]
            sar EAX,1
            cmp EAX,4
            je .L_428cd0
.L_428cba:

            movzx EAX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RSI+RAX*1+2]
            cmp RSI,RDX
            jb .L_428cb0
.L_428cc8:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0x90
.L_428cd0:

            sub RSP,8

            movzx EAX,BYTE PTR [RSI+1]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_427cb0

            xor EAX,EAX
            add RSP,8
            ret 
.L_428cea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_428cf0:

            push R14
            push R13
            mov EAX,3
            push R12
            push RBP
            movzx R12D,DL
            push RBX
.L_428d01:

            movzx ECX,BYTE PTR [RDI+255]
            lea R8,QWORD PTR [R12+2]
            not ECX
            movzx ECX,CL
            cmp R8,RCX
            jae .L_428d47

            mov EBP,EDX
            mov R13,RSI
            mov RBX,RDI
            call .L_428c90

            test BPL,BPL
            jne .L_428d50
.L_428d29:

            add BYTE PTR [RBX+265],1
            mov RDI,RBX
            call .L_433530

            mov ESI,512
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
.L_428d47:

            pop RBX
.L_428d48:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_428d50:

            movzx R14D,BYTE PTR [RBX+255]
            lea EDX,DWORD PTR [RBP+2]
            mov RDI,RBX
            movzx EDX,DL
            add R14,RBX
            mov RSI,R14
            call .L_427c30

            cmp R12D,8
            mov BYTE PTR [R14],8
            mov BYTE PTR [R14+1],BPL
            lea RCX,QWORD PTR [R14+2]
            jae .L_428db0

            test R12B,4
            jne .L_428de4

            test R12D,R12D
            je .L_428d29

            movzx EAX,BYTE PTR [R13]
            test R12B,2
            mov BYTE PTR [R14+2],AL
            je .L_428d29

            mov R12D,R12D
            movzx EAX,WORD PTR [R13+R12*1-2]
            mov WORD PTR [RCX+R12*1-2],AX
            jmp .L_428d29
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428db0:

            mov RAX,QWORD PTR [R13]
            lea RDI,QWORD PTR [R14+10]
            mov RSI,R13
            and RDI,-8
            mov QWORD PTR [R14+2],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [R13+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R12D
            shr ECX,3

            rep movsq 

            jmp .L_428d29
.L_428de4:

            mov EAX,DWORD PTR [R13]
            mov R12D,R12D
            mov DWORD PTR [R14+2],EAX
            mov EAX,DWORD PTR [R13+R12*1-4]
            mov DWORD PTR [RCX+R12*1-4],EAX
            jmp .L_428d29
.L_428dfe:

            nop
            nop
.L_428e00:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            lea R14,QWORD PTR [RSI+4]
            push RBX
.L_428e0f:

            movzx EDX,BYTE PTR [RSI+3]
            mov RBP,RSI
            mov RSI,R14
            mov R12,RDI
            call .L_427a50

            test RAX,RAX
            je .L_428ec8

            movzx EDX,BYTE PTR [R13]
            mov RSI,RAX
            mov RDI,R12
            mov RBX,RAX
            and EDX,1
            call .L_4274d0

            test RAX,RAX
            mov RBP,RAX
            je .L_428f10

            cmp BYTE PTR [R12+255],252
            ja .L_428eea

            test BYTE PTR [R13],1
            jne .L_428f00
.L_428e66:

            movzx ESI,BYTE PTR [RBP+1]
            add RSI,2
.L_428e6e:

            add RSI,RBP
            mov EDX,3
            mov RDI,R12
            call .L_427c30

            add BYTE PTR [RBP+1],3
            add BYTE PTR [RBX+1],3
            movzx EDX,BYTE PTR [RBP+1]
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            movzx EDX,WORD PTR [R13+2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            sub EAX,1
            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*2]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            mov WORD PTR [RAX],DX
            movzx EDX,BYTE PTR [R13+4]
            mov BYTE PTR [RAX+2],DL
            xor EAX,EAX
            pop RBX
.L_428eb9:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428ec8:

            movzx EAX,BYTE PTR [RBP+3]
            movzx EBX,BYTE PTR [R12+255]
            add EAX,7
            movzx EDX,BL
            sar EAX,3
            lea EDX,DWORD PTR [RAX+RDX*1+9]
            cmp EDX,255
            jle .L_428f60
.L_428eea:

            pop RBX
            mov EAX,3
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428f00:

            or BYTE PTR [RBX],1
            test RBP,RBP
            jne .L_428e66

            jmp .L_428f24
          .byte 0x66
          .byte 0x90
.L_428f10:

            cmp BYTE PTR [R12+255],250
            ja .L_428eea
.L_428f1b:

            xor EBP,EBP
            test BYTE PTR [R13],1
            jne .L_428f00
.L_428f24:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,2
            mov RDI,R12
            lea RBP,QWORD PTR [RBX+RAX*1+2]
            mov RSI,RBP
            call .L_427c30

            add BYTE PTR [RBX+1],2
            xor EAX,EAX
            mov ESI,2
            mov WORD PTR [RBP],AX
            test BYTE PTR [R13],1
            je .L_428e6e

            mov BYTE PTR [RBP],1
            jmp .L_428e6e
.L_428f60:

            add RBX,R12
            lea EDX,DWORD PTR [RAX+4]
            mov RDI,R12
            mov RSI,RBX
            call .L_427c30

            movzx EAX,BYTE PTR [RBP+3]
            movzx EDX,BYTE PTR [RBP+2]
            mov ECX,2
            mov WORD PTR [RBX],CX
            mov BYTE PTR [RBX+3],AL
            add EAX,7
            mov BYTE PTR [RBX+2],DL
            sar EAX,3
            lea RDX,QWORD PTR [RBX+4]
            cmp EAX,8
            jae .L_428fc8

            test AL,4
            jne .L_42900c

            test EAX,EAX
            je .L_428fb8

            movzx ECX,BYTE PTR [RBP+4]
            test AL,2
            mov BYTE PTR [RDX],CL
            je .L_428fb8

            mov ECX,EAX
            movzx ESI,WORD PTR [R14+RCX*1-2]
            mov WORD PTR [RDX+RCX*1-2],SI
            nop
            nop
            nop
.L_428fb8:

            add EAX,2
            mov BYTE PTR [RBX+1],AL
            jmp .L_428f1b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428fc8:

            mov RCX,QWORD PTR [RBP+4]
            mov QWORD PTR [RBX+4],RCX
            mov ECX,EAX
            mov RSI,QWORD PTR [R14+RCX*1-8]
            mov QWORD PTR [RDX+RCX*1-8],RSI
            lea RCX,QWORD PTR [RBX+12]
            and RCX,-8
            sub RDX,RCX
            sub R14,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_428fb8

            and EDX,4294967288
            xor ESI,ESI
.L_428ff9:

            mov EDI,ESI
            add ESI,8
            mov R8,QWORD PTR [R14+RDI*1]
            cmp ESI,EDX
            mov QWORD PTR [RCX+RDI*1],R8
            jb .L_428ff9

            jmp .L_428fb8
.L_42900c:

            mov ECX,DWORD PTR [RBP+4]
            mov DWORD PTR [RDX],ECX
            mov ECX,EAX
            mov ESI,DWORD PTR [R14+RCX*1-4]
            mov DWORD PTR [RDX+RCX*1-4],ESI
            jmp .L_428fb8
.L_42901e:

            nop
            nop
.L_429020:

            push R15
            push R14
            lea RAX,QWORD PTR [RSI+4]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R14,RDI
            sub RSP,24
.L_42903b:

            movzx EDX,BYTE PTR [RSI+3]
            mov RSI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_427a50

            test RAX,RAX
            mov RBX,RAX
            je .L_429240

            mov RSI,RAX
            mov RDI,R14
            call .L_427560

            movzx EDX,BYTE PTR [RBP]
            mov R15,RAX
            mov RSI,RBX
            mov RDI,R14
            and EDX,1
            call .L_4273d0

            mov R13,RAX
            xor EAX,EAX
            test R15,R15
            sete AL
            shl EAX,2
            test R13,R13
            je .L_429252
.L_42908e:

            movzx ESI,BYTE PTR [R14+255]
            lea EDX,DWORD PTR [RAX+4]
            movzx EDX,DX
            movzx EAX,SIL
            add EDX,EAX
            mov EAX,3
            cmp EDX,255
            jg .L_42914b

            test R15,R15
            mov ECX,4294967295
            je .L_429160

            test RBX,RBX
            je .L_4291a8
.L_4290ca:

            test R15,R15
            je .L_429260

            movzx ECX,BYTE PTR [R15+2]
.L_4290d8:

            mov EAX,ECX
            and ECX,15
            sub ECX,1
            or EAX,16
            test R13,R13
            movsxd RCX,ECX
            mov BYTE PTR [R15+2],AL
            mov DWORD PTR [R14+RCX*4+268],0
            je .L_4292b0

            movzx ESI,BYTE PTR [R13+1]
            add RSI,2
.L_429108:

            add RSI,R13
            mov EDX,4
            mov RDI,R14
            call .L_427c30

            add BYTE PTR [R13+1],4
            add BYTE PTR [RBX+1],4
            movzx EAX,BYTE PTR [R13+1]
            mov EDX,DWORD PTR [RBP+2]
            shr AL,2
            sub EAX,1
            movzx EAX,AL
            mov DWORD PTR [R13+RAX*4+2],EDX
            xor EAX,EAX
            test BYTE PTR [RBP],1
            je .L_42914b

            or BYTE PTR [RBX],1
            or BYTE PTR [R15],1
            or BYTE PTR [R13],1
.L_42914b:

            add RSP,24
.L_42914f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429160:

            movzx EAX,WORD PTR [R14+266]
            mov ECX,1
            mov EDX,EAX
            jmp .L_429184
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429178:

            add ECX,1
            cmp ECX,16
            je .L_4292e8
.L_429184:

            bt EAX,ECX
            jb .L_429178

            mov EAX,1
            shl EAX,CL
            or EDX,EAX
            test RBX,RBX
            mov WORD PTR [R14+266],DX
            jne .L_4290ca

            nop
            nop
            nop
            nop
            nop
.L_4291a8:

            movzx EAX,BYTE PTR [R12+3]
            movzx EBX,SIL
            mov RDI,R14
            add RBX,R14
            mov DWORD PTR [RSP+12],ECX
            mov RSI,RBX
            add EAX,7
            sar EAX,3
            lea EDX,DWORD PTR [RAX+4]
            call .L_427c30

            movzx EAX,BYTE PTR [R12+3]
            movzx EDX,BYTE PTR [R12+2]
            mov ECX,2
            mov WORD PTR [RBX],CX
            mov ECX,DWORD PTR [RSP+12]
            mov BYTE PTR [RBX+3],AL
            add EAX,7
            mov BYTE PTR [RBX+2],DL
            sar EAX,3
            lea RDX,QWORD PTR [RBX+4]
            cmp EAX,8
            jae .L_4292f8

            test AL,4
            jne .L_42934c

            test EAX,EAX
            je .L_429230

            movzx ESI,BYTE PTR [R12+4]
            test AL,2
            mov BYTE PTR [RDX],SIL
            je .L_429230

            mov RDI,QWORD PTR [RSP]
            mov ESI,EAX
            movzx EDI,WORD PTR [RDI+RSI*1-2]
            mov WORD PTR [RDX+RSI*1-2],DI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429230:

            add EAX,2
            mov BYTE PTR [RBX+1],AL
            jmp .L_4290ca
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429240:

            movzx EAX,BYTE PTR [R12+3]
            xor R15D,R15D
            add EAX,7
            sar EAX,3
            add EAX,8
.L_429252:

            add EAX,2
            xor R13D,R13D
            jmp .L_42908e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429260:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,4
            mov RDI,R14
            mov DWORD PTR [RSP],ECX
            lea R15,QWORD PTR [RBX+RAX*1+2]
            mov RSI,R15
            call .L_427c30

            mov ECX,DWORD PTR [RSP]
            add BYTE PTR [RBX+1],4
            mov EDX,518
            mov BYTE PTR [R15+3],0
            mov WORD PTR [R15],DX
            and ECX,15
            or ECX,16
            mov BYTE PTR [R15+2],CL
            movzx EAX,BYTE PTR [R12+3]
            mov BYTE PTR [R15+3],AL
            jmp .L_4290d8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4292b0:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,2
            mov RDI,R14
            lea R13,QWORD PTR [RBX+RAX*1+2]
            mov RSI,R13
            call .L_427c30

            mov EAX,4
            add BYTE PTR [RBX+1],2
            mov ESI,2
            mov WORD PTR [R13],AX
            jmp .L_429108
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4292e8:

            mov EAX,3
            jmp .L_42914b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4292f8:

            mov RSI,QWORD PTR [R12+4]
            mov QWORD PTR [RBX+4],RSI
            mov R11,QWORD PTR [RSP]
            mov ESI,EAX
            mov RDI,QWORD PTR [R11+RSI*1-8]
            mov R8,R11
            mov QWORD PTR [RDX+RSI*1-8],RDI
            lea RSI,QWORD PTR [RBX+12]
            and RSI,-8
            sub RDX,RSI
            sub R8,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_429230

            and EDX,4294967288
            xor EDI,EDI
.L_429335:

            mov R9D,EDI
            add EDI,8
            mov R10,QWORD PTR [R8+R9*1]
            cmp EDI,EDX
            mov QWORD PTR [RSI+R9*1],R10
            jb .L_429335

            jmp .L_429230
.L_42934c:

            mov ESI,DWORD PTR [R12+4]
            mov DWORD PTR [RDX],ESI
            mov RDI,QWORD PTR [RSP]
            mov ESI,EAX
            mov EDI,DWORD PTR [RDI+RSI*1-4]
            mov DWORD PTR [RDX+RSI*1-4],EDI
            jmp .L_429230
.L_429366:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429370:

            push RBX

            mov RBX,RDI
            call .L_4280f0

            pxor XMM0,XMM0
            xor EAX,EAX
            mov QWORD PTR [RBX+316],0
            mov DWORD PTR [RBX+324],0
            mov WORD PTR [RBX+266],AX
            mov DWORD PTR [RBX+328],172800
            movups XMMWORD PTR [RBX+268],XMM0
            movups XMMWORD PTR [RBX+284],XMM0
            movups XMMWORD PTR [RBX+300],XMM0
            pop RBX

            ret 
.L_4293bc:

            nop
            nop
            nop
            nop
.L_4293c0:

            push RBX

            mov RBX,RDI
            call .L_428130

            lea RAX,QWORD PTR [RIP+.L_42b4d0]
            mov DWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+376],RBX
            mov QWORD PTR [RBX+384],0
            mov QWORD PTR [RBX+408],RBX
            mov RDI,RBX
            mov QWORD PTR [RBX+336],RAX
            lea RAX,QWORD PTR [RBX+336]
            mov QWORD PTR [RBX+416],0
            mov QWORD PTR [RBX+440],RBX
            mov QWORD PTR [RBX+448],0
            mov QWORD PTR [RBX+352],RAX
            lea RAX,QWORD PTR [RIP+.L_42b4ed]
            mov QWORD PTR [RBX+360],RAX
            lea RAX,QWORD PTR [RIP+.L_42b2b0]
            mov QWORD PTR [RBX+368],RAX
            lea RAX,QWORD PTR [RIP+.L_42b4f2]
            mov QWORD PTR [RBX+392],RAX
            lea RAX,QWORD PTR [RIP+.L_429880]
            mov QWORD PTR [RBX+400],RAX
            lea RAX,QWORD PTR [RIP+.L_42b4f7]
            mov QWORD PTR [RBX+424],RAX
            lea RAX,QWORD PTR [RIP+.L_429c70]
            mov QWORD PTR [RBX+432],RAX
            pop RBX

            jmp .L_429370
.L_429482:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429490:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_433510

            lea RBP,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+360]
            mov RDI,RBP
            call .L_42f860

            lea RSI,QWORD PTR [RBX+392]
            mov RDI,RBP
            call .L_42f860

            add RSP,8
            lea RSI,QWORD PTR [RBX+424]
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_42f860
.L_4294d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4294e0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_433510

            lea RBP,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+360]
            mov RDI,RBP
            call .L_42f8a0

            lea RSI,QWORD PTR [RBX+392]
            mov RDI,RBP
            call .L_42f8a0

            add RSP,8
            lea RSI,QWORD PTR [RBX+424]
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_42f8a0
.L_429528:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429530:

            push RBX
            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RAX+2580],4
            je .L_429548

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_429548:

            add BYTE PTR [RBX+265],1
            mov RDI,RBX
            call .L_433530

            pop RBX
            mov ESI,512
            mov RDI,RAX
            jmp .L_402d80
.L_429565:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429570:

            push RBX
            mov RBX,RDI
            call .L_433510

            cmp DWORD PTR [RAX+2580],4
            je .L_429588

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_429588:

            add BYTE PTR [RBX+264],1
            pop RBX
            ret 
.L_429591:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4295a0:

            mov EAX,DWORD PTR [RDI+328]
            ret 
.L_4295a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4295b0:

            mov DWORD PTR [RDI+328],ESI
            xor EAX,EAX
            ret 
.L_4295b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4295c0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,184
.L_4295da:

            lea R14,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RDX
            mov DWORD PTR [RSP],R8D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_433510

            mov RSI,R15
            mov RBP,RAX
            mov RDI,R14
            call .L_431cf0

            add RBP,216
            mov RDI,R14
            call .L_431b50

            xor EDX,EDX
            mov RSI,R14
            mov RDI,RBP
            call .L_42f920

            test RAX,RAX
            je .L_429704

            movzx EDX,BYTE PTR [RBX+255]
            mov R15,RAX
            mov R8D,DWORD PTR [RSP]
            add RDX,RBX
            cmp RBX,RDX
            jb .L_429662

            jmp .L_429748
          .byte 0x66
          .byte 0x90
.L_429650:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBX,RDX
            jae .L_429748
.L_429662:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,4
            jne .L_429650

            cmp RBX,-2
            movzx R14D,BYTE PTR [RBX+1]
            lea R12,QWORD PTR [RBX+2]
            je .L_429748

            test R14B,R14B
            je .L_429748

            test R8B,R8B
            je .L_429752

            sub R8D,1
            add R14,R12
            movzx R8D,R8B
            lea RAX,QWORD PTR [R13+R8*1+1]
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
.L_4296a8:

            cmp R12,R14
            jae .L_4296d2

            movzx EAX,BYTE PTR [R13]
            mov RSI,R12
            cmp AL,BYTE PTR [RBX+2]
            jne .L_4296c4

            jmp .L_429730
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4296c0:

            cmp BYTE PTR [RSI],AL
            je .L_429730
.L_4296c4:

            movzx EDX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RSI+RDX*1+2]
            cmp RSI,R14
            jb .L_4296c0
.L_4296d2:

            add R13,1
            cmp QWORD PTR [RSP],R13
            jne .L_4296a8
.L_4296dc:

            movzx EAX,BYTE PTR [RSP+144]
            cmp AX,WORD PTR [R15+58]
            je .L_42976a
.L_4296eb:

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R15
            mov RDI,RBP
            call .L_430850

            test EAX,EAX
            jne .L_429748
.L_429704:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42977d

            add RSP,184
.L_42971e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429730:

            movzx EAX,BYTE PTR [RSI+1]
            mov RDI,R15
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            test EAX,EAX
            je .L_4296d2

            nop
            nop
            nop
            nop
            nop
.L_429748:

            mov RDI,R15
            call .L_403400

            jmp .L_429704
.L_429752:

            movzx EDX,R14B
            mov RSI,R12
            mov RDI,R15
            call .L_403d80

            test EAX,EAX
            jne .L_429748

            jmp .L_4296dc
.L_42976a:

            sub EAX,1
            mov RDI,R15
            movzx ESI,AX
            call .L_403470

            jmp .L_4296eb
.L_42977d:

            call __stack_chk_fail@PLT
.L_429782:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429790:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,312
.L_4297aa:

            movzx EBX,WORD PTR [RDX+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp BX,WORD PTR [RDX+58]
            mov WORD PTR [RSP+30],AX
            jae .L_429838

            mov R15,RDX
            lea R14,QWORD PTR [RSP+30]
            jmp .L_4297f0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4297e0:

            movzx EAX,BYTE PTR [RSP+31]
            lea EBX,DWORD PTR [RBX+RAX*1+2]
            cmp BX,WORD PTR [R15+58]
            jae .L_429838
.L_4297f0:

            movzx ESI,BX
            mov RCX,R14
            mov EDX,2
            mov RDI,R15
            call .L_4038b0

            cmp BYTE PTR [RSP+30],13
            jne .L_4297e0

            movzx R8D,BYTE PTR [RSP+31]
            lea R14,QWORD PTR [RSP+32]
            lea ESI,DWORD PTR [RBX+2]
            mov RDI,R15
            movzx ESI,SI
            mov RCX,R14
            mov EDX,R8D
            mov DWORD PTR [RSP+12],R8D
            call .L_4038b0

            mov R8D,DWORD PTR [RSP+12]
            jmp .L_429840
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429838:

            lea R14,QWORD PTR [RSP+32]
            xor R8D,R8D
.L_429840:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_4295c0

            mov RAX,QWORD PTR [RSP+296]
            xor RAX,QWORD PTR FS:[40]
            jne .L_429876

            add RSP,312
.L_42986b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_429876:

            call __stack_chk_fail@PLT
.L_42987b:

            nop
            nop
            nop
            nop
            nop
.L_429880:

            jmp .L_429790
.L_429885:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429890:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov R13,RDX
            sub RSP,176
.L_4298a8:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R12
            mov RDI,RBP
            mov WORD PTR [RSP+13],DX
            add RBX,216
            call .L_431cf0

            mov RDI,RBP
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42f920

            test RAX,RAX
            je .L_42992b

            mov RBP,RAX
            lea RSI,QWORD PTR [RSP+13]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+13],AX
            mov BYTE PTR [RSP+15],R14B
            call .L_403d80

            test EAX,EAX
            je .L_429950
.L_429923:

            mov RDI,RBP
            call .L_403400
.L_42992b:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_429969

            add RSP,176
.L_429945:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_429950:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_430850

            test EAX,EAX
            je .L_42992b

            jmp .L_429923
.L_429969:

            call __stack_chk_fail@PLT
.L_42996e:

            nop
            nop
.L_429970:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,296
.L_42998a:

            movzx R14D,WORD PTR [RDX+60]
            movzx EBX,WORD PTR [RDX+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            sub EBX,R14D
            cmp BX,255
            jbe .L_4299f8
.L_4299b0:

            mov EBX,4294967295
.L_4299b5:

            mov RDI,RBP
            call .L_433510

            cmp DWORD PTR [RAX+2580],4
            je .L_429ad0
.L_4299ca:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_429c69

            add RSP,296
.L_4299e8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4299f8:

            mov R15,RDX
            call .L_433510

            cmp DWORD PTR [RAX+2580],4
            jne .L_4299b0

            lea RAX,QWORD PTR [RSP+16]
            movzx ESI,R14W
            movzx EDX,BX
            mov RDI,R15
            mov RCX,RAX
            mov R14,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4038b0

            movzx ESI,BX
            add RSI,R14
            cmp RSI,R14
            jbe .L_4299b0

            lea RAX,QWORD PTR [R14+2]
            cmp RSI,RAX
            jb .L_4299b0

            movzx EAX,BYTE PTR [RSP+17]
            mov RDI,RAX
            lea RAX,QWORD PTR [R14+RAX*1+2]
            cmp RSI,RAX
            jb .L_4299b0

            mov R9,R14
            xor R8D,R8D
            xor R10D,R10D
            xor R11D,R11D
            jmp .L_429aaf
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429a70:

            cmp ECX,9
            je .L_4299b0

            cmp ECX,11
            je .L_429ae8
.L_429a7e:

            cmp RSI,RAX
            jbe .L_429b10

            lea RDX,QWORD PTR [RAX+2]
            cmp RSI,RDX
            jb .L_4299b0

            movzx EDX,BYTE PTR [RAX+1]
            mov R9,RAX
            mov RDI,RDX
            lea RDX,QWORD PTR [RAX+RDX*1+2]
            cmp RSI,RDX
            jb .L_4299b0

            mov RAX,RDX
.L_429aaf:

            movzx ECX,BYTE PTR [R9]
            cmp ECX,18
            sete DL
            cmp ECX,8
            sete R15B
            or DL,R15B
            je .L_429a70

            mov R10D,EDX
            jmp .L_429a7e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429ad0:

            mov ECX,EBX
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_429890

            jmp .L_4299ca
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429ae8:

            cmp DIL,2
            jne .L_4299b0

            movzx R8D,WORD PTR [R9+2]
            mov R11D,1
            rol R8W,8
            jmp .L_429a7e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429b10:

            test R11B,R11B
            je .L_4299b0

            test R10B,R10B
            je .L_4299b0

            movzx R11D,BYTE PTR [RBP+255]
            add R11,RBP
            cmp RBP,R11
            jae .L_429c2b

            mov RAX,RBP
            jmp .L_429b4c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429b40:

            cmp R9,R11
            mov RAX,R9
            jae .L_429c2b
.L_429b4c:

            movzx EDX,BYTE PTR [RAX+1]
            lea R9,QWORD PTR [RAX+RDX*1+2]
            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,4
            jne .L_429b40

            add RAX,2
            cmp R9,RAX
            ja .L_429b83

            jmp .L_429b40
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429b70:

            cmp ECX,9
            movzx EDX,BYTE PTR [RAX+1]
            je .L_429ba8
.L_429b79:

            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp R9,RAX
            jbe .L_429b40
.L_429b83:

            movzx ECX,BYTE PTR [RAX]
            cmp ECX,11
            jne .L_429b70

            movzx EDX,WORD PTR [RAX+2]
            rol DX,8
            cmp R8W,DX
            jne .L_4299b0

            movzx EDX,BYTE PTR [RAX+1]
            jmp .L_429b79
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429ba8:

            lea R10D,DWORD PTR [RDX+2]
            movzx ECX,BX
            movzx ESI,R10B
            add ECX,ESI
            cmp ECX,255
            jg .L_4299b0

            movzx R15D,R10B
            movzx ECX,BX
            add RCX,QWORD PTR [RSP+8]
            cmp R15D,8
            jae .L_429bf8

            test R15B,4
            jne .L_429c45

            test R15D,R15D
            je .L_429bea

            movzx ESI,BYTE PTR [RAX]
            test R15B,2
            mov BYTE PTR [RCX],SIL
            jne .L_429c58
.L_429bea:

            movzx R10D,R10B
            add EBX,R10D
            jmp .L_429b79
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429bf8:

            mov RSI,QWORD PTR [RAX]
            mov QWORD PTR [RCX],RSI
            mov ESI,R15D
            mov RDI,QWORD PTR [RAX+RSI*1-8]
            mov QWORD PTR [RCX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,RAX
            and RDI,-8
            sub RCX,RDI
            add R15D,ECX
            sub RSI,RCX
            shr R15D,3
            mov ECX,R15D

            rep movsq 

            jmp .L_429bea
.L_429c2b:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,BL
            mov RDI,RBP
            mov EBX,1
            call .L_428cf0

            jmp .L_4299b5
.L_429c45:

            mov ESI,DWORD PTR [RAX]
            mov R15D,R15D
            mov DWORD PTR [RCX],ESI
            mov ESI,DWORD PTR [RAX+R15*1-4]
            mov DWORD PTR [RCX+R15*1-4],ESI
            jmp .L_429bea
.L_429c58:

            mov R15D,R15D
            movzx ESI,WORD PTR [RAX+R15*1-2]
            mov WORD PTR [RCX+R15*1-2],SI
            jmp .L_429bea
.L_429c69:

            call __stack_chk_fail@PLT
.L_429c6e:

            nop
            nop
.L_429c70:

            jmp .L_429970
.L_429c75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429c80:

            movzx R9D,R9B
            push R12
            push RBP
            lea RBP,QWORD PTR [R8+R9*1]
            push RBX
.L_429c8c:

            cmp R8,RBP
            jae .L_429dc1

            lea RAX,QWORD PTR [R8+2]
            cmp RBP,RAX
            jb .L_429ed0

            movzx EAX,BYTE PTR [R8+1]
            lea R12,QWORD PTR [R8+RAX*1+2]
            cmp RBP,R12
            jb .L_429ed0

            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,1
            je .L_429e0c
.L_429cc4:

            cmp EAX,5
            jne .L_429dd0

            movzx EAX,BYTE PTR [R8+1]
            test AL,AL
            je .L_429ed0

            cmp BYTE PTR [R8+2],0
            js .L_429f70

            cmp RAX,5
            jbe .L_429ed0

            lea R9,QWORD PTR [R8+3]
            lea R10,QWORD PTR [R8+7]
            mov EDI,6
            mov R11D,4
.L_429d02:

            movzx R10D,BYTE PTR [R10]
            add RDI,R10
            cmp RAX,RDI
            jb .L_429ed0

            lea RDI,QWORD PTR [R11+R10*1+1]
            lea R8,QWORD PTR [R8+RAX*1+2]
            add R9,RDI
            cmp RBP,R8
            jb .L_429ed0

            cmp R8,R9
            jbe .L_429dd0

            lea RAX,QWORD PTR [R9+2]
            cmp R8,RAX
            jb .L_429ed0

            movzx EAX,BYTE PTR [R9+1]
            lea RAX,QWORD PTR [R9+RAX*1+2]
            cmp R8,RAX
            jae .L_429d8c

            jmp .L_429ed0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429d58:

            cmp BYTE PTR [RDX],0
            je .L_429d62
.L_429d5d:

            cmp BYTE PTR [RCX],0
            jne .L_429dc1
.L_429d62:

            cmp R8,RAX
            jbe .L_429dd0

            lea RDI,QWORD PTR [RAX+2]
            cmp R8,RDI
            jb .L_429ed0

            movzx EDI,BYTE PTR [RAX+1]
            mov R9,RAX
            lea RDI,QWORD PTR [RAX+RDI*1+2]
            cmp R8,RDI
            jb .L_429ed0

            mov RAX,RDI
.L_429d8c:

            movzx EDI,BYTE PTR [R9]
            sar EDI,1
            cmp EDI,6
            jne .L_429d58

            cmp BYTE PTR [R9+1],1
            jbe .L_429ed0

            movzx EDI,WORD PTR [R9+2]
            rol DI,8
            cmp SI,DI
            jne .L_429d58

            mov BYTE PTR [RDX],1
            test BYTE PTR [R9],1
            je .L_429d5d

            mov BYTE PTR [RCX],1
            cmp BYTE PTR [RDX],0
            je .L_429d62
.L_429dc1:

            pop RBX
.L_429dc2:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429dd0:

            cmp RBP,R12
            jbe .L_429dc1

            lea RAX,QWORD PTR [R12+2]
            cmp RBP,RAX
            jb .L_429ed0

            movzx EAX,BYTE PTR [R12+1]
            mov R8,R12
            lea RAX,QWORD PTR [R12+RAX*1+2]
            cmp RBP,RAX
            jb .L_429ed0

            mov R12,RAX
            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,1
            jne .L_429cc4
.L_429e0c:

            movzx EAX,BYTE PTR [R8+1]
            cmp AL,1
            jbe .L_429ed0

            movzx R9D,AL
            movzx EAX,BYTE PTR [R8+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDI,QWORD PTR [RAX+2]
            cmp R9,RDI
            jb .L_429ed0

            lea RBX,QWORD PTR [R8+R9*1+2]
            lea RDI,QWORD PTR [R8+RAX*1+4]
            cmp RBP,RBX
            jb .L_429ed0

            cmp RBX,RDI
            jbe .L_429dd0

            lea RAX,QWORD PTR [RDI+2]
            cmp RBX,RAX
            jb .L_429ed0

            movzx EAX,BYTE PTR [RDI+1]
            lea R9,QWORD PTR [RDI+RAX*1+2]
            cmp RBX,R9
            jb .L_429ed0

            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            je .L_429f20

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429e78:

            cmp EAX,2
            jne .L_429ee0

            movzx R11D,BYTE PTR [RDI+1]
            xor R8D,R8D
            lea R10,QWORD PTR [RDI+2]
            mov EAX,R11D
            shr AL,2
            test AL,AL
            jne .L_429eab

            jmp .L_429ee0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429e98:

            mov EAX,R11D
            add R8D,1
            add R10,4
            shr AL,2
            cmp R8B,AL
            jae .L_429ee0
.L_429eab:

            movzx EAX,WORD PTR [R10]
            rol AX,8
            cmp SI,AX
            jne .L_429e98

            mov BYTE PTR [RDX],1
            test BYTE PTR [RDI],1
            je .L_429ec3

            mov BYTE PTR [RCX],1
.L_429ec3:

            movzx R11D,BYTE PTR [RDI+1]
            jmp .L_429e98
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429ed0:

            pop RBX
.L_429ed1:

            mov EAX,6
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429ee0:

            cmp BYTE PTR [RDX],0
            je .L_429eee

            cmp BYTE PTR [RCX],0
            jne .L_429dc1
.L_429eee:

            cmp RBX,R9
            jbe .L_429dd0

            lea RAX,QWORD PTR [R9+2]
            cmp RBX,RAX
            jb .L_429ed0

            movzx EAX,BYTE PTR [R9+1]
            mov RDI,R9
            lea RAX,QWORD PTR [R9+RAX*1+2]
            cmp RBX,RAX
            jb .L_429ed0

            mov R9,RAX
            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            jne .L_429e78
.L_429f20:

            cmp BYTE PTR [RDI+1],2
            jbe .L_429ee0

            lea R11,QWORD PTR [RDI+2]
            xor R10D,R10D
            jmp .L_429f51
          .byte 0x90
.L_429f30:

            movzx R8D,BYTE PTR [RDI+1]
            add R10D,1
            add R11,3
            lea EAX,DWORD PTR [R8+R8*8]
            lea EAX,DWORD PTR [R8+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            cmp R10B,AL
            jae .L_429ee0
.L_429f51:

            movzx EAX,WORD PTR [R11]
            rol AX,8
            cmp SI,AX
            jne .L_429f30

            mov BYTE PTR [RDX],1
            test BYTE PTR [RDI],1
            je .L_429f30

            mov BYTE PTR [RCX],1
            jmp .L_429f30
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429f70:

            cmp RAX,1
            je .L_429ed0

            lea R9,QWORD PTR [R8+3]
            mov EDI,2
            xor R11D,R11D
            mov R10,R9
            jmp .L_429d02
.L_429f8e:

            nop
            nop
.L_429f90:

            movzx EDX,DL
            push R15
            push R14
            push R13
            lea R13,QWORD PTR [RSI+RDX*1]
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_429fa5:

            cmp RSI,R13
            mov QWORD PTR [RSP+16],RCX
            jae .L_42a238

            lea RAX,QWORD PTR [RSI+2]
            mov RBX,RSI
            cmp R13,RAX
            jb .L_42a238

            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp R13,RAX
            jb .L_42a238

            movzx EAX,R8B
            mov RBP,RDI
            mov DWORD PTR [RSP+28],EAX
            jmp .L_42a02a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429fe8:

            cmp EAX,5
            jne .L_429ff6

            and EDX,1
            jne .L_42a120
.L_429ff6:

            movzx EAX,BYTE PTR [RBX+1]
            lea R12,QWORD PTR [RBX+RAX*1+2]
.L_429fff:

            cmp R13,R12
            mov RBX,R12
            jbe .L_42a238

            lea RAX,QWORD PTR [RBX+2]
            cmp R13,RAX
            jb .L_42a238

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R13,RAX
            jb .L_42a238
.L_42a02a:

            movzx EAX,BYTE PTR [RBX]
            mov EDX,EAX
            sar EAX,1
            cmp EAX,1
            jne .L_429fe8

            mov RSI,RBX
            mov RDI,RBP
            call .L_427560

            mov EDX,1
            mov RSI,RBX
            mov RDI,RBP
            mov R15,RAX
            call .L_4273d0

            mov EDX,1
            mov RSI,RBX
            mov RDI,RBP
            mov R12,RAX
            call .L_4274d0

            test BYTE PTR [RBX],1
            mov R14,RAX
            je .L_429ff6

            test R15,R15
            je .L_42a07d

            test R12,R12
            je .L_429ff6
.L_42a07d:

            movzx EDX,BYTE PTR [RBX+3]
            mov R8D,DWORD PTR [RSP+28]
            lea RSI,QWORD PTR [RBX+4]
            mov RCX,QWORD PTR [RSP+16]
            mov RDI,RBP
            call .L_427930

            test RAX,RAX
            mov R15,RAX
            je .L_42a104

            test R12,R12
            je .L_42a0ce

            mov EDX,1
            mov RSI,RAX
            mov RDI,RBP
            call .L_4273d0

            test RAX,RAX
            je .L_42a104

            movzx EDX,BYTE PTR [R12+1]
            mov RSI,RAX
            mov RDI,R12
            call memcmp@PLT

            test EAX,EAX
            jne .L_42a104
.L_42a0ce:

            test R14,R14
            je .L_429ff6

            mov EDX,1
            mov RSI,R15
            mov RDI,RBP
            call .L_4274d0

            test RAX,RAX
            je .L_42a104

            movzx EDX,BYTE PTR [R14+1]
            mov RSI,RAX
            mov RDI,R14
            call memcmp@PLT

            test EAX,EAX
            je .L_429ff6
.L_42a104:

            add RSP,40
.L_42a108:

            mov EAX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a120:

            cmp BYTE PTR [RBX+2],0
            lea R12,QWORD PTR [RBX+3]
            js .L_42a250

            mov ESI,DWORD PTR [RBX+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
.L_42a13b:

            mov R9D,DWORD PTR [RSP+28]
            mov R8,QWORD PTR [RSP+16]
            mov RDI,RBP
            call .L_427b00

            test RAX,RAX
            je .L_42a104

            test BYTE PTR [RAX],1
            je .L_42a104

            cmp BYTE PTR [RBX+2],0
            js .L_42a268

            lea RDX,QWORD PTR [RBX+7]
            mov EAX,5
.L_42a16a:

            movzx R8D,BYTE PTR [RDX]
            add R8,RAX
            movzx EAX,BYTE PTR [RBX+1]
            add R8,R12
            lea R12,QWORD PTR [RBX+RAX*1+2]
            cmp R12,R8
            jbe .L_429fff

            mov R14,R8
            jmp .L_42a1a3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a190:

            movzx R11D,BYTE PTR [R14+1]
.L_42a195:

            lea R14,QWORD PTR [R14+R11*1+2]
            cmp R12,R14
            jbe .L_429fff
.L_42a1a3:

            movzx EAX,BYTE PTR [R14]
            test AL,1
            je .L_42a190

            sar EAX,1
            cmp EAX,6
            jne .L_42a190

            cmp R12,R8
            jb .L_42a104

            mov RBX,R8
            lea R9,QWORD PTR [R14+4]
            jmp .L_42a1d6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a1c8:

            lea RBX,QWORD PTR [RBX+R15*1+2]
            cmp R12,RBX
            jb .L_42a104
.L_42a1d6:

            test BYTE PTR [RBX],1
            movzx R15D,BYTE PTR [RBX+1]
            je .L_42a1c8

            movzx EAX,WORD PTR [RBX+2]
            cmp WORD PTR [R14+2],AX
            jne .L_42a1c8

            movzx R11D,BYTE PTR [R14+1]
            lea EDX,DWORD PTR [R15-2]
            lea EAX,DWORD PTR [R11-2]
            cmp DL,AL
            jne .L_42a1c8

            lea RSI,QWORD PTR [RBX+4]
            mov RDI,R9
            movzx EDX,DL
            mov BYTE PTR [RSP+27],R11B
            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP],R9
            call memcmp@PLT

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            mov R8,QWORD PTR [RSP+8]
            movzx R11D,BYTE PTR [RSP+27]
            jne .L_42a1c8

            jmp .L_42a195
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a238:

            add RSP,40
.L_42a23c:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a250:

            movzx ECX,BYTE PTR [RBX+3]
            lea RDX,QWORD PTR [RBX+4]
            mov ESI,44970
            jmp .L_42a13b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a268:

            mov RDX,R12
            mov EAX,1
            jmp .L_42a16a
.L_42a275:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a280:

            movzx EAX,BYTE PTR [RSI+1]
            cmp AL,1
            jbe .L_42a360

            movzx EDX,AL
            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RAX+2]
            cmp RDX,RCX
            jb .L_42a360

            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [RSI+RDX*1+2]
            push RBX
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            sub RSP,8
.L_42a2bc:

            cmp RBP,RBX
            jbe .L_42a370

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_42a350

            mov R12,RSI
            mov R13,RDI
            jmp .L_42a313
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a2e0:

            cmp EAX,2
            jne .L_42a2fc

            cmp DL,3
            jbe .L_42a350

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_429020

            test EAX,EAX
            jne .L_42a342
.L_42a2fc:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RBX
            jbe .L_42a370

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_42a350
.L_42a313:

            movzx EAX,BYTE PTR [RBX+1]
            mov RDX,RAX
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RAX
            jb .L_42a350

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            jne .L_42a2e0

            cmp DL,2
            jbe .L_42a350

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_428e00

            test EAX,EAX
            je .L_42a2fc
.L_42a342:

            add RSP,8
.L_42a346:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a350:

            add RSP,8
            mov EAX,6
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42a360:

            mov EAX,6
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a370:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42a37d:

            nop
            nop
            nop
.L_42a380:

            cmp BYTE PTR [RDX+1],2
            jbe .L_42a390

            jmp .L_428e00
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a390:

            mov EAX,6
            ret 
.L_42a396:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a3a0:

            mov RAX,RDI
            movzx EDI,BYTE PTR [RDI+255]
            add RDI,RAX
            cmp RAX,RDI
            jae .L_42a410

            lea RDX,QWORD PTR [RAX+2]
            cmp RDI,RDX
            jb .L_42a410

            movzx EDX,BYTE PTR [RAX+1]
            lea RDX,QWORD PTR [RAX+RDX*1+2]
            cmp RDI,RDX
            jae .L_42a3f2

            jmp .L_42a410
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a3d0:

            cmp RDI,RDX
            jbe .L_42a410

            lea RAX,QWORD PTR [RDX+2]
            cmp RDI,RAX
            jb .L_42a410

            movzx EAX,BYTE PTR [RDX+1]
            lea RCX,QWORD PTR [RDX+RAX*1+2]
            mov RAX,RDX
            cmp RDI,RCX
            jb .L_42a410

            mov RDX,RCX
.L_42a3f2:

            movzx ECX,BYTE PTR [RAX]
            sar ECX,1
            cmp ECX,5
            jne .L_42a3d0

            movzx ECX,BYTE PTR [RAX+2]
            and ECX,15
            cmp SIL,CL
            jne .L_42a3d0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a410:

            xor EAX,EAX
            ret 
.L_42a413:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a420:

            push R15
            push R14
            lea RAX,QWORD PTR [RSI+3]
            push R13
            push R12
            mov R15,RDI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RSI
            mov R13,RCX
            sub RSP,24
.L_42a43e:

            cmp BYTE PTR [RSI+2],0
            mov QWORD PTR [RSP+8],RAX
            js .L_42a580

            mov ESI,DWORD PTR [RSI+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
            cmp ESI,44970
            setne BPL
            lea EBP,DWORD PTR [RCX+RBP*4]
            lea EAX,DWORD PTR [RBP+4]
            mov BYTE PTR [RSP+7],AL
.L_42a46e:

            mov RDI,R15
            mov DWORD PTR [RSP],R8D
            call .L_427c10

            test RAX,RAX
            mov R14,RAX
            mov R8D,DWORD PTR [RSP]
            je .L_42a5d0

            movzx EDX,BYTE PTR [R12+1]
            movzx ECX,BYTE PTR [R15+255]
            lea EAX,DWORD PTR [RDX-2]
            movzx EAX,AL
            lea EAX,DWORD PTR [RCX+RAX*1+4]
            cmp EAX,255
            jg .L_42a569

            movzx EBP,BYTE PTR [R14+1]
.L_42a4b2:

            movzx EBP,BPL
            add EDX,2
            mov RDI,R15
            lea RBX,QWORD PTR [R14+RBP*1+2]
            movzx EDX,DL
            mov RSI,RBX
            call .L_427c30

            mov EAX,524
            lea RDX,QWORD PTR [RBX+4]
            lea RSI,QWORD PTR [R12+4]
            mov WORD PTR [RBX],AX
            movzx EAX,WORD PTR [R12+2]
            mov WORD PTR [RBX+2],AX
            movzx ECX,BYTE PTR [R12+1]
            mov BYTE PTR [RBX+1],CL
            sub ECX,2
            movzx ECX,CL
            cmp ECX,8
            jae .L_42a5a0

            test CL,4
            jne .L_42a780

            test ECX,ECX
            jne .L_42a6f8
.L_42a510:

            test BYTE PTR [R12],1
            je .L_42a51e

            or BYTE PTR [R14],1
            or BYTE PTR [RBX],1
.L_42a51e:

            movzx EAX,BYTE PTR [R12+1]
            add EAX,2
            add BYTE PTR [R14+1],AL
            add RSP,24
.L_42a52f:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a540:

            xor R8D,R8D
            nop
            nop
            nop
            nop
            nop
.L_42a548:

            mov ESI,R8D
            mov RDI,R15
            mov R13D,R8D
            call .L_42a3a0

            test RAX,RAX
            je .L_42a632

            add R8D,1
            cmp R8D,16
            jne .L_42a548
.L_42a569:

            add RSP,24
            mov EAX,3
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a580:

            movzx ECX,BYTE PTR [RSI+3]
            lea RDX,QWORD PTR [RSI+4]
            mov ESI,44970
            lea EAX,DWORD PTR [RCX+4]
            mov EBP,ECX
            mov BYTE PTR [RSP+7],AL
            jmp .L_42a46e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a5a0:

            mov RAX,QWORD PTR [R12+4]
            mov QWORD PTR [RBX+4],RAX
            mov EAX,ECX
            mov RDI,QWORD PTR [RSI+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RDI
            lea RDI,QWORD PTR [RBX+12]
            and RDI,-8
            sub RDX,RDI
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 

            jmp .L_42a510
.L_42a5d0:

            movzx EAX,BYTE PTR [R12+1]
            movzx EDX,BYTE PTR [RSP+7]
            sub EAX,2
            movzx EAX,AL
            lea EAX,DWORD PTR [RDX+RAX*1+4]
            movzx EDX,BYTE PTR [R15+255]
            add EAX,EDX
            cmp EAX,255
            jg .L_42a569

            cmp BYTE PTR [RBX+2],0
            movzx R9D,R8B
            js .L_42a768

            mov ESI,DWORD PTR [RBX+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
.L_42a615:

            mov R8,R13
            mov RDI,R15
            call .L_427b00

            test RAX,RAX
            je .L_42a540

            movzx R13D,BYTE PTR [RAX+2]
            and R13D,15
.L_42a632:

            movzx R9D,BYTE PTR [R15+255]
            movzx EDX,BYTE PTR [RSP+7]
            mov RDI,R15
            or R13D,4294967168
            lea R14,QWORD PTR [R15+R9*1]
            mov RSI,R14
            call .L_427c30

            mov EDX,522
            mov BYTE PTR [R14+3],0
            mov BYTE PTR [R14+2],R13B
            mov WORD PTR [R14],DX
            cmp BYTE PTR [RBX+2],0
            js .L_42a720

            mov EAX,DWORD PTR [RBX+3]
            cmp EAX,2863595520
            je .L_42a68e

            and R13D,127
            mov DWORD PTR [R14+3],EAX
            mov BYTE PTR [R14+2],R13B
            cmp BYTE PTR [RBX+2],0
            js .L_42a720
.L_42a68e:

            add RBX,7
            mov ESI,5
.L_42a697:

            movzx EAX,BYTE PTR [RBX]
            lea RCX,QWORD PTR [R14+3]
            lea RDX,QWORD PTR [R14+7]
            add RSI,QWORD PTR [RSP+8]
            test R13B,R13B
            cmovs RDX,RCX
            mov BYTE PTR [RDX],AL
            movsx RDX,BYTE PTR [R14+2]
            sar RDX,63
            and RDX,-4
            cmp EAX,8
            lea RCX,QWORD PTR [RCX+RDX*1+5]
            jae .L_42a730

            test AL,4
            jne .L_42a7a0

            test EAX,EAX
            je .L_42a6e0

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RCX],DL
            jne .L_42a7b3
.L_42a6e0:

            add EBP,2
            mov BYTE PTR [R14+1],BPL
            movzx EDX,BYTE PTR [R12+1]
            jmp .L_42a4b2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a6f8:

            movzx EAX,BYTE PTR [R12+4]
            test CL,2
            mov BYTE PTR [RBX+4],AL
            je .L_42a510

            mov EAX,ECX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_42a510
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a720:

            mov RBX,QWORD PTR [RSP+8]
            mov ESI,1
            jmp .L_42a697
          .byte 0x90
.L_42a730:

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [RCX],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 

            jmp .L_42a6e0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a768:

            movzx ECX,BYTE PTR [RBX+3]
            lea RDX,QWORD PTR [RBX+4]
            mov ESI,44970
            jmp .L_42a615
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a780:

            mov EAX,DWORD PTR [R12+4]
            mov DWORD PTR [RBX+4],EAX
            mov EAX,ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_42a510
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a7a0:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RCX],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_42a6e0
.L_42a7b3:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_42a6e0
.L_42a7c4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a7d0:

            movzx EAX,BYTE PTR [RSI+1]
            test AL,AL
            je .L_42a908

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_42a7ea:

            cmp BYTE PTR [RSI+2],0
            js .L_42a8c0

            cmp RAX,5
            jbe .L_42a8f0

            lea R9,QWORD PTR [RSI+7]
            mov R8D,6
            lea RBX,QWORD PTR [RSI+3]
            mov R10D,4
            movzx R9D,BYTE PTR [R9]
            add R8,R9
            cmp RAX,R8
            jb .L_42a8f0
.L_42a822:

            lea R8,QWORD PTR [R10+R9*1+1]
            lea R15,QWORD PTR [RSI+RAX*1+2]
            add RBX,R8
            cmp R15,RBX
            jbe .L_42a910

            lea RAX,QWORD PTR [RBX+2]
            cmp R15,RAX
            jb .L_42a8f0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RAX
            jb .L_42a8f0

            mov R14,RDX
            mov RBP,RSI
            mov R13,RDI
            movzx R12D,CL
            jmp .L_42a899
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a870:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RBX
            jbe .L_42a910

            lea RAX,QWORD PTR [RBX+2]
            cmp R15,RAX
            jb .L_42a8f0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RAX
            jb .L_42a8f0
.L_42a899:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,6
            jne .L_42a870

            mov R8D,R12D
            mov RCX,R14
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            call .L_42a420

            test EAX,EAX
            je .L_42a870

            jmp .L_42a8f5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a8c0:

            cmp RAX,1
            je .L_42a8f0

            lea RBX,QWORD PTR [RSI+3]
            mov R8D,2
            xor R10D,R10D
            mov R9,RBX
            movzx R9D,BYTE PTR [R9]
            add R8,R9
            cmp RAX,R8
            jae .L_42a822

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a8f0:

            mov EAX,6
.L_42a8f5:

            add RSP,8
.L_42a8f9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a908:

            mov EAX,6
            ret 
          .byte 0x66
          .byte 0x90
.L_42a910:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42a921:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a930:

            movzx EDX,DL
            push R14
            push R13
            lea R14,QWORD PTR [RSI+RDX*1]
            push R12
            push RBP
            push RBX
.L_42a93f:

            cmp RSI,R14
            jae .L_42a9f0

            lea RAX,QWORD PTR [RSI+2]
            mov RBX,RSI
            cmp R14,RAX
            jb .L_42a9e0

            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp R14,RAX
            jb .L_42a9e0

            mov RBP,RDI
            mov R13,RCX
            movzx R12D,R8B
            jmp .L_42a9b7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a978:

            cmp EAX,5
            jne .L_42a992

            mov ECX,R12D
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_42a7d0

            test EAX,EAX
            jne .L_42a9d0
.L_42a992:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RBX
            jbe .L_42a9f0

            lea RAX,QWORD PTR [RBX+2]
            cmp R14,RAX
            jb .L_42a9e0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RAX
            jb .L_42a9e0
.L_42a9b7:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_42a978

            mov RSI,RBX
            mov RDI,RBP
            call .L_42a280

            test EAX,EAX
            je .L_42a992
.L_42a9d0:

            pop RBX
.L_42a9d1:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a9e0:

            pop RBX
            mov EAX,6
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_42a9f0:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42a9fb:

            nop
            nop
            nop
            nop
            nop
.L_42aa00:

            cmp BYTE PTR [RDX+1],3
            jbe .L_42aa10

            jmp .L_429020
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42aa10:

            mov EAX,6
            ret 
.L_42aa16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42aa20:

            movzx EDX,WORD PTR [RDI+266]
            mov EAX,1
            mov ESI,EDX
            jmp .L_42aa38
.L_42aa30:

            add EAX,1
            cmp EAX,16
            je .L_42aa50
.L_42aa38:

            bt EDX,EAX
            jb .L_42aa30

            mov ECX,EAX
            mov EDX,1
            shl EDX,CL
            or ESI,EDX
            mov WORD PTR [RDI+266],SI
            ret 
.L_42aa50:

            mov EAX,4294967295
            ret 
.L_42aa56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42aa60:

            push RBP
            push RBX
            movzx EBP,SI
            mov R8,RDI
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,24
.L_42aa71:

            movzx R9D,BYTE PTR [RDI+255]
            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            call .L_429c80

            cmp BYTE PTR [RSP+6],0
            mov EAX,23
            je .L_42aab6

            mov RDI,RBX
            call .L_427d20
.L_42aab6:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_42aacd

            add RSP,24
.L_42aaca:

            pop RBX
            pop RBP
            ret 
.L_42aacd:

            call __stack_chk_fail@PLT
.L_42aad2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42aae0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov R12D,EDX
            lea RBX,QWORD PTR [RSI+3]
            sub RSP,8
.L_42aafb:

            cmp BYTE PTR [RSI+2],0
            js .L_42abc8

            lea RAX,QWORD PTR [RSI+7]
            mov EDX,5
.L_42ab0e:

            movzx EAX,BYTE PTR [RAX]
            mov R15D,4294967294
            mov R14D,4294967290
            add RAX,RDX
            movzx EDX,BYTE PTR [RBP+1]
            add RBX,RAX
            mov RSI,RDX
.L_42ab2a:

            lea RAX,QWORD PTR [RBP+RDX*1+2]
            cmp RBX,RAX
            jae .L_42ab5f
.L_42ab34:

            movzx EAX,BYTE PTR [RBX]
            movzx ECX,BYTE PTR [RBX+1]
            sar EAX,1
            cmp EAX,6
            jne .L_42ab50

            movzx EAX,WORD PTR [RBX+2]
            rol AX,8
            cmp R12W,AX
            je .L_42ab70
.L_42ab50:

            lea RBX,QWORD PTR [RBX+RCX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1+2]
            cmp RBX,RAX
            jb .L_42ab34
.L_42ab5f:

            add RSP,8
.L_42ab63:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42ab70:

            add ECX,2
            cmp BYTE PTR [RBP+2],0
            js .L_42abb0

            movzx EDX,BYTE PTR [RBP+7]
            mov EAX,R14D
            sub EAX,EDX
            add ESI,EAX
            mov EAX,6
            sub ESI,ECX
.L_42ab8b:

            add ESI,EAX
            mov RDI,R13
            add ESI,EDX
            movzx EDX,CL
            mov BYTE PTR [RBP+1],SIL
            mov RSI,RBX
            call .L_427cb0

            movzx EDX,BYTE PTR [RBP+1]
            mov RSI,RDX
            jmp .L_42ab2a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42abb0:

            movzx EDX,BYTE PTR [RBP+3]
            mov EAX,R15D
            sub EAX,EDX
            add ESI,EAX
            mov EAX,2
            sub ESI,ECX
            jmp .L_42ab8b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42abc8:

            mov RAX,RBX
            mov EDX,1
            jmp .L_42ab0e
.L_42abd5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42abe0:

            movzx R8D,BYTE PTR [RDX+1]
            lea EAX,DWORD PTR [R8+R8*8]
            lea EAX,DWORD PTR [R8+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            test AL,AL
            je .L_42ac68

            movzx R11D,WORD PTR [RDX+2]
            mov R9D,R8D
            lea R8,QWORD PTR [RDX+2]
            rol R11W,8
            cmp CX,R11W
            je .L_42ac3d

            sub EAX,1
            mov R10D,ECX
            lea RCX,QWORD PTR [RDX+5]
            movzx EAX,AL
            lea R11,QWORD PTR [RAX+RAX*2]
            add R11,RCX
.L_42ac23:

            cmp RCX,R11
            je .L_42ac68

            mov R8,RCX
            add RCX,3
            movzx EAX,WORD PTR [R8]
            rol AX,8
            cmp AX,R10W
            jne .L_42ac23
.L_42ac3d:

            sub R9D,3
            sub RSP,8

            mov BYTE PTR [RDX+1],R9B
            sub BYTE PTR [RSI+1],3
            mov EDX,3
            mov RSI,R8
            call .L_427cb0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ac68:

            xor EAX,EAX
            ret 
.L_42ac6b:

            nop
            nop
            nop
            nop
            nop
.L_42ac70:

            movzx R10D,BYTE PTR [RDX+1]
            mov R8D,R10D
            shr R8B,2
            test R8B,R8B
            je .L_42ace8

            movzx EAX,WORD PTR [RDX+2]
            lea R9,QWORD PTR [RDX+2]
            rol AX,8
            cmp CX,AX
            je .L_42acbf

            lea RAX,QWORD PTR [RDX+6]
            sub R8D,1
            mov R11D,ECX
            movzx R8D,R8B
            lea R8,QWORD PTR [RAX+R8*4]
.L_42aca5:

            cmp RAX,R8
            je .L_42ace8

            mov R9,RAX
            add RAX,4
            movzx ECX,WORD PTR [R9]
            rol CX,8
            cmp CX,R11W
            jne .L_42aca5
.L_42acbf:

            sub R10D,4
            sub RSP,8

            mov BYTE PTR [RDX+1],R10B
            sub BYTE PTR [RSI+1],4
            mov EDX,4
            mov RSI,R9
            call .L_427cb0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ace8:

            xor EAX,EAX
            ret 
.L_42aceb:

            nop
            nop
            nop
            nop
            nop
.L_42acf0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            movzx R12D,DX
            sub RSP,8
.L_42ad04:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
.L_42ad19:

            lea RAX,QWORD PTR [R13+RCX*1+2]
            cmp RBX,RAX
            jae .L_42ad68
.L_42ad23:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            je .L_42add0

            cmp EAX,2
            jne .L_42adc8

            mov ECX,R12D
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RBP
            call .L_42ac70

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            je .L_42aded
.L_42ad54:

            movzx ECX,BYTE PTR [R13+1]
.L_42ad59:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R13+RCX*1+2]
            cmp RBX,RAX
            jb .L_42ad23
.L_42ad68:

            mov RSI,R13
            mov RDI,RBP
            call .L_427560

            test RAX,RAX
            mov R12,RAX
            je .L_42adb4

            movzx EDX,BYTE PTR [RAX+2]
            movzx EAX,BYTE PTR [R13+3]
            movzx ECX,BYTE PTR [R13+1]
            add EAX,7
            mov EBX,EDX
            sar EAX,3
            and EBX,15
            sub ECX,EAX
            sub EBX,1
            cmp CL,6
            je .L_42ae10

            or EDX,16
            movsxd RBX,EBX
            mov BYTE PTR [R12+2],DL
            mov DWORD PTR [RBP+RBX*4+268],0
.L_42adb4:

            add RSP,8
.L_42adb8:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42adc8:

            movzx EAX,BYTE PTR [RBX+1]
            jmp .L_42ad59
          .byte 0x66
          .byte 0x90
.L_42add0:

            mov ECX,R12D
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RBP
            call .L_42abe0

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            jne .L_42ad54
.L_42aded:

            sub BYTE PTR [R13+1],2
            mov EDX,2
            mov RSI,RBX
            mov RDI,RBP
            call .L_427cb0

            movzx ECX,BYTE PTR [R13+1]
            jmp .L_42ad19
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ae10:

            and EDX,4294967279
            movsxd RBX,EBX
            mov BYTE PTR [R12+2],DL
            call .L_401240

            mov DWORD PTR [RBP+RBX*4+268],EAX
            movzx EAX,BYTE PTR [R12+2]
            and EAX,15
            lea RAX,QWORD PTR [RBP+RAX*4]
            mov EDX,DWORD PTR [RAX+264]
            test EDX,EDX
            jne .L_42ae49

            mov DWORD PTR [RAX+264],1
.L_42ae49:

            call .L_401240

            lea RDI,QWORD PTR [RBP+336]
            mov ESI,EAX
            mov EDX,1000
            call .L_433770

            add RSP,8
.L_42ae65:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42ae6e:

            nop
            nop
.L_42ae70:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_42ae77:

            movzx EDX,BYTE PTR [RDI+255]
            mov RBX,RDI
            movzx EBP,SI
.L_42ae84:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_42aee0
.L_42ae8d:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_42af00

            cmp EAX,5
            jne .L_42aef0

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_42aae0

            cmp BYTE PTR [RBX+2],0
            movzx EAX,BYTE PTR [RBX+1]
            lea RCX,QWORD PTR [RBX+3]
            js .L_42af48

            lea EDX,DWORD PTR [RAX-4]
            lea RCX,QWORD PTR [RBX+7]
.L_42aec2:

            sub DL,BYTE PTR [RCX]
            cmp DL,2
            je .L_42af24
.L_42aec9:

            movzx EDX,BYTE PTR [R12+255]
.L_42aed2:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jb .L_42ae8d
.L_42aee0:

            pop RBX
.L_42aee1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42aef0:

            movzx EAX,BYTE PTR [RBX+1]
            jmp .L_42aed2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42af00:

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_42acf0

            movzx EDX,BYTE PTR [RBX+3]
            movzx EAX,BYTE PTR [RBX+1]
            add EDX,7
            mov ECX,EAX
            sar EDX,3
            sub ECX,EDX
            cmp CL,2
            jne .L_42aec9
.L_42af24:

            add EAX,2
            mov RSI,RBX
            mov RDI,R12
            movzx EDX,AL
            call .L_427cb0

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_42ae84
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42af48:

            mov EDX,EAX
            jmp .L_42aec2
.L_42af4f:

            nop
.L_42af50:

            push RBP
            push RBX
            movzx EBP,SI
            mov R8,RDI
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,24
.L_42af61:

            movzx R9D,BYTE PTR [RDI+255]
            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            call .L_429c80

            cmp BYTE PTR [RSP+6],0
            jne .L_42afb0
.L_42af99:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42afe4

            add RSP,24
.L_42afad:

            pop RBX
            pop RBP
            ret 
.L_42afb0:

            mov RDI,RBX
            call .L_42ae70

            add BYTE PTR [RBX+265],1
            cmp BYTE PTR [RSP+7],0
            je .L_42afcd

            add BYTE PTR [RBX+264],1
.L_42afcd:

            mov RDI,RBX
            call .L_433530

            mov ESI,512
            mov RDI,RAX
            call .L_402d80

            jmp .L_42af99
.L_42afe4:

            call __stack_chk_fail@PLT
.L_42afe9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42aff0:

            push R15
            push R14
            mov R8,RDI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            movzx EBP,SI
            mov R12D,ECX
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,296
.L_42b012:

            movzx R9D,BYTE PTR [RDI+255]
            movzx R12D,R12B
            lea R15,QWORD PTR [RSP+14]
            lea R14,QWORD PTR [RSP+13]
            mov BYTE PTR [RSP+13],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            mov RCX,R15
            mov RDX,R14
            mov BYTE PTR [RSP+14],0
            mov BYTE PTR [RSP+15],255
            call .L_429c80

            cmp BYTE PTR [RSP+13],0
            je .L_42b0d0

            movzx R8D,BYTE PTR [RBX+255]
            mov RCX,RBX
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_429f90

            test AL,AL
            mov R14D,EAX
            je .L_42b170
.L_42b080:

            lea R15,QWORD PTR [RSP+16]
            lea RCX,QWORD PTR [RSP+15]
            xor ESI,ESI
            mov RDI,RBX
            mov RDX,R15
            call .L_427890

            test EAX,EAX
            je .L_42b130
.L_42b09f:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_42b190

            add RSP,296
.L_42b0bd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b0d0:

            mov R9D,R12D
            mov R8,R13
            mov RDI,RBX
            call .L_429c80

            test EAX,EAX
            jne .L_42b09f

            lea RCX,QWORD PTR [RSP+16]
            xor R8D,R8D
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_42a930

            test EAX,EAX
            jne .L_42b09f

            add BYTE PTR [RBX+265],1
            cmp BYTE PTR [RSP+14],0
            je .L_42b111
.L_42b10a:

            add BYTE PTR [RBX+264],1
.L_42b111:

            mov RDI,RBX
            call .L_433530

            mov ESI,512
            mov RDI,RAX
            call .L_402d80

            xor EAX,EAX
            jmp .L_42b09f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b130:

            mov ESI,EBP
            mov RDI,RBX
            call .L_42ae70

            test EAX,EAX
            jne .L_42b09f

            movzx R8D,BYTE PTR [RSP+15]
            mov RCX,R15
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_42a930

            test EAX,EAX
            jne .L_42b09f

            add BYTE PTR [RBX+265],1
            test R14B,R14B
            je .L_42b111

            jmp .L_42b10a
          .byte 0x90
.L_42b170:

            movzx EDX,BYTE PTR [RBX+255]
            mov R8D,R12D
            mov RCX,R13
            mov RSI,RBX
            mov RDI,RBX
            call .L_429f90

            mov R14D,EAX
            jmp .L_42b080
.L_42b190:

            call __stack_chk_fail@PLT
.L_42b195:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b1a0:

            push R14
            push R13
            mov R13,RCX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            xor EDX,EDX
            mov RBP,RDI
            mov ESI,2
            mov RDI,RBX
            sub RSP,288
.L_42b1c5:

            lea RCX,QWORD PTR [RSP+12]
            mov WORD PTR [RSP+12],DX
            mov EDX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+16],AX
            call .L_4339f0

            test EAX,EAX
            jne .L_42b23c

            cmp BYTE PTR [RSP+13],2
            je .L_42b228
.L_42b1fe:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42b2a7

            add RSP,288
.L_42b21c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b228:

            movzx ESI,WORD PTR [RSP+14]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_42af50
.L_42b23c:

            lea R14,QWORD PTR [RSP+16]
            mov EDX,257
            mov ESI,10
            mov RDI,RBX
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            je .L_42b288
.L_42b25a:

            mov RDI,RBP
            call .L_433510

            test BYTE PTR [R12],48
            jne .L_42b1fe

            lea RDI,QWORD PTR [RAX+216]
            mov RCX,R13
            mov RDX,R12
            mov ESI,68
            call .L_430ae0

            jmp .L_42b1fe
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b288:

            movzx ESI,WORD PTR [R13+30]
            movzx ECX,BYTE PTR [RSP+17]
            lea RDX,QWORD PTR [R14+2]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_42aff0

            jmp .L_42b25a
.L_42b2a7:

            call __stack_chk_fail@PLT
.L_42b2ac:

            nop
            nop
            nop
            nop
.L_42b2b0:

            jmp .L_42b1a0
.L_42b2b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b2c0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov R12D,EDX
            sub RSP,8
.L_42b2d3:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            movzx ESI,BYTE PTR [RSI+1]
            mov RDI,RSI
            jmp .L_42b30f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b2f0:

            movzx ECX,BYTE PTR [RBX]
            movzx EAX,BYTE PTR [RBX+1]
            sar ECX,1
            cmp ECX,3
            jne .L_42b30a

            movzx EDX,BYTE PTR [RBX+2]
            and EDX,15
            cmp R12B,DL
            je .L_42b330
.L_42b30a:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
.L_42b30f:

            lea RAX,QWORD PTR [RBP+RSI*1+2]
            cmp RBX,RAX
            jb .L_42b2f0

            add RSP,8
.L_42b31d:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b330:

            add EAX,2
            mov RSI,RBX
            sub EDI,EAX
            movzx EDX,AL
            mov BYTE PTR [RBP+1],DIL
            mov RDI,R13
            call .L_427cb0

            movzx ESI,BYTE PTR [RBP+1]
            mov RDI,RSI
            jmp .L_42b30f
.L_42b350:

            push R12
            mov R12,RDI
            push RBP
            movzx EBP,SIL
            push RBX
.L_42b35b:

            mov RBX,RDI
            movzx EDX,BYTE PTR [RDI+255]
            jmp .L_42b379
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b370:

            movzx EAX,BYTE PTR [RBX+1]
.L_42b374:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
.L_42b379:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_42b3c0

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_42b370

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_42b2c0

            movzx EDX,BYTE PTR [RBX+3]
            movzx EAX,BYTE PTR [RBX+1]
            add EDX,7
            mov ECX,EAX
            sar EDX,3
            sub ECX,EDX
            cmp CL,2
            je .L_42b3d0

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_42b374
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42b3c0:

            pop RBX
.L_42b3c1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b3d0:

            add EAX,2
            mov RSI,RBX
            mov RDI,R12
            movzx EDX,AL
            call .L_427cb0

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_42b379
.L_42b3ec:

            nop
            nop
            nop
            nop
.L_42b3f0:

            push RBP
            push RBX
            movzx EBP,SIL
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,8
            call .L_42b350

            mov ECX,EBP
            mov EAX,4294967294
            add BYTE PTR [RBX+265],1
            rol EAX,CL
            add BYTE PTR [RBX+264],1
            mov RDI,RBX
            and WORD PTR [RBX+266],AX
            call .L_433530

            mov ESI,512
            mov RDI,RAX
            call .L_402d80

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42b440:

            push R12
            xor R12D,R12D
            push RBP
            mov RBP,RDI
            push RBX
.L_42b44a:

            xor EBX,EBX
            jmp .L_42b460
          .byte 0x66
          .byte 0x90
.L_42b450:

            mov R12D,1
.L_42b456:

            add RBX,1
            cmp RBX,15
            je .L_42b4a0
.L_42b460:

            mov EAX,DWORD PTR [RBP+RBX*4+268]
            test EAX,EAX
            je .L_42b456

            call .L_401240

            imul EDX,DWORD PTR [RBP+328],1000
            sub EAX,DWORD PTR [RBP+RBX*4+268]
            cmp EAX,EDX
            jb .L_42b450

            lea ESI,DWORD PTR [RBX+1]
            mov RDI,RBP
            add RBX,1
            call .L_42b3f0

            cmp RBX,15
            jne .L_42b460

            nop
            nop
            nop
            nop
            nop
            nop
.L_42b4a0:

            test R12B,R12B
            jne .L_42b4b0

            pop RBX
.L_42b4a6:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42b4b0:

            call .L_401240

            pop RBX
            lea RDI,QWORD PTR [RBP+336]
            mov EDX,1000
            mov ESI,EAX
            pop RBP
            pop R12
            jmp .L_433770
.L_42b4cc:

            nop
            nop
            nop
            nop
.L_42b4d0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b30

            add RSP,8
            mov RDI,RAX
            jmp .L_42b440
.L_42b4ed:
          .string "a/sd"
.L_42b4f2:
          .string "c/cg"
.L_42b4f7:
          .string "c/cs"
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42b500:

            push RBX
            mov EDX,1
            mov RBX,RDI
            call .L_4261e0

            mov EAX,4294967294
            mov WORD PTR [RBX+264],AX
            pop RBX
            ret 
.L_42b51c:

            nop
            nop
            nop
            nop
.L_42b520:

            push RBP
            push RBX
            movzx EDX,DL
            mov RBX,RDI
            sub RSP,8
            call .L_427a50

            test RAX,RAX
            je .L_42b570

            mov RSI,RAX
            mov RDI,RBX
            mov RBP,RAX
            call .L_427350

            test RAX,RAX
            je .L_42b570

            movzx EAX,BYTE PTR [RBP+1]
            mov RSI,RBP
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_427cb0

            mov RDI,RBX
            call .L_427f30

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_42b570:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_42b57c:

            nop
            nop
            nop
            nop
.L_42b580:

            push R15
            push R14
            movzx R15D,DL
            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            lea EBX,DWORD PTR [R15+7]
            mov R12,RSI
            mov R14D,ECX
            mov RBP,RDI
            sub RSP,24
.L_42b5a2:

            sar EBX,3
            mov DWORD PTR [RSP],R8D
            mov DWORD PTR [RSP+4],R9D
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4167f0

            mov EDX,EBX
            mov RSI,RAX
            mov RDI,R12
            call .L_4102d0

            cmp AL,63
            mov EDX,7
            ja .L_42b6ae

            mov EDX,R15D
            mov RSI,R12
            mov RDI,RBP
            call .L_42b520

            movzx ECX,BYTE PTR [RBP+255]
            lea EDX,DWORD PTR [RBX+10]
            mov RDI,RBP
            add RCX,RBP
            mov RSI,RCX
            mov QWORD PTR [RSP+8],RCX
            call .L_427c30

            mov RCX,QWORD PTR [RSP+8]
            mov EAX,2
            cmp EBX,8
            movsxd RSI,EBX
            mov WORD PTR [RCX],AX
            mov BYTE PTR [RCX+2],0
            lea RAX,QWORD PTR [RCX+4]
            mov BYTE PTR [RCX+3],R13B
            jb .L_42b6c0

            mov RDX,QWORD PTR [R12]
            mov QWORD PTR [RCX+4],RDX
            mov EDX,EBX
            mov RDI,QWORD PTR [R12+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RDI
            lea RDX,QWORD PTR [RCX+12]
            and RDX,-8
            sub RAX,RDX
            sub R12,RAX
            add EAX,EBX
            and EAX,4294967288
            cmp EAX,8
            jb .L_42b670

            and EAX,4294967288
            xor EDI,EDI
.L_42b65a:

            mov R8D,EDI
            add EDI,8
            mov R9,QWORD PTR [R12+R8*1]
            cmp EDI,EAX
            mov QWORD PTR [RDX+R8*1],R9
            jb .L_42b65a

            nop
            nop
            nop
            nop
.L_42b670:

            movzx EAX,BYTE PTR [RSP]
            shl R14D,6
            add EBX,8
            lea RDX,QWORD PTR [RCX+RSI*1+4]
            mov BYTE PTR [RCX+1],BL
            mov DWORD PTR [RDX],4278125572
            mov BYTE PTR [RDX+5],0
            and EAX,63
            or R14D,EAX
            cmp BYTE PTR [RSP+4],0
            mov BYTE PTR [RDX+4],R14B
            je .L_42b6a4

            or BYTE PTR [RCX],1
            or BYTE PTR [RDX],1
.L_42b6a4:

            mov RDI,RBP
            call .L_427f30

            xor EDX,EDX
.L_42b6ae:

            add RSP,24
.L_42b6b2:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_42b6c0:

            test BL,4
            jne .L_42b6e8

            test EBX,EBX
            je .L_42b670

            movzx EDX,BYTE PTR [R12]
            test BL,2
            mov BYTE PTR [RCX+4],DL
            je .L_42b670

            mov EDX,EBX
            movzx EDI,WORD PTR [R12+RDX*1-2]
            mov WORD PTR [RAX+RDX*1-2],DI
            jmp .L_42b670
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b6e8:

            mov EDX,DWORD PTR [R12]
            mov DWORD PTR [RCX+4],EDX
            mov EDX,EBX
            mov EDI,DWORD PTR [R12+RDX*1-4]
            mov DWORD PTR [RAX+RDX*1-4],EDI
            jmp .L_42b670
.L_42b6ff:

            nop
.L_42b700:

            push RBP
            push RBX
            movzx EDX,DL
            mov RBX,RDI
            sub RSP,8
            call .L_427a50

            test RAX,RAX
            je .L_42b750

            mov RSI,RAX
            mov RDI,RBX
            mov RBP,RAX
            call .L_427460

            test RAX,RAX
            je .L_42b750

            movzx EAX,BYTE PTR [RBP+1]
            mov RSI,RBP
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_427cb0

            mov RDI,RBX
            call .L_427f30

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_42b750:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_42b75c:

            nop
            nop
            nop
            nop
.L_42b760:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            movzx EBX,DL
            mov EBP,EDX
            mov EDX,EBX
            mov R12D,R8D
            sub RSP,24
.L_42b77e:

            add EBX,7
            mov DWORD PTR [RSP+12],ECX
            sar EBX,3
            call .L_42b700

            movzx R14D,BYTE PTR [R13+255]
            lea EDX,DWORD PTR [RBX+9]
            mov RDI,R13
            add R14,R13
            mov RSI,R14
            call .L_427c30

            mov EAX,2
            cmp EBX,8
            mov BYTE PTR [R14+2],0
            mov WORD PTR [R14],AX
            mov BYTE PTR [R14+3],BPL
            movsxd RSI,EBX
            lea RAX,QWORD PTR [R14+4]
            jae .L_42b828

            test BL,4
            jne .L_42b870

            test EBX,EBX
            je .L_42b7e2

            movzx EDX,BYTE PTR [R15]
            test BL,2
            mov BYTE PTR [R14+4],DL
            jne .L_42b890
.L_42b7e2:

            movsx EBP,BYTE PTR [RSP+12]
            lea RAX,QWORD PTR [R14+RSI*1+4]
            add EBX,7
            mov BYTE PTR [R14+1],BL
            mov DWORD PTR [RAX],4278125312
            shl EBP,6
            test R12B,R12B
            mov BYTE PTR [RAX+4],BPL
            je .L_42b80c

            or BYTE PTR [R14],1
            or BYTE PTR [RAX],1
.L_42b80c:

            mov RDI,R13
            call .L_427f30

            add RSP,24
.L_42b818:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b828:

            mov RDX,QWORD PTR [R15]
            mov QWORD PTR [R14+4],RDX
            mov EDX,EBX
            mov RCX,QWORD PTR [R15+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RCX
            lea RDX,QWORD PTR [R14+12]
            and RDX,-8
            sub RAX,RDX
            sub R15,RAX
            add EAX,EBX
            and EAX,4294967288
            cmp EAX,8
            jb .L_42b7e2

            and EAX,4294967288
            xor ECX,ECX
.L_42b858:

            mov EDI,ECX
            add ECX,8
            mov R8,QWORD PTR [R15+RDI*1]
            cmp ECX,EAX
            mov QWORD PTR [RDX+RDI*1],R8
            jb .L_42b858

            jmp .L_42b7e2
          .byte 0x66
          .byte 0x90
.L_42b870:

            mov EDX,DWORD PTR [R15]
            mov DWORD PTR [R14+4],EDX
            mov EDX,EBX
            mov ECX,DWORD PTR [R15+RDX*1-4]
            mov DWORD PTR [RAX+RDX*1-4],ECX
            jmp .L_42b7e2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b890:

            mov EDX,EBX
            movzx ECX,WORD PTR [R15+RDX*1-2]
            mov WORD PTR [RAX+RDX*1-2],CX
            jmp .L_42b7e2
.L_42b8a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b8b0:

            push RBX
            movzx ECX,CL
            mov RBX,RDI
            call .L_427c10

            mov RSI,RAX
            mov EAX,23
            test RSI,RSI
            je .L_42b8e5

            movzx EAX,BYTE PTR [RSI+1]
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_427cb0

            mov RDI,RBX
            call .L_427f30

            xor EAX,EAX
.L_42b8e5:

            pop RBX
            ret 
.L_42b8e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b8f0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R10D,ECX
            push RBP
            push RBX
            mov R12,RDI
            mov R15D,ESI
            sub RSP,40
.L_42b90a:

            cmp ESI,44970
            mov R13D,DWORD PTR [RSP+96]
            setne BPL
            mov BYTE PTR [RSP],CL
            mov DWORD PTR [RSP+28],R8D
            mov QWORD PTR [RSP+16],R9
            mov DWORD PTR [RSP+12],R10D
            lea EDX,DWORD PTR [R13+RCX*1]
            movzx ECX,CL
            mov BYTE PTR [RSP+26],R13B
            lea EBP,DWORD PTR [RDX+RBP*4]
            mov RDX,R14
            lea R11D,DWORD PTR [RBP+6]
            mov BYTE PTR [RSP+27],R11B
            call .L_42b8b0

            movzx EBX,BYTE PTR [R12+255]
            lea EDX,DWORD PTR [RBP+8]
            mov RDI,R12
            movzx EDX,DL
            add RBX,R12
            mov RSI,RBX
            call .L_427c30

            cmp R15D,44970
            mov DWORD PTR [RBX],8389130
            mov R10D,DWORD PTR [RSP+12]
            movzx R11D,BYTE PTR [RSP+27]
            mov R9,QWORD PTR [RSP+16]
            mov R8D,DWORD PTR [RSP+28]
            jne .L_42baf0

            lea RDX,QWORD PTR [RBX+3]
            mov RAX,RDX
.L_42b998:

            mov BYTE PTR [RDX],R10B
            movsx RDX,BYTE PTR [RBX+2]
            movzx ECX,BYTE PTR [RSP]
            sar RDX,63
            and RDX,-4
            cmp ECX,8
            lea RDX,QWORD PTR [RAX+RDX*1+5]
            jae .L_42b9e0

            test CL,4
            jne .L_42bb20

            test ECX,ECX
            je .L_42ba0b

            movzx ESI,BYTE PTR [R14]
            test CL,2
            mov BYTE PTR [RDX],SIL
            je .L_42ba0b

            mov ECX,ECX
            movzx ESI,WORD PTR [R14+RCX*1-2]
            mov WORD PTR [RDX+RCX*1-2],SI
            jmp .L_42ba0b
          .byte 0x66
          .byte 0x90
.L_42b9e0:

            mov RSI,QWORD PTR [R14]
            mov QWORD PTR [RDX],RSI
            mov ESI,ECX
            mov RDI,QWORD PTR [R14+RSI*1-8]
            mov QWORD PTR [RDX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RDX+8]
            mov RSI,R14
            and RDI,-8
            sub RDX,RDI
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_42ba0b:

            cmp BYTE PTR [RBX+2],0
            mov BYTE PTR [RBX+1],R11B
            js .L_42bb10

            lea RDX,QWORD PTR [RAX+4]
            mov EDI,5
.L_42ba22:

            movzx EBP,BYTE PTR [RDX]
            add RBP,RDI
            add RBP,RAX
            mov EAX,524
            test R8B,R8B
            mov WORD PTR [RBP],AX
            je .L_42ba40

            or BYTE PTR [RBX],1
            or BYTE PTR [RBP],1
.L_42ba40:

            mov RDI,R12
            mov QWORD PTR [RSP],R9
            add R13D,2
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_416dd0

            movzx ECX,BYTE PTR [RSP+26]
            rol AX,8
            mov BYTE PTR [RBP+1],R13B
            mov WORD PTR [RBP+2],AX
            lea RDX,QWORD PTR [RBP+4]
            mov R9,QWORD PTR [RSP]
            cmp ECX,8
            jae .L_42baa8

            test CL,4
            jne .L_42bb38

            test ECX,ECX
            je .L_42bad4

            movzx EAX,BYTE PTR [R9]
            test CL,2
            mov BYTE PTR [RBP+4],AL
            je .L_42bad4

            mov EAX,ECX
            movzx ECX,WORD PTR [R9+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_42bad4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42baa8:

            mov RAX,QWORD PTR [R9]
            lea RDI,QWORD PTR [RBP+12]
            and RDI,-8
            mov QWORD PTR [RBP+4],RAX
            mov EAX,ECX
            mov RSI,QWORD PTR [R9+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RSI
            sub RDX,RDI
            mov RSI,R9
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_42bad4:

            mov RDI,R12
            call .L_427f30

            add RSP,40
.L_42bae0:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42baf0:

            bswap R15D
            mov BYTE PTR [RBX+2],0
            lea RAX,QWORD PTR [RBX+3]
            mov DWORD PTR [RBX+3],R15D
            lea RDX,QWORD PTR [RBX+7]
            jmp .L_42b998
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bb10:

            mov RDX,RAX
            mov EDI,1
            jmp .L_42ba22
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42bb20:

            mov ESI,DWORD PTR [R14]
            mov ECX,ECX
            mov DWORD PTR [RDX],ESI
            mov ESI,DWORD PTR [R14+RCX*1-4]
            mov DWORD PTR [RDX+RCX*1-4],ESI
            jmp .L_42ba0b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42bb38:

            mov EAX,DWORD PTR [R9]
            mov DWORD PTR [RBP+4],EAX
            mov EAX,ECX
            mov ECX,DWORD PTR [R9+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_42bad4
.L_42bb4b:

            nop
            nop
            nop
            nop
            nop
.L_42bb50:

            push RBX
            mov RBX,RSI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_416dd0

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_42bb71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bb80:

            push RBX
            mov RBX,RSI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_416dd0

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_42bba1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bbb0:

            push R12
            push RBP
            push RBX
.L_42bbb4:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp RBX,RAX
            jae .L_42bc20

            mov R12,RDI
            mov RBP,RSI
            jmp .L_42bc07
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bbe0:

            cmp EAX,2
            jne .L_42bc27

            mov RSI,RBX
            mov RDI,R12
            call .L_42bb80
.L_42bbf0:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jae .L_42bc20
.L_42bc07:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            jne .L_42bbe0

            mov RSI,RBX
            mov RDI,R12
            call .L_42bb50

            jmp .L_42bbf0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bc20:

            pop RBX
.L_42bc21:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_42bc27:

            lea RCX,QWORD PTR [RIP+.L_42c040]
            lea RSI,QWORD PTR [RIP+.L_42bfac]
            lea RDI,QWORD PTR [RIP+.L_42bfca]
            mov EDX,263
            call __assert_fail@PLT
.L_42bc46:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bc50:

            push RBX
            mov RBX,RSI
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_416dd0

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_42bc71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bc80:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_42bc87:

            cmp BYTE PTR [RSI+2],0
            mov RBP,RSI
            lea RBX,QWORD PTR [RSI+3]
            js .L_42bcf0

            lea RAX,QWORD PTR [RSI+7]
            mov EDX,5
.L_42bc9d:

            movzx EAX,BYTE PTR [RAX]
            add RAX,RDX
            add RBX,RAX
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jae .L_42bce4

            nop
            nop
            nop
            nop
.L_42bcb8:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,6
            jne .L_42bcfa

            mov RSI,RBX
            mov RDI,R12
            call .L_42bc50

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jb .L_42bcb8
.L_42bce4:

            pop RBX
.L_42bce5:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bcf0:

            mov RAX,RBX
            mov EDX,1
            jmp .L_42bc9d
.L_42bcfa:

            lea RCX,QWORD PTR [RIP+.L_42bfe0]
            lea RSI,QWORD PTR [RIP+.L_42bfac]
            lea RDI,QWORD PTR [RIP+.L_42bfca]
            mov EDX,297
            call __assert_fail@PLT
.L_42bd19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bd20:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_42bd29:

            movzx EAX,BYTE PTR [RDI+255]
            add RAX,RDI
            cmp RDI,RAX
            jae .L_42bd80

            mov RBX,RDI
            jmp .L_42bd68
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42bd40:

            cmp EAX,5
            jne .L_42bd91

            mov RSI,RBX
            mov RDI,RBP
            call .L_42bc80
.L_42bd50:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+255]
            add RAX,RBP
            cmp RBX,RAX
            jae .L_42bd80
.L_42bd68:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_42bd40

            mov RSI,RBX
            mov RDI,RBP
            call .L_42bbb0

            jmp .L_42bd50
          .byte 0x90
.L_42bd80:

            mov RDI,RBP
            call .L_427f30

            add RSP,8
.L_42bd8c:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42bd91:

            lea RCX,QWORD PTR [RIP+.L_42c0a0]
            lea RSI,QWORD PTR [RIP+.L_42bfac]
            lea RDI,QWORD PTR [RIP+.L_42bfca]
            mov EDX,238
            call __assert_fail@PLT
.L_42bdb0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_433510

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_416dd0

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_426e00

            test AL,AL
            jne .L_42bdf0

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bdf0:

            mov RDI,RBX
            call .L_416dd0

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_426e00
.L_42be0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42be10:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_433510

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_416dd0

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_426ef0

            test AL,AL
            jne .L_42be50

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42be50:

            mov RDI,RBX
            call .L_416dd0

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_426ef0
.L_42be6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42be70:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_433510

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_416dd0

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_426fd0

            test AL,AL
            jne .L_42beb0

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42beb0:

            mov RDI,RBX
            call .L_416dd0

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_426fd0
.L_42beca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42bed0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_42bedd:

            call .L_433510

            lea R13,QWORD PTR [RAX+2568]
            mov RBP,RAX
            mov RDI,R13
            call .L_416dd0

            test BYTE PTR [RBP+2624],2
            mov R12D,EAX
            je .L_42bf0c

            mov RDI,R13
            call .L_41c790

            test AL,AL
            jne .L_42bf60
.L_42bf0c:

            mov RDI,RBX
            call .L_42bd20

            mov RDI,RBX
            call .L_42bdb0

            test AL,AL
            jne .L_42bf88
.L_42bf20:

            movzx ESI,WORD PTR [RBX+264]
            cmp SI,R12W
            jne .L_42bf3e

            mov EAX,4294967294
            mov ESI,65534
            mov WORD PTR [RBX+264],AX
.L_42bf3e:

            mov RDI,RBX
            call .L_427d20

            test EAX,EAX
            jne .L_42bf52

            mov WORD PTR [RBX+264],R12W
.L_42bf52:

            add RSP,8
.L_42bf56:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42bf60:

            cmp DWORD PTR [RBP+2580],2
            jg .L_42bf0c

            mov RDI,R13
            call .L_41d1c0

            mov EDX,EAX
            cmp DL,BYTE PTR [RBP+7229]
            mov EAX,13
            jae .L_42bf0c

            jmp .L_42bf52
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bf88:

            mov RDI,RBX
            call .L_42be10

            test AL,AL
            je .L_42bf20

            mov RDI,RBX
            call .L_42be70

            test AL,AL
            je .L_42bf20

            mov RDI,RBX
            call .L_427f30

            xor EAX,EAX
            jmp .L_42bf52
.L_42bfac:
          .string "thread/network_data_local.cpp"
.L_42bfca:
          .string "false"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bfe0:

            outsd DX,DWORD PTR [RSI]
            je .L_42c028
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x4c
          .byte 0x6f
          .byte 0x63
          .byte 0x61
          .byte 0x6c
          .byte 0x3a
          .byte 0x3a
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x52
          .byte 0x6c
          .byte 0x6f
          .byte 0x63
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x65
          .byte 0x72
          .byte 0x76
          .byte 0x69
          .byte 0x63
          .byte 0x65
          .byte 0x54
          .byte 0x6c
          .byte 0x76
          .byte 0x26
          .byte 0x29
.L_42c028:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_42c040:

            outsd DX,DWORD PTR [RSI]
            je .L_42c088
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x4c
          .byte 0x6f
          .byte 0x63
          .byte 0x61
          .byte 0x6c
          .byte 0x3a
          .byte 0x3a
          .byte 0x55
          .byte 0x70
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x52
          .byte 0x6c
          .byte 0x6f
          .byte 0x63
          .byte 0x28
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x65
          .byte 0x74
          .byte 0x77
          .byte 0x6f
          .byte 0x72
          .byte 0x6b
          .byte 0x44
          .byte 0x61
          .byte 0x74
          .byte 0x61
          .byte 0x3a
          .byte 0x3a
          .byte 0x50
          .byte 0x72
          .byte 0x65
          .byte 0x66
          .byte 0x69
          .byte 0x78
          .byte 0x54
          .byte 0x6c
          .byte 0x76
          .byte 0x26
          .byte 0x29
          .byte 0x0
.L_42c088:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_42c0a0:
          .string "otError ot::NetworkData::Local::UpdateRloc()"
# WARNING: found overlapping blocks at address 2be73
# WARNING: found overlapping blocks at address 2be75
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c0d0:

            test R8D,R8D
            mov RAX,RDX
            jne .L_42c0de

            cmp BYTE PTR [RSI+1],68
            je .L_42c0e0
.L_42c0de:

            ret 
.L_42c0e0:

            mov R8,QWORD PTR [RDI+128]
            test R8,R8
            je .L_42c0de

            mov RDX,QWORD PTR [RDI+136]
            mov RSI,RCX
            mov RDI,RAX
            jmp R8
.L_42c0fc:

            nop
            nop
            nop
            nop
.L_42c100:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov RAX,QWORD PTR [RDI+128]
            mov RBX,RDI
            mov RBP,RSI
            test RAX,RAX
.L_42c117:

            je .L_42c128

            mov RDI,RDX
            mov RSI,RCX
            mov RDX,QWORD PTR [RBX+136]
            call RAX
.L_42c128:

            mov RDI,RBX
            call .L_433510

            test BYTE PTR [RBP],48
            je .L_42c140

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c140:

            pop RBX
            mov RCX,R12
            mov RDX,RBP
            lea RDI,QWORD PTR [RAX+216]
            pop RBP
            pop R12
            mov ESI,68
            jmp .L_430ae0
.L_42c15b:

            nop
            nop
            nop
            nop
            nop
.L_42c160:

            test BYTE PTR [RSI],48
            jne .L_42c16b

            cmp BYTE PTR [RSI+1],2
            je .L_42c170
.L_42c16b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c170:

            jmp .L_42c100
.L_42c172:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c180:

            lea RAX,QWORD PTR [RIP+.L_42d135]
            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_42ce60]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_42d13a]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_42ccf0]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_42d13f]
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_42c160]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RIP+.L_42d144]
            mov QWORD PTR [RBX+80],RDI
            mov QWORD PTR [RDI+88],0
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RIP+.L_42d130]
            mov QWORD PTR [RDI+104],RAX
            mov QWORD PTR [RBX+112],RDI
            mov QWORD PTR [RDI+120],0
            mov QWORD PTR [RDI+128],0
            mov QWORD PTR [RDI+136],0
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+64]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42f860

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_42c27e:

            nop
            nop
.L_42c280:

            mov QWORD PTR [RDI+128],RSI
            mov QWORD PTR [RDI+136],RDX
            ret 
.L_42c28f:

            nop
.L_42c290:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov EBP,ECX
            sub RSP,248
.L_42c2a9:

            mov QWORD PTR [RSP+8],RDX
            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov RDI,R15
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_40ff70

            test AL,AL
            mov EDX,2
            je .L_42c3c0

            mov ESI,16
            mov RDI,RBX
            lea R12,QWORD PTR [R13+216]
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_42d13a]
            mov RDI,RBX
            call .L_4318a0

            test BPL,BPL
            mov QWORD PTR [RSP],0
            jne .L_42c401
.L_42c337:

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_42c458
.L_42c353:

            movdqu XMM0,XMMWORD PTR [R15]
            mov EAX,4294963391
            lea RDX,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+66],AX
            mov RCX,QWORD PTR [RSP]
            mov R8,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+68],AL
            call .L_430850

            test EAX,EAX
            jne .L_42c441
.L_42c38f:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42c482

            add RSP,248
.L_42c3ad:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c3c0:

            xor ESI,ESI
            mov RDI,RBX
            lea R12,QWORD PTR [R13+216]
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_42d135]
            mov RDI,RBX
            call .L_4318a0

            lea RAX,QWORD PTR [RIP+.L_42c0d0]
            test BPL,BPL
            mov QWORD PTR [RSP],RAX
            je .L_42c337
.L_42c401:

            mov RDI,RBX
            call .L_431b50

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_42c458

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],18
            mov BYTE PTR [RSP+31],BPL
            call .L_403d80

            test EAX,EAX
            je .L_42c468
.L_42c441:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP]
            jmp .L_42c38f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c458:

            mov EAX,3
            jmp .L_42c38f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c468:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,BPL
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_42c441

            jmp .L_42c353
.L_42c482:

            call __stack_chk_fail@PLT
.L_42c487:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c490:

            test R8D,R8D
            mov RAX,RDX
            jne .L_42c49e

            cmp BYTE PTR [RSI+1],68
            je .L_42c4a0
.L_42c49e:

            ret 
.L_42c4a0:

            mov R8,QWORD PTR [RDI+128]
            test R8,R8
            je .L_42c49e

            mov RDX,QWORD PTR [RDI+136]
            mov RSI,RCX
            mov RDI,RAX
            jmp R8
.L_42c4bc:

            nop
            nop
            nop
            nop
.L_42c4c0:

            test BYTE PTR [RSI],48
            jne .L_42c4cb

            cmp BYTE PTR [RSI+1],2
            je .L_42c4d0
.L_42c4cb:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c4d0:

            jmp .L_42c100
.L_42c4d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c4e0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            sub RSP,16
.L_42c4eb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            mov RBX,RAX
            mov RAX,QWORD PTR [RAX+8]
            xor EDX,EDX
            mov BYTE PTR [RSP+6],8
            test RAX,RAX
            je .L_42c527

            nop
            nop
            nop
            nop
            nop
.L_42c518:

            mov RAX,QWORD PTR [RAX+24]
            add EDX,1
            test RAX,RAX
            jne .L_42c518

            shl EDX,4
.L_42c527:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+7],DL
            mov RDI,RBP
            mov EDX,2
            call .L_403d80

            test EAX,EAX
            mov R12D,EAX
            jne .L_42c550

            mov RBX,QWORD PTR [RBX+8]
            test RBX,RBX
            jne .L_42c579

            nop
            nop
            nop
.L_42c550:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_42c592

            add RSP,16
.L_42c567:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c570:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_42c550
.L_42c579:

            mov EDX,16
            mov RSI,RBX
            mov RDI,RBP
            call .L_403d80

            test EAX,EAX
            je .L_42c570

            mov R12D,EAX
            jmp .L_42c550
.L_42c592:

            call __stack_chk_fail@PLT
.L_42c597:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c5a0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,16
.L_42c5af:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RSI,QWORD PTR [RSP+2]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            movzx EDX,BYTE PTR [RSP+2]
            mov R12,RAX
            xor EAX,EAX
            mov WORD PTR [RSP+5],AX
            mov BYTE PTR [RSP+7],0
            mov BYTE PTR [RSP+3],16
            test DL,DL
            je .L_42c740

            lea ECX,DWORD PTR [RDX-1]
            mov RAX,R12
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            xor ECX,ECX
            lea RSI,QWORD PTR [R12+RDX*8+136]
.L_42c610:

            movzx EDX,BYTE PTR [RAX+26]
            and EDX,7
            cmp DL,7
            sete DL
            add RAX,136
            add ECX,EDX
            cmp RAX,RSI
            jne .L_42c610

            lea ECX,DWORD PTR [RCX+RCX*2]
.L_42c62d:

            lea RSI,QWORD PTR [RSP+3]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+4],CL
            call .L_403d80

            test EAX,EAX
            mov R14D,EAX
            jne .L_42c660

            xor R13D,R13D
            cmp BYTE PTR [RSP+2],0
            lea RBP,QWORD PTR [RSP+5]
            jne .L_42c709

            nop
            nop
            nop
.L_42c660:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_42c747

            add RSP,16
.L_42c67b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c688:

            mov EDI,DWORD PTR [R12+92]
            cmp EDI,1
            jbe .L_42c730

            xor EDX,EDX
            mov R8D,1
            jmp .L_42c6a2
.L_42c6a0:

            mov EDX,ECX
.L_42c6a2:

            lea ECX,DWORD PTR [RDX+1]
            mov ESI,R8D
            shl ESI,CL
            cmp ESI,EDI
            jb .L_42c6a0

            add EDX,5
            shl EDX,11
.L_42c6b4:

            movzx ECX,WORD PTR [R12+24]
            shr AL,3
            mov RSI,RBP
            and EAX,15
            mov RDI,RBX
            mov BYTE PTR [RSP+7],AL
            and CX,511
            or EDX,ECX
            rol DX,8
            mov WORD PTR [RSP+5],DX
            mov EDX,3
            call .L_403d80

            test EAX,EAX
            jne .L_42c720

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c6f0:

            movzx EAX,BYTE PTR [RSP+2]
            add R13D,1
            add R12,136
            cmp EAX,R13D
            jle .L_42c660
.L_42c709:

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_42c6f0

            jmp .L_42c688
          .byte 0x66
          .byte 0x90
.L_42c720:

            mov R14D,EAX
            jmp .L_42c660
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c730:

            mov EDX,8192
            jmp .L_42c6b4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c740:

            xor ECX,ECX
            jmp .L_42c62d
.L_42c747:

            call __stack_chk_fail@PLT
.L_42c74c:

            nop
            nop
            nop
            nop
.L_42c750:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            sub RSP,392
.L_42c767:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+376],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+32],RDI
            mov QWORD PTR [RSP+8],RDX
            call .L_433510

            cmp BYTE PTR [R14+1],0
            mov R15,RAX
            movzx EAX,WORD PTR [R13+60]
            je .L_42c85b

            lea R12D,DWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RSP+59]
            lea RBP,QWORD PTR [RIP+.L_42d14c]
            xor EBX,EBX
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+60]
            mov QWORD PTR [RSP+40],RAX
            lea RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+24],RAX
.L_42c7d0:

            lea ESI,DWORD PTR [R12+RBX*1]
            mov RCX,QWORD PTR [RSP]
            mov EDX,1
            mov RDI,R13
            movzx ESI,SI
            call .L_4038b0

            cmp AX,1
            jne .L_42cb20

            cmp BYTE PTR [RSP+59],19
            ja .L_42cb20

            movzx EAX,BYTE PTR [RSP+59]
            movsxd RAX,DWORD PTR [RBP+RAX*4]
            add RAX,RBP
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c810:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R15+2568]
            mov R10D,10501
            mov WORD PTR [RSP+112],R10W
            call .L_421620
.L_42c82d:

            movzx EAX,BYTE PTR [RSP+113]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
.L_42c838:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+8]
            call .L_403d80

            test EAX,EAX
            jne .L_42c85d
.L_42c84b:

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42c7d0
.L_42c85b:

            xor EAX,EAX
.L_42c85d:

            mov RCX,QWORD PTR [RSP+376]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42cb2a

            add RSP,392
.L_42c87b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c890:

            mov RCX,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            mov ESI,9225
            lea RDI,QWORD PTR [R15+1560]
            movups XMMWORD PTR [RCX+2],XMM0
            mov DWORD PTR [RCX+34],0
            movups XMMWORD PTR [RCX+18],XMM0
            mov WORD PTR [RSP+64],SI
            mov RSI,RCX
            call .L_408420

            movzx EAX,BYTE PTR [RSP+65]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            nop
            nop
            nop
            nop
.L_42c8d0:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_403d80

            test EAX,EAX
            jne .L_42c85d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42c7d0

            jmp .L_42c85b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c900:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+32]
            call .L_42c4e0

            test EAX,EAX
            jne .L_42c85d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42c7d0

            jmp .L_42c85b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c930:

            lea RDI,QWORD PTR [R15+2568]
            xor R8D,R8D
            mov WORD PTR [RSP+64],R8W
            call .L_417430

            mov RDX,QWORD PTR [RAX]
            mov R9D,2054
            mov QWORD PTR [RSP+64],RDX
            movzx EAX,WORD PTR [RAX+8]
            mov EDX,10
            mov WORD PTR [RSP+64],R9W
            mov WORD PTR [RSP+72],AX
            jmp .L_42c8d0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c970:

            mov EDI,4294967047
            mov RSI,QWORD PTR [RSP+24]
            xor EDX,EDX
            mov WORD PTR [RSP+112],DI
            lea RDI,QWORD PTR [R15+2568]
            call .L_417970

            jmp .L_42c82d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c998:

            mov RSI,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R15+2568]
            mov R11D,2564
            mov WORD PTR [RSP+64],R11W
            call .L_420760

            mov EDX,12
            jmp .L_42c8d0
          .byte 0x90
.L_42c9c0:

            test BYTE PTR [R15+2624],8
            jne .L_42c84b

            lea RDI,QWORD PTR [R15+2520]
            mov EAX,1027
            mov WORD PTR [RSP+64],AX
            call .L_413580

            mov EDX,274877907
            mul EDX
            mov ECX,EDX
            mov EAX,EDX
            shr ECX,6
            shr EAX,14
            mov EDX,ECX
            and EAX,65280
            shl ECX,24
            shl EDX,8
            and EDX,16711680
            or EAX,EDX
            or EAX,ECX
            jmp .L_42cb11
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ca18:

            mov EAX,258
            mov EDX,3
            mov WORD PTR [RSP+64],AX
            movzx EAX,BYTE PTR [R15+2624]
            mov BYTE PTR [RSP+66],AL
            jmp .L_42c8d0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ca40:

            lea RDI,QWORD PTR [R15+2568]
            mov EAX,513
            mov WORD PTR [RSP+64],AX
            call .L_416dd0

            rol AX,8
            mov EDX,4
            mov WORD PTR [RSP+66],AX
            jmp .L_42c8d0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ca70:

            mov EAX,2048
            mov EDX,10
            mov WORD PTR [RSP+112],AX
            mov RAX,QWORD PTR [R15+1656]
            mov QWORD PTR [RSP+114],RAX
            jmp .L_42c838
.L_42ca90:

            mov EDX,273
            mov BYTE PTR [RSP+114],0
            mov WORD PTR [RSP+112],DX
            mov EDX,3
            jmp .L_42c838
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42cab0:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+32]
            call .L_42c5a0

            test EAX,EAX
            jne .L_42c85d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42c7d0

            jmp .L_42c85b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42cae0:

            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [R15+2568]
            mov DWORD PTR [RSP+60],0
            call .L_422070

            test EAX,EAX
            jne .L_42c84b

            mov EAX,1043
            mov WORD PTR [RSP+64],AX
            mov EAX,DWORD PTR [RSP+60]
            bswap EAX
.L_42cb11:

            mov DWORD PTR [RSP+66],EAX
            mov EDX,6
            jmp .L_42c8d0
          .byte 0x90
.L_42cb20:

            mov EAX,2
            jmp .L_42c85d
.L_42cb2a:

            call __stack_chk_fail@PLT
.L_42cb2f:

            nop
.L_42cb30:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov R12,RDX
            mov RBP,RDI
            sub RSP,248
.L_42cb4d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            cmp BYTE PTR [RBX+1],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+30],DX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_42cbb0
.L_42cb85:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42cce0

            add RSP,248
.L_42cba3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_42cbb0:

            movzx ESI,WORD PTR [R12+60]
            lea R14,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,R12
            mov R15,RAX
            mov RCX,R14
            call .L_4038b0

            cmp AX,2
            jne .L_42cb85

            cmp BYTE PTR [RSP+30],18
            jne .L_42cb85

            cmp BYTE PTR [RSP+31],19
            ja .L_42cb85

            test BYTE PTR [RBX],48
            lea RAX,QWORD PTR [R15+216]
            mov QWORD PTR [RSP+8],RAX
            jne .L_42cc06

            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            mov RDI,RAX
            call .L_430ae0
.L_42cc06:

            lea RBX,QWORD PTR [RSP+80]
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_42d13f]
            mov RDI,RBX
            call .L_4318a0

            cmp BYTE PTR [RSP+31],0
            je .L_42cc45

            mov RDI,RBX
            call .L_431b50
.L_42cc45:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov EDX,2
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_42cb85

            movdqu XMM0,XMMWORD PTR [R13+16]
            mov EAX,4294963391
            mov RCX,R14
            mov WORD PTR [RSP+66],AX
            mov RDX,RBX
            mov RSI,R12
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R15+24]
            mov RDI,RBP
            mov BYTE PTR [RSP+68],AL
            call .L_42c750

            test EAX,EAX
            jne .L_42ccc3

            movzx EAX,BYTE PTR [RSP+208]
            cmp AX,WORD PTR [RBX+58]
            je .L_42ccd0
.L_42cca4:

            mov RDI,QWORD PTR [RSP+8]
            lea RDX,QWORD PTR [RSP+32]
            xor ECX,ECX
            mov R8,RBP
            mov RSI,RBX
            call .L_430850

            test EAX,EAX
            je .L_42cb85
.L_42ccc3:

            mov RDI,RBX
            call .L_403400

            jmp .L_42cb85
.L_42ccd0:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403470

            jmp .L_42cca4
.L_42cce0:

            call __stack_chk_fail@PLT
.L_42cce5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ccf0:

            jmp .L_42cb30
.L_42ccf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cd00:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            mov R12,RDI
            sub RSP,232
.L_42cd1d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_433510

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+14],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_42cd65

            cmp BYTE PTR [RBP+1],2
            je .L_42cd90
.L_42cd65:

            mov RAX,QWORD PTR [RSP+216]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ce49

            add RSP,232
.L_42cd83:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_42cd90:

            movzx ESI,WORD PTR [R13+60]
            lea RBX,QWORD PTR [RSP+14]
            mov EDX,2
            mov RDI,R13
            mov R14,RAX
            mov RCX,RBX
            call .L_4038b0

            cmp AX,2
            jne .L_42cd65

            cmp BYTE PTR [RSP+14],18
            jne .L_42cd65

            cmp BYTE PTR [RSP+15],19
            ja .L_42cd65

            lea R15,QWORD PTR [RSP+64]
            mov RSI,RBP
            add R14,216
            mov RDI,R15
            call .L_431cf0

            mov RDI,R15
            call .L_431b50

            mov EDX,2
            mov RSI,R15
            mov RDI,R14
            call .L_42f920

            test RAX,RAX
            mov RBP,RAX
            je .L_42cd65

            mov RCX,RBX
            mov RDX,RAX
            mov RSI,R13
            mov RDI,R12
            call .L_42c750

            test EAX,EAX
            jne .L_42ce3c

            movzx EAX,BYTE PTR [RSP+192]
            cmp AX,WORD PTR [RBP+58]
            je .L_42ce4e
.L_42ce1f:

            lea RDX,QWORD PTR [RSP+16]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBP
            mov RDI,R14
            call .L_430850

            test EAX,EAX
            je .L_42cd65
.L_42ce3c:

            mov RDI,RBP
            call .L_403400

            jmp .L_42cd65
.L_42ce49:

            call __stack_chk_fail@PLT
.L_42ce4e:

            sub EAX,1
            mov RDI,RBP
            movzx ESI,AX
            call .L_403470

            jmp .L_42ce1f
.L_42ce5e:

            nop
            nop
.L_42ce60:

            jmp .L_42cd00
.L_42ce65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ce70:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RSI
            push RBP
            push RBX
            mov EBP,ECX
            sub RSP,248
.L_42ce89:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_42d144]
            mov RDI,RBX
            call .L_4318a0

            test BPL,BPL
            jne .L_42cf80

            lea R12,QWORD PTR [R13+216]
            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_42cf78
.L_42cf0f:

            movdqu XMM0,XMMWORD PTR [R14]
            mov EAX,4294963391
            lea RDX,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+66],AX
            xor R8D,R8D
            xor ECX,ECX
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+68],AL
            call .L_430850

            test EAX,EAX
            jne .L_42cfc7
.L_42cf49:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42cff8

            add RSP,248
.L_42cf67:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42cf78:

            mov EAX,3
            jmp .L_42cf49
          .byte 0x90
.L_42cf80:

            lea R12,QWORD PTR [R13+216]
            mov RDI,RBX
            call .L_431b50

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_42cf78

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],18
            mov BYTE PTR [RSP+31],BPL
            call .L_403d80

            test EAX,EAX
            je .L_42cfe0
.L_42cfc7:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42cf49
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42cfe0:

            movzx EDX,BPL
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_42cfc7

            jmp .L_42cf0f
.L_42cff8:

            call __stack_chk_fail@PLT
.L_42cffd:

            nop
            nop
            nop
.L_42d000:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDX
            sub RSP,40
.L_42d017:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            test BYTE PTR [R15],48
            mov WORD PTR [RSP+22],DX
            jne .L_42d040

            cmp BYTE PTR [R15+1],2
            je .L_42d068
.L_42d040:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42d12a

            add RSP,40
.L_42d058:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d068:

            movzx ESI,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,RBX
            mov R14,RAX
            call .L_4038b0

            cmp AX,2
            jne .L_42d040

            cmp BYTE PTR [RSP+22],18
            jne .L_42d040

            movzx EAX,BYTE PTR [RSP+23]
            cmp AL,19
            ja .L_42d040

            movzx EDX,WORD PTR [RBX+60]
            test AL,AL
            lea R13D,DWORD PTR [RDX+2]
            je .L_42d104

            lea RAX,QWORD PTR [RSP+21]
            movzx R13D,R13W
            xor R12D,R12D
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [R14+1560]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_42d0d3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d0c8:

            add R12D,1
            cmp R12B,BYTE PTR [RSP+23]
            jae .L_42d104
.L_42d0d3:

            mov RCX,QWORD PTR [RSP]
            mov EDX,1
            mov ESI,R13D
            mov RDI,RBX
            call .L_4038b0

            cmp AX,1
            jne .L_42d040

            cmp BYTE PTR [RSP+21],9
            jne .L_42d0c8

            mov RDI,QWORD PTR [RSP+8]
            call .L_4084b0

            jmp .L_42d0c8
.L_42d104:

            test BYTE PTR [R15],48
            jne .L_42d040

            lea RDI,QWORD PTR [R14+216]
            mov RCX,RBP
            mov RDX,R15
            mov ESI,68
            call .L_430ae0

            jmp .L_42d040
.L_42d12a:

            call __stack_chk_fail@PLT
.L_42d12f:

            nop
.L_42d130:

            jmp .L_42d000
.L_42d135:
          .string "d/dg"
.L_42d13a:
          .string "d/dq"
.L_42d13f:
          .string "d/da"
.L_42d144:
          .string "d/dr"
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42d14c:
          .long .L_42ca70-.L_42d14c
          .long .L_42ca40-.L_42d14c
          .long .L_42ca18-.L_42d14c
          .long .L_42c9c0-.L_42d14c
          .long .L_42c998-.L_42d14c
          .long .L_42c810-.L_42d14c
          .long .L_42c930-.L_42d14c
          .long .L_42c970-.L_42d14c
          .long .L_42c900-.L_42d14c
          .long .L_42c890-.L_42d14c
          .long .L_42cb20-.L_42d14c
          .long .L_42cb20-.L_42d14c
          .long .L_42cb20-.L_42d14c
          .long .L_42cb20-.L_42d14c
          .long .L_42c84b-.L_42d14c
          .long .L_42c84b-.L_42d14c
          .long .L_42cab0-.L_42d14c
          .long .L_42ca90-.L_42d14c
          .long .L_42cb20-.L_42d14c
          .long .L_42cae0-.L_42d14c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d1a0:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RDI,RAX
            call .L_401410

            mov RDI,RBX
            call .L_4334e0

            pop RBX
            mov RDI,RAX
            jmp .L_401420
.L_42d1c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d1d0:

            mov BYTE PTR [RDI],0
            jmp .L_42d1a0
.L_42d1d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d1e0:

            push RBX
            mov EBX,ESI
            mov BYTE PTR [RDI],SIL
            call .L_4334e0

            movzx ESI,BL
            mov RDI,RAX
            pop RBX
            jmp .L_4013c0
.L_42d1f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d200:

            push RBX
            sub RSP,16
.L_42d205:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test BYTE PTR [RSI+127],32
            jne .L_42d270

            mov RBX,RSP
            lea RAX,QWORD PTR [RSI+7]
            lea R8,QWORD PTR [RSI-1]
            mov RDX,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d230:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,R8
            jne .L_42d230

            call .L_4334e0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4013e0
.L_42d253:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42d285

            add RSP,16
.L_42d267:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d270:

            movzx EBX,WORD PTR [RSI+24]
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBX
            call .L_4013d0

            jmp .L_42d253
.L_42d285:

            call __stack_chk_fail@PLT
.L_42d28a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42d290:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_42d29b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            cmp BYTE PTR [RSP+7],0
            je .L_42d310

            mov RBX,RAX
            xor EBP,EBP
            jmp .L_42d2e5
          .byte 0x90
.L_42d2d0:

            cmp AL,1
            je .L_42d2f4
.L_42d2d4:

            add EBP,1
            add RBX,136
            cmp BYTE PTR [RSP+7],BPL
            jbe .L_42d310
.L_42d2e5:

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_42d2d0
.L_42d2f4:

            test BYTE PTR [RBX+127],64
            je .L_42d2d4

            mov RSI,RBX
            mov RDI,R12
            call .L_42d200

            test EAX,EAX
            jne .L_42d312

            and BYTE PTR [RBX+127],191
            jmp .L_42d2d4
          .byte 0x90
.L_42d310:

            xor EAX,EAX
.L_42d312:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42d32b

            add RSP,16
.L_42d326:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_42d32b:

            call __stack_chk_fail@PLT
.L_42d330:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            or BYTE PTR [RSI+127],64
            cmp BYTE PTR [RDI],0
            jne .L_42d358

            call .L_42d290

            test EAX,EAX
            je .L_42d370

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d358:

            mov RBX,RSI
            call .L_42d200

            test EAX,EAX
            jne .L_42d390

            and BYTE PTR [RBX+127],191
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_42d370:

            mov RDI,RBP
            mov BYTE PTR [RBP],1
            call .L_4334e0

            add RSP,8
            mov ESI,1
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_4013c0
          .byte 0x90
.L_42d390:

            mov RDI,RBP
            mov BYTE PTR [RBP],0
            call .L_4334e0

            add RSP,8
            xor ESI,ESI
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_4013c0
.L_42d3ac:

            nop
            nop
            nop
            nop
.L_42d3b0:

            movzx EAX,WORD PTR [RSI+126]
            push RBX
            mov RBX,RSI
            and AX,8191
            jne .L_42d3cb

            call .L_42d330

            movzx EAX,WORD PTR [RBX+126]
            and AX,8191
.L_42d3cb:

            movzx EDX,WORD PTR [RBX+126]
            add EAX,1
            and AX,8191
            and DX,57344
            or EAX,EDX
            mov WORD PTR [RBX+126],AX
            pop RBX
            ret 
.L_42d3e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d3f0:

            push RBP
            push RBX
            sub RSP,24
.L_42d3f6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RSI+127]
            test AL,64
            jne .L_42d480

            test AL,32
            mov RBX,RDI
            jne .L_42d490

            mov RBP,RSP
            lea RAX,QWORD PTR [RSI+7]
            lea RCX,QWORD PTR [RSI-1]
            mov RDX,RBP
            nop
            nop
            nop
            nop
            nop
.L_42d428:

            movzx EDI,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],DIL
            cmp RAX,RCX
            jne .L_42d428

            mov RDI,RBX
            call .L_4334e0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401400
.L_42d44f:

            test EAX,EAX
            jne .L_42d460

            cmp BYTE PTR [RBX],0
            je .L_42d4a8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d460:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42d4ce

            add RSP,24
.L_42d474:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d480:

            and EAX,4294967231
            mov BYTE PTR [RSI+127],AL
            jmp .L_42d460
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d490:

            movzx EBP,WORD PTR [RSI+24]
            call .L_4334e0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4013f0

            jmp .L_42d44f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42d4a8:

            mov RDI,RBX
            call .L_42d290

            test EAX,EAX
            jne .L_42d460

            mov RDI,RBX
            mov BYTE PTR [RBX],1
            call .L_4334e0

            mov ESI,1
            mov RDI,RAX
            call .L_4013c0

            jmp .L_42d460
.L_42d4ce:

            call __stack_chk_fail@PLT
.L_42d4d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d4e0:

            movzx EAX,WORD PTR [RSI+126]
            mov EDX,EAX
            and DX,8191
            je .L_42d506

            add DX,8191
            and AX,57344
            and DX,8191
            or EAX,EDX
            test DX,DX
            mov WORD PTR [RSI+126],AX
            je .L_42d510
.L_42d506:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d510:

            jmp .L_42d3f0
.L_42d515:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d520:

            and WORD PTR [RSI+126],57344
            jmp .L_42d3f0
.L_42d52b:

            nop
            nop
            nop
            nop
            nop
.L_42d530:

            movzx EAX,BYTE PTR [RSI+127]
            mov ECX,EAX
            shr CL,5
            and ECX,1
            cmp DL,CL
            je .L_42d556

            test WORD PTR [RSI+126],8191
            jne .L_42d560

            and EDX,1
            and EAX,4294967263
            shl EDX,5
            or EDX,EAX
            mov BYTE PTR [RSI+127],DL
.L_42d556:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d560:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov EBX,EDX
            mov R12,RDI
            call .L_42d3f0

            mov EDX,EBX
            movzx EBX,BYTE PTR [RBP+127]
            mov RSI,RBP
            and EDX,1
            mov RDI,R12
            shl EDX,5
            and EBX,4294967263
            or EDX,EBX
            mov BYTE PTR [RBP+127],DL
            pop RBX
            pop RBP
            pop R12
            jmp .L_42d330
.L_42d594:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d5a0:

            mov DWORD PTR [RSI],27
            mov BYTE PTR [RSI+4],8
            mov RAX,QWORD PTR [RDI+1656]
            mov QWORD PTR [RSI+5],RAX
            xor EAX,EAX
            ret 
.L_42d5b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d5c0:

            push RBP
            push RBX
            mov RBP,RDI
            add RDI,7520
            sub RSP,24
.L_42d5d0:

            lea R8,QWORD PTR [RSP+6]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_428990

            test EAX,EAX
            mov EBX,EAX
            jne .L_42d609

            lea RDI,QWORD PTR [RBP+2568]
            call .L_416dd0

            cmp WORD PTR [RSP+6],AX
            mov EAX,4
            cmove EBX,EAX
.L_42d609:

            mov EAX,EBX
            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42d622

            add RSP,24
.L_42d61f:

            pop RBX
            pop RBP
            ret 
.L_42d622:

            call __stack_chk_fail@PLT
.L_42d627:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d630:

            push R14
            push R13
            mov EDX,1
            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_42d640:

            mov RBX,RDI
            lea R12,QWORD PTR [RBP+12720]
            lea R13,QWORD PTR [RBX+216]
            lea R14,QWORD PTR [RBX+2568]
            call .L_411220

            lea RAX,QWORD PTR [RIP+.L_676890]
            mov RSI,RBP
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_431190

            lea RDI,QWORD PTR [RBX+408]
            mov RSI,RBP
            call .L_43afc0

            lea RDI,QWORD PTR [RBX+696]
            mov RSI,RBP
            call .L_43c0d0

            mov RDI,R12
            call .L_4334f0

            lea RDI,QWORD PTR [RBX+968]
            lea RSI,QWORD PTR [RAX+104]
            call .L_411a30

            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+1048]
            mov WORD PTR [RBX+1040],AX
            call .L_404490

            mov RDI,R12
            lea R12,QWORD PTR [RBX+1368]
            call .L_4334e0

            mov RAX,OFFSET .L_43d980
            lea RDI,QWORD PTR [RBX+1080]
            mov RSI,RBP
            mov DWORD PTR [RBX+1064],0
            mov QWORD PTR [RBX+1056],RAX
            lea RAX,QWORD PTR [RBX+1056]
            mov QWORD PTR [RBX+1072],RAX
            call .L_40ad70

            lea RDI,QWORD PTR [RBX+1208]
            mov RSI,RBP
            call .L_40aec0

            lea RDI,QWORD PTR [RBX+1360]
            call .L_4105a0

            mov RSI,RBP
            mov RDI,R12
            call .L_413ae0

            lea RDI,QWORD PTR [RBX+1552]
            mov RSI,RBP
            call .L_43ebc0

            lea RDI,QWORD PTR [RBX+1560]
            mov RSI,RBP
            call .L_405f10

            lea RDI,QWORD PTR [RBX+2256]
            mov RSI,RBP
            call .L_440720

            mov RSI,RBP
            mov RDI,R14
            call .L_41c520

            lea RDI,QWORD PTR [RBX+7248]
            mov RSI,RBP
            call .L_42b500

            lea RDI,QWORD PTR [RBX+7520]
            mov RSI,RBP
            call .L_4293c0

            lea RDI,QWORD PTR [RBX+7976]
            mov RSI,RBP
            call .L_42c180

            lea RDI,QWORD PTR [RBX+8128]
            mov RSI,RBP
            mov BYTE PTR [RBX+8120],0
            call .L_434900

            lea RDI,QWORD PTR [RBX+8504]
            mov RSI,RBP
            call .L_438410

            lea RDI,QWORD PTR [RBX+9784]
            mov RSI,RBP
            call .L_432050

            lea RDI,QWORD PTR [RBX+10080]
            mov RSI,RBP
            call .L_439590

            lea RDI,QWORD PTR [RBX+10232]
            mov RSI,RBP
            call .L_42e8f0

            mov RDI,R14
            call .L_4172a0

            lea RDI,QWORD PTR [RBX+10304]
            mov RDX,R13
            mov RSI,RAX
            call .L_42da80

            lea RDI,QWORD PTR [RBX+10368]
            mov RSI,RBP
            call .L_40c8c0

            lea RDI,QWORD PTR [RBX+10528]
            mov RSI,RBP
            call .L_40d880

            lea RDI,QWORD PTR [RBX+10688]
            mov RSI,RBP
            call .L_412180

            lea RDI,QWORD PTR [RBX+11232]
            mov RSI,RBP
            call .L_42e3e0

            lea RDI,QWORD PTR [RBX+11264]
            mov RSI,RBP
            call .L_42e7f0

            lea RDI,QWORD PTR [RBX+11296]
            mov RSI,RBP
            call .L_43e1b0

            lea RDI,QWORD PTR [RBX+11360]
            mov RSI,RBP
            call .L_442a80

            lea RDI,QWORD PTR [RBX+11440]
            mov RSI,RBP
            call .L_43e550

            lea RSI,QWORD PTR [RIP+.L_42da70]
            mov RDI,R12
            call .L_413ca0

            lea RAX,QWORD PTR [RIP+.L_42da30]
            mov QWORD PTR [RBX+344],RBX
            mov QWORD PTR [RBX+352],RAX
            pop RBX
.L_42d895:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42d89d:

            nop
            nop
            nop
.L_42d8a0:

            cmp BYTE PTR [RDI+8120],0
            je .L_42d8b0

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d8b0:

            push RBX

            mov RBX,RDI
            call .L_4334f0

            mov RSI,RBX
            mov RDI,RAX
            call .L_40eaf0

            lea RDI,QWORD PTR [RBX+2256]
            call .L_4408c0

            lea RDI,QWORD PTR [RBX+216]
            mov ESI,61631
            call .L_42f7f0

            lea RDI,QWORD PTR [RBX+968]
            call .L_43cee0

            mov RDI,RBX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24560]
            call .L_42e170

            lea RDI,QWORD PTR [RBX+11232]
            call .L_42e410

            lea RDI,QWORD PTR [RBX+2568]
            call .L_416280

            mov BYTE PTR [RBX+8120],1
            xor EAX,EAX
            pop RBX

            ret 
.L_42d924:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d930:

            push RBX

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+216]
            call .L_430f40

            lea RDI,QWORD PTR [RBX+968]
            call .L_43d700

            mov RDI,RBX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24560]
            call .L_42e1a0

            lea RDI,QWORD PTR [RBX+11232]
            call .L_42e450

            lea RDI,QWORD PTR [RBX+2568]
            call .L_4166d0

            lea RDI,QWORD PTR [RBX+2256]
            call .L_440900

            mov RDI,RBX
            call .L_4334f0

            mov RSI,RBX
            mov RDI,RAX
            call .L_40eb40

            mov RDI,RBX
            call .L_411950

            mov RDI,RBX
            call .L_411680

            lea RDI,QWORD PTR [RBX+8504]
            mov BYTE PTR [RBX+8120],0
            call .L_4385a0

            xor EAX,EAX
            pop RBX

            ret 
.L_42d9be:

            nop
            nop
.L_42d9c0:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+2568]
            mov RBP,RSI
            sub RSP,8
            mov RDI,RBX
            call .L_41c0a0

            test AL,AL
            jne .L_42d9e8

            mov RDI,RBP
            call .L_410270

            test AL,AL
            je .L_42da20
.L_42d9e8:

            lea RSI,QWORD PTR [RBP+16]
            mov RDI,RBX
            call .L_41c0a0

            test AL,AL
            jne .L_42da04
.L_42d9f8:

            mov RDI,RBP
            call .L_40ff50

            test AL,AL
            jne .L_42da10
.L_42da04:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42da10:

            add RSP,8
            lea RDI,QWORD PTR [RBP+16]
            pop RBX
            pop RBP
            jmp .L_40ff50
          .byte 0x90
.L_42da20:

            mov RDI,RBP
            call .L_410290

            test AL,AL
            jne .L_42d9e8

            jmp .L_42d9f8
.L_42da2e:

            nop
            nop
.L_42da30:

            sub RSP,8
            mov RDI,RDX
            call .L_42d9c0

            cmp AL,1
            sbb EAX,EAX
            add RSP,8
            and EAX,31
            ret 
.L_42da48:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42da50:
          .string "N2ot11ThreadNetifE"
# WARNING: found overlapping blocks at address 2d830

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42da70:
          .byte 0x0
          .byte 0x11
          .byte 0x22
          .byte 0x33
          .byte 0x44
          .byte 0x55
          .byte 0x66
          .byte 0x77
          .byte 0x88

            cdq 
            stosb BYTE PTR [RDI]
            mov EBX,4293844428
.L_42da80:

            lea RAX,QWORD PTR [RIP+.L_42dcd4]
            mov QWORD PTR [RDI+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_42dbd0]
            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+56],RDX
            mov QWORD PTR [RDI+8],RAX
            ret 
.L_42daba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42dac0:

            cmp QWORD PTR [RDI+32],0
            je .L_42dad0

            mov EAX,24
            ret 
            nop
            nop
            nop
.L_42dad0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+56]
            mov RBP,RDX
            mov RSI,RBX
            call .L_42f860

            mov QWORD PTR [RBX+32],R12
            mov QWORD PTR [RBX+40],RBP
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
.L_42daf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42db00:

            cmp QWORD PTR [RDI+32],0
            je .L_42db28

            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+56]
            mov RSI,RBX
            call .L_42f8a0

            mov QWORD PTR [RBX+32],0
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42db28:

            mov EAX,24
            ret 
.L_42db2e:

            nop
            nop
.L_42db30:

            cmp QWORD PTR [RDI+32],0
            setne AL
            ret 
.L_42db39:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42db40:

            cmp QWORD PTR [RDI+32],0
            je .L_42dbc0

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RDX
            mov RBX,RCX
            sub RSP,8
.L_42db5d:

            movzx ESI,WORD PTR [RDX+58]
            call .L_404070

            test RAX,RAX
            mov R12,RAX
            je .L_42dbb0

            movzx EAX,BYTE PTR [R13+128]
            movzx ESI,WORD PTR [R12+60]
            mov RDI,R12
            sub ESI,EAX
            movzx ESI,SI
            call .L_403860

            movzx ESI,WORD PTR [RBX+30]
            mov RCX,QWORD PTR [RBP+40]
            mov RDI,R12
            movzx EDX,WORD PTR [RBX+34]
            mov RAX,QWORD PTR [RBP+32]
            add RSP,8
.L_42dba0:

            pop RBX
            pop RBP
            rol SI,8
            pop R12
            pop R13
            movzx ESI,SI
            jmp RAX
          .byte 0x90
.L_42dbb0:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42dbc0:

            ret 
.L_42dbc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dbd0:

            jmp .L_42db40
.L_42dbd5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dbe0:

            test R8D,R8D
            je .L_42dbf0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dbf0:

            jmp .L_42db40
.L_42dbf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dc00:

            push RBX
            mov EAX,EDX
            mov RBX,RSI
            pxor XMM0,XMM0
            sub RSP,80
.L_42dc0e:

            mov RDX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RDX
            xor EDX,EDX
            cmp QWORD PTR [RDI+32],0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_42dcc8

            rol AX,8
            cmp CX,61631
            mov R8,RDI
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RDI+48]
            mov RDI,QWORD PTR [RDI+56]
            movdqu XMM0,XMMWORD PTR [RSI]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI]
            mov WORD PTR [RSP+50],CX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+46],AX
            je .L_42dcb0

            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            call .L_430850
.L_42dc7c:

            test EAX,EAX
            je .L_42dc90
.L_42dc80:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_42dc90:

            mov RBX,QWORD PTR [RSP+72]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42dccf

            add RSP,80
.L_42dca4:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dcb0:

            lea RCX,QWORD PTR [RIP+.L_42dbe0]
            mov RSI,RBX
            call .L_430850

            jmp .L_42dc7c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dcc8:

            mov EAX,13
            jmp .L_42dc80
.L_42dccf:

            call __stack_chk_fail@PLT
.L_42dcd4:
          .string "c/rx"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dce0:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+20]
            lea RBX,QWORD PTR [RDI+12]
            sub RSP,8
            nop
            nop
.L_42dcf0:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42dcf0

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42dd08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dd10:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+36],0
            movups XMMWORD PTR [RDI+44],XMM0
            movups XMMWORD PTR [RDI+60],XMM0
            movups XMMWORD PTR [RDI+76],XMM0
            ret 
.L_42dd29:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dd30:

            push RBP
            lea RBP,QWORD PTR [RDI+36]
            push RBX
            lea RCX,QWORD PTR [RDI+44]
            sub RSP,8
            mov RAX,RBP
.L_42dd41:

            cmp BYTE PTR [RAX],0
            jne .L_42dd60

            add RAX,1
            cmp RCX,RAX
            jne .L_42dd41

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42dd60:

            lea RDI,QWORD PTR [RSI+15288]
            mov RBX,RDX
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [RBX],RAX
            call .L_4101c0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42dd89:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dd90:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RDX
            sub RSP,8
.L_42dda3:

            movzx EAX,WORD PTR [RDX]
            test AX,AX
            je .L_42de10
.L_42ddab:

            sub EAX,1
            cmp AX,2
            ja .L_42ddf8

            movzx EBP,AX
            movzx EAX,AX
            shl RAX,4
            lea RDI,QWORD PTR [R12+RAX*1+44]
            call .L_40ff00

            test AL,AL
            jne .L_42ddf8

            add RBP,2
            xor EAX,EAX
            shl RBP,4
            movdqu XMM0,XMMWORD PTR [R12+RBP*1+12]
            movups XMMWORD PTR [R13],XMM0
            add WORD PTR [RBX],1
            add RSP,8
.L_42ddea:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ddf8:

            mov EAX,23
.L_42ddfd:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42de10:

            mov EAX,1
            mov WORD PTR [RDX],AX
            mov RDX,RCX
            call .L_42dd30

            mov EDX,EAX
            xor EAX,EAX
            cmp EDX,23
            jne .L_42ddfd

            movzx EAX,WORD PTR [RBX]
            jmp .L_42ddab
.L_42de31:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42de40:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,8
.L_42de56:

            call .L_40ff00

            test AL,AL
            mov EDX,7
            jne .L_42deb1

            lea RDI,QWORD PTR [RBP+15288]
            mov RSI,RBX
            call .L_41c0a0

            test AL,AL
            jne .L_42dec0

            lea RBP,QWORD PTR [R12+44]
            xor R13D,R13D
.L_42de7f:

            mov RDI,RBP
            call .L_40ff00

            test AL,AL
            jne .L_42df18

            mov RSI,RBX
            mov RDI,RBP
            call .L_4103d0

            test AL,AL
            je .L_42df00

            add R13D,1
            add RBP,16
            cmp R13D,3
            jne .L_42de7f

            mov EDX,3
.L_42deb1:

            add RSP,8
.L_42deb5:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_42dec0:

            lea RAX,QWORD PTR [R12+36]
            lea RDX,QWORD PTR [R12+44]
.L_42deca:

            cmp BYTE PTR [RAX],0
            jne .L_42df00

            add RAX,1
            cmp RAX,RDX
            jne .L_42deca

            mov RDI,RBX
            call .L_4101a0

            mov RAX,QWORD PTR [RAX]
            xor EDX,EDX
            mov QWORD PTR [R12+36],RAX
            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42df00:

            add RSP,8
            mov EDX,24
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42df18:

            movsxd R13,R13D
            movdqu XMM0,XMMWORD PTR [RBX]
            add R13,2
            xor EDX,EDX
            shl R13,4
            movups XMMWORD PTR [R12+R13*1+12],XMM0
            jmp .L_42deb1
.L_42df34:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42df40:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBP,RDX
            mov RBX,RSI
            sub RSP,8
.L_42df56:

            call .L_40ff00

            test AL,AL
            mov EDX,7
            jne .L_42dfad

            lea RDI,QWORD PTR [RBX+15288]
            mov RSI,RBP
            xor R12D,R12D
            lea RBX,QWORD PTR [R13+44]
            call .L_41c0a0

            test AL,AL
            jne .L_42dfc0
.L_42df7e:

            mov RDI,RBX
            call .L_40ff00

            test AL,AL
            jne .L_42dfa8

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            jne .L_42dfe0

            add R12D,1
            add RBX,16
            cmp R12W,3
            jne .L_42df7e
.L_42dfa8:

            mov EDX,23
.L_42dfad:

            add RSP,8
.L_42dfb1:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42dfc0:

            mov RDI,RBP
            call .L_4101a0

            mov RCX,QWORD PTR [R13+36]
            cmp QWORD PTR [RAX],RCX
            jne .L_42dfa8

            mov QWORD PTR [R13+36],0
            xor EDX,EDX
            jmp .L_42dfad
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42dfe0:

            cmp R12W,2
            je .L_42e022

            movzx EDX,R12W
            mov RAX,RDX
            add RDX,2
            add EAX,1
            shl RDX,4
            cdqe 
            add RAX,2
            shl RAX,4
            cmp R12W,1
            movdqu XMM0,XMMWORD PTR [R13+RAX*1+12]
            movups XMMWORD PTR [R13+RDX*1+12],XMM0
            je .L_42e022

            movdqu XMM0,XMMWORD PTR [R13+76]
            movups XMMWORD PTR [R13+60],XMM0
.L_42e022:

            lea RDI,QWORD PTR [R13+76]
            call .L_40fef0

            add RSP,8
.L_42e02f:

            xor EDX,EDX
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42e03a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e040:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBX,RSI
            mov RBP,RDX
            sub RSP,8
            call .L_40ff00

            test AL,AL
            je .L_42e070
.L_42e05f:

            xor EAX,EAX
.L_42e061:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e070:

            lea RDI,QWORD PTR [RBX+15288]
            mov RSI,RBP
            lea RBX,QWORD PTR [R12+44]
            lea R13,QWORD PTR [R12+92]
            call .L_41c0a0

            test AL,AL
            jne .L_42e0b8
.L_42e08d:

            mov RDI,RBX
            call .L_40ff00

            test AL,AL
            jne .L_42e05f

            mov RSI,RBP
            mov RDI,RBX
            call .L_4103b0

            test AL,AL
            jne .L_42e061

            add RBX,16
            cmp RBX,R13
            jne .L_42e08d

            jmp .L_42e05f
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e0b8:

            mov RDI,RBP
            call .L_4101a0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R12+36],RAX
            sete AL
            add RSP,8
.L_42e0cf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42e0d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e0e0:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+104]
            lea RBX,QWORD PTR [RDI+96]
            sub RSP,8
            nop
            nop
.L_42e0f0:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42e0f0

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42e108:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e110:

            test BYTE PTR [RDI+127],32
            mov RAX,RSI
            jne .L_42e130

            mov RDX,QWORD PTR [RDI]
            mov DWORD PTR [RSI+8],2
            mov QWORD PTR [RSI],RDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e130:

            movzx EDX,WORD PTR [RDI+24]
            mov DWORD PTR [RSI+8],1
            mov WORD PTR [RSI],DX
            ret 
.L_42e13f:

            nop
.L_42e140:

            lea RAX,QWORD PTR [RIP+.L_42e260]
            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+48],0
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RDI+40]
            movups XMMWORD PTR [RDI+4],XMM0
            mov QWORD PTR [RDI+56],RAX
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
.L_42e16d:

            nop
            nop
            nop
.L_42e170:

            pxor XMM0,XMM0
            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            movups XMMWORD PTR [RDI+4],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            call .L_401240

            lea RDI,QWORD PTR [RBX+40]
            mov EDX,10250
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_42e19c:

            nop
            nop
            nop
            nop
.L_42e1a0:

            add RDI,40
            jmp .L_433690
.L_42e1a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e1b0:

            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            movups XMMWORD PTR [RDI+4],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
.L_42e1c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e1d0:

            lea EDX,DWORD PTR [RSI-11]
            xor EAX,EAX
            cmp DL,15
            ja .L_42e1e9

            movzx ESI,SIL
            sub ESI,11
            movsxd RSI,ESI
            movzx EAX,WORD PTR [RDI+RSI*2+4]
.L_42e1e9:

            ret 
.L_42e1eb:

            nop
            nop
            nop
            nop
            nop
.L_42e1f0:

            push RBX
            mov RBX,RDI
            call .L_401460

            mov ESI,DWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RBX+40]
            and EAX,8191
            pop RBX
            lea EDX,DWORD PTR [RAX+6154]
            jmp .L_433770
.L_42e211:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e220:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RDI,RAX
            call .L_402aa0

            movzx EDX,BYTE PTR [RBX]
            lea RCX,QWORD PTR [RIP+.L_42e3d0]
            mov R8,RBX
            mov RDI,RAX
            and EDX,3
            mov ESI,DWORD PTR [RCX+RDX*4]
            lea RCX,QWORD PTR [RIP+.L_42e330]
            xor EDX,EDX
            call .L_4063f0

            mov RDI,RBX
            pop RBX
            jmp .L_42e1f0
.L_42e25b:

            nop
            nop
            nop
            nop
            nop
.L_42e260:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402c30

            add RSP,8
            mov RDI,RAX
            jmp .L_42e220
.L_42e27a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e280:

            test RSI,RSI
            je .L_42e2e0

            movzx EAX,BYTE PTR [RSI]
            lea EDX,DWORD PTR [RAX-11]
            movzx EAX,DL
            cmp DL,15
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8+4]
            ja .L_42e309

            movzx ECX,BYTE PTR [RSI+1]
            cmp CL,127
            je .L_42e2d8

            cmp CL,181
            mov EDX,65535
            jl .L_42e2d8
.L_42e2af:

            mov ECX,DWORD PTR [RDI]
            mov ESI,959
            shr ECX,2
            cmp ECX,959
            cmova ECX,ESI
            imul EAX,ECX
            add ECX,1
            add EAX,EDX
            xor EDX,EDX
            div ECX
            mov WORD PTR [R8+4],AX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e2d8:

            xor EDX,EDX
            jmp .L_42e2af
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e2e0:

            movzx EAX,BYTE PTR [RDI]
            mov EDX,EAX
            and EDX,3
            cmp DL,3
            je .L_42e300

            add EDX,1
            and EAX,4294967292
            and EDX,3
            or EAX,EDX
            mov BYTE PTR [RDI],AL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e300:

            and EAX,4294967292
            mov BYTE PTR [RDI],AL
            add DWORD PTR [RDI],4
            ret 
.L_42e309:

            lea RCX,QWORD PTR [RIP+.L_42e380]
            lea RSI,QWORD PTR [RIP+.L_42e342]
            lea RDI,QWORD PTR [RIP+.L_42e35c]
            sub RSP,8

            mov EDX,157
            call __assert_fail@PLT
.L_42e32c:

            nop
            nop
            nop
            nop
.L_42e330:

            jmp .L_42e280
.L_42e335:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e340:

            ret 
.L_42e342:
          .string "utils/channel_monitor.cpp"
.L_42e35c:
          .string "channelIndex < kNumChannels"
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e380:
          .string "void ot::Utils::ChannelMonitor::HandleEnergyScanResult(otEnergyScanResult*)"
# WARNING: found overlapping blocks at address 2e18a
# WARNING: found overlapping blocks at address 2e18e
          .zero 4
.L_42e3d0:
          .byte 0x0
          .byte 0x88
          .byte 0x88
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x11
          .byte 0x1
          .byte 0x0
          .byte 0x20
          .byte 0x22
          .byte 0x2
          .byte 0x0
          .byte 0x40
          .byte 0x44
          .byte 0x4
.L_42e3e0:

            mov EAX,129
            mov DWORD PTR [RDI+16],0
            mov WORD PTR [RDI],AX
            lea RAX,QWORD PTR [RIP+.L_42e6f0]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            ret 
.L_42e403:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e410:

            cmp WORD PTR [RDI],0
            je .L_42e428

            push RBX
            lea RBX,QWORD PTR [RDI+8]
            cmp RBX,QWORD PTR [RDI+24]
            je .L_42e430

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
.L_42e425:

            add BYTE PTR [RAX],R8B
.L_42e428:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e430:

            call .L_401240

            mov RDI,RBX
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_42e445:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e450:

            add RDI,8
            jmp .L_433690
.L_42e459:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e460:

            test SI,SI
            mov WORD PTR [RDI],SI
            je .L_42e478

            push RBX
            lea RBX,QWORD PTR [RDI+8]
            cmp RBX,QWORD PTR [RDI+24]
            je .L_42e480

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e478:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e480:

            call .L_401240

            mov RDI,RBX
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_433770
.L_42e495:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e4a0:

            push RBX
            sub RSP,16
.L_42e4a5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RSI+78]
            and EAX,3
            cmp AL,3
            jne .L_42e520

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,1
            mov RBX,RDI
            mov RDI,RSI
            xor ESI,ESI
            call .L_4038b0

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            movzx EDX,BYTE PTR [RSP+6]
            cmp DL,BYTE PTR [RSP+7]
            jae .L_42e520

            mov RCX,RDX
            shl RCX,4
            add RDX,RCX
            lea RAX,QWORD PTR [RAX+RDX*8]
.L_42e509:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42e524

            add RSP,16
.L_42e51d:

            pop RBX
            ret 
          .byte 0x90
.L_42e520:

            xor EAX,EAX
            jmp .L_42e509
.L_42e524:

            call __stack_chk_fail@PLT
.L_42e529:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e530:

            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            test WORD PTR [RBX+126],8191
            je .L_42e578
.L_42e558:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42e612

            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e578:

            mov RDI,RAX
            mov RBP,RAX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            mov EDX,1
            mov ESI,3
            call .L_403790

            test RAX,RAX
            mov R12,RAX
            je .L_42e558

            lea RDI,QWORD PTR [RBP+2568]
            mov RSI,RBX
            call .L_41e310

            lea RSI,QWORD PTR [RSP+7]
            mov EDX,1
            mov RDI,R12
            mov BYTE PTR [RSP+7],AL
            call .L_403d80

            test EAX,EAX
            je .L_42e5d8
.L_42e5ca:

            mov RDI,R12
            call .L_403400

            jmp .L_42e558
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e5d8:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_40fdb0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42e608

            lea RDI,QWORD PTR [RBP+2256]
            mov RSI,R12
            call .L_414610
.L_42e5fa:

            test EAX,EAX
            jne .L_42e5ca

            jmp .L_42e558
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e608:

            mov RSI,R12
            mov RDI,RBP
            call RAX

            jmp .L_42e5fa
.L_42e612:

            call __stack_chk_fail@PLT
.L_42e617:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e620:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_42e62b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            cmp BYTE PTR [RSP+7],0
            je .L_42e6a6

            mov RBX,RAX
            xor EBP,EBP
            nop
            nop
            nop
.L_42e660:

            movzx EDX,BYTE PTR [RBX+26]
            mov EAX,EDX
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_42e675

            cmp AL,1
            jne .L_42e695
.L_42e675:

            movzx EAX,WORD PTR [RBX+128]
            add EAX,1
            mov WORD PTR [RBX+128],AX
            cmp AX,WORD PTR [R12]
            jb .L_42e695

            shr DL,3
            and EDX,8
            je .L_42e6d8
.L_42e695:

            add EBP,1
            add RBX,136
            cmp BYTE PTR [RSP+7],BPL
            ja .L_42e660
.L_42e6a6:

            call .L_401240

            lea RDI,QWORD PTR [R12+8]
            mov ESI,EAX
            mov EDX,1000
            call .L_433770

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42e6e5

            add RSP,16
.L_42e6d0:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e6d8:

            mov RSI,RBX
            mov RDI,R12
            call .L_42e530

            jmp .L_42e695
.L_42e6e5:

            call __stack_chk_fail@PLT
.L_42e6ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e6f0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402c10

            cmp WORD PTR [RAX],0
            jne .L_42e710

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e710:

            mov RDI,RAX
            add RSP,8
            jmp .L_42e620
.L_42e71c:

            nop
            nop
            nop
            nop
.L_42e720:

            xor EAX,EAX
            mov WORD PTR [RSI+128],AX
            ret 
.L_42e72a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e730:

            cmp WORD PTR [RDI],0
            jne .L_42e740

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e740:

            jmp .L_42e620
.L_42e745:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e750:

            add RDI,8
            jmp .L_433690
.L_42e759:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e760:

            push RBP
            push RBX
            mov RBX,RDI
            lea RBP,QWORD PTR [RBX+8]
            sub RSP,8
            call .L_433510

            cmp WORD PTR [RBX],0
            je .L_42e782

            mov EDX,DWORD PTR [RAX+2580]
            test EDX,EDX
            jne .L_42e790
.L_42e782:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_433690
.L_42e790:

            lea RDI,QWORD PTR [RAX+2256]
            call .L_440c50

            test AL,AL
            jne .L_42e782

            movzx EBX,WORD PTR [RBX]
            call .L_401240

            add RSP,8
            mov RDI,RBP
            mov ESI,EAX
            imul EBX,EBX,1000
            mov EDX,EBX
            pop RBX
            pop RBP
            jmp .L_433770
.L_42e7c0:

            jmp .L_42e760
.L_42e7c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e7d0:

            cmp WORD PTR [RDI],SI
            je .L_42e7e0

            mov WORD PTR [RDI],SI
            jmp .L_42e760
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e7e0:

            ret 
.L_42e7e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e7f0:

            lea RAX,QWORD PTR [RIP+.L_42e8d0]
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            mov EAX,190
            mov WORD PTR [RDI],AX
            jmp .L_42e760
.L_42e817:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e820:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            call .L_433510

            lea RCX,QWORD PTR [RBX+8]
            cmp QWORD PTR [RBX+24],RCX
            je .L_42e849

            test BPL,BPL
            je .L_42e849

            cmp DWORD PTR [RAX+2580],2
            je .L_42e850
.L_42e849:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_42e850:

            lea RBP,QWORD PTR [RAX+2568]
            mov RSI,R12
            mov RDI,RBP
            call .L_41e5d0

            mov RDI,RBP
            mov R12,RAX
            call .L_41c0c0

            cmp R12,RAX
            jne .L_42e849

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_42e760
.L_42e87e:

            nop
            nop
.L_42e880:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_433510

            cmp DWORD PTR [RAX+2580],2
            je .L_42e8a8
.L_42e897:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_42e760
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e8a8:

            lea RDI,QWORD PTR [RAX+2256]
            mov RBP,RAX
            call .L_440c50

            test AL,AL
            jne .L_42e897

            lea RDI,QWORD PTR [RBP+2568]
            call .L_41aca0

            jmp .L_42e897
.L_42e8c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e8d0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402c20

            add RSP,8
            mov RDI,RAX
            jmp .L_42e880
.L_42e8ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e8f0:

            lea RAX,QWORD PTR [RIP+.L_42ec10]
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov BYTE PTR [RDI+16],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RDI+48],0
            mov DWORD PTR [RDI+56],0
            or BYTE PTR [RDI+62],63
            mov QWORD PTR [RDI+40],RAX
            xor EAX,EAX
            mov BYTE PTR [RDI+63],63
            mov WORD PTR [RDI+60],AX
            and BYTE PTR [RDI+64],254
            ret 
.L_42e93f:

            nop
.L_42e940:

            movzx ECX,BYTE PTR [RDI+63]
            mov EAX,24
            test CL,64
            jne .L_42e9a8

            test RSI,RSI
            mov EAX,7
            je .L_42e9a8

            push RBX

            or ECX,64
            mov RBX,RDI
            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDX
            mov BYTE PTR [RDI+63],CL
            call .L_401240

            or BYTE PTR [RBX+63],128
            and BYTE PTR [RBX+64],254
            mov DWORD PTR [RBX+56],EAX
            mov EAX,256
            mov QWORD PTR [RBX+48],0
            mov WORD PTR [RBX+60],AX
            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,EAX
            mov EDX,2
            call .L_433770

            xor EAX,EAX
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e9a8:

            ret 
.L_42e9aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42e9b0:

            movzx EDX,BYTE PTR [RDI+63]
            test DL,64
            je .L_42e9e0

            sub RSP,8
            and BYTE PTR [RDI+64],254
            and EDX,4294967231
            mov BYTE PTR [RDI+63],DL
            add RDI,24
            call .L_433690

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e9e0:

            mov EAX,24
            ret 
.L_42e9e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e9f0:

            mov BYTE PTR [RDI+16],SIL
            xor EAX,EAX
            ret 
.L_42e9f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ea00:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp DL,62
            jbe .L_42ea10

            ret 
          .byte 0x90
.L_42ea10:

            movzx EAX,BYTE PTR [RDI+62]
            and ESI,63
            and EAX,4294967232
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+62],SIL
            ret 
.L_42ea23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ea30:

            test SIL,SIL
            mov EAX,7
            je .L_42ea58

            movzx EDX,BYTE PTR [RDI+62]
            and EDX,63
            cmp DL,SIL
            jb .L_42ea58

            movzx EAX,BYTE PTR [RDI+63]
            and ESI,63
            and EAX,4294967232
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+63],SIL
.L_42ea58:

            ret 
.L_42ea5a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42ea60:

            movzx ECX,BYTE PTR [RDI+62]
            movzx ESI,BYTE PTR [RDI+64]
            mov RAX,-1
            mov R8,RDI
            and ECX,63
            and ESI,1
            shl RAX,CL
            xor ECX,ECX
            not RAX
            and RAX,QWORD PTR [RDI+48]
            je .L_42ea9c

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ea90:

            lea RDX,QWORD PTR [RAX-1]
            add ECX,1
            and RAX,RDX
            jne .L_42ea90
.L_42ea9c:

            movzx EAX,BYTE PTR [R8+63]
            and EAX,63
            cmp AL,CL
            movzx EAX,BYTE PTR [R8+64]
            setbe DIL
            and EAX,4294967294
            or EAX,EDI
            test DIL,DIL
            mov BYTE PTR [R8+64],AL
            jne .L_42eac2

            test SIL,SIL
            je .L_42eacd
.L_42eac2:

            mov RSI,QWORD PTR [R8+8]
            movzx EDI,DIL
            jmp QWORD PTR [R8]
.L_42eacd:

            ret 
.L_42eacf:

            nop
.L_42ead0:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_42eadb:

            call .L_401240

            test BPL,BPL
            jne .L_42eae9

            and BYTE PTR [RBX+63],127
.L_42eae9:

            mov EDX,DWORD PTR [RBX+56]
            sub EAX,EDX
            cmp EAX,999
            jbe .L_42eb50

            mov RSI,QWORD PTR [RBX+48]
            cmp BYTE PTR [RBX+63],0
            lea RCX,QWORD PTR [RSI+RSI*1]
            mov QWORD PTR [RBX+48],RCX
            js .L_42eb40
.L_42eb07:

            or BYTE PTR [RBX+63],128
            add EDX,1000
            jmp .L_42eb1a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42eb18:

            mov EDX,ECX
.L_42eb1a:

            sub EAX,1000
            lea ECX,DWORD PTR [RDX+1000]
            cmp EAX,999
            ja .L_42eb18

            mov DWORD PTR [RBX+56],EDX
            add RSP,8
.L_42eb33:

            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_42ea60
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42eb40:

            or RCX,1
            mov QWORD PTR [RBX+48],RCX
            jmp .L_42eb07
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42eb50:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42eb57:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42eb60:

            push R12
            push RBP
            push RBX
.L_42eb64:

            mov RBX,RDI
            call .L_4334e0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            jne .L_42ebc0
.L_42eb78:

            movzx EBP,WORD PTR [RBX+60]
            shr BP,1
            cmp BP,1
            jbe .L_42ebb0

            mov WORD PTR [RBX+60],BP
            movzx EBP,BP
.L_42eb8c:

            call .L_401460

            and EAX,3
            add EBP,EAX
            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,EBP
            mov ESI,EAX
            pop RBX
.L_42eba4:

            pop RBP
            pop R12
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ebb0:

            mov EAX,2
            mov EBP,2
            mov WORD PTR [RBX+60],AX
            jmp .L_42eb8c
.L_42ebc0:

            movzx R12D,BYTE PTR [RBX+16]
            xor ESI,ESI
            mov EBP,EAX
            mov RDI,RBX
            cmp AL,R12B
            setge SIL
            call .L_42ead0

            cmp BPL,R12B
            jge .L_42eb78

            mov EDX,256
            mov EBP,256
            mov WORD PTR [RBX+60],DX
            jmp .L_42eb8c
.L_42ebed:

            nop
            nop
            nop
.L_42ebf0:

            test BYTE PTR [RDI+63],64
            jne .L_42ec00

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ec00:

            jmp .L_42eb60
.L_42ec05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ec10:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402c00

            test BYTE PTR [RAX+63],64
            jne .L_42ec30

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ec30:

            mov RDI,RAX
            add RSP,8
            jmp .L_42eb60
.L_42ec3c:

            nop
            nop
            nop
            nop
.L_42ec40:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RSI
            mov RBX,RDX
            mov R12,RSI
            sub RSP,8
            call strlen@PLT

            test RBX,RBX
            mov RBP,RAX
            je .L_42ec79

            sub RBX,1
            cmp RAX,RBX
            cmovbe RBX,RAX
            test RBX,RBX
            jne .L_42ec90
.L_42ec73:

            mov BYTE PTR [R13+RBX*1],0
.L_42ec79:

            add RSP,8
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ec90:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call memcpy@PLT

            jmp .L_42ec73
.L_42eca0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            sub RSP,104
.L_42ecb4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            mov EAX,EDX
            mov QWORD PTR [RSP+32],RCX
            mov QWORD PTR [RSP+40],R8
            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            lea RBX,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+60]
            je .L_42ed59

            mov RAX,QWORD PTR [RSP+8]
            lea RBX,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+60]
            mov RBP,RSI
            shl RAX,5
            add RAX,RSI
            mov R15,RAX
.L_42ed00:

            test BYTE PTR [RBP+17],2
            je .L_42ed50

            mov DWORD PTR [RSP+60],0
            nop
            nop
.L_42ed10:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R12
            call .L_42f620

            test EAX,EAX
            jne .L_42ee60

            test BYTE PTR [RSP+81],8
            je .L_42ed10

            mov RSI,RBP
            mov RDI,RBX
            call .L_401820

            movzx EDX,BYTE PTR [RSP+80]
            cmp DL,AL
            ja .L_42ed10

            cmp DL,BYTE PTR [RBP+16]
            jne .L_42ed10

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ed50:

            add RBP,32
            cmp RBP,R15
            jne .L_42ed00
.L_42ed59:

            mov RBP,QWORD PTR [RSP+8]
            mov DWORD PTR [RSP+60],0
            shl RBP,5
            add RBP,R14
            nop
            nop
            nop
.L_42ed70:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R12
            call .L_42f620

            test EAX,EAX
            jne .L_42eeb0

            test BYTE PTR [RSP+81],8
            je .L_42ed70

            cmp QWORD PTR [RSP+8],0
            je .L_42ed70

            mov R15,R14
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42eda0:

            test BYTE PTR [R15+17],2
            je .L_42edc1

            mov RSI,R15
            mov RDI,RBX
            call .L_401820

            movzx ECX,BYTE PTR [RSP+80]
            cmp CL,AL
            ja .L_42edc1

            cmp CL,BYTE PTR [R15+16]
            je .L_42ed70
.L_42edc1:

            add R15,32
            cmp RBP,R15
            jne .L_42eda0

            test BYTE PTR [R14+17],2
            mov R8,R14
            jne .L_42ee88
.L_42edd8:

            pxor XMM0,XMM0
            mov QWORD PTR [R8+24],0
            lea RCX,QWORD PTR [R8+8]
            mov RSI,R8
            mov QWORD PTR [RSP+16],R8
            mov RDI,R12
            mov QWORD PTR [RSP+24],RCX
            movups XMMWORD PTR [R8+8],XMM0
            mov RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [R8],RAX
            movzx EAX,BYTE PTR [RSP+80]
            mov BYTE PTR [R8+16],AL
            movzx EAX,BYTE PTR [RSP+81]
            shr AL,2
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [R8+17]
            and EAX,4294967294
            or EAX,EDX
            mov RDX,QWORD PTR [RSP+40]
            or EAX,2
            mov BYTE PTR [R8+17],AL
            mov RAX,QWORD PTR [RSP+32]
            call RAX

            test EAX,EAX
            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            jne .L_42eecf
.L_42ee4a:

            mov RSI,R8
            mov RDI,R12
            call .L_401680

            jmp .L_42ed70
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ee60:

            mov RSI,RBP
            mov RDI,R12
            call .L_401690

            and BYTE PTR [RBP+17],253
            add RBP,32
            cmp RBP,R15
            jne .L_42ed00

            jmp .L_42ed59
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ee88:

            xor EAX,EAX
.L_42ee8a:

            add RAX,1
            cmp QWORD PTR [RSP+8],RAX
            je .L_42ed70

            mov R8,RAX
            shl R8,5
            add R8,R14
            test BYTE PTR [R8+17],2
            je .L_42edd8

            jmp .L_42ee8a
.L_42eeb0:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ef0a

            add RSP,104
.L_42eec4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42eecf:

            lea RAX,QWORD PTR [R8+16]
            mov R15,RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42eee0:

            add RCX,1
            mov QWORD PTR [RSP+24],R8
            mov QWORD PTR [RSP+16],RCX
            call .L_401460

            mov RCX,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+24]
            cmp RCX,R15
            mov BYTE PTR [RCX-1],AL
            jne .L_42eee0

            jmp .L_42ee4a
.L_42ef0a:

            call __stack_chk_fail@PLT
.L_42ef0f:

            nop
.L_42ef10:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RSI+16]
            lea RBX,QWORD PTR [RSI+8]
            sub RSP,8
            nop
            nop
.L_42ef20:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42ef20

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42ef3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42ef40:

            push RBX
            mov RDI,RSI
            mov RBX,RDX
            call .L_401670

            test RAX,RAX
            je .L_42ef90

            mov RDI,QWORD PTR [RBX]
            mov RSI,QWORD PTR [RBX+8]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ef60:

            mov RCX,QWORD PTR [RAX+8]
            mov RDX,QWORD PTR [RAX]
            xor RCX,RSI
            xor RDX,RDI
            or RCX,RDX
            jne .L_42ef80

            mov EAX,1
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ef80:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_42ef60

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ef90:

            xor EAX,EAX
            pop RBX
            ret 
.L_42ef94:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42efa0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RDX
            sub RSP,168
.L_42efb6:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_42efcf:

            call .L_434830
.L_42efd4:

            mov RDI,RBX
.L_42efd7:

            call .L_434850

            movzx EDX,BYTE PTR [R12+16]
            mov RSI,R12
            mov RDI,RBX
            shr DL,3
            movzx EDX,DL
            call .L_434860

            mov RSI,QWORD PTR [RBP]
            test RSI,RSI
            je .L_42f090

            movzx EDX,BYTE PTR [RBP+8]
            mov RDI,RBX
            call .L_434860

            movzx EDX,BYTE PTR [RBP+24]
            test DL,DL
            je .L_42f025

            mov RSI,QWORD PTR [RBP+16]
            test RSI,RSI
            je .L_42f090

            mov RDI,RBX
            call .L_434860
.L_42f025:

            lea RSI,QWORD PTR [RBP+25]
            mov EDX,1
            mov RDI,RBX
            call .L_434860

            mov RSI,QWORD PTR [RBP+32]
            test RSI,RSI
            je .L_42f090

            movzx EDX,WORD PTR [RBP+40]
            mov RDI,RBX
            call .L_434860

            lea RSI,QWORD PTR [RSP+112]
            mov RDI,RBX
            call .L_434870

            mov RAX,QWORD PTR [RSP+136]
            mov RDX,R12
            mov RSI,R13
            mov RDI,RBP
            mov QWORD PTR [R12+8],RAX
            call .L_42ef40

            test AL,AL
            jne .L_42f085

            mov RDI,R12
            call .L_410130
.L_42f07f:

            xor EBP,EBP
            test AL,AL
            je .L_42f095
.L_42f085:

            mov EBP,26
            jmp .L_42f095
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f090:

            mov EBP,7
.L_42f095:

            mov RDI,RBX
.L_42f098:

            call .L_434840
.L_42f09d:

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_42f0c0

            add RSP,168
.L_42f0b9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42f0c0:

            call __stack_chk_fail@PLT
.L_42f0c5:

            mov RBP,RAX
            mov RDI,RBX
            call .L_434840

            mov RDI,RBP
.L_42f0d3:

            call _Unwind_Resume@PLT
.L_42f0d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f0e0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RDI
            mov EBP,256
            sub RSP,8
            jmp .L_42f109
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f100:

            add BYTE PTR [RBX+25],1
            sub EBP,1
            je .L_42f11c
.L_42f109:

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_42efa0

            cmp EAX,26
            je .L_42f100
.L_42f11c:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42f127:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f130:

            cmp BYTE PTR [RDI+20840],0
            mov EAX,13
            jne .L_42f147

            mov BYTE PTR [RDI+24336],SIL
            xor EAX,EAX
.L_42f147:

            ret 
.L_42f149:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f150:

            movzx EAX,BYTE PTR [RDI+24336]
            ret 
.L_42f158:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f160:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f180

            sub RSP,8
            movzx ESI,SI
            call .L_4012e0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f180:

            mov EAX,13
            ret 
.L_42f186:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f190:

            sub RSP,24
.L_42f194:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+24336],0
            mov EAX,13
            je .L_42f1db

            lea RDX,QWORD PTR [RSI+7]
            xor EAX,EAX
            mov RSI,RSP
            nop
            nop
            nop
            nop
            nop
.L_42f1c0:

            movzx ECX,BYTE PTR [RDX]
            sub RDX,1
            mov BYTE PTR [RSI+RAX*1],CL
            add RAX,1
            cmp RAX,8
            jne .L_42f1c0

            call .L_4012f0

            xor EAX,EAX
.L_42f1db:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_42f1f0

            add RSP,24
.L_42f1ef:

            ret 
.L_42f1f0:

            call __stack_chk_fail@PLT
.L_42f1f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f200:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f220

            sub RSP,8
            movzx ESI,SI
            call .L_401300

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f220:

            mov EAX,13
            ret 
.L_42f226:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f230:

            jmp .L_4013b0
.L_42f235:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f240:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f260

            sub RSP,8
            movzx ESI,SIL
            call .L_401310

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f260:

            mov EAX,13
            ret 
.L_42f266:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f270:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f280

            jmp .L_401350
          .byte 0x66
          .byte 0x90
.L_42f280:

            mov EAX,13
            ret 
.L_42f286:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f290:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f2c0

            mov BYTE PTR [RDI+24337],SIL
            mov QWORD PTR [RDI+24344],RDX
            movzx ESI,SIL
            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_401360
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f2c0:

            mov EAX,13
            ret 
.L_42f2c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f2d0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f2e0

            jmp .L_401380
          .byte 0x66
          .byte 0x90
.L_42f2e0:

            xor EAX,EAX
            ret 
.L_42f2e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f2f0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f310

            mov QWORD PTR [RDI+24352],RDX
            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_401370
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f310:

            mov EAX,13
            ret 
.L_42f316:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f320:

            jmp .L_401390
.L_42f325:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f330:

            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_4013a0
.L_42f33c:

            nop
            nop
            nop
            nop
.L_42f340:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f368

            mov QWORD PTR [RDI+24360],RCX
            mov RDI,QWORD PTR [RDI+24328]
            movzx EDX,DX
            movzx ESI,SIL
            jmp .L_401430
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f368:

            mov EAX,13
            ret 
.L_42f36e:

            nop
            nop
.L_42f370:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f390

            sub RSP,8
            movzx ESI,SIL
            call .L_4013c0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f390:

            mov EAX,13
            ret 
.L_42f396:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f3a0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f3b8

            movzx ESI,SI
            jmp .L_4013d0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f3b8:

            mov EAX,13
            ret 
.L_42f3be:

            nop
            nop
.L_42f3c0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f3d0

            jmp .L_4013e0
          .byte 0x66
          .byte 0x90
.L_42f3d0:

            mov EAX,13
            ret 
.L_42f3d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f3e0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f3f8

            movzx ESI,SI
            jmp .L_4013f0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f3f8:

            mov EAX,13
            ret 
.L_42f3fe:

            nop
            nop
.L_42f400:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f410

            jmp .L_401400
          .byte 0x66
          .byte 0x90
.L_42f410:

            mov EAX,13
            ret 
.L_42f416:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f420:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f440

            sub RSP,8
            call .L_401410

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f440:

            mov EAX,13
            ret 
.L_42f446:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f450:

            cmp BYTE PTR [RDI+24336],0
            je .L_42f470

            sub RSP,8
            call .L_401420

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f470:

            mov EAX,13
            ret 
.L_42f476:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f480:

            mov QWORD PTR [RDI],RSI
            mov BYTE PTR [RDI+8],0
            mov BYTE PTR [RDI+9],11
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],0
            mov RDI,RSI
            jmp .L_4013a0
.L_42f4ab:

            nop
            nop
            nop
            nop
            nop
.L_42f4b0:

            mov RDI,QWORD PTR [RDI]
            jmp .L_4013a0
.L_42f4b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f4c0:

            cmp BYTE PTR [RDI+8],0
            je .L_42f4e0

            mov BYTE PTR [RDI+9],SIL
            mov QWORD PTR [RDI+16],RDX
            movzx ESI,SIL
            mov RDI,QWORD PTR [RDI]
            jmp .L_401360
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f4e0:

            mov EAX,13
            ret 
.L_42f4e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f4f0:

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            je .L_42f500

            mov RDI,QWORD PTR [RDI]
            jmp RAX
          .byte 0x66
          .byte 0x90
.L_42f500:

            ret 
.L_42f502:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f510:

            cmp BYTE PTR [RDI+8],0
            je .L_42f528

            mov QWORD PTR [RDI+24],RDX
            mov RDI,QWORD PTR [RDI]
            jmp .L_401370
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f528:

            mov EAX,13
            ret 
.L_42f52e:

            nop
            nop
.L_42f530:

            mov RDI,QWORD PTR [RDI]
            jmp .L_401370
.L_42f538:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f540:

            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov R12,RDX
            sub RSP,8
            movzx ESI,BYTE PTR [RDI+9]
            mov RDI,QWORD PTR [RDI]
            call .L_401360

            mov RAX,QWORD PTR [RBX+24]
            test RAX,RAX
            je .L_42f581

            mov ECX,R13D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,QWORD PTR [RBX]
            call RAX

            mov QWORD PTR [RBX+24],0
.L_42f581:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42f58c:

            nop
            nop
            nop
            nop
.L_42f590:

            cmp BYTE PTR [RDI+8],0
            je .L_42f5b0

            mov QWORD PTR [RDI+32],RCX
            mov RDI,QWORD PTR [RDI]
            movzx EDX,DX
            movzx ESI,SIL
            jmp .L_401430
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f5b0:

            mov EAX,13
            ret 
.L_42f5b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f5c0:

            mov RAX,QWORD PTR [RDI+32]
            test RAX,RAX
            je .L_42f5e0

            push RBX
            mov RBX,RDI
            movsx ESI,SIL
            mov RDI,QWORD PTR [RDI]
            call RAX

            mov QWORD PTR [RBX+32],0
            pop RBX
            ret 
.L_42f5e0:

            ret 
.L_42f5e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f5f0:

            test RDX,RDX
            je .L_42f610

            test RCX,RCX
            je .L_42f610

            movzx ESI,SIL
            add RDI,20240
            jmp .L_427890
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f610:

            mov EAX,7
            ret 
.L_42f616:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f620:

            test RSI,RSI
            je .L_42f640

            test RDX,RDX
            je .L_42f640

            add RDI,20240
            jmp .L_426540
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f640:

            mov EAX,7
            ret 
.L_42f646:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f650:

            test RSI,RSI
            je .L_42f670

            test RDX,RDX
            je .L_42f670

            add RDI,20240
            jmp .L_426850
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f670:

            mov EAX,7
            ret 
.L_42f676:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f680:

            sub RSP,8
            add RDI,15288
            call .L_417430

            movzx EAX,BYTE PTR [RAX+7]
            add RSP,8
            ret 
.L_42f699:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f6a0:

            sub RSP,8
            add RDI,15288
            call .L_417430

            movzx EAX,BYTE PTR [RAX+8]
            add RSP,8
            ret 
.L_42f6b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f6c0:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            jne .L_42f6d0

            pop RBX
            ret 
          .byte 0x90
.L_42f6d0:

            lea RDI,QWORD PTR [RBX+80]
            pop RBX
            jmp .L_4052e0
.L_42f6da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42f6e0:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            je .L_42f6f5

            cmp QWORD PTR [RBX+80],0
            setne AL
.L_42f6f5:

            pop RBX
            ret 
.L_42f6f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f700:

            ret 
.L_42f702:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f710:

            mov RAX,QWORD PTR [RDI]
            jmp QWORD PTR [RAX+8]
.L_42f716:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f720:

            add RDI,8
            jmp .L_411ba0
.L_42f729:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f730:

            lea RAX,QWORD PTR [RIP+.L_6768f8]
            push R12
            push RBP
            push RBX
.L_42f73b:

            mov RBX,RDI
            mov R12,RDX
            mov QWORD PTR [RDI],RAX
            lea RDI,QWORD PTR [RSI+12720]
            mov RBP,RCX
            call .L_4334f0

            lea RDI,QWORD PTR [RBX+8]
            lea RSI,QWORD PTR [RAX+104]
            call .L_411a30

            lea RDI,QWORD PTR [RBX+80]
            call .L_404490

            lea RAX,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RBX+144]
            mov QWORD PTR [RBX+96],R12
            mov DWORD PTR [RBX+104],0
            mov QWORD PTR [RBX+120],0
            mov QWORD PTR [RBX+112],RAX
            mov QWORD PTR [RBX+128],0
            mov QWORD PTR [RBX+136],0
            call .L_404490

            lea RAX,QWORD PTR [RBX+152]
            mov QWORD PTR [RBX+152],RBP
            mov DWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+176],0
            mov QWORD PTR [RBX+184],0
            mov QWORD PTR [RBX+168],RAX
            call .L_401460

            mov WORD PTR [RBX+88],AX
            pop RBX
.L_42f7e5:

            pop RBP
            pop R12
            ret 
.L_42f7e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f7f0:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+8]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_42f801:

            mov RDI,RBX
            mov WORD PTR [RSP+16],SI
            lea RSI,QWORD PTR [RIP+.L_42f710]
            mov BYTE PTR [RSP+18],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP],XMM0
            call .L_411a60

            test EAX,EAX
            jne .L_42f840

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_411ac0
.L_42f840:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42f857

            add RSP,40
.L_42f854:

            pop RBX
            pop RBP
            ret 
.L_42f857:

            call __stack_chk_fail@PLT
.L_42f85c:

            nop
            nop
            nop
            nop
.L_42f860:

            mov RDX,QWORD PTR [RDI+120]
            test RDX,RDX
            je .L_42f886

            cmp RDX,RSI
            je .L_42f898

            mov RAX,RDX
            jmp .L_42f87d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f878:

            cmp RSI,RAX
            je .L_42f898
.L_42f87d:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_42f878
.L_42f886:

            mov QWORD PTR [RSI+24],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI+120],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f898:

            mov EAX,24
            ret 
.L_42f89e:

            nop
            nop
.L_42f8a0:

            mov RDX,QWORD PTR [RDI+120]
            cmp RDX,RSI
            je .L_42f8f8

            test RDX,RDX
            je .L_42f8d1

            mov RAX,QWORD PTR [RDX+24]
            cmp RAX,RSI
            jne .L_42f8cc

            jmp .L_42f8e0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f8c0:

            mov RDX,QWORD PTR [RAX+24]
            cmp RDX,RSI
            je .L_42f8e3

            mov RAX,RDX
.L_42f8cc:

            test RAX,RAX
            jne .L_42f8c0
.L_42f8d1:

            mov QWORD PTR [RSI+24],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f8e0:

            mov RAX,RDX
.L_42f8e3:

            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RSI+24],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f8f8:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI+120],RAX
            mov QWORD PTR [RSI+24],0
            ret 
.L_42f909:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f910:

            mov QWORD PTR [RDI+176],RSI
            mov QWORD PTR [RDI+184],RDX
            ret 
.L_42f91f:

            nop
.L_42f920:

            push R12
            push RBP
            push RBX
.L_42f924:

            movzx EAX,BYTE PTR [RSI+128]
            cmp AL,3
            jbe .L_42f980

            add RDI,8
            mov RBX,RSI
            movzx ESI,AL
            mov EBP,EDX
            call .L_411a40

            test RAX,RAX
            mov R12,RAX
            je .L_42f970

            movzx EDX,BYTE PTR [RBX+128]
            mov RSI,RBX
            mov RDI,RAX
            call .L_403df0

            xor ESI,ESI
            mov RDI,R12
            call .L_4035a0

            movzx ESI,BPL
            mov RDI,R12
            call .L_4035e0
.L_42f970:

            mov RAX,R12
            pop RBX
.L_42f974:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f980:

            xor R12D,R12D
            mov RAX,R12
            pop RBX
            pop RBP
            pop R12
            ret 
.L_42f98b:

            nop
            nop
            nop
            nop
            nop
.L_42f990:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,184
.L_42f99d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            test BYTE PTR [RDX],48
            mov EAX,7
            jne .L_42fa2d

            lea R12,QWORD PTR [RSP+16]
            mov RBP,RDX
            mov RBX,RDI
            xor EDX,EDX
            mov R13,RCX
            mov RDI,R12
            call .L_431360

            movzx EAX,WORD PTR [RBP+2]
            mov EDX,2
            mov RSI,R12
            mov RDI,RBX
            mov WORD PTR [RSP+18],AX
            call .L_42f920

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_42fa2d

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_42f720]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42fa50

            lea RDI,QWORD PTR [RBX+8]
            mov RDX,R13
            mov RSI,RBP
            call .L_411ba0
.L_42fa19:

            test EAX,EAX
            je .L_42fa2d

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_42fa2d:

            mov RCX,QWORD PTR [RSP+168]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42fa5d

            add RSP,184
.L_42fa47:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_42fa50:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call RAX

            jmp .L_42fa19
.L_42fa5d:

            call __stack_chk_fail@PLT
.L_42fa62:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fa70:

            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RSI
            movzx ESI,DX
            sub RSP,8
.L_42fa86:

            call .L_404070

            test RAX,RAX
            mov RBX,RAX
            je .L_42facc

            mov EDX,60
            mov RSI,R12
            mov RDI,RAX
            call .L_403d80

            test EAX,EAX
            jne .L_42fae0

            lea R13,QWORD PTR [RBP+96]
            cmp R13,QWORD PTR [RBP+112]
            je .L_42fb00

            mov EAX,DWORD PTR [R12+50]
            cmp DWORD PTR [RBP+104],EAX
            jns .L_42fb00
.L_42fabb:

            lea RDI,QWORD PTR [RBP+80]
            mov EDX,1
            mov RSI,RBX
            call .L_4045d0
.L_42facc:

            add RSP,8
.L_42fad0:

            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42fae0:

            mov RDI,RBX
            xor EBX,EBX
            call .L_403400

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fb00:

            mov R12D,DWORD PTR [R12+54]
            call .L_401240

            mov RDI,R13
            mov ESI,EAX
            mov EDX,R12D
            call .L_433770

            jmp .L_42fabb
.L_42fb19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fb20:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+80]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RSI
            lea R13,QWORD PTR [RBX+96]
            sub RSP,8
            call .L_404690

            cmp R13,QWORD PTR [RBX+112]
            je .L_42fb53

            mov RDI,R12
            call .L_4045c0

            test RAX,RAX
            je .L_42fb68
.L_42fb53:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_403400
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42fb68:

            mov RDI,R13
            call .L_433690

            jmp .L_42fb53
.L_42fb72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fb80:

            push R14
            push R13
            mov R14,R9
            push R12
            push RBP
            mov R12,R8
            push RBX
            mov RBX,RDX
            mov RBP,RCX
            mov R13D,DWORD PTR [RSP+48]
            call .L_42fb20

            mov RAX,QWORD PTR [RBX+34]
            test RAX,RAX
            je .L_42fbc8

            mov RDI,QWORD PTR [RBX+42]
            mov R8D,R13D
            mov RCX,R14
            pop RBX
            mov RDX,R12
            mov RSI,RBP
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fbc8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42fbd1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fbe0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            add RDI,80
            push RBP
            push RBX
            mov RBP,RSI
            mov R13,RDX
            sub RSP,104
.L_42fbfb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            xor EAX,EAX
            and BYTE PTR [RSP+75],252
            mov QWORD PTR [RSP+48],0
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_4045c0

            test RAX,RAX
            je .L_42fd00

            mov R15,RAX
            mov DWORD PTR [RSP+12],23
            lea R12,QWORD PTR [RSP+16]
            jmp .L_42fc68
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fc60:

            test RBX,RBX
            mov R15,RBX
            je .L_42fcd8
.L_42fc68:

            mov RDI,R15
            call .L_403410

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R12
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_4038b0

            cmp QWORD PTR [RSP+50],RBP
            jne .L_42fc60

            cmp QWORD PTR [RSP+58],R13
            jne .L_42fc60

            mov RSI,R15
            mov RDI,R14
            call .L_42fb20

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_42fd0a

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov R8D,11
            mov RDI,QWORD PTR [RSP+58]
            mov R15,RBX
            call RAX

            test RBX,RBX
            mov DWORD PTR [RSP+12],0
            jne .L_42fc68

            nop
            nop
            nop
            nop
.L_42fcd8:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+12]
            jne .L_42fd17

            add RSP,104
.L_42fcf0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42fd00:

            mov DWORD PTR [RSP+12],23
            jmp .L_42fcd8
.L_42fd0a:

            mov DWORD PTR [RSP+12],0
            jmp .L_42fc60
.L_42fd17:

            call __stack_chk_fail@PLT
.L_42fd1c:

            nop
            nop
            nop
            nop
.L_42fd20:

            push R12
            push RBP
            mov R12,RDX
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,16
.L_42fd31:

            movzx EAX,WORD PTR [RSI+58]
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_404070

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_42fd72

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_42f720]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42fda0

            lea RDI,QWORD PTR [RBX+8]
            mov RDX,R12
            mov RSI,RBP
            call .L_411ba0
.L_42fd6e:

            test EAX,EAX
            jne .L_42fd80
.L_42fd72:

            add RSP,16
.L_42fd76:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42fd80:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fda0:

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call RAX

            jmp .L_42fd6e
.L_42fdad:

            nop
            nop
            nop
.L_42fdb0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,4294967295
            sub RSP,152
.L_42fdc9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_401240

            lea RDI,QWORD PTR [R14+80]
            mov R12D,EAX
            xor EAX,EAX
            and BYTE PTR [RSP+123],252
            mov QWORD PTR [RSP+96],0
            lea R13,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+104],0
            mov QWORD PTR [RSP+112],0
            mov WORD PTR [RSP+120],AX
            mov BYTE PTR [RSP+122],0
            call .L_4045c0

            pxor XMM0,XMM0
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+16]
            test R15,R15
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_42fe94

            jmp .L_42feea
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fe50:

            test BYTE PTR [RSP+123],2
            je .L_42fe64

            movzx EAX,BYTE PTR [RSP+122]
            cmp AL,3
            jbe .L_42ff18
.L_42fe64:

            mov RSI,R15
            mov RDI,R14
            call .L_42fb20

            mov RAX,QWORD PTR [RSP+98]
            test RAX,RAX
            je .L_42fe8c

            mov R8D,28
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+106]
            call RAX
.L_42fe8c:

            test RBX,RBX
            mov R15,RBX
            je .L_42fed3
.L_42fe94:

            mov RDI,R15
            call .L_403410

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R13
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_4038b0

            mov EAX,DWORD PTR [RSP+114]
            cmp R12D,EAX
            jns .L_42fe50

            sub EAX,R12D
            mov R15,RBX
            cmp EBP,EAX
            cmova EBP,EAX
            test RBX,RBX
            jne .L_42fe94
.L_42fed3:

            cmp EBP,-1
            je .L_42feea

            call .L_401240

            lea RDI,QWORD PTR [R14+96]
            mov EDX,EBP
            mov ESI,EAX
            call .L_433770
.L_42feea:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ffa4

            add RSP,152
.L_42ff08:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ff18:

            add EAX,1
            mov RCX,R13
            mov EDX,60
            mov BYTE PTR [RSP+122],AL
            mov EAX,DWORD PTR [RSP+118]
            mov RDI,R15
            add EAX,EAX
            mov DWORD PTR [RSP+118],EAX
            add EAX,R12D
            mov DWORD PTR [RSP+114],EAX
            movzx EAX,WORD PTR [R15+58]
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403b10

            mov EAX,DWORD PTR [RSP+118]
            cmp EBP,EAX
            cmova EBP,EAX
            test BYTE PTR [RSP+123],1
            jne .L_42fe8c

            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov RDI,R14
            movzx EAX,WORD PTR [RSP+96]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+64]
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_433510

            mov RSI,R15
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+24]
            mov RDX,QWORD PTR [RSP+8]
            mov BYTE PTR [RSP+52],AL
            call .L_42fd20

            jmp .L_42fe8c
.L_42ffa4:

            call __stack_chk_fail@PLT
.L_42ffa9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ffb0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b50

            add RSP,8
            mov RDI,RAX
            jmp .L_42fdb0
.L_42ffcd:

            nop
            nop
            nop
.L_42ffd0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b80

            add RSP,8
            mov RDI,RAX
            jmp .L_42fdb0
.L_42ffed:

            nop
            nop
            nop
.L_42fff0:

            push R15
            push R14
            add RDI,80
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,R8
            sub RSP,24
.L_43000b:

            mov QWORD PTR [RSP],RSI
            call .L_4045c0

            test RAX,RAX
            je .L_430150

            mov R15,RAX
            lea RAX,QWORD PTR [R14+4]
            lea RBP,QWORD PTR [RBX+16]
            lea R13,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_430058
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_430038:

            movzx EAX,WORD PTR [R12+34]
            cmp WORD PTR [RBX+32],AX
            je .L_4300b0
.L_430044:

            mov RDI,R15
            call .L_403410

            test RAX,RAX
            mov R15,RAX
            je .L_430150
.L_430058:

            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBX
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_4038b0

            mov RSI,R13
            mov RDI,RBP
            call .L_4103b0

            test AL,AL
            jne .L_430038

            mov RDI,RBP
            call .L_40ff70

            test AL,AL
            jne .L_430038

            mov RDI,RBP
            call .L_4100b0

            test AL,AL
            je .L_430044

            movzx EAX,WORD PTR [R12+34]
            cmp WORD PTR [RBX+32],AX
            jne .L_430044

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4300b0:

            mov EDX,60
            mov RSI,R15
            mov RDI,R14
            call .L_431390

            mov RAX,QWORD PTR [RSP]
            movzx EDX,BYTE PTR [RAX]
            mov EAX,EDX
            and EAX,48
            cmp AL,16
            je .L_430110

            jbe .L_430108

            cmp AL,32
            je .L_4300de

            cmp AL,48
            jne .L_430044
.L_4300de:

            mov RAX,QWORD PTR [RSP]
            movzx ECX,WORD PTR [R14+2]
            cmp WORD PTR [RAX+2],CX
            jne .L_430044
.L_4300f1:

            add RSP,24
.L_4300f5:

            mov RAX,R15
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430108:

            test AL,AL
            jne .L_430044
.L_430110:

            movzx EAX,BYTE PTR [R14]
            and EDX,15
            and EAX,15
            cmp DL,AL
            jne .L_430044

            mov RAX,QWORD PTR [RSP]
            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,DL
            lea RDI,QWORD PTR [RAX+4]
            call memcmp@PLT

            test EAX,EAX
            je .L_4300f1

            mov RDI,R15
            call .L_403410

            test RAX,RAX
            mov R15,RAX
            jne .L_430058

            nop
.L_430150:

            xor R15D,R15D
            jmp .L_4300f1
.L_430155:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430160:

            push R15
            push R14
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov RDI,RDX
            mov R13,RDX
            sub RSP,248
.L_430180:

            and BYTE PTR [RSP+75],252
            lea R15,QWORD PTR [RSP+16]
            lea R14,QWORD PTR [RSP+80]
            movzx ESI,BYTE PTR [RSI+128]
            mov QWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_403530

            mov R8,R15
            mov RCX,R14
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_42fff0

            test RAX,RAX
            je .L_4302a0

            movzx EDX,BYTE PTR [RBX]
            mov R8,RAX
            mov EAX,EDX
            and EAX,48
            cmp AL,16
            je .L_430271

            jbe .L_430250

            cmp AL,32
            je .L_4302c8

            cmp AL,48
            jne .L_430220

            cmp BYTE PTR [RBX+1],0
            je .L_430340

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430220:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4303a9

            add RSP,248
.L_43023e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430250:

            test AL,AL
            jne .L_430220

            mov RCX,R12
            mov RDX,RBX
            mov ESI,32
            mov RDI,RBP
            mov QWORD PTR [RSP+8],R8
            call .L_42f990
.L_43026c:

            mov R8,QWORD PTR [RSP+8]
.L_430271:

            mov RSI,R8
            mov RDI,RBP
            call .L_42fb20

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_430220

            xor R8D,R8D
            mov RCX,R12
            mov RDX,R13
            mov RSI,RBX
            mov RDI,QWORD PTR [RSP+58]
            call RAX

            jmp .L_430220
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4302a0:

            test BYTE PTR [RBX],32
            jne .L_430220

            mov RCX,R12
            mov RDX,RBX
            mov ESI,48
            mov RDI,RBP
            call .L_42f990

            jmp .L_430220
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4302c8:

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            jne .L_430300

            movzx EAX,BYTE PTR [RSP+75]
            test AL,2
            jne .L_430378
.L_4302dd:

            cmp QWORD PTR [RSP+50],0
            jne .L_430220

            mov RSI,R8
            mov RDI,RBP
            call .L_42fb20

            jmp .L_430220
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430300:

            cmp AL,63
            jbe .L_430220

            movzx EAX,BYTE PTR [RSP+80]
            and EDX,15
            and EAX,15
            cmp DL,AL
            jne .L_430220

            lea RSI,QWORD PTR [R14+4]
            lea RDI,QWORD PTR [RBX+4]
            movzx EDX,DL
            mov QWORD PTR [RSP+8],R8
            call memcmp@PLT

            test EAX,EAX
            jne .L_430220

            jmp .L_43026c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430340:

            mov RSI,R8
            mov RDI,RBP
            call .L_42fb20

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_430220

            mov R8D,11
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+58]
            call RAX

            jmp .L_430220
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430378:

            or EAX,1
            mov RDI,R8
            mov RCX,R15
            mov BYTE PTR [RSP+75],AL
            movzx EAX,WORD PTR [R8+58]
            mov EDX,60
            mov QWORD PTR [RSP+8],R8
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403b10

            mov R8,QWORD PTR [RSP+8]
            jmp .L_4302dd
.L_4303a9:

            call __stack_chk_fail@PLT
.L_4303ae:

            nop
            nop
.L_4303b0:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_4303bb:

            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RDI],XMM0
            movzx EAX,WORD PTR [RDX+34]
            mov WORD PTR [RDI+32],AX
            movdqu XMM0,XMMWORD PTR [RDX+16]
            mov QWORD PTR [RDI+34],RCX
            mov QWORD PTR [RDI+42],R8
            movups XMMWORD PTR [RDI+16],XMM0
            mov BYTE PTR [RDI+58],0
            mov DWORD PTR [RDI+54],2000
            call .L_401460

            mov EDX,98685563
            mov ECX,EAX
            mul EDX
            mov EAX,ECX
            sub EAX,EDX
            shr EAX,1
            add EDX,EAX
            shr EDX,9
            imul EDX,EDX,1001
            sub ECX,EDX
            add DWORD PTR [RBX+54],ECX
            test BPL,BPL
            jne .L_430438

            call .L_401240

            add EAX,93
            mov DWORD PTR [RBX+50],EAX
.L_43041a:

            movzx EAX,BYTE PTR [RBX+59]
            and EBP,1
            add EBP,EBP
            and EAX,4294967292
            or EBP,EAX
            mov BYTE PTR [RBX+59],BPL
            add RSP,8
.L_430430:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430438:

            call .L_401240

            add EAX,DWORD PTR [RBX+54]
            mov DWORD PTR [RBX+50],EAX
            jmp .L_43041a
.L_430445:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430450:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
            call .L_404490

            lea RAX,QWORD PTR [RBX+8]
            mov QWORD PTR [RBX+8],RBP
            mov DWORD PTR [RBX+16],0
            mov QWORD PTR [RBX+24],RAX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_43047b:

            nop
            nop
            nop
            nop
            nop
.L_430480:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDX
            pxor XMM0,XMM0
            sub RSP,296
.L_430498:

            lea RBX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RCX
            movups XMMWORD PTR [RSP+72],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            movups XMMWORD PTR [RBX+24],XMM0
            movups XMMWORD PTR [RBX+40],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            mov DWORD PTR [RSP+64],0
            call .L_4045c0

            test RAX,RAX
            je .L_4305d0

            mov R15,RAX
            lea R13,QWORD PTR [RBP+16]
            lea R12,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+128]
            jmp .L_43051c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430508:

            mov RDI,R15
            call .L_403410

            test RAX,RAX
            mov R15,RAX
            je .L_4305d0
.L_43051c:

            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBX
            mov EDX,56
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-56]
            movzx ESI,SI
            call .L_4038b0

            movdqu XMM0,XMMWORD PTR [RSP+72]
            movzx EAX,WORD PTR [RBP+34]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+88]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+104]
            movaps XMMWORD PTR [RSP+48],XMM0
            cmp WORD PTR [RSP+50],AX
            jne .L_430508

            mov RSI,R13
            mov RDI,R12
            call .L_4103d0

            test AL,AL
            jne .L_430508

            mov EDX,56
            mov RSI,R15
            mov RDI,R14
            call .L_431390

            test EAX,EAX
            jne .L_430508

            mov RAX,QWORD PTR [RSP]
            movzx EAX,WORD PTR [RAX+2]
            cmp WORD PTR [RSP+130],AX
            jne .L_430508

            movzx ESI,WORD PTR [R15+58]
            mov RDI,R15
            call .L_404070

            mov RBX,QWORD PTR [RSP+8]
            test RAX,RAX
            mov QWORD PTR [RBX],RAX
            je .L_430600

            movzx ECX,WORD PTR [RAX+58]
            mov RDI,RAX
            lea ESI,DWORD PTR [RCX-56]
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            jne .L_43060c

            xor EAX,EAX
            jmp .L_4305d5
.L_4305d0:

            mov EAX,23
.L_4305d5:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_430607

            add RSP,296
.L_4305ef:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430600:

            mov EAX,3
            jmp .L_4305d5
.L_430607:

            call __stack_chk_fail@PLT
.L_43060c:

            lea RCX,QWORD PTR [RIP+.L_431260]
            lea RSI,QWORD PTR [RIP+.L_4311e3]
            lea RDI,QWORD PTR [RIP+.L_4311f8]
            mov EDX,299
            call __assert_fail@PLT
.L_43062b:

            nop
            nop
            nop
            nop
            nop
.L_430630:

            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov RBP,RDI
            mov R13,RCX
            sub RSP,168
.L_430648:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_431390

            test EAX,EAX
            jne .L_43067b

            mov RCX,R13
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_430480
.L_43067b:

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43069c

            add RSP,168
.L_430695:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43069c:

            call __stack_chk_fail@PLT
.L_4306a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4306b0:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_4045c0

            test RAX,RAX
            je .L_4306e0

            mov RDI,RBP
            mov RSI,RAX
            mov RBX,RAX
            call .L_404690

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_403400
          .byte 0x90
.L_4306e0:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_4306e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4306f0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,240
.L_430704:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_401240

            movdqu XMM0,XMMWORD PTR [RBX]
            lea RDI,QWORD PTR [RSP+80]
            add EAX,247000
            xor EDX,EDX
            mov RSI,RBP
            movups XMMWORD PTR [RSP+24],XMM0
            mov DWORD PTR [RSP+16],EAX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [RSP+40],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movups XMMWORD PTR [RSP+56],XMM0
            call .L_431390

            test EAX,EAX
            je .L_430780
.L_430755:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43083d

            add RSP,240
.L_430773:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430780:

            lea RCX,QWORD PTR [RSP+8]
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_430630

            test EAX,EAX
            je .L_430820

            cmp EAX,23
            jne .L_430755

            lea RDX,QWORD PTR [RSP+6]
            lea RSI,QWORD PTR [RSP+4]
            mov RDI,R12
            call .L_404740

            cmp WORD PTR [RSP+4],9
            ja .L_430830
.L_4307ba:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            call .L_404070

            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            je .L_430755

            lea RSI,QWORD PTR [RSP+16]
            mov EDX,56
            mov RDI,RAX
            lea RBX,QWORD PTR [R12+8]
            call .L_403d80

            mov RSI,QWORD PTR [RSP+8]
            mov EDX,1
            mov RDI,R12
            call .L_4045d0

            cmp RBX,QWORD PTR [R12+24]
            jne .L_430755

            call .L_401240

            mov EDX,247000
            mov ESI,EAX
            mov RDI,RBX
            call .L_433770

            jmp .L_430755
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430820:

            mov RDI,QWORD PTR [RSP+8]
            call .L_403400

            jmp .L_430755
          .byte 0x90
.L_430830:

            mov RDI,R12
            call .L_4306b0

            jmp .L_4307ba
.L_43083d:

            call __stack_chk_fail@PLT
.L_430842:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430850:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov RBP,RDI
            mov RBX,RSI
            mov R14,RCX
            sub RSP,312
.L_430872:

            lea R12,QWORD PTR [RSP+144]
            and BYTE PTR [RSP+75],252
            mov QWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            xor EAX,EAX
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_431390

            test EAX,EAX
            jne .L_430955

            movzx EDX,BYTE PTR [RSP+144]
            mov EAX,EDX
            and EAX,48
            and EDX,32
            je .L_430980

            cmp BYTE PTR [RSP+145],0
            jne .L_4309f0
.L_4308ed:

            test AL,AL
            jne .L_4309cb
.L_4308f5:

            movzx R9D,WORD PTR [RBX+58]
.L_4308fa:

            xor R12D,R12D
            xor ECX,ECX
            test R9W,R9W
            jne .L_430a30
.L_430909:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_42f720]
            mov QWORD PTR [RSP+8],RCX
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_430ab8

            lea RDI,QWORD PTR [RBP+8]
            mov RDX,R13
            mov RSI,RBX
            call .L_411ba0

            mov RCX,QWORD PTR [RSP+8]
.L_430939:

            test EAX,EAX
            je .L_430955

            test R12B,R12B
            je .L_430955

            mov RSI,RCX
            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_42fb20

            mov EAX,DWORD PTR [RSP+8]
.L_430955:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_430ada

            add RSP,312
.L_430973:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_430980:

            cmp WORD PTR [RSP+146],0
            jne .L_4308ed
.L_43098f:

            movzx EAX,WORD PTR [RBP+88]
            xor ESI,ESI
            mov RCX,R12
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+146],AX
            mov WORD PTR [RBP+88],DX
            mov EDX,4
            call .L_403b10

            movzx EAX,BYTE PTR [RSP+144]
            and EAX,48
            test AL,AL
            je .L_4308f5
.L_4309cb:

            test R14,R14
            setne R12B
            cmp AL,16
            sete DL
            xor ECX,ECX
            and R12B,DL
            je .L_430909

            movzx R9D,BYTE PTR [RSP+272]
            jmp .L_4308fa
.L_4309f0:

            lea RDI,QWORD PTR [RBP+144]
            mov RDX,R13
            mov RSI,RBX
            call .L_4306f0

            movzx EDX,BYTE PTR [RSP+144]
            mov EAX,EDX
            and EAX,48
            cmp WORD PTR [RSP+146],0
            jne .L_4308ed

            and EDX,32
            je .L_43098f

            jmp .L_4308ed
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_430a30:

            xor ESI,ESI
            lea RDI,QWORD PTR [RSP+80]
            test AL,AL
            sete SIL
            mov R8,R15
            mov RCX,R14
            mov RDX,R13
            mov DWORD PTR [RSP+8],R9D
            call .L_4303b0

            movdqa XMM0,XMMWORD PTR [RSP+80]
            lea RCX,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR [RSP+128]
            mov R9D,DWORD PTR [RSP+8]
            mov RSI,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RDI,RBP
            movzx EDX,R9W
            movdqa XMM0,XMMWORD PTR [RSP+96]
            mov QWORD PTR [RSP+64],RAX
            mov EAX,DWORD PTR [RSP+136]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+112]
            mov DWORD PTR [RSP+72],EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42fa70

            test RAX,RAX
            mov RCX,RAX
            je .L_430ad0

            mov R12D,1
            jmp .L_430909
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430ab8:

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call RAX

            mov RCX,QWORD PTR [RSP+8]
            jmp .L_430939
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430ad0:

            mov EAX,3
            jmp .L_430955
.L_430ada:

            call __stack_chk_fail@PLT
.L_430adf:

            nop
.L_430ae0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDX
            sub RSP,176
.L_430af2:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDX+1]
            lea EDX,DWORD PTR [RAX-1]
            mov EAX,7
            cmp DL,3
            jbe .L_430b40
.L_430b16:

            mov RCX,QWORD PTR [RSP+168]
            xor RCX,QWORD PTR FS:[40]
            jne .L_430c2a

            add RSP,176
.L_430b34:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430b40:

            movzx EDX,BYTE PTR [RBX]
            mov RBP,RDI
            mov R12,RCX
            and EDX,48
            je .L_430c08

            cmp DL,16
            jne .L_430b16

            lea R14,QWORD PTR [RSP+16]
            mov EDX,ESI
            mov ESI,16
            mov RDI,R14
            call .L_431360

            movzx EAX,WORD PTR [RBP+88]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+18],AX
            mov WORD PTR [RBP+88],DX
.L_430b7f:

            movzx R13D,BYTE PTR [RBX]
            movzx EAX,BYTE PTR [RSP+16]
            lea RSI,QWORD PTR [RBX+4]
            lea RDI,QWORD PTR [R14+4]
            mov ECX,148
            and R13D,15
            and EAX,4294967280
            or EAX,R13D
            movzx EDX,R13B
            mov BYTE PTR [RSP+16],AL
            call __memcpy_chk@PLT

            mov EDX,2
            mov RSI,R14
            mov RDI,RBP
            add BYTE PTR [RSP+144],R13B
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_430b16

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_430850

            test EAX,EAX
            je .L_430b16

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_430b16
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430c08:

            lea R14,QWORD PTR [RSP+16]
            mov EDX,ESI
            mov ESI,32
            mov RDI,R14
            call .L_431360

            movzx EAX,WORD PTR [RBX+2]
            mov WORD PTR [RSP+18],AX
            jmp .L_430b7f
.L_430c2a:

            call __stack_chk_fail@PLT
.L_430c2f:

            nop
.L_430c30:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov RBP,RDI
            pxor XMM0,XMM0
            mov R12,RSI
            sub RSP,88
.L_430c4e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+136]
            mov QWORD PTR [RSP+24],0
            movaps XMMWORD PTR [RSP+32],XMM0
            test RAX,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_430cd0

            mov RSI,RCX
            mov RDX,QWORD PTR [RDI+128]
            mov RDI,R15
            call RAX

            test EAX,EAX
            mov R13D,EAX
            je .L_430ce0
.L_430c93:

            cmp R13D,23
            je .L_430e08
.L_430c9d:

            mov RDI,QWORD PTR [RSP+24]
            test RDI,RDI
            je .L_430cac

            call .L_403400
.L_430cac:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_430e67

            add RSP,88
.L_430cc4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_430cd0:

            mov R13D,23
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430ce0:

            movzx ESI,BYTE PTR [R12+128]
            mov RDI,R15
            call .L_403530

            lea RCX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RBP+144]
            mov RDX,R14
            mov RSI,R12
            call .L_430480

            test EAX,EAX
            je .L_430dd0

            cmp EAX,3
            je .L_430df7

            mov RDI,R12
            call .L_431b20

            test RAX,RAX
            je .L_430e55

            lea RBX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RBX
            nop
            nop
            nop
            nop
.L_430d38:

            cmp WORD PTR [RAX],11
            jne .L_430d7f

            cmp RBX,QWORD PTR [RSP+8]
            mov RCX,RBX
            je .L_430d4f

            add RCX,1
            mov BYTE PTR [RBX],47
.L_430d4f:

            lea RDX,QWORD PTR [RCX+1]
            sub RDX,QWORD PTR [RSP+8]
            movzx EBX,WORD PTR [RAX+2]
            mov ESI,32
            sub RSI,RDX
            cmp RBX,RSI
            jae .L_430df7

            mov RSI,QWORD PTR [RAX+8]
            mov RDX,RBX
            mov RDI,RCX
            call memcpy@PLT

            add RBX,RAX
.L_430d7f:

            mov RDI,R12
            call .L_4319d0

            test RAX,RAX
            jne .L_430d38
.L_430d8c:

            mov BYTE PTR [RBX],0
            mov RBX,QWORD PTR [RBP+120]
            test RBX,RBX
            jne .L_430da9

            jmp .L_430e20
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430da0:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_430e20
.L_430da9:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RBX]
            call strcmp@PLT

            test EAX,EAX
            jne .L_430da0

            mov RDI,QWORD PTR [RBX+16]
            mov RCX,R14
            mov RDX,R15
            mov RSI,R12
            call QWORD PTR [RBX+8]

            jmp .L_430cac
          .byte 0x90
.L_430dd0:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_42f720]
            mov RSI,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_430e48

            lea RDI,QWORD PTR [RBP+8]
            mov RDX,R14
            call .L_411ba0

            mov R13D,EAX
.L_430df7:

            test R13D,R13D
            je .L_430cac

            jmp .L_430c93
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430e08:

            mov RCX,R14
            mov RDX,R12
            mov ESI,132
            mov RDI,RBP
            call .L_430ae0

            jmp .L_430c9d
.L_430e20:

            mov RAX,QWORD PTR [RBP+176]
            test RAX,RAX
            je .L_430df7

            mov RDI,QWORD PTR [RBP+184]
            mov RCX,R14
            mov RDX,R15
            mov RSI,R12
            call RAX

            jmp .L_430cac
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430e48:

            mov RDX,R14
            mov RDI,RBP
            call RAX

            mov R13D,EAX
            jmp .L_430df7
.L_430e55:

            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RAX
            mov RBX,RAX
            jmp .L_430d8c
.L_430e67:

            call __stack_chk_fail@PLT
.L_430e6c:

            nop
            nop
            nop
            nop
.L_430e70:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov R12,RDI
            mov RBP,RSI
            sub RSP,168
.L_430e88:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_431390

            test EAX,EAX
            jne .L_430ec7

            movzx EAX,BYTE PTR [RSP+1]
            mov RCX,R13
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            sub EAX,1
            cmp AL,3
            jbe .L_430ef0

            call .L_430160
.L_430ec7:

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_430ef7

            add RSP,168
.L_430ee1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430ef0:

            call .L_430c30

            jmp .L_430ec7
.L_430ef7:

            call __stack_chk_fail@PLT
.L_430efc:

            nop
            nop
            nop
            nop
.L_430f00:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            jmp .L_430f23
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430f10:

            mov RDI,RBP
            mov RSI,RAX
            call .L_404690

            mov RDI,RBX
            call .L_403400
.L_430f23:

            mov RDI,RBP
            call .L_4045c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_430f10

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_430f3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_430f40:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            add RDI,80
            sub RSP,88
.L_430f51:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_4045c0

            xor EDX,EDX
            and BYTE PTR [RSP+59],252
            test RAX,RAX
            mov QWORD PTR [RSP+32],0
            mov QWORD PTR [RSP+40],0
            mov QWORD PTR [RSP+48],0
            mov WORD PTR [RSP+56],DX
            mov BYTE PTR [RSP+58],0
            je .L_430ff5

            mov RBX,RAX
            mov R13,RSP
            nop
            nop
            nop
.L_430fa0:

            mov RDI,RBX
            call .L_403410

            mov R12,RAX
            movzx EAX,WORD PTR [RBX+58]
            mov RCX,R13
            mov EDX,60
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_4038b0

            mov RSI,RBX
            mov RDI,RBP
            call .L_42fb20

            mov RAX,QWORD PTR [RSP+34]
            test RAX,RAX
            je .L_430fed

            mov R8D,11
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+42]
            call RAX
.L_430fed:

            test R12,R12
            mov RBX,R12
            jne .L_430fa0
.L_430ff5:

            lea RDI,QWORD PTR [RBP+144]
            call .L_430f00

            lea RDI,QWORD PTR [RBP+8]
            call .L_411b20

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_431025

            add RSP,88
.L_43101e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_431025:

            call __stack_chk_fail@PLT
.L_43102a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_431030:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,72
.L_431041:

            mov R13,RSP
            mov DWORD PTR [RSP],0
            movups XMMWORD PTR [RSP+8],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movups XMMWORD PTR [R13+24],XMM0
            movups XMMWORD PTR [R13+40],XMM0
            jmp .L_4310a9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431070:

            movzx EAX,WORD PTR [RAX+58]
            mov RCX,R13
            mov EDX,56
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-56]
            movzx ESI,SI
            call .L_4038b0

            call .L_401240

            mov EBP,DWORD PTR [RSP]
            cmp EAX,EBP
            js .L_4310d8

            mov RDI,R12
            mov RSI,RBX
            call .L_404690

            mov RDI,RBX
            call .L_403400
.L_4310a9:

            mov RDI,R12
            call .L_4045c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_431070
.L_4310b9:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4310fe

            add RSP,72
.L_4310cd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4310d8:

            call .L_401240

            mov EBX,EAX
            call .L_401240

            mov EDX,EBP
            mov ECX,0
            lea RDI,QWORD PTR [R12+8]
            sub EDX,EBX
            mov ESI,EAX
            cmovs EDX,ECX
            call .L_433770

            jmp .L_4310b9
.L_4310fe:

            call __stack_chk_fail@PLT
.L_431103:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431110:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b50

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_431030
.L_431131:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431140:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b80

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_431030
.L_431161:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431170:

            push RBX
            mov EBX,DWORD PTR [RDI]
            call .L_401240

            sub EBX,EAX
            mov EDX,0
            mov EAX,EBX
            cmovs EAX,EDX
            pop RBX
            ret 
.L_431186:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431190:

            push RBX
            lea RCX,QWORD PTR [RIP+.L_431110]
            lea RDX,QWORD PTR [RIP+.L_42ffb0]
            mov RBX,RDI
            call .L_42f730

            lea RAX,QWORD PTR [RIP+.L_6768b8]
            mov QWORD PTR [RBX],RAX
            pop RBX
            ret 
.L_4311b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4311c0:

            push RBX
            lea RCX,QWORD PTR [RIP+.L_431140]
            lea RDX,QWORD PTR [RIP+.L_42ffd0]
            mov RBX,RDI
            call .L_42f730

            lea RAX,QWORD PTR [RIP+.L_6768d8]
            mov QWORD PTR [RBX],RAX
            pop RBX
            ret 
.L_4311e3:
          .string "coap/coap.hpp"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4311f8:
          .string "aMessage.SetLength(aMessage.GetLength() - sizeof(EnqueuedResponseHeader)) == OT_ERROR_NONE"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431260:
          .string "static void ot::Coap::EnqueuedResponseHeader::RemoveFrom(ot::Message&)"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4312b0:
          .string "N2ot4Coap8CoapBaseE"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_4312d0:
          .string "N2ot4Coap4CoapE"
.L_4312e0:
          .string "N2ot4Coap15ApplicationCoapE"
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431300:

            pxor XMM0,XMM0
            xor EAX,EAX
            mov WORD PTR [RDI+134],AX
            mov BYTE PTR [RDI+128],4
            mov RDX,RDI
            mov DWORD PTR [RDI+130],0
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            movups XMMWORD PTR [RDI+128],XMM0
            mov QWORD PTR [RDI+112],0
            mov RCX,RDX
            and RDI,-8
            sub RCX,RDI
            xor EAX,EAX
            sub ECX,-128
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movzx EAX,BYTE PTR [RDX]
            and EAX,63
            or EAX,64
            mov BYTE PTR [RDX],AL
            ret 
.L_43135c:

            nop
            nop
            nop
            nop
.L_431360:

            mov R8,RDI
            sub RSP,8
            mov R9D,EDX
            call .L_431300

            movzx EAX,BYTE PTR [R8]
            mov BYTE PTR [R8+1],R9B
            and EAX,4294967247
            or ESI,EAX
            mov BYTE PTR [R8],SIL
            add RSP,8
            ret 
.L_431384:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431390:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_4313a1:

            movzx R14D,WORD PTR [RSI+60]
            movzx EBP,WORD PTR [RSI+58]
            sub EBP,R14D
            sub EBP,EDX
            call .L_431300

            cmp BP,3
            jbe .L_431600

            mov R13,RSI
            mov RCX,RBX
            movzx ESI,R14W
            mov EDX,4
            mov RDI,R13
            call .L_4038b0

            movzx R12D,BYTE PTR [RBX]
            mov BYTE PTR [RBX+128],4
            mov EAX,R12D
            shr AL,6
            cmp AL,1
            jne .L_431600

            and R12D,15
            cmp R12B,8
            ja .L_431600

            movzx EDX,R12B
            movzx EBP,BP
            lea EAX,DWORD PTR [RDX+4]
            cmp EAX,EBP
            jg .L_431600

            add R14D,4
            lea RCX,QWORD PTR [RBX+4]
            mov RDI,R13
            movzx ESI,R14W
            call .L_4038b0

            movzx ECX,BYTE PTR [RBX+128]
            add ECX,R12D
            movzx R12D,R12B
            movzx EAX,CL
            add R12D,R14D
            mov BYTE PTR [RBX+128],CL
            cmp EBP,EAX
            jle .L_4315f8

            cmp CL,123
            ja .L_431600

            mov R14D,1
            jmp .L_4314fc
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431460:

            add R12D,1
.L_431464:

            cmp SIL,12
            ja .L_4315a6
.L_43146e:

            movzx ECX,BYTE PTR [RBX+128]
.L_431475:

            test R14B,R14B
            je .L_4314a3

            movzx EAX,CL
            mov WORD PTR [RBX+136],DI
            mov WORD PTR [RBX+138],R15W
            add RAX,RBX
            mov QWORD PTR [RBX+144],RAX
            movzx EAX,CL
            add EAX,R15D
            mov WORD PTR [RBX+134],AX
.L_4314a3:

            movzx EDX,R15W
            movzx EAX,CL
            add EAX,EDX
            cmp EAX,128
            setg R14B
            cmp EBP,EAX
            setl AL
            or R14B,AL
            jne .L_431600

            movzx ECX,CL
            movzx ESI,R12W
            mov RDI,R13
            add RCX,RBX
            add R12D,R15D
            call .L_4038b0

            movzx ECX,BYTE PTR [RBX+128]
            add ECX,R15D
            movzx EAX,CL
            mov BYTE PTR [RBX+128],CL
            cmp EBP,EAX
            jle .L_4315f8

            cmp CL,123
            ja .L_431600
.L_4314fc:

            movzx ECX,CL
            mov EDX,5
            movzx ESI,R12W
            add RCX,RBX
            mov RDI,R13
            call .L_4038b0

            movzx EAX,BYTE PTR [RBX+128]
            movzx EDX,BYTE PTR [RBX+RAX*1]
            mov RCX,RAX
            cmp DL,255
            je .L_431668

            test R14B,R14B
            je .L_431539

            movzx EAX,AL
            mov WORD PTR [RBX+132],AX
.L_431539:

            movzx EAX,DL
            mov ESI,EDX
            lea EDX,DWORD PTR [RCX+1]
            sar EAX,4
            and ESI,15
            cmp EAX,12
            mov EDI,EAX
            movzx R15D,SIL
            mov BYTE PTR [RBX+128],DL
            jle .L_431460

            cmp EAX,13
            je .L_431620

            cmp AX,14
            jne .L_431600

            movzx EAX,DL
            add R12D,3
            movzx EDI,BYTE PTR [RBX+RAX*1]
            mov RDX,RAX
            add EDX,1
            movsxd RDX,EDX
            mov EAX,EDI
            movzx EDI,BYTE PTR [RBX+RDX*1]
            shl EAX,8
            or EDI,EAX
            lea EAX,DWORD PTR [RCX+3]
            add DI,269
            cmp SIL,12
            mov BYTE PTR [RBX+128],AL
            jbe .L_43146e
.L_4315a6:

            cmp SIL,13
            je .L_431640

            cmp R15W,14
            jne .L_431600

            movzx EAX,BYTE PTR [RBX+128]
            add R12D,2
            movsxd RDX,EAX
            mov ECX,EAX
            add EAX,1
            movzx R15D,BYTE PTR [RBX+RDX*1]
            cdqe 
            add ECX,2
            mov EDX,R15D
            movzx R15D,BYTE PTR [RBX+RAX*1]
            mov BYTE PTR [RBX+128],CL
            shl EDX,8
            or R15D,EDX
            add R15W,269
            jmp .L_431475
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4315f8:

            cmp EBP,EAX
            je .L_431678

            nop
            nop
            nop
            nop
.L_431600:

            xor EAX,EAX
            mov WORD PTR [RBX+132],AX
            mov EAX,6
.L_43160e:

            add RSP,8
.L_431612:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431620:

            movzx EDX,DL
            lea EAX,DWORD PTR [RCX+2]
            add R12D,2
            movzx EDI,BYTE PTR [RBX+RDX*1]
            mov BYTE PTR [RBX+128],AL
            add EDI,13
            jmp .L_431464
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431640:

            movzx EAX,BYTE PTR [RBX+128]
            add R12D,1
            movzx R15D,BYTE PTR [RBX+RAX*1]
            mov RCX,RAX
            add ECX,1
            mov BYTE PTR [RBX+128],CL
            add R15D,13
            jmp .L_431475
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431668:

            lea EAX,DWORD PTR [RAX+1]
            mov BYTE PTR [RBX+128],AL
            movzx EAX,AL
            cmp EBP,EAX
            jle .L_431600
.L_431678:

            xor EAX,EAX
            jmp .L_43160e
.L_43167c:

            nop
            nop
            nop
            nop
.L_431680:

            movzx EDX,WORD PTR [RSI]
            movzx ECX,WORD PTR [RDI+130]
            mov EAX,7
            cmp DX,CX
            jb .L_431758

            push R12
            sub EDX,ECX
            push RBP
            push RBX
.L_43169e:

            movzx ECX,WORD PTR [RSI+2]
            cmp DX,12
            lea EAX,DWORD PTR [RCX+1]
            jbe .L_4316b9

            xor EAX,EAX
            cmp DX,268
            seta AL
            lea EAX,DWORD PTR [RCX+RAX*1+2]
.L_4316b9:

            cmp CX,12
            jbe .L_4316d1

            mov R8D,EAX
            xor EAX,EAX
            cmp CX,268
            seta AL
            lea EAX,DWORD PTR [RAX+R8*1+1]
.L_4316d1:

            movzx ECX,BYTE PTR [RDI+128]
            movzx EAX,AX
            mov RBP,RCX
            add ECX,EAX
            mov EAX,3
            cmp ECX,127
            jg .L_43174e

            add RBP,RDI
            cmp DX,12
            ja .L_431780

            movzx EDX,DX
            lea RCX,QWORD PTR [RBP+1]
            shl EDX,4
            mov EAX,EDX
            mov BYTE PTR [RBP],DL
.L_431706:

            movzx EDX,WORD PTR [RSI+2]
            cmp DX,12
            ja .L_431760

            or EAX,EDX
            mov BYTE PTR [RBP],AL
.L_431715:

            movzx EDX,WORD PTR [RSI+2]
            mov RBX,RSI
            mov RSI,QWORD PTR [RSI+8]
            mov R12,RDI
            mov RDI,RCX
            call memcpy@PLT

            mov RCX,RAX
            movzx EAX,WORD PTR [RBX+2]
            add RCX,RAX
            sub RCX,RBP
            add BYTE PTR [R12+128],CL
            movzx EAX,WORD PTR [RBX]
            mov WORD PTR [R12+130],AX
            xor EAX,EAX
.L_43174e:

            pop RBX
.L_43174f:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431758:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431760:

            cmp DX,268
            ja .L_4317c0

            or EAX,13
            add RCX,1
            mov BYTE PTR [RBP],AL
            movzx EAX,BYTE PTR [RSI+2]
            sub EAX,13
            mov BYTE PTR [RCX-1],AL
            jmp .L_431715
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431780:

            cmp DX,268
            movzx EAX,BYTE PTR [RBP]
            ja .L_4317a0

            or EAX,4294967248
            sub EDX,13
            lea RCX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP],AL
            mov BYTE PTR [RBP+1],DL
            jmp .L_431706
.L_4317a0:

            sub DX,269
            or EAX,4294967264
            movzx ECX,DH
            mov BYTE PTR [RBP],AL
            mov BYTE PTR [RBP+2],DL
            mov BYTE PTR [RBP+1],CL
            lea RCX,QWORD PTR [RBP+3]
            jmp .L_431706
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4317c0:

            or EAX,14
            add RCX,2
            mov BYTE PTR [RBP],AL
            movzx EAX,WORD PTR [RSI+2]
            sub AX,269
            movzx EDX,AH
            mov BYTE PTR [RCX-1],AL
            mov BYTE PTR [RCX-2],DL
            jmp .L_431715
.L_4317e0:

            sub RSP,56
.L_4317e4:

            bswap EDX
            mov ECX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+12]
            test DL,DL
            mov DWORD PTR [RSP+12],EDX
            mov WORD PTR [RSP+16],SI
            mov WORD PTR [RSP+18],CX
            mov QWORD PTR [RSP+24],RAX
            jne .L_43183b

            mov EDX,4
            jmp .L_431825
          .byte 0x66
          .byte 0x90
.L_431820:

            test DX,DX
            je .L_431860
.L_431825:

            add RAX,1
            sub EDX,1
            cmp BYTE PTR [RAX],0
            je .L_431820

            mov QWORD PTR [RSP+24],RAX
            mov WORD PTR [RSP+18],DX
.L_43183b:

            lea RSI,QWORD PTR [RSP+16]
            call .L_431680

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43186e

            add RSP,56
.L_431859:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431860:

            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+18],AX
            jmp .L_43183b
.L_43186e:

            call __stack_chk_fail@PLT
.L_431873:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431880:

            mov EDX,ESI
            mov ESI,6
            and EDX,16777215
            jmp .L_4317e0
.L_431892:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4318a0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,40
.L_4318b0:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,11
            mov R13,RSP
            mov WORD PTR [RSP],AX
            jmp .L_4318f0
          .byte 0x66
          .byte 0x90
.L_4318d0:

            sub RAX,RBX
            mov RSI,R13
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_431680

            test EAX,EAX
            jne .L_431922

            lea RBX,QWORD PTR [RBP+1]
.L_4318f0:

            mov ESI,47
            mov RDI,RBX
            call strchr@PLT

            test RAX,RAX
            mov RBP,RAX
            jne .L_4318d0

            mov RDI,RBX
            call strlen@PLT

            mov RSI,R13
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_431680
.L_431922:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43193d

            add RSP,40
.L_431936:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43193d:

            call __stack_chk_fail@PLT
.L_431942:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431950:

            mov EDX,ESI
            mov ESI,12
            jmp .L_4317e0
.L_43195c:

            nop
            nop
            nop
            nop
.L_431960:

            mov EDX,ESI
            mov ESI,14
            jmp .L_4317e0
.L_43196c:

            nop
            nop
            nop
            nop
.L_431970:

            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RSI
            mov RBX,RSI
            sub RSP,40
.L_43197f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,15
            mov WORD PTR [RSP],AX
            call strlen@PLT

            mov RSI,RSP
            mov RDI,RBP
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_431680

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4319c9

            add RSP,40
.L_4319c6:

            pop RBX
            pop RBP
            ret 
.L_4319c9:

            call __stack_chk_fail@PLT
.L_4319ce:

            nop
            nop
.L_4319d0:

            movzx R9D,WORD PTR [RDI+134]
            movzx EAX,BYTE PTR [RDI+128]
            cmp R9W,AX
            jae .L_431ad0

            movzx EAX,R9W
            lea ESI,DWORD PTR [R9+1]
            movzx ECX,BYTE PTR [RDI+RAX*1]
            mov WORD PTR [RDI+134],SI
            mov EDX,ECX
            sar ECX,4
            and EDX,15
            cmp ECX,12
            mov R8D,ECX
            movzx EAX,DL
            jle .L_431a52

            cmp ECX,13
            je .L_431ad8

            cmp CX,14
            jne .L_431ad0

            movzx ECX,SI
            movzx R8D,BYTE PTR [RDI+RCX*1]
            mov RSI,RCX
            add ESI,1
            movsxd RSI,ESI
            mov ECX,R8D
            movzx R8D,BYTE PTR [RDI+RSI*1]
            shl ECX,8
            or R8D,ECX
            lea ECX,DWORD PTR [R9+3]
            add R8W,269
            mov WORD PTR [RDI+134],CX
.L_431a52:

            cmp DL,12
            jbe .L_431ac0
.L_431a57:

            cmp DL,13
            je .L_431b00

            cmp AX,14
            jne .L_431ad0

            movzx ECX,WORD PTR [RDI+134]
            movsxd RAX,ECX
            mov EDX,ECX
            add ECX,1
            movzx EAX,BYTE PTR [RDI+RAX*1]
            movsxd RCX,ECX
            add EDX,2
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RDI+RCX*1]
            or EAX,ESI
            add AX,269
.L_431a8e:

            movzx ECX,DX
            mov WORD PTR [RDI+138],AX
            add EAX,EDX
            add RCX,RDI
            mov WORD PTR [RDI+134],AX
            add WORD PTR [RDI+136],R8W
            mov QWORD PTR [RDI+144],RCX
            lea RAX,QWORD PTR [RDI+136]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431ac0:

            movzx EDX,WORD PTR [RDI+134]
            jmp .L_431a8e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431ad0:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431ad8:

            movzx ESI,SI
            lea ECX,DWORD PTR [R9+2]
            movzx R8D,BYTE PTR [RDI+RSI*1]
            mov WORD PTR [RDI+134],CX
            add R8D,13
            cmp DL,12
            ja .L_431a57

            jmp .L_431ac0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431b00:

            movzx EAX,WORD PTR [RDI+134]
            mov RDX,RAX
            movzx EAX,BYTE PTR [RDI+RAX*1]
            add EDX,1
            add EAX,13
            jmp .L_431a8e
.L_431b19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b20:

            movzx EAX,WORD PTR [RDI+132]
            test AX,AX
            je .L_431b48

            pxor XMM0,XMM0
            mov WORD PTR [RDI+134],AX
            movups XMMWORD PTR [RDI+136],XMM0
            jmp .L_4319d0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431b48:

            xor EAX,EAX
            ret 
.L_431b4b:

            nop
            nop
            nop
            nop
            nop
.L_431b50:

            movzx EAX,BYTE PTR [RDI+128]
            test AL,AL
            js .L_431b70

            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+128],DL
            mov BYTE PTR [RDI+RAX*1],255
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431b70:

            mov EAX,3
            ret 
.L_431b76:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b80:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_431b8e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp SIL,8
            mov QWORD PTR [RSP],0
            ja .L_431cbd

            movzx EAX,SIL
            mov R13,RDI
            mov R12D,ESI
            sub EAX,1
            test SIL,SIL
            movzx EBP,SIL
            mov R15,RSP
            je .L_431be9

            movzx EAX,AX
            mov RBX,R15
            lea R14,QWORD PTR [R15+RAX*1+1]
            nop
            nop
            nop
            nop
.L_431bd8:

            add RBX,1
            call .L_401460

            cmp RBX,R14
            mov BYTE PTR [RBX-1],AL
            jne .L_431bd8
.L_431be9:

            movzx EAX,BYTE PTR [R13]
            lea RDX,QWORD PTR [R13+4]
            and EAX,4294967280
            or EAX,R12D
            cmp EBP,8
            mov BYTE PTR [R13],AL
            jae .L_431c50

            test BPL,4
            jne .L_431c94

            test EBP,EBP
            je .L_431c21

            movzx EAX,BYTE PTR [R15]
            test BPL,2
            mov BYTE PTR [R13+4],AL
            jne .L_431cab
.L_431c21:

            add BYTE PTR [R13+128],R12B
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_431cdc

            add RSP,24
.L_431c40:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431c50:

            mov RAX,QWORD PTR [RSP]
            mov QWORD PTR [R13+4],RAX
            mov EAX,EBP
            mov RCX,QWORD PTR [R15+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RCX
            lea RAX,QWORD PTR [R13+12]
            and RAX,-8
            sub RDX,RAX
            add EBP,EDX
            sub R15,RDX
            and EBP,4294967288
            cmp EBP,8
            jb .L_431c21

            and EBP,4294967288
            xor EDX,EDX
.L_431c81:

            mov ECX,EDX
            add EDX,8
            mov RSI,QWORD PTR [R15+RCX*1]
            cmp EDX,EBP
            mov QWORD PTR [RAX+RCX*1],RSI
            jb .L_431c81

            jmp .L_431c21
.L_431c94:

            mov EAX,DWORD PTR [R15]
            mov DWORD PTR [R13+4],EAX
            mov EAX,EBP
            mov ECX,DWORD PTR [R15+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_431c21
.L_431cab:

            mov EAX,EBP
            movzx ECX,WORD PTR [R15+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_431c21
.L_431cbd:

            lea RCX,QWORD PTR [RIP+.L_431e20]
            lea RSI,QWORD PTR [RIP+.L_431dcf]
            lea RDI,QWORD PTR [RIP+.L_431de8]
            mov EDX,421
            call __assert_fail@PLT
.L_431cdc:

            call __stack_chk_fail@PLT
.L_431ce1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431cf0:

            mov R8,RDI
            sub RSP,8
.L_431cf7:

            call .L_431300

            movzx EAX,BYTE PTR [R8]
            mov BYTE PTR [R8+1],68
            lea RDI,QWORD PTR [R8+4]
            lea R9,QWORD PTR [RSI+4]
            mov EDX,EAX
            and EAX,4294967232
            and EDX,4294967247
            or EDX,32
            mov BYTE PTR [R8],DL
            movzx EDX,WORD PTR [RSI+2]
            mov WORD PTR [R8+2],DX
            movzx ECX,BYTE PTR [RSI]
            and ECX,15
            mov EDX,ECX
            or EDX,32
            or EAX,EDX
            mov BYTE PTR [R8],AL
            movzx EAX,CL
            cmp EAX,8
            jae .L_431d60

            test AL,4
            jne .L_431da8

            test EAX,EAX
            je .L_431d50

            movzx EDX,BYTE PTR [RSI+4]
            test AL,2
            mov BYTE PTR [R8+4],DL
            jne .L_431dc0
.L_431d50:

            add BYTE PTR [R8+128],CL
            add RSP,8
.L_431d5b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431d60:

            mov RDX,QWORD PTR [RSI+4]
            mov QWORD PTR [R8+4],RDX
            mov EDX,EAX
            mov RSI,QWORD PTR [R9+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-8],RSI
            lea RDX,QWORD PTR [R8+12]
            and RDX,-8
            sub RDI,RDX
            add EAX,EDI
            sub R9,RDI
            and EAX,4294967288
            cmp EAX,8
            jb .L_431d50

            and EAX,4294967288
            xor ESI,ESI
.L_431d91:

            mov EDI,ESI
            add ESI,8
            mov R10,QWORD PTR [R9+RDI*1]
            cmp ESI,EAX
            mov QWORD PTR [RDX+RDI*1],R10
            jb .L_431d91

            jmp .L_431d50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431da8:

            mov EDX,DWORD PTR [RSI+4]
            mov DWORD PTR [R8+4],EDX
            mov EDX,EAX
            mov EAX,DWORD PTR [R9+RDX*1-4]
            mov DWORD PTR [RDI+RDX*1-4],EAX
            jmp .L_431d50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431dc0:

            mov EDX,EAX
            movzx EAX,WORD PTR [R9+RDX*1-2]
            mov WORD PTR [RDI+RDX*1-2],AX
            jmp .L_431d50
.L_431dcf:
          .string "coap/coap_header.cpp"
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431de8:
          .string "aTokenLength <= kMaxTokenLength"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431e20:
          .string "void ot::Coap::Header::SetToken(uint8_t)"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431e50:

            mov RDX,QWORD PTR [RDI+240]
            movzx EAX,SIL
            test RDX,RDX
            je .L_431e70

            mov RSI,QWORD PTR [RDI+248]
            mov EDI,EAX
            jmp RDX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431e70:

            ret 
.L_431e72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431e80:

            push RBX
            mov RBX,RSI
            call .L_433510

            movzx EDX,WORD PTR [RBX+58]
            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+8504]
            pop RBX
            jmp .L_438710
.L_431e9d:

            nop
            nop
            nop
.L_431ea0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            sub RSP,40
.L_431eb7:

            lea R15,QWORD PTR [RBX+208]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            lea R12,QWORD PTR [RAX+8504]
            mov R14,RAX
            mov RDI,R12
            call .L_4385f0

            test AL,AL
            jne .L_431fc0

            movzx EAX,WORD PTR [RBP+34]
            lea RDI,QWORD PTR [RBX+8]
            mov RSI,RSP
            movdqu XMM0,XMMWORD PTR [RBP+16]
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_411b00

            mov RSI,RBP
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movups XMMWORD PTR [RBX+208],XMM0
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+226],AX
            movzx EAX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+228],AL
            call .L_411990

            test AL,AL
            jne .L_431fe0
.L_431f44:

            movzx EAX,WORD PTR [RBP+32]
            lea R8,QWORD PTR [RIP+.L_432450]
            lea RCX,QWORD PTR [RIP+.L_432560]
            lea RDX,QWORD PTR [RIP+.L_431e50]
            mov R9,RBX
            xor ESI,ESI
            mov RDI,R12
            mov WORD PTR [RBX+224],AX
            call .L_438c70
.L_431f71:

            mov EDX,16
            mov RSI,R15
            mov RDI,R12
            call .L_4386b0

            movzx EDX,WORD PTR [R13+60]
            movzx ECX,WORD PTR [R13+58]
            mov RSI,R13
            mov RDI,R12
            sub ECX,EDX
            movzx ECX,CX
            call .L_438c30
.L_431f9b:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_431ff1

            add RSP,40
.L_431faf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431fc0:

            lea RSI,QWORD PTR [RBP+16]
            mov RDI,R15
            call .L_4103b0

            test AL,AL
            je .L_431f9b

            movzx EAX,WORD PTR [RBP+34]
            cmp WORD PTR [RBX+226],AX
            jne .L_431f9b

            jmp .L_431f71
          .byte 0x90
.L_431fe0:

            movdqu XMM0,XMMWORD PTR [RBP]
            movups XMMWORD PTR [RBX+192],XMM0
            jmp .L_431f44
.L_431ff1:

            call __stack_chk_fail@PLT
.L_431ff6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432000:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bd0

            add RSP,8
            mov RDI,RAX
            jmp .L_42fdb0
.L_43201d:

            nop
            nop
            nop
.L_432020:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bd0

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_431030
.L_432041:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432050:

            push RBP
            push RBX
            lea RCX,QWORD PTR [RIP+.L_432020]
            lea RDX,QWORD PTR [RIP+.L_432000]
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_43206a:

            call .L_42f730

            pxor XMM0,XMM0
            lea RAX,QWORD PTR [RIP+.L_676918]
            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+248],0
            lea RDI,QWORD PTR [RBX+280]
            mov QWORD PTR [RBX],RAX
            mov QWORD PTR [RBX+256],0
            mov RCX,RBX
            movups XMMWORD PTR [RBX+192],XMM0
            mov QWORD PTR [RBX+264],0
            mov QWORD PTR [RBX+272],0
            mov RSI,RBP
            movups XMMWORD PTR [RBX+208],XMM0
            lea RDX,QWORD PTR [RIP+.L_4324c0]
            movups XMMWORD PTR [RBX+224],XMM0
            add RSP,8
.L_4320e1:

            pop RBX
            pop RBP
            jmp .L_4051f0
.L_4320e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4320f0:

            test RDX,RDX
            mov QWORD PTR [RDI+256],RDX
            mov QWORD PTR [RDI+264],RCX
            je .L_432110

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432110:

            movzx ESI,SI
            jmp .L_42f7f0
.L_432118:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432120:

            push RBX
.L_432121:

            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            call .L_4385f0

            test AL,AL
            jne .L_432178
.L_432139:

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_432155

            call .L_403400

            mov QWORD PTR [RBX+272],0
.L_432155:

            mov QWORD PTR [RBX+256],0
            mov QWORD PTR [RBX+264],0
            mov RDI,RBX
            pop RBX
.L_43216f:

            jmp .L_430f40
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_432178:

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            call .L_4385a0

            jmp .L_432139
.L_43218e:

            nop
            nop
.L_432190:

            push RBX

            mov RBX,RDI
            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+192],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDI+208],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            mov QWORD PTR [RDI+240],RDX
            mov QWORD PTR [RDI+248],RCX
            movups XMMWORD PTR [RDI+224],XMM0
            call .L_433510

            mov R9,RBX
            lea RDI,QWORD PTR [RAX+8504]
            lea R8,QWORD PTR [RIP+.L_432450]
            pop RBX

            lea RCX,QWORD PTR [RIP+.L_432560]
            lea RDX,QWORD PTR [RIP+.L_431e50]
            mov ESI,1
            jmp .L_438c70
.L_4321f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432200:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_4385f0
.L_432219:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432220:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_438700
.L_432239:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432240:

            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_4385a0
.L_432259:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432260:

            sub RSP,8
            call .L_433510

            add RSP,8
            add RAX,8504
            ret 
.L_432274:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432280:

            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,8
            call .L_433510

            add RSP,8
            movzx EDX,BL
            mov RSI,RBP
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+8504]
            jmp .L_438600
.L_4322a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4322b0:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov R12,RDX
            sub RSP,8
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            call .L_438700

            test AL,AL
            je .L_432300

            add RSP,8
            lea RDX,QWORD PTR [RBX+192]
            mov R8,R13
            mov RCX,R12
            mov RSI,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_430850
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_432300:

            add RSP,8
            mov EAX,13
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_432310:

            jmp .L_430850
.L_432315:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432320:

            mov RDX,QWORD PTR [RDI+240]
            mov EAX,ESI
            test RDX,RDX
            je .L_432340

            mov RSI,QWORD PTR [RDI+248]
            movzx EDI,AL
            jmp RDX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432340:

            ret 
.L_432342:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432350:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov R12D,ECX
            sub RSP,24
.L_432363:

            mov RDI,QWORD PTR [RDI+272]
            test RDI,RDI
            je .L_4323f0
.L_432373:

            movzx EDX,DX
            mov RSI,R13
            call .L_403d80

            test EAX,EAX
            mov EBP,EAX
            jne .L_4323c0

            test R12B,R12B
            je .L_4323a6

            mov RAX,QWORD PTR [RBX+272]
            and R12D,15
            shl R12D,2
            movzx ECX,BYTE PTR [RAX+78]
            and ECX,4294967235
            or R12D,ECX
            mov BYTE PTR [RAX+78],R12B
.L_4323a6:

            lea RDI,QWORD PTR [RBX+280]
            call .L_405290
.L_4323b2:

            add RSP,24
.L_4323b6:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_4323c0:

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_4323b2

            cmp WORD PTR [RDI+58],0
            jne .L_4323b2

            call .L_403400

            mov QWORD PTR [RBX+272],0
            add RSP,24
            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4323f0:

            lea RDI,QWORD PTR [RBX+8]
            xor ESI,ESI
            mov DWORD PTR [RSP+12],EDX
            mov EBP,3
            call .L_411a40

            test RAX,RAX
            mov QWORD PTR [RBX+272],RAX
            je .L_4323b2

            mov ECX,R12D
            mov EDX,DWORD PTR [RSP+12]
            and ECX,15
            lea ESI,DWORD PTR [RCX*4]
            movzx ECX,BYTE PTR [RAX+78]
            and ECX,4294967235
            or ECX,ESI
            mov BYTE PTR [RAX+78],CL
            mov RAX,QWORD PTR [RBX+272]
            and BYTE PTR [RAX+78],127
            mov RDI,QWORD PTR [RBX+272]
            jmp .L_432373
.L_432444:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432450:

            movzx ECX,CL
            movzx EDX,DX
            jmp .L_432350
.L_43245b:

            nop
            nop
            nop
            nop
            nop
.L_432460:

            push RBX
.L_432461:

            mov RSI,QWORD PTR [RDI+272]
            mov RBX,RDI
            test RSI,RSI
            je .L_4324a1

            mov RAX,QWORD PTR [RDI+256]
            lea RDX,QWORD PTR [RDI+192]
            test RAX,RAX
            je .L_4324b0

            mov RDI,QWORD PTR [RDI+264]
            call RAX
.L_43248c:

            test EAX,EAX
            je .L_4324a1

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_4324a1

            call .L_403400
.L_4324a1:

            mov QWORD PTR [RBX+272],0
            pop RBX
.L_4324ad:

            ret 
          .byte 0x66
          .byte 0x90
.L_4324b0:

            lea RDI,QWORD PTR [RDI+8]
            call .L_411ba0

            jmp .L_43248c
.L_4324bb:

            nop
            nop
            nop
            nop
            nop
.L_4324c0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bd0

            add RSP,8
            mov RDI,RAX
            jmp .L_432460
.L_4324da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4324e0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            mov EBP,EDX
            sub RSP,8
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403790

            test RAX,RAX
            je .L_432538

            movzx EDX,BP
            mov RSI,R13
            mov RDI,RAX
            mov RBX,RAX
            call .L_403d80

            test EAX,EAX
            je .L_432548
.L_432521:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_403400
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432538:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432548:

            lea RDX,QWORD PTR [R12+192]
            mov RSI,RBX
            mov RDI,R12
            call .L_430e70

            jmp .L_432521
.L_43255d:

            nop
            nop
            nop
.L_432560:

            movzx EDX,DX
            jmp .L_4324e0
.L_432568:
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432570:
          .string "N2ot4Coap10CoapSecureE"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432590:

            xor EAX,EAX
            mov WORD PTR [RDI],SI
            mov WORD PTR [RDI+2],AX
            ret 
.L_43259a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4325a0:

            shl ESI,8
            xor SI,WORD PTR [RDI+2]
            mov EAX,8
            mov WORD PTR [RDI+2],SI
            jmp .L_4325c4

            nop
            nop
            nop
            nop
            nop
            nop
.L_4325b8:

            sub AL,1
            mov WORD PTR [RDI+2],DX
            je .L_4325d7
.L_4325c0:

            movzx ESI,WORD PTR [RDI+2]
.L_4325c4:

            test SI,SI
            lea EDX,DWORD PTR [RSI+RSI*1]
            jns .L_4325b8

            xor DX,WORD PTR [RDI]
            sub AL,1
            mov WORD PTR [RDI+2],DX
            jne .L_4325c0
.L_4325d7:

            ret 
.L_4325d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4325e0:

            push R15
            push R14
            mov RDI,RCX
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov EBP,72
            sub RSP,248
.L_4325fc:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+8],ESI
            mov DWORD PTR [RSP+40],EDX
            mov QWORD PTR [RSP+48],R8
            mov QWORD PTR [RSP+32],R9
            call strlen@PLT

            sub RBP,RAX
            lea RAX,QWORD PTR [RSP+64]
            shr RBP,1
            mov R13,RBP
            mov QWORD PTR [RSP+56],RAX
            sub R13,5
            je .L_4329ce

            xor R15D,R15D
            mov QWORD PTR [RSP+16],RBP
            mov RBX,RAX
            mov RBP,R15
            mov R12D,80
            mov R15,RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_432660:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_432dd8]
            mov RSI,R12
            sub RAX,R15
            mov RDI,RBX
            add RBP,1
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp RBP,R13
            jne .L_432660

            mov RAX,RBX
            sub RAX,QWORD PTR [RSP+56]
            mov RBP,QWORD PTR [RSP+16]
            mov RSI,R12
            sub RSI,RAX
.L_4326a4:

            sub RSP,8
.L_4326a8:

            lea R8,QWORD PTR [RIP+.L_432dda]
            mov RCX,-1
            movzx EAX,WORD PTR [RSP+40]
            mov EDX,1
            mov RDI,RBX
            mov R9,R14
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            sub RBP,4
            pop RDX
            pop RCX
.L_4326df:

            je .L_432721

            mov R14,QWORD PTR [RSP+56]
            xor R13D,R13D
            mov R12D,80
            nop
.L_4326f0:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_432dd8]
            mov RSI,R12
            sub RAX,R14
            mov RDI,RBX
            add R13,1
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R13,RBP
            jne .L_4326f0
.L_432721:

            movzx EAX,BYTE PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RIP+.L_432de8]
            mov ESI,DWORD PTR [RSP+40]
            mov DWORD PTR [RSP+44],EAX
            mov EDI,EAX
            xor EAX,EAX
            call .L_4012c0

            cmp QWORD PTR [RSP+32],0
            je .L_432944

            lea RBP,QWORD PTR [RSP+144]
            mov QWORD PTR [RSP+24],0
            mov R12D,80
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432770:

            mov RCX,QWORD PTR [RSP+24]
            mov R14,QWORD PTR [RSP+32]
            mov EAX,16
            mov R15,QWORD PTR [RSP+48]
            lea RBX,QWORD PTR [RBP+1]
            sub R14,RCX
            cmp R14,16
            cmova R14,RAX
            mov EAX,124
            add R15,RCX
            mov WORD PTR [RBP],AX
            xor R13D,R13D
            jmp .L_4327f1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4327a8:

            movzx R9D,BYTE PTR [R15+R13*1]
            lea R8,QWORD PTR [RIP+.L_432deb]
            mov RDI,RBX
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
.L_4327d5:

            mov RAX,RBX
            add R13,1
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            test R13B,7
            je .L_432820

            cmp R13,16
            je .L_43284e
.L_4327f1:

            mov RAX,RBX
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            cmp R14,R13
            ja .L_4327a8

            lea RDX,QWORD PTR [RIP+.L_432df1]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            jmp .L_4327d5
.L_432820:

            lea RDX,QWORD PTR [RIP+.L_432df5]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            mov RSI,R12
            mov RAX,RBX
            sub RAX,RBP
            sub RSI,RAX
            cmp R13,16
            jne .L_4327f1
.L_43284e:

            lea RDX,QWORD PTR [RIP+.L_432df8]
            mov RDI,RBX
            xor EAX,EAX
            xor R13D,R13D
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            mov QWORD PTR [RSP+16],R14
            add RBX,RAX
            mov R14,R13
            jmp .L_4328a6
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432880:

            lea RDX,QWORD PTR [RIP+.L_432dfd]
            mov RDI,RBX
            xor EAX,EAX
            add R14,1
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R14,16
            je .L_432915
.L_4328a6:

            mov RAX,RBX
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            cmp QWORD PTR [RSP+16],R14
            jbe .L_432880

            movzx R13D,BYTE PTR [R15+R14*1]
            mov QWORD PTR [RSP+8],RSI
            call __ctype_b_loc@PLT

            mov RAX,QWORD PTR [RAX]
            mov RSI,QWORD PTR [RSP+8]
            and R13D,127
            movsx RDX,R13B
            test BYTE PTR [RAX+RDX*2+1],64
            je .L_432880

            lea R8,QWORD PTR [RIP+.L_432dfa]
            mov RDI,RBX
            movsx R9D,R13B
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            add R14,1
            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R14,16
            jne .L_4328a6
.L_432915:

            mov ESI,DWORD PTR [RSP+40]
            mov EDI,DWORD PTR [RSP+44]
            lea RDX,QWORD PTR [RIP+.L_432de8]
            xor EAX,EAX
            mov RCX,RBP
            call .L_4012c0

            add QWORD PTR [RSP+24],16
            mov RAX,QWORD PTR [RSP+24]
            cmp QWORD PTR [RSP+32],RAX
            ja .L_432770
.L_432944:

            mov R13,QWORD PTR [RSP+56]
            mov EBP,72
            mov R12D,80
            mov RBX,R13
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432960:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_432dff]
            mov RSI,R12
            sub RAX,R13
            mov RDI,RBX
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            sub RBP,1
            jne .L_432960

            mov RCX,QWORD PTR [RSP+56]
            mov ESI,DWORD PTR [RSP+40]
            lea RDX,QWORD PTR [RIP+.L_432de8]
            mov EDI,DWORD PTR [RSP+44]
            xor EAX,EAX
            call .L_4012c0

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4329dd

            add RSP,248
.L_4329c3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4329ce:

            mov ESI,80
            mov RBX,QWORD PTR [RSP+56]
            jmp .L_4326a4
.L_4329dd:

            call __stack_chk_fail@PLT
.L_4329e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4329f0:

            cmp DIL,4
            movzx EDX,DIL
            lea RAX,QWORD PTR [RIP+.L_432e1a]
            ja .L_432a1f

            lea RCX,QWORD PTR [RIP+.L_433080]
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432a18:

            lea RAX,QWORD PTR [RIP+.L_432e01]
.L_432a1f:

            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432a28:

            lea RAX,QWORD PTR [RIP+.L_432e15]
            ret 
.L_432a30:

            lea RAX,QWORD PTR [RIP+.L_432e06]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432a40:

            lea RAX,QWORD PTR [RIP+.L_432e0b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432a50:

            lea RAX,QWORD PTR [RIP+.L_432e10]
            ret 
.L_432a58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432a60:

            cmp EDI,16
            ja .L_432b70

            lea RDX,QWORD PTR [RIP+.L_433094]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432a80:

            lea RAX,QWORD PTR [RIP+.L_432e1f]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432a90:

            lea RAX,QWORD PTR [RIP+.L_432e29]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432aa0:

            lea RAX,QWORD PTR [RIP+.L_432e3d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ab0:

            lea RAX,QWORD PTR [RIP+.L_432e47]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ac0:

            lea RAX,QWORD PTR [RIP+.L_432e51]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ad0:

            lea RAX,QWORD PTR [RIP+.L_432e5b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ae0:

            lea RAX,QWORD PTR [RIP+.L_432e65]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432af0:

            lea RAX,QWORD PTR [RIP+.L_432e6f]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432b00:

            lea RAX,QWORD PTR [RIP+.L_432e79]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432b10:

            lea RAX,QWORD PTR [RIP+.L_432e83]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b20:

            lea RAX,QWORD PTR [RIP+.L_432e8d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b30:

            lea RAX,QWORD PTR [RIP+.L_432e97]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b40:

            lea RAX,QWORD PTR [RIP+.L_432e33]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b50:

            lea RAX,QWORD PTR [RIP+.L_432ea1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b60:

            lea RAX,QWORD PTR [RIP+.L_432eab]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432b70:

            lea RAX,QWORD PTR [RIP+.L_432eb5]
            ret 
.L_432b78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432b80:

            cmp EDI,255
            ja .L_432dd0

            lea RDX,QWORD PTR [RIP+.L_4330d8]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0x90
.L_432ba0:

            lea RAX,QWORD PTR [RIP+.L_432ebf]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432bb0:

            lea RAX,QWORD PTR [RIP+.L_433051]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432bc0:

            lea RAX,QWORD PTR [RIP+.L_43305e]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432bd0:

            lea RAX,QWORD PTR [RIP+.L_433041]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432be0:

            lea RAX,QWORD PTR [RIP+.L_43302e]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432bf0:

            lea RAX,QWORD PTR [RIP+.L_433027]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c00:

            lea RAX,QWORD PTR [RIP+.L_433015]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c10:

            lea RAX,QWORD PTR [RIP+.L_43300a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c20:

            lea RAX,QWORD PTR [RIP+.L_432ffa]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c30:

            lea RAX,QWORD PTR [RIP+.L_432fef]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c40:

            lea RAX,QWORD PTR [RIP+.L_432fd4]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c50:

            lea RAX,QWORD PTR [RIP+.L_432fcc]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432c60:

            lea RAX,QWORD PTR [RIP+.L_432fc3]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c70:

            lea RAX,QWORD PTR [RIP+.L_432fa8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c80:

            lea RAX,QWORD PTR [RIP+.L_432f98]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432c90:

            lea RAX,QWORD PTR [RIP+.L_432f83]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ca0:

            lea RAX,QWORD PTR [RIP+.L_432f73]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432cb0:

            lea RAX,QWORD PTR [RIP+.L_432f63]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432cc0:

            lea RAX,QWORD PTR [RIP+.L_432f5c]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432cd0:

            lea RAX,QWORD PTR [RIP+.L_432f53]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432ce0:

            lea RAX,QWORD PTR [RIP+.L_432f3e]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432cf0:

            lea RAX,QWORD PTR [RIP+.L_432f38]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d00:

            lea RAX,QWORD PTR [RIP+.L_432f2b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d10:

            lea RAX,QWORD PTR [RIP+.L_432f1c]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d20:

            lea RAX,QWORD PTR [RIP+.L_432f16]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d30:

            lea RAX,QWORD PTR [RIP+.L_432f0c]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d40:

            lea RAX,QWORD PTR [RIP+.L_432eff]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d50:

            lea RAX,QWORD PTR [RIP+.L_432ef6]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d60:

            lea RAX,QWORD PTR [RIP+.L_432eea]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d70:

            lea RAX,QWORD PTR [RIP+.L_432ee4]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d80:

            lea RAX,QWORD PTR [RIP+.L_432edf]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d90:

            lea RAX,QWORD PTR [RIP+.L_432ed7]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432da0:

            lea RAX,QWORD PTR [RIP+.L_432ed0]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432db0:

            lea RAX,QWORD PTR [RIP+.L_432ecb]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432dc0:

            lea RAX,QWORD PTR [RIP+.L_432ec4]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432dd0:

            lea RAX,QWORD PTR [RIP+.L_43306c]
            ret 
.L_432dd8:
          .string "="
.L_432dda:
          .string "[%s len=%03u]"
.L_432de8:
          .string "%s"
.L_432deb:
          .string " %02X"
.L_432df1:
          .string " .."
.L_432df5:
          .string " |"
.L_432df8:
          .string " "
.L_432dfa:
          .string "%c"
.L_432dfd:
          .string "."
.L_432dff:
          .string "-"
.L_432e01:
          .string "NONE"
.L_432e06:
          .string "CRIT"
.L_432e0b:
          .string "WARN"
.L_432e10:
          .string "INFO"
.L_432e15:
          .string "DEBG"
.L_432e1a:
          .string "----"
.L_432e1f:
          .string "-API-----"
.L_432e29:
          .string "-MLE-----"
.L_432e33:
          .string "-COAP----"
.L_432e3d:
          .string "-ARP-----"
.L_432e47:
          .string "-N-DATA--"
.L_432e51:
          .string "-ICMP----"
.L_432e5b:
          .string "-IP6-----"
.L_432e65:
          .string "-MAC-----"
.L_432e6f:
          .string "-MEM-----"
.L_432e79:
          .string "-NCP-----"
.L_432e83:
          .string "-MESH-CP-"
.L_432e8d:
          .string "-DIAG----"
.L_432e97:
          .string "-PLAT----"
.L_432ea1:
          .string "-CORE----"
.L_432eab:
          .string "-UTIL----"
.L_432eb5:
          .string "---------"
.L_432ebf:
          .string "None"
.L_432ec4:
          .string "Failed"
.L_432ecb:
          .string "Drop"
.L_432ed0:
          .string "NoBufs"
.L_432ed7:
          .string "NoRoute"
.L_432edf:
          .string "Busy"
.L_432ee4:
          .string "Parse"
.L_432eea:
          .string "InvalidArgs"
.L_432ef6:
          .string "Security"
.L_432eff:
          .string "AddressQuery"
.L_432f0c:
          .string "NoAddress"
.L_432f16:
          .string "Abort"
.L_432f1c:
          .string "NotImplemented"
.L_432f2b:
          .string "InvalidState"
.L_432f38:
          .string "NoAck"
.L_432f3e:
          .string "ChannelAccessFailure"
.L_432f53:
          .string "Detached"
.L_432f5c:
          .string "FcsErr"
.L_432f63:
          .string "NoFrameReceived"
.L_432f73:
          .string "UnknownNeighbor"
.L_432f83:
          .string "InvalidSourceAddress"
.L_432f98:
          .string "AddressFiltered"
.L_432fa8:
          .string "DestinationAddressFiltered"
.L_432fc3:
          .string "NotFound"
.L_432fcc:
          .string "Already"
.L_432fd4:
          .string "Ipv6AddressCreationFailure"
.L_432fef:
          .string "NotCapable"
.L_432ffa:
          .string "ResponseTimeout"
.L_43300a:
          .string "Duplicated"
.L_433015:
          .string "ReassemblyTimeout"
.L_433027:
          .string "NotTmf"
.L_43302e:
          .string "NonLowpanDataFrame"
.L_433041:
          .string "DisabledFeature"
.L_433051:
          .string "GenericError"
.L_43305e:
          .string "LinkMarginLow"
.L_43306c:
          .string "UnknownErrorType"
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433080:
          .long .L_432a18-.L_433080
          .long .L_432a30-.L_433080
          .long .L_432a40-.L_433080
          .long .L_432a50-.L_433080
          .long .L_432a28-.L_433080
.L_433094:
          .long .L_432b70-.L_433094
          .long .L_432a80-.L_433094
          .long .L_432a90-.L_433094
          .long .L_432aa0-.L_433094
          .long .L_432ab0-.L_433094
          .long .L_432ac0-.L_433094
          .long .L_432ad0-.L_433094
          .long .L_432ae0-.L_433094
          .long .L_432af0-.L_433094
          .long .L_432b00-.L_433094
          .long .L_432b10-.L_433094
          .long .L_432b20-.L_433094
          .long .L_432b30-.L_433094
          .long .L_432b40-.L_433094
          .long .L_432b70-.L_433094
          .long .L_432b50-.L_433094
          .long .L_432b60-.L_433094
.L_4330d8:
          .long .L_432ba0-.L_4330d8
          .long .L_432dc0-.L_4330d8
          .long .L_432db0-.L_4330d8
          .long .L_432da0-.L_4330d8
          .long .L_432d90-.L_4330d8
          .long .L_432d80-.L_4330d8
          .long .L_432d70-.L_4330d8
          .long .L_432d60-.L_4330d8
          .long .L_432d50-.L_4330d8
          .long .L_432d40-.L_4330d8
          .long .L_432d30-.L_4330d8
          .long .L_432d20-.L_4330d8
          .long .L_432d10-.L_4330d8
          .long .L_432d00-.L_4330d8
          .long .L_432cf0-.L_4330d8
          .long .L_432ce0-.L_4330d8
          .long .L_432cd0-.L_4330d8
          .long .L_432cc0-.L_4330d8
          .long .L_432cb0-.L_4330d8
          .long .L_432ca0-.L_4330d8
          .long .L_432c90-.L_4330d8
          .long .L_432c80-.L_4330d8
          .long .L_432c70-.L_4330d8
          .long .L_432c60-.L_4330d8
          .long .L_432c50-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432c40-.L_4330d8
          .long .L_432c30-.L_4330d8
          .long .L_432c20-.L_4330d8
          .long .L_432c10-.L_4330d8
          .long .L_432c00-.L_4330d8
          .long .L_432bf0-.L_4330d8
          .long .L_432be0-.L_4330d8
          .long .L_432bd0-.L_4330d8
          .long .L_432bc0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432dd0-.L_4330d8
          .long .L_432bb0-.L_4330d8
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4334e0:

            jmp .L_402890
.L_4334e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4334f0:

            sub RSP,8
            call .L_402890

            add RSP,8
            add RAX,12400
            ret 
.L_433504:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433510:

            sub RSP,8
            call .L_402890

            add RSP,8
            add RAX,12720
            ret 
.L_433524:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433530:

            sub RSP,8
            call .L_402890

            add RSP,8
            add RAX,32
            ret 
.L_433542:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433550:

            mov ESI,DWORD PTR [RSI+8]
            mov ECX,DWORD PTR [RDI+8]
            mov EDI,ESI
            mov EAX,ECX
            sub ECX,ESI
            sub EDI,EDX
            sub EAX,EDX
            shr ECX,31
            mov EDX,EDI
            shr EAX,31
            shr EDX,31
            cmp AL,DL
            cmove EAX,ECX
            ret 
.L_433571:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433580:

            sub RSP,8
            call .L_4334e0

            add RSP,8
            add RAX,96
            ret 
.L_433592:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4335a0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            cmp QWORD PTR [RDI],0
            je .L_4335f8

            call QWORD PTR [RSI+16]

            mov EBP,EAX
            mov RAX,QWORD PTR [RBX]
            mov R13,QWORD PTR [R13]
            mov EDX,0
            mov RDI,RBX
            mov EAX,DWORD PTR [RAX+8]
            mov R12D,EAX
            sub R12D,EBP
            cmp EBP,EAX
            cmovns R12D,EDX
            call .L_4334e0

            add RSP,8
            mov EDX,R12D
            mov ESI,EBP
            pop RBX
            mov RDI,RAX
            mov RAX,R13
            pop RBP
            pop R12
            pop R13
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4335f8:

            mov RBP,QWORD PTR [RSI+8]
            call .L_4334e0

            add RSP,8
            mov RDI,RAX
            pop RBX
            mov RAX,RBP
            pop RBP
            pop R12
            pop R13
            jmp RAX
.L_433613:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433620:

            mov R8,QWORD PTR [RSI+16]
            cmp R8,RSI
            je .L_433670

            mov RCX,QWORD PTR [RDI]
            push RBX
            mov RBX,RSI
            cmp RCX,RSI
            je .L_433678

            test RCX,RCX
            je .L_433659

            mov RAX,QWORD PTR [RCX+16]
            cmp RSI,RAX
            jne .L_433654

            jmp .L_433660
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433648:

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RBX
            je .L_433663

            mov RAX,RDX
.L_433654:

            test RAX,RAX
            jne .L_433648
.L_433659:

            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
          .byte 0x90
.L_433660:

            mov RAX,RCX
.L_433663:

            mov QWORD PTR [RAX+16],R8
            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433670:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433678:

            mov QWORD PTR [RDI],R8
            mov RSI,RDX
            call .L_4335a0

            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
.L_433689:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433690:

            push RBX
            mov RBX,RDI
            call .L_4334e0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+96]
            lea RDX,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_433620
.L_4336ad:

            nop
            nop
            nop
.L_4336b0:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_4336be:

            mov RBX,RDX
            xor EBP,EBP
            call .L_433620

            mov R13,QWORD PTR [R12]
            test R13,R13
            jne .L_4336db

            jmp .L_433740
            nop
            nop
            nop
            nop
            nop
.L_4336d8:

            mov R13,RAX
.L_4336db:

            call QWORD PTR [RBX+16]

            mov ESI,DWORD PTR [R13+8]
            mov EDX,DWORD PTR [R14+8]
            mov EDI,ESI
            mov ECX,EDX
            sub EDX,ESI
            sub EDI,EAX
            sub ECX,EAX
            shr EDX,31
            mov EAX,EDI
            shr ECX,31
            shr EAX,31
            cmp CL,AL
            cmovne EDX,ECX
            test DL,DL
            jne .L_433728

            mov RAX,QWORD PTR [R13+16]
            mov RBP,R13
            test RAX,RAX
            jne .L_4336d8

            mov QWORD PTR [R13+16],R14
            mov QWORD PTR [R14+16],0
            pop RBX
.L_43371d:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433728:

            test RBP,RBP
            je .L_433760

            mov QWORD PTR [R14+16],R13
            mov QWORD PTR [RBP+16],R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_433740:

            mov QWORD PTR [R12],R14
            mov QWORD PTR [R14+16],0
.L_43374c:

            mov RSI,RBX
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_4335a0
          .byte 0x90
.L_433760:

            mov RAX,QWORD PTR [R12]
            mov QWORD PTR [R14+16],RAX
            mov QWORD PTR [R12],R14
            jmp .L_43374c
.L_43376e:

            nop
            nop
.L_433770:

            test EDX,EDX
            push RBX
            js .L_433796

            add EDX,ESI
            mov RBX,RDI
            mov DWORD PTR [RDI+8],EDX
            call .L_4334e0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+96]
            lea RDX,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_4336b0
.L_433796:

            lea RCX,QWORD PTR [RIP+.L_433880]
            lea RSI,QWORD PTR [RIP+.L_433851]
            lea RDI,QWORD PTR [RIP+.L_433862]
            mov EDX,74
            call __assert_fail@PLT
.L_4337b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4337c0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            mov RBX,QWORD PTR [RDI]
            test RBX,RBX
            je .L_433808

            mov R13D,DWORD PTR [RBX+8]
            call QWORD PTR [RSI+16]

            cmp EAX,R13D
            js .L_433808

            mov RDI,RBP
            mov RDX,R12
            mov RSI,RBX
            call .L_433620

            mov RAX,QWORD PTR [RBX]
            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433808:

            add RSP,8
            mov RSI,R12
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4335a0
.L_43381d:

            nop
            nop
            nop
.L_433820:

            sub EDI,ESI
            mov EAX,EDI
            shr EAX,31
            ret 
.L_433828:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433830:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            jne .L_433840

            pop RBX
            ret 
          .byte 0x90
.L_433840:

            lea RDI,QWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_4337c0
.L_433851:
          .string "common/timer.cpp"
.L_433862:
          .string "aDt <= kMaxDt"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433880:
          .string "void ot::TimerMilli::StartAt(uint32_t, uint32_t)"
# WARNING: found overlapping blocks at address 3366d
# WARNING: found overlapping blocks at address 3366f
# WARNING: found overlapping blocks at address 3367c

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4338c0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_4338ce:

            movzx R13D,WORD PTR [RDI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDI+60]
            mov QWORD PTR [RSP+24],RDX
            xor EDX,EDX
            mov WORD PTR [RSP+38],DX
            mov R15,RAX
            add RAX,2
            cmp RAX,R13
            ja .L_4339b0

            lea RAX,QWORD PTR [RSP+38]
.L_433908:

            mov RBX,RDI
            mov EBP,ESI
            mov R12,R13
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+36]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_433953
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433928:

            add EAX,2
            movzx EDX,R12W
            lea R8D,DWORD PTR [R14+RAX*1]
            cmp R8D,EDX
            ja .L_4339b0
.L_433938:

            cmp BPL,BYTE PTR [RSP+38]
            je .L_4339d8

            add R15D,EAX
            movzx EAX,R15W
            add RAX,2
            cmp RAX,R13
            ja .L_4339b0
.L_433953:

            mov RCX,QWORD PTR [RSP+8]
            movzx R14D,R15W
            mov EDX,2
            mov ESI,R14D
            mov RDI,RBX
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+39]
            cmp AL,255
            jne .L_433928

            lea ESI,DWORD PTR [R15+2]
            mov RCX,QWORD PTR [RSP+16]
            mov EDX,2
            mov RDI,RBX
            movzx ESI,SI
            call .L_4038b0

            cmp AX,2
            jne .L_4339b0

            movzx EAX,WORD PTR [RSP+36]
            movzx EDX,R12W
            rol AX,8
            movzx EAX,AX
            add EAX,4
            lea R8D,DWORD PTR [R14+RAX*1]
            cmp R8D,EDX
            jbe .L_433938
.L_4339b0:

            mov EAX,23
.L_4339b5:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4339e5

            add RSP,56
.L_4339c9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4339d8:

            mov RAX,QWORD PTR [RSP+24]
            mov WORD PTR [RAX],R15W
            xor EAX,EAX
            jmp .L_4339b5
.L_4339e5:

            call __stack_chk_fail@PLT
.L_4339ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4339f0:

            push R13
            push R12
            movzx ESI,SIL
            push RBP
            push RBX
            mov EBX,EDX
            mov RBP,RDI
            mov R12,RCX
            sub RSP,24
.L_433a06:

            lea RDX,QWORD PTR [RSP+6]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4338c0

            test EAX,EAX
            mov R13D,EAX
            jne .L_433a68

            movzx ESI,WORD PTR [RSP+6]
            mov RCX,R12
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EDX,BYTE PTR [R12+1]
            movzx ECX,BX
            movzx ESI,WORD PTR [RSP+6]
            mov RDI,RBP
            mov RAX,RDX
            add RDX,2
            add EAX,2
            cmp RCX,RDX
            mov RCX,R12
            cmova EBX,EAX
            movzx EDX,BX
            call .L_4038b0
.L_433a68:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_433a86

            add RSP,24
.L_433a7f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_433a86:

            call __stack_chk_fail@PLT
.L_433a8b:

            nop
            nop
            nop
            nop
            nop
.L_433a90:

            push R15
            push R14
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_433aa4:

            movzx EBX,WORD PTR [RDI+60]
            movzx R12D,WORD PTR [RDI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov WORD PTR [RSP+38],AX
            lea RAX,QWORD PTR [RSP+38]
            mov R15,RBX
            add RBX,2
            mov R14,R12
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+36]
            cmp R12,RBX
            mov QWORD PTR [RSP+8],RAX
            jae .L_433b28

            jmp .L_433b98
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433af8:

            movzx EDX,R14W
            movzx EDI,SI
            movzx ECX,AX
            sub EDX,EDI
            cmp ECX,EDX
            jg .L_433b98
.L_433b0c:

            cmp R13B,BYTE PTR [RSP+38]
            je .L_433bc0

            lea R15D,DWORD PTR [RSI+RAX*1]
            movzx EBX,R15W
            add RBX,2
            cmp RBX,R12
            ja .L_433b98
.L_433b28:

            mov RCX,QWORD PTR [RSP]
            movzx ESI,R15W
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,BYTE PTR [RSP+39]
            lea ESI,DWORD PTR [R15+2]
            cmp AX,255
            mov WORD PTR [RSP+36],AX
            jne .L_433af8

            add RBX,2
            cmp RBX,R12
            ja .L_433b98

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,SI
            mov EDX,2
            mov RDI,RBP
            call .L_4038b0

            movzx EAX,WORD PTR [RSP+36]
            lea ESI,DWORD PTR [R15+4]
            movzx EDX,R14W
            movzx EDI,SI
            sub EDX,EDI
            rol AX,8
            movzx ECX,AX
            mov WORD PTR [RSP+36],AX
            cmp ECX,EDX
            jle .L_433b0c

            nop
            nop
            nop
.L_433b98:

            mov EAX,23
.L_433b9d:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            jne .L_433bd4

            add RSP,56
.L_433bb1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433bc0:

            mov RDI,QWORD PTR [RSP+16]
            mov WORD PTR [RDI],SI
            mov RDI,QWORD PTR [RSP+24]
            mov WORD PTR [RDI],AX
            xor EAX,EAX
            jmp .L_433b9d
.L_433bd4:

            call __stack_chk_fail@PLT
.L_433bd9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433be0:

            lea RAX,QWORD PTR [RIP+.L_433e50]
            mov DWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],RDI
            mov QWORD PTR [RDI+24],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI],RAX
            mov QWORD PTR [RDI+36],0
            mov DWORD PTR [RDI+44],1
            mov QWORD PTR [RDI+48],RDX
            mov QWORD PTR [RDI+56],RCX
            ret 
.L_433c1c:

            nop
            nop
            nop
            nop
.L_433c20:

            cmp DWORD PTR [RDI+44],1
            setne AL
            ret 
.L_433c28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433c30:

            mov DWORD PTR [RDI+44],1
            jmp .L_433690
.L_433c3c:

            nop
            nop
            nop
            nop
.L_433c40:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_433c47:

            mov EBX,DWORD PTR [RDI+36]
            mov DWORD PTR [RDI+44],2
            cmp EBX,1
            jbe .L_433c98

            mov EAX,DWORD PTR [RDI+32]
            cmp EAX,2
            je .L_433ca8

            cmp EAX,1
            je .L_433c79

            mov R12D,EBX
            shr R12D,1
            call .L_401460

            sub EBX,R12D
            xor EDX,EDX
            div EBX
            lea EBX,DWORD PTR [RDX+R12*1]
.L_433c79:

            mov DWORD PTR [RBP+40],EBX
.L_433c7c:

            call .L_401240

            mov EDX,EBX
            mov RDI,RBP
            mov ESI,EAX
            pop RBX
.L_433c89:

            pop RBP
            pop R12
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433c98:

            mov DWORD PTR [RDI+40],0
            xor EBX,EBX
            jmp .L_433c7c

            nop
            nop
            nop
            nop
            nop
.L_433ca8:

            call .L_401460

            xor EDX,EDX
            div EBX
            mov EBX,EDX
            mov DWORD PTR [RBP+40],EDX
            jmp .L_433c7c
.L_433cb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433cc0:

            push RBP
            push RBX
            sub RSP,24
            cmp DWORD PTR [RDI+44],1
            jne .L_433d16

            cmp ESI,EDX
            mov EBP,ESI
            mov EBX,EDX
            mov DWORD PTR [RDI+24],ESI
            mov DWORD PTR [RDI+28],EDX
            mov DWORD PTR [RDI+32],ECX
            je .L_433d08

            mov QWORD PTR [RSP+8],RDI
            sub EBX,EBP
            call .L_401460

            xor EDX,EDX
            mov RDI,QWORD PTR [RSP+8]
            div EBX
            add EDX,EBP
            mov DWORD PTR [RDI+36],EDX
            add RSP,24
            pop RBX
            pop RBP
            jmp .L_433c40
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433d08:

            mov DWORD PTR [RDI+36],ESI
            add RSP,24
            pop RBX
            pop RBP
            jmp .L_433c40
.L_433d16:

            lea RCX,QWORD PTR [RIP+.L_433ee0]
            lea RSI,QWORD PTR [RIP+.L_433e55]
            lea RDI,QWORD PTR [RIP+.L_433e6e]
            mov EDX,72
            call __assert_fail@PLT
.L_433d35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433d40:

            cmp DWORD PTR [RDI+44],1
            je .L_433d68

            mov EAX,DWORD PTR [RDI+24]
            cmp DWORD PTR [RDI+36],EAX
            je .L_433d68

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI+36],EAX
            call .L_433690

            mov RDI,RBX
            pop RBX
            jmp .L_433c40
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433d68:

            ret 
.L_433d6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_433d70:

            push R12
            push RBP
            push RBX
.L_433d74:

            mov EAX,DWORD PTR [RDI+44]
            mov RBX,RDI
            mov DWORD PTR [RDI+44],1
            cmp EAX,2
            je .L_433dc8

            cmp EAX,3
            jne .L_433e25

            mov EDX,DWORD PTR [RDI+36]
            lea EAX,DWORD PTR [RDX+RDX*1]
            test EDX,EDX
            mov EDX,1
            cmove EAX,EDX
            cmp DWORD PTR [RDI+28],EAX
            cmovbe EAX,DWORD PTR [RDI+28]
            mov DWORD PTR [RDI+36],EAX
            mov RAX,QWORD PTR [RDI+56]
            test RAX,RAX
            je .L_433db8

            call RAX

            test AL,AL
            je .L_433e00
.L_433db8:

            mov RDI,RBX
            pop RBX
.L_433dbc:

            pop RBP
            pop R12
            jmp .L_433c40
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433dc8:

            call QWORD PTR [RDI+48]

            test AL,AL
            je .L_433e00

            cmp DWORD PTR [RBX+32],1
            je .L_433e08

            mov EBP,DWORD PTR [RBX+36]
            sub EBP,DWORD PTR [RBX+40]
            mov DWORD PTR [RBX+44],3
            call .L_401240

            mov RDI,RBX
            mov ESI,EAX
            pop RBX
            mov EDX,EBP
            pop RBP
            pop R12
            jmp .L_433770
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433e00:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433e08:

            mov EBP,DWORD PTR [RBX+28]
            mov R12D,DWORD PTR [RBX+24]
            call .L_401460

            xor EDX,EDX
            mov ECX,EBP
            sub ECX,R12D
            div ECX
            add EDX,R12D
            mov DWORD PTR [RBX+36],EDX
            jmp .L_433db8
.L_433e25:

            lea RCX,QWORD PTR [RIP+.L_433ea0]
            lea RSI,QWORD PTR [RIP+.L_433e55]
            lea RDI,QWORD PTR [RIP+.L_433e7b]
            mov EDX,236
            call __assert_fail@PLT
.L_433e44:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433e50:

            jmp .L_433d70
.L_433e55:
          .string "common/trickle_timer.cpp"
.L_433e6e:
          .string "!IsRunning()"
.L_433e7b:
          .string "false"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x90
.L_433ea0:

            jbe .L_433f11

            imul ESP,DWORD PTR [RAX+111],1413102196
            jb .L_433f15
          .byte 0x63
          .byte 0x6b
          .byte 0x6c
          .byte 0x65
          .byte 0x54
          .byte 0x69
          .byte 0x6d
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x54
          .byte 0x69
          .byte 0x6d
          .byte 0x65
          .byte 0x72
          .byte 0x46
          .byte 0x69
          .byte 0x72
          .byte 0x65
          .byte 0x64
          .byte 0x28
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433ee0:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x54
          .byte 0x72
          .byte 0x69
          .byte 0x63
          .byte 0x6b
          .byte 0x6c
          .byte 0x65
          .byte 0x54
          .byte 0x69
          .byte 0x6d
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x53
          .byte 0x74
          .byte 0x61
          .byte 0x72
          .byte 0x74
          .byte 0x28
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33
          .byte 0x32
          .byte 0x5f
          .byte 0x74
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33
          .byte 0x32
          .byte 0x5f
          .byte 0x74
          .byte 0x2c
          .byte 0x20
.L_433f11:

            outsd DX,DWORD PTR [RSI]
            je .L_433f4e
          .byte 0x3a
.L_433f15:

            push RSP
            jb .L_433f81
          .byte 0x63
          .byte 0x6b
          .byte 0x6c
          .byte 0x65
          .byte 0x54
          .byte 0x69
          .byte 0x6d
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x6f
          .byte 0x64
          .byte 0x65
          .byte 0x29
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433f30:

            shl EDX,3
            sub RSP,8
            movzx EDX,DX
            call .L_434790

            xor EAX,EAX
            add RSP,8
            ret 
.L_433f46:
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433f4e:

            add BYTE PTR [RAX],AL
.L_433f50:

            push R15
            push R14
            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            and R12D,4294967294
            mov EBP,R9D
            sub RSP,24
.L_433f68:

            cmp R12B,16
            ja .L_434168

            cmp R12B,3
            mov EAX,7
            jbe .L_434153
.L_433f81:

            movzx EAX,R12B
            sub EAX,2
            sar EAX,1
            test EDX,EDX
            lea R10D,DWORD PTR [RAX*8]
            jne .L_43417c
.L_433f9a:

            cmp R9B,13
            ja .L_434210

            mov EAX,2
            mov ECX,2
            nop
            nop
.L_433fb0:

            movzx R11D,R9B
            mov EBX,15
            sub EBX,R11D
            cmp EBX,EAX
            jle .L_433fcb

            mov ECX,15
            sub ECX,R9D
            movzx EAX,CL
.L_433fcb:

            mov R9D,15
            sub R9D,EAX
            mov EAX,15
            sub EAX,ECX
            cmp R9D,R11D
            cmovl EBP,EAX
.L_433fe1:

            test ESI,ESI
            lea R13D,DWORD PTR [RCX-1]
            setne AL
            shl EAX,6
            mov R9D,EAX
            mov EAX,R10D
            or EAX,R13D
            or EAX,R9D
            test BPL,BPL
            mov BYTE PTR [RDI+288],AL
            je .L_43402d

            lea R9D,DWORD PTR [RBP-1]
            xor EAX,EAX
            movzx R9D,R9B
            add R9,1
            nop
            nop
            nop
            nop
            nop
            nop
.L_434018:

            movzx ECX,BYTE PTR [R8+RAX*1]
            mov BYTE PTR [RDI+RAX*1+289],CL
            add RAX,1
            cmp RAX,R9
            jne .L_434018
.L_43402d:

            lea R10,QWORD PTR [RDI+303]
            mov R9D,EDX
            mov EAX,15
            nop
            nop
            nop
            nop
.L_434040:

            sub EAX,1
            mov BYTE PTR [R10],R9B
            shr R9D,8
            sub R10,1
            cmp BPL,AL
            jb .L_434040

            mov DWORD PTR [RSP+12],ESI
            lea RSI,QWORD PTR [RDI+288]
            mov R15D,EDX
            mov R14,R8
            mov RBX,RDI
            mov RDX,RSI
            call .L_4347a0

            mov ECX,DWORD PTR [RSP+12]
            xor R8D,R8D
            test ECX,ECX
            je .L_4340af

            mov ESI,ECX
            movzx EDX,BYTE PTR [RBX+288]
            movzx EAX,BYTE PTR [RBX+289]
            shr ESI,8
            cmp ECX,65279
            ja .L_4341b8

            xor EDX,ESI
            xor EAX,ECX
            mov R8D,2
            mov BYTE PTR [RBX+288],DL
            mov BYTE PTR [RBX+289],AL
.L_4340af:

            test BPL,BPL
            mov BYTE PTR [RBX+304],R13B
            je .L_434202
.L_4340bf:

            lea ESI,DWORD PTR [RBP-1]
            xor EAX,EAX
            movzx ESI,SIL
            add RSI,1
            nop
            nop
            nop
            nop
.L_4340d0:

            movzx EDX,BYTE PTR [R14+RAX*1]
            mov BYTE PTR [RBX+RAX*1+305],DL
            add RAX,1
            cmp RSI,RAX
            jne .L_4340d0

            lea EAX,DWORD PTR [RBP+1]
            cmp AL,16
            je .L_43410e
.L_4340ec:

            movzx EDX,AL
            lea RDI,QWORD PTR [RBX+RDX*1+304]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434100:

            add EAX,1
            mov BYTE PTR [RDI],0
            add RDI,1
            cmp AL,16
            jne .L_434100
.L_43410e:

            mov EAX,16
            mov BYTE PTR [RBX+336],BPL
            mov DWORD PTR [RBX+340],ECX
            mov WORD PTR [RBX+358],AX
            mov DWORD PTR [RBX+344],0
            xor EAX,EAX
            mov DWORD PTR [RBX+348],R15D
            mov DWORD PTR [RBX+352],0
            mov WORD PTR [RBX+356],R8W
            mov BYTE PTR [RBX+360],R12B
.L_434153:

            add RSP,24
.L_434157:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434168:

            test EDX,EDX
            mov R10D,56
            mov R12D,16
            je .L_433f9a
.L_43417c:

            mov EAX,EDX
            xor ECX,ECX
.L_434180:

            shr EAX,8
            add ECX,1
            test EAX,EAX
            jne .L_434180

            cmp CL,2
            mov EAX,2
            cmovb ECX,EAX
            cmp R9B,13
            movzx EAX,CL
            jbe .L_433fb0

            mov EBP,13
            mov R11D,13
            jmp .L_433fcb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4341b8:

            xor EAX,4294967294
            not EDX
            xor BYTE PTR [RBX+292],SIL
            mov BYTE PTR [RBX+289],AL
            mov EAX,ECX
            xor BYTE PTR [RBX+293],CL
            shr EAX,24
            xor BYTE PTR [RBX+290],AL
            mov EAX,ECX
            shr EAX,16
            xor BYTE PTR [RBX+291],AL
            test BPL,BPL
            mov R8D,6
            mov BYTE PTR [RBX+288],DL
            mov BYTE PTR [RBX+304],R13B
            jne .L_4340bf
.L_434202:

            mov EAX,1
            jmp .L_4340ec
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434210:

            mov ECX,2
            mov EBP,13
            jmp .L_433fe1
.L_43421f:

            nop
.L_434220:

            push R14
            push R13
            mov R13D,EDX
            push R12
            push RBP
            push RBX
.L_43422b:

            mov EAX,DWORD PTR [RDI+344]
            add EAX,EDX
            mov EDX,DWORD PTR [RDI+340]
            cmp EAX,EDX
            ja .L_43430c

            test R13D,R13D
            mov RBX,RDI
            je .L_4342bf

            lea EAX,DWORD PTR [R13-1]
            movzx EDX,WORD PTR [RDI+356]
            mov RBP,RSI
            lea R14,QWORD PTR [RDI+288]
            lea R12,QWORD PTR [RSI+RAX*1+1]
            jmp .L_434290
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_434268:

            movzx EAX,DX
            add EDX,1
.L_43426e:

            mov WORD PTR [RBX+356],DX
            movzx ECX,BYTE PTR [RBX+RAX*1+288]
            add RBP,1
            xor CL,BYTE PTR [RBP-1]
            cmp RBP,R12
            mov BYTE PTR [RBX+RAX*1+288],CL
            je .L_4342b0
.L_434290:

            cmp DX,16
            jne .L_434268

            mov RDX,R14
            mov RSI,R14
            mov RDI,RBX
            call .L_4347a0

            xor EAX,EAX
            mov EDX,1
            jmp .L_43426e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4342b0:

            mov EAX,DWORD PTR [RBX+344]
            mov EDX,DWORD PTR [RBX+340]
            add EAX,R13D
.L_4342bf:

            cmp EAX,EDX
            mov DWORD PTR [RBX+344],EAX
            je .L_4342d8

            pop RBX
.L_4342ca:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4342d8:

            cmp WORD PTR [RBX+356],0
            jne .L_4342f8
.L_4342e2:

            xor EAX,EAX
            mov WORD PTR [RBX+356],AX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4342f8:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov RDX,RSI
            call .L_4347a0

            jmp .L_4342e2
.L_43430c:

            lea RCX,QWORD PTR [RIP+.L_434740]
            lea RSI,QWORD PTR [RIP+.L_43461d]
            lea RDI,QWORD PTR [RIP+.L_434630]
            mov EDX,176
            call __assert_fail@PLT
.L_43432b:

            nop
            nop
            nop
            nop
            nop
.L_434330:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_434341:

            mov EAX,DWORD PTR [RDI+352]
            add EAX,ECX
            mov ECX,DWORD PTR [RDI+348]
            cmp EAX,ECX
            ja .L_43454a

            test R15D,R15D
            mov RBX,RDI
            je .L_4344bf

            lea EAX,DWORD PTR [R15-1]
            mov R14D,R8D
            mov R12,RSI
            mov R13,RDX
            lea RBP,QWORD PTR [RSI+RAX*1+1]
            jmp .L_4343cf
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434380:

            cdqe 
            movzx R8D,BYTE PTR [R12]
            mov WORD PTR [RBX+358],DX
            movzx ECX,BYTE PTR [RBX+RAX*1+320]
            xor ECX,R8D
            mov BYTE PTR [R13],CL
            movzx EAX,WORD PTR [RBX+356]
            cmp AX,16
            je .L_43440b
.L_4343aa:

            lea EDX,DWORD PTR [RAX+1]
.L_4343ad:

            cdqe 
            add R12,1
            mov WORD PTR [RBX+356],DX
            add R13,1
            xor BYTE PTR [RBX+RAX*1+288],R8B
            cmp R12,RBP
            je .L_4344b0
.L_4343cf:

            movzx EAX,WORD PTR [RBX+358]
            cmp AX,16
            lea EDX,DWORD PTR [RAX+1]
            je .L_434438
.L_4343df:

            test R14B,R14B
            jne .L_434380

            movzx R8D,BYTE PTR [R13]
            cdqe 
            mov WORD PTR [RBX+358],DX
            xor R8B,BYTE PTR [RBX+RAX*1+320]
            mov BYTE PTR [R12],R8B
            movzx EAX,WORD PTR [RBX+356]
            cmp AX,16
            jne .L_4343aa
.L_43440b:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov BYTE PTR [RSP+15],R8B
            mov RDX,RSI
            call .L_4347a0

            xor EAX,EAX
            mov EDX,1
            movzx R8D,BYTE PTR [RSP+15]
            jmp .L_4343ad
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434438:

            movzx EDX,BYTE PTR [RBX+336]
            cmp DL,14
            ja .L_43447e

            add BYTE PTR [RBX+319],1
            jne .L_43447e

            lea RAX,QWORD PTR [RBX+318]
            mov ECX,14
            sub ECX,EDX
            mov RSI,RAX
            sub RSI,RCX
            jmp .L_434479
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434468:

            movzx EDI,BYTE PTR [RAX]
            sub RAX,1
            lea EDX,DWORD PTR [RDI+1]
            mov BYTE PTR [RAX+1],DL
            test DL,DL
            jne .L_43447e
.L_434479:

            cmp RSI,RAX
            jne .L_434468
.L_43447e:

            lea RDX,QWORD PTR [RBX+320]
            lea RSI,QWORD PTR [RBX+304]
            mov RDI,RBX
            call .L_4347a0

            xor EAX,EAX
            mov EDX,1
            mov WORD PTR [RBX+358],AX
            xor EAX,EAX
            jmp .L_4343df
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4344b0:

            mov EAX,DWORD PTR [RBX+352]
            mov ECX,DWORD PTR [RBX+348]
            add EAX,R15D
.L_4344bf:

            cmp EAX,ECX
            mov DWORD PTR [RBX+352],EAX
            jb .L_434514

            cmp WORD PTR [RBX+356],0
            jne .L_434528

            movzx ESI,BYTE PTR [RBX+336]
            lea EAX,DWORD PTR [RSI+1]
            cmp AL,15
            ja .L_434514
.L_4344e1:

            movzx EDX,AL
            mov ECX,14
            lea RAX,QWORD PTR [RBX+RDX*1+304]
            sub ECX,ESI
            lea RDX,QWORD PTR [RBX+RDX*1+305]
            movzx ECX,CL
            add RDX,RCX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434508:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RDX,RAX
            jne .L_434508
.L_434514:

            add RSP,24
.L_434518:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434528:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov RDX,RSI
            call .L_4347a0

            movzx ESI,BYTE PTR [RBX+336]
            lea EAX,DWORD PTR [RSI+1]
            cmp AL,15
            jbe .L_4344e1

            jmp .L_434514
.L_43454a:

            lea RCX,QWORD PTR [RIP+.L_434700]
            lea RSI,QWORD PTR [RIP+.L_43461d]
            lea RDI,QWORD PTR [RIP+.L_434660]
            mov EDX,210
            call __assert_fail@PLT
.L_434569:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434570:

            push R12
            push RBP
            push RBX
            mov EAX,DWORD PTR [RDI+348]
            cmp DWORD PTR [RDI+352],EAX
            jne .L_4345fe

            cmp BYTE PTR [RDI+360],0
            mov RBX,RDI
            mov R12,RDX
            jne .L_4345b0
.L_434591:

            test R12,R12
            je .L_4345a1

            movzx EAX,BYTE PTR [RBX+360]
            mov BYTE PTR [R12],AL
.L_4345a1:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4345b0:

            mov RBP,RSI
            lea RDX,QWORD PTR [RDI+320]
            lea RSI,QWORD PTR [RDI+304]
            call .L_4347a0

            cmp BYTE PTR [RBX+360],0
            je .L_434591

            mov EAX,1
            nop
            nop
            nop
            nop
.L_4345d8:

            movzx EDX,BYTE PTR [RBX+RAX*1+287]
            xor DL,BYTE PTR [RBX+RAX*1+319]
            mov BYTE PTR [RBP+RAX*1-1],DL
            movzx ECX,BYTE PTR [RBX+360]
            mov EDX,EAX
            add RAX,1
            cmp ECX,EDX
            jg .L_4345d8

            jmp .L_434591
.L_4345fe:

            lea RCX,QWORD PTR [RIP+.L_4346c0]
            lea RSI,QWORD PTR [RIP+.L_43461d]
            lea RDI,QWORD PTR [RIP+.L_434688]
            mov EDX,269
            call __assert_fail@PLT
.L_43461d:
          .string "crypto/aes_ccm.cpp"
.L_434630:
          .string "mHeaderCur + aHeaderLength <= mHeaderLength"
          .zero 4
.L_434660:
          .string "mPlainTextCur + len <= mPlainTextLength"
.L_434688:
          .string "mPlainTextCur == mPlainTextLength"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_4346c0:
          .string "void ot::Crypto::AesCcm::Finalize(void*, uint8_t*)"
# WARNING: found overlapping blocks at address 34492
# WARNING: found overlapping blocks at address 3449c
          .zero 13
.L_434700:
          .string "void ot::Crypto::AesCcm::Payload(void*, void*, uint32_t, bool)"
# WARNING: found overlapping blocks at address 344d2
# WARNING: found overlapping blocks at address 344dc
          .zero 1
.L_434740:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
.L_434745:

            outsd DX,DWORD PTR [RSI]
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x43
          .byte 0x72
          .byte 0x79
          .byte 0x70
          .byte 0x74
          .byte 0x6f

            cmp BH,BYTE PTR [RDX]
            jae .L_434798
          .byte 0x63
          .byte 0x6d
          .byte 0x3a
          .byte 0x3a
          .byte 0x48
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x28
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x2a
          .byte 0x2c
          .byte 0x20
          .byte 0x75
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x33

            xor BL,BYTE PTR [RDI+116]
            sub DWORD PTR [RAX],EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434780:

            jmp .L_444760
.L_434785:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434790:

            movzx EDX,DX
            jmp .L_4447b0
.L_434798:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4347a0:

            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            jmp .L_445520
.L_4347b0:

            jmp .L_444790
.L_4347b5:
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0

            nop
.L_4347c0:

            push RBX
            mov RBX,RDI
            call .L_443690

            mov EDI,6
            call .L_443660

            mov RDI,RBX
            mov EDX,1
            mov RSI,RAX
            pop RBX
            jmp .L_443760
.L_4347e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4347f0:

            jmp .L_4436a0
.L_4347f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434800:

            movzx EDX,DX
            jmp .L_4438a0
.L_434808:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434810:

            movzx EDX,DX
            jmp .L_4439f0
.L_434818:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434820:

            jmp .L_443a30
.L_434825:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434830:

            jmp .L_443e00
.L_434835:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434840:

            jmp .L_443e30
.L_434845:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434850:

            xor ESI,ESI
            jmp .L_443ea0
.L_434857:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434860:

            movzx EDX,DX
            jmp .L_444340
.L_434868:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434870:

            jmp .L_444360
.L_434875:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434880:

            ret 
.L_434882:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434890:

            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDX
            sub RSP,8
            call .L_433510

            test BYTE PTR [RBX],48
            je .L_4348b0

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4348b0:

            add RSP,8
            mov RCX,RBP
            mov RDX,RBX
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+216]
            mov ESI,68
            jmp .L_430ae0
.L_4348cd:

            nop
            nop
            nop
.L_4348d0:

            test BYTE PTR [RSI],48
            jne .L_4348db

            cmp BYTE PTR [RSI+1],2
            je .L_4348e0
.L_4348db:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4348e0:

            mov RDX,RCX
            jmp .L_434890
.L_4348e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4348f0:

            ret 
.L_4348f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434900:

            push RBP
            lea RAX,QWORD PTR [RIP+.L_4353b0]
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_434913:

            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RDI+120]
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+112],0
            mov QWORD PTR [RDI+136],RAX
            lea RAX,QWORD PTR [RIP+.L_435ad0]
            mov DWORD PTR [RDI+128],0
            mov DWORD PTR [RDI+152],0
            mov BYTE PTR [RDI+170],0
            mov QWORD PTR [RDI+144],RAX
            lea RAX,QWORD PTR [RDI+144]
            mov QWORD PTR [RDI+160],RAX
            xor EAX,EAX
            mov WORD PTR [RDI+168],AX
            lea RAX,QWORD PTR [RIP+.L_436573]
            mov QWORD PTR [RDI+176],RAX
            lea RAX,QWORD PTR [RIP+.L_435e50]
            mov QWORD PTR [RDI+184],RAX
            lea RAX,QWORD PTR [RIP+.L_436578]
            mov QWORD PTR [RBX+192],RDI
            mov QWORD PTR [RDI+200],0
            mov QWORD PTR [RDI+208],RAX
            lea RAX,QWORD PTR [RIP+.L_4348d0]
            mov QWORD PTR [RDI+216],RAX
            lea RAX,QWORD PTR [RIP+.L_43657d]
            mov QWORD PTR [RBX+224],RDI
            mov QWORD PTR [RDI+232],0
            mov QWORD PTR [RDI+240],RAX
            lea RAX,QWORD PTR [RIP+.L_4361c0]
            mov QWORD PTR [RDI+248],RAX
            mov QWORD PTR [RBX+256],RDI
            lea RDI,QWORD PTR [RDI+272]
            mov QWORD PTR [RDI-8],0
            call .L_4432f0

            lea RDI,QWORD PTR [RBX+280]
            mov RSI,RBP
            call .L_439080

            lea RDI,QWORD PTR [RBX+328]
            mov RSI,RBP
            call .L_43aa50

            lea RDI,QWORD PTR [RBX+12]
            mov QWORD PTR [RBX+4],0
            mov QWORD PTR [RBX+92],0
            xor EAX,EAX
            and RDI,-8
            sub EBX,EDI
            lea ECX,DWORD PTR [RBX+100]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            add RSP,8
.L_434a49:

            pop RBX
            pop RBP
            ret 
.L_434a4c:

            nop
            nop
            nop
            nop
.L_434a50:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_433510

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+176]
            mov RBP,RAX
            mov RDI,R12
            call .L_42f860

            lea RSI,QWORD PTR [RBX+208]
            mov RDI,R12
            call .L_42f860

            lea RSI,QWORD PTR [RBX+240]
            lea RDI,QWORD PTR [RBP+9784]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42f860
.L_434a9b:

            nop
            nop
            nop
            nop
            nop
.L_434aa0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_433510

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+176]
            mov RBP,RAX
            mov RDI,R12
            call .L_42f8a0

            lea RSI,QWORD PTR [RBX+208]
            mov RDI,R12
            call .L_42f8a0

            lea RSI,QWORD PTR [RBX+240]
            lea RDI,QWORD PTR [RBP+9784]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42f8a0
.L_434aeb:

            nop
            nop
            nop
            nop
            nop
.L_434af0:

            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,8
.L_434af9:

            call .L_433510

            test RBX,RBX
            mov RBP,RAX
            je .L_434b48

            mov ESI,65
            mov RDI,RBX
            call strnlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,64
            ja .L_434b3d

            test RDX,RDX
            mov BYTE PTR [RBP+8505],DL
            je .L_434b60

            lea RDI,QWORD PTR [RBP+8506]
            mov RSI,RBX
            call memcpy@PLT

            xor EAX,EAX
.L_434b3d:

            add RSP,8
.L_434b41:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434b48:

            mov BYTE PTR [RAX+8505],0
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434b60:

            xor EAX,EAX
            jmp .L_434b3d
.L_434b64:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434b70:

            movzx EAX,WORD PTR [RDI+168]
            ret 
.L_434b78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434b80:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_434b83:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434b90:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_401240

            test BYTE PTR [RBX+49],1
            je .L_434c00

            mov EBP,DWORD PTR [RBX+12]
            movzx EDX,BYTE PTR [RBX+97]
            sub EBP,EAX
            and EDX,1
            cmp EBP,-1
            je .L_434be0

            test DL,DL
            je .L_434bc3

            mov ECX,DWORD PTR [RBX+60]
            sub ECX,EAX
            cmp EBP,ECX
            cmova EBP,ECX
.L_434bc3:

            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            mov EDX,EBP
            pop RBX
            pop RBP
            mov ESI,EAX
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434be0:

            test DL,DL
            je .L_434bee
.L_434be4:

            mov EBP,DWORD PTR [RBX+60]
            sub EBP,EAX
            cmp EBP,-1
            jne .L_434bc3
.L_434bee:

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            pop RBX
            pop RBP
            jmp .L_433690

            nop
            nop
            nop
.L_434c00:

            test BYTE PTR [RBX+97],1
            jne .L_434be4

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            pop RBX
            pop RBP
            jmp .L_433690
.L_434c15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434c20:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov R12D,EDX
            sub RSP,248
.L_434c3a:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+30],DX
            mov RDI,RBX
            mov EDX,2
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_436582]
            mov RDI,RBX
            call .L_4318a0

            test R12B,R12B
            jne .L_434d50

            lea R13,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_434d48
.L_434cc8:

            add RBP,2568
            lea R12,QWORD PTR [RSP+32]
            mov RDI,RBP
            call .L_4172a0

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_417320

            lea RCX,QWORD PTR [RIP+.L_4348f0]
            mov EAX,4294963391
            mov R8,R14
            mov RDX,R12
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_430850

            test EAX,EAX
            jne .L_434d94
.L_434d1c:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_434dc8

            add RSP,248
.L_434d3a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_434d48:

            mov EAX,3
            jmp .L_434d1c
          .byte 0x90
.L_434d50:

            lea R13,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            mov RBX,RAX
            je .L_434d48

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],13
            mov BYTE PTR [RSP+31],R12B
            call .L_403d80

            test EAX,EAX
            je .L_434db0
.L_434d94:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_434d1c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434db0:

            movzx EDX,R12B
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_434d94

            jmp .L_434cc8
.L_434dc8:

            call __stack_chk_fail@PLT
.L_434dcd:

            nop
            nop
            nop
.L_434dd0:

            ret 
.L_434dd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434de0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,ECX
            push RBP
            push RBX
            mov R13,RDI
            sub RSP,280
.L_434dfa:

            lea RBX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+8],RDX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov RBP,RAX
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_436587]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42f920

            test RAX,RAX
            je .L_435020

            mov RBX,RAX
            movzx EAX,BYTE PTR [R15+24]
            test AL,1
            jne .L_434f88
.L_434e92:

            test AL,2
            jne .L_434f40

            test AL,4
            jne .L_434fc0
.L_434ea2:

            test AL,8
            jne .L_435030
.L_434eaa:

            test R14B,R14B
            jne .L_435070
.L_434eb3:

            movzx EAX,BYTE PTR [RSP+240]
            cmp AX,WORD PTR [RBX+58]
            je .L_435090
.L_434ec5:

            add RBP,2568
            lea R14,QWORD PTR [RSP+64]
            mov RDI,RBP
            call .L_4172a0

            lea RSI,QWORD PTR [RSP+80]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_417320

            lea RCX,QWORD PTR [RIP+.L_434880]
            mov EAX,4294963391
            mov R8,R13
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R12
            mov WORD PTR [RSP+98],AX
            call .L_430850

            test EAX,EAX
            jne .L_434f72
.L_434f15:

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4350a3

            add RSP,280
.L_434f33:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_434f40:

            movzx EAX,WORD PTR [R15+2]
            lea RSI,QWORD PTR [RSP+28]
            mov ECX,523
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+28],CX
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            je .L_435010
.L_434f72:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_434f15
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434f88:

            movzx EAX,WORD PTR [R15]
            mov ESI,521
            mov EDX,4
            mov WORD PTR [RSP+28],SI
            lea RSI,QWORD PTR [RSP+28]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            jne .L_434f72

            movzx EAX,BYTE PTR [R15+24]
            jmp .L_434e92
          .byte 0x90
.L_434fc0:

            movzx EAX,BYTE PTR [R15+4]
            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+32],8
            movups XMMWORD PTR [RSP+34],XMM0
            mov BYTE PTR [RSP+33],AL
            call .L_403d80

            test EAX,EAX
            jne .L_434f72

            movzx EDX,BYTE PTR [R15+4]
            lea RSI,QWORD PTR [R15+5]
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_434f72

            movzx EAX,BYTE PTR [R15+24]
            jmp .L_434ea2
.L_435010:

            movzx EAX,BYTE PTR [R15+24]
            test AL,4
            je .L_434ea2

            jmp .L_434fc0
          .byte 0x90
.L_435020:

            mov EAX,3
            jmp .L_434f15
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435030:

            movzx EAX,WORD PTR [R15+22]
            mov EDX,530
            lea RSI,QWORD PTR [RSP+28]
            mov WORD PTR [RSP+28],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            jne .L_434f72

            jmp .L_434eaa
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435070:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,R14B
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_434f72

            jmp .L_434eb3
          .byte 0x66
          .byte 0x90
.L_435090:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403470

            jmp .L_434ec5
.L_4350a3:

            call __stack_chk_fail@PLT
.L_4350a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4350b0:

            push R12
            push RBP
            xor ESI,ESI
            push RBX
            sub RSP,96
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],2
            mov WORD PTR [RSP+16],SI
            mov EAX,13
            je .L_435100
.L_4350d9:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4351ef

            add RSP,96
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435100:

            movzx EAX,WORD PTR [RDI+168]
            pxor XMM0,XMM0
            xor EDX,EDX
            mov ECX,4104
            mov RBX,RDI
            mov WORD PTR [RSP+72],DX
            mov QWORD PTR [RSP+64],0
            lea RBP,QWORD PTR [RSP+16]
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+50],AX
            movzx EAX,BYTE PTR [RDI+49]
            movups XMMWORD PTR [RSP+18],XMM0
            test AL,1
            mov BYTE PTR [RSP+72],2
            mov WORD PTR [RSP+16],CX
            je .L_43516d

            test AL,2
            jne .L_4351d8

            lea R12,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RDI+4]
            mov RSI,R12
            call .L_43a870

            mov RSI,R12
            mov RDI,RBP
            call .L_43a950
.L_43516d:

            movzx EAX,BYTE PTR [RBX+97]
            test AL,1
            je .L_435195

            test AL,2
            jne .L_4351d8

            lea R12,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RBX+52]
            mov RSI,R12
            call .L_43a870

            mov RSI,R12
            mov RDI,RBP
            call .L_43a950
.L_435195:

            movzx EDX,BYTE PTR [RSP+17]
            mov R12,RDX
.L_43519d:

            lea RSI,QWORD PTR [RBP+2]
            lea RBP,QWORD PTR [RSP+48]
            mov ECX,21
            lea RDI,QWORD PTR [RBP+5]
            call __memcpy_chk@PLT

            xor ECX,ECX
            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RSP+52],R12B
            or BYTE PTR [RSP+72],4
            call .L_434de0

            jmp .L_4350d9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4351d8:

            mov EAX,4294967041
            mov EDX,1
            mov R12D,1
            mov WORD PTR [RSP+17],AX
            jmp .L_43519d
.L_4351ef:

            call __stack_chk_fail@PLT
.L_4351f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435200:

            and BYTE PTR [RDI+49],254
            and BYTE PTR [RDI+97],254
            jmp .L_4350b0
.L_43520d:

            nop
            nop
            nop
.L_435210:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_435218:

            movzx EAX,BYTE PTR [RDI+49]
            test AL,1
            je .L_4352e8

            test RSI,RSI
            je .L_435290

            mov RAX,QWORD PTR [RSI]
            xor R12D,R12D
            cmp QWORD PTR [RDI+4],RAX
            jne .L_435318
.L_435239:

            test EDX,EDX
            mov EBP,EDX
            mov RBX,RDI
            je .L_4352b9
.L_435242:

            call .L_401240

            lea RCX,QWORD PTR [R12+R12*1]
            mov EDI,EAX
            add RCX,R12
            shl RCX,4
            add RCX,RBX
            mov ESI,DWORD PTR [RCX+12]
            sub ESI,EAX
            xor EAX,EAX
            test ESI,ESI
            jle .L_435281

            imul EDX,EBP,1000
            cmp ESI,EDX
            jbe .L_435281

            add EDX,EDI
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            mov DWORD PTR [RCX+12],EDX
            call .L_434b90

            mov EAX,DWORD PTR [RSP+12]
.L_435281:

            add RSP,16
.L_435285:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435290:

            xor R12D,R12D
            test AL,2
            jne .L_435239

            movzx ECX,BYTE PTR [RDI+97]
            test CL,1
            je .L_43531e
.L_4352a0:

            and ECX,2
            mov EAX,23
            je .L_435281

            mov R12D,1
.L_4352b0:

            test EDX,EDX
            mov EBP,EDX
            mov RBX,RDI
            jne .L_435242
.L_4352b9:

            lea RCX,QWORD PTR [R12+R12*1]
            add RCX,R12
            shl RCX,4
            and BYTE PTR [RDI+RCX*1+49],254
            call .L_434b90

            mov RDI,RBX
            call .L_4350b0

            add RSP,16
.L_4352da:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4352e8:

            movzx ECX,BYTE PTR [RDI+97]
            mov EAX,23
            test CL,1
            je .L_435281

            test RSI,RSI
            je .L_4352a0
.L_4352fb:

            mov RBX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+52],RBX
            mov EAX,23
            jne .L_435281

            mov R12D,1
            jmp .L_4352b0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435318:

            test BYTE PTR [RDI+97],1
            jne .L_4352fb
.L_43531e:

            mov EAX,23
            jmp .L_435281
.L_435328:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435330:

            cmp DWORD PTR [RDI],2
            jne .L_435340

            jmp .L_435210
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435340:

            mov EAX,13
            ret 
.L_435346:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435350:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_401240

            test BYTE PTR [RBX+49],1
            mov EBP,EAX
            je .L_435370

            cmp EAX,DWORD PTR [RBX+12]
            js .L_435370

            cmp DWORD PTR [RBX],2
            je .L_435390
.L_435370:

            test BYTE PTR [RBX+97],1
            je .L_435380

            cmp EBP,DWORD PTR [RBX+60]
            js .L_435380

            cmp DWORD PTR [RBX],2
            je .L_4353a0
.L_435380:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_434b90
          .byte 0x66
          .byte 0x90
.L_435390:

            lea RSI,QWORD PTR [RBX+4]
            xor EDX,EDX
            mov RDI,RBX
            call .L_435210

            jmp .L_435370
.L_4353a0:

            lea RSI,QWORD PTR [RBX+52]
            xor EDX,EDX
            mov RDI,RBX
            call .L_435210

            jmp .L_435380
.L_4353b0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b90

            add RSP,8
            mov RDI,RAX
            jmp .L_435350
.L_4353ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4353d0:

            cmp DWORD PTR [RDI],2
            mov EAX,13
            je .L_4353e0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4353e0:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_4353ee:

            mov RBX,RDI
            mov RDI,RDX
            mov EBP,ECX
            call strlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,32
            ja .L_435494

            xor EDX,EDX
            mov RSI,R13
            mov RDI,RBX
            call .L_435210

            test BYTE PTR [RBX+49],1
            jne .L_4354b8

            mov EDI,16
            xor EAX,EAX
            xor R14D,R14D
.L_43542e:

            test R13,R13
            je .L_4354a0

            mov RDX,QWORD PTR [R13]
            mov QWORD PTR [RBX+RAX*1+4],RDX
            lea RAX,QWORD PTR [R14+R14*1]
            add RAX,R14
            shl RAX,4
            and BYTE PTR [RBX+RAX*1+49],253
.L_43544c:

            mov RSI,R12
            lea R12,QWORD PTR [R14+R14*1]
            mov EDX,33
            add RDI,RBX
            add R12,R14
            shl R12,4
            add R12,RBX
            call .L_42ec40

            or BYTE PTR [R12+49],1
            imul EBP,EBP,1000
            call .L_401240

            add EAX,EBP
            mov RDI,RBX
            mov DWORD PTR [R12+12],EAX
            call .L_434b90

            mov RDI,RBX
            call .L_4350b0

            xor EAX,EAX
.L_435494:

            pop RBX
.L_435495:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4354a0:

            lea RAX,QWORD PTR [R14+R14*1]
            add RAX,R14
            shl RAX,4
            or BYTE PTR [RBX+RAX*1+49],2
            jmp .L_43544c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4354b8:

            test BYTE PTR [RBX+97],1
            mov EAX,3
            jne .L_435494

            mov EDI,64
            mov EAX,48
            mov R14D,1
            jmp .L_43542e
.L_4354d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4354e0:

            ret 
.L_4354e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4354f0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,312
.L_435504:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            call .L_433510

            add BYTE PTR [RBP+170],1
            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+144]
            mov R12,RAX
            lea RAX,QWORD PTR [RSP+16]
            xor ECX,ECX
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+64],CX
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_43658c]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_43560c

            lea RDI,QWORD PTR [RIP+.L_436591]
            mov EDX,16394
            mov ESI,64
            mov WORD PTR [RSP+64],DX
            lea R14,QWORD PTR [RSP+64]
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+66]
            lea RSI,QWORD PTR [RIP+.L_436591]
            mov RBX,RAX
            mov ECX,64
            mov RDX,RAX
            call __memcpy_chk@PLT

            mov BYTE PTR [RSP+65],BL
            movzx EBX,BL
            mov RSI,R14
            lea EDX,DWORD PTR [RBX+2]
            mov RDI,R15
            call .L_403d80

            test EAX,EAX
            je .L_435638
.L_4355fc:

            mov RDI,R15
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
.L_43560c:

            mov RCX,QWORD PTR [RSP+296]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43568c

            add RSP,312
.L_435626:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435638:

            mov RBX,QWORD PTR [RSP+8]
            add R12,2568
            mov RDI,R12
            lea RSI,QWORD PTR [RBX+16]
            call .L_417320

            mov EAX,4294963391
            mov RDI,R12
            mov WORD PTR [RSP+50],AX
            call .L_4172a0

            lea RCX,QWORD PTR [RIP+.L_435850]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov R8,RBP
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_430850

            test EAX,EAX
            je .L_43560c

            jmp .L_4355fc
.L_43568c:

            call __stack_chk_fail@PLT
.L_435691:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4356a0:

            push RBP
            push RBX
            mov EBP,13
            sub RSP,8
            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_4356da

            mov RBX,RDI
            call .L_433510

            lea RDX,QWORD PTR [RIP+.L_436480]
            lea RDI,QWORD PTR [RAX+9784]
            mov RCX,RBX
            mov ESI,1000
            call .L_4320f0

            test EAX,EAX
            mov EBP,EAX
            je .L_4356e8
.L_4356da:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4356e8:

            mov DWORD PTR [RBX],1
            mov BYTE PTR [RBX+170],0
            mov RDI,RBX
            call .L_4354f0

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_435706:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435710:

            push RBP
            push RBX
            xor ECX,ECX
            mov RBX,RDI
            sub RSP,24
.L_43571b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],1
            mov WORD PTR [RSP+4],CX
            mov WORD PTR [RSP+1],AX
            je .L_435778
.L_43573c:

            mov DWORD PTR [RBX],0
.L_435742:

            mov RDI,RBX
            call .L_433530

            mov ESI,16384
            mov RDI,RAX
            call .L_402d80

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43584a

            add RSP,24
.L_43576f:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435778:

            test R8D,R8D
            je .L_4357a0
.L_43577d:

            cmp BYTE PTR [RBX+170],1
            ja .L_43573c

            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            jmp .L_435742
.L_4357a0:

            cmp BYTE PTR [RSI+1],68
            jne .L_43577d

            mov RBP,RDX
            lea RCX,QWORD PTR [RSP+1]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_435742

            cmp BYTE PTR [RSP+2],1
            jne .L_435742

            cmp BYTE PTR [RSP+3],1
            jne .L_43573c

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,11
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_435742

            cmp BYTE PTR [RSP+5],2
            jne .L_435742

            movzx EAX,WORD PTR [RSP+6]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RBX+168],AX
            call .L_434a50

            mov DWORD PTR [RBX],2
            mov BYTE PTR [RBX+170],0
            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,25000
            mov ESI,EAX
            call .L_433770

            jmp .L_435742
.L_43584a:

            call __stack_chk_fail@PLT
.L_43584f:

            nop
.L_435850:

            jmp .L_435710
.L_435855:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435860:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,240
.L_435872:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ESI,ESI
            xor EDI,EDI
            mov EDX,2
            mov WORD PTR [RSP+25],SI
            mov WORD PTR [RSP+28],DI
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov ESI,2
            mov RDI,RBX
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_4365a9]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            je .L_435a00

            cmp DWORD PTR [RBP],2
            mov RBX,RAX
            lea RSI,QWORD PTR [RSP+25]
            mov ECX,272
            mov EDX,3
            mov RDI,RBX
            mov WORD PTR [RSP+25],CX
            sete AL
            lea EAX,DWORD PTR [RAX+RAX*1-1]
            mov BYTE PTR [RSP+27],AL
            call .L_403d80

            test EAX,EAX
            je .L_435970
.L_435936:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_435946:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_435a0a

            add RSP,240
.L_435964:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435970:

            movzx EAX,WORD PTR [RBP+168]
            mov EDX,523
            lea RSI,QWORD PTR [RSP+28]
            mov WORD PTR [RSP+28],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d80

            test EAX,EAX
            jne .L_435936

            add R12,2568
            lea R14,QWORD PTR [RSP+32]
            mov RDI,R12
            call .L_4172a0

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_417320

            lea RCX,QWORD PTR [RIP+.L_435ba0]
            mov EAX,4294963391
            mov R8,RBP
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_430850

            test EAX,EAX
            je .L_435946

            jmp .L_435936
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435a00:

            mov EAX,3
            jmp .L_435946
.L_435a0a:

            call __stack_chk_fail@PLT
.L_435a0f:

            nop
.L_435a10:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_435a98

            push RBX

            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+9784]
            call .L_432120

            mov RDI,RBX
            mov DWORD PTR [RBX],0
            call .L_433530

            mov ESI,16384
            mov RDI,RAX
            call .L_402d80

            mov RDI,RBX
            call .L_434aa0

            and BYTE PTR [RBX+49],254
            and BYTE PTR [RBX+97],254
            mov RDI,RBX
            call .L_4350b0

            lea RDI,QWORD PTR [RBX+144]
            mov BYTE PTR [RBX+170],0
            call .L_433690

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+8504]
            call .L_4385a0

            mov RDI,RBX
            call .L_435860

            xor EAX,EAX
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435a98:

            mov EAX,13
            ret 
.L_435a9e:

            nop
            nop
.L_435aa0:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_435ac0

            cmp EAX,2
            jne .L_435ab8

            jmp .L_435860
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435ab8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435ac0:

            jmp .L_4354f0
.L_435ac5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435ad0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b90

            add RSP,8
            mov RDI,RAX
            jmp .L_435aa0
.L_435aea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_435af0:

            push RBX
            mov RBX,RDI
            sub RSP,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],2
            mov WORD PTR [RSP+5],AX
            je .L_435b40
.L_435b14:

            mov DWORD PTR [RBX],0
.L_435b1a:

            mov RDI,RBX
            call .L_434aa0
.L_435b22:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_435b99

            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435b40:

            test R8D,R8D
            jne .L_435b14

            cmp BYTE PTR [RSI+1],68
            jne .L_435b14

            lea RCX,QWORD PTR [RSP+5]
            mov RDI,RDX
            mov ESI,16
            mov EDX,3
            call .L_4339f0

            test EAX,EAX
            jne .L_435b6d

            cmp BYTE PTR [RSP+6],1
            je .L_435b78
.L_435b6d:

            cmp DWORD PTR [RBX],2
            je .L_435b22

            jmp .L_435b1a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435b78:

            cmp BYTE PTR [RSP+7],1
            jne .L_435b14

            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,25000
            mov ESI,EAX
            call .L_433770

            jmp .L_435b6d
.L_435b99:

            call __stack_chk_fail@PLT
.L_435b9e:

            nop
            nop
.L_435ba0:

            jmp .L_435af0
.L_435ba5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435bb0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,104
.L_435bc7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            cmp DWORD PTR [RBX],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+6],DX
            mov WORD PTR [RSP+22],CX
            mov WORD PTR [RSP+10],SI
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_435c30
.L_435c09:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_435dab

            add RSP,104
.L_435c21:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435c30:

            mov R13,RAX
            movzx EAX,BYTE PTR [RBP]
            and EAX,48
            cmp AL,16
            jne .L_435c09

            cmp BYTE PTR [RBP+1],2
            jne .L_435c09

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_435c09

            cmp BYTE PTR [RSP+7],2
            jne .L_435c09

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,10
            mov ESI,19
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_435c09

            cmp BYTE PTR [RSP+23],8
            jne .L_435c09

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,4
            mov ESI,20
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_435c09

            cmp BYTE PTR [RSP+11],2
            jne .L_435c09

            lea RCX,QWORD PTR [RSP+4]
            lea RDX,QWORD PTR [RSP+2]
            mov ESI,17
            mov RDI,R12
            call .L_433a90

            test EAX,EAX
            jne .L_435c09

            movzx EAX,WORD PTR [R12+58]
            movzx ECX,WORD PTR [RSP+2]
            movzx EDX,WORD PTR [RSP+4]
            sub EAX,ECX
            cmp EDX,EAX
            jg .L_435c09

            lea RBP,QWORD PTR [R13+9784]
            lea R14,QWORD PTR [RBX+104]
            mov RDI,RBP
            call .L_432200

            mov R15D,EAX
            mov RAX,QWORD PTR [RSP+24]
            test R15B,R15B
            je .L_435db0

            cmp QWORD PTR [RBX+104],RAX
            sete R15B
.L_435d17:

            test R15B,R15B
            je .L_435c09

            movzx EAX,WORD PTR [RSP+8]
            movzx ESI,WORD PTR [RSP+2]
            mov RDI,R12
            rol AX,8
            mov WORD PTR [RBX+112],AX
            movzx EAX,WORD PTR [RSP+12]
            rol AX,8
            mov WORD PTR [RBX+114],AX
            call .L_4035a0

            movzx ESI,WORD PTR [RSP+4]
            mov RDI,R12
            add SI,WORD PTR [RSP+2]
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            jne .L_435c09

            lea RDI,QWORD PTR [R13+2568]
            lea R15,QWORD PTR [RSP+32]
            call .L_4172b0

            lea RDI,QWORD PTR [R15+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RSI,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_4101c0

            mov RDX,R15
            mov RSI,R12
            mov RDI,RBP
            movzx EAX,WORD PTR [RBX+112]
            mov WORD PTR [RSP+66],AX
            mov RAX,QWORD PTR [R13+9784]
            call QWORD PTR [RAX+8]

            jmp .L_435c09
.L_435dab:

            call __stack_chk_fail@PLT
.L_435db0:

            mov QWORD PTR [RBX+104],RAX
            xor BYTE PTR [RBX+104],2
            test BYTE PTR [RBX+49],1
            je .L_435ddd

            lea RSI,QWORD PTR [RSP+14]
            lea RDI,QWORD PTR [RBX+4]
            call .L_43a870

            test BYTE PTR [RBX+49],2
            jne .L_435e0b

            mov RAX,QWORD PTR [RSP+14]
            cmp QWORD PTR [RBX+104],RAX
            je .L_435e0b
.L_435ddd:

            test BYTE PTR [RBX+97],1
            je .L_435e02

            lea RSI,QWORD PTR [RSP+14]
            lea RDI,QWORD PTR [RBX+52]
            call .L_43a870

            test BYTE PTR [RBX+97],2
            jne .L_435e42

            mov RAX,QWORD PTR [RBX+104]
            cmp QWORD PTR [RSP+14],RAX
            je .L_435e42
.L_435e02:

            xor BYTE PTR [RBX+104],2
            jmp .L_435d17
.L_435e0b:

            xor EAX,EAX
.L_435e0d:

            lea RSI,QWORD PTR [RBX+RAX*1+16]
            or RCX,-1
            xor EAX,EAX
            mov RDI,RSI

            repne scasb AL,BYTE PTR [RDI]

            mov RDI,RBP
            mov RAX,RCX
            not RAX
            lea RDX,QWORD PTR [RAX-1]
            movzx EDX,DL
            call .L_432280

            test EAX,EAX
            jne .L_435c09

            mov R15D,1
            jmp .L_435e02
.L_435e42:

            mov EAX,48
            jmp .L_435e0d
.L_435e49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435e50:

            jmp .L_435bb0
.L_435e55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435e60:

            test BYTE PTR [RSI],48
            jne .L_435e6b

            cmp BYTE PTR [RSI+1],2
            je .L_435e70
.L_435e6b:

            ret 

            nop
            nop
            nop
.L_435e70:

            mov RDX,RCX
            jmp .L_434890
.L_435e78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435e80:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            sub RSP,376
.L_435e9a:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+360],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov RBP,RAX
            xor EDX,EDX
            mov RSI,R13
            mov RDI,RBX
            lea R13,QWORD PTR [RBP+9784]
            mov WORD PTR [RSP+5],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_431cf0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            test RAX,RAX
            je .L_435f3d

            mov RBX,RAX
            movzx EAX,BYTE PTR [RAX+78]
            lea RSI,QWORD PTR [RSP+5]
            mov EDX,3
            mov RDI,RBX
            mov BYTE PTR [RSP+7],R14B
            and EAX,4294967235
            or EAX,28
            mov BYTE PTR [RBX+78],AL
            mov EAX,272
            mov WORD PTR [RSP+5],AX
            call .L_403d80

            test EAX,EAX
            je .L_435f70
.L_435f35:

            mov RDI,RBX
            call .L_403400
.L_435f3d:

            mov RAX,QWORD PTR [RSP+360]
            xor RAX,QWORD PTR FS:[40]
            jne .L_436061

            add RSP,376
.L_435f5b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435f70:

            lea RDI,QWORD PTR [RBP+2568]
            lea R15,QWORD PTR [RSP+16]
            call .L_4172b0

            lea RSI,QWORD PTR [R12+104]
            movdqu XMM0,XMMWORD PTR [RAX]
            lea RDI,QWORD PTR [R15+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_4101c0

            movzx EDX,WORD PTR [RBX+58]
            movzx EAX,WORD PTR [R12+112]
            cmp DX,128
            mov WORD PTR [RSP+50],AX
            ja .L_435f3d

            movzx EAX,BYTE PTR [RSP+192]
            lea R14,QWORD PTR [RSP+224]
            mov RDI,RBX
            mov RCX,R14
            sub EDX,EAX
            mov ESI,EAX
            movzx EDX,DX
            call .L_4038b0

            movzx EBP,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [RSP+192]
            mov RDI,R12
            sub EBP,EAX
            movsxd RBP,EBP
            call .L_4334e0

            lea RCX,QWORD PTR [RIP+.L_4365b8]
            xor ESI,ESI
            mov RDI,RAX
            mov R9,RBP
            mov R8,R14
            mov EDX,10
            call .L_4325e0

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R13
            call .L_432310

            test EAX,EAX
            jne .L_435f35

            mov RAX,QWORD PTR [R12+104]
            mov ECX,EAX
            mov EDX,EAX
            mov QWORD PTR [RSP+8],RAX
            and ECX,4294967293
            or EDX,2
            test AL,2
            mov EAX,ECX
            cmove EAX,EDX
            cmp DWORD PTR [R12],2
            mov BYTE PTR [RSP+8],AL
            jne .L_435f3d

            lea RSI,QWORD PTR [RSP+8]
            mov EDX,20
            mov RDI,R12
            call .L_435210

            jmp .L_435f3d
.L_436061:

            call __stack_chk_fail@PLT
.L_436066:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436070:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            mov EDX,66
            mov ESI,32
            mov RDI,RBX
            sub RSP,224
.L_436095:

            mov R13,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov RCX,R13
            xor EAX,EAX
            mov WORD PTR [RSP],AX
            call .L_4339f0

            test EAX,EAX
            je .L_436160
.L_4360c1:

            mov R13D,1
.L_4360c7:

            movzx EDX,WORD PTR [RBX+58]
            cmp DX,128
            ja .L_436128

            movzx EAX,BYTE PTR [R12+128]
            lea R14,QWORD PTR [RSP+80]
            mov RDI,RBX
            mov RCX,R14
            sub EDX,EAX
            mov ESI,EAX
            movzx EDX,DX
            call .L_4038b0

            movzx EBX,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [R12+128]
            mov RDI,RBP
            sub EBX,EAX
            movsxd RBX,EBX
            call .L_4334e0

            lea RCX,QWORD PTR [RIP+.L_4365e8]
            mov R9,RBX
            mov R8,R14
            mov EDX,10
            xor ESI,ESI
            mov RDI,RAX
            call .L_4325e0
.L_436128:

            mov EDX,R13D
            mov RSI,R12
            mov RDI,RBP
            call .L_435e80

            mov RAX,QWORD PTR [RSP+216]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4361b3

            add RSP,224
.L_436150:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436160:

            movzx R14D,BYTE PTR [RSP+1]
            mov RDI,RBP
            call .L_433510

            cmp R14B,BYTE PTR [RAX+8505]
            je .L_436188
.L_436177:

            mov R13D,4294967295
            jmp .L_4360c7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_436188:

            movzx R14D,BYTE PTR [RSP+1]
            mov RDI,RBP
            call .L_433510

            lea RDI,QWORD PTR [R13+2]
            lea RSI,QWORD PTR [RAX+8506]
            mov RDX,R14
            call memcmp@PLT

            test EAX,EAX
            je .L_4360c1

            jmp .L_436177
.L_4361b3:

            call __stack_chk_fail@PLT
.L_4361b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4361c0:

            jmp .L_436070
.L_4361c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4361d0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            xor EBX,EBX
            mov RBP,RDI
            sub RSP,296
.L_4361e9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            mov WORD PTR [RSP+34],BX
            lea RBX,QWORD PTR [RSP+128]
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov EDX,2
            mov ESI,16
            mov RDI,RBX
            mov WORD PTR [RSP+26],R9W
            mov WORD PTR [RSP+38],R10W
            mov WORD PTR [RSP+30],R11W
            mov R12,RAX
            movaps XMMWORD PTR [RSP+80],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_4365ae]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_4362c9

            movzx EAX,WORD PTR [RBP+112]
            lea RSI,QWORD PTR [RSP+26]
            mov R8D,530
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+26],R8W
            rol AX,8
            mov WORD PTR [RSP+28],AX
            call .L_403d80

            test EAX,EAX
            je .L_4362f8
.L_4362b9:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_4362c9:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_436478

            add RSP,296
.L_4362e7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4362f8:

            mov RAX,QWORD PTR [RBP+104]
            mov EDI,2067
            lea RSI,QWORD PTR [RSP+38]
            mov WORD PTR [RSP+38],DI
            mov EDX,10
            mov RDI,RBX
            mov QWORD PTR [RSP+40],RAX
            call .L_403d80

            test EAX,EAX
            jne .L_4362b9

            movzx EAX,WORD PTR [RBP+114]
            mov ESI,532
            mov EDX,4
            mov WORD PTR [RSP+30],SI
            lea RSI,QWORD PTR [RSP+30]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+32],AX
            call .L_403d80

            test EAX,EAX
            jne .L_4362b9

            movzx EAX,BYTE PTR [R14+78]
            shr AL,2
            and EAX,15
            cmp AL,7
            je .L_436440
.L_436365:

            movzx EAX,WORD PTR [R14+58]
            mov EDX,4294967057
            lea RSI,QWORD PTR [RSP+34]
            mov WORD PTR [RSP+34],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+36],AX
            call .L_403d80

            test EAX,EAX
            jne .L_4362b9

            movzx R15D,WORD PTR [RBX+58]
            movzx ESI,WORD PTR [R14+58]
            mov RDI,RBX
            add ESI,R15D
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            jne .L_4362b9

            movzx ECX,WORD PTR [R14+58]
            xor ESI,ESI
            movzx EDX,R15W
            mov R8,RBX
            mov RDI,R14
            call .L_403fa0

            lea RDI,QWORD PTR [R12+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            lea RDX,QWORD PTR [RSP+80]
            movzx EAX,WORD PTR [RBP+114]
            xor R8D,R8D
            xor ECX,ECX
            movaps XMMWORD PTR [RSP+96],XMM0
            mov RSI,RBX
            mov RDI,R13
            rol AX,8
            mov WORD PTR [RSP+110],AX
            mov EAX,4294963391
            mov WORD PTR [RSP+114],AX
            movzx EAX,BYTE PTR [R12+24]
            mov BYTE PTR [RSP+116],AL
            call .L_430850

            test EAX,EAX
            jne .L_4362b9

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_4362c9
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436440:

            movdqu XMM0,XMMWORD PTR [R12+1528]
            lea RSI,QWORD PTR [RSP+48]
            mov ECX,4117
            mov EDX,18
            mov RDI,RBX
            mov WORD PTR [RSP+48],CX
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d80

            test EAX,EAX
            jne .L_4362b9

            jmp .L_436365
.L_436478:

            call __stack_chk_fail@PLT
.L_43647d:

            nop
            nop
            nop
.L_436480:

            jmp .L_4361d0
.L_436485:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436490:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RDX
            sub RSP,56
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call strlen@PLT

            lea RDX,QWORD PTR [RAX-6]
            cmp RDX,249
            jbe .L_4364f8

            mov EAX,7
.L_4364d1:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            jne .L_43656e

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4364f8:

            mov R12,RAX
            mov EAX,25697
            mov R15,RSP
            mov WORD PTR [RSP+4],AX
            pxor XMM0,XMM0
            mov RAX,QWORD PTR [RBX]
            mov RDI,R13
            mov DWORD PTR [RSP],1701996628
            movups XMMWORD PTR [RSP+14],XMM0
            mov QWORD PTR [RSP+6],RAX
            call strlen@PLT

            lea RDI,QWORD PTR [R15+14]
            mov RBX,RAX
            mov ECX,16
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT

            sub RSP,8
.L_436543:

            lea ECX,DWORD PTR [RBX+14]
            mov RDX,R15
            push R14
            mov R9D,16
            mov R8D,16384
            movzx ECX,CX
            mov ESI,R12D
            mov RDI,RBP
            call .L_442f40

            pop RDX
            xor EAX,EAX
            pop RCX
            jmp .L_4364d1
.L_43656e:

            call __stack_chk_fail@PLT
.L_436573:
          .string "c/rx"
.L_436578:
          .string "c/dc"
.L_43657d:
          .string "c/jf"
.L_436582:
          .string "c/cg"
.L_436587:
          .string "c/cs"
.L_43658c:
          .string "c/lp"
.L_436591:
          .string "OpenThread Commissioner"
.L_4365a9:
          .string "c/la"
.L_4365ae:
          .string "c/tx"
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4365b8:
          .string "[THCI] direction=send | type=JOIN_FIN.rsp |"
          .zero 4
.L_4365e8:
          .string "[THCI] direction=recv | type=JOIN_FIN.req |"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_436620:

            xor EAX,EAX
            mov DWORD PTR [RDI+256],0
            mov DWORD PTR [RDI+264],ESI
            mov WORD PTR [RDI+260],AX
            mov QWORD PTR [RDI],0
            mov RCX,RDI
            mov QWORD PTR [RDI+248],0
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,256
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_436668:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436670:

            xor EAX,EAX
            mov WORD PTR [RDI+260],AX
            ret 
.L_43667a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_436680:

            movzx ECX,WORD PTR [RDI+260]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_4366b8

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            jne .L_4366a7

            jmp .L_4366ba
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4366a0:

            movzx EDX,BYTE PTR [RAX]
            cmp EDX,ESI
            je .L_4366ba
.L_4366a7:

            mov RDX,RAX
            movzx EAX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            ja .L_4366a0
.L_4366b8:

            xor EAX,EAX
.L_4366ba:

            ret 
.L_4366bc:

            nop
            nop
            nop
            nop
.L_4366c0:

            jmp .L_436680
.L_4366c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4366d0:

            movzx R11D,WORD PTR [RDI+260]
            mov RDX,RDI
            mov RCX,RSI
            xor EAX,EAX
            mov QWORD PTR [RSI],0
            mov QWORD PTR [RSI+96],0
            add R11,RDI
            lea RDI,QWORD PTR [RSI+8]
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3
            cmp RDX,R11

            rep stosq QWORD PTR [RDI]

            jae .L_436a00

            push RBP
.L_436710:

            lea R9,QWORD PTR [RIP+.L_4375ec]
            push RBX
.L_436718:

            lea RBP,QWORD PTR [RSI+76]
            lea RBX,QWORD PTR [RSI+32]
            mov R8,RSI
            mov R10,RDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436730:

            cmp BYTE PTR [RDX],53
            ja .L_436762

            movzx EAX,BYTE PTR [RDX]
            movsxd RAX,DWORD PTR [R9+RAX*4]
            add RAX,R9
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436748:

            movzx EAX,WORD PTR [RDX+2]
            rol AX,8
            mov WORD PTR [R8+92],AX
            movzx EAX,BYTE PTR [RDX+4]
            or BYTE PTR [R8+101],4
            mov BYTE PTR [R8+94],AL
.L_436762:

            movzx ECX,BYTE PTR [RDX+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436770:

            lea RDX,QWORD PTR [R10+RCX*1+2]
            cmp R11,RDX
            jbe .L_436780

            mov R10,RDX
            jmp .L_436730
          .byte 0x90
.L_436780:

            pop RBX
.L_436781:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_436788:

            movzx ECX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RAX+RCX*1]
            cmp RAX,RDI
            jae .L_436770

            cmp BYTE PTR [RDX+2],0
            je .L_4367b3

            nop
.L_4367a0:

            movzx ESI,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RSI*1+2]
            cmp RDI,RAX
            jbe .L_436770

            cmp BYTE PTR [RAX],0
            jne .L_4367a0
.L_4367b3:

            mov EAX,DWORD PTR [RAX+2]
            or BYTE PTR [R8+101],8
            mov DWORD PTR [R8+96],EAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4367c8:

            mov EAX,DWORD PTR [RDX+2]
            or BYTE PTR [R8+100],64
            bswap EAX
            mov DWORD PTR [R8+68],EAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4367e0:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RDX+8]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_4367f0:

            movzx ESI,BYTE PTR [RCX]
            shl RAX,8
            add RCX,1
            or RAX,RSI
            cmp RDI,RCX
            jne .L_4367f0

            or BYTE PTR [R8+100],1
            mov QWORD PTR [R8],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_436818:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RDX+8]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_436828:

            movzx ESI,BYTE PTR [RCX]
            shl RAX,8
            add RCX,1
            or RAX,RSI
            cmp RCX,RDI
            jne .L_436828

            or BYTE PTR [R8+100],2
            mov QWORD PTR [R8+8],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_436850:

            mov RAX,QWORD PTR [RDX+2]
            or BYTE PTR [R8+100],32
            mov QWORD PTR [R8+57],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436870:

            movdqu XMM0,XMMWORD PTR [RDX+2]
            or BYTE PTR [R8+100],4
            movups XMMWORD PTR [R8+16],XMM0
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436890:

            movzx EAX,BYTE PTR [RDX+1]
            lea RSI,QWORD PTR [RDX+2]
            cmp EAX,8
            jae .L_436970

            test AL,4
            jne .L_436a02

            test EAX,EAX
            je .L_4369a1

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBP],CL
            je .L_4369a1

            mov EAX,EAX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBP+RAX*1-2],CX
            jmp .L_4369a1
.L_4368d0:

            movzx EAX,BYTE PTR [RDX+1]
            lea RSI,QWORD PTR [RDX+2]
            cmp EAX,8
            jae .L_4369b0

            test AL,4
            jne .L_436a13

            test EAX,EAX
            je .L_4369e0

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBX],CL
            je .L_4369e0

            mov EAX,EAX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBX+RAX*1-2],CX
            jmp .L_4369e0
          .byte 0x90
.L_436910:

            mov RAX,QWORD PTR [RDX+2]
            or BYTE PTR [R8+100],16
            mov QWORD PTR [R8+49],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436930:

            movzx EAX,WORD PTR [RDX+3]
            or BYTE PTR [R8+101],1
            rol AX,8
            mov WORD PTR [R8+74],AX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_436950:

            movzx EAX,WORD PTR [RDX+2]
            or BYTE PTR [R8+100],128
            rol AX,8
            mov WORD PTR [R8+72],AX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_436970:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBP],RCX
            mov ECX,EAX
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBP+RCX*1-8],RDI
            lea RDI,QWORD PTR [R8+84]
            mov RCX,RBP
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 
.L_4369a1:

            or BYTE PTR [R8+101],2
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0x90
.L_4369b0:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBX],RCX
            mov ECX,EAX
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBX+RCX*1-8],RDI
            lea RDI,QWORD PTR [R8+40]
            mov RCX,RBX
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 
.L_4369e0:

            movzx EAX,BYTE PTR [RDX+1]
            mov BYTE PTR [R8+RAX*1+32],0
            or BYTE PTR [R8+100],8
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_436770
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436a00:

            ret 
.L_436a02:

            mov ECX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBP],ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBP+RAX*1-4],ECX
            jmp .L_4369a1
.L_436a13:

            mov ECX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBX],ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBX+RAX*1-4],ECX
            jmp .L_4369e0
.L_436a23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436a30:

            movzx EAX,WORD PTR [RDI+260]
            mov ESI,DWORD PTR [RDI+264]
            add RAX,RDI
            cmp ESI,14
            jne .L_436a60

            jmp .L_436a7e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436a50:

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            je .L_436a88

            movzx EDX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RDX*1+2]
.L_436a60:

            cmp RDI,RAX
            jb .L_436a50
.L_436a65:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436a70:

            cmp BYTE PTR [RDI],14
            je .L_436a88

            movzx EDX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RDX*1+2]
.L_436a7e:

            cmp RDI,RAX
            jb .L_436a70

            jmp .L_436a65
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_436a88:

            lea RAX,QWORD PTR [RDI+2]
            ret 
.L_436a8d:

            nop
            nop
            nop
.L_436a90:

            push R12
            movzx R12D,CL
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov EBX,ECX
            movzx ESI,DX
            mov RCX,RBP
            mov EDX,R12D
            call .L_4038b0

            movzx EDX,AX
            mov EAX,7
            cmp R12D,EDX
            jne .L_436ad2

            movzx EBX,BL
            mov WORD PTR [RBP+260],BX
            call .L_401240

            mov DWORD PTR [RBP+256],EAX
            xor EAX,EAX
.L_436ad2:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_436ad7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436ae0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,16
.L_436aec:

            movzx R12D,WORD PTR [RDI+260]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP],AX
            test R12W,R12W
            je .L_436c08

            cmp DWORD PTR [RDI+264],14
            mov R13,RSI
            mov RBP,RDI
            mov RSI,RSP
            mov EDX,2
            mov RDI,R13
            setne AL
            add EAX,24
            mov BYTE PTR [RSP],AL
            lea EAX,DWORD PTR [R12-10]
            mov BYTE PTR [RSP+1],AL
            call .L_403d80

            test EAX,EAX
            jne .L_436be8

            add R12,RBP
            mov RBX,RBP
            cmp RBP,R12
            jae .L_436c08

            lea R14,QWORD PTR [RSP+2]
            jmp .L_436b8c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436b68:

            movzx EAX,BYTE PTR [RBX+1]
            mov RSI,RBX
            mov RDI,R13
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d80

            test EAX,EAX
            jne .L_436be8
.L_436b7e:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R12,RBX
            jbe .L_436c08
.L_436b8c:

            movzx EAX,BYTE PTR [RBX]
            cmp DWORD PTR [RBP+264],EAX
            je .L_436b7e

            cmp EAX,52
            jne .L_436b68

            call .L_401240

            mov EDX,DWORD PTR [RBX]
            sub EAX,DWORD PTR [RBP+256]
            mov RSI,R14
            mov RDI,R13
            mov DWORD PTR [RSP+2],EDX
            movzx EDX,WORD PTR [RBX+4]
            mov WORD PTR [RSP+6],DX
            mov ECX,DWORD PTR [RSP+4]
            bswap ECX
            mov EDX,ECX
            sub EDX,EAX
            cmp EAX,ECX
            mov EAX,0
            bswap EDX
            cmovb EAX,EDX
            mov EDX,6
            mov DWORD PTR [RSP+4],EAX
            call .L_403d80

            test EAX,EAX
            je .L_436b7e

            nop
            nop
            nop
            nop
.L_436be8:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_436c0c

            add RSP,16
.L_436bfc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_436c08:

            xor EAX,EAX
            jmp .L_436be8
.L_436c0c:

            call __stack_chk_fail@PLT
.L_436c11:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436c20:

            xor EAX,EAX
            cmp DWORD PTR [RDI+264],14
            setne AL
            add EAX,1
            ret 
.L_436c30:

            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RAX,RSI
            mov RDI,RSI
            sub RSP,8
            movzx EDX,WORD PTR [RBP+260]
            sub RAX,RBP
            movzx ECX,BL
            movzx EAX,AL
            movzx ESI,BL
            add EAX,ECX
            add RSI,RDI
            movzx EBX,BL
            sub EDX,EAX
            movsxd RDX,EDX
            call memmove@PLT

            sub WORD PTR [RBP+260],BX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_436c74:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436c80:

            push RBP
            push RBX
            mov R8D,256
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_436c92:

            movzx EAX,WORD PTR [RDI+260]
            movzx EDI,BYTE PTR [RSI]
            sub R8D,EAX
            add RAX,RBX
            cmp RAX,RBX
            jbe .L_436cce

            cmp DIL,BYTE PTR [RBX]
            je .L_436d28

            mov RCX,RBX
            mov RSI,RBX
            jmp .L_436cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_436cb8:

            cmp BYTE PTR [RSI],DIL
            je .L_436d30

            mov RCX,RSI
.L_436cc0:

            movzx EDX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RCX+RDX*1+2]
            cmp RAX,RSI
            ja .L_436cb8
.L_436cce:

            movzx EDX,BYTE PTR [RBP+1]
            movzx R8D,R8W
            lea R9,QWORD PTR [RDX+2]
            cmp R9,R8
            ja .L_436df4

            cmp R9D,8
            mov ECX,R9D
            jae .L_436d7f
.L_436cf0:

            and R9D,4
            jne .L_436dde

            test ECX,ECX
            jne .L_436dc0
.L_436d02:

            add RDX,2
            add WORD PTR [RBX+260],DX
            call .L_401240

            mov DWORD PTR [RBX+256],EAX
            xor EAX,EAX
.L_436d1a:

            add RSP,8
.L_436d1e:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436d28:

            mov RSI,RBX
            nop
            nop
            nop
            nop
            nop
.L_436d30:

            movzx EAX,BYTE PTR [RSI+1]
            movzx ECX,BYTE PTR [RBP+1]
            lea R8D,DWORD PTR [R8+RAX*1+2]
            add RCX,2
            mov RDX,RAX
            mov EAX,3
            movzx R8D,R8W
            cmp RCX,R8
            ja .L_436d1a

            add EDX,2
            mov RDI,RBX
            movzx EDX,DL
            call .L_436c30

            movzx EDX,BYTE PTR [RBP+1]
            movzx EAX,WORD PTR [RBX+260]
            lea R9,QWORD PTR [RDX+2]
            add RAX,RBX
            cmp R9D,8
            mov ECX,R9D
            jb .L_436cf0
.L_436d7f:

            mov RDX,QWORD PTR [RBP]
            lea RDI,QWORD PTR [RAX+8]
            mov RSI,RBP
            and RDI,-8
            mov QWORD PTR [RAX],RDX
            mov EDX,R9D
            mov RCX,QWORD PTR [RBP+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RCX
            sub RAX,RDI
            lea ECX,DWORD PTR [R9+RAX*1]
            sub RSI,RAX
            shr ECX,3

            rep movsq 
.L_436dae:

            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_436d02
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436dc0:

            movzx EDX,BYTE PTR [RBP]
            test CL,2
            mov BYTE PTR [RAX],DL
            je .L_436dae

            movzx EDX,WORD PTR [RBP+RCX*1-2]
            mov WORD PTR [RAX+RCX*1-2],DX
            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_436d02
.L_436dde:

            mov EDX,DWORD PTR [RBP]
            mov DWORD PTR [RAX],EDX
            mov EDX,DWORD PTR [RBP+RCX*1-4]
            mov DWORD PTR [RAX+RCX*1-4],EDX
            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_436d02
.L_436df4:

            mov EAX,3
            jmp .L_436d1a
.L_436dfe:

            nop
            nop
.L_436e00:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,64
.L_436e0c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI+100],1
            mov WORD PTR [RSP+22],AX
            mov EAX,7
            je .L_436ef3

            mov RBX,RSI
            mov EAX,2062
            lea RSI,QWORD PTR [RSP+22]
            mov WORD PTR [RSP+22],AX
            mov RDX,QWORD PTR [RBX]
            xor EAX,EAX
            mov DWORD PTR [RSP+24],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov RBP,RDI
            mov WORD PTR [RSP+30],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436e70:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_436e70

            mov RDI,RBP
            call .L_436c80

            cmp DWORD PTR [RBP+264],51
            je .L_436f18
.L_436e92:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,1
            jne .L_4371b8
.L_436e9e:

            test AL,8
            jne .L_437130
.L_436ea6:

            movzx EAX,BYTE PTR [RBX+100]
            test AL,16
            jne .L_437100
.L_436eb2:

            test AL,32
            jne .L_4370d0
.L_436eba:

            test AL,4
            jne .L_4370a0
.L_436ec2:

            test AL,8
            jne .L_437048
.L_436eca:

            test AL,AL
            js .L_437018
.L_436ed2:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,2
            jne .L_436fe8
.L_436ede:

            test AL,4
            jne .L_436fb0
.L_436ee6:

            call .L_401240

            mov DWORD PTR [RBP+256],EAX
            xor EAX,EAX
.L_436ef3:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_4371ec

            add RSP,64
.L_436f0b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_436f18:

            xor EAX,EAX
            test BYTE PTR [RBX+100],2
            mov WORD PTR [RSP+32],AX
            mov EAX,7
            je .L_436ef3

            lea RSI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RBX+8]
            mov R12D,2099
            xor R13D,R13D
            xor R14D,R14D
            mov WORD PTR [RSP+32],R12W
            lea RCX,QWORD PTR [RSI+1]
            mov DWORD PTR [RSP+34],0
            mov EAX,6
            mov WORD PTR [RSI+6],R13W
            mov WORD PTR [RSP+40],R14W
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436f68:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_436f68

            mov RDI,RBP
            call .L_436c80

            test BYTE PTR [RBX+100],64
            je .L_436e92

            mov EAX,DWORD PTR [RBX+68]
            lea RSI,QWORD PTR [RSP+14]
            mov R11D,1076
            mov RDI,RBP
            mov WORD PTR [RSP+14],R11W
            bswap EAX
            mov DWORD PTR [RSP+16],EAX
            call .L_436c80

            jmp .L_436e92
          .byte 0x66
          .byte 0x90
.L_436fb0:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            movzx EAX,WORD PTR [RBX+92]
            rol AX,8
            mov WORD PTR [RSP+16],AX
            movzx EAX,BYTE PTR [RBX+94]
            mov BYTE PTR [RSP+18],AL
            call .L_436c80

            jmp .L_436ee6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436fe8:

            movdqu XMM0,XMMWORD PTR [RBX+76]
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,4100
            mov RDI,RBP
            mov WORD PTR [RSP+32],DX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_436ede
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437018:

            movzx EAX,WORD PTR [RBX+72]
            lea RSI,QWORD PTR [RSP+14]
            mov ECX,513
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            rol AX,8
            mov WORD PTR [RSP+16],AX
            call .L_436c80

            jmp .L_436ed2
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437048:

            lea R14,QWORD PTR [RBX+32]
            mov ESI,4099
            lea R12,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R14
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+34]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R14
            mov R13,RAX
            call __memcpy_chk@PLT

            mov RSI,R12
            mov RDI,RBP
            mov BYTE PTR [RSP+33],R13B
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_436eca
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4370a0:

            mov EDI,4101
            movdqu XMM0,XMMWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],DI
            mov RDI,RBP
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_436ec2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4370d0:

            mov RAX,QWORD PTR [RBX+57]
            lea RSI,QWORD PTR [RSP+32]
            mov R8D,2055
            mov RDI,RBP
            mov WORD PTR [RSP+32],R8W
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_436eba
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437100:

            mov RAX,QWORD PTR [RBX+49]
            lea RSI,QWORD PTR [RSP+32]
            mov R9D,2050
            mov RDI,RBP
            mov WORD PTR [RSP+32],R9W
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_436eb2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437130:

            mov EDX,DWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov DWORD PTR [RSP+14],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov DWORD PTR [RSP+18],EAX
            call .L_436c80

            jmp .L_436ea6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4371b8:

            movzx EAX,WORD PTR [RBX+74]
            lea RSI,QWORD PTR [RSP+14]
            mov R10D,768
            mov RDI,RBP
            mov WORD PTR [RSP+14],R10W
            mov BYTE PTR [RSP+16],0
            rol AX,8
            mov WORD PTR [RSP+17],AX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_436e9e
.L_4371ec:

            call __stack_chk_fail@PLT
.L_4371f1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437200:

            sub RSP,40
.L_437204:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp DWORD PTR [RDI+264],14
            je .L_437250

            mov EAX,2099
            mov WORD PTR [RSP+14],AX
            mov RAX,QWORD PTR [RSI]
            lea RSI,QWORD PTR [RSP+14]
            mov QWORD PTR [RSP+16],RAX
            call .L_436c80
.L_437239:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43726e

            add RSP,40
.L_43724d:

            ret 
          .byte 0x66
          .byte 0x90
.L_437250:

            mov RAX,QWORD PTR [RSI]
            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2062
            mov WORD PTR [RSP+14],DX
            mov QWORD PTR [RSP+16],RAX
            call .L_436c80

            jmp .L_437239
.L_43726e:

            call __stack_chk_fail@PLT
.L_437273:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437280:

            movzx ECX,WORD PTR [RDI+260]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_4372d8

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            je .L_4372c0

            mov RDX,RDI
            jmp .L_4372aa
          .byte 0x66
          .byte 0x90
.L_4372a0:

            movzx EDX,BYTE PTR [RAX]
            cmp ESI,EDX
            je .L_4372c0

            mov RDX,RAX
.L_4372aa:

            movzx EAX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            ja .L_4372a0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4372c0:

            movzx ESI,BYTE PTR [RAX+1]
            lea EDX,DWORD PTR [RSI+2]
            mov RSI,RAX
            movzx EDX,DL
            jmp .L_436c30
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4372d8:

            ret 
.L_4372da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4372e0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            movzx EDX,WORD PTR [RSI+260]
            call memcpy@PLT

            movzx EAX,WORD PTR [RBP+260]
            cmp DWORD PTR [RBX+264],14
            mov WORD PTR [RBX+260],AX
            je .L_437328
.L_43730f:

            mov EAX,DWORD PTR [RBP+256]
            mov DWORD PTR [RBX+256],EAX
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_437328:

            mov RDI,RBX
            mov ESI,51
            call .L_437280

            mov ESI,52
            mov RDI,RBX
            call .L_437280

            jmp .L_43730f
.L_437344:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437350:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_43735e:

            movzx EBX,WORD PTR [RDI+260]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSI+32]
            add RBX,RDI
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSI+14280]
            cmp RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            jae .L_437408

            lea RAX,QWORD PTR [RSI+15288]
            lea R15,QWORD PTR [RIP+.L_4376c4]
            lea R12,QWORD PTR [RSI+14088]
            lea R13,QWORD PTR [RSP+48]
            mov RBP,RSI
            mov R14,RDI
            mov QWORD PTR [RSP+40],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4373c0:

            cmp BYTE PTR [R14],12
            ja .L_4373f9

            movzx EAX,BYTE PTR [R14]
            movsxd RAX,DWORD PTR [R15+RAX*4]
            add RAX,R15
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4373d8:

            movzx ESI,WORD PTR [R14+2]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_413ec0

            movzx ESI,BYTE PTR [R14+4]
            mov RDI,R12
            call .L_413ed0
.L_4373f9:

            movzx R10D,BYTE PTR [R14+1]
.L_4373fe:

            lea R14,QWORD PTR [R14+R10*1+2]
            cmp RBX,R14
            ja .L_4373c0
.L_437408:

            xor EAX,EAX
.L_43740a:

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4375b0

            add RSP,88
.L_437422:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437430:

            mov RDI,QWORD PTR [RSP+40]
            lea RSI,QWORD PTR [R14+2]
            call .L_416800

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437448:

            lea RSI,QWORD PTR [R14+2]
            mov RDI,R12
            call .L_413ca0

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437460:

            lea RSI,QWORD PTR [R14+2]
            mov RDI,R12
            call .L_413b70

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437478:

            movzx ESI,WORD PTR [R14+2]
            rol SI,8
            cmp SI,WORD PTR [RBP+14386]
            je .L_4373f9

            mov RDI,QWORD PTR [RSP+8]
            movzx ESI,SI
            call .L_406120

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,131072
            call .L_402d80

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0

            movzx EAX,WORD PTR [R14+3]
            rol AX,8
            cmp AL,BYTE PTR [RBP+14388]
            je .L_4373f9

            mov RDI,QWORD PTR [RSP+8]
            movzx ESI,AL
            call .L_406270

            test EAX,EAX
            jne .L_43740a

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,65536
            call .L_402d80

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437500:

            movzx R10D,BYTE PTR [R14+1]
            lea RSI,QWORD PTR [R14+2]
            mov ECX,17
            mov RDI,R13
            mov RDX,R10
            mov BYTE PTR [RSP+39],R10B
            mov QWORD PTR [RSP+24],R10
            call __memcpy_chk@PLT

            movzx R11D,BYTE PTR [RSP+39]
            lea RSI,QWORD PTR [RBP+14389]
            mov RDI,R13
            mov BYTE PTR [RSP+R11*1+48],0
            call strcmp@PLT

            test EAX,EAX
            mov R10,QWORD PTR [RSP+24]
            je .L_4373fe

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R13
            call .L_405ed0

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,262144
            call .L_402d80

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437578:

            mov RAX,QWORD PTR [RBP+14406]
            cmp QWORD PTR [R14+2],RAX
            lea RSI,QWORD PTR [R14+2]
            je .L_4373f9

            mov RDI,QWORD PTR [RSP+8]
            call .L_406140

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,524288
            call .L_402d80

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4373fe
.L_4375b0:

            call __stack_chk_fail@PLT
.L_4375b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4375c0:

            push RBX
            mov ESI,51
            mov RBX,RDI
            call .L_437280

            mov RDI,RBX
            mov ESI,52
            call .L_437280

            mov DWORD PTR [RBX+264],14
            xor EAX,EAX
            pop RBX
            ret 
.L_4375e9:
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4375ec:
          .long .L_436930-.L_4375ec
          .long .L_436950-.L_4375ec
          .long .L_436910-.L_4375ec
          .long .L_4368d0-.L_4375ec
          .long .L_436890-.L_4375ec
          .long .L_436870-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436850-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436748-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_4367e0-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436762-.L_4375ec
          .long .L_436818-.L_4375ec
          .long .L_4367c8-.L_4375ec
          .long .L_436788-.L_4375ec
.L_4376c4:
          .byte .L_4377b8-.L_4376c4
          .byte 0xfd
          .byte 0xff
          .byte 0xff
          .long .L_437478-.L_4376c4
          .long .L_437578-.L_4376c4
          .long .L_437500-.L_4376c4
          .long .L_437460-.L_4376c4
          .long .L_437448-.L_4376c4
          .long .L_4373f9-.L_4376c4
          .long .L_437430-.L_4376c4
          .long .L_4373f9-.L_4376c4
          .long .L_4373f9-.L_4376c4
          .long .L_4373f9-.L_4376c4
          .long .L_4373f9-.L_4376c4
          .long .L_4373d8-.L_4376c4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437700:

            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+4],EDX
            ret 
.L_43770a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_437710:

            push RBX
            xor EBX,EBX
            cmp DWORD PTR [RDI+4],14
            setne BL
            add EBX,1
            call .L_4334e0

            mov ESI,EBX
            mov EDX,4294967295
            mov RDI,RAX
            pop RBX
            jmp .L_401560
.L_437732:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437740:

            push R13
            push R12
            mov EDX,256
            push RBP
            push RBX
            xor EBP,EBP
            lea R13,QWORD PTR [RSI+260]
            mov RBX,RSI
            mov R12,RDI
            sub RSP,8
            mov WORD PTR [RSI+260],DX
            cmp DWORD PTR [RDI+4],14
            setne BPL
            add EBP,1
            call .L_4334e0

            xor EDX,EDX
            mov ESI,EBP
            mov R8,R13
            mov RCX,RBX
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            je .L_4377a8

            xor EAX,EAX
            mov WORD PTR [RBX+260],AX
.L_437796:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4377a8:

            mov ESI,52
            mov RDI,RBX
            call .L_436680

            test RAX,RAX
.L_4377b8:

            mov R13,RAX
            je .L_437796

            call .L_401240

            mov ECX,DWORD PTR [R13+2]
            sub EAX,DWORD PTR [R12]
            bswap ECX
            mov EDX,ECX
            sub EDX,EAX
            cmp EAX,ECX
            bswap EDX
            mov EAX,EDX
            cmovae EAX,EBP
            mov DWORD PTR [R13+2],EAX
            call .L_401240

            mov DWORD PTR [RBX+256],EAX
            add RSP,8
.L_4377ec:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4377f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437800:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            xor R12D,R12D
            sub RSP,312
.L_43781a:

            mov ESI,DWORD PTR [RDI+4]
            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,RBP
            call .L_436620

            lea RDI,QWORD PTR [RBX+8]
            mov RCX,RBX
            xor EAX,EAX
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+96],0
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov EAX,256
            mov RDI,R13
            mov WORD PTR [RSP+276],AX
            cmp DWORD PTR [R13+4],14
            setne R12B
            add R12D,1
            call .L_4334e0

            lea R8,QWORD PTR [RBP+260]
            xor EDX,EDX
            mov RCX,RBP
            mov ESI,R12D
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_43790a

            movzx R10D,WORD PTR [RSP+276]
            add R10,RBP
            cmp R10,RBP
            jbe .L_43790a

            mov RDX,RBP
            lea R9,QWORD PTR [RIP+.L_438224]
            lea RBP,QWORD PTR [RBX+76]
            lea R11,QWORD PTR [RBX+32]
            mov R12D,16
            nop
            nop
            nop
            nop
            nop
.L_4378d0:

            movzx R8D,BYTE PTR [RDX+1]
            cmp BYTE PTR [RDX],53
            mov RCX,R8
            ja .L_437900

            movzx ESI,BYTE PTR [RDX]
            movsxd RSI,DWORD PTR [R9+RSI*4]
            add RSI,R9
            jmp RSI
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4378f0:

            mov ECX,DWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],64
            bswap ECX
            mov DWORD PTR [RBX+68],ECX
            nop
            nop
            nop
            nop
.L_437900:

            lea RDX,QWORD PTR [RDX+R8*1+2]
            cmp R10,RDX
            ja .L_4378d0
.L_43790a:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_437bc7

            add RSP,312
.L_437928:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437938:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RCX+R8*1]
            cmp RCX,RDI
            jae .L_437900

            cmp BYTE PTR [RDX+2],0
            jne .L_437959

            jmp .L_437b90
.L_437950:

            cmp BYTE PTR [RCX],0
            je .L_437b90
.L_437959:

            movzx ESI,BYTE PTR [RCX+1]
            lea RCX,QWORD PTR [RCX+RSI*1+2]
            cmp RDI,RCX
            ja .L_437950

            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437970:

            lea RDI,QWORD PTR [RDX+2]
            lea R13,QWORD PTR [RDX+8]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_437980:

            movzx ESI,BYTE PTR [RDI]
            shl RCX,8
            add RDI,1
            or RCX,RSI
            cmp RDI,R13
            jne .L_437980

            mov QWORD PTR [RBX+8],RCX
            or BYTE PTR [RBX+100],2
            jmp .L_437900
.L_4379a0:

            lea RDI,QWORD PTR [RDX+2]
            lea R13,QWORD PTR [RDX+8]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_4379b0:

            movzx ESI,BYTE PTR [RDI]
            shl RCX,8
            add RDI,1
            or RCX,RSI
            cmp R13,RDI
            jne .L_4379b0

            mov QWORD PTR [RBX],RCX
            or BYTE PTR [RBX+100],1
            jmp .L_437900
          .byte 0x90
.L_4379d0:

            movzx ECX,WORD PTR [RDX+2]
            rol CX,8
            mov WORD PTR [RBX+92],CX
            movzx ECX,BYTE PTR [RDX+4]
            or BYTE PTR [RBX+101],4
            mov BYTE PTR [RBX+94],CL
            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4379f0:

            mov RCX,QWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],32
            mov QWORD PTR [RBX+57],RCX
            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437a08:

            movdqu XMM0,XMMWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],4
            movups XMMWORD PTR [RBX+16],XMM0
            jmp .L_437900
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437a20:

            cmp R8D,8
            lea RSI,QWORD PTR [RDX+2]
            jae .L_437b58

            test R8B,4
            jne .L_437b9f

            test R8D,R8D
            je .L_437b87

            movzx ECX,BYTE PTR [RSI]
            test R8B,2
            mov BYTE PTR [RBP],CL
            je .L_437b87

            mov ECX,R8D
            movzx ESI,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [RBP+RCX*1-2],SI
            jmp .L_437b87
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437a68:

            movzx ECX,WORD PTR [RDX+2]
            or BYTE PTR [RBX+100],128
            rol CX,8
            mov WORD PTR [RBX+72],CX
            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437a80:

            movzx ECX,WORD PTR [RDX+3]
            or BYTE PTR [RBX+101],1
            rol CX,8
            mov WORD PTR [RBX+74],CX
            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437a98:

            cmp R8B,16
            lea RDI,QWORD PTR [RDX+2]
            cmova RCX,R12
            movzx ESI,CL
            cmp ESI,8
            jb .L_437b28

            mov R13,QWORD PTR [RDX+2]
            mov QWORD PTR [R11],R13
            mov R13D,ESI
            mov R14,QWORD PTR [RDI+R13*1-8]
            mov QWORD PTR [R11+R13*1-8],R14
            lea R13,QWORD PTR [RBX+40]
            mov R14,R11
            and R13,-8
            sub R14,R13
            add ESI,R14D
            sub RDI,R14
            and ESI,4294967288
            cmp ESI,8
            jb .L_437b00

            and ESI,4294967288
            xor R14D,R14D
            mov DWORD PTR [RSP+12],EAX
.L_437ae6:

            mov R15D,R14D
            add R14D,8
            mov RAX,QWORD PTR [RDI+R15*1]
            cmp R14D,ESI
            mov QWORD PTR [R13+R15*1],RAX
            jb .L_437ae6

            mov EAX,DWORD PTR [RSP+12]
            nop
.L_437b00:

            mov BYTE PTR [RBX+RCX*1+32],0
            or BYTE PTR [RBX+100],8
            jmp .L_437900
          .byte 0x66
          .byte 0x90
.L_437b10:

            mov RCX,QWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],16
            mov QWORD PTR [RBX+49],RCX
            jmp .L_437900
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437b28:

            test SIL,4
            jne .L_437bb1

            test ESI,ESI
            je .L_437b00

            movzx R13D,BYTE PTR [RDI]
            test SIL,2
            mov BYTE PTR [R11],R13B
            je .L_437b00

            mov ESI,ESI
            movzx EDI,WORD PTR [RDI+RSI*1-2]
            mov WORD PTR [R11+RSI*1-2],DI
            jmp .L_437b00
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437b58:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBP],RCX
            mov ECX,R8D
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBP+RCX*1-8],RDI
            lea RDI,QWORD PTR [RBX+84]
            mov RCX,RBP
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R8D
            shr ECX,3

            rep movsq 
.L_437b87:

            or BYTE PTR [RBX+101],2
            jmp .L_437900
.L_437b90:

            mov ECX,DWORD PTR [RCX+2]
            or BYTE PTR [RBX+101],8
            mov DWORD PTR [RBX+96],ECX
            jmp .L_437900
.L_437b9f:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RBP],ECX
            mov ECX,R8D
            mov ESI,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [RBP+RCX*1-4],ESI
            jmp .L_437b87
.L_437bb1:

            mov R13D,DWORD PTR [RDI]
            mov ESI,ESI
            mov DWORD PTR [R11],R13D
            mov EDI,DWORD PTR [RDI+RSI*1-4]
            mov DWORD PTR [R11+RSI*1-4],EDI
            jmp .L_437b00
.L_437bc7:

            call __stack_chk_fail@PLT
.L_437bcc:

            nop
            nop
            nop
            nop
.L_437bd0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,360
.L_437be7:

            mov ESI,DWORD PTR [RDI+4]
            lea RBP,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            mov RDI,RBP
            call .L_436620

            xor EAX,EAX
            test BYTE PTR [RBX+100],1
            mov WORD PTR [RSP+22],AX
            mov EAX,7
            je .L_437cf6

            mov EAX,2062
            lea RSI,QWORD PTR [RSP+22]
            mov RDX,QWORD PTR [RBX]
            mov WORD PTR [RSP+22],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+24],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+30],AX
            mov EAX,6
.L_437c50:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_437c50

            mov RDI,RBP
            call .L_436c80

            cmp DWORD PTR [R12+4],51
            je .L_437d50
.L_437c71:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,1
            jne .L_437ff8
.L_437c7d:

            test AL,8
            jne .L_437f70
.L_437c85:

            movzx EAX,BYTE PTR [RBX+100]
            test AL,16
            jne .L_437f40
.L_437c91:

            test AL,32
            jne .L_437f10
.L_437c99:

            test AL,4
            jne .L_437ee0
.L_437ca1:

            test AL,8
            jne .L_437e88
.L_437ca9:

            test AL,AL
            js .L_437e58
.L_437cb1:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,2
            jne .L_437e28
.L_437cbd:

            test AL,4
            jne .L_437df0
.L_437cc5:

            movzx ECX,WORD PTR [RSP+324]
            mov EAX,DWORD PTR [R12+4]
            test CX,CX
            jne .L_437d20

            xor EBX,EBX
            cmp EAX,14
            mov RDI,R12
            setne BL
            add EBX,1
            call .L_4334e0

            xor EDX,EDX
            mov ESI,EBX
            mov RDI,RAX
            call .L_401560
.L_437cf6:

            mov RDI,QWORD PTR [RSP+344]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43802c

            add RSP,360
.L_437d14:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_437d20:

            xor R13D,R13D
            cmp EAX,14
            movzx EBX,CX
            setne R13B
            mov RDI,R12
            add R13D,1
            call .L_4334e0

            mov ECX,EBX
            mov RDX,RBP
            mov ESI,R13D
            mov RDI,RAX
            call .L_401540

            jmp .L_437cf6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437d50:

            xor EAX,EAX
            test BYTE PTR [RBX+100],2
            mov WORD PTR [RSP+32],AX
            mov EAX,7
            je .L_437cf6

            lea RSI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RBX+8]
            mov R13D,2099
            xor R14D,R14D
            xor R15D,R15D
            mov WORD PTR [RSP+32],R13W
            lea RCX,QWORD PTR [RSI+1]
            mov DWORD PTR [RSP+34],0
            mov EAX,6
            mov WORD PTR [RSI+6],R14W
            mov WORD PTR [RSP+40],R15W
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437da0:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_437da0

            mov RDI,RBP
            call .L_436c80

            test BYTE PTR [RBX+100],64
            je .L_437c71

            mov EAX,DWORD PTR [RBX+68]
            lea RSI,QWORD PTR [RSP+14]
            mov R11D,1076
            mov RDI,RBP
            mov WORD PTR [RSP+14],R11W
            bswap EAX
            mov DWORD PTR [RSP+16],EAX
            call .L_436c80

            jmp .L_437c71
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437df0:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            movzx EAX,WORD PTR [RBX+92]
            rol AX,8
            mov WORD PTR [RSP+16],AX
            movzx EAX,BYTE PTR [RBX+94]
            mov BYTE PTR [RSP+18],AL
            call .L_436c80

            jmp .L_437cc5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437e28:

            movdqu XMM0,XMMWORD PTR [RBX+76]
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,4100
            mov RDI,RBP
            mov WORD PTR [RSP+32],DX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_437cbd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437e58:

            movzx EAX,WORD PTR [RBX+72]
            lea RSI,QWORD PTR [RSP+14]
            mov ECX,513
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            rol AX,8
            mov WORD PTR [RSP+16],AX
            call .L_436c80

            jmp .L_437cb1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437e88:

            lea R15,QWORD PTR [RBX+32]
            mov ESI,4099
            lea R13,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R15
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+34]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R15
            mov R14,RAX
            call __memcpy_chk@PLT

            mov RSI,R13
            mov RDI,RBP
            mov BYTE PTR [RSP+33],R14B
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_437ca9
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437ee0:

            mov EDI,4101
            movdqu XMM0,XMMWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],DI
            mov RDI,RBP
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_437ca1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437f10:

            mov RAX,QWORD PTR [RBX+57]
            lea RSI,QWORD PTR [RSP+32]
            mov R8D,2055
            mov RDI,RBP
            mov WORD PTR [RSP+32],R8W
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_437c99
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437f40:

            mov RAX,QWORD PTR [RBX+49]
            lea RSI,QWORD PTR [RSP+32]
            mov R9D,2050
            mov RDI,RBP
            mov WORD PTR [RSP+32],R9W
            mov QWORD PTR [RSP+34],RAX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_437c91
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437f70:

            mov EDX,DWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov DWORD PTR [RSP+14],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov DWORD PTR [RSP+18],EAX
            call .L_436c80

            jmp .L_437c85
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_437ff8:

            movzx EAX,WORD PTR [RBX+74]
            lea RSI,QWORD PTR [RSP+14]
            mov R10D,768
            mov RDI,RBP
            mov WORD PTR [RSP+14],R10W
            mov BYTE PTR [RSP+16],0
            rol AX,8
            mov WORD PTR [RSP+17],AX
            call .L_436c80

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_437c7d
.L_43802c:

            call __stack_chk_fail@PLT
.L_438031:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438040:

            push R13
            push R12
            mov ECX,33
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,296
.L_438055:

            mov RBX,RSP
            mov RDI,RBX

            rep movsq 

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            cmp DWORD PTR [RBP+4],14
            mov EAX,DWORD PTR [RSI]
            mov DWORD PTR [RDI],EAX
            je .L_438100

            movzx ECX,WORD PTR [RSP+260]
            test CX,CX
            je .L_4380e0

            movzx R12D,CX
            mov R13D,2
.L_438096:

            mov RDI,RBP
            call .L_4334e0

            mov RDX,RBX
            mov ECX,R12D
            mov ESI,R13D
            mov RDI,RAX
            call .L_401540

            mov EBX,EAX
.L_4380b1:

            test EBX,EBX
            jne .L_4380bd

            call .L_401240

            mov DWORD PTR [RBP],EAX
.L_4380bd:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_438150

            add RSP,296
.L_4380d9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4380e0:

            mov EBX,2
.L_4380e5:

            mov RDI,RBP
            call .L_4334e0

            mov ESI,EBX
            xor EDX,EDX
            mov RDI,RAX
            call .L_401560

            mov EBX,EAX
            jmp .L_4380b1
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_438100:

            mov ESI,51
            mov RDI,RBX
            call .L_437280

            mov ESI,52
            mov RDI,RBX
            call .L_437280

            movzx ECX,WORD PTR [RSP+260]
            test CX,CX
            jne .L_438138

            cmp DWORD PTR [RBP+4],14
            jne .L_4380e0

            mov EBX,1
            jmp .L_4380e5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438138:

            xor R13D,R13D
            cmp DWORD PTR [RBP+4],14
            movzx R12D,CX
            setne R13B
            add R13D,1
            jmp .L_438096
.L_438150:

            call __stack_chk_fail@PLT
.L_438155:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438160:

            xor EAX,EAX
            cmp DWORD PTR [RDI+4],14
            setne AL
            add EAX,1
            ret 
.L_43816d:

            nop
            nop
            nop
.L_438170:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,288
.L_438181:

            mov ESI,DWORD PTR [RDI+4]
            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_436620

            mov RSI,RBX
            mov RDI,RBP
            call .L_437740

            test EAX,EAX
            je .L_4381d8
.L_4381b1:

            mov EAX,1
.L_4381b6:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43821c

            add RSP,288
.L_4381d0:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4381d8:

            mov RDI,RBX
            call .L_436a30

            test R12,R12
            mov RDI,RAX
            sete DL
            test RAX,RAX
            sete CL
            test DL,DL
            je .L_4381f9

            xor EAX,EAX
            test CL,CL
            jne .L_4381b6
.L_4381f9:

            test RDI,RDI
            je .L_438202

            test DL,DL
            jne .L_438215
.L_438202:

            test R12,R12
            je .L_43820b

            test CL,CL
            jne .L_4381b1
.L_43820b:

            mov RSI,R12
            call .L_40e0c0

            jmp .L_4381b6
.L_438215:

            mov EAX,4294967295
            jmp .L_4381b6
.L_43821c:

            call __stack_chk_fail@PLT
.L_438221:
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_438224:
          .long .L_437a80-.L_438224
          .long .L_437a68-.L_438224
          .long .L_437b10-.L_438224
          .long .L_437a98-.L_438224
          .long .L_437a20-.L_438224
          .long .L_437a08-.L_438224
          .long .L_437900-.L_438224
          .long .L_4379f0-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_4379d0-.L_438224
          .long .L_437900-.L_438224
          .long .L_4379a0-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437900-.L_438224
          .long .L_437970-.L_438224
          .long .L_4378f0-.L_438224
          .long .L_437938-.L_438224
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438300:

            push RBP
            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov RBX,RDX
            mov RBP,RCX
            sub RSP,8
            call .L_401490

            test EAX,EAX
            mov ESI,4294967236
            jne .L_43832b

            xor ESI,ESI
            test RBP,RBP
            je .L_43832b

            mov QWORD PTR [RBP],RBX
.L_43832b:

            add RSP,8
            mov EAX,ESI
            pop RBX
            pop RBP
            ret 
.L_438334:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438340:

            cmp ESI,1
            je .L_438350

            ret 
          .byte 0x66

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438350:

            push RBP
            push RBX
            mov EDI,10
            mov RBX,R8
            sub RSP,8
            call .L_432a60

            mov EDI,1
            mov RBP,RAX
            call .L_4329f0

            add RSP,8
            mov R9,RBX
            mov R8,RBP
            pop RBX
            pop RBP
            lea RDX,QWORD PTR [RIP+.L_438f9f]
            mov RCX,RAX
            mov ESI,10
            mov EDI,1
            xor EAX,EAX
            jmp .L_4012c0
.L_438397:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4383a0:

            push RBX
.L_4383a1:

            mov RBX,RDI
            mov BYTE PTR [RDI+1184],0
            add RDI,600
            call .L_4521f0

            lea RDI,QWORD PTR [RBX+984]
            call .L_452460

            lea RDI,QWORD PTR [RBX+256]
            call .L_4482c0

            lea RDI,QWORD PTR [RBX+104]
            call .L_449350

            lea RDI,QWORD PTR [RBX+1144]
            call .L_449680

            mov RAX,QWORD PTR [RBX+1240]
            test RAX,RAX
            je .L_438400

            mov RDI,QWORD PTR [RBX+1264]
            xor ESI,ESI
            pop RBX
.L_4383fa:

            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438400:

            pop RBX
            ret 
.L_438402:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438410:

            lea RAX,QWORD PTR [RIP+.L_438f40]
            pxor XMM0,XMM0
            mov RDX,RDI
            mov BYTE PTR [RDI+1],0
            mov BYTE PTR [RDI+98],0
            mov QWORD PTR [RDI+1192],RAX
            lea RAX,QWORD PTR [RDI+1192]
            mov BYTE PTR [RDI+1184],0
            mov DWORD PTR [RDI+1200],0
            mov DWORD PTR [RDI+1216],0
            lea RSI,QWORD PTR [RDI+264]
            mov QWORD PTR [RDI+1208],RAX
            xor EAX,EAX
            mov BYTE PTR [RDI+1220],0
            mov WORD PTR [RDI+1273],AX
            mov QWORD PTR [RDI+1224],0
            lea RDI,QWORD PTR [RDI+112]
            mov DWORD PTR [RDI+1120],0
            mov QWORD PTR [RDI+1128],0
            mov ECX,EDX
            mov QWORD PTR [RDI+1136],0
            mov QWORD PTR [RDI+1144],0
            xor EAX,EAX
            mov QWORD PTR [RDI+1152],0
            mov BYTE PTR [RDI+1160],0
            and RSI,-8
            movups XMMWORD PTR [RDI-46],XMM0
            mov QWORD PTR [RDI-8],0
            mov QWORD PTR [RDI+136],0
            lea R8,QWORD PTR [RDX+608]
            movups XMMWORD PTR [RDI-30],XMM0
            and RDI,-8
            sub ECX,EDI
            add ECX,256
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,EDX
            mov RDI,RSI
            mov QWORD PTR [RDX+256],0
            sub ECX,ESI
            mov QWORD PTR [RDX+592],0
            lea RSI,QWORD PTR [RDX+992]
            add ECX,600
            shr ECX,3
            and RSI,-8

            rep stosq QWORD PTR [RDI]

            mov RDI,R8
            mov ECX,EDX
            mov QWORD PTR [RDX+600],0
            and RDI,-8
            mov QWORD PTR [RDX+976],0
            sub ECX,EDI
            add ECX,984
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,EDX
            mov RDI,RSI
            mov QWORD PTR [RDX+984],0
            sub ECX,ESI
            mov QWORD PTR [RDX+1136],0
            add ECX,1144
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movups XMMWORD PTR [RDX+1144],XMM0
            movups XMMWORD PTR [RDX+1160],XMM0
            mov QWORD PTR [RDX+1176],0
            mov BYTE PTR [RDX],32
            ret 
.L_43859c:

            nop
            nop
            nop
            nop
.L_4385a0:

            push RBX
            mov RBX,RDI
            add RDI,600
            call .L_4520c0

            cmp BYTE PTR [RBX+1184],0
            je .L_4385c1

            mov RDI,RBX
            call .L_4383a0
.L_4385c1:

            xor EAX,EAX
            pop RBX
            ret 
.L_4385c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4385d0:

            cmp BYTE PTR [RDI+1184],0
            jne .L_4385e0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4385e0:

            jmp .L_4383a0
.L_4385e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4385f0:

            movzx EAX,BYTE PTR [RDI+1184]
            ret 
.L_4385f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438600:

            cmp DL,32
            mov EAX,7
            ja .L_438665

            movzx EAX,DL
            lea R8,QWORD PTR [RDI+66]
            cmp EAX,8
            jb .L_438670

            mov RCX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+66],RCX
            mov ECX,EAX
            mov R9,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [R8+RCX*1-8],R9
            lea RCX,QWORD PTR [RDI+74]
            and RCX,-8
            sub R8,RCX
            add EAX,R8D
            sub RSI,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_438660

            and EAX,4294967288
            xor R8D,R8D
.L_438648:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RSI+R9*1]
            cmp R8D,EAX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_438648

            nop
            nop
            nop
            nop
.L_438660:

            mov BYTE PTR [RDI+98],DL
            xor EAX,EAX
.L_438665:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438670:

            test AL,4
            jne .L_438698

            test EAX,EAX
            je .L_438660

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RDI+66],CL
            je .L_438660

            mov ECX,EAX
            movzx EAX,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R8+RCX*1-2],AX
            jmp .L_438660
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438698:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RDI+66],ECX
            mov ECX,EAX
            mov EAX,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R8+RCX*1-4],EAX
            jmp .L_438660
.L_4386aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4386b0:

            sub RSP,8
            add RDI,600
            movzx EDX,DL
            call .L_4498c0

            cmp EAX,4294934784
            je .L_4386f0

            cmp EAX,4294938368
            je .L_4386e0

            test EAX,EAX
            js .L_4386fa

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4386e0:

            mov EAX,7
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4386f0:

            mov EAX,3
            add RSP,8
            ret 
.L_4386fa:

            call .L_400f48
.L_4386ff:

            nop
.L_438700:

            cmp DWORD PTR [RDI+608],16
            sete AL
            ret 
.L_43870b:

            nop
            nop
            nop
            nop
            nop
.L_438710:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,152
.L_43871d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            cmp DX,128
            ja .L_438798

            movzx EAX,BYTE PTR [RSI+78]
            mov RBX,RDI
            mov R12,RSI
            mov EBP,EDX
            shr AL,2
            and EAX,15
            je .L_438751

            mov BYTE PTR [RDI+1273],AL
.L_438751:

            mov R13,RSP
            xor ESI,ESI
            movzx EDX,DX
            mov RCX,R13
            mov RDI,R12
            call .L_4038b0

            lea RDI,QWORD PTR [RBX+600]
            movzx EDX,BP
            mov RSI,R13
            call .L_451ec0

            cmp EAX,4294934784
            je .L_438798

            cmp EAX,4294938368
            je .L_4387c0

            test EAX,EAX
            js .L_4387cc

            mov RDI,R12
            call .L_403400

            xor EAX,EAX
            jmp .L_43879d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438798:

            mov EAX,3
.L_43879d:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4387c7

            add RSP,152
.L_4387b7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_4387c0:

            mov EAX,7
            jmp .L_43879d
.L_4387c7:

            call __stack_chk_fail@PLT
.L_4387cc:

            call .L_400f48
.L_4387d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4387e0:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            movzx EDX,DX
            sub RSP,8
            movzx ECX,BYTE PTR [RDI+1273]
            mov RDI,QWORD PTR [RDI+1264]
            call QWORD PTR [RBX+1256]

            movzx EDX,BYTE PTR [RBX+1274]
            test EAX,EAX
            mov BYTE PTR [RBX+1273],DL
            je .L_438828

            cmp EAX,3
            jne .L_438831

            add RSP,8
            mov EAX,4294940544
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_438828:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_438831:

            lea RCX,QWORD PTR [RIP+.L_439020]
            lea RSI,QWORD PTR [RIP+.L_45fd50-159142]
            lea RDI,QWORD PTR [RIP+.L_438fc5]
            mov EDX,298
            call __assert_fail@PLT
.L_438850:

            jmp .L_4387e0
.L_438852:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438860:

            push RBX
.L_438861:

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+1224]
            test RDI,RDI
            je .L_4388a8

            movzx EAX,WORD PTR [RBX+1234]
            test AX,AX
            je .L_4388a8

            mov RCX,RSI
            movzx ESI,WORD PTR [RBX+1232]
            cmp RAX,RDX
            cmovbe RDX,RAX
            call .L_4038b0

            movzx EAX,AX
            add WORD PTR [RBX+1232],AX
            sub WORD PTR [RBX+1234],AX
            pop RBX
.L_4388a4:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4388a8:

            mov EAX,4294940416
            pop RBX
            ret 
.L_4388af:

            nop
.L_4388b0:

            jmp .L_438860
.L_4388b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4388c0:

            cmp BYTE PTR [RDI+1220],0
            je .L_438900

            lea RDX,QWORD PTR [RDI+1192]
            cmp QWORD PTR [RDI+1208],RDX
            mov EAX,2
            je .L_4388f8

            push RBX
            mov EBX,DWORD PTR [RDI+1216]
            call .L_401240

            sub EBX,EAX
            xor EAX,EAX
            test EBX,EBX
            setle AL
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4388f8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438900:

            mov EAX,4294967295
            ret 
.L_438906:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438910:

            jmp .L_4388c0
.L_438912:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438920:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+1192]
            push RBP
            push RBX
            sub RSP,8
            test EDX,EDX
            je .L_438970

            mov EBP,EDX
            mov BYTE PTR [RDI+1220],1
            mov R13D,ESI
            mov RBX,RDI
            call .L_401240

            mov EDX,EBP
            mov ESI,EAX
            mov RDI,R12
            call .L_433770

            call .L_401240

            lea ESI,DWORD PTR [R13+RAX*1]
            mov DWORD PTR [RBX+1216],ESI
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_438970:

            mov BYTE PTR [RDI+1220],0
            add RSP,8
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_433690
.L_438989:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438990:

            jmp .L_438920
.L_438992:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4389a0:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RDX
            mov R14,RCX
            mov RBX,R8
            sub RSP,168
.L_4389c0:

            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_4389d9:

            call .L_434830
.L_4389de:

            mov RDI,RBP
.L_4389e1:

            call .L_434850

            lea EDX,DWORD PTR [RBX+R15*1]
            mov RSI,R13
            mov RDI,RBP
            add EDX,R14D
            add EDX,EDX
            movzx EDX,DX
            call .L_434860

            lea RBX,QWORD PTR [RSP+112]
            mov RDI,RBP
            mov RSI,RBX
            call .L_434870

            mov RDI,R12
            call .L_433510

            lea RDI,QWORD PTR [RAX+1368]
            mov RSI,RBX
            call .L_413ea0
.L_438a24:

            mov RDI,RBP
.L_438a27:

            call .L_434840
.L_438a2c:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            jne .L_438a53

            add RSP,168
.L_438a48:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_438a53:

            call __stack_chk_fail@PLT
.L_438a58:

            mov RBX,RAX
            mov RDI,RBP
            call .L_434840

            mov RDI,RBX
.L_438a66:

            call _Unwind_Resume@PLT
.L_438a6b:

            nop
            nop
            nop
            nop
            nop
.L_438a70:

            jmp .L_4389a0
.L_438a75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438a80:

            push R12
            push RBP
            push RBX
            sub RSP,800
.L_438a8b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+792],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+1184],0
            je .L_438b68

            mov RBX,RDI
            lea R12,QWORD PTR [RDI+600]
            lea RBP,QWORD PTR [RSP+16]
            jmp .L_438af5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438ac0:

            mov RDI,R12
            call .L_451b20

            cmp DWORD PTR [RBX+608],16
            je .L_438b90
.L_438ad5:

            test EAX,EAX
            jle .L_438b12
.L_438ad9:

            movzx EDX,AX
            mov RDI,QWORD PTR [RBX+1264]
            mov RSI,RBP
            call QWORD PTR [RBX+1248]

            cmp BYTE PTR [RBX+1184],0
            je .L_438b68
.L_438af5:

            cmp DWORD PTR [RBX+608],16
            jne .L_438ac0

            mov EDX,768
            mov RSI,RBP
            mov RDI,R12
            call .L_451ba0

            test EAX,EAX
            jg .L_438ad9
.L_438b12:

            mov EDX,EAX
            and DL,127
            cmp EDX,4294940416
            je .L_438b68

            test EAX,EAX
            je .L_438b68

            cmp EAX,4294936704
            je .L_438bc2

            jle .L_438bbb

            cmp EAX,4294938240
            je .L_438bfe

            cmp EAX,4294940032
            jne .L_438bdd
.L_438b4a:

            mov RDI,R12
            call .L_4513e0

            movzx EDX,BYTE PTR [RBX+98]
            lea RSI,QWORD PTR [RBX+66]
            mov RDI,R12
            call .L_451770

            nop
            nop
            nop
            nop
            nop
            nop
.L_438b68:

            mov RAX,QWORD PTR [RSP+792]
            xor RAX,QWORD PTR FS:[40]
            jne .L_438c1f

            add RSP,800
.L_438b86:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438b90:

            mov RDX,QWORD PTR [RBX+1240]
            test RDX,RDX
            je .L_438ad5

            mov DWORD PTR [RSP+12],EAX
            mov RDI,QWORD PTR [RBX+1264]
            mov ESI,1
            call RDX

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_438ad5
.L_438bbb:

            cmp EAX,4294936448
            jne .L_438bdd
.L_438bc2:

            mov RDI,R12
            call .L_4520c0
.L_438bca:

            cmp BYTE PTR [RBX+1184],0
            je .L_438b68

            mov RDI,RBX
            call .L_4383a0

            jmp .L_438b68
.L_438bdd:

            cmp DWORD PTR [RBX+608],16
            je .L_438b4a

            mov EDX,40
            mov ESI,2
            mov RDI,R12
            call .L_44f780

            jmp .L_438bca
.L_438bfe:

            cmp DWORD PTR [RBX+608],16
            je .L_438b4a

            mov EDX,20
            mov ESI,2
            mov RDI,R12
            call .L_44f780

            jmp .L_438bca
.L_438c1f:

            call __stack_chk_fail@PLT
.L_438c24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438c30:

            sub RSP,8
            mov QWORD PTR [RDI+1224],RSI
            mov WORD PTR [RDI+1232],DX
            mov WORD PTR [RDI+1234],CX
            call .L_438a80

            xor EAX,EAX
            add RSP,8
            ret 
.L_438c55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438c60:

            jmp .L_438a80
.L_438c65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438c70:

            push R15
            push R14
            lea R14,QWORD PTR [RDI+600]
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+984]
            lea R13,QWORD PTR [RBX+256]
            lea RBP,QWORD PTR [RBX+104]
            sub RSP,24
.L_438c9a:

            mov QWORD PTR [RDI+1240],RDX
            mov QWORD PTR [RDI+1248],RCX
            mov QWORD PTR [RDI+1256],R8
            mov QWORD PTR [RDI+1264],R9
            mov BYTE PTR [RDI+1272],SIL
            mov QWORD PTR [RDI+1224],0
            mov BYTE PTR [RDI+1273],0
            mov RDI,R14
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_451230

            mov RDI,R12
            call .L_452340

            mov RDI,R13
            call .L_448290

            mov RDI,RBP
            call .L_449310

            lea RSI,QWORD PTR [RIP+.L_438300]
            xor EDX,EDX
            mov R8D,1
            mov ECX,32
            mov RDI,RBP
            call .L_449370

            test EAX,EAX
            mov EDX,EAX
            je .L_438d80
.L_438d21:

            cmp EDX,4294934784
            je .L_438d70

            cmp EDX,4294938368
            mov EAX,7
            jne .L_438d60
.L_438d36:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_438f35

            add RSP,24
.L_438d4e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438d60:

            test EDX,EDX
            js .L_438f3a

            xor EAX,EAX
            jmp .L_438d36
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438d70:

            mov EAX,3
            jmp .L_438d36
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438d80:

            mov EDI,1
            mov R15,RSP
            call .L_448ad0

            mov RDI,RBX
            call .L_4334e0

            mov RSI,R15
            mov RDI,RAX
            call .L_4012d0

            mov RSI,OFFSET .L_4493e0
            mov RDX,RBP
            mov R8D,8
            mov RCX,R15
            mov RDI,R13
            call .L_448540

            test EAX,EAX
            mov EDX,EAX
            jne .L_438d21

            movzx ESI,BYTE PTR [RBX+1272]
            xor ECX,ECX
            mov EDX,1
            mov RDI,R12
            xor ESI,1
            movzx ESI,SIL
            call .L_452370

            test EAX,EAX
            mov EDX,EAX
            jne .L_438d21

            mov R15,OFFSET .L_448750
            mov RDX,R13
            mov RDI,R12
            mov RSI,R15
            call .L_451620

            mov EDX,3
            mov ESI,3
            mov RDI,R12
            call .L_4517d0

            mov EDX,3
            mov ESI,3
            mov RDI,R12
            call .L_4517c0

            lea RSI,QWORD PTR [RIP+.L_439070]
            mov RDI,R12
            call .L_451740

            lea RSI,QWORD PTR [RIP+.L_438a70]
            mov RDX,RBX
            mov RDI,R12
            call .L_451870

            mov EDX,60000
            mov ESI,8000
            mov RDI,R12
            call .L_4515f0

            lea RSI,QWORD PTR [RIP+.L_438340]
            mov RDX,RBX
            mov RDI,R12
            call .L_451630

            cmp BYTE PTR [RBX+1272],0
            je .L_438ef0
.L_438e73:

            mov RSI,R12
            mov RDI,R14
            call .L_451260

            test EAX,EAX
            mov EDX,EAX
            jne .L_438d21

            lea RCX,QWORD PTR [RIP+.L_4388b0]
            lea RDX,QWORD PTR [RIP+.L_438850]
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,R14
            call .L_451640

            lea RCX,QWORD PTR [RIP+.L_438910]
            lea RDX,QWORD PTR [RIP+.L_438990]
            mov RSI,RBX
            mov RDI,R14
            call .L_451670

            movzx EDX,BYTE PTR [RBX+98]
            lea RSI,QWORD PTR [RBX+66]
            mov RDI,R14
            call .L_451770

            test EAX,EAX
            mov EDX,EAX
            jne .L_438d21

            mov BYTE PTR [RBX+1184],1
            mov RDI,RBX
            call .L_438a80

            xor EAX,EAX
            jmp .L_438d36
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_438ef0:

            lea RBP,QWORD PTR [RBX+1144]
            mov RDI,RBP
            call .L_449650

            mov RDX,R13
            mov RSI,R15
            mov RDI,RBP
            call .L_4496a0

            test EAX,EAX
            mov EDX,EAX
            jne .L_438d21

            mov RDX,OFFSET .L_4497e0
            mov RSI,OFFSET .L_449750
            mov RCX,RBP
            mov RDI,R12
            call .L_449930

            jmp .L_438e73
.L_438f35:

            call __stack_chk_fail@PLT
.L_438f3a:

            call .L_400f48
.L_438f3f:

            nop
.L_438f40:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bc0

            add RSP,8
            mov RDI,RAX
            jmp .L_438a80
.L_438f5d:

            nop
            nop
            nop
.L_438f60:

            cmp EDI,4294934784
            je .L_438f90

            cmp EDI,4294938368
            je .L_438f80

            test EDI,EDI
            js .L_438f96

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438f80:

            mov EAX,7
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438f90:

            mov EAX,3
            ret 
.L_438f96:

            sub RSP,8
            call .L_400f48
.L_438f9f:

            pop RBX
            and EAX,1931828595
            cmp AH,BYTE PTR [RAX]
            and EAX,1701642355
            jae .L_439016
          .byte 0x63
          .byte 0x6f
          .byte 0x70
          .byte 0x2f
          .byte 0x64
          .byte 0x74
          .byte 0x6c
          .byte 0x73
          .byte 0x2e
          .byte 0x63
          .byte 0x70
          .byte 0x70
          .byte 0x0
.L_438fbb:

            jb .L_439033
          .byte 0x61
          .byte 0x6c
          .byte 0x20
          .byte 0x3e
          .byte 0x3d
          .byte 0x20
          .byte 0x30
          .byte 0x0
.L_438fc5:
          .string "false"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x90
.L_438fe0:

            jae .L_439056
          .byte 0x61
          .byte 0x74
          .byte 0x69
          .byte 0x63
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x68
          .byte 0x43
          .byte 0x6f
          .byte 0x50
          .byte 0x3a
          .byte 0x3a
          .byte 0x44
          .byte 0x74
          .byte 0x6c
          .byte 0x73
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x61
          .byte 0x70
          .byte 0x45
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x28
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439016:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_439020:

            imul EBP,DWORD PTR [RSI+116],980709152
            cmp CL,BYTE PTR [RBP+101]
          .byte 0x73
          .byte 0x68
          .byte 0x43
          .byte 0x6f
          .byte 0x50
          .byte 0x3a
          .byte 0x3a
          .byte 0x44
          .byte 0x74
.L_439033:

            insb BYTE PTR [RDI],DX
            jae .L_439070
          .byte 0x3a
          .byte 0x48
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x6c
          .byte 0x65
          .byte 0x4d
          .byte 0x62
          .byte 0x65
          .byte 0x64
          .byte 0x74
          .byte 0x6c
          .byte 0x73
          .byte 0x54
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x6d
          .byte 0x69
          .byte 0x74
          .byte 0x28
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x74
          .byte 0x20
          .byte 0x75
          .byte 0x6e
          .byte 0x73
.L_439056:

            imul ESP,DWORD PTR [RDI+110],1663067237
            push 740979297
            and BYTE PTR [RBX+105],DH
            jp .L_4390cc
          .byte 0x5f
          .byte 0x74
          .byte 0x29

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_439070:

            inc EAX
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439080:

            lea RAX,QWORD PTR [RIP+.L_439585]
            push RBX
            mov RBX,RDI
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RIP+.L_439580]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RBX+32],RDI
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI],0
            call .L_433510

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f860
.L_4390cb:

            nop
.L_4390cc:

            nop
            nop
            nop
            nop
.L_4390d0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,ESI
            xor EBX,EBX
            sub RSP,280
.L_4390ef:

            mov RAX,QWORD PTR [RSP+336]
            mov DWORD PTR [RSP+4],R8D
            mov DWORD PTR [RSP],ECX
            mov QWORD PTR [RSP+8],RAX
            mov RAX,QWORD PTR [RSP+344]
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_433510

            mov R14,RAX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            cmp DWORD PTR [R14+8128],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+44],R8W
            mov WORD PTR [RSP+56],R9W
            mov WORD PTR [RSP+41],R10W
            mov EAX,13
            mov WORD PTR [RSP+48],R11W
            mov WORD PTR [RSP+52],BX
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            je .L_4391a0
.L_439177:

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4393ed

            add RSP,280
.L_439195:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4391a0:

            mov RDI,R13
            lea RBX,QWORD PTR [RSP+112]
            call .L_40ff70

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,RBX
            shl ESI,4
            call .L_431360

            mov RDI,RBX
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_43958a]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            lea RAX,QWORD PTR [R14+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_439177

            mov EDI,523
            mov WORD PTR [RSP+44],DI
            lea RDI,QWORD PTR [R14+8128]
            call .L_434b70

            lea RSI,QWORD PTR [RSP+44]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+46],AX
            call .L_403d80

            test EAX,EAX
            je .L_439260
.L_439248:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP]
            jmp .L_439177
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_439260:

            lea EAX,DWORD PTR [R12+R12*1]
            shr R12D,1
            mov RDI,RBX
            and R12D,1431655765
            mov DWORD PTR [RSP+56],67110453
            and EAX,2863311530
            or R12D,EAX
            lea EAX,DWORD PTR [R12*4]
            shr R12D,2
            and R12D,858993459
            and EAX,3435973836
            or R12D,EAX
            mov EAX,R12D
            shr R12D,4
            shl EAX,4
            and R12D,252645135
            and EAX,4042322160
            or EAX,R12D
            bswap EAX
            mov EDX,EAX
            mov ESI,EAX
            shr ESI,24
            shl EDX,24
            or EDX,ESI
            mov ESI,EAX
            shr EAX,8
            shl ESI,8
            and EAX,65280
            and ESI,16711680
            or EDX,ESI
            lea RSI,QWORD PTR [RSP+56]
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+60],EAX
            call .L_403d80

            test EAX,EAX
            jne .L_439248

            mov ESI,310
            mov EDX,3
            mov RDI,RBX
            mov WORD PTR [RSP+41],SI
            lea RSI,QWORD PTR [RSP+41]
            mov BYTE PTR [RSP+43],R15B
            call .L_403d80

            test EAX,EAX
            jne .L_439248

            movzx R15D,WORD PTR [RSP]
            lea RSI,QWORD PTR [RSP+48]
            mov ECX,567
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+48],CX
            rol R15W,8
            mov WORD PTR [RSP+50],R15W
            call .L_403d80

            test EAX,EAX
            jne .L_439248

            movzx EAX,WORD PTR [RSP+4]
            mov EDX,568
            lea RSI,QWORD PTR [RSP+52]
            mov WORD PTR [RSP+52],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+54],AX
            call .L_403d80

            test EAX,EAX
            jne .L_439248

            lea RDI,QWORD PTR [R14+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+98],AX
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RSP+64]
            movaps XMMWORD PTR [RSP+64],XMM0
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+80],XMM0
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+100],AL
            call .L_430850

            test EAX,EAX
            jne .L_439248

            mov RCX,QWORD PTR [RSP+8]
            mov QWORD PTR [RBP],RCX
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBP+8],RCX
            jmp .L_439177
.L_4393ed:

            call __stack_chk_fail@PLT
.L_4393f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439400:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            sub RSP,144
.L_43941b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_433510

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+8],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+64],CX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_43946a

            cmp BYTE PTR [RBP+1],2
            je .L_439498
.L_43946a:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_439573

            add RSP,144
.L_439488:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439498:

            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,53
            mov RDI,R13
            mov R14,RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_43946a

            cmp BYTE PTR [RSP+9],6
            jne .L_43946a

            cmp BYTE PTR [RSP+10],0
            jne .L_43946a

            cmp BYTE PTR [RSP+11],4
            jne .L_43946a

            lea RBX,QWORD PTR [RSP+64]
            mov EDX,66
            mov ESI,57
            mov RDI,R13
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_43946a

            mov R8,QWORD PTR [R12]
            test R8,R8
            je .L_43954b

            mov EAX,DWORD PTR [RSP+12]
            mov RCX,QWORD PTR [R12+8]
            lea RSI,QWORD PTR [RBX+2]
            bswap EAX
            lea EDX,DWORD PTR [RAX+RAX*1]
            shr EAX,1
            and EAX,1431655765
            and EDX,2863311530
            or EDX,EAX
            lea EAX,DWORD PTR [RDX*4]
            shr EDX,2
            and EDX,858993459
            and EAX,3435973836
            or EAX,EDX
            movzx EDX,BYTE PTR [RSP+65]
            mov EDI,EAX
            shr EAX,4
            shl EDI,4
            and EAX,252645135
            and EDI,4042322160
            or EAX,EDI
            bswap EAX
            mov EDI,EAX
            call R8
.L_43954b:

            test BYTE PTR [RBP],48
            jne .L_43946a

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R14+216]
            mov RDX,RBP
            mov ESI,68
            call .L_430ae0

            jmp .L_43946a
.L_439573:

            call __stack_chk_fail@PLT
.L_439578:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439580:

            jmp .L_439400
.L_439585:
          .string "c/er"
.L_43958a:
          .string "c/es"
          .byte 0x90
.L_439590:

            lea RAX,QWORD PTR [RIP+.L_43a700]
            push RBX

            mov RBX,RDI
            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+96]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+112],RAX
            lea RAX,QWORD PTR [RIP+.L_43a71d]
            mov QWORD PTR [RDI+64],0
            mov QWORD PTR [RDI+72],0
            mov QWORD PTR [RDI+80],0
            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RIP+.L_43a610]
            mov QWORD PTR [RDI+88],0
            mov DWORD PTR [RDI+104],0
            mov QWORD PTR [RDI+128],RAX
            mov QWORD PTR [RBX+136],RDI
            movups XMMWORD PTR [RDI+28],XMM0
            mov QWORD PTR [RDI+144],0
            movups XMMWORD PTR [RDI+44],XMM0
            call .L_433510

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_439638:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439640:

            push RBX
            mov RBX,RSI
            call .L_4334e0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4012d0

            mov RSI,RBX
            mov RDI,RBX
            pop RBX
            jmp .L_43a870
.L_439660:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,120
.L_439671:

            mov RAX,QWORD PTR [RSP+176]
            lea RBP,QWORD PTR [RSP+88]
            lea R12,QWORD PTR [RSP+92]
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP+32],R8
            mov QWORD PTR [RSP+40],R9
            mov QWORD PTR [RSP+48],RAX
            mov RAX,QWORD PTR [RSP+184]
            mov QWORD PTR [RSP+8],RSI
            mov QWORD PTR [RSP+56],RAX
            mov RAX,QWORD PTR [RSP+192]
            mov QWORD PTR [RSP+64],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_433510

            mov ESI,4129
            mov RDI,RBP
            mov R14,RAX
            call .L_432590

            mov ESI,32773
            mov RDI,R12
            call .L_432590

            mov ESI,DWORD PTR [R13]
            mov EAX,5
            test ESI,ESI
            jne .L_4397a2

            lea R15,QWORD PTR [RSP+96]
            mov RDI,R13
            call .L_433530

            mov ESI,32768
            mov RDI,RAX
            lea RBX,QWORD PTR [R15+8]
            call .L_402d80

            mov RSI,R15
            mov RDI,R13
            call .L_439640

            lea RDI,QWORD PTR [R14+1560]
            mov RSI,R15
            call .L_405e30

            lea RAX,QWORD PTR [R14+2568]
            mov RDI,RAX
            mov QWORD PTR [RSP+72],RAX
            call .L_416790

            nop
            nop
            nop
            nop
            nop
            nop
.L_439750:

            movzx ESI,BYTE PTR [R15]
            mov RDI,RBP
            add R15,1
            call .L_4325a0

            movzx ESI,BYTE PTR [R15-1]
            mov RDI,R12
            call .L_4325a0

            cmp RBX,R15
            jne .L_439750

            movzx EAX,WORD PTR [RSP+90]
            lea RBX,QWORD PTR [R14+9784]
            xor ECX,ECX
            xor EDX,EDX
            mov ESI,1000
            mov RDI,RBX
            mov WORD PTR [R13+24],AX
            movzx EAX,WORD PTR [RSP+94]
            mov WORD PTR [R13+26],AX
            call .L_4320f0

            test EAX,EAX
            je .L_4397c8
.L_4397a2:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4398ce

            add RSP,120
.L_4397ba:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4397c8:

            mov RDI,RBX
            call .L_432260

            mov R15,QWORD PTR [RSP+8]
            mov RBP,RAX
            mov RDI,R15
            call strlen@PLT

            mov RSI,R15
            movzx EDX,AL
            mov RDI,RBP
            call .L_438600

            test EAX,EAX
            jne .L_4397a2

            mov RDI,RBX
            call .L_432260

            cmp QWORD PTR [RSP+16],0
            mov RBX,RAX
            je .L_4398c5

            mov R15,QWORD PTR [RSP+16]
            mov ESI,65
            mov RDI,R15
            call strnlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,64
            ja .L_4397a2

            test RDX,RDX
            mov BYTE PTR [RBX+1],DL
            je .L_439841

            lea RDI,QWORD PTR [RBX+2]
            mov RSI,R15
            call memcpy@PLT
.L_439841:

            pxor XMM0,XMM0
            sub RSP,8
.L_439849:

            lea R9,QWORD PTR [RIP+.L_439c80]
            xor R8D,R8D
            mov ECX,1
            xor ESI,ESI
            movups XMMWORD PTR [R13+28],XMM0
            movups XMMWORD PTR [R13+44],XMM0
            movzx EDX,WORD PTR [R14+1666]
            push R13
            mov RDI,QWORD PTR [RSP+88]
            call .L_418650

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_4397a2

            mov RDX,QWORD PTR [RSP+24]
            mov DWORD PTR [R13],1
            mov QWORD PTR [R13+64],RDX
            mov RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [R13+72],RDX
            mov RDX,QWORD PTR [RSP+40]
            mov QWORD PTR [R13+80],RDX
            mov RDX,QWORD PTR [RSP+48]
            mov QWORD PTR [R13+88],RDX
            mov RDX,QWORD PTR [RSP+56]
            mov QWORD PTR [R13+8],RDX
            mov RDX,QWORD PTR [RSP+64]
            mov QWORD PTR [R13+16],RDX
            jmp .L_4397a2
.L_4398c5:

            mov BYTE PTR [RAX+1],0
            jmp .L_439841
.L_4398ce:

            call __stack_chk_fail@PLT
.L_4398d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4398e0:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_4398e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4398f0:

            push RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+9784]
            mov RBX,RAX
            call .L_432240

            movzx ESI,WORD PTR [RBX+9808]
            lea RDI,QWORD PTR [RBX+1360]
            pop RBX
            jmp .L_410750
.L_439919:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439920:

            sub RSP,8
            call .L_4398f0

            xor EAX,EAX
            add RSP,8
            ret 
.L_439930:

            movzx EDX,WORD PTR [RDI+52]
            movzx EAX,WORD PTR [RDI+36]
            cmp DX,AX
            jb .L_439960

            add RDI,28
.L_439941:

            cmp WORD PTR [RSI+8],AX
            ja .L_439950

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439950:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439960:

            add RDI,44
            mov EAX,EDX
            jmp .L_439941
.L_439968:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439970:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea RBP,QWORD PTR [RBX+28]
            sub RSP,64
.L_439983:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            movzx EDX,WORD PTR [RBX+36]
            mov R12,RAX
            movzx EAX,WORD PTR [RBX+52]
            cmp AX,DX
            jbe .L_4399ae

            lea RBP,QWORD PTR [RBX+44]
            mov EDX,EAX
.L_4399ae:

            test DX,DX
            mov EAX,23
            je .L_439a53

            movzx ESI,WORD PTR [RBP+10]
            pxor XMM0,XMM0
            lea R14,QWORD PTR [R12+1560]
            xor EAX,EAX
            mov R13,RSP
            mov WORD PTR [RBP+8],AX
            mov RDI,R14
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_406120

            mov RDI,R14
            movzx ESI,BYTE PTR [RBP+14]
            call .L_406270

            movzx ESI,WORD PTR [R12+9808]
            lea RDI,QWORD PTR [R12+1360]
            call .L_410700

            lea RDI,QWORD PTR [R13+16]
            mov EDX,4294934782
            mov RSI,RBP
            mov WORD PTR [RSP+16],DX
            call .L_4101d0

            movzx EAX,WORD PTR [RBP+12]
            lea RDI,QWORD PTR [R12+9784]
            lea RDX,QWORD PTR [RIP+.L_43a100]
            mov RCX,RBX
            mov RSI,R13
            mov BYTE PTR [RSP+36],1
            mov WORD PTR [RSP+34],AX
            call .L_432190

            mov DWORD PTR [RBX],2
            xor EAX,EAX
.L_439a53:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_439a70

            add RSP,64
.L_439a67:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_439a70:

            call __stack_chk_fail@PLT
.L_439a75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439a80:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_439a87:

            mov RBX,RDI
            call .L_433510

            mov RDI,RBX
            mov RBP,RAX
            mov DWORD PTR [RBX],0
            call .L_433530

            add RBP,9784
            mov RDI,RAX
            mov ESI,32768
            call .L_402d80

            mov RDI,RBP
            call .L_432240

            test R12D,R12D
            je .L_439ac7

            cmp R12D,23
            jne .L_439af0
.L_439ac7:

            cmp QWORD PTR [RBX+8],0
            je .L_439afd

            mov RDI,RBP
            call .L_432120

            mov RAX,QWORD PTR [RBX+8]
            mov RSI,QWORD PTR [RBX+16]
            mov EDI,R12D
            mov QWORD PTR [RBX+8],0
            pop RBX
.L_439aea:

            pop RBP
            pop R12
            jmp RAX
          .byte 0x90
.L_439af0:

            mov RDI,RBX
            call .L_439970

            cmp EAX,23
            je .L_439ac7
.L_439afd:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_439b02:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439b10:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,56
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_439c48

            movzx EBX,BYTE PTR [RSI+33]
            mov RBP,RSI
            test BL,BL
            jne .L_439b60
.L_439b41:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_439c74

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_439b60:

            lea RSI,QWORD PTR [RSI+34]
            lea RDI,QWORD PTR [RSP+18]
            movzx EDX,BL
            mov ECX,16
            mov BYTE PTR [RSP+16],0
            mov BYTE PTR [RSP+17],BL
            call __memcpy_chk@PLT

            movzx EAX,WORD PTR [R13+24]
            lea ESI,DWORD PTR [RBX*8]
            movzx ECX,BL
            sub ECX,1
            lea R12,QWORD PTR [RSP+16]
            movzx ESI,SIL
            mov EDI,ECX
            cdq 
            idiv ESI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub EDI,EAX
            movsxd RAX,EDI
            movzx EAX,BYTE PTR [RSP+RAX*1+18]
            bt EAX,EDX
            jae .L_439b41

            movzx EAX,WORD PTR [R13+26]
            cdq 
            idiv ESI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub ECX,EAX
            movsxd RCX,ECX
            movzx EAX,BYTE PTR [RSP+RCX*1+18]
            bt EAX,EDX
            jae .L_439b41

            movsx DX,BYTE PTR [RBP+55]
            cmp BYTE PTR [RSP+18],255
            lea EAX,DWORD PTR [RDX+128]
            mov WORD PTR [RSP+8],AX
            jne .L_439c68

            lea RAX,QWORD PTR [R12+3]
            sub EBX,1
            movzx EBX,BL
            add RBX,RAX
            jmp .L_439c0a
.L_439c00:

            add RAX,1
            cmp BYTE PTR [RAX-1],255
            jne .L_439c68
.L_439c0a:

            cmp RAX,RBX
            jne .L_439c00
.L_439c0f:

            movzx EAX,WORD PTR [RBP+52]
            mov RSI,RSP
            mov RDI,R13
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBP+50]
            mov WORD PTR [RSP+10],AX
            movzx EAX,BYTE PTR [RBP+54]
            mov BYTE PTR [RSP+14],AL
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RSP],RAX
            call .L_439930

            jmp .L_439b41
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439c48:

            call .L_439970

            test EAX,EAX
            je .L_439b41

            mov ESI,EAX
            mov RDI,R13
            call .L_439a80

            jmp .L_439b41
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_439c68:

            add DX,640
            mov WORD PTR [RSP+8],DX
            jmp .L_439c0f
.L_439c74:

            call __stack_chk_fail@PLT
.L_439c79:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439c80:

            mov RAX,RDI
            mov RDI,RSI
            mov RSI,RAX
            jmp .L_439b10
.L_439c8e:

            nop
            nop
.L_439c90:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            xor EBX,EBX
            xor R13D,R13D
            sub RSP,536
.L_439ca9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+520],RAX
            xor EAX,EAX
            call .L_433510

            mov WORD PTR [RSP+8],BX
            lea RBX,QWORD PTR [RSP+224]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+5],R8W
            mov WORD PTR [RSP+48],R9W
            mov RBP,RAX
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+16],R11W
            add RBP,9784
            mov WORD PTR [RSP+13],R13W
            mov BYTE PTR [RSP+15],0
            call .L_431360

            lea RSI,QWORD PTR [RIP+.L_43a722]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RBP
            call .L_42f920

            test RAX,RAX
            je .L_439d6f

            mov EDI,272
            lea RSI,QWORD PTR [RSP+5]
            mov EDX,3
            mov WORD PTR [RSP+5],DI
            mov RDI,RAX
            mov RBX,RAX
            mov BYTE PTR [RSP+7],1
            call .L_403d80

            test EAX,EAX
            je .L_439da0
.L_439d67:

            mov RDI,RBX
            call .L_403400
.L_439d6f:

            mov RAX,QWORD PTR [RSP+520]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a0a9

            add RSP,536
.L_439d8d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439da0:

            mov R13,QWORD PTR [R12+64]
            mov ESI,33
            mov WORD PTR [RSP+48],SI
            test R13,R13
            je .L_43a020

            mov ESI,33
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,32
            ja .L_43a020

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+49],AL
            lea R15,QWORD PTR [RSP+48]
            movzx R14D,R14B
            je .L_439df9

            lea RDI,QWORD PTR [R15+2]
            mov ECX,32
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_439df9:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_439d67

            mov R13,QWORD PTR [R12+72]
            mov ECX,34
            mov WORD PTR [RSP+96],CX
            test R13,R13
            je .L_43a030

            mov ESI,33
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,32
            ja .L_43a030

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+97],AL
            lea R15,QWORD PTR [RSP+96]
            movzx R14D,R14B
            je .L_439e68

            lea RDI,QWORD PTR [R15+2]
            mov ECX,32
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_439e68:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_439d67

            mov R13,QWORD PTR [R12+80]
            mov EDX,35
            mov WORD PTR [RSP+16],DX
            test R13,R13
            je .L_43a040

            mov ESI,17
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,16
            ja .L_43a040

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+17],AL
            lea R15,QWORD PTR [RSP+16]
            movzx R14D,R14B
            je .L_439ed7

            lea RDI,QWORD PTR [R15+2]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_439ed7:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d80

            test EAX,EAX
            jne .L_439d67

            lea RSI,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBX
            and WORD PTR [RSP+13],4095
            mov DWORD PTR [RSP+8],3021473317
            mov BYTE PTR [RSP+12],48
            mov BYTE PTR [RSP+15],16
            call .L_403d80

            test EAX,EAX
            jne .L_439d67

            mov R14,QWORD PTR [R12+88]
            test R14,R14
            je .L_439f82

            mov EAX,36
            mov ESI,65
            mov RDI,R14
            mov WORD PTR [RSP+144],AX
            call strnlen@PLT

            cmp RAX,64
            ja .L_439f5d

            test RAX,RAX
            mov R13D,EAX
            mov BYTE PTR [RSP+145],AL
            jne .L_43a088
.L_439f5d:

            lea R15,QWORD PTR [RSP+144]
            xor R13D,R13D
.L_439f68:

            lea EDX,DWORD PTR [R13+2]
            mov RSI,R15
            mov RDI,RBX
            movzx EDX,DL
            call .L_403d80

            test EAX,EAX
            jne .L_439d67
.L_439f82:

            mov RDI,RBP
            call .L_432260

            cmp BYTE PTR [RAX+1],0
            jne .L_43a050
.L_439f94:

            movzx EAX,WORD PTR [RBX+58]
            cmp AX,128
            ja .L_439d6f

            movzx EDX,BYTE PTR [RSP+352]
            lea R14,QWORD PTR [RSP+384]
            mov RDI,RBX
            mov ECX,EDX
            sub EAX,EDX
            movzx ESI,CL
            movzx EDX,AX
            mov RCX,R14
            call .L_4038b0

            movzx R13D,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [RSP+352]
            mov RDI,R12
            sub R13D,EAX
            movsxd R13,R13D
            call .L_4334e0

            lea RCX,QWORD PTR [RIP+.L_43a740]
            xor ESI,ESI
            mov RDI,RAX
            mov R9,R13
            mov R8,R14
            mov EDX,10
            call .L_4325e0

            lea RDX,QWORD PTR [RIP+.L_43a240]
            mov RCX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_4322b0

            test EAX,EAX
            je .L_439d6f

            jmp .L_439d67
.L_43a020:

            mov R14D,2
            lea R15,QWORD PTR [RSP+48]
            jmp .L_439df9
.L_43a030:

            mov R14D,2
            lea R15,QWORD PTR [RSP+96]
            jmp .L_439e68
.L_43a040:

            mov R14D,2
            lea R15,QWORD PTR [RSP+16]
            jmp .L_439ed7
.L_43a050:

            mov RDI,RBP
            call .L_432260

            movzx R13D,BYTE PTR [RAX+1]
            mov RDI,RBP
            call .L_432260

            mov RDI,RBX
            mov RSI,RAX
            add R13D,2
            movzx R13D,R13B
            mov EDX,R13D
            call .L_403d80

            test EAX,EAX
            jne .L_439d67

            jmp .L_439f94
.L_43a088:

            lea R15,QWORD PTR [RSP+144]
            mov ECX,64
            mov RDX,RAX
            mov RSI,R14
            lea RDI,QWORD PTR [R15+2]
            call __memcpy_chk@PLT

            jmp .L_439f68
.L_43a0a9:

            call __stack_chk_fail@PLT
.L_43a0ae:

            nop
            nop
.L_43a0b0:

            cmp DWORD PTR [RDI],2
            jne .L_43a0f0

            test SIL,SIL
            jne .L_43a0c8

            mov ESI,8
            jmp .L_439a80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43a0c8:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],3
            call .L_439c90

            call .L_401240

            lea RDI,QWORD PTR [RBX+96]
            mov EDX,4000
            mov ESI,EAX
            pop RBX
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a0f0:

            ret 
.L_43a0f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a100:

            mov RAX,RSI
            movzx ESI,DIL
            mov RDI,RAX
            jmp .L_43a0b0
.L_43a10c:

            nop
            nop
            nop
            nop
.L_43a110:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,168
.L_43a120:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],3
            mov WORD PTR [RSP+13],AX
            jne .L_43a144

            test R8D,R8D
            je .L_43a178
.L_43a144:

            mov RDI,RBX
            call .L_4398f0

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a237

            add RSP,168
.L_43a16a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a178:

            movzx EAX,BYTE PTR [RSI]
            mov RBP,RSI
            and EAX,48
            cmp AL,32
            jne .L_43a144

            cmp BYTE PTR [RSI+1],68
            jne .L_43a144

            mov R12,RDX
            lea RCX,QWORD PTR [RSP+13]
            mov EDX,3
            mov ESI,16
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43a144

            cmp BYTE PTR [RSP+14],1
            jne .L_43a144

            mov DWORD PTR [RBX],4
            call .L_401240

            lea RDI,QWORD PTR [RBX+96]
            mov ESI,EAX
            mov EDX,4000
            call .L_433770

            movzx EAX,WORD PTR [R12+58]
            cmp AX,128
            ja .L_43a144

            movzx EDX,BYTE PTR [RBP+128]
            lea R13,QWORD PTR [RSP+16]
            mov RDI,R12
            mov ECX,EDX
            sub EAX,EDX
            movzx ESI,CL
            movzx EDX,AX
            mov RCX,R13
            call .L_4038b0

            movzx EDX,BYTE PTR [RBP+128]
            movzx EAX,WORD PTR [R12+58]
            mov RDI,RBX
            sub EAX,EDX
            movsxd RBP,EAX
            call .L_4334e0

            lea RCX,QWORD PTR [RIP+.L_43a770]
            mov R9,RBP
            mov R8,R13
            mov EDX,10
            xor ESI,ESI
            mov RDI,RAX
            call .L_4325e0

            jmp .L_43a144
.L_43a237:

            call __stack_chk_fail@PLT
.L_43a23c:

            nop
            nop
            nop
            nop
.L_43a240:

            jmp .L_43a110
.L_43a245:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a250:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R12,RDI
            sub RSP,216
.L_43a266:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+200],RAX
            xor EAX,EAX
            call .L_433510

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RBX,RAX
            mov RSI,R13
            add RBX,216
            movaps XMMWORD PTR [RSP],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+32]
            lea RBP,QWORD PTR [RSP+48]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_431cf0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42f920

            test RAX,RAX
            je .L_43a2fe

            mov RBP,RAX
            movzx EAX,BYTE PTR [RAX+78]
            xor R8D,R8D
            pxor XMM0,XMM0
            xor ECX,ECX
            mov RDX,RSP
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,16
            mov BYTE PTR [RBP+78],AL
            movaps XMMWORD PTR [RSP],XMM0
            call .L_430850

            test EAX,EAX
            je .L_43a320

            mov RDI,RBP
            call .L_403400
.L_43a2fe:

            mov RAX,QWORD PTR [RSP+200]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a359

            add RSP,216
.L_43a318:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_43a320:

            mov DWORD PTR [R12],5
            mov EDI,10
            call .L_432a60

            xor EDI,EDI
            mov RBX,RAX
            call .L_4329f0

            lea RDX,QWORD PTR [RIP+.L_43a7a0]
            mov RCX,RAX
            mov R8,RBX
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            call .L_4012c0

            jmp .L_43a2fe
.L_43a359:

            call __stack_chk_fail@PLT
.L_43a35e:

            nop
            nop
.L_43a360:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RSI
            sub RSP,184
.L_43a37d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_433510

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            xor R9D,R9D
            cmp DWORD PTR [R15],4
            mov WORD PTR [RSP+112],DX
            mov WORD PTR [RSP+50],CX
            mov WORD PTR [RSP+60],SI
            mov WORD PTR [RSP+144],DI
            mov WORD PTR [RSP+70],R8W
            mov WORD PTR [RSP+44],R9W
            je .L_43a3f8
.L_43a3cc:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a5fe

            add RSP,184
.L_43a3ea:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a3f8:

            test BYTE PTR [RBX],48
            jne .L_43a3cc

            cmp BYTE PTR [RBX+1],2
            jne .L_43a3cc

            mov EDI,10
            mov R14,RAX
            call .L_432a60

            xor EDI,EDI
            mov R13,RAX
            call .L_4329f0

            mov R8,R13
            lea RDX,QWORD PTR [RIP+.L_43a7d8]
            lea R13,QWORD PTR [RSP+112]
            mov RCX,RAX
            xor EDI,EDI
            xor EAX,EAX
            mov ESI,10
            call .L_4012c0

            mov RCX,R13
            mov EDX,18
            mov ESI,5
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+113],16
            jne .L_43a3cc

            lea RAX,QWORD PTR [RSP+50]
            mov EDX,10
            mov ESI,7
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+51],8
            jne .L_43a3cc

            lea RAX,QWORD PTR [RSP+60]
            mov EDX,10
            mov ESI,2
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+61],8
            jne .L_43a3cc

            lea RAX,QWORD PTR [RSP+144]
            mov EDX,18
            mov ESI,3
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+145],16
            ja .L_43a3cc

            lea RCX,QWORD PTR [RSP+70]
            mov EDX,10
            mov ESI,14
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+71],8
            jne .L_43a3cc

            lea RCX,QWORD PTR [RSP+44]
            mov EDX,6
            mov ESI,6
            mov RDI,RBP
            call .L_4339f0

            test EAX,EAX
            jne .L_43a3cc

            cmp BYTE PTR [RSP+45],4
            jne .L_43a3cc

            lea RBP,QWORD PTR [R14+1368]
            lea RSI,QWORD PTR [R13+2]
            lea R13,QWORD PTR [R14+1560]
            mov RDI,RBP
            call .L_413ca0

            mov ESI,DWORD PTR [RSP+46]
            mov RDI,RBP
            bswap ESI
            call .L_413f50

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+2568]
            add RSI,2
            call .L_416800

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R13
            add RSI,2
            call .L_406140

            movzx EDX,BYTE PTR [RSP+145]
            mov RSI,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RSP+80]
            mov ECX,17
            mov RDI,R8
            add RSI,2
            mov RBP,RDX
            call __memcpy_chk@PLT

            mov RDI,R13
            mov RSI,RAX
            mov BYTE PTR [RSP+RBP*1+80],0
            call .L_405ed0

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R15
            call .L_43a250

            call .L_401240

            lea RDI,QWORD PTR [R15+96]
            mov EDX,100
            mov ESI,EAX
            call .L_433770

            jmp .L_43a3cc
.L_43a5fe:

            call __stack_chk_fail@PLT
.L_43a603:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a610:

            jmp .L_43a360
.L_43a615:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a620:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,32
.L_43a62b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            cmp DWORD PTR [RBX],5
            ja .L_43a6f0

            mov EDX,DWORD PTR [RBX]
            lea RCX,QWORD PTR [RIP+.L_43a820]
            movsxd RDX,DWORD PTR [RCX+RDX*4]
            add RDX,RCX
            jmp RDX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43a660:

            mov ESI,28
.L_43a665:

            mov RDI,RBX
            call .L_439a80

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a6eb

            add RSP,32
.L_43a681:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a690:

            lea RBP,QWORD PTR [RAX+1560]
            lea R12,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RAX
            mov RSI,R12
            mov RDI,RBP
            call .L_405df0

            mov RSI,R12
            mov RDI,RBP
            call .L_405e30

            mov RAX,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_416790

            xor ESI,ESI
            jmp .L_43a665
.L_43a6cc:

            lea RCX,QWORD PTR [RIP+.L_43a840]
            lea RSI,QWORD PTR [RIP+.L_43a727]
            lea RDI,QWORD PTR [RIP+.L_43a73a]
            mov EDX,578
            call __assert_fail@PLT
.L_43a6eb:

            call __stack_chk_fail@PLT
.L_43a6f0:

            xor ESI,ESI
            jmp .L_43a665
.L_43a6f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a700:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402ba0

            add RSP,8
            mov RDI,RAX
            jmp .L_43a620
.L_43a71d:
          .string "c/je"
.L_43a722:
          .string "c/jf"
.L_43a727:
          .string "meshcop/joiner.cpp"
.L_43a73a:
          .string "false"
.L_43a740:
          .string "[THCI] direction=send | type=JOIN_FIN.req |"
          .zero 4
.L_43a770:
          .string "[THCI] direction=recv | type=JOIN_FIN.rsp |"
          .zero 4
.L_43a7a0:
          .string "[%s]%s: [THCI] direction=send | type=JOIN_ENT.rsp"
          .zero 6
.L_43a7d8:
          .string "[%s]%s: [THCI] direction=recv | type=JOIN_ENT.ntf"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_43a820:
          .long .L_43a6cc-.L_43a820
          .long .L_43a6cc-.L_43a820
          .long .L_43a6cc-.L_43a820
          .long .L_43a660-.L_43a820
          .long .L_43a660-.L_43a820
          .long .L_43a690-.L_43a820
          .zero 8
.L_43a840:
          .string "void ot::MeshCoP::Joiner::HandleTimer()"
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a870:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBP,RSI
            sub RSP,160
.L_43a881:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_43a89a:

            call .L_434830
.L_43a89f:

            mov RDI,RBX
.L_43a8a2:

            call .L_434850

            mov EDX,8
            mov RSI,R12
            mov RDI,RBX
            call .L_434860

            lea RSI,QWORD PTR [RSP+112]
            mov RDI,RBX
            call .L_434870
.L_43a8c4:

            mov RAX,QWORD PTR [RSP+112]
            mov RDI,RBX
            mov QWORD PTR [RBP],RAX
            or BYTE PTR [RBP],2
.L_43a8d4:

            call .L_434840
.L_43a8d9:

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a8f8

            add RSP,160
.L_43a8f3:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_43a8f8:

            call __stack_chk_fail@PLT
.L_43a8fd:

            mov RBP,RAX
            mov RDI,RBX
            call .L_434840

            mov RDI,RBP
.L_43a90b:

            call _Unwind_Resume@PLT
.L_43a910:

            movzx EAX,BYTE PTR [RDI+1]
            test AL,AL
            je .L_43a93f

            cmp BYTE PTR [RDI+2],0
            jne .L_43a948

            sub EAX,1
            add RDI,3
            movzx EAX,AL
            add RAX,RDI
            jmp .L_43a93a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a930:

            add RDI,1
            cmp BYTE PTR [RDI-1],0
            jne .L_43a948
.L_43a93a:

            cmp RDI,RAX
            jne .L_43a930
.L_43a93f:

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a948:

            xor EAX,EAX
            ret 
.L_43a94b:

            nop
            nop
            nop
            nop
            nop
.L_43a950:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            lea R15,QWORD PTR [RBX+8]
            mov ESI,4129
            sub RSP,24
.L_43a96d:

            mov R14,RSP
            lea R12,QWORD PTR [RSP+4]
            mov RDI,R14
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_432590

            mov ESI,32773
            mov RDI,R12
            call .L_432590

            nop
            nop
            nop
            nop
            nop
            nop
.L_43a9a0:

            movzx EBP,BYTE PTR [RBX]
            mov RDI,R14
            add RBX,1
            mov ESI,EBP
            call .L_4325a0

            mov ESI,EBP
            mov RDI,R12
            call .L_4325a0

            cmp RBX,R15
            jne .L_43a9a0

            movzx ESI,BYTE PTR [R13+1]
            movzx EAX,WORD PTR [RSP+2]
            mov R9D,1
            lea R8D,DWORD PTR [RSI*8]
            cdq 
            sub ESI,1
            mov EDI,ESI
            movzx R8D,R8B
            idiv R8D
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            mov ECX,EDX
            sub EDI,EAX
            mov EAX,R9D
            movsxd RDI,EDI
            shl EAX,CL
            or BYTE PTR [R13+RDI*1+2],AL
            movzx EAX,WORD PTR [RSP+6]
            cdq 
            idiv R8D
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            mov ECX,EDX
            sub ESI,EAX
            mov EAX,R9D
            movsxd RSI,ESI
            shl EAX,CL
            or BYTE PTR [R13+RSI*1+2],AL
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43aa3f

            add RSP,24
.L_43aa34:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_43aa3f:

            call __stack_chk_fail@PLT
.L_43aa44:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aa50:

            lea RAX,QWORD PTR [RIP+.L_43aed8]
            push RBX
            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RIP+.L_43ae80]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RBX+32],RDI
            mov QWORD PTR [RDI+40],0
            call .L_433510

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42f860
.L_43aa9b:

            nop
            nop
            nop
            nop
            nop
.L_43aaa0:

            push R15
            push R14
            mov R14D,ESI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,EDX
            sub RSP,264
.L_43aabd:

            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP+16],R9
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_433510

            mov R15,RAX
            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            cmp DWORD PTR [R15+8128],2
            mov WORD PTR [RSP+32],SI
            pxor XMM0,XMM0
            mov WORD PTR [RSP+40],DI
            mov WORD PTR [RSP+36],R8W
            mov EAX,13
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            je .L_43ab48
.L_43ab1b:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43ad35

            add RSP,264
.L_43ab39:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43ab48:

            mov RDI,R13
            lea RBX,QWORD PTR [RSP+96]
            call .L_40ff70

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,RBX
            shl ESI,4
            call .L_431360

            mov RDI,RBX
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_43aedd]
            mov RDI,RBX
            call .L_4318a0

            mov RDI,RBX
            call .L_431b50

            lea RAX,QWORD PTR [R15+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_42f920

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_43ab1b

            lea RDI,QWORD PTR [R15+8128]
            mov ECX,523
            mov WORD PTR [RSP+32],CX
            call .L_434b70

            lea RSI,QWORD PTR [RSP+32]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+34],AX
            call .L_403d80

            test EAX,EAX
            je .L_43ac08
.L_43abf0:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_43ab1b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43ac08:

            lea EAX,DWORD PTR [R12+R12*1]
            shr R12D,1
            mov RDI,RBX
            and R12D,1431655765
            mov DWORD PTR [RSP+40],67110453
            and EAX,2863311530
            or R12D,EAX
            lea EAX,DWORD PTR [R12*4]
            shr R12D,2
            and R12D,858993459
            and EAX,3435973836
            or R12D,EAX
            mov EAX,R12D
            shr R12D,4
            shl EAX,4
            and R12D,252645135
            and EAX,4042322160
            or EAX,R12D
            bswap EAX
            mov EDX,EAX
            mov ESI,EAX
            shr ESI,24
            shl EDX,24
            or EDX,ESI
            mov ESI,EAX
            shr EAX,8
            shl ESI,8
            and EAX,65280
            and ESI,16711680
            or EDX,ESI
            lea RSI,QWORD PTR [RSP+40]
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d80

            test EAX,EAX
            jne .L_43abf0

            mov EDX,513
            lea RSI,QWORD PTR [RSP+36]
            rol R14W,8
            mov WORD PTR [RSP+36],DX
            mov RDI,RBX
            mov EDX,4
            mov WORD PTR [RSP+38],R14W
            call .L_403d80

            test EAX,EAX
            jne .L_43abf0

            lea RDI,QWORD PTR [R15+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+82],AX
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RSP+48]
            movaps XMMWORD PTR [RSP+48],XMM0
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+64],XMM0
            movzx EAX,BYTE PTR [R15+24]
            mov BYTE PTR [RSP+84],AL
            call .L_430850

            test EAX,EAX
            jne .L_43abf0

            mov RCX,QWORD PTR [RSP+8]
            mov QWORD PTR [RBP],RCX
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBP+8],RCX
            jmp .L_43ab1b
.L_43ad35:

            call __stack_chk_fail@PLT
.L_43ad3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43ad40:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            sub RSP,80
.L_43ad58:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_433510

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+4],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+8],CX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_43ada4

            cmp BYTE PTR [RBP+1],2
            je .L_43adc8
.L_43ada4:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43ae6f

            add RSP,80
.L_43adbc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43adc8:

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,1
            mov RDI,R13
            mov R14,RAX
            call .L_4339f0

            test EAX,EAX
            jne .L_43ada4

            cmp BYTE PTR [RSP+5],2
            jne .L_43ada4

            lea RBX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,53
            mov RDI,R13
            mov RCX,RBX
            call .L_4339f0

            test EAX,EAX
            jne .L_43ada4

            cmp BYTE PTR [RSP+9],6
            jne .L_43ada4

            cmp BYTE PTR [RSP+10],0
            jne .L_43ada4

            cmp BYTE PTR [RSP+11],4
            jne .L_43ada4

            mov R13,QWORD PTR [R12]
            test R13,R13
            je .L_43ae47

            mov RDI,RBX
            call .L_43ae90

            movzx EDI,WORD PTR [RSP+6]
            mov RDX,QWORD PTR [R12+8]
            mov ESI,EAX
            rol DI,8
            movzx EDI,DI
            call R13
.L_43ae47:

            test BYTE PTR [RBP],48
            jne .L_43ada4

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R14+216]
            mov RDX,RBP
            mov ESI,68
            call .L_430ae0

            jmp .L_43ada4
.L_43ae6f:

            call __stack_chk_fail@PLT
.L_43ae74:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ae80:

            jmp .L_43ad40
.L_43ae85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ae90:

            mov EDX,DWORD PTR [RDI+4]
            bswap EDX
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EDX,EAX
            mov EAX,EDX
            bswap EAX
            ret 
.L_43aed8:
          .string "c/pc"
.L_43aedd:
          .string "c/pq"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43aef0:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+72]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            sub RSP,8
.L_43af04:

            call .L_433c30

            mov RBP,QWORD PTR [RBX+272]
            test RBP,RBP
            je .L_43afb0

            xor R13D,R13D
            cmp BYTE PTR [RBP],1
            jne .L_43af93
.L_43af22:

            call .L_401460

            mov BYTE PTR [RBX+136],AL
            call .L_401460

            mov BYTE PTR [RBX+137],AL
            call .L_401460

            test R13,R13
            mov BYTE PTR [RBX+138],AL
            je .L_43af62

            mov RAX,QWORD PTR [RBP+20]
            mov QWORD PTR [R13+20],RAX
            mov RAX,QWORD PTR [RBX+272]
            mov QWORD PTR [RBP+20],RAX
            mov QWORD PTR [RBX+272],RBP
.L_43af62:

            mov RDI,R12
            xor ECX,ECX
            mov EDX,120000
            mov ESI,1000
            call .L_433cc0

            mov RDI,R12
            call .L_433d40

            add RSP,8
.L_43af82:

            mov EAX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_43af90:

            mov RBP,RAX
.L_43af93:

            mov RAX,QWORD PTR [RBP+20]
            test RAX,RAX
            je .L_43afb0

            cmp BYTE PTR [RAX],1
            jne .L_43af90

            mov R13,RBP
            mov RBP,RAX
            jmp .L_43af22
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43afb0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43afbd:

            nop
            nop
            nop
.L_43afc0:

            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RSI+12720]
            mov RBP,RSI
            sub RSP,8
.L_43afd3:

            call .L_4334f0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_411a30

            lea RDI,QWORD PTR [RBX+72]
            lea RDX,QWORD PTR [RIP+.L_43b9f0]
            mov R8,RBX
            mov RSI,RBP
            xor ECX,ECX
            call .L_433be0

            lea RDX,QWORD PTR [RBX+184]
            pxor XMM0,XMM0
            lea RAX,QWORD PTR [RBX+156]
            mov QWORD PTR [RBX+140],0
            mov QWORD PTR [RBX+148],0
            mov QWORD PTR [RBX+176],RDX
            lea RDX,QWORD PTR [RBX+212]
            mov DWORD PTR [RBX+172],0
            movups XMMWORD PTR [RBX+156],XMM0
            mov QWORD PTR [RBX+204],RDX
            lea RDX,QWORD PTR [RBX+240]
            mov QWORD PTR [RBX+272],0
            mov QWORD PTR [RBX+232],RDX
            mov QWORD PTR [RBX+280],RAX
            add RSP,8
.L_43b06e:

            pop RBX
            pop RBP
            ret 
.L_43b071:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b080:

            mov RCX,QWORD PTR [RDI+280]
            test RCX,RCX
            je .L_43b0c8

            mov RAX,QWORD PTR [RCX+20]
            mov QWORD PTR [RDI+280],RAX
            mov WORD PTR [RCX+1],SI
            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RCX+3],XMM0
            movzx EAX,BYTE PTR [RDX+16]
            mov BYTE PTR [RCX],1
            mov QWORD PTR [RCX+20],0
            mov BYTE PTR [RCX+19],AL
            mov RDX,QWORD PTR [RDI+272]
            test RDX,RDX
            jne .L_43b0d3

            mov QWORD PTR [RDI+272],RCX
.L_43b0c8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b0d0:

            mov RDX,RAX
.L_43b0d3:

            mov RAX,QWORD PTR [RDX+20]
            test RAX,RAX
            jne .L_43b0d0

            mov QWORD PTR [RDX+20],RCX
            ret 
.L_43b0e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b0f0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,QWORD PTR [RDI+272]
            test RBX,RBX
            je .L_43b121

            mov EBP,ESI
            mov R13,RDX
            mov R12,RDI
            xor R14D,R14D
.L_43b10f:

            cmp BP,WORD PTR [RBX+1]
            je .L_43b130
.L_43b115:

            mov R14,RBX
            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            jne .L_43b10f
.L_43b121:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b130:

            lea RSI,QWORD PTR [RBX+3]
            mov RDI,R13
            call .L_401820

            cmp BYTE PTR [R13+16],AL
            ja .L_43b115

            test R14,R14
            mov RAX,QWORD PTR [RBX+20]
            je .L_43b188

            mov QWORD PTR [R14+20],RAX
.L_43b14f:

            pxor XMM0,XMM0
            mov QWORD PTR [RBX+16],0
            mov DWORD PTR [RBX+24],0
            movups XMMWORD PTR [RBX],XMM0
            mov RAX,QWORD PTR [R12+280]
            mov QWORD PTR [RBX+20],RAX
            mov QWORD PTR [R12+280],RBX
            pop RBX
.L_43b17a:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b188:

            mov QWORD PTR [R12+272],RAX
            jmp .L_43b14f
.L_43b192:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b1a0:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_43c0c0]
            pxor XMM0,XMM0
            mov RBX,RDI
            sub RSP,40
.L_43b1b4:

            mov RDX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RBP,RSP
            mov EAX,546
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_411a60

            mov RSI,RBP
            mov RDI,RBX
            call .L_411ac0

            mov RAX,QWORD PTR [RBX+272]
            test RAX,RAX
            je .L_43b206

            cmp BYTE PTR [RAX],2
            je .L_43b206

            mov RDI,RBX
            call .L_43aef0
.L_43b206:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b21f

            add RSP,40
.L_43b21c:

            pop RBX
            pop RBP
            ret 
.L_43b21f:

            call __stack_chk_fail@PLT
.L_43b224:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b230:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,72
.L_43b244:

            mov QWORD PTR [RDI+144],RDX
            mov DWORD PTR [RDI+152],ECX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test ECX,ECX
            lea RBP,QWORD PTR [RSP+32]
            lea R13,QWORD PTR [RSP+28]
            je .L_43b338

            lea RBP,QWORD PTR [RSP+32]
            lea R13,QWORD PTR [RSP+28]
            xor R15D,R15D
.L_43b280:

            movzx EAX,R15B
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea R14,QWORD PTR [RDX+RAX*8]
            mov EDX,DWORD PTR [R14+36]
            test EDX,EDX
            je .L_43b2d8

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
.L_43b2a0:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_42f620

            test EAX,EAX
            jne .L_43b2f8

            test BYTE PTR [RSP+49],16
            je .L_43b2a0

            mov RSI,RBP
            mov RDI,R14
            call .L_401820

            movzx EDX,BYTE PTR [R14+16]
            cmp DL,AL
            ja .L_43b2a0

            cmp DL,BYTE PTR [RSP+48]
            jne .L_43b2a0

            nop
            nop
            nop
            nop
            nop
.L_43b2d8:

            add R15D,1
            movzx EAX,R15B
            cmp EAX,DWORD PTR [RBX+152]
            jae .L_43b338
.L_43b2e8:

            mov RDX,QWORD PTR [RBX+144]
            jmp .L_43b280
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b2f8:

            mov RSI,R14
            mov RDI,R12
            add R15D,1
            call .L_401690

            movzx ESI,WORD PTR [RSP+52]
            mov RDX,RBP
            mov RDI,RBX
            call .L_43b0f0

            pxor XMM0,XMM0
            mov QWORD PTR [R14+32],0
            movzx EAX,R15B
            movups XMMWORD PTR [R14],XMM0
            movups XMMWORD PTR [R14+16],XMM0
            cmp EAX,DWORD PTR [RBX+152]
            jb .L_43b2e8
.L_43b338:

            mov DWORD PTR [RSP+28],0
            mov BYTE PTR [RSP+15],0
            nop
            nop
            nop
.L_43b348:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_42f620

            test EAX,EAX
            jne .L_43b448

            movzx EAX,BYTE PTR [RSP+49]
            shr AL,4
            and EAX,1
            mov BYTE PTR [RSP+14],AL
            je .L_43b348

            mov EAX,DWORD PTR [RBX+152]
            test EAX,EAX
            je .L_43b348

            xor R15D,R15D
            nop
            nop
            nop
            nop
.L_43b380:

            movzx EAX,R15B
            lea RCX,QWORD PTR [RAX+RAX*4]
            mov RAX,QWORD PTR [RBX+144]
            lea R14,QWORD PTR [RAX+RCX*8]
            cmp BYTE PTR [R14+16],0
            je .L_43b3b5

            mov RSI,R14
            mov RDI,RBP
            call .L_401820

            movzx ESI,BYTE PTR [RSP+48]
            cmp SIL,AL
            ja .L_43b3b5

            cmp SIL,BYTE PTR [R14+16]
            je .L_43b348
.L_43b3b5:

            mov EAX,DWORD PTR [RBX+152]
            add R15D,1
            movzx ECX,R15B
            cmp ECX,EAX
            jb .L_43b380

            test EAX,EAX
            mov ECX,EAX
            je .L_43b348

            mov RAX,QWORD PTR [RBX+144]
            cmp BYTE PTR [RAX+16],0
            je .L_43b400

            xor EDX,EDX
.L_43b3e0:

            add RDX,1
            cmp RDX,RCX
            je .L_43b348

            imul RSI,RDX,40
            cmp BYTE PTR [RAX+RSI*1+16],0
            lea RDI,QWORD PTR [RAX+RSI*1]
            jne .L_43b3e0

            mov RAX,RDI
            nop
.L_43b400:

            pxor XMM0,XMM0
            mov QWORD PTR [RAX+32],0
            mov RDI,RBX
            movups XMMWORD PTR [RAX],XMM0
            mov RDX,QWORD PTR [RSP+32]
            movups XMMWORD PTR [RAX+16],XMM0
            mov QWORD PTR [RAX],RDX
            movzx EDX,BYTE PTR [RSP+48]
            mov BYTE PTR [RAX+16],DL
            movzx ESI,WORD PTR [RSP+52]
            mov RDX,RBP
            call .L_43b080

            movzx EAX,BYTE PTR [RSP+14]
            mov BYTE PTR [RSP+15],AL
            jmp .L_43b348
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b448:

            cmp BYTE PTR [RSP+15],0
            mov RDI,RBX
            jne .L_43b480

            call .L_411b20
.L_43b457:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43b487

            add RSP,72
.L_43b46b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b480:

            call .L_43b1a0

            jmp .L_43b457
.L_43b487:

            call __stack_chk_fail@PLT
.L_43b48c:

            nop
            nop
            nop
            nop
.L_43b490:

            sub RSP,8
            call .L_411b20

            xor EAX,EAX
            add RSP,8
            ret 
.L_43b4a0:

            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_43b4c0

            cmp BYTE PTR [RAX],2
            je .L_43b4c0

            jmp .L_43aef0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b4c0:

            xor EAX,EAX
            ret 
.L_43b4c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b4d0:

            sub RSP,24
.L_43b4d4:

            movzx EDX,WORD PTR [RDI+136]
            mov RAX,RSI
            lea RSI,QWORD PTR [RSP+4]
            mov BYTE PTR [RSP+4],1
            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RCX
            xor ECX,ECX
            mov WORD PTR [RSP+5],DX
            movzx EDX,BYTE PTR [RDI+138]
            mov RDI,RAX
            mov BYTE PTR [RSP+7],DL
            mov EDX,4
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b52a

            add RSP,24
.L_43b529:

            ret 
.L_43b52a:

            call __stack_chk_fail@PLT
.L_43b52f:

            nop
.L_43b530:

            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,24
.L_43b53c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],33556480
            call .L_401240

            sub EAX,DWORD PTR [RBP+140]
            mov EDX,274877907
            lea RSI,QWORD PTR [RSP+2]
            mov RDI,RBX
            mul EDX
            shr EDX,6
            rol DX,8
            mov WORD PTR [RSP+6],DX
            mov EDX,6
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b59b

            add RSP,24
.L_43b598:

            pop RBX
            pop RBP
            ret 
.L_43b59b:

            call __stack_chk_fail@PLT
.L_43b5a0:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_43b5a8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movabs RAX,1945558337760264448
            mov QWORD PTR [RSP],RAX
            call .L_433510

            mov RAX,QWORD PTR [RAX+1656]
            mov RSI,RSP
            mov EDX,16
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b5fd

            add RSP,32
.L_43b5fb:

            pop RBX
            ret 
.L_43b5fd:

            call __stack_chk_fail@PLT
.L_43b602:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b610:

            sub RSP,40
.L_43b614:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_43b6b8

            mov R8,RSI
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b640:

            cmp BYTE PTR [RAX],3
            je .L_43b64f

            cmp WORD PTR [RAX+1],DX
            sete SIL
            add ECX,ESI
.L_43b64f:

            mov RAX,QWORD PTR [RAX+20]
            test RAX,RAX
            jne .L_43b640

            mov EAX,768
            movzx ECX,CL
            mov RSI,RSP
            mov WORD PTR [RSP],AX
            lea EAX,DWORD PTR [RCX*8]
            mov EDX,16
            mov RDI,R8
            mov QWORD PTR [RSP+4],0
            mov DWORD PTR [RSP+12],0
            sub EAX,ECX
            lea EAX,DWORD PTR [RAX*4+12]
            rol AX,8
            mov WORD PTR [RSP+2],AX
            call .L_403d80
.L_43b69e:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43b6bf

            add RSP,40
.L_43b6b2:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b6b8:

            mov EAX,2
            jmp .L_43b69e
.L_43b6bf:

            call __stack_chk_fail@PLT
.L_43b6c4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b6d0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_43b6da:

            mov RBX,QWORD PTR [RDI+272]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_43b778

            mov R12,RSI
            mov EBP,EDX
            mov DWORD PTR [RSP],402654464
            mov R13,RSP
            jmp .L_43b719
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b710:

            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            je .L_43b770
.L_43b719:

            cmp BYTE PTR [RBX],3
            je .L_43b710

            cmp WORD PTR [RBX+1],BP
            jne .L_43b710

            movdqu XMM0,XMMWORD PTR [RBX+3]
            mov EDX,28
            mov RSI,R13
            mov RDI,R12
            mov QWORD PTR [RSP+20],0
            movups XMMWORD PTR [RSP+4],XMM0
            call .L_403d80

            test EAX,EAX
            je .L_43b710

            nop
            nop
            nop
            nop
            nop
.L_43b750:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b77f

            add RSP,56
.L_43b764:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b770:

            xor EAX,EAX
            jmp .L_43b750
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43b778:

            mov EAX,2
            jmp .L_43b750
.L_43b77f:

            call __stack_chk_fail@PLT
.L_43b784:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b790:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,104
.L_43b7a3:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ESI,ESI
            mov RDI,RBX
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_411a40

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_43b827

            movzx EAX,WORD PTR [RBX+136]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov RDI,R15
            mov BYTE PTR [RSP+28],1
            mov WORD PTR [RSP+29],AX
            movzx EAX,BYTE PTR [RBX+138]
            mov BYTE PTR [RSP+31],AL
            call .L_403d80

            test EAX,EAX
            je .L_43b850
.L_43b817:

            mov RDI,R15
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_43b827:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43b932

            add RSP,104
.L_43b83f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b850:

            mov RSI,R15
            mov RDI,RBX
            call .L_43b530

            test EAX,EAX
            jne .L_43b817

            mov RSI,R15
            mov RDI,RBX
            call .L_43b5a0

            test EAX,EAX
            jne .L_43b817

            movzx R14D,BP
            mov RSI,R15
            mov RDI,RBX
            mov EDX,R14D
            call .L_43b610

            test EAX,EAX
            jne .L_43b817

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_43b6d0

            test EAX,EAX
            jne .L_43b817

            lea RSI,QWORD PTR [RSP+24]
            mov EDX,4
            mov RDI,R15
            mov DWORD PTR [RSP+24],3584
            call .L_403d80

            test EAX,EAX
            jne .L_43b817

            lea R12,QWORD PTR [RSP+32]
            mov ECX,12
            lea R14,QWORD PTR [R13+2568]
            rol BP,8
            mov RDI,R12

            rep stosd DWORD PTR [RDI]

            mov RDI,R14
            call .L_4167f0

            mov RAX,QWORD PTR [RAX]
            mov RDI,R14
            mov DWORD PTR [RSP+56],4278190080
            mov WORD PTR [RSP+60],254
            mov WORD PTR [RSP+62],BP
            mov QWORD PTR [RSP+48],RAX
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDX,R12
            mov WORD PTR [RSP+66],547
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,R15
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov BYTE PTR [RSP+68],AL
            call .L_411ba0

            test EAX,EAX
            je .L_43b827

            jmp .L_43b817
.L_43b932:

            call __stack_chk_fail@PLT
.L_43b937:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b940:

            push RBP
            push RBX
            xor EBP,EBP
            sub RSP,8
            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_43b96e

            movzx EDX,BYTE PTR [RAX]
            mov RBX,RDI
            cmp DL,2
            je .L_43b99c

            cmp DL,3
            je .L_43b9c0

            cmp DL,1
            mov EBP,1
            je .L_43b980
.L_43b96e:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b980:

            call .L_401240

            mov DWORD PTR [RBX+140],EAX
            mov RAX,QWORD PTR [RBX+272]
            mov BYTE PTR [RAX],2
            mov RAX,QWORD PTR [RBX+272]
.L_43b99c:

            movzx ESI,WORD PTR [RAX+1]
            mov RDI,RBX
            mov EBP,1
            call .L_43b790

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b9c0:

            call .L_43aef0

            test AL,AL
            mov EBP,EAX
            jne .L_43b96e

            lea RDI,QWORD PTR [RBX+72]
            call .L_433c30

            mov RDI,RBX
            call .L_411b20

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_43b9e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b9f0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bf0

            add RSP,8
            mov RDI,RAX
            jmp .L_43b940
.L_43ba0d:

            nop
            nop
            nop
.L_43ba10:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],3584
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43ba53

            add RSP,24
            ret 
.L_43ba53:

            call __stack_chk_fail@PLT
.L_43ba58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ba60:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov EBX,ECX
            mov R12,RSI
            sub RSP,24
.L_43ba79:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            add BX,DX
            jb .L_43bb1d

            xor R14D,R14D
.L_43ba95:

            test R14W,R14W
            lea RBP,QWORD PTR [RSP+4]
            je .L_43bacd

            jmp .L_43bb10
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43baa8:

            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            movzx EAX,AX
            cmp R13D,EAX
            je .L_43bb18

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            lea R15D,DWORD PTR [R15+RAX*1+4]
            cmp BX,R15W
            jb .L_43bb10
.L_43bacd:

            movzx ESI,R15W
            mov RCX,RBP
            mov EDX,4
            mov RDI,R12
            call .L_4038b0

            cmp AX,4
            je .L_43baa8
.L_43bae7:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_43bb28

            add RSP,24
.L_43bafe:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43bb10:

            xor R14D,R14D
            jmp .L_43bae7
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43bb18:

            mov R14D,R15D
            jmp .L_43bae7
.L_43bb1d:

            mov R14D,1
            jmp .L_43ba95
.L_43bb28:

            call __stack_chk_fail@PLT
.L_43bb2d:

            nop
            nop
            nop
.L_43bb30:

            sub RSP,40
.L_43bb34:

            mov RDI,RSI
            movzx ESI,DX
            mov RCX,RSP
            mov EDX,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,16
            mov EDX,6
            jne .L_43bb88

            cmp WORD PTR [RSP+2],3072
            jne .L_43bb88

            cmp WORD PTR [RSP+4],768
            jne .L_43bb88

            cmp WORD PTR [RSP+6],6912
            mov EAX,0
            cmove EDX,EAX
            nop
            nop
            nop
            nop
            nop
.L_43bb88:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43bb9f

            add RSP,40
.L_43bb9e:

            ret 
.L_43bb9f:

            call __stack_chk_fail@PLT
.L_43bba4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bbb0:

            push RBX
            mov RBX,RDI
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,16
            sub RSP,32
.L_43bbc3:

            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,16
            jne .L_43bc20

            cmp WORD PTR [RSP+2],3072
            jne .L_43bc20

            cmp WORD PTR [RSP+4],768
            jne .L_43bc20

            cmp WORD PTR [RSP+6],6912
            jne .L_43bc20

            mov RDI,RBX
            call .L_433510

            mov RDX,RAX
            xor EAX,EAX
            mov RBX,QWORD PTR [RDX+1656]
            cmp QWORD PTR [RSP+8],RBX
            je .L_43bc25

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bc20:

            mov EAX,6
.L_43bc25:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43bc3b

            add RSP,32
.L_43bc39:

            pop RBX
            ret 
.L_43bc3b:

            call __stack_chk_fail@PLT
.L_43bc40:

            sub RSP,24
.L_43bc44:

            mov RDI,RSI
            movzx ESI,DX
            lea RCX,QWORD PTR [RSP+2]
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,6
            mov EDX,6
            jne .L_43bc91

            cmp WORD PTR [RSP+4],512
            jne .L_43bc91

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            cmp AX,1
            sbb EDX,EDX
            not EDX
            and EDX,6
.L_43bc91:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43bca8

            add RSP,24
.L_43bca7:

            ret 
.L_43bca8:

            call __stack_chk_fail@PLT
.L_43bcad:

            nop
            nop
            nop
.L_43bcb0:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,28
            sub RSP,48
.L_43bcca:

            mov R13,RSP
            mov RCX,R13
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,28
            mov EDX,6
            jne .L_43bd87

            cmp WORD PTR [RSP+2],6144
            jne .L_43bd87

            mov EDX,DWORD PTR [R12+152]
            test EDX,EDX
            je .L_43bd52

            lea R14,QWORD PTR [R13+4]
            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
.L_43bd18:

            movzx EAX,BL
            lea RDX,QWORD PTR [RAX+RAX*4]
            mov RAX,QWORD PTR [R12+144]
            lea RBP,QWORD PTR [RAX+RDX*8]
            mov EAX,DWORD PTR [RBP+36]
            test EAX,EAX
            jne .L_43bd42

            mov RSI,R14
            mov RDI,RBP
            call .L_401820

            cmp BYTE PTR [RBP+16],AL
            jbe .L_43bdb0
.L_43bd42:

            add EBX,1
            movzx EAX,BL
            cmp EAX,DWORD PTR [R12+152]
            jb .L_43bd18
.L_43bd52:

            mov RBX,QWORD PTR [R12+272]
            add R13,4
            test RBX,RBX
            jne .L_43bd71

            jmp .L_43bd85
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43bd68:

            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            je .L_43bd85
.L_43bd71:

            lea RSI,QWORD PTR [RBX+3]
            mov RDI,R13
            call .L_401820

            cmp BYTE PTR [RBX+19],AL
            ja .L_43bd68

            mov BYTE PTR [RBX],3
.L_43bd85:

            xor EDX,EDX
.L_43bd87:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43be06

            add RSP,48
.L_43bd9d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43bdb0:

            movdqu XMM0,XMMWORD PTR [RSP+4]
            mov RDI,R12
            movups XMMWORD PTR [RBP],XMM0
            mov EAX,DWORD PTR [RSP+20]
            mov EDX,DWORD PTR [RSP+24]
            bswap EAX
            bswap EDX
            test EAX,EAX
            mov DWORD PTR [RBP+32],EAX
            movzx EAX,BYTE PTR [RBP+17]
            setne CL
            mov DWORD PTR [RBP+36],EDX
            and EAX,4294967292
            test EDX,EDX
            setne DL
            or EAX,ECX
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBP+17],AL
            call .L_433510

            mov RDI,RAX
            call .L_4334e0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401680

            jmp .L_43bd52
.L_43be06:

            call __stack_chk_fail@PLT
.L_43be0b:

            nop
            nop
            nop
            nop
            nop
.L_43be10:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            movzx ESI,DX
            mov R12D,EDX
            mov RDI,R13
            mov EDX,16
            sub RSP,40
.L_43be32:

            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_4038b0

            mov EDX,EAX
            mov EAX,6
            cmp DX,16
            jne .L_43bef0

            movzx EBX,WORD PTR [RSP+2]
            movzx EDX,WORD PTR [R13+58]
            add R12D,16
            movzx R15D,R12W
            rol BX,8
            sub EDX,R15D
            sub EBX,12
            movzx EBP,BX
            cmp EBP,EDX
            jg .L_43bef0

            mov R8D,13
            mov ECX,EBP
            mov EDX,R15D
            mov RSI,R13
            mov RDI,R14
            call .L_43ba60

            test AX,AX
            jne .L_43bf10
.L_43be99:

            test BX,BX
            jne .L_43bec7

            jmp .L_43bee4
.L_43bea0:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_43bcb0

            test EAX,EAX
            jne .L_43bef0

            lea EBX,DWORD PTR [RBX+R12*1-28]
            lea R12D,DWORD PTR [RBP+28]
            sub BX,BP
            je .L_43bee4

            movzx EBP,BX
            movzx R15D,R12W
.L_43bec7:

            mov ECX,EBP
            mov R8D,5
            mov EDX,R15D
            mov RSI,R13
            mov RDI,R14
            call .L_43ba60

            test AX,AX
            mov EBP,EAX
            jne .L_43bea0
.L_43bee4:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bef0:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43bf28

            add RSP,40
.L_43bf04:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_43bf10:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_43bc40

            test EAX,EAX
            je .L_43be99

            jmp .L_43bef0
.L_43bf28:

            call __stack_chk_fail@PLT
.L_43bf2d:

            nop
            nop
            nop
.L_43bf30:

            push R13
            push R12
            mov R8D,2
            push RBP
            push RBX
            mov R12,RDI
            mov RBP,RSI
            sub RSP,8
            movzx R13D,WORD PTR [RSI+60]
            movzx EBX,WORD PTR [RSI+58]
            sub EBX,R13D
            mov EDX,R13D
            movzx EBX,BX
            mov ECX,EBX
            call .L_43ba60

            test AX,AX
            jne .L_43bf70
.L_43bf64:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_43bf70:

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_43bb30

            test EAX,EAX
            jne .L_43bf64

            mov R8D,1
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_43ba60

            test AX,AX
            je .L_43bf64

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_43bbb0

            test EAX,EAX
            jne .L_43bf64

            mov R8D,14
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_43ba60

            test AX,AX
            je .L_43bf64

            mov R8D,3
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_43ba60

            test AX,AX
            je .L_43bf64

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_43be10

            test EAX,EAX
            jne .L_43bf64

            pop RAX
.L_43c000:

            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_43b940
.L_43c00e:

            nop
            nop
.L_43c010:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RSI
            mov EDX,4
            mov RDI,RBX
            sub RSP,16
            movzx ESI,WORD PTR [RSI+60]
            lea RBP,QWORD PTR [RSP+4]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RCX,RBP
            call .L_4038b0

            cmp AX,4
            je .L_43c070
.L_43c04d:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43c0ae

            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c070:

            mov ESI,4
            mov RDI,RBX
            call .L_403530

            cmp BYTE PTR [RSP+4],7
            jne .L_43c04d

            movzx ECX,WORD PTR [R12+136]
            cmp WORD PTR [RBP+1],CX
            jne .L_43c04d

            movzx EAX,BYTE PTR [R12+138]
            cmp BYTE PTR [RBP+3],AL
            jne .L_43c04d

            mov RSI,RBX
            mov RDI,R12
            call .L_43bf30

            jmp .L_43c04d
.L_43c0ae:

            call __stack_chk_fail@PLT
.L_43c0b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c0c0:

            jmp .L_43c010
.L_43c0c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c0d0:

            push RBX

            mov RBX,RDI
            call .L_433510

            mov RDI,RAX
            call .L_4334f0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_411a30

            lea RAX,QWORD PTR [RBX+200]
            lea RDX,QWORD PTR [RBX+72]
            lea RCX,QWORD PTR [RBX+268]
.L_43c0ff:

            pxor XMM0,XMM0
            mov BYTE PTR [RAX+16],0
            add RAX,17
            add RDX,32
            movups XMMWORD PTR [RAX-17],XMM0
            movups XMMWORD PTR [RDX-32],XMM0
            movups XMMWORD PTR [RDX-16],XMM0
            cmp RAX,RCX
            jne .L_43c0ff

            xor EAX,EAX
            mov WORD PTR [RBX+268],AX
            pop RBX

            ret 
.L_43c12b:

            nop
            nop
            nop
            nop
            nop
.L_43c130:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_43ce80]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_43c144:

            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RBP,RSP
            mov EAX,547
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_411a60

            mov RSI,RBP
            mov RDI,RBX
            call .L_411ac0

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c196

            add RSP,40
.L_43c191:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_43c196:

            call __stack_chk_fail@PLT
.L_43c19b:

            nop
            nop
            nop
            nop
            nop
.L_43c1a0:

            sub RSP,8
            call .L_411b20

            xor EAX,EAX
            add RSP,8
            ret 
.L_43c1b0:

            lea RDX,QWORD PTR [RDI+216]
            xor EAX,EAX
.L_43c1b9:

            cmp BYTE PTR [RDX],0
            je .L_43c1d0

            add EAX,1
            add RDX,17
            cmp EAX,4
            jne .L_43c1b9

            mov EAX,3
            ret 
.L_43c1d0:

            cdqe 
            movdqu XMM0,XMMWORD PTR [RSI]
            mov RDX,RAX
            shl RDX,4
            lea RAX,QWORD PTR [RAX+RDX*1+200]
            add RAX,RDI
            movups XMMWORD PTR [RAX],XMM0
            movzx EDX,BYTE PTR [RSI+16]
            mov BYTE PTR [RAX+16],DL
            xor EAX,EAX
            add BYTE PTR [RDI+269],1
            ret 
.L_43c1fc:

            nop
            nop
            nop
            nop
.L_43c200:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+268]
            lea RBX,QWORD PTR [RDI+200]
            mov R12,RDI
            sub RSP,8
.L_43c21e:

            cmp BYTE PTR [RBX+16],0
            je .L_43c234

            mov RSI,R13
            mov RDI,RBX
            call .L_401820

            cmp BYTE PTR [RBX+16],AL
            jbe .L_43c250
.L_43c234:

            add RBX,17
            cmp RBX,RBP
            jne .L_43c21e

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43c250:

            pxor XMM0,XMM0
            mov BYTE PTR [RBX+16],0
            xor EAX,EAX
            movups XMMWORD PTR [RBX],XMM0
            sub BYTE PTR [R12+269],1
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43c271:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c280:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R15,QWORD PTR [R12+72]
            sub RSP,120
.L_43c296:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_433510

            mov RBX,RAX
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RAX+2568]
            lea RBP,QWORD PTR [RSP+80]
            lea R14,QWORD PTR [RSP+60]
            add RBX,7520
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_416dd0

            movzx R13D,AX
            lea RAX,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+16],RAX
.L_43c2ee:

            movsxd RAX,DWORD PTR [RSP+8]
            mov QWORD PTR [RSP+24],RAX
            shl RAX,5
            test BYTE PTR [R12+RAX*1+89],2
            je .L_43c350

            mov DWORD PTR [RSP+60],0
            nop
            nop
            nop
            nop
.L_43c310:

            mov RCX,RBP
            mov EDX,R13D
            mov RSI,R14
            mov RDI,RBX
            call .L_426210

            test EAX,EAX
            jne .L_43c420

            test BYTE PTR [RSP+97],16
            je .L_43c310

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            call .L_428150

            movzx EAX,BYTE PTR [RSP+73]
            cmp BYTE PTR [R15+15],AL
            jne .L_43c310

            nop
            nop
            nop
            nop
            nop
.L_43c350:

            add DWORD PTR [RSP+8],1
            add R15,32
            mov EAX,DWORD PTR [RSP+8]
            cmp EAX,4
            jne .L_43c2ee

            lea R15,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+60],0
            nop
.L_43c370:

            mov RCX,RBP
            mov EDX,R13D
            mov RSI,R14
            mov RDI,RBX
            call .L_426210

            test EAX,EAX
            jne .L_43c460

            test BYTE PTR [RSP+97],16
            je .L_43c370

            mov RDX,R15
            mov RSI,RBP
            mov RDI,RBX
            call .L_428150

            movzx ECX,BYTE PTR [RSP+73]
            xor EAX,EAX
.L_43c3a5:

            movsxd RDX,EAX
            shl RDX,5
            test BYTE PTR [R12+RDX*1+89],2
            je .L_43c3c2

            mov RDX,RAX
            shl RDX,5
            cmp BYTE PTR [R12+RDX*1+87],CL
            je .L_43c370
.L_43c3c2:

            add RAX,1
            cmp RAX,4
            jne .L_43c3a5

            xor EAX,EAX
.L_43c3ce:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,5
            add RDX,R12
            test BYTE PTR [RDX+89],2
            lea R8,QWORD PTR [RDX+80]
            je .L_43c490

            add EAX,1
            cmp EAX,4
            jne .L_43c3ce

            mov EAX,3
.L_43c3f6:

            mov RDI,QWORD PTR [RSP+104]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43c506

            add RSP,120
.L_43c40e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c420:

            movzx ESI,BYTE PTR [R15+15]
            mov RDX,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_4282b0

            mov RDI,QWORD PTR [RSP+32]
            mov RSI,R15
            call .L_411720

            mov RAX,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+64]
            mov RDI,R12
            shl RAX,5
            and BYTE PTR [R12+RAX*1+89],253
            call .L_43c200

            jmp .L_43c350
.L_43c460:

            cmp BYTE PTR [R12+269],0
            mov RDI,R12
            jne .L_43c480

            call .L_411b20

            xor EAX,EAX
            jmp .L_43c3f6
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c480:

            call .L_43c130

            xor EAX,EAX
            jmp .L_43c3f6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43c490:

            shl RCX,5
            mov RDI,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+24],R8
            lea RSI,QWORD PTR [R12+RCX*1+72]
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+8],RSI
            call .L_4167f0

            mov RSI,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR [RAX]
            mov RDX,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSI],RAX
            mov EAX,254
            mov DWORD PTR [RSI+8],4278190080
            mov WORD PTR [RSI+12],AX
            movzx EAX,BYTE PTR [RSP+73]
            mov BYTE PTR [RSI+14],252
            mov BYTE PTR [RSI+15],AL
            mov BYTE PTR [RDX+88],128
            or BYTE PTR [R8+9],3
            call .L_4116c0

            mov RSI,RBP
            mov RDI,R12
            call .L_43c1b0

            jmp .L_43c370
.L_43c506:

            call __stack_chk_fail@PLT
.L_43c50b:

            nop
            nop
            nop
            nop
            nop
.L_43c510:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov EBX,ECX
            mov R12,RSI
            sub RSP,24
.L_43c529:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            add BX,DX
            jb .L_43c5cd

            xor R14D,R14D
.L_43c545:

            test R14W,R14W
            lea RBP,QWORD PTR [RSP+4]
            je .L_43c57d

            jmp .L_43c5c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c558:

            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            movzx EAX,AX
            cmp R13D,EAX
            je .L_43c5c8

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            lea R15D,DWORD PTR [R15+RAX*1+4]
            cmp BX,R15W
            jb .L_43c5c0
.L_43c57d:

            movzx ESI,R15W
            mov RCX,RBP
            mov EDX,4
            mov RDI,R12
            call .L_4038b0

            cmp AX,4
            je .L_43c558
.L_43c597:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_43c5d8

            add RSP,24
.L_43c5ae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c5c0:

            xor R14D,R14D
            jmp .L_43c597
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43c5c8:

            mov R14D,R15D
            jmp .L_43c597
.L_43c5cd:

            mov R14D,1
            jmp .L_43c545
.L_43c5d8:

            call __stack_chk_fail@PLT
.L_43c5dd:

            nop
            nop
            nop
.L_43c5e0:

            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,16
            mov RBX,RCX
            call .L_4038b0

            cmp AX,16
            mov EDX,6
            jne .L_43c61d

            cmp WORD PTR [RBX+2],3072
            jne .L_43c61d

            cmp WORD PTR [RBX+4],768
            jne .L_43c61d

            cmp WORD PTR [RBX+6],6912
            mov EAX,0
            cmove EDX,EAX
.L_43c61d:

            mov EAX,EDX
            pop RBX
            ret 
.L_43c621:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c630:

            sub RSP,24
.L_43c634:

            mov RDI,RSI
            movzx ESI,DX
            lea RCX,QWORD PTR [RSP+2]
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,6
            mov EDX,6
            jne .L_43c673

            cmp WORD PTR [RSP+4],512
            mov EAX,0
            cmove EDX,EAX
.L_43c673:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43c68a

            add RSP,24
.L_43c689:

            ret 
.L_43c68a:

            call __stack_chk_fail@PLT
.L_43c68f:

            nop
.L_43c690:

            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            mov RDI,RSI
            push RBX
            movzx ESI,DX
            mov EDX,28
            sub RSP,48
.L_43c6aa:

            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,28
            mov EDX,6
            jne .L_43c70c

            cmp WORD PTR [RSP+2],6144
            jne .L_43c70c

            lea RBX,QWORD PTR [R13+200]
            xor EBP,EBP
            add R12,4
.L_43c6e6:

            cmp BYTE PTR [RBX+16],0
            je .L_43c6fc

            mov RSI,RBX
            mov RDI,R12
            call .L_401820

            cmp BYTE PTR [RBX+16],AL
            jbe .L_43c730
.L_43c6fc:

            add RBP,1
            add RBX,17
            cmp RBP,4
            jne .L_43c6e6

            xor EDX,EDX
.L_43c70c:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43c744

            add RSP,48
.L_43c722:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c730:

            mov EAX,1
            mov ECX,EBP
            xor EDX,EDX
            shl EAX,CL
            or BYTE PTR [R13+268],AL
            jmp .L_43c70c
.L_43c744:

            call __stack_chk_fail@PLT
.L_43c749:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c750:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            movzx ESI,DX
            push RBX
.L_43c75e:

            mov R14,RDI
            mov R12D,EDX
            mov RDI,R13
            mov EDX,16
            mov RBX,RCX
            call .L_4038b0

            mov EDX,EAX
            mov EAX,6
            cmp DX,16
            jne .L_43c7f9

            movzx EBX,WORD PTR [RBX+2]
            movzx ESI,WORD PTR [R13+58]
            add R12D,16
            movzx EDX,R12W
            rol BX,8
            sub ESI,EDX
            sub EBX,12
            movzx ECX,BX
            cmp ECX,ESI
            jg .L_43c7f9

            test BX,BX
            mov BYTE PTR [R14+268],0
            jne .L_43c7df

            jmp .L_43c7f7
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c7b8:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_43c690

            test EAX,EAX
            jne .L_43c7f9

            lea EBX,DWORD PTR [RBX+R12*1-28]
            lea R12D,DWORD PTR [RBP+28]
            sub BX,BP
            je .L_43c7f7

            movzx ECX,BX
            movzx EDX,R12W
.L_43c7df:

            mov R8D,5
            mov RSI,R13
            mov RDI,R14
            call .L_43c510

            test AX,AX
            mov EBP,EAX
            jne .L_43c7b8
.L_43c7f7:

            xor EAX,EAX
.L_43c7f9:

            pop RBX
.L_43c7fa:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_43c802:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c810:

            sub RSP,24
.L_43c814:

            mov RDI,RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDX]
            lea RSI,QWORD PTR [RSP+4]
            mov BYTE PTR [RSP+4],7
            mov WORD PTR [RSP+5],AX
            movzx EAX,BYTE PTR [RDX+2]
            mov EDX,4
            mov BYTE PTR [RSP+7],AL
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c860

            add RSP,24
.L_43c85f:

            ret 
.L_43c860:

            call __stack_chk_fail@PLT
.L_43c865:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c870:

            mov RDI,RSI
            mov RSI,RDX
            mov EDX,16
            jmp .L_403d80
.L_43c880:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_43c888:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movabs RAX,1945558337760264704
            mov QWORD PTR [RSP],RAX
            call .L_433510

            mov RAX,QWORD PTR [RAX+1656]
            mov RSI,RSP
            mov EDX,16
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c8dd

            add RSP,32
.L_43c8db:

            pop RBX
            ret 
.L_43c8dd:

            call __stack_chk_fail@PLT
.L_43c8e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c8f0:

            mov R10,RSI
            mov RSI,RDX
            movzx EDX,BYTE PTR [RDI+268]
            test DL,DL
            je .L_43c940

            xor ECX,ECX
            xor EAX,EAX
.L_43c905:

            mov R9D,EDX
            lea R8D,DWORD PTR [RAX+28]
            sar R9D,CL
            and R9D,1
            cmovne EAX,R8D
            add ECX,1
            cmp ECX,4
            jne .L_43c905
.L_43c91f:

            add EAX,18
            mov QWORD PTR [RSI+8],-1
            mov EDX,16
            rol AX,8
            mov RDI,R10
            mov WORD PTR [RSI+2],AX
            jmp .L_403d80
          .byte 0x90
.L_43c940:

            movzx EDX,BYTE PTR [RDI+269]
            lea EAX,DWORD PTR [RDX*8]
            sub EAX,EDX
            shl EAX,2
            jmp .L_43c91f
.L_43c955:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c960:

            sub RSP,24
.L_43c964:

            rol DX,8
            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+2]
            mov WORD PTR [RSP+6],DX
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],33557760
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c9ac

            add RSP,24
.L_43c9ab:

            ret 
.L_43c9ac:

            call __stack_chk_fail@PLT
.L_43c9b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c9c0:

            push RBP
            push RBX
            mov RBP,RSI
            lea RSI,QWORD PTR [RCX+8]
            sub RSP,56
.L_43c9cd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RBX,RSP
            mov RAX,QWORD PTR [RDX]
            mov DWORD PTR [RSP],402654464
            lea RDI,QWORD PTR [RBX+4]
            mov QWORD PTR [RSP+4],RAX
            call .L_4101d0

            mov EDX,28
            mov RSI,RBX
            mov RDI,RBP
            mov QWORD PTR [RSP+20],-1
            call .L_403d80

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43ca28

            add RSP,56
.L_43ca25:

            pop RBX
            pop RBP
            ret 
.L_43ca28:

            call __stack_chk_fail@PLT
.L_43ca2d:

            nop
            nop
            nop
.L_43ca30:

            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_43ca3e:

            movzx EAX,BYTE PTR [RDI+268]
            mov RBP,RSI
            test AL,AL
            je .L_43caa0

            xor EBX,EBX
            lea R13,QWORD PTR [RDI+200]
            bt EAX,EBX
            jb .L_43ca77

            nop
            nop
            nop
            nop
            nop
            nop
.L_43ca60:

            add RBX,1
            cmp RBX,4
            je .L_43cad2

            movzx EAX,BYTE PTR [R14+268]
            bt EAX,EBX
            jae .L_43ca60
.L_43ca77:

            mov RDX,RBX
            mov RCX,R12
            mov RSI,RBP
            shl RDX,4
            mov RDI,R14
            add RDX,RBX
            add RDX,R13
            call .L_43c9c0

            test EAX,EAX
            je .L_43ca60
.L_43ca96:

            pop RBX
.L_43ca97:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_43caa0:

            lea RBX,QWORD PTR [RDI+200]
            lea R13,QWORD PTR [RDI+268]
.L_43caae:

            cmp BYTE PTR [RBX+16],0
            je .L_43cac9

            mov RCX,R12
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R14
            call .L_43c9c0

            test EAX,EAX
            jne .L_43ca96
.L_43cac9:

            add RBX,17
            cmp RBX,R13
            jne .L_43caae
.L_43cad2:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_43cadd:

            nop
            nop
            nop
.L_43cae0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            xor ESI,ESI
            push RBP
            push RBX
            mov R13,RDX
            pxor XMM0,XMM0
            mov RBX,RDI
            sub RSP,104
.L_43cafd:

            mov RBP,RCX
            mov R12,R8
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+32],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_411a40

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_43cb7c

            movzx EAX,WORD PTR [R13]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov RDI,R15
            mov BYTE PTR [RSP+28],7
            mov WORD PTR [RSP+29],AX
            movzx EAX,BYTE PTR [R13+2]
            mov BYTE PTR [RSP+31],AL
            call .L_403d80

            test EAX,EAX
            je .L_43cba0
.L_43cb6c:

            mov RDI,R15
            mov DWORD PTR [RSP+8],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+8]
.L_43cb7c:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43cc71

            add RSP,104
.L_43cb94:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_43cba0:

            mov RSI,R15
            mov RDI,RBX
            call .L_43c880

            test EAX,EAX
            jne .L_43cb6c

            mov EDX,16
            mov RSI,RBP
            mov RDI,R15
            call .L_403d80

            test EAX,EAX
            jne .L_43cb6c

            mov RDX,R12
            mov RSI,R15
            mov RDI,RBX
            call .L_43c8f0

            test EAX,EAX
            jne .L_43cb6c

            lea R12,QWORD PTR [RSP+22]
            xor EAX,EAX
            mov EDX,6
            mov RDI,R15
            mov DWORD PTR [RSP+22],33557760
            mov WORD PTR [RSP+26],AX
            mov RSI,R12
            call .L_403d80

            test EAX,EAX
            jne .L_43cb6c

            mov RDX,RBP
            mov RSI,R15
            mov RDI,RBX
            call .L_43ca30

            test EAX,EAX
            jne .L_43cb6c

            mov EDX,4
            mov RSI,R12
            mov RDI,R15
            mov DWORD PTR [RSP+22],3584
            call .L_403d80

            test EAX,EAX
            jne .L_43cb6c

            mov RDI,QWORD PTR [RSP+8]
            mov ECX,12
            mov RDX,QWORD PTR [RSP+8]
            movdqu XMM0,XMMWORD PTR [R14]
            mov RSI,R15

            rep stosd DWORD PTR [RDI]

            mov RDI,RBX
            mov WORD PTR [RSP+66],546
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_411ba0

            test EAX,EAX
            je .L_43cb7c

            jmp .L_43cb6c
.L_43cc71:

            call __stack_chk_fail@PLT
.L_43cc76:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43cc80:

            push R15
            push R14
            mov R8D,1
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov R14,RCX
            mov R12,RDI
            mov R15,RSI
            sub RSP,72
.L_43cca0:

            movzx EBP,WORD PTR [RSI+60]
            movzx EBX,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            sub EBX,EBP
            mov EDX,EBP
            movzx EBX,BX
            mov ECX,EBX
            call .L_43c510

            test AX,AX
            jne .L_43ccf0
.L_43cccb:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43cde7

            add RSP,72
.L_43cce3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_43ccf0:

            lea RCX,QWORD PTR [RSP+32]
            movzx EDX,AX
            mov RSI,R15
            mov RDI,R12
            mov QWORD PTR [RSP+8],RCX
            call .L_43c5e0

            test EAX,EAX
            jne .L_43cccb

            mov R8D,2
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_43c510

            test AX,AX
            jne .L_43cccb

            mov R8D,14
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_43c510

            test AX,AX
            je .L_43cccb

            mov R8D,8
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_43c510

            test AX,AX
            je .L_43cd90

            lea RCX,QWORD PTR [RSP+16]
            movzx ESI,AX
            mov EDX,6
            mov RDI,R15
            call .L_4038b0

            cmp AX,6
            jne .L_43cccb

            cmp WORD PTR [RSP+18],512
            jne .L_43cccb

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43cd90:

            mov R8D,3
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_43c510

            test AX,AX
            je .L_43cccb

            lea RBX,QWORD PTR [RSP+16]
            movzx EDX,AX
            mov RSI,R15
            mov RDI,R12
            mov RCX,RBX
            call .L_43c750

            test EAX,EAX
            jne .L_43cccb

            mov RCX,QWORD PTR [RSP+8]
            mov R8,RBX
            mov RDX,R14
            mov RSI,R13
            mov RDI,R12
            call .L_43cae0

            jmp .L_43cccb
.L_43cde7:

            call __stack_chk_fail@PLT
.L_43cdec:

            nop
            nop
            nop
            nop
.L_43cdf0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RSI
            mov RDI,RBX
            sub RSP,48
.L_43ce01:

            movzx ESI,WORD PTR [RSI+60]
            lea RBP,QWORD PTR [RSP+12]
            movdqu XMM0,XMMWORD PTR [RDX+16]
            mov EDX,4
            mov RCX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_4038b0

            cmp AX,4
            je .L_43ce50
.L_43ce37:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43ce7a

            add RSP,48
.L_43ce4b:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_43ce50:

            mov ESI,4
            mov RDI,RBX
            call .L_403530

            cmp BYTE PTR [RSP+12],1
            jne .L_43ce37

            lea RCX,QWORD PTR [RBP+1]
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,R12
            call .L_43cc80

            jmp .L_43ce37
.L_43ce7a:

            call __stack_chk_fail@PLT
.L_43ce7f:

            nop
.L_43ce80:

            jmp .L_43cdf0
.L_43ce85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ce90:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],3584
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d80

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43ced3

            add RSP,24
            ret 
.L_43ced3:

            call __stack_chk_fail@PLT
.L_43ced8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43cee0:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_43dbd0]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_43cef4:

            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_411a60

            test EAX,EAX
            jne .L_43cf2e

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_411ac0
.L_43cf2e:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43cf45

            add RSP,40
.L_43cf42:

            pop RBX
            pop RBP
            ret 
.L_43cf45:

            call __stack_chk_fail@PLT
.L_43cf4a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43cf50:

            push RBP
            push RBX
            mov RBP,RSI
            mov ESI,12
            sub RSP,8
            call .L_411a40

            test RAX,RAX
            mov RBX,RAX
            je .L_43cf85

            mov RSI,RBP
            mov RDI,RAX
            mov EDX,12
            call .L_403df0

            xor ESI,ESI
            mov RDI,RBX
            call .L_4035a0
.L_43cf85:

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_43cf8f:

            nop
.L_43cf90:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_43cf9b:

            mov RBX,RSI
            mov RBP,RDX
            call .L_401240

            movzx ESI,WORD PTR [RBX+58]
            mov RDI,RBX
            mov R13D,EAX
            call .L_404070

            test RAX,RAX
            mov RBX,RAX
            je .L_43cfdb

            mov EDX,63
            mov RSI,RBP
            mov RDI,RAX
            call .L_403d80

            test EAX,EAX
            je .L_43cff0

            mov RDI,RBX
            xor EBX,EBX
            call .L_403400
.L_43cfdb:

            mov RAX,RBX
            pop RBX
.L_43cfdf:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43cff0:

            lea RDI,QWORD PTR [R12+80]
            mov EDX,1
            mov RSI,RBX
            lea R14,QWORD PTR [R12+88]
            call .L_4045d0

            cmp R14,QWORD PTR [R12+104]
            je .L_43d038

            mov EDX,DWORD PTR [RBP+24]
            mov EAX,DWORD PTR [R12+96]
            sub EAX,EDX
            test EAX,EAX
            jle .L_43cfdb

            sub EDX,R13D
            mov EBP,EDX
.L_43d021:

            call .L_401240

            mov EDX,EBP
            mov ESI,EAX
            mov RDI,R14
            call .L_433770

            jmp .L_43cfdb
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d038:

            mov EBP,DWORD PTR [RBP+24]
            sub EBP,R13D
            jmp .L_43d021
.L_43d040:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+80]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RSI
            lea R13,QWORD PTR [RBX+88]
            sub RSP,8
            call .L_404690

            cmp R13,QWORD PTR [RBX+104]
            je .L_43d073

            mov RDI,R12
            call .L_4045c0

            test RAX,RAX
            je .L_43d088
.L_43d073:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_403400
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d088:

            mov RDI,R13
            call .L_433690

            jmp .L_43d073
.L_43d092:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d0a0:

            jmp .L_411ba0
.L_43d0a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d0b0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov R12,RDX
            sub RSP,16
.L_43d0c1:

            movzx EAX,WORD PTR [RSI+58]
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_404070

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_43d0ff

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_411ba0

            test EAX,EAX
            je .L_43d0ff

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_43d0ff:

            add RSP,16
.L_43d103:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_43d108:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d110:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            xor R12D,R12D
            xor EDX,EDX
            sub RSP,24
.L_43d12c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            lea R14,QWORD PTR [RSP+7]
            jmp .L_43d15f
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d150:

            test AL,AL
            je .L_43d16d

            add EDX,1
            mov BYTE PTR [RSP+7],DL
.L_43d15b:

            add R15D,1
.L_43d15f:

            movzx EBX,R15B
            add RBX,RBP
            movzx EAX,BYTE PTR [RBX]
            cmp AL,46
            jne .L_43d150
.L_43d16d:

            test DL,DL
            je .L_43d1b8

            mov EDX,1
            mov RSI,R14
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_43d1bd

            movzx EDX,BYTE PTR [RSP+7]
            movzx ESI,R12B
            mov RDI,R13
            add RSI,RBP
            call .L_403d80

            test EAX,EAX
            jne .L_43d1bd

            movzx EAX,BYTE PTR [RSP+7]
            cmp BYTE PTR [RBX],0
            mov BYTE PTR [RSP+7],0
            lea R12D,DWORD PTR [R12+RAX*1+1]
            je .L_43d1e0

            xor EDX,EDX
            jmp .L_43d15b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d1b8:

            mov EAX,7
.L_43d1bd:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43d1f2

            add RSP,24
.L_43d1d1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d1e0:

            mov EDX,1
            mov RSI,R14
            mov RDI,R13
            call .L_403d80

            jmp .L_43d1bd
.L_43d1f2:

            call __stack_chk_fail@PLT
.L_43d1f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d200:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            mov RSI,RCX
            mov ECX,7
            sub RSP,112
.L_43d21a:

            lea R12,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+20],0
            mov DWORD PTR [RSP+28],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov RDI,R12
            mov DWORD PTR [RSP+16],16784384

            rep stosq QWORD PTR [RDI]

            xor ECX,ECX
            cmp QWORD PTR [RBX],0
            mov QWORD PTR [RSP+40],RDX
            mov QWORD PTR [RSP+48],RSI
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],CX
            mov BYTE PTR [RDI+6],0
            je .L_43d310

            cmp QWORD PTR [RBX+8],0
            je .L_43d310

            movzx EAX,WORD PTR [RBP+72]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+20],AX
            mov WORD PTR [RBP+72],DX
            cmp BYTE PTR [RBX+16],0
            je .L_43d300
.L_43d297:

            lea RSI,QWORD PTR [RSP+20]
            mov EAX,256
            mov RDI,RBP
            mov WORD PTR [RSP+24],AX
            call .L_43cf50

            mov R13,RAX
            mov EAX,3
            test R13,R13
            je .L_43d2dd

            mov RDX,QWORD PTR [RBX]
            mov RSI,R13
            mov RDI,RBP
            call .L_43d110

            test EAX,EAX
            je .L_43d320
.L_43d2cd:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_43d2dd:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43d3d2

            add RSP,112
.L_43d2f5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43d300:

            mov BYTE PTR [RSP+22],1
            jmp .L_43d297
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d310:

            mov EAX,7
            jmp .L_43d2dd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d320:

            lea RSI,QWORD PTR [RSP+16]
            mov EDX,4
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_43d2cd

            mov RAX,QWORD PTR [RBX]
            mov R14,QWORD PTR [RBX+8]
            mov QWORD PTR [RSP+32],RAX
            call .L_401240

            add EAX,3000
            mov RDX,R12
            mov RSI,R13
            mov DWORD PTR [RSP+56],EAX
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [R14]
            movups XMMWORD PTR [RSP+60],XMM0
            movzx EAX,WORD PTR [R14+34]
            mov WORD PTR [RSP+92],AX
            movdqu XMM0,XMMWORD PTR [R14+16]
            mov BYTE PTR [RSP+94],0
            movups XMMWORD PTR [RSP+76],XMM0
            call .L_43cf90

            test RAX,RAX
            mov RBX,RAX
            je .L_43d3c0

            mov RDX,R14
            mov RSI,R13
            mov RDI,RBP
            call .L_411ba0

            test EAX,EAX
            je .L_43d2dd

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov RSI,RBX
            mov RDI,RBP
            call .L_43d040

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_43d2dd
.L_43d3c0:

            mov RDI,R13
            call .L_403400

            mov EAX,3
            jmp .L_43d2dd
.L_43d3d2:

            call __stack_chk_fail@PLT
.L_43d3d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d3e0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            sub RSP,88
.L_43d3f1:

            movzx EDI,WORD PTR [RDX+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDX+60]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP+8],RDX
            mov ECX,EDI
            mov WORD PTR [RSP+30],DI
            lea EBX,DWORD PTR [RCX-75]
            sub BX,AX
            je .L_43d4c0

            lea EBP,DWORD PTR [RAX+12]
            lea R13,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+48]
            jmp .L_43d474
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d438:

            movzx ESI,WORD PTR [R12]
            mov RDI,QWORD PTR [RSP+16]
            movzx EDX,AX
            mov RCX,R14
            call .L_4038b0

            cmp R15W,AX
            jne .L_43d49b

            movzx EDX,R15W
            mov RSI,R13
            mov RDI,R14
            call memcmp@PLT

            test EAX,EAX
            jne .L_43d4c8

            add WORD PTR [R12],R15W
            add EBP,R15D
            sub BX,R15W
            je .L_43d4c0
.L_43d474:

            cmp BX,16
            mov EDX,16
            mov RDI,QWORD PTR [RSP+8]
            cmovbe EDX,EBX
            movzx ESI,BP
            mov RCX,R13
            movzx EDX,DX
            call .L_4038b0

            test AX,AX
            mov R15D,EAX
            jne .L_43d438
.L_43d49b:

            mov EAX,6
.L_43d4a0:

            mov RDI,QWORD PTR [RSP+72]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43d4cf

            add RSP,88
.L_43d4b4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_43d4c0:

            xor EAX,EAX
            jmp .L_43d4a0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d4c8:

            mov EAX,23
            jmp .L_43d4a0
.L_43d4cf:

            call __stack_chk_fail@PLT
.L_43d4d4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d4e0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,32
.L_43d4ec:

            movzx EBX,WORD PTR [RDX]
            movzx EBP,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            sub BP,BX
            je .L_43d570

            mov R14,RSI
            mov R13,RDX
            mov R12,RSP
.L_43d511:

            movzx ESI,BX
            mov RCX,R12
            mov EDX,16
            mov RDI,R14
            call .L_4038b0

            test AX,AX
            je .L_43d570

            movzx EDX,BYTE PTR [RSP]
            test DL,DL
            je .L_43d580

            and EDX,4294967232
            cmp DL,192
            je .L_43d5b0

            lea RCX,QWORD PTR [R12+1]
            lea ESI,DWORD PTR [RAX+RBX*1]
            jmp .L_43d55b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d548:

            movzx EDX,BYTE PTR [RCX]
            test DL,DL
            je .L_43d580

            and EDX,4294967232
            add RCX,1
            cmp DL,192
            je .L_43d5b0
.L_43d55b:

            add EBX,1
            cmp SI,BX
            jne .L_43d548

            sub BP,AX
            jne .L_43d511

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d570:

            mov EAX,6
            jmp .L_43d58a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d580:

            add EBX,1
            xor EAX,EAX
            mov WORD PTR [R13],BX
.L_43d58a:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43d5bc

            add RSP,32
.L_43d59e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d5b0:

            add EBX,2
            xor EAX,EAX
            mov WORD PTR [R13],BX
            jmp .L_43d58a
.L_43d5bc:

            call __stack_chk_fail@PLT
.L_43d5c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d5d0:

            push R13
            push R12
            add RDI,80
            push RBP
            push RBX
            mov RBP,RSI
            mov R13,RDX
            sub RSP,24
.L_43d5e4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4045c0

            test RAX,RAX
            je .L_43d668

            mov RBX,RAX
            lea R12,QWORD PTR [RSP+6]
            jmp .L_43d620
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d610:

            mov RDI,RBX
            call .L_403410

            test RAX,RAX
            mov RBX,RAX
            je .L_43d668
.L_43d620:

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            cmp AX,2
            jne .L_43d688

            movzx EAX,WORD PTR [RBP]
            cmp WORD PTR [RSP+6],AX
            jne .L_43d610

            movzx EAX,WORD PTR [RBX+58]
            mov RCX,R13
            mov EDX,63
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_4038b0

            jmp .L_43d66a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d668:

            xor EBX,EBX
.L_43d66a:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov RAX,RBX
            jne .L_43d6a7

            add RSP,24
.L_43d681:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43d688:

            lea RCX,QWORD PTR [RIP+.L_43dc20]
            lea RSI,QWORD PTR [RIP+.L_43dbd5]
            lea RDI,QWORD PTR [RIP+.L_43dbe8]
            mov EDX,353
            call __assert_fail@PLT
.L_43d6a7:

            call __stack_chk_fail@PLT
.L_43d6ac:

            nop
            nop
            nop
            nop
.L_43d6b0:

            push R13
            push R12
            mov R13D,R9D
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RCX
            mov R12D,R8D
            sub RSP,8
            call .L_43d040

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            je .L_43d6f0

            mov RDI,QWORD PTR [RBX+16]
            mov RSI,QWORD PTR [RBX]
            add RSP,8
            pop RBX
            mov R8D,R13D
            mov ECX,R12D
            mov RDX,RBP
            pop RBP
            pop R12
            pop R13
            jmp RAX
.L_43d6f0:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43d6fb:

            nop
            nop
            nop
            nop
            nop
.L_43d700:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            add RDI,80
            sub RSP,88
.L_43d711:

            mov RBP,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_4045c0

            mov ECX,7
            mov RBX,RAX
            mov RDI,RBP
            xor EAX,EAX

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            test RBX,RBX
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            je .L_43d796

            nop
            nop
.L_43d750:

            mov RDI,RBX
            call .L_403410

            mov R12,RAX
            movzx EAX,WORD PTR [RBX+58]
            mov RDI,RBX
            mov RCX,RBP
            mov EDX,63
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_4038b0

            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov R9D,11
            mov RDX,RBP
            mov RDI,R13
            call .L_43d6b0

            test R12,R12
            mov RBX,R12
            jne .L_43d750
.L_43d796:

            mov RDI,R13
            call .L_411b20

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43d7b9

            add RSP,88
.L_43d7b2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43d7b9:

            call __stack_chk_fail@PLT
.L_43d7be:

            nop
            nop
.L_43d7c0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,152
.L_43d7d9:

            lea RBP,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_401240

            mov ECX,7
            mov R13D,EAX
            mov RDI,RBP
            xor EAX,EAX

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            lea RDI,QWORD PTR [R14+80]
            call .L_4045c0

            pxor XMM0,XMM0
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+16]
            test R15,R15
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_43d87e

            jmp .L_43d8d4
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d850:

            movzx EAX,BYTE PTR [RSP+126]
            cmp AL,1
            jbe .L_43d900

            mov R9D,28
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_43d6b0
.L_43d876:

            test R12,R12
            mov R15,R12
            je .L_43d8bd
.L_43d87e:

            mov RDI,R15
            call .L_403410

            mov R12,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBP
            mov EDX,63
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_4038b0

            mov EAX,DWORD PTR [RSP+88]
            cmp R13D,EAX
            jns .L_43d850

            sub EAX,R13D
            mov R15,R12
            cmp EBX,EAX
            cmova EBX,EAX
            test R12,R12
            jne .L_43d87e
.L_43d8bd:

            cmp EBX,-1
            je .L_43d8d4

            call .L_401240

            lea RDI,QWORD PTR [R14+88]
            mov EDX,EBX
            mov ESI,EAX
            call .L_433770
.L_43d8d4:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43d96e

            add RSP,152
.L_43d8f2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d900:

            add EAX,1
            mov RDI,R15
            mov RCX,RBP
            mov BYTE PTR [RSP+126],AL
            lea EAX,DWORD PTR [R13+3000]
            mov EDX,63
            mov DWORD PTR [RSP+88],EAX
            movzx EAX,WORD PTR [R15+58]
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_403b10

            mov EAX,DWORD PTR [RSP+88]
            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R15
            movdqu XMM0,XMMWORD PTR [RSP+108]
            mov RDI,R14
            sub EAX,R13D
            cmp EBX,EAX
            cmova EBX,EAX
            movzx EAX,WORD PTR [RSP+124]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+92]
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_43d0b0

            jmp .L_43d876
.L_43d96e:

            call __stack_chk_fail@PLT
.L_43d973:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d980:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402bb0

            add RSP,8
            mov RDI,RAX
            jmp .L_43d7c0
.L_43d99d:

            nop
            nop
            nop
.L_43d9a0:

            push R15
            push R14
            mov ECX,7
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov EDX,12
            sub RSP,152
.L_43d9c1:

            movzx ESI,WORD PTR [RSI+60]
            lea RBX,QWORD PTR [RSP+64]
            lea R12,QWORD PTR [RSP+20]
            mov QWORD PTR [RSP+20],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov DWORD PTR [RSP+28],0

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            mov RCX,R12
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            mov RDI,RBP
            call .L_4038b0

            cmp AX,12
            je .L_43da48
.L_43da1a:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43dbaa

            add RSP,152
.L_43da38:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43da48:

            movzx EAX,BYTE PTR [RSP+22]
            test AL,AL
            jns .L_43da1a

            cmp WORD PTR [RSP+24],256
            jne .L_43da1a

            test AL,2
            jne .L_43da1a

            mov ESI,12
            mov RDI,RBP
            call .L_403530

            movzx EAX,WORD PTR [RBP+60]
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            mov WORD PTR [RSP+18],AX
            call .L_43d5d0

            test RAX,RAX
            mov R15,RAX
            je .L_43da1a

            test BYTE PTR [RSP+23],15
            mov R9D,1
            je .L_43daaf
.L_43da97:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            call .L_43d6b0

            jmp .L_43da1a
.L_43daaf:

            lea R14,QWORD PTR [RSP+18]
            mov RDX,RAX
            mov RSI,RBP
            mov RDI,R13
            mov RCX,R14
            call .L_43d3e0

            test EAX,EAX
            mov R9D,EAX
            jne .L_43da97

            xor R12D,R12D
            cmp WORD PTR [RSP+26],0
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RAX
            jne .L_43db20

            jmp .L_43dbba
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43daf0:

            movzx EAX,WORD PTR [RSP+40]
            movzx EDX,WORD PTR [RSP+18]
            add R12D,1
            rol AX,8
            lea EAX,DWORD PTR [RAX+RDX*1+10]
            mov WORD PTR [RSP+18],AX
            movzx EAX,WORD PTR [RSP+26]
            rol AX,8
            movzx EAX,AX
            cmp EAX,R12D
            jbe .L_43dbba
.L_43db20:

            mov RDX,R14
            mov RSI,RBP
            mov RDI,R13
            call .L_43d4e0

            test EAX,EAX
            mov R9D,EAX
            jne .L_43da97

            movzx EDX,WORD PTR [RSP+18]
            movzx ECX,WORD PTR [RBP+58]
            mov RAX,RDX
            add RDX,10
            cmp RDX,RCX
            ja .L_43dbaf

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,AX
            mov EDX,26
            mov RDI,RBP
            call .L_4038b0

            cmp AX,26
            jne .L_43daf0

            cmp WORD PTR [RSP+32],7168
            jne .L_43daf0

            cmp WORD PTR [RSP+34],256
            jne .L_43daf0

            mov RCX,QWORD PTR [RSP+8]
            mov R8D,DWORD PTR [RSP+36]
            xor R9D,R9D
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            add RCX,10
            bswap R8D
            call .L_43d6b0

            jmp .L_43da1a
.L_43dbaa:

            call __stack_chk_fail@PLT
.L_43dbaf:

            mov R9D,6
            jmp .L_43da97
.L_43dbba:

            mov R9D,23
            jmp .L_43da97
.L_43dbc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dbd0:

            jmp .L_43d9a0
.L_43dbd5:
          .string "net/dns_client.cpp"
.L_43dbe8:
          .string "count == sizeof(messageId)"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43dc20:
          .string "ot::Message* ot::Dns::Client::FindRelatedQuery(const ot::Dns::Header&, ot::Dns::QueryMetadata&)"
.L_43dc80:

            mov EAX,1
            mov QWORD PTR [RDI],0
            mov BYTE PTR [RDI+10],1
            mov WORD PTR [RDI+8],AX
            ret 
.L_43dc95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dca0:

            push RBX
            mov EBX,ESI
            call .L_4334f0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40e1d0
.L_43dcb7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dcc0:

            mov RDX,QWORD PTR [RDI]
            test RDX,RDX
            je .L_43dce6

            cmp RDX,RSI
            je .L_43dcf0

            mov RAX,RDX
            jmp .L_43dcdd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43dcd8:

            cmp RSI,RAX
            je .L_43dcf0
.L_43dcdd:

            mov RAX,QWORD PTR [RAX+16]
            test RAX,RAX
            jne .L_43dcd8
.L_43dce6:

            mov QWORD PTR [RSI+16],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI],RSI
            ret 
.L_43dcf0:

            mov EAX,24
            ret 
.L_43dcf6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dd00:

            push RBP
            push RBX
            mov RBX,RSI
            rol CX,8
            mov RBP,RDI
            sub RSP,88
.L_43dd10:

            movdqu XMM0,XMMWORD PTR [RDX]
            lea RSI,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDI+8]
            mov DWORD PTR [RSP+8],128
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+12],CX
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RDI+8],DX
            mov EDX,8
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+14],AX
            call .L_403df0

            test EAX,EAX
            jne .L_43dd9b

            xor ESI,ESI
            mov RDI,RBX
            call .L_4035a0

            mov RDI,RBP
            call .L_4334f0

            lea RDX,QWORD PTR [RSP+16]
            mov ECX,58
            mov RSI,RBX
            mov RDI,RAX
            call .L_40f0c0
.L_43dd9b:

            mov RBX,QWORD PTR [RSP+72]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43ddb2

            add RSP,88
.L_43ddaf:

            pop RBX
            pop RBP
            ret 
.L_43ddb2:

            call __stack_chk_fail@PLT
.L_43ddb7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ddc0:

            push R14
            push R13
            mov R13,R8
            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov EBP,EDX
            mov RBX,RDI
            sub RSP,96
.L_43ddd7:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+16]
            movaps XMMWORD PTR [RSP+48],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_4334f0

            xor ESI,ESI
            mov RDI,RAX
            call .L_40e1d0

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_43de41

            mov ESI,48
            mov RDI,R14
            call .L_403470

            test EAX,EAX
            je .L_43de60
.L_43de31:

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_43de41:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43decc

            add RSP,96
.L_43de55:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43de60:

            mov RCX,R13
            mov EDX,40
            mov ESI,8
            mov RDI,R14
            call .L_403b10

            lea RCX,QWORD PTR [RSP+24]
            xor ESI,ESI
            xor EAX,EAX
            mov EDX,8
            mov RDI,R14
            mov WORD PTR [RSP+26],AX
            mov DWORD PTR [RSP+28],0
            mov BYTE PTR [RSP+24],R12B
            mov BYTE PTR [RSP+25],BPL
            call .L_403b10

            mov RDI,RBX
            call .L_4334f0

            lea RDX,QWORD PTR [RSP+32]
            mov ECX,58
            mov RSI,R14
            mov RDI,RAX
            call .L_40f0c0

            test EAX,EAX
            je .L_43de41

            jmp .L_43de31
.L_43decc:

            call __stack_chk_fail@PLT
.L_43ded1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dee0:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RDX
            push R12
            push RBP
            mov R13,RDI
            push RBX
            mov R12,RSI
            xor R15D,R15D
            sub RSP,104
.L_43defe:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov QWORD PTR [RSP+24],129
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_4334f0

            xor ESI,ESI
            mov RDI,RAX
            call .L_40e1d0

            test RAX,RAX
            je .L_43df63

            movzx EBP,WORD PTR [R12+58]
            mov RDI,RAX
            mov RBX,RAX
            sub BP,WORD PTR [R12+60]
            movzx ESI,BP
            call .L_403470

            test EAX,EAX
            mov R15D,EAX
            je .L_43df90
.L_43df5b:

            mov RDI,RBX
            call .L_403400
.L_43df63:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_43e03b

            add RSP,104
.L_43df7e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43df90:

            lea RAX,QWORD PTR [RSP+24]
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_403b10

            movzx EAX,WORD PTR [R12+60]
            lea ECX,DWORD PTR [RBP-4]
            mov R8,RBX
            mov EDX,4
            mov RDI,R12
            movzx ECX,CX
            lea ESI,DWORD PTR [RAX+4]
            movzx ESI,SI
            call .L_403fa0

            movdqu XMM0,XMMWORD PTR [R14+16]
            mov RDI,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40ff70

            test AL,AL
            jne .L_43dfef

            movdqu XMM0,XMMWORD PTR [R14]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_43dfef:

            movzx EAX,BYTE PTR [R14+36]
            mov RDI,R13
            mov BYTE PTR [RSP+68],AL
            call .L_4334f0

            lea RDX,QWORD PTR [RSP+32]
            mov ECX,58
            mov RSI,RBX
            mov RDI,RAX
            call .L_40f0c0

            test EAX,EAX
            mov R15D,EAX
            jne .L_43df5b

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBX
            call .L_4038b0

            jmp .L_43df63
.L_43e03b:

            call __stack_chk_fail@PLT
.L_43e040:

            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R13,RDX
            mov RDI,RBP
            mov EDX,8
            sub RSP,16
.L_43e05d:

            movzx ESI,WORD PTR [RSI+60]
            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4038b0

            cmp AX,8
            je .L_43e0b0
.L_43e082:

            mov EAX,6
.L_43e087:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43e140

            add RSP,16
.L_43e09f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e0b0:

            movzx EBX,WORD PTR [RBP+58]
            lea RDI,QWORD PTR [R13+16]
            mov ECX,58
            sub BX,WORD PTR [RBP+60]
            mov RSI,R13
            movzx EBX,BX
            mov EDX,EBX
            call .L_40e200

            movzx EDX,WORD PTR [RBP+60]
            movzx ESI,AX
            mov ECX,EBX
            mov RDI,RBP
            call .L_4042c0

            cmp AX,-1
            jne .L_43e082

            cmp BYTE PTR [R14+10],0
            je .L_43e0f2

            cmp BYTE PTR [RSP],128
            je .L_43e130
.L_43e0f2:

            mov ESI,8
            mov RDI,RBP
            call .L_403530

            mov RBX,QWORD PTR [R14]
            test RBX,RBX
            je .L_43e128

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e110:

            mov RDI,QWORD PTR [RBX+8]
            mov RCX,R12
            mov RDX,R13
            mov RSI,RBP
            call QWORD PTR [RBX]

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            jne .L_43e110
.L_43e128:

            xor EAX,EAX
            jmp .L_43e087
          .byte 0x90
.L_43e130:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R14
            call .L_43dee0

            jmp .L_43e0f2
.L_43e140:

            call __stack_chk_fail@PLT
.L_43e145:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e150:

            push RBX
            mov RBX,RSI
            mov ESI,EDX
            mov RDI,RBX
            movzx ESI,SI
            sub RSP,16
.L_43e160:

            movzx ECX,WORD PTR [RBX+58]
            mov WORD PTR [RSP+12],DX
            movzx EDX,WORD PTR [RBX+60]
            sub ECX,EDX
            movzx ECX,CX
            call .L_4042c0

            mov EDX,EAX
            cmp AX,-1
            lea RCX,QWORD PTR [RSP+12]
            not EDX
            mov RDI,RBX
            cmovne EAX,EDX
            mov EDX,2
            rol AX,8
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBX+60]
            lea ESI,DWORD PTR [RAX+2]
            movzx ESI,SI
            call .L_403b10

            add RSP,16
.L_43e1ab:

            xor EAX,EAX
            pop RBX
            ret 
.L_43e1af:

            nop
.L_43e1b0:

            lea RAX,QWORD PTR [RIP+.L_43e4c0]
            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_43e4dd]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_43e420]
            mov QWORD PTR [RDI+40],RAX
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            call .L_433510

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_43e20d:

            nop
            nop
            nop
.L_43e210:

            push RBP
            push RBX
            mov EBP,ECX
            mov R8D,1
            sub RSP,8
.L_43e21e:

            mov WORD PTR [RDI+4],CX
            mov DWORD PTR [RDI],ESI
            mov BYTE PTR [RDI+6],DL
            mov BYTE PTR [RDI+7],11
            mov ECX,11
            jmp .L_43e246
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e238:

            lea EAX,DWORD PTR [RCX+1]
            add ECX,1
            cmp ECX,27
            mov BYTE PTR [RDI+7],AL
            je .L_43e270
.L_43e246:

            mov EAX,R8D
            shl EAX,CL
            test EAX,ESI
            je .L_43e238

            mov RBX,RDI
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            movzx EDX,BP
            mov ESI,EAX
            call .L_433770

            add RSP,8
.L_43e269:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_43e270:

            add RSP,8
            mov EAX,7
            pop RBX
            pop RBP
            ret 
.L_43e27c:

            nop
            nop
            nop
            nop
.L_43e280:

            mov ECX,1000
            mov EDX,3
            jmp .L_43e210
.L_43e28c:

            nop
            nop
            nop
            nop
.L_43e290:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            xor R9D,R9D
            push RBX
            sub RSP,80
.L_43e2a2:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+1],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+8],AX
            mov WORD PTR [RSP+4],R9W
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_43e310
.L_43e2e8:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43e410

            add RSP,80
.L_43e300:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e310:

            lea R14,QWORD PTR [RSP+8]
            mov R12,RDX
            mov R13,RDI
            mov RBP,RSI
            mov RBX,RCX
            mov EDX,8
            mov RCX,R14
            mov ESI,53
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e2e8

            cmp BYTE PTR [RSP+9],6
            jne .L_43e2e8

            cmp BYTE PTR [RSP+10],0
            jne .L_43e2e8

            cmp BYTE PTR [RSP+11],4
            jne .L_43e2e8

            lea RCX,QWORD PTR [RSP+1]
            mov EDX,3
            mov ESI,54
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e2e8

            cmp BYTE PTR [RSP+2],1
            jne .L_43e2e8

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,55
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e2e8

            cmp BYTE PTR [RSP+5],2
            jne .L_43e2e8

            mov RDI,R14
            call .L_43ae90

            movzx ECX,WORD PTR [RSP+6]
            movzx EDX,BYTE PTR [RSP+3]
            mov ESI,EAX
            mov RDI,R13
            rol CX,8
            movzx ECX,CX
            call .L_43e210

            test BYTE PTR [RBP],48
            jne .L_43e2e8

            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            jne .L_43e2e8

            mov RDI,R13
            call .L_433510

            test BYTE PTR [RBP],48
            lea RDI,QWORD PTR [RAX+216]
            jne .L_43e2e8

            lea RCX,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov ESI,68
            call .L_430ae0

            jmp .L_43e2e8
.L_43e410:

            call __stack_chk_fail@PLT
.L_43e415:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e420:

            jmp .L_43e290
.L_43e425:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e430:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_43e439:

            call .L_433510

            movzx ESI,BYTE PTR [RBX+7]
            lea RDI,QWORD PTR [RAX+2568]
            lea EDX,DWORD PTR [RSI+1]
            mov BYTE PTR [RBX+7],DL
            xor EDX,EDX
            call .L_4183c0

            movzx EDX,BYTE PTR [RBX+6]
            mov ESI,1
            jmp .L_43e47f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e468:

            movzx ECX,BYTE PTR [RBX+7]
            mov EAX,ESI
            shl EAX,CL
            test DWORD PTR [RBX],EAX
            jne .L_43e490

            add ECX,1
            cmp CL,26
            mov BYTE PTR [RBX+7],CL
            ja .L_43e4b0
.L_43e47f:

            test DL,DL
            jne .L_43e468

            add RSP,8
.L_43e487:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e490:

            movzx EBP,WORD PTR [RBX+4]
            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+8]
            mov ESI,EAX
            pop RBX
            mov EDX,EBP
            pop RBP
            jmp .L_433770
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43e4b0:

            sub EDX,1
            mov BYTE PTR [RBX+7],11
            mov BYTE PTR [RBX+6],DL
            jmp .L_43e47f
.L_43e4bc:

            nop
            nop
            nop
            nop
.L_43e4c0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402af0

            add RSP,8
            mov RDI,RAX
            jmp .L_43e430
.L_43e4dd:
          .string "c/ab"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43e4f0:

            push RBX
            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+7520]
            call .L_428b50

            test RAX,RAX
            je .L_43e510

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43e510:

            mov BYTE PTR [RBX+29],0
            lea RDI,QWORD PTR [RBX+96]
            pop RBX
            jmp .L_433690
.L_43e51e:

            nop
            nop
.L_43e520:

            push RBX
            mov EBX,ESI
            call .L_402890

            mov RDI,RAX
            call .L_402b10

            and BH,2
            je .L_43e53b

            cmp BYTE PTR [RAX+29],0
            je .L_43e540
.L_43e53b:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43e540:

            pop RBX
            mov RDI,RAX
            jmp .L_43e4f0
.L_43e546:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e550:

            lea RAX,QWORD PTR [RIP+.L_43eb10]
            push R12
            lea R12,QWORD PTR [RDI+120]
            push RBP
            push RBX
.L_43e55f:

            mov RBP,RSI
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+96]
            lea RSI,QWORD PTR [RIP+.L_43e520]
            mov RBX,RDI
            mov RDX,RDI
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+112],RAX
            mov DWORD PTR [RDI+24],0
            mov BYTE PTR [RDI+28],0
            mov BYTE PTR [RDI+29],0
            mov BYTE PTR [RDI+94],0
            mov DWORD PTR [RDI+104],0
            mov RDI,R12
            call .L_402c40

            lea RAX,QWORD PTR [RIP+.L_43eb45]
            lea RDI,QWORD PTR [RBP+32]
            mov RSI,R12
            mov QWORD PTR [RBX+152],RBX
            mov QWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+136],RAX
            lea RAX,QWORD PTR [RIP+.L_43e800]
            mov QWORD PTR [RBX+144],RAX
            call .L_402c90

            mov RDI,RBX
            call .L_433510

            lea RSI,QWORD PTR [RBX+136]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
.L_43e5f6:

            pop RBP
            pop R12
            jmp .L_42f860
.L_43e5fe:

            nop
            nop
.L_43e600:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            xor R9D,R9D
            push RBX
            xor R10D,R10D
            sub RSP,96
.L_43e615:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+16],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+13],AX
            mov WORD PTR [RSP+20],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+24],R10W
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_43e688
.L_43e661:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43e7ed

            add RSP,96
.L_43e679:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e688:

            mov R12,RDX
            mov RBX,RCX
            lea RCX,QWORD PTR [RSP+13]
            mov R13,RDI
            mov RBP,RSI
            mov EDX,3
            mov ESI,54
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e661

            cmp BYTE PTR [RSP+14],1
            jne .L_43e661

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,4
            mov ESI,55
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e661

            cmp BYTE PTR [RSP+17],2
            jne .L_43e661

            lea RCX,QWORD PTR [RSP+20]
            mov EDX,4
            mov ESI,56
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_43e661

            cmp BYTE PTR [RSP+21],2
            jne .L_43e661

            lea R14,QWORD PTR [RSP+24]
            mov EDX,8
            mov ESI,53
            mov RDI,R12
            mov RCX,R14
            call .L_4339f0

            test EAX,EAX
            jne .L_43e661

            cmp BYTE PTR [RSP+25],6
            jne .L_43e661

            cmp BYTE PTR [RSP+26],0
            jne .L_43e661

            cmp BYTE PTR [RSP+27],4
            jne .L_43e661

            mov RDI,R14
            call .L_43ae90

            mov DWORD PTR [R13+16],EAX
            mov DWORD PTR [R13+20],EAX
            movzx EAX,BYTE PTR [RSP+15]
            mov BYTE PTR [R13+94],0
            mov BYTE PTR [R13+29],1
            mov BYTE PTR [R13+28],AL
            movzx EAX,WORD PTR [RSP+18]
            rol AX,8
            mov WORD PTR [R13+24],AX
            movzx EAX,WORD PTR [RSP+22]
            rol AX,8
            mov WORD PTR [R13+26],AX
            call .L_401240

            lea RDI,QWORD PTR [R13+96]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [R13],XMM0
            test BYTE PTR [RBP],48
            jne .L_43e661

            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            jne .L_43e661

            mov RDI,R13
            call .L_433510

            test BYTE PTR [RBP],48
            lea RDI,QWORD PTR [RAX+216]
            jne .L_43e661

            lea RCX,QWORD PTR [RSP+32]
            mov RDX,RBP
            mov ESI,68
            call .L_430ae0

            jmp .L_43e661
.L_43e7ed:

            call __stack_chk_fail@PLT
.L_43e7f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e800:

            jmp .L_43e600
.L_43e805:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e810:

            cmp BYTE PTR [RDI+29],0
            je .L_43e830

            test RSI,RSI
            je .L_43e838

            movzx EAX,BYTE PTR [RDI+94]
            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+94],DL
            movzx EDX,BYTE PTR [RSI+1]
            mov BYTE PTR [RDI+RAX*1+30],DL
            ret 
          .byte 0x66
          .byte 0x90
.L_43e830:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e838:

            push RBP
            push RBX
            sub RSP,8
            mov EDX,DWORD PTR [RDI+20]
            lea EAX,DWORD PTR [RDX-1]
            and EAX,EDX
            movzx EDX,BYTE PTR [RDI+28]
            test EAX,EAX
            mov DWORD PTR [RDI+20],EAX
            jne .L_43e85d

            mov EAX,DWORD PTR [RDI+16]
            sub EDX,1
            mov BYTE PTR [RDI+28],DL
            mov DWORD PTR [RDI+20],EAX
.L_43e85d:

            test DL,DL
            lea RBX,QWORD PTR [RDI+96]
            jne .L_43e880

            call .L_401240

            mov EDX,500
.L_43e86f:

            add RSP,8
            mov RDI,RBX
            mov ESI,EAX
            pop RBX
            pop RBP
            jmp .L_433770
          .byte 0x90
.L_43e880:

            movzx EBP,WORD PTR [RDI+24]
            call .L_401240

            mov EDX,EBP
            jmp .L_43e86f
.L_43e88d:

            nop
            nop
            nop
.L_43e890:

            jmp .L_43e810
.L_43e895:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e8a0:

            push R12
            push RBP
            xor EDX,EDX
            push RBX
            pxor XMM0,XMM0
            xor ECX,ECX
            xor ESI,ESI
            mov RBX,RDI
            sub RSP,240
.L_43e8b8:

            lea R12,QWORD PTR [RSP+80]
            mov WORD PTR [RSP+24],DX
            mov EDX,2
            mov WORD PTR [RSP+22],CX
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov RDI,R12
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_43eb4a]
            mov RDI,R12
            call .L_4318a0

            mov RDI,R12
            call .L_431b50

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            xor EDX,EDX
            mov RSI,R12
            call .L_42f920

            mov R12,RAX
            mov EAX,3
            test R12,R12
            je .L_43e9dc

            mov EDX,DWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,R12
            mov DWORD PTR [RSP+24],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+28],EAX
            call .L_403d80

            test EAX,EAX
            je .L_43ea08
.L_43e9cc:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_43e9dc:

            mov BYTE PTR [RBX+29],0
            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43eaa0

            add RSP,240
.L_43e9fe:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ea08:

            movzx EAX,BYTE PTR [RBX+94]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,R12
            mov BYTE PTR [RSP+22],57
            mov BYTE PTR [RSP+23],AL
            call .L_403d80

            test EAX,EAX
            jne .L_43e9cc

            movzx EDX,BYTE PTR [RBX+94]
            lea RSI,QWORD PTR [RBX+30]
            mov RDI,R12
            call .L_403d80

            test EAX,EAX
            jne .L_43e9cc

            mov RDI,RBX
            lea RBP,QWORD PTR [RSP+32]
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            mov EAX,4294963391
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+66],AX
            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R12
            call .L_430850

            test EAX,EAX
            je .L_43e9dc

            jmp .L_43e9cc
.L_43eaa0:

            call __stack_chk_fail@PLT
.L_43eaa5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43eab0:

            cmp BYTE PTR [RDI+29],0
            je .L_43eb08

            cmp BYTE PTR [RDI+28],0
            jne .L_43eac8

            jmp .L_43e8a0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eac8:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            mov ESI,DWORD PTR [RDI+20]
            mov EBP,ESI
            neg EBP
            and EBP,ESI
            call .L_433510

            movzx EDX,WORD PTR [RBX+26]
            add RSP,8
            mov R8,RBX
            mov ESI,EBP
            lea RDI,QWORD PTR [RAX+1560]
            lea RCX,QWORD PTR [RIP+.L_43e890]
            pop RBX
            pop RBP
            jmp .L_4063f0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eb08:

            ret 
.L_43eb0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43eb10:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b10

            add RSP,8
            mov RDI,RAX
            jmp .L_43eab0
.L_43eb2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43eb30:

            and ESI,512
            je .L_43eb3e

            cmp BYTE PTR [RDI+29],0
            je .L_43eb40
.L_43eb3e:

            ret 
.L_43eb40:

            jmp .L_43e4f0
.L_43eb45:
          .string "c/es"
.L_43eb4a:
          .string "c/er"
          .byte 0x90
.L_43eb50:

            lea RDX,QWORD PTR [RIP+.L_4406b0]
            and EDI,14
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43eb68:

            mov DWORD PTR [RSI],41
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eb78:

            mov DWORD PTR [RSI],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eb88:

            mov DWORD PTR [RSI],43
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eb98:

            mov DWORD PTR [RSI],44
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43eba8:

            mov DWORD PTR [RSI],60
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ebb8:

            mov EAX,6
            ret 
.L_43ebbe:

            nop
            nop
.L_43ebc0:

            ret 
.L_43ebc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ebd0:

            movzx EAX,BYTE PTR [RDI+8]
            mov RDX,QWORD PTR [RDI]
            shr AL,3
            movzx EAX,AL
            cmp EAX,8
            jae .L_43ec58

            test AL,4
            jne .L_43eca9

            test EAX,EAX
            je .L_43ebfb

            movzx ECX,BYTE PTR [RDX]
            test AL,2
            mov BYTE PTR [RSI],CL
            jne .L_43ecbc
.L_43ebfb:

            movzx EAX,BYTE PTR [RDI+8]
            mov R8D,EAX
            and R8D,4294967288
            cmp EAX,R8D
            jle .L_43ec4e

            mov R10D,128
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ec18:

            mov ECX,R8D
            mov EAX,R8D
            mov EDX,R10D
            and ECX,7
            sar EAX,3
            add R8D,1
            sar EDX,CL
            cdqe 
            mov ECX,EDX
            not ECX
            and CL,BYTE PTR [RSI+RAX*1]
            mov BYTE PTR [RSI+RAX*1],CL
            mov R9,QWORD PTR [RDI]
            and DL,BYTE PTR [R9+RAX*1]
            or EDX,ECX
            mov BYTE PTR [RSI+RAX*1],DL
            movzx EAX,BYTE PTR [RDI+8]
            cmp EAX,R8D
            jg .L_43ec18
.L_43ec4e:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ec58:

            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RSI],RCX
            mov ECX,EAX
            mov R8,QWORD PTR [RDX+RCX*1-8]
            mov QWORD PTR [RSI+RCX*1-8],R8
            lea RCX,QWORD PTR [RSI+8]
            mov R8,RSI
            and RCX,-8
            sub R8,RCX
            add EAX,R8D
            sub RDX,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_43ebfb

            and EAX,4294967288
            xor R8D,R8D
.L_43ec90:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RDX+R9*1]
            cmp R8D,EAX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_43ec90

            jmp .L_43ebfb
.L_43eca9:

            mov ECX,DWORD PTR [RDX]
            mov EAX,EAX
            mov DWORD PTR [RSI],ECX
            mov EDX,DWORD PTR [RDX+RAX*1-4]
            mov DWORD PTR [RSI+RAX*1-4],EDX
            jmp .L_43ebfb
.L_43ecbc:

            mov EAX,EAX
            movzx EDX,WORD PTR [RDX+RAX*1-2]
            mov WORD PTR [RSI+RAX*1-2],DX
            jmp .L_43ebfb
.L_43eccd:

            nop
            nop
            nop
.L_43ecd0:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_43ecd8:

            mov EAX,DWORD PTR [RDI+8]
            cmp EAX,1
            je .L_43ed68

            cmp EAX,2
            jne .L_43ed58

            mov RSI,RDI
            mov RDI,RDX
            mov QWORD PTR [RSP+8],RDX
            call .L_4101d0

            mov RDX,QWORD PTR [RSP+8]
.L_43ecfe:

            movzx EAX,BYTE PTR [RBX+8]
            cmp AL,64
            jbe .L_43ed4c

            mov ESI,EAX
            and ESI,4294967288
            cmp EAX,ESI
            jle .L_43ed4c

            mov R9D,128
            nop
            nop
            nop
.L_43ed18:

            mov EAX,ESI
            mov ECX,ESI
            mov EDI,R9D
            and ECX,7
            sar EAX,3
            add ESI,1
            cdqe 
            sar EDI,CL
            mov ECX,EDI
            not EDI
            and DIL,BYTE PTR [RDX+RAX*1]
            mov BYTE PTR [RDX+RAX*1],DIL
            mov R8,QWORD PTR [RBX]
            and CL,BYTE PTR [R8+RAX*1]
            or ECX,EDI
            mov BYTE PTR [RDX+RAX*1],CL
            movzx EAX,BYTE PTR [RBX+8]
            cmp EAX,ESI
            jg .L_43ed18
.L_43ed4c:

            add RSP,16
.L_43ed50:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43ed58:

            add RSP,16
            mov EAX,6
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ed68:

            mov EAX,254
            mov DWORD PTR [RDX+8],4278190080
            mov WORD PTR [RDX+12],AX
            movzx EAX,WORD PTR [RDI]
            rol AX,8
            mov WORD PTR [RDX+14],AX
            jmp .L_43ecfe
.L_43ed88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ed90:

            push R15
            push R14
            mov RDI,RSI
            push R13
            push R12
            mov RSI,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov R13,RCX
            mov R12,R8
            mov R15,R9
            sub RSP,56
.L_43edb0:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDX,RBX
            call .L_43ecd0

            mov RDI,RBP
            call .L_4101a0

            mov RDI,RBX
            mov R14,RAX
            call .L_4101b0

            mov RCX,QWORD PTR [R14]
            cmp QWORD PTR [RAX],RCX
            jne .L_43ee20

            or WORD PTR [R12],48
            xor EAX,EAX
.L_43edf8:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43ee9e

            add RSP,56
.L_43ee10:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ee20:

            movzx EAX,WORD PTR [RBP+14]
            lea RDI,QWORD PTR [RSP+4]
            mov RSI,R13
            mov RDX,RBX
            mov DWORD PTR [RSP+12],1
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_43ecd0

            mov RDI,RBP
            call .L_4101a0

            mov RDI,RBX
            mov R13,RAX
            call .L_4101b0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R13],RAX
            jne .L_43ee80

            or WORD PTR [R12],32
            movzx EAX,BYTE PTR [RBP+14]
            mov BYTE PTR [R15],AL
            movzx EAX,BYTE PTR [RBP+15]
            mov BYTE PTR [R15+1],AL
            mov EAX,2
            jmp .L_43edf8
.L_43ee80:

            or WORD PTR [R12],16
            mov RDI,RBP
            call .L_4101a0

            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [R15],RAX
            mov EAX,8
            jmp .L_43edf8
.L_43ee9e:

            call __stack_chk_fail@PLT
.L_43eea3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43eeb0:

            push R15
            push R14
            mov RDI,RSI
            push R13
            push R12
            mov RSI,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov R13,RCX
            mov R12,R8
            mov R15,R9
            sub RSP,56
.L_43eed0:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDX,RBX
            call .L_43ecd0

            mov RDI,RBP
            call .L_4101a0

            mov RDI,RBX
            mov R14,RAX
            call .L_4101b0

            mov RCX,QWORD PTR [R14]
            cmp QWORD PTR [RAX],RCX
            jne .L_43ef40

            or WORD PTR [R12],3
            xor EAX,EAX
.L_43ef18:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43efbe

            add RSP,56
.L_43ef30:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ef40:

            movzx EAX,WORD PTR [RBP+14]
            lea RDI,QWORD PTR [RSP+4]
            mov RSI,R13
            mov RDX,RBX
            mov DWORD PTR [RSP+12],1
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_43ecd0

            mov RDI,RBP
            call .L_4101a0

            mov RDI,RBX
            mov R13,RAX
            call .L_4101b0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R13],RAX
            jne .L_43efa0

            or WORD PTR [R12],2
            movzx EAX,BYTE PTR [RBP+14]
            mov BYTE PTR [R15],AL
            movzx EAX,BYTE PTR [RBP+15]
            mov BYTE PTR [R15+1],AL
            mov EAX,2
            jmp .L_43ef18
.L_43efa0:

            or WORD PTR [R12],1
            mov RDI,RBP
            call .L_4101a0

            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [R15],RAX
            mov EAX,8
            jmp .L_43ef18
.L_43efbe:

            call __stack_chk_fail@PLT
.L_43efc3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43efd0:

            push R12
            push RBP
            mov RBP,RDX
            push RBX
            mov R12,RCX
            mov RBX,RSI
            sub RSP,32
.L_43efe1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            movzx R8D,WORD PTR [RBP]
            mov EDX,R8D
            or EDX,8
            mov WORD PTR [RBP],DX
            mov EDX,2
            jmp .L_43f01a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43f010:

            add RDX,1
            cmp RDX,16
            je .L_43f078
.L_43f01a:

            cmp BYTE PTR [RBX+RDX*1],0
            mov ESI,EDX
            je .L_43f010

            cmp BYTE PTR [RBX+1],2
            jne .L_43f031

            cmp EDX,15
            je .L_43f100
.L_43f031:

            cmp ESI,12
            ja .L_43f0d0

            cmp ESI,10
            ja .L_43f0a0

            lea RDI,QWORD PTR [RAX+7520]
            xor ESI,ESI
            mov RDX,RSP
            call .L_4282b0

            test EAX,EAX
            jne .L_43f062

            movzx EAX,BYTE PTR [RBX+3]
            cmp BYTE PTR [RSP+8],AL
            je .L_43f11b
.L_43f062:

            movdqu XMM0,XMMWORD PTR [RBX]
            mov EAX,16
            movups XMMWORD PTR [R12],XMM0
            jmp .L_43f07a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f078:

            xor EAX,EAX
.L_43f07a:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43f14c

            add RSP,32
.L_43f092:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f0a0:

            or R8D,9
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+1]
            mov BYTE PTR [R12],AL
            mov EAX,DWORD PTR [RBX+11]
            mov DWORD PTR [R12+1],EAX
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12+5],AL
            mov EAX,6
            jmp .L_43f07a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f0d0:

            or R8D,10
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+1]
            mov BYTE PTR [R12],AL
            movzx EAX,WORD PTR [RBX+13]
            mov WORD PTR [R12+1],AX
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12+3],AL
            mov EAX,4
            jmp .L_43f07a
          .byte 0x66
          .byte 0x90
.L_43f100:

            or R8D,11
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12],AL
            mov EAX,1
            jmp .L_43f07a
.L_43f11b:

            mov RAX,QWORD PTR [RSP]
            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [RBX+4],RAX
            jne .L_43f062

            or WORD PTR [RBP],4
            movzx EAX,WORD PTR [RBX+1]
            mov WORD PTR [R12],AX
            mov EAX,DWORD PTR [RBX+12]
            mov DWORD PTR [R12+2],EAX
            mov EAX,6
            jmp .L_43f07a
.L_43f14c:

            call __stack_chk_fail@PLT
.L_43f151:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f160:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RSI
            mov EDX,2
            mov RDI,RBX
            sub RSP,56
.L_43f17f:

            movzx ESI,WORD PTR [RSI+60]
            lea RCX,QWORD PTR [RSP+36]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+38],AX
            call .L_4038b0

            mov ESI,2
            mov RDI,RBX
            call .L_403530

            movzx EAX,BYTE PTR [RSP+36]
            mov BYTE PTR [R13],224
            cmp AL,17
            je .L_43f2f0

            cmp AL,41
            je .L_43f2f0

            lea RCX,QWORD PTR [R13+1]
            mov BYTE PTR [R13+1],AL
            mov QWORD PTR [RSP+16],RCX
.L_43f1d8:

            movzx EDX,BYTE PTR [RSP+37]
            lea EDI,DWORD PTR [RDX*8+8]
            movzx EDX,BYTE PTR [R15]
            lea R12D,DWORD PTR [RDI-2]
            mov BYTE PTR [RSP+31],DIL
            test DL,DL
            movzx EBP,R12B
            je .L_43f268

            xor R8D,R8D
            cmp DL,60
            je .L_43f268
.L_43f201:

            mov BYTE PTR [R15],AL
            mov RAX,QWORD PTR [RSP+16]
            mov EDX,EBP
            mov RDI,RBX
            mov DWORD PTR [RSP+8],R8D
            mov BYTE PTR [RAX+1],R12B
            movzx ESI,WORD PTR [RBX+60]
            lea R14,QWORD PTR [RAX+2]
            mov RCX,R14
            call .L_4038b0

            mov R8D,DWORD PTR [RSP+8]
            mov RDI,RBX
            lea ESI,DWORD PTR [R8+RBP*1]
            call .L_403530

            movzx EAX,R12B
            add RAX,R14
            sub RAX,R13
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43f31d

            add RSP,56
.L_43f25a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43f268:

            movzx R14D,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RSP+38]
            mov QWORD PTR [RSP+8],RCX
            movzx EAX,R14W
            jmp .L_43f288
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43f280:

            add R14D,1
.L_43f284:

            movzx EAX,WORD PTR [RBX+60]
.L_43f288:

            movzx ESI,R14W
            add EAX,EBP
            cmp ESI,EAX
            jge .L_43f2c0

            mov RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBX
            call .L_4038b0

            cmp BYTE PTR [RSP+38],0
            je .L_43f280

            movzx EAX,BYTE PTR [RSP+39]
            lea R14D,DWORD PTR [R14+RAX*1+2]
            jmp .L_43f284
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f2c0:

            movzx EAX,BYTE PTR [RSP+38]
            test AL,AL
            jne .L_43f300

            movzx R12D,BYTE PTR [RSP+31]
            mov R8D,1
            sub R12D,3
            movzx EBP,R12B
.L_43f2dd:

            movzx EAX,BYTE PTR [RSP+36]
            jmp .L_43f201
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f2f0:

            mov BYTE PTR [R13],225
            mov QWORD PTR [RSP+16],R13
            jmp .L_43f1d8
          .byte 0x90
.L_43f300:

            xor R8D,R8D
            cmp AL,1
            jne .L_43f2dd

            movzx EAX,BYTE PTR [RSP+39]
            lea R8D,DWORD PTR [RAX+2]
            sub R12D,R8D
            movzx R8D,R8B
            movzx EBP,R12B
            jmp .L_43f2dd
.L_43f31d:

            call __stack_chk_fail@PLT
.L_43f322:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f330:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDX
            mov RDI,R12
            mov EDX,8
            sub RSP,16
.L_43f346:

            movzx ESI,WORD PTR [RSI+60]
            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_4038b0

            movzx EAX,WORD PTR [RSP]
            movzx EDX,WORD PTR [RSP+2]
            mov BYTE PTR [RBP],240
            rol AX,8
            rol DX,8
            mov ECX,EAX
            movzx ESI,AX
            and ECX,4294967280
            cmp CX,61616
            je .L_43f3f8
.L_43f386:

            mov ECX,EAX
            xor CL,CL
            cmp CX,61440
            je .L_43f420

            mov ECX,EDX
            xor CL,CL
            cmp CX,61440
            je .L_43f3e0

            mov EAX,DWORD PTR [RSP]
            lea RBX,QWORD PTR [RBP+5]
            mov DWORD PTR [RBP+1],EAX
.L_43f3aa:

            movzx EAX,WORD PTR [RSP+6]
            mov RDI,R12
            mov ESI,8
            mov WORD PTR [RBX],AX
            call .L_403530

            lea RAX,QWORD PTR [RBX+2]
            sub RAX,RBP
            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43f439

            add RSP,16
.L_43f3da:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_43f3e0:

            mov EBX,ESI
            mov BYTE PTR [RBP],241
            mov BYTE PTR [RBP+2],AL
            mov BYTE PTR [RBP+1],BH
            mov BYTE PTR [RBP+3],DL
            lea RBX,QWORD PTR [RBP+4]
            jmp .L_43f3aa
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43f3f8:

            mov ECX,EDX
            and ECX,4294967280
            cmp CX,61616
            jne .L_43f386

            shl ESI,4
            and EDX,15
            mov BYTE PTR [RBP],243
            or EDX,ESI
            lea RBX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP+1],DL
            jmp .L_43f3aa

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f420:

            mov BYTE PTR [RBP+1],AL
            movzx EAX,DH
            mov BYTE PTR [RBP],242
            mov BYTE PTR [RBP+2],AL
            lea RBX,QWORD PTR [RBP+4]
            mov BYTE PTR [RBP+3],DL
            jmp .L_43f3aa
.L_43f439:

            call __stack_chk_fail@PLT
.L_43f43e:

            nop
            nop
.L_43f440:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,R8
            sub RSP,152
.L_43f45a:

            mov QWORD PTR [RSP+32],RDX
            mov QWORD PTR [RSP+16],RCX
            lea RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_433510

            movzx ESI,WORD PTR [R13+60]
            xor EDI,EDI
            mov RCX,RBX
            mov WORD PTR [RSP+62],DI
            mov EDX,40
            mov RDI,R13
            mov RBP,RAX
            add RBP,7520
            call .L_4038b0

            lea RAX,QWORD PTR [RSP+64]
            lea RSI,QWORD PTR [RBX+8]
            mov RDI,RBP
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_428150

            test EAX,EAX
            jne .L_43f590

            movzx EAX,BYTE PTR [RSP+74]
            test AL,AL
            mov BYTE PTR [RSP+31],AL
            je .L_43f590
.L_43f4d9:

            lea R15,QWORD PTR [RSP+80]
            lea RSI,QWORD PTR [RBX+24]
            mov RDI,RBP
            mov RDX,R15
            call .L_428150

            test EAX,EAX
            jne .L_43f570

            movzx EAX,BYTE PTR [RSP+90]
            test AL,AL
            mov BYTE PTR [RSP+30],AL
            je .L_43f570
.L_43f4fe:

            movzx EAX,BYTE PTR [RSP+73]
            mov ESI,24576
            movzx EDX,BYTE PTR [RSP+89]
            mov WORD PTR [RSP+62],SI
            test AL,AL
            jne .L_43f6e0

            test DL,DL
            lea RBP,QWORD PTR [R12+2]
            jne .L_43f6e0
.L_43f527:

            movzx EDX,BYTE PTR [RSP+97]
            movzx EAX,BYTE PTR [RSP+96]
            mov ESI,EDX
            shl EAX,2
            mov ECX,EDX
            and EAX,60
            sar ESI,6
            shl EDX,2
            or EAX,ESI
            and EDX,4294967232
            and ECX,15
            jne .L_43f5b0

            cmp BYTE PTR [RSP+98],0
            jne .L_43f5b0

            cmp BYTE PTR [RSP+99],0
            jne .L_43f5b0

            or AL,DL
            movzx ECX,WORD PTR [RSP+62]
            jne .L_43f8a8

            or CH,24
            mov WORD PTR [RSP+62],CX
            jmp .L_43f5cd
.L_43f570:

            mov RDX,R15
            xor ESI,ESI
            mov RDI,RBP
            call .L_4282b0

            mov BYTE PTR [RSP+30],0
            jmp .L_43f4fe
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f590:

            mov RDX,QWORD PTR [RSP+8]
            xor ESI,ESI
            mov RDI,RBP
            call .L_4282b0

            mov BYTE PTR [RSP+31],0
            jmp .L_43f4d9
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f5b0:

            test AL,AL
            movzx ESI,WORD PTR [RSP+98]
            je .L_43f700

            or EAX,EDX
            mov BYTE PTR [RBP+1],CL
            mov WORD PTR [RBP+2],SI
            mov BYTE PTR [RBP],AL
            add RBP,4
.L_43f5cd:

            movzx EAX,BYTE PTR [RSP+102]
            cmp AL,41
            ja .L_43f723
.L_43f5da:

            movabs RDX,2199023386625
            bt RDX,RAX
            jae .L_43f723

            movzx EAX,BYTE PTR [RSP+103]
            or WORD PTR [RSP+62],1024
            cmp AL,64
            je .L_43f737
.L_43f602:

            cmp AL,255
            je .L_43f868

            cmp AL,1
            je .L_43f858

            mov BYTE PTR [RBP],AL
            add RBP,1
.L_43f619:

            lea RAX,QWORD PTR [RBX+8]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_40ff00

            test AL,AL
            je .L_43f810

            or WORD PTR [RSP+62],64
.L_43f638:

            add RBX,24
            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            je .L_43f748

            lea RDX,QWORD PTR [RSP+62]
            mov RSI,RBX
            mov RCX,RBP
            mov RDI,R14
            call .L_43efd0

            cdqe 
            lea RBX,QWORD PTR [RBP+RAX*1]
            movzx EAX,WORD PTR [RSP+62]
.L_43f66b:

            movzx EDX,AH
            mov BYTE PTR [R12+1],AL
            mov ESI,40
            mov BYTE PTR [R12],DL
            mov RDI,R13
            lea RBP,QWORD PTR [RSP+61]
            call .L_403530

            movzx EAX,BYTE PTR [RSP+102]
            mov BYTE PTR [RSP+61],AL
.L_43f692:

            cmp AL,17
            je .L_43f7d0

            cmp AL,41
            je .L_43f7a0

            test AL,AL
            je .L_43f7f0
.L_43f6aa:

            mov RAX,RBX
            sub RAX,R12
            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43f8bc

            add RSP,152
.L_43f6ce:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f6e0:

            shl EAX,4
            mov ECX,24704
            lea RBP,QWORD PTR [R12+3]
            or EAX,EDX
            mov WORD PTR [RSP+62],CX
            mov BYTE PTR [R12+2],AL
            jmp .L_43f527
          .byte 0x66
          .byte 0x90
.L_43f700:

            mov EAX,ECX
            mov WORD PTR [RBP+1],SI
            or WORD PTR [RSP+62],2048
            or EAX,EDX
            add RBP,3
            mov BYTE PTR [RBP-3],AL
            movzx EAX,BYTE PTR [RSP+102]
            cmp AL,41
            jbe .L_43f5da
.L_43f723:

            mov BYTE PTR [RBP],AL
            movzx EAX,BYTE PTR [RSP+103]
            add RBP,1
            cmp AL,64
            jne .L_43f602
.L_43f737:

            or WORD PTR [RSP+62],512
            jmp .L_43f619
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f748:

            mov RDI,RBX
            call .L_40ff50

            test AL,AL
            jne .L_43f76c

            cmp BYTE PTR [RSP+30],0
            movzx EAX,WORD PTR [RSP+62]
            je .L_43f878

            or EAX,4
            mov WORD PTR [RSP+62],AX
.L_43f76c:

            mov RSI,QWORD PTR [RSP+16]
            lea R8,QWORD PTR [RSP+62]
            mov RDX,RBX
            mov R9,RBP
            mov RCX,R15
            mov RDI,R14
            call .L_43eeb0

            movsxd RBX,EAX
            movzx EAX,WORD PTR [RSP+62]
            add RBX,RBP
            jmp .L_43f66b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f7a0:

            mov RCX,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+32]
            add RBX,1
            mov BYTE PTR [RBX-1],238
            mov RSI,R13
            mov R8,RBX
            mov RDI,R14
            call .L_43f440

            cdqe 
            add RBX,RAX
            jmp .L_43f6aa
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f7d0:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R14
            call .L_43f330

            cdqe 
            add RBX,RAX
            jmp .L_43f6aa
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f7f0:

            mov RDX,RBX
            mov RCX,RBP
            mov RSI,R13
            mov RDI,R14
            call .L_43f160

            cdqe 
            add RBX,RAX
            movzx EAX,BYTE PTR [RSP+61]
            jmp .L_43f692
.L_43f810:

            mov RDI,QWORD PTR [RSP+40]
            call .L_40ff50

            test AL,AL
            jne .L_43f82b

            cmp BYTE PTR [RSP+31],0
            je .L_43f890

            or WORD PTR [RSP+62],64
.L_43f82b:

            mov RCX,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [RSP+40]
            lea R8,QWORD PTR [RSP+62]
            mov RSI,QWORD PTR [RSP+32]
            mov R9,RBP
            mov RDI,R14
            call .L_43ed90

            cdqe 
            add RBP,RAX
            jmp .L_43f638
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43f858:

            or WORD PTR [RSP+62],256
            jmp .L_43f619
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43f868:

            or WORD PTR [RSP+62],768
            jmp .L_43f619
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43f878:

            movdqu XMM0,XMMWORD PTR [RSP+120]
            lea RBX,QWORD PTR [RBP+16]
            movups XMMWORD PTR [RBP],XMM0
            jmp .L_43f66b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f890:

            movdqu XMM0,XMMWORD PTR [RSP+104]
            add RBP,16
            movups XMMWORD PTR [RBP-16],XMM0
            jmp .L_43f638
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f8a8:

            or CH,16
            mov BYTE PTR [RBP],AL
            add RBP,1
            mov WORD PTR [RSP+62],CX
            jmp .L_43f5cd
.L_43f8bc:

            call __stack_chk_fail@PLT
.L_43f8c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f8d0:

            mov EAX,ESI
            and EAX,4294967280
            cmp AL,224
            je .L_43f8f8

            and ESI,4294967288
            mov EAX,6
            cmp SIL,240
            jne .L_43f8ef

            mov DWORD PTR [RDX],17
            xor EAX,EAX
.L_43f8ef:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f8f8:

            movzx EDI,SIL
            mov RSI,RDX
            jmp .L_43eb50
.L_43f904:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f910:

            push R15
            push R14
            push R13
            push R12
            mov R13D,R9D
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,R8
            sub RSP,120
.L_43f927:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+24],RDX
            mov QWORD PTR [RSP+40],RCX
            call .L_433510

            cmp R13W,1
            jbe .L_43fcc8

            movzx ECX,BYTE PTR [RBX]
            movzx EDX,BYTE PTR [RBX+1]
            lea R14D,DWORD PTR [R13-2]
            shl ECX,8
            or EDX,ECX
            mov R12D,EDX
            and DX,57344
            cmp DX,24576
            jne .L_43fcc8

            test R12B,128
            mov BYTE PTR [RSP+72],0
            mov BYTE PTR [RSP+88],0
            je .L_43fbf0

            test R14W,R14W
            je .L_43fcc8

            movzx ESI,BYTE PTR [RBX+2]
            lea R14,QWORD PTR [RAX+7520]
            lea RDX,QWORD PTR [RSP+64]
            lea R15,QWORD PTR [RBX+3]
            mov RDI,R14
            mov QWORD PTR [RSP+8],RDX
            sar ESI,4
            call .L_4282b0

            movzx ESI,BYTE PTR [RBX+2]
            test EAX,EAX
            lea RDX,QWORD PTR [RSP+80]
            sete BYTE PTR [RSP+39]
            mov RDI,R14
            lea R14D,DWORD PTR [R13-3]
            mov QWORD PTR [RSP+16],RDX
            and ESI,15
            call .L_4282b0

            test EAX,EAX
            sete BYTE PTR [RSP+38]
.L_43f9e1:

            pxor XMM0,XMM0
            mov EAX,R12D
            mov DWORD PTR [RBP+36],0
            and AX,6144
            mov DWORD PTR [RBP],96
            cmp AX,6144
            movups XMMWORD PTR [RBP+4],XMM0
            movups XMMWORD PTR [RBP+20],XMM0
            je .L_43fa84

            test R14W,R14W
            je .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sar EAX,2
            and EAX,48
            or AL,BYTE PTR [RBP+1]
            test R12W,2048
            mov BYTE PTR [RBP+1],AL
            jne .L_43fa4f

            movzx EDX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            sar EDX,2
            and EDX,15
            or EDX,96
            mov BYTE PTR [RBP],DL
            movzx EDX,BYTE PTR [R15-1]
            shl EDX,6
            or EAX,EDX
            mov BYTE PTR [RBP+1],AL
.L_43fa4f:

            test R12W,4096
            jne .L_43fa84

            cmp R14W,2
            jbe .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,3
            add R15,3
            and EAX,15
            or BYTE PTR [RBP+1],AL
            movzx EAX,BYTE PTR [R15-2]
            or BYTE PTR [RBP+2],AL
            movzx EAX,BYTE PTR [R15-1]
            or BYTE PTR [RBP+3],AL
.L_43fa84:

            mov R13D,R12D
            and R13W,1024
            jne .L_43faa8

            test R14W,R14W
            je .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+6],AL
.L_43faa8:

            mov EAX,R12D
            and AX,768
            cmp AX,512
            je .L_43fc40

            cmp AX,768
            je .L_43fbb0

            cmp AX,256
            je .L_43fc50

            test R14W,R14W
            je .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+7],AL
.L_43fae6:

            mov EAX,R12D
            and EAX,48
            cmp AX,16
            je .L_43fbc4
.L_43faf6:

            jbe .L_43fcd8

            cmp AX,32
            jne .L_43fc60

            cmp R14W,1
            jbe .L_43fcc8

            mov ESI,4294967039
            add R15,2
            sub R14D,2
            mov WORD PTR [RBP+19],SI
            movzx EAX,WORD PTR [R15-2]
            test R12B,64
            mov WORD PTR [RBP+22],AX
            je .L_43fc83
.L_43fb35:

            cmp BYTE PTR [RSP+39],0
            je .L_43fcc8

            mov RDI,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RBP+8]
            call .L_43ebd0

            mov EAX,R12D
            and EAX,3
            test R12B,8
            je .L_43fc9c
.L_43fb5e:

            and R12D,4
            mov BYTE PTR [RBP+24],255
            jne .L_43fd00

            cmp AX,2
            je .L_43fe70

            cmp AX,3
            je .L_43fed0

            cmp AX,1
            je .L_43fea0
.L_43fb8a:

            cmp R14W,15
            jbe .L_43fcc8

            movdqu XMM0,XMMWORD PTR [R15]
            sub R14D,16
            add R15,16
            movups XMMWORD PTR [RBP+24],XMM0
            jmp .L_43fd45
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43fbb0:

            mov EAX,R12D
            mov BYTE PTR [RBP+7],255
            and EAX,48
            cmp AX,16
            jne .L_43faf6
.L_43fbc4:

            cmp R14W,7
            jbe .L_43fcc8

            lea RDI,QWORD PTR [RBP+8]
            mov RSI,R15
            sub R14D,8
            add R15,8
            call .L_4101c0

            jmp .L_43fc79
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43fbf0:

            lea R13,QWORD PTR [RAX+7520]
            lea RAX,QWORD PTR [RSP+64]
            xor ESI,ESI
            lea R15,QWORD PTR [RBX+2]
            mov RDX,RAX
            mov RDI,R13
            mov QWORD PTR [RSP+8],RAX
            call .L_4282b0

            lea RAX,QWORD PTR [RSP+80]
            xor ESI,ESI
            mov RDI,R13
            mov RDX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_4282b0

            mov BYTE PTR [RSP+38],1
            mov BYTE PTR [RSP+39],1
            jmp .L_43f9e1
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43fc40:

            mov BYTE PTR [RBP+7],64
            jmp .L_43fae6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43fc50:

            mov BYTE PTR [RBP+7],1
            jmp .L_43fae6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43fc60:

            cmp AX,48
            jne .L_43fc79

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RBP+8]
            call .L_43ecd0
.L_43fc79:

            test R12B,64
            jne .L_43fb35
.L_43fc83:

            mov ECX,4294934782
            mov WORD PTR [RBP+8],CX
.L_43fc8c:

            mov EAX,R12D
            and EAX,3
            test R12B,8
            jne .L_43fb5e
.L_43fc9c:

            cmp AX,2
            je .L_43fe00

            cmp AX,3
            je .L_43fe30

            cmp AX,1
            je .L_43fda8

            and R12D,4
            je .L_43fb8a

            nop
            nop
            nop
            nop
.L_43fcc8:

            mov EAX,4294967295
            jmp .L_43fd80
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43fcd8:

            test AX,AX
            jne .L_43fc79

            test R12B,64
            jne .L_43fc8c

            cmp R14W,15
            jbe .L_43fcc8

            movdqu XMM0,XMMWORD PTR [R15]
            sub R14D,16
            add R15,16
            movups XMMWORD PTR [RBP+8],XMM0
            jmp .L_43fc8c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43fd00:

            test AX,AX
            jne .L_43fcc8

            cmp R14W,5
            jbe .L_43fcc8

            cmp BYTE PTR [RSP+38],0
            je .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,6
            add R15,6
            mov BYTE PTR [RBP+25],AL
            movzx EAX,BYTE PTR [R15-5]
            mov BYTE PTR [RBP+26],AL
            movzx EAX,BYTE PTR [RSP+88]
            mov BYTE PTR [RBP+27],AL
            mov RAX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RBP+28],RAX
            mov EAX,DWORD PTR [R15-4]
            mov DWORD PTR [RBP+36],EAX
.L_43fd45:

            test R13W,R13W
            je .L_43fd7b

            test R14W,R14W
            je .L_43fcc8

            movzx EDI,BYTE PTR [R15]
            mov EAX,EDI
            and EAX,4294967280
            cmp AL,224
            je .L_43fe50

            and EDI,4294967288
            cmp DIL,240
            jne .L_43fcc8

            mov EAX,17
.L_43fd78:

            mov BYTE PTR [RBP+6],AL
.L_43fd7b:

            mov EAX,R15D
            sub EAX,EBX
.L_43fd80:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43fef2

            add RSP,120
.L_43fd98:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43fda8:

            cmp R14W,7
            jbe .L_43fcc8

            lea RDI,QWORD PTR [RBP+24]
            mov RSI,R15
            sub R14D,8
            add R15,8
            call .L_4101c0
.L_43fdc7:

            and R12D,4
            je .L_43fdf0

            cmp BYTE PTR [RSP+38],0
            je .L_43fcc8

            mov RDI,QWORD PTR [RSP+16]
            lea RSI,QWORD PTR [RBP+24]
            call .L_43ebd0

            jmp .L_43fd45
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43fdf0:

            mov EAX,4294934782
            mov WORD PTR [RBP+24],AX
            jmp .L_43fd45
          .byte 0x66
          .byte 0x90
.L_43fe00:

            cmp R14W,1
            jbe .L_43fcc8

            mov EDX,4294967039
            add R15,2
            sub R14D,2
            mov WORD PTR [RBP+35],DX
            movzx EAX,WORD PTR [R15-2]
            mov WORD PTR [RBP+38],AX
            jmp .L_43fdc7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43fe30:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+40]
            lea RDX,QWORD PTR [RBP+24]
            call .L_43ecd0

            test EAX,EAX
            je .L_43fdc7

            jmp .L_43fcc8
.L_43fe50:

            lea RSI,QWORD PTR [RSP+60]
            call .L_43eb50

            test EAX,EAX
            jne .L_43fcc8

            movzx EAX,BYTE PTR [RSP+60]
            jmp .L_43fd78
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43fe70:

            cmp R14W,3
            jbe .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,4
            add R15,4
            mov BYTE PTR [RBP+25],AL
            movzx EAX,WORD PTR [R15-3]
            mov WORD PTR [RBP+37],AX
            movzx EAX,BYTE PTR [R15-1]
            mov BYTE PTR [RBP+39],AL
            jmp .L_43fd45
.L_43fea0:

            cmp R14W,5
            jbe .L_43fcc8

            movzx EAX,BYTE PTR [R15]
            sub R14D,6
            add R15,6
            mov BYTE PTR [RBP+25],AL
            mov EAX,DWORD PTR [R15-5]
            mov DWORD PTR [RBP+35],EAX
            movzx EAX,BYTE PTR [R15-1]
            mov BYTE PTR [RBP+39],AL
            jmp .L_43fd45
          .byte 0x66
          .byte 0x90
.L_43fed0:

            test R14W,R14W
            je .L_43fcc8

            mov BYTE PTR [RBP+25],2
            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+39],AL
            jmp .L_43fd45
.L_43fef2:

            call __stack_chk_fail@PLT
.L_43fef7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ff00:

            push R15
            push R14
            xor EDI,EDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_43ff10:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test CX,CX
            movzx EAX,BYTE PTR [RDX]
            mov WORD PTR [RSP+15],DI
            je .L_4400e0

            test AL,1
            mov R12,RDX
            mov R13,RSI
            lea EDX,DWORD PTR [RCX-1]
            jne .L_440068

            cmp DX,1
            jbe .L_4400e0

            movzx EAX,BYTE PTR [R12+1]
            sub ECX,3
            lea RBP,QWORD PTR [R12+3]
            mov BYTE PTR [RSP+22],AL
            movzx EAX,BYTE PTR [R12+2]
            cmp AX,CX
            mov EBX,EAX
            ja .L_4400e0

            movzx R14D,AL
.L_43ff73:

            lea RAX,QWORD PTR [R14+9]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,R13
            shr RAX,3
            sub EAX,1
            mov BYTE PTR [RSP+23],AL
            call .L_403d80

            test EAX,EAX
            jne .L_4400e0

            mov ESI,2
            mov RDI,R13
            movzx R15D,BL
            call .L_403530

            mov EDX,R15D
            mov RSI,RBP
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_4400e0

            add EBX,2
            mov ESI,R15D
            mov RDI,R13
            call .L_403530

            and EBX,7
            mov EDX,8
            add RBP,R14
            sub EDX,EBX
            cmp DL,8
            je .L_44003d

            cmp DL,1
            je .L_4400b8

            mov EAX,6
            movzx R14D,DL
            movzx EDX,DL
            sub EAX,EBX
            lea RBX,QWORD PTR [RSP+15]
            sub RDX,2
            xor ESI,ESI
            mov ECX,5
            mov BYTE PTR [RSP+15],1
            lea RDI,QWORD PTR [RBX+2]
            mov BYTE PTR [RSP+16],AL
            call __memset_chk@PLT

            mov EDX,R14D
            mov RSI,RBX
            mov RDI,R13
            call .L_403d80

            test EAX,EAX
            jne .L_4400e0
.L_440032:

            mov ESI,R14D
            mov RDI,R13
            call .L_403530
.L_44003d:

            mov EAX,EBP
            sub EAX,R12D
.L_440042:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_440105

            add RSP,40
.L_44005a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440068:

            test DX,DX
            je .L_4400e0

            movzx EAX,BYTE PTR [R12+1]
            sub ECX,2
            lea RBP,QWORD PTR [R12+2]
            cmp AX,CX
            mov EBX,EAX
            ja .L_4400e0

            movzx R14D,AL
            movzx EDI,BYTE PTR [R12+R14*1+2]
            mov EAX,EDI
            and EAX,4294967280
            cmp AL,224
            je .L_4400f0

            and EDI,4294967288
            cmp DIL,240
            jne .L_4400e0

            mov DWORD PTR [RSP+8],17
            mov EAX,17
.L_4400ab:

            mov BYTE PTR [RSP+22],AL
            jmp .L_43ff73
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4400b8:

            lea RSI,QWORD PTR [RSP+7]
            mov EDX,1
            mov RDI,R13
            mov BYTE PTR [RSP+7],0
            call .L_403d80

            test EAX,EAX
            jne .L_4400e0

            mov R14D,1
            jmp .L_440032
          .byte 0x66
          .byte 0x90
.L_4400e0:

            mov EAX,4294967295
            jmp .L_440042
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4400f0:

            lea RSI,QWORD PTR [RSP+8]
            call .L_43eb50

            test EAX,EAX
            jne .L_4400e0

            movzx EAX,BYTE PTR [RSP+8]
            jmp .L_4400ab
.L_440105:

            call __stack_chk_fail@PLT
.L_44010a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_440110:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_440118:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test CX,CX
            je .L_440308

            mov RBP,RDX
            movzx EDX,BYTE PTR [RDX]
            mov R12,RSI
            mov QWORD PTR [RSP],0
            lea ESI,DWORD PTR [RCX-1]
            mov EAX,EDX
            and EAX,3
            cmp AL,2
            je .L_4402c8

            cmp AL,3
            je .L_440248

            cmp AL,1
            je .L_440288

            cmp SI,3
            jbe .L_440308

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+5]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+2]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+3]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+4]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-5]
.L_4401a2:

            and EDX,4
            jne .L_440308

            cmp AX,1
            jbe .L_440308

            movzx EDX,BYTE PTR [RBX]
            add RBX,2
            mov ESI,EDX
            movzx EDX,BYTE PTR [RBX-1]
            shl ESI,8
            or EDX,ESI
            rol DX,8
            test R8W,R8W
            mov WORD PTR [RSP+6],DX
            jne .L_440230

            mov RAX,RBX
            add ECX,8
            sub RAX,RBP
            sub ECX,EAX
            rol CX,8
            mov WORD PTR [RSP+4],CX
.L_4401ea:

            mov RSI,RSP
            mov EDX,8
            mov RDI,R12
            call .L_403d80

            test EAX,EAX
            jne .L_440308

            mov ESI,8
            mov RDI,R12
            call .L_403530

            mov EAX,EBX
            sub EAX,EBP
.L_440213:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_440312

            add RSP,16
.L_44022b:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_440230:

            sub R8W,WORD PTR [R12+60]
            rol R8W,8
            mov WORD PTR [RSP+4],R8W
            jmp .L_4401ea
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440248:

            test SI,SI
            je .L_440308

            movzx ESI,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+2]
            mov EAX,ESI
            sar ESI,4
            and EAX,15
            or SI,61616
            or AX,61616
            rol SI,8
            rol AX,8
            mov WORD PTR [RSP],SI
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-2]
            jmp .L_4401a2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440288:

            cmp SI,2
            jbe .L_440308

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+4]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+2]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+3]
            or AX,61440
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-4]
            jmp .L_4401a2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4402c8:

            cmp SI,2
            jbe .L_440308

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+4]
            or AX,61440
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+2]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+3]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-4]
            jmp .L_4401a2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440308:

            mov EAX,4294967295
            jmp .L_440213
.L_440312:

            call __stack_chk_fail@PLT
.L_440317:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440320:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_44032e:

            mov EAX,DWORD PTR [RSP+176]
            mov QWORD PTR [RSP+24],RDX
            mov QWORD PTR [RSP+32],RCX
            mov DWORD PTR [RSP+40],R9D
            mov DWORD PTR [RSP+12],EAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RSI+60]
            cmp R9W,1
            mov WORD PTR [RSP+46],AX
            jbe .L_4404ef

            movzx EBX,WORD PTR [R8]
            mov R13D,DWORD PTR [RSP+40]
            lea R10,QWORD PTR [RSP+64]
            mov RCX,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+24]
            mov RBP,RSI
            mov RSI,R10
            mov R12,RDI
            mov R14,R8
            movzx R9D,R13W
            mov QWORD PTR [RSP+16],R10
            rol BX,8
            and BX,1024
            call .L_43f910

            test EAX,EAX
            js .L_4404ef

            mov R10,QWORD PTR [RSP+16]
            movsxd R9,EAX
            mov EDX,40
            mov RDI,RBP
            sub R13D,EAX
            lea R15,QWORD PTR [R14+R9*1]
            mov RSI,R10
            call .L_403d80

            test EAX,EAX
            jne .L_4404ef

            mov ESI,40
            mov RDI,RBP
            call .L_403530

            test EAX,EAX
            jne .L_4404ef

            test BX,BX
            je .L_440454

            test R13W,R13W
            je .L_4404ef

            mov QWORD PTR [RSP+16],R14
            mov R14,RBP
            nop
            nop
            nop
            nop
            nop
            nop
.L_440408:

            movzx EBX,BYTE PTR [R15]
            mov EAX,EBX
            and EAX,4294967280
            cmp AL,224
            je .L_4404b0

            and EBX,4294967288
            mov RBP,R14
            mov R14,QWORD PTR [RSP+16]
            cmp BL,240
            jne .L_4404ef

            movzx R8D,WORD PTR [RSP+12]
            movzx EBX,R13W
            mov RDX,R15
            mov ECX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_440110

            cmp EAX,EBX
            ja .L_4404ef
.L_44044f:

            cdqe 
            add R15,RAX
.L_440454:

            mov EAX,DWORD PTR [RSP+12]
            mov RBX,R15
            sub RBX,R14
            test AX,AX
            jne .L_440568

            movzx EAX,WORD PTR [RBP+60]
            movzx ECX,WORD PTR [RSP+40]
            lea EAX,DWORD PTR [RAX+RCX*1-40]
            sub AX,WORD PTR [RSP+46]
            sub EAX,EBX
            rol AX,8
            mov WORD PTR [RSP+62],AX
.L_440484:

            movzx ESI,WORD PTR [RSP+46]
            lea RCX,QWORD PTR [RSP+62]
            mov EDX,2
            mov RDI,RBP
            add ESI,4
            movzx ESI,SI
            call .L_403b10

            movzx EAX,BX
            jmp .L_4404f4
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4404b0:

            mov EAX,EBX
            and EAX,14
            cmp AL,14
            je .L_440520

            movzx EBP,R13W
            mov RDX,R15
            mov RSI,R14
            mov ECX,EBP
            mov RDI,R12
            and EBX,1
            call .L_43ff00

            cmp EBP,EAX
            jb .L_4404ef

            movsxd RDX,EAX
            sub R13D,EAX
            add R15,RDX
            test BL,BL
            je .L_440585

            test R13W,R13W
            jne .L_440408
.L_4404ef:

            mov EAX,4294967295
.L_4404f4:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_440592

            add RSP,120
.L_44050c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440520:

            sub RSP,8
            mov RBP,R14
            mov R14,QWORD PTR [RSP+24]
            movzx EAX,WORD PTR [RSP+20]
            lea R8D,DWORD PTR [R13-1]
            add R15,1
            mov RSI,RBP
            mov RDI,R12
            movzx EBX,R8W
            mov R8,R15
            mov R9D,EBX
            push RAX
            mov RCX,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RSP+40]
            call .L_440320

            cmp EAX,EBX
            pop RDX
            pop RCX
            jbe .L_44044f

            jmp .L_4404ef
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440568:

            mov R13D,EAX
            sub R13D,40
            sub R13W,WORD PTR [RSP+46]
            rol R13W,8
            mov WORD PTR [RSP+62],R13W
            jmp .L_440484
.L_440585:

            mov RBP,R14
            mov R14,QWORD PTR [RSP+16]
            jmp .L_440454
.L_440592:

            call __stack_chk_fail@PLT
.L_440597:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4405a0:

            test DL,DL
            je .L_4405c0

            movzx EAX,BYTE PTR [RSI]
            lea ECX,DWORD PTR [RDX-1]
            mov BYTE PTR [RDI],AL
            and EAX,15
            cmp AL,15
            je .L_4405d0

            lea RAX,QWORD PTR [RSI+1]
            mov BYTE PTR [RDI+1],0
.L_4405bb:

            cmp CL,3
            ja .L_4405e8
.L_4405c0:

            mov EAX,1
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4405d0:

            test CL,CL
            je .L_4405c0

            movzx ECX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+2]
            mov BYTE PTR [RDI+1],CL
            lea ECX,DWORD PTR [RDX-2]
            jmp .L_4405bb
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4405e8:

            mov EAX,DWORD PTR [RAX]
            mov DWORD PTR [RDI+2],EAX
            xor EAX,EAX
            ret 
.L_4405f0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RCX,RDI
            xor ESI,ESI
            mov RBX,RDI
            sub RSP,8
            mov EDX,1
            mov RDI,RBP
            call .L_4038b0

            cmp AX,1
            je .L_440620
.L_440614:

            add RSP,8
            mov EAX,1
            pop RBX
            pop RBP
            ret 
.L_440620:

            movzx EAX,BYTE PTR [RBX]
            and EAX,15
            cmp AL,15
            je .L_440658

            mov BYTE PTR [RBX+1],0
            mov ESI,1
.L_440633:

            lea RCX,QWORD PTR [RBX+2]
            mov RDI,RBP
            mov EDX,4
            call .L_4038b0

            cmp AX,4
            setne AL
            add RSP,8
            movzx EAX,AL
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440658:

            lea RCX,QWORD PTR [RBX+1]
            mov ESI,1
            mov EDX,1
            mov RDI,RBP
            call .L_4038b0

            cmp AX,1
            mov ESI,2
            jne .L_440614

            jmp .L_440633
.L_44067b:

            nop
            nop
            nop
            nop
            nop
.L_440680:

            cmp DL,3
            jbe .L_4406a8

            mov EAX,DWORD PTR [RSI]
            mov ECX,EAX
            mov DWORD PTR [RDI],EAX
            xor EAX,EAX
            rol CX,8
            and CH,32
            je .L_4406a2

            cmp DL,4
            je .L_4406a8

            movzx EDX,BYTE PTR [RSI+4]
            mov BYTE PTR [RDI+4],DL
.L_4406a2:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4406a8:

            mov EAX,6
            ret 
.L_4406ae:
          .byte 0x66
          .byte 0x90
.L_4406b0:
          .long .L_43eb78-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43eb88-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43eb98-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43eba8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43ebb8-.L_4406b0
          .long .L_43eb68-.L_4406b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4406f0:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            lea RDI,QWORD PTR [RAX+264]
            add RSP,8
            jmp .L_4138d0
.L_440711:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440720:

            push RBP
            lea RAX,QWORD PTR [RIP+.L_4428b0]
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_440733:

            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_4406f0]
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_441be0]
            mov DWORD PTR [RDI+56],0
            mov DWORD PTR [RDI+80],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_441f10]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_442040]
            mov QWORD PTR [RDI+48],RAX
            lea RAX,QWORD PTR [RDI+48]
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_442180]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RDI+72]
            lea RDI,QWORD PTR [RDI+96]
            mov QWORD PTR [RDI-8],RAX
            call .L_4047f0

            lea RDI,QWORD PTR [RBX+128]
            call .L_404490

            lea RDX,QWORD PTR [RIP+.L_441120]
            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+192]
            mov RCX,RBX
            mov RSI,RBP
            mov WORD PTR [RBX+138],AX
            mov QWORD PTR [RBX+144],0
            mov BYTE PTR [RBX+152],0
            mov BYTE PTR [RBX+153],4
            mov DWORD PTR [RBX+164],0
            mov DWORD PTR [RBX+176],0
            mov DWORD PTR [RBX+180],0
            mov BYTE PTR [RBX+184],0
            mov BYTE PTR [RBX+185],0
            call .L_4051f0

            movabs RAX,-281474976710656
            lea RDI,QWORD PTR [RBX+240]
            mov BYTE PTR [RBX+208],0
            mov QWORD PTR [RBX+212],RAX
            mov BYTE PTR [RBX+220],0
            call .L_404490

            lea RDI,QWORD PTR [RBX+248]
            mov RSI,RBP
            call .L_42d1d0

            xor EDX,EDX
            lea RDI,QWORD PTR [RBX+264]
            mov RSI,RBP
            mov WORD PTR [RBX+256],DX
            mov DWORD PTR [RBX+252],0
            mov BYTE PTR [RBX+258],0
            call .L_413520

            call .L_401460

            mov RDI,RBX
            mov WORD PTR [RBX+136],AX
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            mov RSI,RBX
            call .L_405d80

            mov QWORD PTR [RBX+224],0
            mov QWORD PTR [RBX+232],0
            add RSP,8
.L_4408b7:

            pop RBX
            pop RBP
            ret 
.L_4408ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4408c0:

            cmp BYTE PTR [RDI+208],0
            je .L_4408d0

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4408d0:

            push RBX
            mov RBX,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            mov ESI,1
            call .L_407c60

            mov BYTE PTR [RBX+208],1
            xor EAX,EAX
            pop RBX
            ret 
.L_4408f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440900:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_433510

            cmp BYTE PTR [RBP+208],0
            jne .L_440930

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440930:

            lea RDI,QWORD PTR [RBP+264]
            mov RBX,RAX
            lea R13,QWORD PTR [RBX+1560]
            call .L_413560

            lea RDI,QWORD PTR [RBP+72]
            call .L_433690

            cmp BYTE PTR [RBP+220],0
            jne .L_4409e8
.L_44095c:

            lea R12,QWORD PTR [RBP+96]
            jmp .L_44097b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440968:

            mov RDI,R12
            mov RSI,RAX
            call .L_404a80

            mov RDI,RBX
            call .L_403400
.L_44097b:

            mov RDI,R12
            call .L_404860

            test RAX,RAX
            mov RBX,RAX
            jne .L_440968

            lea R12,QWORD PTR [RBP+128]
            jmp .L_4409ab
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_440998:

            mov RDI,R12
            mov RSI,RAX
            call .L_404690

            mov RDI,RBX
            call .L_403400
.L_4409ab:

            mov RDI,R12
            call .L_4045c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_440998

            mov BYTE PTR [RBP+208],0
            mov QWORD PTR [RBP+144],0
            mov RDI,R13
            xor ESI,ESI
            call .L_407c60

            add RSP,8
.L_4409db:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4409e8:

            movzx ESI,BYTE PTR [RBP+217]
            mov RDI,R13
            call .L_406270

            lea RDI,QWORD PTR [RBX+2568]
            mov BYTE PTR [RBP+220],0
            call .L_416490

            jmp .L_44095c
.L_440a0f:

            nop
.L_440a10:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,24
.L_440a20:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_433510

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41e330

            cmp BYTE PTR [RSP+7],0
            je .L_440a7e

            mov R13,RAX
            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
            nop
.L_440a58:

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            mov RAX,RDX
            add EBX,1
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [R13+RAX*8]
            call .L_414b30

            cmp BYTE PTR [RSP+7],BL
            ja .L_440a58
.L_440a7e:

            cmp QWORD PTR [RBP+144],R12
            jne .L_440a92

            mov QWORD PTR [RBP+144],0
.L_440a92:

            lea RDI,QWORD PTR [RBP+96]
            mov RSI,R12
            call .L_404a80

            mov RDI,R12
            call .L_403400

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_440ac1

            add RSP,24
.L_440aba:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_440ac1:

            call __stack_chk_fail@PLT
.L_440ac6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440ad0:

            push RBX
.L_440ad1:

            mov RBX,RDI
            call .L_433510

            mov RDI,RAX
            xor EAX,EAX
            cmp BYTE PTR [RBX+220],0
            jne .L_440b4b

            mov ECX,DWORD PTR [RBX+212]
            mov BYTE PTR [RBX+216],11
            shr ECX,11
            mov DWORD PTR [RBX+212],ECX
            movzx EAX,BYTE PTR [RDI+1668]
            mov BYTE PTR [RBX+217],AL
            movzx EAX,WORD PTR [RDI+1666]
            mov WORD PTR [RBX+218],AX
            jmp .L_440b3d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440b20:

            movzx EAX,BYTE PTR [RBX+216]
            shr ECX,1
            mov DWORD PTR [RBX+212],ECX
            lea EDX,DWORD PTR [RAX+1]
            cmp DL,26
            mov BYTE PTR [RBX+216],DL
            ja .L_440b50
.L_440b3d:

            test CL,1
            je .L_440b20

            mov BYTE PTR [RBX+220],1
            xor EAX,EAX
.L_440b4b:

            pop RBX
.L_440b4c:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440b50:

            add RDI,2568
            call .L_416490

            mov EAX,2
            pop RBX
            ret 
.L_440b63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440b70:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_440b78:

            mov RBX,RDI
            call .L_433510

            lea R13,QWORD PTR [RAX+2568]
            mov R12,RAX
            mov RDI,R13
            call .L_41c0d0

            test RAX,RAX
            je .L_440c40

            movzx EDX,BYTE PTR [RAX+26]
            mov RBP,RAX
            and EDX,7
            lea EAX,DWORD PTR [RDX-6]
            cmp AL,1
            jbe .L_440bb6

            cmp DL,1
            mov EAX,2
            jne .L_440bf6
.L_440bb6:

            movzx R14D,WORD PTR [R12+1664]
            cmp R14W,-2
            jne .L_440c00
.L_440bc6:

            mov RAX,QWORD PTR [R12+1656]
            mov DWORD PTR [RBX+164],2
            mov QWORD PTR [RBX+156],RAX
            mov RAX,QWORD PTR [RBP]
            mov DWORD PTR [RBX+176],2
            mov QWORD PTR [RBX+168],RAX
            xor EAX,EAX
.L_440bf6:

            pop RBX
.L_440bf7:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_440c00:

            mov RDI,R13
            call .L_41c0c0

            cmp RBP,RAX
            jne .L_440bc6

            mov WORD PTR [RBX+156],R14W
            mov DWORD PTR [RBX+164],1
            movzx EAX,WORD PTR [RBP+24]
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_440bf6
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440c40:

            pop RBX
.L_440c41:

            mov EAX,2
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_440c4e:

            nop
            nop
.L_440c50:

            sub RSP,8
            call .L_433510

            movzx EAX,BYTE PTR [RAX+1564]
            add RSP,8
            shr AL,6
            and EAX,1
            ret 
.L_440c6b:

            nop
            nop
            nop
            nop
            nop
.L_440c70:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            call .L_433510

            lea RDI,QWORD PTR [RAX+1560]
            movzx ESI,R12B
            mov RBX,RAX
            call .L_407c60

            test R12B,R12B
            lea RDI,QWORD PTR [RBP+264]
            jne .L_440cb8

            call .L_4136f0

            lea RDI,QWORD PTR [RBX+11264]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42e7c0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440cb8:

            call .L_413560

            lea RDI,QWORD PTR [RBX+11264]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42e750
.L_440ccd:

            nop
            nop
            nop
.L_440cd0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            call .L_433510

            mov RSI,RBX
            mov RBP,RAX
            mov RDI,R12
            call .L_4101f0

            lea RSI,QWORD PTR [RBP+1656]
            mov RDI,RBX
            call .L_408db0

            test AL,AL
            je .L_440d11

            movzx EAX,WORD PTR [RBP+1664]
            mov DWORD PTR [RBX+8],1
            mov WORD PTR [RBX],AX
.L_440d11:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_440d18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440d20:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_440d27:

            mov RDI,RSI
            mov RBX,RSI
            mov RBP,RDX
            call .L_40ff70

            test AL,AL
            jne .L_440da8

            cmp WORD PTR [RBX],33022
            jne .L_440d70

            cmp WORD PTR [RBX+2],0
            jne .L_440d70

            cmp WORD PTR [RBX+4],0
            jne .L_440d70

            cmp WORD PTR [RBX+6],0
            jne .L_440d70

            cmp WORD PTR [RBX+8],0
            jne .L_440d70

            cmp WORD PTR [RBX+10],65280
            jne .L_440d70

            cmp WORD PTR [RBX+12],254
            je .L_440d8b

            nop
            nop
            nop
            nop
.L_440d70:

            mov RDI,R12
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBX
            call .L_41a720

            test AL,AL
            je .L_440dc0
.L_440d8b:

            movzx EAX,WORD PTR [RBX+14]
            mov DWORD PTR [RBP+8],1
            rol AX,8
            mov WORD PTR [RBP],AX
            xor EAX,EAX
            pop RBX
.L_440da1:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440da8:

            mov EAX,4294967295
            mov DWORD PTR [RBP+8],1
            mov WORD PTR [RBP],AX
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_440dc0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_4101f0

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_440dd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440de0:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,48
.L_440df2:

            mov RBP,RSP
            lea R12,QWORD PTR [RBP+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_433510

            xor ESI,ESI
            mov RCX,RBP
            mov EDX,40
            mov RDI,R13
            mov BYTE PTR [RBX+184],0
            mov R14,RAX
            call .L_4038b0

            mov RDI,R12
            call .L_40ff70

            test AL,AL
            jne .L_440e88

            lea RDX,QWORD PTR [RBX+156]
            mov RSI,R12
            mov RDI,RBX
            lea R12,QWORD PTR [RBP+24]
            call .L_440cd0

            cmp DWORD PTR [R14+2580],1
            mov RDI,R12
            ja .L_440eb0

            call .L_40ff50

            test AL,AL
            jne .L_440e6e

            mov RDI,R12
            call .L_410270

            test AL,AL
            je .L_440e88
.L_440e6e:

            lea RDX,QWORD PTR [RBX+168]
            lea RSI,QWORD PTR [RBP+24]
            mov RDI,RBX
            call .L_440d20

            xor EAX,EAX
            jmp .L_440e8d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440e88:

            mov EAX,2
.L_440e8d:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_440f50

            add RSP,48
.L_440ea5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_440eb0:

            call .L_40ff70

            test AL,AL
            je .L_440ee0

            cmp DWORD PTR [R14+2580],2
            je .L_440f28
.L_440ec3:

            mov EAX,4294967295
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_440e8d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440ee0:

            mov RDI,R12
            call .L_40ff50

            test AL,AL
            jne .L_440e6e

            movzx EAX,BYTE PTR [R14+2624]
            and EAX,10
            cmp AL,10
            je .L_440f40
.L_440efb:

            lea RDI,QWORD PTR [R14+2568]
            mov ESI,65535
            call .L_41ede0

            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_440e8d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_440f28:

            mov RDI,R13
            call .L_4035c0

            test AL,AL
            jne .L_440ec3

            jmp .L_440efb
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440f40:

            mov RSI,RBP
            mov RDI,RBX
            call .L_415f00

            jmp .L_440e8d
.L_440f50:

            call __stack_chk_fail@PLT
.L_440f55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440f60:

            push R14
            push R13
            lea R13,QWORD PTR [RDI+96]
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_440f6f:

            mov RDI,R13
            call .L_404860

            test RAX,RAX
            je .L_441010

            lea R14,QWORD PTR [R12+240]
            mov RBX,RAX
.L_440f8b:

            mov RDI,RBX
            call .L_403410

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+78]
            test AL,64
            je .L_441004

            and EAX,3
            cmp AL,1
            je .L_441078

            jb .L_441048

            cmp AL,2
            jne .L_441020

            mov RDI,R12
            call .L_440b70
.L_440fbb:

            cmp EAX,3
            ja .L_440fe0

            cmp EAX,2
            jae .L_441020

            test EAX,EAX
            jne .L_441088

            mov RAX,RBX
            pop RBX
.L_440fd1:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440fe0:

            cmp EAX,9
            jne .L_441088

            mov RSI,RBX
            mov RDI,R13
            call .L_404a80

            mov EDX,1
            mov RSI,RBX
            mov RDI,R14
            call .L_4045d0
.L_441004:

            test RBP,RBP
            mov RBX,RBP
            jne .L_440f8b
.L_441010:

            xor EBX,EBX
            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_441020:

            mov RSI,RBX
            mov RDI,R13
            call .L_404a80

            mov RDI,RBX
            mov RBX,RBP
            call .L_403400

            test RBP,RBP
            jne .L_440f8b

            jmp .L_441010
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441048:

            mov RSI,RBX
            mov RDI,R12
            call .L_440de0

            movzx EDX,BYTE PTR [RBX+78]
            shr DL,2
            and EDX,15
            cmp DL,2
            jne .L_440fbb

            mov RDI,R12
            call .L_440ad0

            jmp .L_440fbb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441078:

            mov RSI,RBX
            mov RDI,R12
            call .L_4156b0

            jmp .L_440fbb
.L_441088:

            lea RCX,QWORD PTR [RIP+.L_442a40]
            lea RSI,QWORD PTR [RIP+.L_4428d2]
            lea RDI,QWORD PTR [RIP+.L_4428ec]
            mov EDX,298
            call __assert_fail@PLT
.L_4410a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4410b0:

            cmp BYTE PTR [RDI+185],0
            je .L_4410c0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4410c0:

            push RBX
            mov BYTE PTR [RDI+152],0
            mov RBX,RDI
            call .L_415190

            test EAX,EAX
            jne .L_4410e0
.L_4410d4:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4410e0:

            mov RDI,RBX
            call .L_440f60

            test RAX,RAX
            mov QWORD PTR [RBX+144],RAX
            je .L_4410d4

            cmp WORD PTR [RAX+60],0
            jne .L_4410ff

            or BYTE PTR [RAX+79],8
.L_4410ff:

            mov RDI,RBX
            mov BYTE PTR [RBX+153],4
            call .L_433510

            lea RSI,QWORD PTR [RBX+24]
            lea RDI,QWORD PTR [RAX+1560]
            pop RBX
            jmp .L_406150
.L_44111f:

            nop
.L_441120:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_4410b0
.L_44113d:

            nop
            nop
            nop
.L_441140:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
.L_441153:

            call .L_433510

            cmp DWORD PTR [RBX+164],1
            mov R13,RAX
            mov ESI,56427
            mov EAX,39019
            mov EDX,13
            mov RDI,RBP
            cmove ESI,EAX
            call .L_409800

            movzx ESI,WORD PTR [R13+1666]
            mov RDI,RBP
            call .L_408f70

            lea RSI,QWORD PTR [RBX+156]
            mov RDI,RBP
            call .L_409400

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RBP
            call .L_4090f0

            mov RDI,RBP
            mov ESI,4
            call .L_409b00

            movzx EAX,WORD PTR [R12+58]
            mov WORD PTR [RBX+138],AX
            add RSP,8
.L_4411c8:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4411d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4411e0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,72
.L_4411f7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBX+184],0
            mov R12,RAX
            je .L_441440

            movzx EAX,WORD PTR [RBX+180]
            cmp DWORD PTR [RBX+176],1
            mov DWORD PTR [RSP+52],1
            mov DWORD PTR [RSP+40],1
            mov WORD PTR [RSP+44],AX
            movzx EAX,WORD PTR [RBX+182]
            mov WORD PTR [RSP+32],AX
            mov EAX,DWORD PTR [RBX+164]
            je .L_44147f
.L_441257:

            cmp EAX,1
            mov ESI,4294941729
            mov EAX,4294958113
            cmovne ESI,EAX
.L_441267:

            movzx ECX,BYTE PTR [RBP+78]
            xor EDX,EDX
            mov EAX,ECX
            shr AL,2
            and EAX,15
            test CL,CL
            jns .L_441293

            or ESI,8
            cmp AL,1
            mov EDX,21
            je .L_441293

            xor EDX,EDX
            cmp AL,4
            setne DL
            lea EDX,DWORD PTR [RDX*8+5]
.L_441293:

            cmp AL,1
            movzx ECX,WORD PTR [R12+1666]
            je .L_4414b8

            jb .L_4414a8

            cmp AL,3
            ja .L_4414a8

            movzx R14D,WORD PTR [RBP+76]
            mov EAX,R14D
.L_4412ba:

            cmp AX,CX
            je .L_4414ac
.L_4412c3:

            movzx ESI,SI
            mov RDI,R13
            call .L_409800

            mov ESI,R14D
            mov RDI,R13
            xor R14D,R14D
            call .L_408f70

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,R13
            call .L_4091b0

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,R13
            call .L_4090f0

            lea RSI,QWORD PTR [RBX+156]
            mov RDI,R13
            call .L_409400

            mov RDI,R13
            call .L_409c00

            cmp BYTE PTR [RBX+184],0
            mov R15,RAX
            jne .L_441628
.L_441323:

            movzx EAX,WORD PTR [RBP+60]
            test AX,AX
            je .L_4414e0

            movzx EDX,WORD PTR [RBP+58]
            sub EDX,EAX
            mov EAX,192
            mov WORD PTR [R15],AX
            movzx ECX,WORD PTR [RBP+58]
            and CX,2047
            or CX,49152
            mov EAX,ECX
            rol AX,8
            mov WORD PTR [R15],AX
            movzx ESI,WORD PTR [RBP+62]
            rol SI,8
            mov WORD PTR [R15+2],SI
            movzx ESI,WORD PTR [RBP+60]
            test SI,SI
            je .L_441381

            mov EAX,ECX
            sar ESI,3
            or AH,32
            mov BYTE PTR [R15+4],SIL
            rol AX,8
            mov WORD PTR [R15],AX
.L_441381:

            rol AX,8
            mov RDI,R13
            mov DWORD PTR [RSP+8],EDX
            and AX,8192
            cmp AX,1
            sbb RCX,RCX
            cmp AX,1
            sbb ESI,ESI
            lea R15,QWORD PTR [R15+RCX*1+5]
            lea R14D,DWORD PTR [R14+RSI*1+5]
            call .L_409b50

            mov EDX,DWORD PTR [RSP+8]
            movzx R12D,AL
            movzx EAX,R14B
            sub R12D,EAX
            movzx ESI,WORD PTR [RBP+60]
            mov RCX,R15
            and R12D,4294967288
            mov RDI,RBP
            cmp R12W,DX
            cmova R12D,EDX
            movzx EDX,R12W
            call .L_4038b0

            lea ESI,DWORD PTR [R14+R12*1]
            mov RDI,R13
            movzx ESI,SIL
            call .L_409bc0

            add R12W,WORD PTR [RBP+60]
            mov WORD PTR [RBX+138],R12W
.L_4413f7:

            xor EAX,EAX
            cmp WORD PTR [RBP+58],R12W
            jbe .L_441415

            mov ESI,1
            mov RDI,R13
            mov DWORD PTR [RSP+8],EAX
            call .L_408f00

            mov EAX,DWORD PTR [RSP+8]
.L_441415:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_441790

            add RSP,72
.L_44142d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441440:

            mov RAX,QWORD PTR [RBX+168]
            cmp DWORD PTR [RBX+176],1
            mov QWORD PTR [RSP+32],RAX
            mov EAX,DWORD PTR [RBX+176]
            mov DWORD PTR [RSP+40],EAX
            mov RAX,QWORD PTR [RBX+156]
            mov QWORD PTR [RSP+44],RAX
            mov EAX,DWORD PTR [RBX+164]
            mov DWORD PTR [RSP+52],EAX
            mov EAX,DWORD PTR [RBX+164]
            jne .L_441257
.L_44147f:

            cmp EAX,1
            mov ESI,4294940673
            mov EAX,4294957057
            cmovne ESI,EAX
            cmp WORD PTR [RBX+168],-1
            je .L_441267

            or ESI,32
            jmp .L_441267
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4414a8:

            movzx R14D,CX
.L_4414ac:

            or ESI,64
            jmp .L_4412c3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4414b8:

            movzx EAX,BYTE PTR [RBP+76]
            mov R14D,65535
            mov BYTE PTR [R13+9],AL
            mov EAX,4294967295
            movzx ECX,WORD PTR [R12+1666]
            jmp .L_4412ba
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4414e0:

            lea RCX,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RSP+44]
            lea RDI,QWORD PTR [R12+1552]
            mov R8,R15
            mov RSI,RBP
            call .L_43f440

            test EAX,EAX
            mov DWORD PTR [RSP+8],EAX
            jle .L_441795

            add R14B,BYTE PTR [RSP+8]
            movzx R12D,WORD PTR [RBP+58]
            mov RDI,R13
            sub R12W,WORD PTR [RBP+60]
            call .L_409b50

            movzx EAX,AL
            movzx ECX,R14B
            sub EAX,ECX
            cmp R12W,AX
            jbe .L_4415d7

            cmp BYTE PTR [RBP+78],0
            jns .L_441750
.L_44153d:

            cmp WORD PTR [RBP+62],0
            jne .L_441568

            movzx EAX,WORD PTR [RBX+136]
            test AX,AX
            lea EDX,DWORD PTR [RAX+1]
            jne .L_44155d

            mov EDX,2
            mov EAX,1
.L_44155d:

            mov WORD PTR [RBX+136],DX
            mov WORD PTR [RBP+62],AX
.L_441568:

            lea R8,QWORD PTR [R15+4]
            movzx EDX,R14B
            mov RSI,R15
            mov DWORD PTR [RSP+12],ECX
            mov R12D,4294967292
            add R14D,4
            mov RDI,R8
            mov QWORD PTR [RSP],R8
            call memmove@PLT

            mov RDI,R13
            call .L_409b50

            mov ECX,DWORD PTR [RSP+12]
            movzx EAX,AL
            mov EDX,192
            mov WORD PTR [R15],DX
            mov R8,QWORD PTR [RSP]
            sub R12D,ECX
            add R12D,EAX
            movzx EAX,WORD PTR [RBP+58]
            and R12D,4294967288
            and AX,2047
            or AX,49152
            rol AX,8
            mov WORD PTR [R15],AX
            movzx EAX,WORD PTR [RBP+62]
            rol AX,8
            mov WORD PTR [R15+2],AX
            mov R15,R8
.L_4415d7:

            movsxd RCX,DWORD PTR [RSP+8]
            movzx ESI,WORD PTR [RBP+60]
            movzx EDX,R12W
            mov RDI,RBP
            add R14D,R12D
            add RCX,R15
            call .L_4038b0

            movzx ESI,R14B
            mov RDI,R13
            call .L_409bc0

            add R12W,WORD PTR [RBP+60]
            xor ESI,ESI
            mov RDI,RBP
            mov WORD PTR [RBX+138],R12W
            call .L_4035a0

            movzx R12D,WORD PTR [RBX+138]
            jmp .L_4413f7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441628:

            xor ECX,ECX
            cmp DWORD PTR [R12+2580],2
            mov DWORD PTR [RSP+26],0
            mov WORD PTR [RSP+30],CX
            movzx ESI,WORD PTR [RBX+182]
            jne .L_4416a0

            test SI,511
            setne DL
            add EDX,18
.L_441654:

            movzx EAX,WORD PTR [RBX+180]
            rol SI,8
            mov BYTE PTR [RSP+27],DL
            mov WORD PTR [RSP+30],SI
            mov BYTE PTR [R15],191
            rol AX,8
            mov WORD PTR [RSP+28],AX
.L_441675:

            movzx EAX,BYTE PTR [RSP+27]
            mov R14D,6
            mov BYTE PTR [R15+1],AL
            mov EAX,DWORD PTR [RSP+28]
            mov DWORD PTR [R15+2],EAX
            mov EAX,6
.L_441691:

            add R15,RAX
            jmp .L_441323
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4416a0:

            lea R14,QWORD PTR [R12+2568]
            mov RDI,R14
            call .L_41f080

            cmp AL,16
            mov BYTE PTR [RSP+8],AL
            movzx ESI,WORD PTR [RBX+182]
            je .L_441780

            mov RDI,R14
            call .L_41ede0

            movzx ESI,AX
            mov RDI,R14
            sar ESI,10
            call .L_41cfa0

            movzx EDX,BYTE PTR [RSP+8]
            add EAX,EDX
.L_4416e0:

            movzx ESI,WORD PTR [RBX+182]
            lea EDX,DWORD PTR [RAX+1]
            add EAX,2
            mov BYTE PTR [RSP+26],176
            test SI,511
            cmovne EDX,EAX
            cmp DL,14
            ja .L_441654

            movzx EAX,WORD PTR [RBX+180]
            or EDX,4294967216
            rol SI,8
            mov BYTE PTR [RSP+26],DL
            mov BYTE PTR [R15],DL
            and EDX,15
            mov WORD PTR [RSP+30],SI
            rol AX,8
            cmp DL,15
            mov WORD PTR [RSP+28],AX
            je .L_441675

            mov EAX,DWORD PTR [RSP+28]
            mov R14D,5
            mov DWORD PTR [R15+1],EAX
            mov EAX,5
            jmp .L_441691
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441750:

            mov RDI,RBP
            mov DWORD PTR [RSP],ECX
            call .L_4035c0

            test AL,AL
            mov ECX,DWORD PTR [RSP]
            je .L_44153d

            xor ESI,ESI
            mov RDI,RBP
            call .L_4035a0

            mov EAX,27
            jmp .L_441415
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441780:

            sar ESI,10
            mov RDI,R14
            call .L_41cfa0

            jmp .L_4416e0
.L_441790:

            call __stack_chk_fail@PLT
.L_441795:

            lea RCX,QWORD PTR [RIP+.L_4429a0]
            lea RSI,QWORD PTR [RIP+.L_4428d2]
            lea RDI,QWORD PTR [RIP+.L_4428f2]
            mov EDX,759
            call __assert_fail@PLT
.L_4417b4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4417c0:

            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,40
.L_4417d3:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            mov R12,RAX
            movzx EAX,WORD PTR [RAX+1664]
            mov DWORD PTR [RSP+20],1
            cmp AX,-2
            mov WORD PTR [RSP+12],AX
            je .L_4418b0

            cmp DWORD PTR [RBP+176],1
            mov ESI,4294940673
            mov EAX,4294941697
            cmovne ESI,EAX
.L_44181d:

            mov EAX,ESI
            mov EDX,13
            mov RDI,RBX
            or EAX,32
            test R13B,R13B
            cmovne ESI,EAX
            or ESI,72
            movzx ESI,SI
            call .L_409800

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,RBX
            call .L_408f70

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,RBX
            call .L_4091b0

            lea RSI,QWORD PTR [RBP+168]
            mov RDI,RBX
            call .L_4090f0

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBX
            call .L_409400

            xor ESI,ESI
            mov RDI,RBX
            call .L_409bc0

            xor ESI,ESI
            mov RDI,RBX
            call .L_408f00

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4418de

            add RSP,40
.L_4418a3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4418b0:

            mov RAX,QWORD PTR [R12+1656]
            cmp DWORD PTR [RBP+176],1
            mov ESI,4294958081
            mov DWORD PTR [RSP+20],2
            mov QWORD PTR [RSP+12],RAX
            mov EAX,4294957057
            cmove ESI,EAX
            jmp .L_44181d
.L_4418de:

            call __stack_chk_fail@PLT
.L_4418e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4418f0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,40
.L_441900:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBX+208],0
            je .L_441a48

            mov RSI,QWORD PTR [RBX+144]
            mov BYTE PTR [RBX+185],1
            test RSI,RSI
            je .L_441b00

            mov R12,RAX
            movzx EAX,BYTE PTR [RSI+78]
            mov EDX,EAX
            and EDX,3
            cmp DL,1
            je .L_441a50

            jb .L_441aa0

            cmp DL,2
            je .L_441af0

            cmp DL,3
            jne .L_44198c

            mov EDX,1
            mov RSI,RBP
            mov RDI,RBX
            call .L_4417c0

            mov RDX,QWORD PTR [RBX+144]
            movzx EDX,WORD PTR [RDX+58]
            mov WORD PTR [RBX+138],DX
.L_441984:

            test EAX,EAX
            jne .L_441b1c
.L_44198c:

            movzx EAX,BYTE PTR [RBX+152]
            mov DWORD PTR [RSP+20],0
            and EAX,1
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RBP+13]
            and EAX,4294967291
            or EAX,EDX
            mov BYTE PTR [RBP+13],AL
            movzx EAX,BYTE PTR [RBX+153]
            mov BYTE PTR [RBP+12],AL
            cmp BYTE PTR [RBX+152],0
            je .L_4419df

            movzx EDX,BYTE PTR [RBX+257]
            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],DL
            mov RAX,QWORD PTR [RBP]
            test BYTE PTR [RAX],8
            jne .L_441a60
.L_4419df:

            lea RBX,QWORD PTR [RSP+12]
            mov RDI,RBP
            mov RSI,RBX
            call .L_408fc0

            lea RDI,QWORD PTR [R12+2568]
            mov RSI,RBX
            call .L_41e290

            test RAX,RAX
            je .L_441a20

            test BYTE PTR [RAX+26],64
            jne .L_441a20

            movzx EAX,WORD PTR [RAX+126]
            and AX,8191
            cmp AX,1
            ja .L_441a88

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441a20:

            xor EAX,EAX
.L_441a22:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_441bd2

            add RSP,40
.L_441a3a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441a48:

            mov EAX,11
            jmp .L_441a22
          .byte 0x90
.L_441a50:

            mov RDX,RBP
            mov RDI,RBX
            call .L_415320

            jmp .L_441984
.L_441a60:

            mov ESI,DWORD PTR [RBX+252]
            mov RDI,RBP
            call .L_409560

            movzx ESI,BYTE PTR [RBX+256]
            mov RDI,RBP
            call .L_409750

            jmp .L_4419df
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441a88:

            mov ESI,1
            mov RDI,RBP
            call .L_408f00

            jmp .L_441a20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441aa0:

            shr AL,2
            and EAX,15
            cmp AL,2
            je .L_441b68
.L_441aae:

            mov RDX,RBP
            mov RDI,RBX
            call .L_4411e0

            cmp EAX,27
            je .L_441b40
.L_441ac2:

            cmp BYTE PTR [RBP+8],7
            jne .L_441984

            lea RCX,QWORD PTR [RIP+.L_442a00]
            lea RSI,QWORD PTR [RIP+.L_4428d2]
            lea RDI,QWORD PTR [RIP+.L_4428ff]
            mov EDX,518
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441af0:

            mov RDX,RBP
            mov RDI,RBX
            call .L_441140

            jmp .L_441984
.L_441b00:

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_4417c0

            and BYTE PTR [RBP+13],251
            mov BYTE PTR [RBP+12],4
            xor EAX,EAX
            jmp .L_441a22
.L_441b1c:

            lea RCX,QWORD PTR [RIP+.L_442a00]
            lea RSI,QWORD PTR [RIP+.L_4428d2]
            lea RDI,QWORD PTR [RIP+.L_442917]
            mov EDX,539
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441b40:

            mov RAX,QWORD PTR [RBX+144]
            mov RDX,RBP
            mov RDI,RBX
            or BYTE PTR [RAX+78],128
            mov RSI,QWORD PTR [RBX+144]
            call .L_4411e0

            jmp .L_441ac2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441b68:

            movzx ESI,BYTE PTR [RBX+216]
            lea R13,QWORD PTR [R12+1560]
            mov RDI,R13
            call .L_406270

            movzx EAX,BYTE PTR [RBX+216]
            mov BYTE PTR [RBP+9],AL
            mov RSI,QWORD PTR [RBX+144]
            cmp WORD PTR [RSI+76],-1
            jne .L_441aae

            cmp WORD PTR [R12+1666],-1
            jne .L_441aae

            nop
            nop
            nop
            nop
            nop
.L_441bb0:

            call .L_401460

            cmp AX,-1
            je .L_441bb0

            movzx ESI,AX
            mov RDI,R13
            call .L_406120

            mov RSI,QWORD PTR [RBX+144]
            jmp .L_441aae
.L_441bd2:

            call __stack_chk_fail@PLT
.L_441bd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441be0:

            push RBX
            mov RBX,RSI
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_4418f0
.L_441bfd:

            nop
            nop
            nop
.L_441c00:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            sub RSP,40
.L_441c16:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBX+208],0
            mov DWORD PTR [RSP+20],0
            mov BYTE PTR [RBX+185],0
            je .L_441d5f

            mov RDI,QWORD PTR [RBX+144]
            mov R12,RAX
            test RDI,RDI
            je .L_441c62

            movzx ESI,WORD PTR [RBX+138]
            call .L_4035a0
.L_441c62:

            lea R14,QWORD PTR [RSP+12]
            mov RDI,R13
            add R12,2568
            mov RSI,R14
            call .L_408fc0

            mov RSI,R14
            mov RDI,R12
            call .L_41e5d0

            test RAX,RAX
            mov R15,RAX
            je .L_441cc0

            cmp EBP,11
            je .L_441cc0

            jbe .L_441df0

            cmp EBP,14
            jne .L_441dc8

            movzx EAX,BYTE PTR [RAX+27]
            add EAX,1
            test WORD PTR [R15+24],511
            mov BYTE PTR [R15+27],AL
            jne .L_441cc0

            cmp AL,3
            ja .L_441ef0

            nop
            nop
            nop
            nop
.L_441cc0:

            mov RDI,RBX
            mov RCX,R14
            mov EDX,EBP
            mov RSI,R13
            call .L_415480

            mov RDI,QWORD PTR [RBX+144]
            test RDI,RDI
            je .L_441d4a

            test BYTE PTR [RDI+78],64
            je .L_441d19

            test EBP,EBP
            jne .L_441e50

            movzx ESI,WORD PTR [RBX+138]
.L_441cf1:

            cmp WORD PTR [RDI+58],SI
            jbe .L_441e10

            call .L_4035a0
.L_441d00:

            mov RDI,QWORD PTR [RBX+144]
            movzx EAX,BYTE PTR [RDI+78]
            shr AL,2
            and EAX,15
            cmp AL,2
            je .L_441eb0
.L_441d19:

            movzx EAX,BYTE PTR [RDI+78]
            and EAX,3
            cmp AL,2
            je .L_441e80
.L_441d28:

            movzx EAX,WORD PTR [RDI+58]
            cmp WORD PTR [RBX+138],AX
            jb .L_441d44

            test EBP,EBP
            jne .L_441e70

            add DWORD PTR [RBX+224],1
.L_441d44:

            test BYTE PTR [RDI+78],64
            je .L_441d88
.L_441d4a:

            cmp BYTE PTR [RBX+208],0
            je .L_441d5f

            lea RDI,QWORD PTR [RBX+192]
            call .L_405290
.L_441d5f:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_441f00

            add RSP,40
.L_441d77:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441d88:

            call .L_404220

            test AL,AL
            jne .L_441d4a

            mov RSI,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [RBX+96]
            call .L_404a80

            mov RDI,QWORD PTR [RBX+144]
            call .L_403400

            xor EAX,EAX
            mov QWORD PTR [RBX+144],0
            mov WORD PTR [RBX+138],AX
            jmp .L_441d4a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441dc8:

            cmp EBP,15
            je .L_441cc0
.L_441dd1:

            lea RCX,QWORD PTR [RIP+.L_442940]
            lea RSI,QWORD PTR [RIP+.L_4428d2]
            lea RDI,QWORD PTR [RIP+.L_4428ec]
            mov EDX,940
            call __assert_fail@PLT
.L_441df0:

            test EBP,EBP
            jne .L_441dd1

            mov RAX,QWORD PTR [R13]
            test BYTE PTR [RAX],32
            je .L_441cc0

            mov BYTE PTR [R15+27],0
            jmp .L_441cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441e10:

            and BYTE PTR [RDI+78],191
            xor ESI,ESI
            mov RDI,QWORD PTR [RBX+144]
            call .L_4035a0

            test R15,R15
            je .L_441d00

            mov RAX,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [R15+34]
            mov EDX,128
            movzx ESI,BYTE PTR [RAX+79]
            shr SIL,3
            and ESI,1
            call .L_4140b0

            jmp .L_441d00
.L_441e50:

            and BYTE PTR [RDI+79],247
            mov RDI,QWORD PTR [RBX+144]
            movzx ESI,WORD PTR [RDI+58]
            mov WORD PTR [RBX+138],SI
            jmp .L_441cf1
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441e70:

            add DWORD PTR [RBX+232],1
            jmp .L_441d44
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_441e80:

            mov RDI,R12
            call .L_41c0d0

            test BYTE PTR [RAX+26],7
            lea RDI,QWORD PTR [RBX+264]
            jne .L_441ed8

            call .L_413560

            mov RDI,R12
            call .L_417190

            mov RDI,QWORD PTR [RBX+144]
            jmp .L_441d28
          .byte 0x66
          .byte 0x90
.L_441eb0:

            mov BYTE PTR [RBX+185],1
            call .L_401240

            lea RDI,QWORD PTR [RBX+48]
            mov EDX,300
            mov ESI,EAX
            call .L_433770

            jmp .L_441d4a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441ed8:

            mov ESI,EBP
            call .L_413980

            mov RDI,QWORD PTR [RBX+144]
            jmp .L_441d28
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441ef0:

            mov RSI,R15
            mov RDI,R12
            call .L_4221d0

            jmp .L_441cc0
.L_441f00:

            call __stack_chk_fail@PLT
.L_441f05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441f10:

            push RBP
            push RBX
            mov EBP,EDX
            mov RBX,RSI
            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov EDX,EBP
            mov RSI,RBX
            pop RBX
            pop RBP
            mov RDI,RAX
            jmp .L_441c00
.L_441f3b:

            nop
            nop
            nop
            nop
            nop
.L_441f40:

            test ESI,ESI
            mov EAX,4294967295
            cmove ESI,EAX
            mov DWORD PTR [RDI+212],ESI
            ret 
.L_441f51:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441f60:

            push R12
            push RBP
            push RBX
.L_441f64:

            mov RBX,RDI
            call .L_433510

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+216]
            mov EDX,DWORD PTR [RBX+212]
            add EAX,1
            jmp .L_441f96
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441f88:

            test DL,1
            lea ECX,DWORD PTR [RAX+1]
            jne .L_442020

            mov EAX,ECX
.L_441f96:

            shr EDX,1
            cmp AL,26
            jbe .L_441f88

            mov RSI,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [RBX+96]
            mov DWORD PTR [RBX+212],EDX
            mov BYTE PTR [RBX+216],AL
            lea R12,QWORD PTR [RBP+1560]
            call .L_404a80

            mov RDI,QWORD PTR [RBX+144]
            call .L_403400

            movzx ESI,BYTE PTR [RBX+217]
            mov RDI,R12
            mov QWORD PTR [RBX+144],0
            call .L_406270

            movzx ESI,WORD PTR [RBX+218]
            mov RDI,R12
            call .L_406120

            lea RDI,QWORD PTR [RBP+2568]
            mov BYTE PTR [RBX+220],0
            call .L_416490
.L_442007:

            mov BYTE PTR [RBX+185],0
            lea RDI,QWORD PTR [RBX+192]
            pop RBX
.L_442016:

            pop RBP
            pop R12
            jmp .L_405290
          .byte 0x66
          .byte 0x90
.L_442020:

            mov BYTE PTR [RBX+216],AL
            mov RAX,QWORD PTR [RBX+144]
            mov DWORD PTR [RBX+212],EDX
            or BYTE PTR [RAX+78],64
            jmp .L_442007
.L_442039:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442040:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_441f60
.L_44205d:

            nop
            nop
            nop
.L_442060:

            push R13
            lea R13,QWORD PTR [RDI+128]
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,R13
            sub RSP,8
.L_442077:

            call .L_4045c0

            test RAX,RAX
            je .L_4420b5

            mov RBX,RAX
            nop
            nop
            nop
            nop
.L_442088:

            mov RDI,RBX
            call .L_403410

            mov RSI,RBX
            mov RDI,R13
            mov R12,RAX
            call .L_404690

            add DWORD PTR [RBP+236],1
            mov RDI,RBX
            mov RBX,R12
            call .L_403400

            test R12,R12
            jne .L_442088
.L_4420b5:

            add RSP,8
.L_4420b9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4420c0:

            push R13
            lea R13,QWORD PTR [RDI+128]
            push R12
            push RBP
            push RBX
            mov R12,RDI
            mov RDI,R13
            sub RSP,8
.L_4420d7:

            call .L_4045c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_4420fe

            jmp .L_442135
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4420f0:

            sub EAX,1
            test RBP,RBP
            mov BYTE PTR [RBX+74],AL
            mov RBX,RBP
            je .L_442135
.L_4420fe:

            mov RDI,RBX
            call .L_403410

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+74]
            test AL,AL
            jne .L_4420f0

            mov RSI,RBX
            mov RDI,R13
            call .L_404690

            add DWORD PTR [R12+236],1
            mov RDI,RBX
            mov RBX,RBP
            call .L_403400

            test RBP,RBP
            jne .L_4420fe
.L_442135:

            mov RDI,R13
            call .L_4045c0

            test RAX,RAX
            je .L_442168

            call .L_401240

            add RSP,8
.L_44214b:

            lea RDI,QWORD PTR [R12+72]
            mov EDX,1000
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov ESI,EAX
            jmp .L_433770
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442168:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_442173:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442180:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_4420c0
.L_44219d:

            nop
            nop
            nop
.L_4421a0:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,8
            call .L_433510

            add DWORD PTR [RBP+228],1
            mov RBX,RAX
            mov RDI,RAX
            call .L_4334f0

            movsx ECX,BYTE PTR [RBX+24]
            add RSP,8
            mov R8,R13
            mov RDX,RBX
            mov RSI,R12
            xor R9D,R9D
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov RDI,RAX
            jmp .L_40f460
.L_4421ec:

            nop
            nop
            nop
            nop
.L_4421f0:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            mov EBX,EDX
            sub RSP,40
.L_44220c:

            mov QWORD PTR [RSP],RCX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_433510

            lea RDI,QWORD PTR [RSP+19]
            movzx EDX,BL
            mov RSI,R12
            mov R14,RAX
            mov DWORD PTR [RSP+19],192
            mov BYTE PTR [RSP+23],0
            call .L_440680

            test EAX,EAX
            jne .L_442335

            movzx EAX,WORD PTR [RSP+19]
            rol AX,8
            test AH,32
            je .L_442360

            sub EBX,5
            cmp BYTE PTR [RSP+23],0
            lea RAX,QWORD PTR [R12+5]
            mov QWORD PTR [RSP+8],RAX
            jne .L_442378
.L_442277:

            mov RDI,RBP
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403790

            test RAX,RAX
            mov R12,RAX
            je .L_442335

            movzx EDX,BYTE PTR [R13+5]
            movzx EAX,BYTE PTR [RAX+78]
            lea RDI,QWORD PTR [R12+64]
            shl EDX,7
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [R12+78],AL
            movzx EAX,WORD PTR [R13]
            mov WORD PTR [R12+76],AX
            movsx ESI,BYTE PTR [R13+3]
            call .L_4140f0

            sub RSP,8
.L_4422cf:

            lea RDI,QWORD PTR [R14+1552]
            mov RCX,R15
            movzx EAX,WORD PTR [RSP+27]
            movzx R9D,BL
            mov RSI,R12
            rol AX,8
            and EAX,2047
            push RAX
            mov R8,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RSP+16]
            call .L_440320

            mov R15D,EAX
            test R15D,R15D
            pop RAX
            pop RDX
.L_442306:

            jle .L_44232d

            movzx ESI,WORD PTR [RSP+19]
            movzx EAX,WORD PTR [R12+60]
            sub EBX,R15D
            movzx EBX,BL
            rol SI,8
            add EAX,EBX
            and ESI,2047
            cmp ESI,EAX
            jge .L_442480
.L_44232d:

            mov RDI,R12
            call .L_403400
.L_442335:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44256a

            add RSP,40
.L_44234d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442360:

            lea RAX,QWORD PTR [R12+4]
            sub EBX,4
            mov QWORD PTR [RSP+8],RAX
            jmp .L_442277
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442378:

            lea R15,QWORD PTR [RBP+128]
            mov RDI,R15
            call .L_4045c0

            test RAX,RAX
            mov R12,RAX
            jne .L_4423ac

            jmp .L_442450
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_442398:

            mov RDI,R12
            call .L_403410

            test RAX,RAX
            mov R12,RAX
            je .L_442450
.L_4423ac:

            movzx EAX,WORD PTR [RSP+19]
            movzx EDX,WORD PTR [R12+58]
            rol AX,8
            mov ECX,EAX
            and CX,2047
            cmp DX,CX
            jne .L_442398

            movzx ECX,WORD PTR [RSP+21]
            rol CX,8
            cmp WORD PTR [R12+62],CX
            jne .L_442398

            xor ESI,ESI
            test AH,32
            movzx ECX,WORD PTR [R12+60]
            je .L_4423ed

            movzx ESI,BYTE PTR [RSP+23]
            shl ESI,3
.L_4423ed:

            cmp CX,SI
            jne .L_442398

            movzx R14D,BL
            add ECX,R14D
            cmp ECX,EDX
            jg .L_442398

            movzx EAX,BYTE PTR [R12+78]
            shr AL,7
            cmp BYTE PTR [R13+5],AL
            jne .L_442398

            mov RDI,RBP
            call .L_433510

            movzx ESI,WORD PTR [R12+60]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,R14D
            mov RDI,R12
            call .L_403b10

            mov ESI,R14D
            mov RDI,R12
            call .L_403530

            movsx ESI,BYTE PTR [R13+3]
            lea RDI,QWORD PTR [R12+64]
            call .L_4140f0

            jmp .L_442520
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442450:

            mov RDI,RBP
            call .L_433510

            test BYTE PTR [RAX+1564],64
            jne .L_442335

            cmp BYTE PTR [R13+5],0
            je .L_442335

            mov RDI,RBP
            call .L_442060

            jmp .L_442335
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_442480:

            mov RDI,R12
            call .L_403470

            test EAX,EAX
            jne .L_44232d

            movzx EAX,WORD PTR [RSP+21]
            movzx ESI,WORD PTR [R12+60]
            movsxd RCX,R15D
            add RCX,QWORD PTR [RSP+8]
            mov EDX,EBX
            mov RDI,R12
            mov BYTE PTR [R12+74],5
            rol AX,8
            mov WORD PTR [R12+62],AX
            call .L_403b10

            mov ESI,EBX
            mov RDI,R12
            call .L_403530

            lea RDI,QWORD PTR [R14+1360]
            mov RSI,R12
            call .L_4105b0

            test AL,AL
            je .L_44232d

            mov RDI,RBP
            call .L_433510

            test BYTE PTR [RAX+1564],64
            jne .L_4424ff

            cmp BYTE PTR [R12+78],0
            jns .L_4424ff

            mov RDI,RBP
            call .L_442060
.L_4424ff:

            lea R15,QWORD PTR [RBP+128]
            mov EDX,1
            mov RSI,R12
            lea RBX,QWORD PTR [RBP+72]
            mov RDI,R15
            call .L_4045d0

            cmp RBX,QWORD PTR [RBP+88]
            je .L_442554
.L_442520:

            movzx EAX,WORD PTR [R12+60]
            cmp WORD PTR [R12+58],AX
            ja .L_442335

            mov RSI,R12
            mov RDI,R15
            call .L_404690

            mov RCX,QWORD PTR [RSP]
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_4421a0

            jmp .L_442335
.L_442554:

            call .L_401240

            mov EDX,1000
            mov ESI,EAX
            mov RDI,RBX
            call .L_433770

            jmp .L_442520
.L_44256a:

            call __stack_chk_fail@PLT
.L_44256f:

            nop
.L_442570:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R12D,EDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,R9
            sub RSP,24
.L_44258a:

            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RCX
            call .L_433510

            mov RDI,RBX
            mov R13,RAX
            call .L_4334e0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403790

            test RAX,RAX
            je .L_4426a0

            mov R14,RAX
            movzx EAX,BYTE PTR [RBP+5]
            lea RDI,QWORD PTR [R14+64]
            shl EAX,7
            mov EDX,EAX
            movzx EAX,BYTE PTR [R14+78]
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [R14+78],AL
            movzx EAX,WORD PTR [RBP]
            mov WORD PTR [R14+76],AX
            movsx ESI,BYTE PTR [RBP+3]
            call .L_4140f0

            sub RSP,8
.L_4425f0:

            lea RDI,QWORD PTR [R13+1552]
            mov RCX,R15
            push 0
            mov R8,QWORD PTR [RSP+16]
            movzx R9D,R12B
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R14
            call .L_440320

            mov R15D,EAX
            test R15D,R15D
            pop RAX
            pop RDX
            jg .L_442638
.L_44261c:

            add RSP,24
            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_403400
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442638:

            sub R12D,R15D
            mov RDI,R14
            movzx ESI,R12B
            add SI,WORD PTR [R14+58]
            movzx ESI,SI
            call .L_403470

            test EAX,EAX
            jne .L_44261c

            movzx ESI,WORD PTR [R14+60]
            movsxd RCX,R15D
            add RCX,QWORD PTR [RSP]
            movzx EDX,R12B
            mov RDI,R14
            call .L_403b10

            lea RDI,QWORD PTR [R13+1360]
            mov RSI,R14
            call .L_4105b0

            test AL,AL
            je .L_44261c

            mov RCX,QWORD PTR [RSP+8]
            add RSP,24
.L_442687:

            mov RDX,RBP
            mov RSI,R14
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_4421a0
          .byte 0x90
.L_4426a0:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4426af:

            nop
.L_4426b0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,72
.L_4426c4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_433510

            cmp BYTE PTR [RBX+208],0
            mov DWORD PTR [RSP+40],0
            mov DWORD PTR [RSP+52],0
            jne .L_442718
.L_4426f2:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4428a7

            add RSP,72
.L_44270a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_442718:

            lea R13,QWORD PTR [RSP+44]
            mov RDI,RBP
            mov R12,RAX
            mov RSI,R13
            call .L_409220

            test EAX,EAX
            jne .L_4426f2

            lea R14,QWORD PTR [RSP+32]
            mov RDI,RBP
            mov RSI,R14
            call .L_408fc0

            test EAX,EAX
            jne .L_4426f2

            lea RAX,QWORD PTR [RSP+26]
            mov RDI,RBP
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_409180

            movzx EAX,BYTE PTR [RBP+9]
            mov RDI,RBP
            mov BYTE PTR [RSP+28],AL
            movzx EAX,BYTE PTR [RBP+10]
            mov BYTE PTR [RSP+29],AL
            movzx EAX,BYTE PTR [RBP+11]
            mov BYTE PTR [RSP+30],AL
            mov RAX,QWORD PTR [RBP]
            movzx EAX,BYTE PTR [RAX]
            shr AL,3
            and EAX,1
            mov BYTE PTR [RSP+31],AL
            call .L_409c00

            mov RDI,RBP
            mov R15,RAX
            call .L_409b80

            movzx EDX,BYTE PTR [RSP+31]
            lea RDI,QWORD PTR [R12+11264]
            mov RSI,R13
            mov BYTE PTR [RSP+7],AL
            call .L_42e820

            lea RDI,QWORD PTR [RBX+264]
            mov RSI,RBP
            call .L_413910

            mov RDX,QWORD PTR [RBP]
            movzx EAX,BYTE PTR [RSP+7]
            movzx EDX,BYTE PTR [RDX]
            and EDX,7
            cmp DL,1
            je .L_442810

            cmp DL,3
            jne .L_4426f2

            lea RSI,QWORD PTR [RSP+25]
            mov RDI,RBP
            call .L_409a90

            cmp BYTE PTR [RSP+25],4
            jne .L_4426f2

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,RBX
            call .L_415400

            jmp .L_4426f2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442810:

            cmp AL,5
            jbe .L_442862

            movzx EDX,BYTE PTR [R15]
            and EDX,4294967232
            cmp DL,128
            je .L_44286e
.L_442820:

            movzx EDX,WORD PTR [R15]
            rol DX,8
            and DX,55296
            cmp DX,49152
            je .L_442889
.L_442834:

            movzx EDX,BYTE PTR [R15]
            and EDX,4294967264
            cmp DL,96
            jne .L_4426f2

            mov R9,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov R8,R14
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_442570

            jmp .L_4426f2
.L_442862:

            je .L_442820

            test AL,AL
            je .L_4426f2

            jmp .L_442834
.L_44286e:

            mov R8,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_415af0

            jmp .L_4426f2
.L_442889:

            mov R9,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov R8,R14
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_4421f0

            jmp .L_4426f2
.L_4428a7:

            call __stack_chk_fail@PLT
.L_4428ac:

            nop
            nop
            nop
            nop
.L_4428b0:

            push RBX
            mov RBX,RSI
            call .L_402890

            mov RDI,RAX
            call .L_402a50

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_4426b0
.L_4428cd:

            nop
            nop
            nop
.L_4428d0:

            ret 
.L_4428d2:

            je .L_44293c
          .byte 0x72
          .byte 0x65
          .byte 0x61
          .byte 0x64
          .byte 0x2f
          .byte 0x6d
          .byte 0x65
          .byte 0x73
          .byte 0x68
          .byte 0x5f
          .byte 0x66
          .byte 0x6f
          .byte 0x72
          .byte 0x77
          .byte 0x61
          .byte 0x72
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x2e
          .byte 0x63
          .byte 0x70
          .byte 0x70
          .byte 0x0
.L_4428ec:
          .string "false"
.L_4428f2:
          .string "hcLength > 0"
.L_4428ff:
          .string "aFrame.GetLength() != 7"
.L_442917:
          .string "error == OT_ERROR_NONE"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
.L_44293c:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_442940:
          .string "void ot::MeshForwarder::HandleSentFrame(ot::Mac::Frame&, otError)"
          .zero 30
.L_4429a0:
          .string "otError ot::MeshForwarder::SendFragment(ot::Message&, ot::Mac::Frame&)"
          .zero 25
.L_442a00:
          .string "otError ot::MeshForwarder::HandleFrameRequest(ot::Mac::Frame&)"
          .zero 1
.L_442a40:
          .string "ot::Message* ot::MeshForwarder::GetDirectTransmission()"
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442a80:

            mov EAX,4294967295
            push RBX

            mov RBX,RDI
            mov WORD PTR [RDI+20],AX
            lea RAX,QWORD PTR [RIP+.L_442f10]
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_442f2a]
            mov QWORD PTR [RDI+48],RAX
            lea RAX,QWORD PTR [RIP+.L_442c50]
            mov QWORD PTR [RDI+56],RAX
            mov QWORD PTR [RBX+64],RDI
            mov QWORD PTR [RDI+72],0
            call .L_433510

            lea RSI,QWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42f860
.L_442ae6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442af0:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            push RBX
            sub RSP,80
.L_442aff:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+8],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+4],AX
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_442b60
.L_442b3f:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_442c48

            add RSP,80
.L_442b57:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_442b60:

            lea R14,QWORD PTR [RSP+8]
            mov R12,RDX
            mov R13,RDI
            mov RBP,RSI
            mov RBX,RCX
            mov EDX,8
            mov RCX,R14
            mov ESI,53
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_442b3f

            cmp BYTE PTR [RSP+9],6
            jne .L_442b3f

            cmp BYTE PTR [RSP+10],0
            jne .L_442b3f

            cmp BYTE PTR [RSP+11],4
            jne .L_442b3f

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,1
            mov RDI,R12
            call .L_4339f0

            test EAX,EAX
            jne .L_442b3f

            cmp BYTE PTR [RSP+5],2
            jne .L_442b3f

            mov RDI,R14
            call .L_43ae90

            mov DWORD PTR [R13+16],EAX
            movzx EAX,WORD PTR [RSP+6]
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [R13],XMM0
            rol AX,8
            mov WORD PTR [R13+20],AX
            call .L_401240

            lea RDI,QWORD PTR [R13+24]
            mov EDX,1000
            mov ESI,EAX
            call .L_433770

            test BYTE PTR [RBP],48
            jne .L_442b3f

            mov RDI,RBX
            call .L_40ff70

            test AL,AL
            jne .L_442b3f

            mov RDI,R13
            call .L_433510

            test BYTE PTR [RBP],48
            jne .L_442b3f

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+216]
            mov RDX,RBP
            mov ESI,68
            call .L_430ae0

            jmp .L_442b3f
.L_442c48:

            call __stack_chk_fail@PLT
.L_442c4d:

            nop
            nop
            nop
.L_442c50:

            jmp .L_442af0
.L_442c55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442c60:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,240
.L_442c72:

            lea R14,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_433510

            pxor XMM0,XMM0
            xor ESI,ESI
            xor ECX,ECX
            mov EDX,2
            mov RDI,R14
            mov WORD PTR [RSP+20],SI
            xor ESI,ESI
            mov WORD PTR [RSP+24],CX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_431360

            mov RDI,R14
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_442f2f]
            mov RDI,R14
            call .L_4318a0

            mov RDI,R14
            call .L_431b50

            xor EDX,EDX
            mov RSI,R14
            mov RDI,R12
            call .L_42f920

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_442da3

            mov EDX,DWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,R14
            mov DWORD PTR [RSP+24],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+28],EAX
            call .L_403d80

            test EAX,EAX
            je .L_442dd0
.L_442d93:

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_403400

            mov EAX,DWORD PTR [RSP+12]
.L_442da3:

            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_442e4a

            add RSP,240
.L_442dc1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442dd0:

            movzx EAX,WORD PTR [RBX+20]
            mov EDX,513
            lea RSI,QWORD PTR [RSP+20]
            mov WORD PTR [RSP+20],DX
            mov RDI,R14
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+22],AX
            call .L_403d80

            test EAX,EAX
            jne .L_442d93

            lea RDI,QWORD PTR [RBP+2568]
            lea R13,QWORD PTR [RSP+32]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,R13
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RSI,R14
            mov RDI,R12
            mov WORD PTR [RSP+66],AX
            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_430850

            test EAX,EAX
            je .L_442da3

            jmp .L_442d93
.L_442e4a:

            call __stack_chk_fail@PLT
.L_442e4f:

            nop
.L_442e50:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,24
.L_442e59:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_442ea0

            mov RBX,RSI
            lea RSI,QWORD PTR [RSP+6]
            mov RDI,RBX
            call .L_409180

            movzx EAX,WORD PTR [RSP+6]
            cmp WORD PTR [RBP+20],AX
            je .L_442eb0
.L_442e89:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_442ec0

            add RSP,24
.L_442e9d:

            pop RBX
            pop RBP
            ret 
.L_442ea0:

            mov EAX,DWORD PTR [RDI+16]
            test EAX,EAX
            je .L_442e89

            call .L_442c60

            jmp .L_442e89
          .byte 0x66
          .byte 0x90
.L_442eb0:

            movzx ECX,BYTE PTR [RBX+9]
            mov EAX,1
            shl EAX,CL
            or DWORD PTR [RBP+16],EAX
            jmp .L_442e89
.L_442ec0:

            call __stack_chk_fail@PLT
.L_442ec5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442ed0:

            jmp .L_442e50
.L_442ed5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442ee0:

            push RBX
            mov RBX,RDI
            call .L_433510

            mov ESI,DWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+1560]
            lea RCX,QWORD PTR [RIP+.L_442ed0]
            mov R8,RBX
            xor EDX,EDX
            call .L_406360

            mov DWORD PTR [RBX+16],0
            pop RBX
            ret 
.L_442f0d:

            nop
            nop
            nop
.L_442f10:

            sub RSP,8
            call .L_402890

            mov RDI,RAX
            call .L_402b20

            add RSP,8
            mov RDI,RAX
            jmp .L_442ee0
.L_442f2a:
          .string "c/pq"
.L_442f2f:
          .string "c/pc"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_442f40:

            push R15
            push R14
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,ESI
            mov R12D,ECX
            mov RSI,RDX
            sub RSP,184
.L_442f5f:

            movzx EDX,CX
            mov ECX,34
            mov RAX,QWORD PTR [RSP+240]
            lea R14,QWORD PTR [RSP+128]
            mov WORD PTR [RSP+14],R9W
            mov DWORD PTR [RSP+8],R9D
            mov RDI,R14
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call __memcpy_chk@PLT

            test R13B,1
            mov R9D,DWORD PTR [RSP+8]
            jne .L_443228

            test R9W,R9W
            jne .L_442fe0
.L_442fb7:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_443247

            add RSP,184
.L_442fd5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_442fe0:

            movzx R12D,R12W
            mov EDI,R13D
            lea R13,QWORD PTR [RSP+96]
            lea EAX,DWORD PTR [R12+3]
            lea ESI,DWORD PTR [R12+4]
            lea ECX,DWORD PTR [R12+1]
            lea EDX,DWORD PTR [R12+2]
            shr EDI,1
            mov QWORD PTR [RSP+72],R14
            cdqe 
            movsxd RSI,ESI
            movsxd RCX,ECX
            mov QWORD PTR [RSP+56],RAX
            lea RAX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+32],RSI
            movsxd RDX,EDX
            movsxd RSI,R12D
            lea R12,QWORD PTR [RSP+80]
            movzx EBX,BX
            mov DWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+40],RSI
            mov QWORD PTR [RSP+64],RCX
            mov QWORD PTR [RSP+48],RDX
            mov R14D,EDI
            mov QWORD PTR [RSP+24],RAX
.L_44304b:

            add DWORD PTR [RSP+8],1
            mov RSI,QWORD PTR [RSP+40]
            mov EDI,DWORD PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+64]
            mov RDX,QWORD PTR [RSP+56]
            mov R15,QWORD PTR [RSP+24]
            mov EAX,EDI
            shr EAX,24
            mov R8,R15
            mov BYTE PTR [RSP+RSI*1+128],AL
            mov RSI,QWORD PTR [RSP+48]
            mov EAX,EDI
            shr EAX,16
            mov BYTE PTR [RSP+RCX*1+128],AL
            mov EAX,EDI
            mov RCX,QWORD PTR [RSP+32]
            mov BYTE PTR [RSP+RSI*1+128],AH
            mov BYTE PTR [RSP+RDX*1+128],DIL
            mov RSI,RBX
            mov RDX,QWORD PTR [RSP+72]
            mov RDI,RBP
            call .L_447e60

            mov R8,R12
            mov ECX,16
            mov RDX,R15
            mov RSI,RBX
            mov RDI,RBP
            call .L_447e60

            mov RAX,QWORD PTR [RSP+80]
            xor QWORD PTR [RSP+112],RAX
            mov RAX,QWORD PTR [RSP+88]
            xor QWORD PTR [RSP+120],RAX
            cmp R14D,1
            jbe .L_443145

            mov R15D,1
            nop
            nop
            nop
            nop
.L_4430e8:

            mov R8,R13
            mov ECX,16
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            add R15D,1
            call .L_447e60

            mov R8,R12
            mov ECX,16
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_447e60

            mov RAX,QWORD PTR [RSP+112]
            xor RAX,QWORD PTR [RSP+80]
            xor RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+112],RAX
            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR [RSP+104]
            cmp R14D,R15D
            mov QWORD PTR [RSP+120],RAX
            jne .L_4430e8
.L_443145:

            movzx ECX,WORD PTR [RSP+14]
            mov EAX,16
            cmp CX,16
            cmovbe EAX,ECX
            movzx ESI,AX
            cmp ESI,8
            jae .L_4431b8

            test SIL,4
            jne .L_44320b

            test ESI,ESI
            je .L_4431a0

            mov RCX,QWORD PTR [RSP+24]
            test SIL,2
            movzx EDX,BYTE PTR [RCX]
            mov RCX,QWORD PTR [RSP+16]
            mov BYTE PTR [RCX],DL
            je .L_4431a0

            mov RCX,QWORD PTR [RSP+24]
            mov EDX,ESI
            mov RDI,QWORD PTR [RSP+16]
            movzx ECX,WORD PTR [RCX+RDX*1-2]
            mov WORD PTR [RDI+RDX*1-2],CX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4431a0:

            add QWORD PTR [RSP+16],RSI
            sub WORD PTR [RSP+14],AX
            je .L_442fb7

            jmp .L_44304b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4431b8:

            mov R11,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [R11]
            mov QWORD PTR [RDI],RDX
            mov EDX,ESI
            mov RCX,QWORD PTR [R11+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-8],RCX
            lea RCX,QWORD PTR [RDI+8]
            and RCX,-8
            sub RDI,RCX
            mov RDX,RDI
            sub R11,RDI
            add EDX,ESI
            mov R9,R11
            and EDX,4294967288
            cmp EDX,8
            jb .L_4431a0

            and EDX,4294967288
            xor EDI,EDI
.L_4431f7:

            mov R8D,EDI
            add EDI,8
            mov R10,QWORD PTR [R9+R8*1]
            cmp EDI,EDX
            mov QWORD PTR [RCX+R8*1],R10
            jb .L_4431f7

            jmp .L_4431a0
.L_44320b:

            mov RCX,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov EDX,DWORD PTR [RCX]
            mov DWORD PTR [RDI],EDX
            mov EDX,ESI
            mov ECX,DWORD PTR [RCX+RDX*1-4]
            mov DWORD PTR [RDI+RDX*1-4],ECX
            jmp .L_4431a0
.L_443228:

            lea RCX,QWORD PTR [RIP+.L_443280]
            lea RSI,QWORD PTR [RIP+.L_44324c]
            lea RDI,QWORD PTR [RIP+.L_443263]
            mov EDX,62
            call __assert_fail@PLT
.L_443247:

            call __stack_chk_fail@PLT
.L_44324c:
          .string "crypto/pbkdf2_cmac.cpp"
.L_443263:
          .string "aIterationCounter % 2 == 0"
# WARNING: found overlapping blocks at address 43047

            nop
            nop
.L_443280:
          .string "void otPbkdf2Cmac(const uint8_t*, uint16_t, const uint8_t*, uint16_t, uint32_t, uint16_t, uint8_t*)"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_4432f0:

            ret 
.L_4432f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443300:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            xor R9D,R9D
            push R12
            push RBP
            xor R10D,R10D
            push RBX
            xor R11D,R11D
            mov R13,R8
            xor R8D,R8D
            mov R14D,EDX
            mov RBX,RDI
            sub RSP,264
.L_44332a:

            mov EBP,ESI
            mov R15D,ECX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+32],R8W
            mov WORD PTR [RSP+40],R9W
            mov WORD PTR [RSP+29],R10W
            mov WORD PTR [RSP+36],R11W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_433510

            mov EDX,13
            cmp DWORD PTR [RAX+8128],2
            je .L_4433b0
.L_44337c:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_4435da

            add RSP,264
.L_44339c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4433b0:

            mov RDI,R13
            lea R12,QWORD PTR [RSP+96]
            call .L_40ff70

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,R12
            shl ESI,4
            call .L_431360

            mov RDI,R12
            mov ESI,2
            call .L_431b80

            lea RSI,QWORD PTR [RIP+.L_4435df]
            mov RDI,R12
            call .L_4318a0

            mov RDI,R12
            call .L_431b50

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+216]
            xor EDX,EDX
            mov RSI,R12
            call .L_42f920

            test RAX,RAX
            mov R12,RAX
            mov EDX,3
            je .L_44337c

            mov ESI,523
            mov RDI,RBX
            mov WORD PTR [RSP+32],SI
            call .L_433510

            lea RDI,QWORD PTR [RAX+8128]
            call .L_434b70

            lea RSI,QWORD PTR [RSP+32]
            rol AX,8
            mov EDX,4
            mov RDI,R12
            mov WORD PTR [RSP+34],AX
            call .L_403d80

            test EAX,EAX
            mov EDX,EAX
            je .L_443480
.L_443462:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EDX
            call .L_403400

            mov EDX,DWORD PTR [RSP+12]
            jmp .L_44337c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443480:

            lea EAX,DWORD PTR [RBP+RBP*1]
            shr EBP,1
            lea RSI,QWORD PTR [RSP+40]
            and EBP,1431655765
            mov RDI,R12
            mov DWORD PTR [RSP+40],67110453
            and EAX,2863311530
            or EBP,EAX
            lea EAX,DWORD PTR [RBP*4]
            shr EBP,2
            and EBP,858993459
            and EAX,3435973836
            or EBP,EAX
            mov EAX,EBP
            shr EBP,4
            shl EAX,4
            and EBP,252645135
            and EAX,4042322160
            or EAX,EBP
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d80

            test EAX,EAX
            mov EDX,EAX
            jne .L_443462

            lea RSI,QWORD PTR [RSP+29]
            mov ECX,310
            mov EDX,3
            mov RDI,R12
            mov WORD PTR [RSP+29],CX
            mov BYTE PTR [RSP+31],R14B
            call .L_403d80

            test EAX,EAX
            mov EDX,EAX
            jne .L_443462

            mov EDX,567
            lea RSI,QWORD PTR [RSP+36]
            rol R15W,8
            mov WORD PTR [RSP+36],DX
            mov RDI,R12
            mov EDX,4
            mov WORD PTR [RSP+38],R15W
            call .L_403d80

            test EAX,EAX
            mov EDX,EAX
            jne .L_443462

            mov RDI,RBX
            call .L_433510

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4172a0

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            mov EAX,4294963391
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+82],AX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_433510

            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+24]
            mov BYTE PTR [RSP+84],AL
            call .L_433510

            lea RDX,QWORD PTR [RSP+48]
            lea RDI,QWORD PTR [RAX+216]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R12
            call .L_430850

            test EAX,EAX
            mov EDX,EAX
            jne .L_443462

            jmp .L_44337c
.L_4435da:

            call __stack_chk_fail@PLT
.L_4435df:
          .string "c/ab"
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_4435f0:

            lea RAX,QWORD PTR [RIP+.L_443ca8]
            ret 
.L_4435f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443600:

            test RDI,RDI
            mov RDX,RDI
            je .L_443650

            lea RSI,QWORD PTR [RIP+.L_443c93]
            mov ECX,7
            lea RAX,QWORD PTR [RIP+.L_6769a0]

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta CL
            sbb CL,0
            test CL,CL
            je .L_443652

            lea RSI,QWORD PTR [RIP+.L_443c9a]
            mov RDI,RDX
            mov ECX,7
            mov EDX,0

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta AL
            sbb AL,0
            test AL,AL
            lea RAX,QWORD PTR [RIP+.L_676940]
            cmovne RAX,RDX
            ret 
.L_443650:

            xor EAX,EAX
.L_443652:

            ret 
.L_443654:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443660:

            cmp EDI,5
            lea RAX,QWORD PTR [RIP+.L_6769a0]
            je .L_44367f

            lea RAX,QWORD PTR [RIP+.L_676940]
            cmp EDI,6
            mov EDX,0
            cmovne RAX,RDX
.L_44367f:

            ret 
.L_443681:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443690:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+16],0
            movups XMMWORD PTR [RDI],XMM0
            ret 
.L_4436a0:

            test RDI,RDI
            je .L_443710

            push RBX

            mov RAX,QWORD PTR [RDI]
            mov RBX,RDI
            test RAX,RAX
            je .L_44370c

            mov RDI,QWORD PTR [RDI+8]
            test RDI,RDI
            je .L_4436bd

            call QWORD PTR [RAX+64]
.L_4436bd:

            mov RDI,QWORD PTR [RBX+16]
            test RDI,RDI
            je .L_4436f6

            mov RAX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RAX+20]
            add EAX,EAX
            cdqe 
            test RAX,RAX
            je .L_4436f0

            add RAX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4436e0:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_4436e0

            mov RDI,QWORD PTR [RBX+16]
.L_4436f0:

            call QWORD PTR [RIP+.L_677120]
.L_4436f6:

            lea RAX,QWORD PTR [RBX+24]
            nop
            nop
            nop
            nop
            nop
            nop
.L_443700:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RAX,RBX
            jne .L_443700
.L_44370c:

            pop RBX

            ret 
          .byte 0x66
          .byte 0x90
.L_443710:

            ret 
.L_443712:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443720:

            test RDI,RDI
            je .L_443758

            test RSI,RSI
            mov RAX,QWORD PTR [RDI]
            je .L_443758

            test RAX,RAX
            je .L_443758

            mov RDX,QWORD PTR [RSI]
            cmp RAX,RDX
            jne .L_443758

            test RDX,RDX
            je .L_443758

            sub RSP,8
            mov RSI,QWORD PTR [RSI+8]
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+72]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_443758:

            mov EAX,4294946560
            ret 
.L_44375e:

            nop
            nop
.L_443760:

            test RSI,RSI
            je .L_4437c5

            test RDI,RDI
            je .L_4437c5

            push R12
            mov R12D,EDX
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            call QWORD PTR [RSI+56]

            test RAX,RAX
            mov QWORD PTR [RBP+8],RAX
            je .L_4437be

            test R12D,R12D
            je .L_4437a0

            movsxd RSI,DWORD PTR [RBX+20]
            mov EDI,2
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBP+16],RAX
            je .L_4437b0
.L_4437a0:

            mov QWORD PTR [RBP],RBX
            xor EAX,EAX
.L_4437a6:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4437b0:

            mov RDI,QWORD PTR [RBP+8]
            call QWORD PTR [RBX+64]

            mov EAX,4294946432
            jmp .L_4437a6
.L_4437be:

            mov EAX,4294946432
            jmp .L_4437a6
.L_4437c5:

            mov EAX,4294946560
            ret 
.L_4437cb:

            nop
            nop
            nop
            nop
            nop
.L_4437d0:

            mov EDX,1
            jmp .L_443760
.L_4437d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4437e0:

            test RDI,RDI
            je .L_443800

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443800

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+24]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_443800:

            mov EAX,4294946560
            ret 
.L_443806:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443810:

            test RDI,RDI
            je .L_443830

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443830

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_443830:

            mov EAX,4294946560
            ret 
.L_443836:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443840:

            test RDI,RDI
            je .L_443860

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443860

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+40]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_443860:

            mov EAX,4294946560
            ret 
.L_443866:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443870:

            test RDI,RDI
            mov RAX,RDI
            je .L_44388f

            sub RSP,8
            mov RDI,RSI
            mov RSI,RDX
            mov RDX,RCX
            call QWORD PTR [RAX+48]

            xor EAX,EAX
            add RSP,8
            ret 
.L_44388f:

            mov EAX,4294946560
            ret 
.L_443895:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4438a0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_4438ae:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_4439dc

            mov RAX,QWORD PTR [RDI]
            mov R12,RDI
            test RAX,RAX
            je .L_4439dc

            mov RBP,QWORD PTR [RDI+16]
            test RBP,RBP
            je .L_4439dc

            mov R15,RDX
            movsxd RDX,DWORD PTR [RAX+20]
            mov R13,RSI
            mov RBX,RSP
            cmp RDX,R15
            jae .L_443934

            mov RDI,QWORD PTR [RDI+8]
            mov RBX,RSP
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [R12]
            mov RDX,R15
            mov RSI,R13
            mov RDI,QWORD PTR [R12+8]
            mov R13,RBX
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            mov RSI,RBX
            call QWORD PTR [RAX+40]

            mov RAX,QWORD PTR [R12]
            mov RBP,QWORD PTR [R12+16]
            movsxd R15,DWORD PTR [RAX+16]
            movsxd RDX,DWORD PTR [RAX+20]
.L_443934:

            mov ESI,54
            mov RDI,RBP
            lea R14,QWORD PTR [RBP+RDX*1]
            call memset@PLT

            mov RAX,QWORD PTR [R12]
            mov ESI,92
            mov RDI,R14
            movsxd RDX,DWORD PTR [RAX+20]
            call memset@PLT

            test R15,R15
            je .L_443985

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_443968:

            movzx EDX,BYTE PTR [R13+RAX*1]
            xor BYTE PTR [RBP+RAX*1],DL
            movzx EDX,BYTE PTR [R13+RAX*1]
            xor BYTE PTR [R14+RAX*1],DL
            add RAX,1
            cmp R15,RAX
            jne .L_443968
.L_443985:

            lea RAX,QWORD PTR [RBX+32]
            mov RSI,RBX
            nop
            nop
            nop
            nop
.L_443990:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RAX
            jne .L_443990

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
.L_4439bd:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4439e3

            add RSP,56
.L_4439d1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4439dc:

            mov EAX,4294946560
            jmp .L_4439bd
.L_4439e3:

            call __stack_chk_fail@PLT
.L_4439e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4439f0:

            test RDI,RDI
            je .L_443a20

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443a20

            cmp QWORD PTR [RDI+16],0
            je .L_443a20

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443a20:

            mov EAX,4294946560
            ret 
.L_443a26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443a30:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_443a3a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_443ad8

            mov RAX,QWORD PTR [RDI]
            mov RBX,RDI
            test RAX,RAX
            je .L_443ad8

            mov RDX,QWORD PTR [RDI+16]
            test RDX,RDX
            je .L_443ad8

            movsxd RBP,DWORD PTR [RAX+20]
            mov R13,RSP
            mov R12,RSI
            mov RDI,QWORD PTR [RDI+8]
            mov RSI,R13
            add RBP,RDX
            call QWORD PTR [RAX+40]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,R13
            movsxd RDX,DWORD PTR [RAX+16]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,R12
            call QWORD PTR [RAX+40]

            xor EAX,EAX
.L_443ab9:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_443adf

            add RSP,56
.L_443acd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_443ad8:

            mov EAX,4294946560
            jmp .L_443ab9
.L_443adf:

            call __stack_chk_fail@PLT
.L_443ae4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443af0:

            test RDI,RDI
            je .L_443b30

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443b30

            push RBP
            push RBX
            sub RSP,8
            mov RBP,QWORD PTR [RDI+16]
            test RBP,RBP
            je .L_443b36

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
.L_443b29:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_443b30:

            mov EAX,4294946560
            ret 
.L_443b36:

            mov EAX,4294946560
            jmp .L_443b29
.L_443b3d:

            nop
            nop
            nop
.L_443b40:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_443b4e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+8],RCX
            je .L_443c18

            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+16]
            mov R12,RSI
            mov R13,RDX
            mov RSI,RDI
            mov EDX,1
            mov RDI,RBX
            mov R15,R8
            mov RBP,R9
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+32],0
            call .L_443760

            test EAX,EAX
            mov R14D,EAX
            je .L_443bd0
.L_443ba6:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_443c20

            add RSP,56
.L_443bbd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443bd0:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_4438a0

            mov RAX,QWORD PTR [RSP+16]
            test RAX,RAX
            je .L_443c00

            cmp QWORD PTR [RSP+32],0
            je .L_443c00

            mov RDX,R15
            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            call QWORD PTR [RAX+32]
.L_443c00:

            mov RDI,RBX
            mov RSI,RBP
            call .L_443a30

            mov RDI,RBX
            call .L_4436a0

            jmp .L_443ba6
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_443c18:

            mov R14D,4294946560
            jmp .L_443ba6
.L_443c20:

            call __stack_chk_fail@PLT
.L_443c25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443c30:

            test RDI,RDI
            je .L_443c50

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443c50

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+80]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_443c50:

            mov EAX,4294946560
            ret 
.L_443c56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443c60:

            xor EAX,EAX
            test RDI,RDI
            je .L_443c6b

            movzx EAX,BYTE PTR [RDI+16]
.L_443c6b:

            ret 
.L_443c6d:

            nop
            nop
            nop
.L_443c70:

            xor EAX,EAX
            test RDI,RDI
            je .L_443c79

            mov EAX,DWORD PTR [RDI]
.L_443c79:

            ret 
.L_443c7b:

            nop
            nop
            nop
            nop
            nop
.L_443c80:

            test RDI,RDI
            je .L_443c90

            mov RAX,QWORD PTR [RDI+8]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_443c90:

            xor EAX,EAX
            ret 
.L_443c93:
          .string "SHA224"
.L_443c9a:
          .string "SHA256"
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443ca8:
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x5
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_443cc0:

            jmp .L_443f30
.L_443cc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443cd0:

            jmp .L_443e50
.L_443cd5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443ce0:

            push RBX
            mov RBX,RDI
            call .L_443e30

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_443cf3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443d00:

            sub RSP,24
            mov ESI,108
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_443d2b

            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_443e00

            mov RAX,QWORD PTR [RSP+8]
.L_443d2b:

            add RSP,24
            ret 
.L_443d30:

            mov ECX,1
            jmp .L_444510
.L_443d3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_443d40:

            xor ECX,ECX
            jmp .L_444510
.L_443d47:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443d50:

            jmp .L_444360
.L_443d55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443d60:

            jmp .L_444340
.L_443d65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443d70:

            mov ESI,1
            jmp .L_443ea0
.L_443d7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_443d80:

            xor ESI,ESI
            jmp .L_443ea0
.L_443d87:

            push RBX
            xor SIL,BYTE PTR [RIP+.L_67e630+1211062166]
            xor SIL,BYTE PTR [R10]
            xor AL,0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443da0:

            xor EAX,EAX
            ret 
.L_443da3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443db0:

            ret 
.L_443db2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443dc0:

            mov QWORD PTR [RIP+.L_677128],RDI
            mov QWORD PTR [RIP+.L_677120],RSI
            xor EAX,EAX
            ret 
.L_443dd1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443de0:

            xor EAX,EAX
            ret 
.L_443de3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443df0:

            ret 
.L_443df2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443e00:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+100],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,108
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_443e29:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443e30:

            test RDI,RDI
            je .L_443e4c

            lea RAX,QWORD PTR [RDI+108]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443e40:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RAX,RDI
            jne .L_443e40
.L_443e4c:

            ret 
.L_443e4e:

            nop
            nop
.L_443e50:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDI+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            movups XMMWORD PTR [RDI+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+48]
            movups XMMWORD PTR [RDI+48],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+64]
            movups XMMWORD PTR [RDI+64],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+80]
            movups XMMWORD PTR [RDI+80],XMM0
            mov RAX,QWORD PTR [RSI+96]
            mov QWORD PTR [RDI+96],RAX
            mov EAX,DWORD PTR [RSI+104]
            mov DWORD PTR [RDI+104],EAX
            ret 
.L_443e93:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443ea0:

            test ESI,ESI
            mov QWORD PTR [RDI],0
            je .L_443ef0

            movabs RAX,3926247204440088280
            mov DWORD PTR [RDI+104],ESI
            mov QWORD PTR [RDI+8],RAX
            movabs RAX,-644479594506691305
            mov QWORD PTR [RDI+16],RAX
            movabs RAX,7518782744944446257
            mov QWORD PTR [RDI+24],RAX
            movabs RAX,-4685344894838272089
            mov QWORD PTR [RDI+32],RAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443ef0:

            movabs RAX,-4942790177982912921
            mov DWORD PTR [RDI+104],ESI
            mov QWORD PTR [RDI+8],RAX
            movabs RAX,-6534734903820487822
            mov QWORD PTR [RDI+16],RAX
            movabs RAX,-7276294671082564993
            mov QWORD PTR [RDI+24],RAX
            movabs RAX,6620516960021240235
            mov QWORD PTR [RDI+32],RAX
            ret 
.L_443f2c:

            nop
            nop
            nop
            nop
.L_443f30:

            push R15
            push R14
            mov RCX,RDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,344
.L_443f44:

            lea RBX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+16],RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+24],RBX
            mov RDI,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443f70:

            mov EDX,DWORD PTR [RCX+RAX*1+8]
            mov DWORD PTR [RDI+RAX*1],EDX
            add RAX,4
            cmp RAX,32
            jne .L_443f70

            lea RAX,QWORD PTR [RSP+64]
            mov R15D,DWORD PTR [RSP+60]
            mov R11D,DWORD PTR [RSP+48]
            mov EBP,DWORD PTR [RSP+56]
            mov R13D,DWORD PTR [RSP+52]
            xor R9D,R9D
            mov R10D,DWORD PTR [RSP+32]
            mov EBX,DWORD PTR [RSP+36]
            mov EDX,1116352408
            mov R12D,DWORD PTR [RSP+40]
            mov R14D,DWORD PTR [RSP+44]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_44409d
          .byte 0x66
          .byte 0x90
.L_443fc0:

            lea EAX,DWORD PTR [R9-2]
            mov EDI,DWORD PTR [RSP+RAX*4+64]
            lea EAX,DWORD PTR [R9-15]
            mov R8D,DWORD PTR [RSP+RAX*4+64]
            mov ECX,EDI
            mov EAX,EDI
            shr EDI,10
            rol EAX,15
            rol ECX,13
            xor ECX,EAX
            lea EAX,DWORD PTR [R9-7]
            xor ECX,EDI
            lea EDI,DWORD PTR [R9-16]
            mov EDI,DWORD PTR [RSP+RDI*4+64]
            add EDI,DWORD PTR [RSP+RAX*4+64]
            mov EAX,R8D
            rol EAX,14
            add ECX,EDI
            mov EDI,R8D
            shr R8D,3
            ror EDI,7
            xor EAX,EDI
            mov RDI,QWORD PTR [RSP+8]
            xor EAX,R8D
            add EAX,ECX
            mov DWORD PTR [RDI+R9*4],EAX
.L_444014:

            mov ECX,R11D
            mov EDI,R11D
            add R9,1
            ror EDI,11
            ror ECX,6
            xor ECX,EDI
            mov EDI,R11D
            rol EDI,7
            xor EDI,ECX
            mov ECX,R13D
            xor ECX,EBP
            and ECX,R11D
            xor ECX,EBP
            add ECX,EDI
            add ECX,EAX
            mov EAX,R10D
            add R15D,ECX
            ror EAX,2
            mov ECX,EBX
            add EDX,R15D
            mov R15D,R10D
            and ECX,R10D
            ror R15D,13
            lea R8D,DWORD PTR [RDX+R14*1]
            xor EAX,R15D
            mov R15D,R10D
            rol R15D,10
            xor R15D,EAX
            mov EAX,EBX
            or EAX,R10D
            and EAX,R12D
            or EAX,ECX
            add EAX,R15D
            add EAX,EDX
            cmp R9,64
            je .L_4440e0

            lea RDX,QWORD PTR [RIP+.L_444660]
            mov R15D,EBP
            mov R14D,R12D
            mov EBP,R13D
            mov R12D,EBX
            mov R13D,R11D
            mov EDX,DWORD PTR [RDX+R9*4]
            mov EBX,R10D
            mov R11D,R8D
            mov R10D,EAX
.L_44409d:

            cmp R9,15
            ja .L_443fc0

            movzx ECX,BYTE PTR [RSI+R9*4]
            movzx EAX,BYTE PTR [RSI+R9*4+1]
            mov RDI,QWORD PTR [RSP+8]
            shl EAX,16
            shl ECX,24
            or ECX,EAX
            movzx EAX,BYTE PTR [RSI+R9*4+3]
            or ECX,EAX
            movzx EAX,BYTE PTR [RSI+R9*4+2]
            shl EAX,8
            or EAX,ECX
            mov DWORD PTR [RDI+R9*4],EAX
            jmp .L_444014
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4440e0:

            mov ECX,EAX
            mov DWORD PTR [RSP+32],EAX
            mov DWORD PTR [RSP+60],EBP
            mov DWORD PTR [RSP+48],R8D
            mov DWORD PTR [RSP+56],R13D
            xor EAX,EAX
            mov DWORD PTR [RSP+52],R11D
            mov DWORD PTR [RSP+36],R10D
            mov DWORD PTR [RSP+40],EBX
            mov DWORD PTR [RSP+44],R12D
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+24]
            jmp .L_44411b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_444118:

            mov ECX,DWORD PTR [RSI+RAX*1]
.L_44411b:

            add DWORD PTR [RDX+RAX*1+8],ECX
            add RAX,4
            cmp RAX,32
            jne .L_444118

            mov RAX,QWORD PTR [RSP+328]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44414e

            add RSP,344
.L_444143:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44414e:

            call __stack_chk_fail@PLT
.L_444153:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_444160:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_44416b:

            mov EAX,DWORD PTR [RDI]
            mov EDX,64
            mov RBP,RDI
            mov RBX,RSI
            mov R13D,EAX
            and R13D,63
            sub EDX,R13D
            add EAX,R12D
            mov R14D,EDX
            mov DWORD PTR [RDI],EAX
            jae .L_444190

            add DWORD PTR [RDI+4],1
.L_444190:

            test R13D,R13D
            je .L_44419a

            cmp R14,R12
            jbe .L_4441e0
.L_44419a:

            cmp R12,63
            jbe .L_4441c8

            lea RAX,QWORD PTR [R12-64]
            and RAX,-64
            lea R14,QWORD PTR [RBX+RAX*1+64]
            nop
            nop
.L_4441b0:

            mov RSI,RBX
            mov RDI,RBP
            add RBX,64
            call .L_443f30

            cmp RBX,R14
            jne .L_4441b0

            and R12D,63
.L_4441c8:

            test R12,R12
            jne .L_444228
.L_4441cd:

            pop RBX
.L_4441ce:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4441e0:

            lea RSI,QWORD PTR [RBP+40]
            add R13,RSI
            cmp EDX,8
            jae .L_4442b8

            test DL,4
            jne .L_444317

            test EDX,EDX
            je .L_44420d

            movzx EAX,BYTE PTR [RBX]
            and EDX,2
            mov BYTE PTR [R13],AL
            jne .L_44432c
.L_44420d:

            mov RDI,RBP
            add RBX,R14
            sub R12,R14
            call .L_443f30

            xor R13D,R13D
            jmp .L_44419a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444228:

            cmp R12D,8
            lea RCX,QWORD PTR [RBP+R13*1+40]
            mov EAX,R12D
            jb .L_444288

            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RCX],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [RBX+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            lea RDX,QWORD PTR [RCX+8]
            and RDX,-8
            sub RCX,RDX
            lea EAX,DWORD PTR [R12+RCX*1]
            sub RBX,RCX
            and EAX,4294967288
            cmp EAX,8
            jb .L_4441cd

            and EAX,4294967288
            xor ECX,ECX
.L_44426c:

            mov ESI,ECX
            add ECX,8
            mov RDI,QWORD PTR [RBX+RSI*1]
            cmp ECX,EAX
            mov QWORD PTR [RDX+RSI*1],RDI
            jb .L_44426c

            jmp .L_4441cd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444288:

            and R12D,4
            jne .L_444304

            test EAX,EAX
            je .L_4441cd

            movzx EDX,BYTE PTR [RBX]
            test AL,2
            mov BYTE PTR [RCX],DL
            je .L_4441cd

            mov EDX,EAX
            movzx EAX,WORD PTR [RBX+RDX*1-2]
            mov WORD PTR [RCX+RDX*1-2],AX
            jmp .L_4441cd
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4442b8:

            mov RAX,QWORD PTR [RBX]
            mov R8,RBX
            mov QWORD PTR [R13],RAX
            mov RAX,QWORD PTR [RBX+R14*1-8]
            mov QWORD PTR [R13+R14*1-8],RAX
            lea RAX,QWORD PTR [R13+8]
            and RAX,-8
            sub R13,RAX
            add EDX,R13D
            sub R8,R13
            and EDX,4294967288
            cmp EDX,8
            jb .L_44420d

            and EDX,4294967288
            xor ECX,ECX
.L_4442ee:

            mov EDI,ECX
            add ECX,8
            mov R9,QWORD PTR [R8+RDI*1]
            cmp ECX,EDX
            mov QWORD PTR [RAX+RDI*1],R9
            jb .L_4442ee

            jmp .L_44420d
.L_444304:

            mov EDX,DWORD PTR [RBX]
            mov DWORD PTR [RCX],EDX
            mov EDX,EAX
            mov EAX,DWORD PTR [RBX+RDX*1-4]
            mov DWORD PTR [RCX+RDX*1-4],EAX
            jmp .L_4441cd
.L_444317:

            mov EAX,DWORD PTR [RBX]
            mov DWORD PTR [R13],EAX
            mov EAX,DWORD PTR [RBX+R14*1-4]
            mov DWORD PTR [R13+R14*1-4],EAX
            jmp .L_44420d
.L_44432c:

            movzx EAX,WORD PTR [RBX+R14*1-2]
            mov WORD PTR [R13+R14*1-2],AX
            jmp .L_44420d
.L_44433d:

            nop
            nop
            nop
.L_444340:

            test RDX,RDX
            je .L_444350

            jmp .L_444160
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444350:

            ret 
.L_444352:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_444360:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,24
.L_44436c:

            mov EDI,DWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RBX+4]
            mov ECX,EDI
            shr ECX,29
            shl EAX,3
            or EAX,ECX
            lea ECX,DWORD PTR [RDI*8]
            and EDI,63
            mov ESI,EAX
            mov BYTE PTR [RSP+2],AH
            mov BYTE PTR [RSP+3],AL
            shr ESI,24
            mov BYTE PTR [RSP+6],CH
            mov BYTE PTR [RSP+7],CL
            mov BYTE PTR [RSP],SIL
            mov ESI,EAX
            mov EAX,ECX
            shr EAX,24
            shr ESI,16
            mov BYTE PTR [RSP+4],AL
            mov EAX,ECX
            mov BYTE PTR [RSP+1],SIL
            shr EAX,16
            cmp EDI,55
            mov BYTE PTR [RSP+5],AL
            ja .L_4444f0

            mov EAX,56
            sub EAX,EDI
            mov EDX,EAX
.L_4443dc:

            lea RSI,QWORD PTR [RIP+.L_444620]
            mov RDI,RBX
            call .L_444160

            mov RSI,RSP
            mov EDX,8
            mov RDI,RBX
            call .L_444160

            movzx EAX,BYTE PTR [RBX+11]
            mov BYTE PTR [RBP],AL
            movzx EAX,WORD PTR [RBX+10]
            mov BYTE PTR [RBP+1],AL
            mov EAX,DWORD PTR [RBX+8]
            mov BYTE PTR [RBP+2],AH
            mov EAX,DWORD PTR [RBX+8]
            mov BYTE PTR [RBP+3],AL
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [RBP+4],AL
            movzx EAX,WORD PTR [RBX+14]
            mov BYTE PTR [RBP+5],AL
            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBP+6],AH
            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBP+7],AL
            movzx EAX,BYTE PTR [RBX+19]
            mov BYTE PTR [RBP+8],AL
            movzx EAX,WORD PTR [RBX+18]
            mov BYTE PTR [RBP+9],AL
            mov EAX,DWORD PTR [RBX+16]
            mov BYTE PTR [RBP+10],AH
            mov EAX,DWORD PTR [RBX+16]
            mov BYTE PTR [RBP+11],AL
            movzx EAX,BYTE PTR [RBX+23]
            mov BYTE PTR [RBP+12],AL
            movzx EAX,WORD PTR [RBX+22]
            mov BYTE PTR [RBP+13],AL
            mov EAX,DWORD PTR [RBX+20]
            mov BYTE PTR [RBP+14],AH
            mov EAX,DWORD PTR [RBX+20]
            mov BYTE PTR [RBP+15],AL
            movzx EAX,BYTE PTR [RBX+27]
            mov BYTE PTR [RBP+16],AL
            movzx EAX,WORD PTR [RBX+26]
            mov BYTE PTR [RBP+17],AL
            mov EAX,DWORD PTR [RBX+24]
            mov BYTE PTR [RBP+18],AH
            mov EAX,DWORD PTR [RBX+24]
            mov BYTE PTR [RBP+19],AL
            movzx EAX,BYTE PTR [RBX+31]
            mov BYTE PTR [RBP+20],AL
            movzx EAX,WORD PTR [RBX+30]
            mov BYTE PTR [RBP+21],AL
            mov EAX,DWORD PTR [RBX+28]
            mov BYTE PTR [RBP+22],AH
            mov EAX,DWORD PTR [RBX+28]
            mov BYTE PTR [RBP+23],AL
            movzx EAX,BYTE PTR [RBX+35]
            mov BYTE PTR [RBP+24],AL
            movzx EAX,WORD PTR [RBX+34]
            mov BYTE PTR [RBP+25],AL
            mov EAX,DWORD PTR [RBX+32]
            mov BYTE PTR [RBP+26],AH
            mov EAX,DWORD PTR [RBX+32]
            mov BYTE PTR [RBP+27],AL
            mov EAX,DWORD PTR [RBX+104]
            test EAX,EAX
            jne .L_4444d2

            movzx EAX,BYTE PTR [RBX+39]
            mov BYTE PTR [RBP+28],AL
            movzx EAX,WORD PTR [RBX+38]
            mov BYTE PTR [RBP+29],AL
            mov EAX,DWORD PTR [RBX+36]
            mov BYTE PTR [RBP+30],AH
            mov EAX,DWORD PTR [RBX+36]
            mov BYTE PTR [RBP+31],AL
.L_4444d2:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4444fe

            add RSP,24
.L_4444e6:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4444f0:

            mov EAX,120
            sub EAX,EDI
            mov EDX,EAX
            jmp .L_4443dc
.L_4444fe:

            call __stack_chk_fail@PLT
.L_444503:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_444510:

            push RBP
            push RBX
            mov RBP,RDX
            mov EDX,ECX
            mov R8,RDI
            mov ECX,13
            sub RSP,136
.L_444526:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RBX,RSP
            test EDX,EDX
            mov RDI,RBX

            rep stosq QWORD PTR [RDI]

            jne .L_4445d6

            movabs RAX,-4942790177982912921
            mov QWORD PTR [RSP+8],RAX
            movabs RAX,-6534734903820487822
            mov QWORD PTR [RSP+16],RAX
            movabs RAX,-7276294671082564993
            mov QWORD PTR [RSP+24],RAX
            movabs RAX,6620516960021240235
            mov QWORD PTR [RSP+32],RAX
.L_444583:

            test RSI,RSI
            mov DWORD PTR [RSP+104],EDX
            je .L_44459a

            mov RDX,RSI
            mov RDI,RBX
            mov RSI,R8
            call .L_444160
.L_44459a:

            mov RDI,RBX
            mov RSI,RBP
            call .L_444360

            lea RAX,QWORD PTR [RBX+108]
            mov RDI,RBX
            nop
            nop
            nop
            nop
.L_4445b0:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_4445b0

            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR FS:[40]
            jne .L_444617

            add RSP,136
.L_4445d3:

            pop RBX
            pop RBP
            ret 
.L_4445d6:

            movabs RAX,3926247204440088280
            mov QWORD PTR [RSP+8],RAX
            movabs RAX,-644479594506691305
            mov QWORD PTR [RSP+16],RAX
            movabs RAX,7518782744944446257
            mov QWORD PTR [RSP+24],RAX
            movabs RAX,-4685344894838272089
            mov QWORD PTR [RSP+32],RAX
            jmp .L_444583
.L_444617:

            call __stack_chk_fail@PLT
.L_44461c:
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_444620:
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444660:
          .byte 0x98
          .byte 0x2f
          .byte 0x8a
          .byte 0x42
          .byte 0x91
          .byte 0x44
          .byte 0x37
          .byte 0x71
          .byte 0xcf
          .byte 0xfb
          .byte 0xc0
          .byte 0xb5
          .byte 0xa5
          .byte 0xdb
          .byte 0xb5
          .byte 0xe9
          .byte 0x5b
          .byte 0xc2
          .byte 0x56
          .byte 0x39
          .byte 0xf1
          .byte 0x11
          .byte 0xf1
          .byte 0x59
          .byte 0xa4
          .byte 0x82
          .byte 0x3f
          .byte 0x92
          .byte 0xd5
          .byte 0x5e
          .byte 0x1c
          .byte 0xab
          .byte 0x98
          .byte 0xaa
          .byte 0x7
          .byte 0xd8
          .byte 0x1
          .byte 0x5b
          .byte 0x83
          .byte 0x12
          .byte 0xbe
          .byte 0x85
          .byte 0x31
          .byte 0x24
          .byte 0xc3
          .byte 0x7d
          .byte 0xc
          .byte 0x55
          .byte 0x74
          .byte 0x5d
          .byte 0xbe
          .byte 0x72
          .byte 0xfe
          .byte 0xb1
          .byte 0xde
          .byte 0x80
          .byte 0xa7
          .byte 0x6
          .byte 0xdc
          .byte 0x9b
          .byte 0x74
          .byte 0xf1
          .byte 0x9b
          .byte 0xc1
          .byte 0xc1
          .byte 0x69
          .byte 0x9b
          .byte 0xe4
          .byte 0x86
          .byte 0x47
          .byte 0xbe
          .byte 0xef
          .byte 0xc6
          .byte 0x9d
          .byte 0xc1
          .byte 0xf
          .byte 0xcc
          .byte 0xa1
          .byte 0xc
          .byte 0x24
          .byte 0x6f
          .byte 0x2c
          .byte 0xe9
          .byte 0x2d
          .byte 0xaa
          .byte 0x84
          .byte 0x74
          .byte 0x4a
          .byte 0xdc
          .byte 0xa9
          .byte 0xb0
          .byte 0x5c
          .byte 0xda
          .byte 0x88
          .byte 0xf9
          .byte 0x76
          .byte 0x52
          .byte 0x51
          .byte 0x3e
          .byte 0x98
          .byte 0x6d
          .byte 0xc6
          .byte 0x31
          .byte 0xa8
          .byte 0xc8
          .byte 0x27
          .byte 0x3
          .byte 0xb0
          .byte 0xc7
          .byte 0x7f
          .byte 0x59
          .byte 0xbf
          .byte 0xf3
          .byte 0xb
          .byte 0xe0
          .byte 0xc6
          .byte 0x47
          .byte 0x91
          .byte 0xa7
          .byte 0xd5
          .byte 0x51
          .byte 0x63
          .byte 0xca
          .byte 0x6
          .byte 0x67
          .byte 0x29
          .byte 0x29
          .byte 0x14
          .byte 0x85
          .byte 0xa
          .byte 0xb7
          .byte 0x27
          .byte 0x38
          .byte 0x21
          .byte 0x1b
          .byte 0x2e
          .byte 0xfc
          .byte 0x6d
          .byte 0x2c
          .byte 0x4d
          .byte 0x13
          .byte 0xd
          .byte 0x38
          .byte 0x53
          .byte 0x54
          .byte 0x73
          .byte 0xa
          .byte 0x65
          .byte 0xbb
          .byte 0xa
          .byte 0x6a
          .byte 0x76
          .byte 0x2e
          .byte 0xc9
          .byte 0xc2
          .byte 0x81
          .byte 0x85
          .byte 0x2c
          .byte 0x72
          .byte 0x92
          .byte 0xa1
          .byte 0xe8
          .byte 0xbf
          .byte 0xa2
          .byte 0x4b
          .byte 0x66
          .byte 0x1a
          .byte 0xa8
          .byte 0x70
          .byte 0x8b
          .byte 0x4b
          .byte 0xc2
          .byte 0xa3
          .byte 0x51
          .byte 0x6c
          .byte 0xc7
          .byte 0x19
          .byte 0xe8
          .byte 0x92
          .byte 0xd1
          .byte 0x24
          .byte 0x6
          .byte 0x99
          .byte 0xd6
          .byte 0x85
          .byte 0x35
          .byte 0xe
          .byte 0xf4
          .byte 0x70
          .byte 0xa0
          .byte 0x6a
          .byte 0x10
          .byte 0x16
          .byte 0xc1
          .byte 0xa4
          .byte 0x19
          .byte 0x8
          .byte 0x6c
          .byte 0x37
          .byte 0x1e
          .byte 0x4c
          .byte 0x77
          .byte 0x48
          .byte 0x27
          .byte 0xb5
          .byte 0xbc
          .byte 0xb0
          .byte 0x34
          .byte 0xb3
          .byte 0xc
          .byte 0x1c
          .byte 0x39
          .byte 0x4a
          .byte 0xaa
          .byte 0xd8
          .byte 0x4e
          .byte 0x4f
          .byte 0xca
          .byte 0x9c
          .byte 0x5b
          .byte 0xf3
          .byte 0x6f
          .byte 0x2e
          .byte 0x68
          .byte 0xee
          .byte 0x82
          .byte 0x8f
          .byte 0x74
          .byte 0x6f
          .byte 0x63
          .byte 0xa5
          .byte 0x78
          .byte 0x14
          .byte 0x78
          .byte 0xc8
          .byte 0x84
          .byte 0x8
          .byte 0x2
          .byte 0xc7
          .byte 0x8c
          .byte 0xfa
          .byte 0xff
          .byte 0xbe
          .byte 0x90
          .byte 0xeb
          .byte 0x6c
          .byte 0x50
          .byte 0xa4
          .byte 0xf7
          .byte 0xa3
          .byte 0xf9
          .byte 0xbe
          .byte 0xf2
          .byte 0x78
          .byte 0x71
          .byte 0xc6
.L_444760:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+280],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,288
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44478f:

            nop
.L_444790:

            test RDI,RDI
            je .L_4447ac

            lea RAX,QWORD PTR [RDI+288]
            nop
            nop
            nop
            nop
.L_4447a0:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RAX,RDI
            jne .L_4447a0
.L_4447ac:

            ret 
.L_4447ae:

            nop
            nop
.L_4447b0:

            cmp EDX,192
            je .L_444870

            cmp EDX,256
            je .L_444860

            cmp EDX,128
            je .L_4447e0

            mov EAX,4294967264
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4447e0:

            mov DWORD PTR [RDI],10
.L_4447e6:

            lea RAX,QWORD PTR [RDI+16]
            push RBP
            shr EDX,5
            push RBX
.L_4447ef:

            xor R8D,R8D
            mov QWORD PTR [RDI+8],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_444800:

            movzx ECX,BYTE PTR [RSI+R8*4+1]
            movzx R9D,BYTE PTR [RSI+R8*4+2]
            shl ECX,8
            shl R9D,16
            or ECX,R9D
            movzx R9D,BYTE PTR [RSI+R8*4]
            or ECX,R9D
            movzx R9D,BYTE PTR [RSI+R8*4+3]
            shl R9D,24
            or ECX,R9D
            mov DWORD PTR [RAX+R8*4],ECX
            add R8,1
            cmp EDX,R8D
            ja .L_444800

            mov EDX,DWORD PTR [RDI]
            cmp EDX,12
            je .L_444880

            cmp EDX,14
            je .L_4449a8

            cmp EDX,10
            je .L_444920

            xor EAX,EAX
            pop RBX
.L_444854:

            pop RBP
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444860:

            mov DWORD PTR [RDI],14
            jmp .L_4447e6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444870:

            mov DWORD PTR [RDI],12
            jmp .L_4447e6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444880:

            lea RSI,QWORD PTR [RIP+.L_445540]
            add RDI,208
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_447680]
            jmp .L_4448a3
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4448a0:

            mov R9D,DWORD PTR [RSI]
.L_4448a3:

            mov EBX,DWORD PTR [RAX+20]
            add RAX,24
            add RSI,4
            mov R8D,EBX
            movzx EDX,BH
            shr R8D,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,16
            xor EDX,R8D
            movzx R8D,BL
            xor EDX,DWORD PTR [RAX-24]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,24
            xor EDX,R8D
            mov R8D,EBX
            shr R8D,16
            movzx R8D,R8B
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,8
            xor EDX,R8D
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-20]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-16]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+12],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+16],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+20],EDX
            cmp RAX,RDI
            jne .L_4448a0

            xor EAX,EAX
            pop RBX
.L_44491c:

            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_444920:

            lea RDI,QWORD PTR [RIP+.L_445544]
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_447680]
            lea R8,QWORD PTR [RDI+36]
            jmp .L_444947
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444940:

            mov R9D,DWORD PTR [RDI]
            add RDI,4
.L_444947:

            mov EBX,DWORD PTR [RAX+12]
            add RAX,16
            mov ESI,EBX
            movzx EDX,BH
            shr ESI,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,16
            xor EDX,ESI
            movzx ESI,BL
            xor EDX,DWORD PTR [RAX-16]
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,24
            xor EDX,ESI
            mov ESI,EBX
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,8
            xor EDX,ESI
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+12],EDX
            cmp R8,RDI
            jne .L_444940

            xor EAX,EAX
            pop RBX
.L_4449a2:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4449a8:

            lea RSI,QWORD PTR [RIP+.L_445540]
            add RDI,240
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_447680]
            jmp .L_4449cb
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4449c8:

            mov R9D,DWORD PTR [RSI]
.L_4449cb:

            mov EBX,DWORD PTR [RAX+28]
            add RAX,32
            add RSI,4
            mov R8D,EBX
            movzx EDX,BH
            shr R8D,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,16
            xor EDX,R8D
            movzx R8D,BL
            xor EDX,DWORD PTR [RAX-32]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,24
            xor EDX,R8D
            mov R8D,EBX
            shr R8D,16
            movzx R8D,R8B
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,8
            xor EDX,R8D
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-28]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-24]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,DWORD PTR [RAX-20]
            mov R9D,EDX
            movzx R8D,DL
            mov DWORD PTR [RAX+12],EDX
            shr R9D,24
            movzx R8D,BYTE PTR [RCX+R8*1]
            movzx EBP,DH
            movzx R9D,BYTE PTR [RCX+R9*1]
            xor R8D,DWORD PTR [RAX-16]
            shr EDX,16
            movzx EDX,DL
            movzx EDX,BYTE PTR [RCX+RDX*1]
            shl R9D,24
            xor R8D,R9D
            movzx R9D,BYTE PTR [RCX+RBP*1]
            shl EDX,16
            shl R9D,8
            xor R8D,R9D
            xor EDX,R8D
            mov DWORD PTR [RAX+16],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+20],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+24],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+28],EDX
            cmp RAX,RDI
            jne .L_4449c8

            xor EAX,EAX
            pop RBX
.L_444a90:

            pop RBP
            ret 
.L_444a92:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_444aa0:

            push R15
            push R14
            mov R11,RDI
            push R13
            push R12
            mov ECX,36
            push RBP
            push RBX
            sub RSP,328
.L_444ab9:

            lea R10,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+312],RAX
            xor EAX,EAX
            mov RDI,R10

            rep stosq QWORD PTR [RDI]

            lea RAX,QWORD PTR [R11+16]
            mov RDI,R10
            mov QWORD PTR [R11+8],RAX
            call .L_4447b0

            test EAX,EAX
            mov DWORD PTR [RSP+8],EAX
            jne .L_444c08

            mov EDX,DWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+24]
            lea R14,QWORD PTR [R11+32]
            lea ECX,DWORD PTR [RDX*4]
            mov DWORD PTR [R11],EDX
            movsxd RCX,ECX
            lea R13,QWORD PTR [RSI+RCX*4]
            mov ECX,DWORD PTR [R13]
            sub R13,16
            mov DWORD PTR [R11+16],ECX
            mov ECX,DWORD PTR [R13+20]
            mov DWORD PTR [R11+20],ECX
            mov ECX,DWORD PTR [R13+24]
            mov DWORD PTR [R11+24],ECX
            mov ECX,DWORD PTR [R13+28]
            cmp EDX,1
            mov DWORD PTR [R11+28],ECX
            jle .L_444be9

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_446180]
            lea RDI,QWORD PTR [RIP+.L_447680]
            mov DWORD PTR [RSP+12],EDX
            not RDX
            lea RBP,QWORD PTR [RIP+.L_445580]
            shl RDX,4
            lea RBX,QWORD PTR [RIP+.L_445d80]
            lea R11,QWORD PTR [RIP+.L_445980]
            lea RAX,QWORD PTR [R13+RDX*1]
            mov R8,R13
            mov R9,R14
            mov QWORD PTR [RSP],RAX
            nop
            nop
.L_444b80:

            xor ECX,ECX
.L_444b82:

            mov EAX,DWORD PTR [R8+RCX*1]
            movzx EDX,AL
            movzx ESI,BYTE PTR [RDI+RDX*1]
            mov EDX,EAX
            shr EDX,24
            movzx R15D,BYTE PTR [RDI+RDX*1]
            mov EDX,DWORD PTR [R12+RSI*4]
            movzx ESI,AH
            shr EAX,16
            movzx ESI,BYTE PTR [RDI+RSI*1]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDI+RAX*1]
            xor EDX,DWORD PTR [RBP+R15*4]
            xor EDX,DWORD PTR [RBX+RSI*4]
            xor EDX,DWORD PTR [R11+RAX*4]
            mov DWORD PTR [R9+RCX*1],EDX
            add RCX,4
            cmp RCX,16
            jne .L_444b82

            add R9,16
            sub R8,16
            cmp R8,QWORD PTR [RSP]
            jne .L_444b80

            mov EDX,DWORD PTR [RSP+12]
            add RDX,1
            mov RCX,RDX
            shl RCX,4
            sub R13,RCX
            add R14,RCX
.L_444be9:

            mov EDX,DWORD PTR [R13]
            mov DWORD PTR [R14],EDX
            mov EDX,DWORD PTR [R13+4]
            mov DWORD PTR [R14+4],EDX
            mov EDX,DWORD PTR [R13+8]
            mov DWORD PTR [R14+8],EDX
            mov EDX,DWORD PTR [R13+12]
            mov DWORD PTR [R14+12],EDX
.L_444c08:

            lea RDX,QWORD PTR [R10+288]
            nop
.L_444c10:

            mov BYTE PTR [R10],0
            add R10,1
            cmp R10,RDX
            jne .L_444c10

            mov RBX,QWORD PTR [RSP+312]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_444c46

            add RSP,328
.L_444c3b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_444c46:

            call __stack_chk_fail@PLT
.L_444c4b:

            nop
            nop
            nop
            nop
            nop
.L_444c50:

            push R15
            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            push RBX
.L_444c5d:

            mov RDX,QWORD PTR [RDI+8]
            mov R8D,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RSI+4]
            mov ECX,DWORD PTR [RSI+8]
            mov ESI,DWORD PTR [RSI+12]
            xor R8D,DWORD PTR [RDX]
            xor EAX,DWORD PTR [RDX+4]
            lea R14,QWORD PTR [RDX+16]
            xor ECX,DWORD PTR [RDX+8]
            xor ESI,DWORD PTR [RDX+12]
            mov EDX,DWORD PTR [RDI]
            sar EDX,1
            cmp EDX,1
            jle .L_445078

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_447280]
            lea RBP,QWORD PTR [RIP+.L_446680]
            mov DWORD PTR [RSP-12],EDX
            add RDX,1
            lea R11,QWORD PTR [RIP+.L_446e80]
            shl RDX,5
            lea R10,QWORD PTR [RIP+.L_446a80]
            mov QWORD PTR [RSP-8],R13
            lea RDI,QWORD PTR [R14+RDX*1]
            mov R9,R14
            mov R13,RDI
            nop
            nop
            nop
            nop
.L_444cc8:

            mov EDX,ESI
            movzx EDI,R8B
            mov EBX,R8D
            shr EDX,24
            mov EDI,DWORD PTR [R12+RDI*4]
            shr EBX,24
            xor EDI,DWORD PTR [RBP+RDX*4]
            movzx EDX,AH
            mov R15D,EAX
            xor EDI,DWORD PTR [R9]
            shr R15D,24
            xor EDI,DWORD PTR [R11+RDX*4]
            mov EDX,ECX
            shr EDX,16
            movzx EDX,DL
            xor EDI,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            shr EAX,16
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RBX*4]
            movzx EBX,CH
            xor EDX,DWORD PTR [R9+4]
            movzx EAX,AL
            xor EDX,DWORD PTR [R11+RBX*4]
            mov EBX,ESI
            shr EBX,16
            movzx EBX,BL
            xor EDX,DWORD PTR [R10+RBX*4]
            movzx EBX,CL
            shr ECX,24
            mov EBX,DWORD PTR [R12+RBX*4]
            xor EBX,DWORD PTR [RBP+R15*4]
            mov R15D,R8D
            xor EBX,DWORD PTR [R9+8]
            shr R15D,16
            movzx R15D,R15B
            mov DWORD PTR [RSP-16],EDX
            mov EDX,ESI
            movzx ESI,SIL
            movzx EDX,DH
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RCX*4]
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            xor ESI,DWORD PTR [R9+12]
            movzx ECX,DH
            xor EBX,DWORD PTR [R10+R15*4]
            mov EDX,DWORD PTR [RSP-16]
            xor ESI,DWORD PTR [R11+RCX*4]
            movzx ECX,DIL
            xor ESI,DWORD PTR [R10+RAX*4]
            mov R8D,DWORD PTR [R12+RCX*4]
            mov ECX,EDI
            shr ECX,24
            mov R15D,EDX
            mov EAX,ESI
            shr EAX,24
            xor R8D,DWORD PTR [RBP+RAX*4]
            movzx EAX,DH
            xor R8D,DWORD PTR [R9+16]
            xor R8D,DWORD PTR [R11+RAX*4]
            mov EAX,EBX
            shr EAX,16
            movzx EAX,AL
            xor R8D,DWORD PTR [R10+RAX*4]
            movzx EAX,DL
            mov EDX,ESI
            mov EAX,DWORD PTR [R12+RAX*4]
            xor EAX,DWORD PTR [RBP+RCX*4]
            movzx ECX,BH
            xor EAX,DWORD PTR [R9+20]
            shr R15D,24
            movzx EDX,DH
            xor EAX,DWORD PTR [R11+RCX*4]
            mov ECX,ESI
            movzx ESI,SIL
            shr ECX,16
            add R9,32
            movzx ECX,CL
            xor EAX,DWORD PTR [R10+RCX*4]
            movzx ECX,BL
            shr EBX,24
            mov ECX,DWORD PTR [R12+RCX*4]
            xor ECX,DWORD PTR [RBP+R15*4]
            mov R15D,EDI
            xor ECX,DWORD PTR [R9-8]
            mov ESI,DWORD PTR [R12+RSI*4]
            shr R15D,16
            xor ECX,DWORD PTR [R11+RDX*4]
            mov EDX,DWORD PTR [RSP-16]
            movzx R15D,R15B
            xor ESI,DWORD PTR [RBP+RBX*4]
            mov EBX,EDI
            xor ECX,DWORD PTR [R10+R15*4]
            xor ESI,DWORD PTR [R9-4]
            movzx EDI,BH
            shr EDX,16
            xor ESI,DWORD PTR [R11+RDI*4]
            movzx EDX,DL
            xor ESI,DWORD PTR [R10+RDX*4]
            cmp R13,R9
            jne .L_444cc8

            mov EDX,DWORD PTR [RSP-12]
            mov R13,QWORD PTR [RSP-8]
            add RDX,1
            shl RDX,5
            add R14,RDX
.L_444e3f:

            mov EDX,ESI
            movzx EDI,R8B
            mov R9D,R8D
            shr EDX,24
            mov EDI,DWORD PTR [R12+RDI*4]
            shr R9D,24
            xor EDI,DWORD PTR [RBP+RDX*4]
            movzx EDX,AH
            movzx EBX,CH
            xor EDI,DWORD PTR [R14]
            xor EDI,DWORD PTR [R11+RDX*4]
            mov EDX,ECX
            shr EDX,16
            movzx EDX,DL
            xor EDI,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+R9*4]
            mov R9D,ESI
            xor EDX,DWORD PTR [R14+4]
            shr R9D,16
            xor EDX,DWORD PTR [R11+RBX*4]
            movzx R9D,R9B
            movzx EBX,CL
            xor EDX,DWORD PTR [R10+R9*4]
            mov R9D,EAX
            mov EBX,DWORD PTR [R12+RBX*4]
            shr R9D,24
            shr ECX,24
            shr EAX,16
            xor EBX,DWORD PTR [RBP+R9*4]
            movzx EAX,AL
            mov R9D,R8D
            xor EBX,DWORD PTR [R14+8]
            shr R9D,16
            movzx R9D,R9B
            mov R15D,EBX
            mov EBX,ESI
            movzx ESI,SIL
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RCX*4]
            movzx EBX,BH
            mov ECX,DWORD PTR [R14+12]
            mov EBX,DWORD PTR [R11+RBX*4]
            xor ECX,ESI
            xor EBX,R15D
            xor EBX,DWORD PTR [R10+R9*4]
            mov ESI,ECX
            mov ECX,R8D
            movzx ECX,CH
            xor ESI,DWORD PTR [R11+RCX*4]
            mov ECX,ESI
            xor ECX,DWORD PTR [R10+RAX*4]
            lea RAX,QWORD PTR [RIP+.L_447680]
            movzx ESI,DIL
            mov R10D,EDX
            movzx R9D,BYTE PTR [RAX+RSI*1]
            xor R9D,DWORD PTR [R14+16]
            mov ESI,ECX
            movzx EBP,CH
            shr ESI,24
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R9D,ESI
            movzx ESI,DH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R9D,ESI
            mov ESI,EBX
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R9D,ESI
            movzx ESI,DL
            shr R10D,24
            movzx R8D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDI
            shr EDX,16
            shr ESI,24
            xor R8D,DWORD PTR [R14+20]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R8D,ESI
            movzx ESI,BH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R8D,ESI
            mov ESI,ECX
            movzx ECX,CL
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R8D,ESI
            movzx ESI,BL
            shr EBX,24
            movzx ESI,BYTE PTR [RAX+RSI*1]
            xor ESI,DWORD PTR [R14+24]
            movzx R10D,BYTE PTR [RAX+R10*1]
            movzx ECX,BYTE PTR [RAX+RCX*1]
            xor ECX,DWORD PTR [R14+28]
            mov BYTE PTR [R13],R9B
            mov BYTE PTR [R13+4],R8B
            shl R10D,24
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBP*1]
            shl R10D,8
            xor ESI,R10D
            mov R10D,EDI
            shr R10D,16
            movzx R10D,R10B
            movzx R10D,BYTE PTR [RAX+R10*1]
            shl R10D,16
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBX*1]
            mov EBX,EDI
            movzx EDI,BH
            mov EBX,R9D
            mov BYTE PTR [R13+8],SIL
            movzx EDI,BYTE PTR [RAX+RDI*1]
            movzx EAX,BYTE PTR [RAX+RDX*1]
            mov EDX,R9D
            shr EDX,16
            movzx EBX,BH
            shr R9D,24
            mov BYTE PTR [R13+2],DL
            shl R10D,24
            mov EDX,R8D
            mov BYTE PTR [R13+1],BL
            shr EDX,16
            xor ECX,R10D
            shl EDI,8
            mov EBX,R8D
            mov BYTE PTR [R13+6],DL
            xor ECX,EDI
            shl EAX,16
            movzx EBX,BH
            mov EDX,ESI
            mov BYTE PTR [R13+5],BL
            xor EAX,ECX
            shr R8D,24
            mov EBX,ESI
            shr EDX,16
            mov BYTE PTR [R13+10],DL
            movzx EBX,BH
            mov EDX,EAX
            mov BYTE PTR [R13+9],BL
            mov BYTE PTR [R13+12],AL
            movzx EBX,AH
            shr ESI,24
            shr EAX,24
            shr EDX,16
            mov BYTE PTR [R13+15],AL
            mov BYTE PTR [R13+3],R9B
            xor EAX,EAX
            mov BYTE PTR [R13+7],R8B
            mov BYTE PTR [R13+11],SIL
            mov BYTE PTR [R13+13],BL
            mov BYTE PTR [R13+14],DL
            pop RBX
.L_445069:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_445078:

            lea R12,QWORD PTR [RIP+.L_447280]
            lea RBP,QWORD PTR [RIP+.L_446680]
            lea R11,QWORD PTR [RIP+.L_446e80]
            lea R10,QWORD PTR [RIP+.L_446a80]
            jmp .L_444e3f
.L_445099:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4450a0:

            jmp .L_444c50
.L_4450a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4450b0:

            push R15
            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            push RBX
.L_4450bd:

            mov RDX,QWORD PTR [RDI+8]
            mov ECX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RSI+4]
            mov R8D,DWORD PTR [RSI+8]
            mov ESI,DWORD PTR [RSI+12]
            xor ECX,DWORD PTR [RDX]
            xor EAX,DWORD PTR [RDX+4]
            lea R14,QWORD PTR [RDX+16]
            xor R8D,DWORD PTR [RDX+8]
            xor ESI,DWORD PTR [RDX+12]
            mov EDX,DWORD PTR [RDI]
            sar EDX,1
            cmp EDX,1
            jle .L_4454e0

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_446180]
            lea RBP,QWORD PTR [RIP+.L_445580]
            mov DWORD PTR [RSP-12],EDX
            add RDX,1
            lea R11,QWORD PTR [RIP+.L_445d80]
            shl RDX,5
            lea R10,QWORD PTR [RIP+.L_445980]
            mov QWORD PTR [RSP-8],R13
            lea RBX,QWORD PTR [R14+RDX*1]
            mov R9,R14
            mov R13,RBX
            nop
            nop
            nop
            nop
.L_445128:

            mov EDX,EAX
            movzx EDI,CL
            mov R15D,ESI
            shr EDX,24
            mov EBX,DWORD PTR [R12+RDI*4]
            mov EDI,R8D
            xor EBX,DWORD PTR [RBP+RDX*4]
            mov EDX,ESI
            shr EDI,24
            xor EBX,DWORD PTR [R9]
            movzx EDX,DH
            shr R15D,24
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            shr EDX,16
            movzx EDX,DL
            xor EBX,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RDI*4]
            movzx EDI,CH
            xor EDX,DWORD PTR [R9+4]
            xor EDX,DWORD PTR [R11+RDI*4]
            mov EDI,ESI
            movzx ESI,SIL
            shr EDI,16
            mov ESI,DWORD PTR [R12+RSI*4]
            movzx EDI,DIL
            xor EDX,DWORD PTR [R10+RDI*4]
            movzx EDI,R8B
            mov EDI,DWORD PTR [R12+RDI*4]
            xor EDI,DWORD PTR [RBP+R15*4]
            mov R15D,ECX
            shr ECX,24
            xor EDI,DWORD PTR [R9+8]
            shr R15D,16
            xor ESI,DWORD PTR [RBP+RCX*4]
            mov ECX,R8D
            movzx R15D,R15B
            xor ESI,DWORD PTR [R9+12]
            mov DWORD PTR [RSP-16],EDX
            movzx ECX,CH
            movzx EDX,AH
            shr EAX,16
            xor ESI,DWORD PTR [R11+RCX*4]
            xor EDI,DWORD PTR [R11+RDX*4]
            movzx EAX,AL
            mov EDX,DWORD PTR [RSP-16]
            xor ESI,DWORD PTR [R10+RAX*4]
            xor EDI,DWORD PTR [R10+R15*4]
            movzx ECX,BL
            mov ECX,DWORD PTR [R12+RCX*4]
            mov EAX,EDX
            movzx EDX,BH
            shr EAX,24
            xor ECX,DWORD PTR [RBP+RAX*4]
            mov EAX,ESI
            mov R8D,EDI
            xor ECX,DWORD PTR [R9+16]
            movzx EAX,AH
            shr R8D,24
            xor ECX,DWORD PTR [R11+RAX*4]
            mov EAX,EDI
            mov R15D,ESI
            shr EAX,16
            movzx EAX,AL
            xor ECX,DWORD PTR [R10+RAX*4]
            movzx EAX,BYTE PTR [RSP-16]
            mov EAX,DWORD PTR [R12+RAX*4]
            xor EAX,DWORD PTR [RBP+R8*4]
            mov R8D,ESI
            xor EAX,DWORD PTR [R9+20]
            shr R8D,16
            shr R15D,24
            xor EAX,DWORD PTR [R11+RDX*4]
            movzx R8D,R8B
            movzx ESI,SIL
            xor EAX,DWORD PTR [R10+R8*4]
            mov EDX,DWORD PTR [RSP-16]
            movzx R8D,DIL
            mov R8D,DWORD PTR [R12+R8*4]
            xor R8D,DWORD PTR [RBP+R15*4]
            mov R15D,EBX
            xor R8D,DWORD PTR [R9+24]
            shr EBX,24
            add R9,32
            movzx EDX,DH
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RBX*4]
            xor R8D,DWORD PTR [R11+RDX*4]
            mov EDX,DWORD PTR [RSP-16]
            mov EBX,EDI
            shr R15D,16
            xor ESI,DWORD PTR [R9-4]
            movzx EDI,BH
            xor ESI,DWORD PTR [R11+RDI*4]
            movzx R15D,R15B
            shr EDX,16
            xor R8D,DWORD PTR [R10+R15*4]
            movzx EDX,DL
            xor ESI,DWORD PTR [R10+RDX*4]
            cmp R13,R9
            jne .L_445128

            mov EDX,DWORD PTR [RSP-12]
            mov R13,QWORD PTR [RSP-8]
            add RDX,1
            shl RDX,5
            add R14,RDX
.L_4452ac:

            mov EDX,EAX
            movzx EDI,CL
            mov R9D,ESI
            shr EDX,24
            mov EBX,DWORD PTR [R12+RDI*4]
            mov EDI,R8D
            xor EBX,DWORD PTR [RBP+RDX*4]
            mov EDX,ESI
            shr EDI,24
            xor EBX,DWORD PTR [R14]
            movzx EDX,DH
            shr R9D,24
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            shr EDX,16
            movzx EDX,DL
            xor EBX,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RDI*4]
            movzx EDI,CH
            xor EDX,DWORD PTR [R14+4]
            xor EDX,DWORD PTR [R11+RDI*4]
            mov EDI,ESI
            movzx ESI,SIL
            shr EDI,16
            mov ESI,DWORD PTR [R12+RSI*4]
            movzx EDI,DIL
            xor EDX,DWORD PTR [R10+RDI*4]
            movzx EDI,R8B
            mov EDI,DWORD PTR [R12+RDI*4]
            xor EDI,DWORD PTR [RBP+R9*4]
            mov R9D,ECX
            shr ECX,24
            xor EDI,DWORD PTR [R14+8]
            shr R9D,16
            xor ESI,DWORD PTR [RBP+RCX*4]
            mov ECX,DWORD PTR [R14+12]
            movzx R9D,R9B
            movzx EBP,DH
            mov R15D,EDI
            movzx EDI,AH
            shr EAX,16
            xor ECX,ESI
            mov EDI,DWORD PTR [R11+RDI*4]
            movzx EAX,AL
            mov ESI,ECX
            mov ECX,R8D
            movzx ECX,CH
            xor ESI,DWORD PTR [R11+RCX*4]
            xor EDI,R15D
            xor EDI,DWORD PTR [R10+R9*4]
            mov ECX,ESI
            xor ECX,DWORD PTR [R10+RAX*4]
            lea RAX,QWORD PTR [RIP+.L_446580]
            movzx ESI,BL
            movzx R9D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDX
            shr ESI,24
            xor R9D,DWORD PTR [R14+16]
            movzx ESI,BYTE PTR [RAX+RSI*1]
            mov R10D,ECX
            shl ESI,24
            xor R9D,ESI
            movzx ESI,CH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R9D,ESI
            mov ESI,EDI
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R9D,ESI
            movzx ESI,DL
            shr R10D,24
            movzx R8D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDI
            shr EDX,16
            shr ESI,24
            xor R8D,DWORD PTR [R14+20]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R8D,ESI
            movzx ESI,BH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R8D,ESI
            mov ESI,ECX
            movzx ECX,CL
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R8D,ESI
            movzx ESI,DIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            xor ESI,DWORD PTR [R14+24]
            movzx R10D,BYTE PTR [RAX+R10*1]
            movzx ECX,BYTE PTR [RAX+RCX*1]
            xor ECX,DWORD PTR [R14+28]
            mov BYTE PTR [R13],R9B
            mov BYTE PTR [R13+4],R8B
            shl R10D,24
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBP*1]
            shl R10D,8
            xor ESI,R10D
            mov R10D,EBX
            shr EBX,24
            shr R10D,16
            movzx R10D,R10B
            movzx R10D,BYTE PTR [RAX+R10*1]
            shl R10D,16
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBX*1]
            mov EBX,EDI
            movzx EDI,BH
            mov EBX,R9D
            mov BYTE PTR [R13+8],SIL
            movzx EDI,BYTE PTR [RAX+RDI*1]
            movzx EAX,BYTE PTR [RAX+RDX*1]
            mov EDX,R9D
            shr EDX,16
            movzx EBX,BH
            shr R9D,24
            mov BYTE PTR [R13+2],DL
            shl R10D,24
            mov EDX,R8D
            mov BYTE PTR [R13+1],BL
            shr EDX,16
            xor ECX,R10D
            shl EDI,8
            mov EBX,R8D
            mov BYTE PTR [R13+6],DL
            xor ECX,EDI
            shl EAX,16
            movzx EBX,BH
            mov EDX,ESI
            mov BYTE PTR [R13+5],BL
            xor EAX,ECX
            shr R8D,24
            mov EBX,ESI
            shr EDX,16
            mov BYTE PTR [R13+10],DL
            movzx EBX,BH
            mov EDX,EAX
            mov BYTE PTR [R13+9],BL
            mov BYTE PTR [R13+12],AL
            movzx EBX,AH
            shr ESI,24
            shr EAX,24
            shr EDX,16
            mov BYTE PTR [R13+15],AL
            mov BYTE PTR [R13+3],R9B
            xor EAX,EAX
            mov BYTE PTR [R13+7],R8B
            mov BYTE PTR [R13+11],SIL
            mov BYTE PTR [R13+13],BL
            mov BYTE PTR [R13+14],DL
            pop RBX
.L_4454d3:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4454e0:

            lea R12,QWORD PTR [RIP+.L_446180]
            lea RBP,QWORD PTR [RIP+.L_445580]
            lea R11,QWORD PTR [RIP+.L_445d80]
            lea R10,QWORD PTR [RIP+.L_445980]
            jmp .L_4452ac
.L_445501:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_445510:

            jmp .L_4450b0
.L_445515:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_445520:

            mov RAX,RDX
            cmp ESI,1
            mov RDX,RCX
            mov RSI,RAX
            je .L_445538

            jmp .L_4450b0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_445538:

            jmp .L_444c50
.L_44553d:
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_445540:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_445544:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x20
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x36
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_445580:

            hlt 
          .byte 0xa7
          .byte 0x50
          .byte 0x51
          .byte 0x41
          .byte 0x65
          .byte 0x53
          .byte 0x7e
          .byte 0x17
          .byte 0xa4
          .byte 0xc3
          .byte 0x1a
          .byte 0x27
          .byte 0x5e
          .byte 0x96
          .byte 0x3a
          .byte 0xab
          .byte 0x6b
          .byte 0xcb
          .byte 0x3b
          .byte 0x9d
          .byte 0x45
          .byte 0xf1
          .byte 0x1f
          .byte 0xfa
          .byte 0x58
          .byte 0xab
          .byte 0xac
          .byte 0xe3
          .byte 0x3
          .byte 0x93
          .byte 0x4b
          .byte 0x30
          .byte 0xfa
          .byte 0x55
          .byte 0x20
          .byte 0x76
          .byte 0x6d
          .byte 0xf6
          .byte 0xad
          .byte 0xcc
          .byte 0x76
          .byte 0x91
          .byte 0x88
          .byte 0x2
          .byte 0x4c
          .byte 0x25
          .byte 0xf5
          .byte 0xe5
          .byte 0xd7
          .byte 0xfc
          .byte 0x4f
          .byte 0x2a
          .byte 0xcb
          .byte 0xd7
          .byte 0xc5
          .byte 0x35
          .byte 0x44
          .byte 0x80
          .byte 0x26
          .byte 0x62
          .byte 0xa3
          .byte 0x8f
          .byte 0xb5
          .byte 0xb1
          .byte 0x5a
          .byte 0x49
          .byte 0xde
          .byte 0xba
          .byte 0x1b
          .byte 0x67
          .byte 0x25
          .byte 0xea
          .byte 0xe
          .byte 0x98
          .byte 0x45
          .byte 0xfe
          .byte 0xc0
          .byte 0xe1
          .byte 0x5d
          .byte 0x2f
          .byte 0x75
          .byte 0x2
          .byte 0xc3
          .byte 0x4c
          .byte 0xf0
          .byte 0x12
          .byte 0x81
          .byte 0x46
          .byte 0x97
          .byte 0xa3
          .byte 0x8d
          .byte 0xd3
          .byte 0xf9
          .byte 0xc6
          .byte 0x6b
          .byte 0x8f
          .byte 0x5f
          .byte 0xe7
          .byte 0x3
          .byte 0x92
          .byte 0x9c
          .byte 0x95
          .byte 0x15
          .byte 0x6d
          .byte 0x7a
          .byte 0xeb
          .byte 0xbf
          .byte 0x52
          .byte 0x59
          .byte 0xda
          .byte 0x95
          .byte 0xbe
          .byte 0x83
          .byte 0x2d
          .byte 0xd4
          .byte 0x74
          .byte 0x21
          .byte 0xd3
          .byte 0x58
          .byte 0xe0
          .byte 0x69
          .byte 0x29
          .byte 0x49
          .byte 0xc9
          .byte 0xc8
          .byte 0x44
          .byte 0x8e
          .byte 0xc2
          .byte 0x89
          .byte 0x6a
          .byte 0x75
          .byte 0x8e
          .byte 0x79
          .byte 0x78
          .byte 0xf4
          .byte 0x58
          .byte 0x3e
          .byte 0x6b
          .byte 0x99
          .byte 0xb9
          .byte 0x71
          .byte 0xdd
          .byte 0x27
          .byte 0xe1
          .byte 0x4f
          .byte 0xb6
          .byte 0xbe
          .byte 0x88
          .byte 0xad
          .byte 0x17
          .byte 0xf0
          .byte 0x20
          .byte 0xac
          .byte 0x66
          .byte 0xc9
          .byte 0xce
          .byte 0x3a
          .byte 0xb4
          .byte 0x7d
          .byte 0xdf
          .byte 0x4a
          .byte 0x18
          .byte 0x63
          .byte 0x1a
          .byte 0x31
          .byte 0x82
          .byte 0xe5
          .byte 0x51
          .byte 0x33
          .byte 0x60
          .byte 0x97
          .byte 0x53
          .byte 0x7f
          .byte 0x45
          .byte 0x62
          .byte 0x64
          .byte 0x77
          .byte 0xe0
          .byte 0xb1
          .byte 0x6b
          .byte 0xae
          .byte 0x84
          .byte 0xbb
          .byte 0x81
          .byte 0xa0
          .byte 0x1c
          .byte 0xfe
          .byte 0x8
          .byte 0x2b
          .byte 0x94
          .byte 0xf9
          .byte 0x48
          .byte 0x68
          .byte 0x58
          .byte 0x70
          .byte 0x45
          .byte 0xfd
          .byte 0x19
          .byte 0x8f
          .byte 0xde
          .byte 0x6c
          .byte 0x87
          .byte 0x94
          .byte 0x7b
          .byte 0xf8
          .byte 0xb7
          .byte 0x52
          .byte 0x73
          .byte 0xd3
          .byte 0x23
          .byte 0xab
          .byte 0x4b
          .byte 0x2
          .byte 0xe2
          .byte 0x72
          .byte 0x1f
          .byte 0x8f
          .byte 0x57
          .byte 0xe3
          .byte 0x55
          .byte 0xab
          .byte 0x2a
          .byte 0x66
          .byte 0xeb
          .byte 0x28
          .byte 0x7
          .byte 0xb2
          .byte 0xb5
          .byte 0xc2
          .byte 0x3
          .byte 0x2f
          .byte 0xc5
          .byte 0x7b
          .byte 0x9a
          .byte 0x86
          .byte 0x37
          .byte 0x8
          .byte 0xa5
          .byte 0xd3
          .byte 0x28
          .byte 0x87
          .byte 0xf2
          .byte 0x30
          .byte 0xbf
          .byte 0xa5
          .byte 0xb2
          .byte 0x23
          .byte 0x3
          .byte 0x6a
          .byte 0xba
          .byte 0x2
          .byte 0x16
          .byte 0x82
          .byte 0x5c
          .byte 0xed
          .byte 0xcf
          .byte 0x1c
          .byte 0x2b
          .byte 0x8a
          .byte 0x79
          .byte 0xb4
          .byte 0x92
          .byte 0xa7
          .byte 0x7
          .byte 0xf2
          .byte 0xf0
          .byte 0xf3
          .byte 0x69
          .byte 0xe2
          .byte 0xa1
          .byte 0x4e
          .byte 0xda
          .byte 0xf4
          .byte 0xcd
          .byte 0x65
          .byte 0x5
          .byte 0xbe
          .byte 0xd5
          .byte 0x6
          .byte 0x34
          .byte 0x62
          .byte 0x1f
          .byte 0xd1
          .byte 0xa6
          .byte 0xfe
          .byte 0x8a
          .byte 0xc4
          .byte 0x2e
          .byte 0x53
          .byte 0x9d
          .byte 0x34
          .byte 0xf3
          .byte 0x55
          .byte 0xa0
          .byte 0xa2
          .byte 0x8a
          .byte 0xe1
          .byte 0x32
          .byte 0x5
          .byte 0xf6
          .byte 0xeb
          .byte 0x75
          .byte 0xa4
          .byte 0x83
          .byte 0xec
          .byte 0x39
          .byte 0xb
          .byte 0x60
          .byte 0xef
          .byte 0xaa
          .byte 0x40
          .byte 0x71
          .byte 0x9f
          .byte 0x6
          .byte 0x5e
          .byte 0x6e
          .byte 0x10
          .byte 0x51
          .byte 0xbd
          .byte 0x21
          .byte 0x8a
          .byte 0xf9
          .byte 0x3e
          .byte 0xdd
          .byte 0x6
          .byte 0x3d
          .byte 0x96
          .byte 0x3e
          .byte 0x5
          .byte 0xae
          .byte 0xdd
          .byte 0xe6
          .byte 0xbd
          .byte 0x46
          .byte 0x4d
          .byte 0x54
          .byte 0x8d
          .byte 0xb5
          .byte 0x91
          .byte 0xc4
          .byte 0x5d
          .byte 0x5
          .byte 0x71
          .byte 0x6
          .byte 0xd4
          .byte 0x6f
          .byte 0x4
          .byte 0x50
          .byte 0x15
          .byte 0xff
          .byte 0x60
          .byte 0x98
          .byte 0xfb
          .byte 0x24
          .byte 0x19
          .byte 0xbd
          .byte 0xe9
          .byte 0x97
          .byte 0xd6
          .byte 0x40
          .byte 0x43
          .byte 0xcc
          .byte 0x89
          .byte 0xd9
          .byte 0x9e
          .byte 0x77
          .byte 0x67
          .byte 0xe8
          .byte 0x42
          .byte 0xbd
          .byte 0xb0
          .byte 0x89
          .byte 0x8b
          .byte 0x88
          .byte 0x7
          .byte 0x19
          .byte 0x5b
          .byte 0x38
          .byte 0xe7
          .byte 0xc8
          .byte 0xee
          .byte 0xdb
          .byte 0x79
          .byte 0x7c
          .byte 0xa
          .byte 0x47
          .byte 0xa1
          .byte 0x42
          .byte 0xf
          .byte 0xe9
          .byte 0x7c
          .byte 0x84
          .byte 0x1e
          .byte 0xc9
          .byte 0xf8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x86
          .byte 0x83
          .byte 0x9
          .byte 0x2b
          .byte 0xed
          .byte 0x48
          .byte 0x32
          .byte 0x11
          .byte 0x70
          .byte 0xac
          .byte 0x1e
          .byte 0x5a
          .byte 0x72
          .byte 0x4e
          .byte 0x6c
          .byte 0xe
          .byte 0xff
          .byte 0xfb
          .byte 0xfd
          .byte 0x85
          .byte 0x38
          .byte 0x56
          .byte 0xf
          .byte 0xae
          .byte 0xd5
          .byte 0x1e
          .byte 0x3d
          .byte 0x2d
          .byte 0x39
          .byte 0x27
          .byte 0x36
          .byte 0xf
          .byte 0xd9
          .byte 0x64
          .byte 0xa
          .byte 0x5c
          .byte 0xa6
          .byte 0x21
          .byte 0x68
          .byte 0x5b
          .byte 0x54
          .byte 0xd1
          .byte 0x9b
          .byte 0x36
          .byte 0x2e
          .byte 0x3a
          .byte 0x24
          .byte 0xa
          .byte 0x67
          .byte 0xb1
          .byte 0xc
          .byte 0x57
          .byte 0xe7
          .byte 0xf
          .byte 0x93
          .byte 0xee
          .byte 0x96
          .byte 0xd2
          .byte 0xb4
          .byte 0x9b
          .byte 0x91
          .byte 0x9e
          .byte 0x1b
          .byte 0xc0
          .byte 0xc5
          .byte 0x4f
          .byte 0x80
          .byte 0xdc
          .byte 0x20
          .byte 0xa2
          .byte 0x61
          .byte 0x77
          .byte 0x4b
          .byte 0x69
          .byte 0x5a
          .byte 0x12
          .byte 0x1a
          .byte 0x16
          .byte 0x1c
          .byte 0x93
          .byte 0xba
          .byte 0xa
          .byte 0xe2
          .byte 0xa0
          .byte 0x2a
          .byte 0xe5
          .byte 0xc0
          .byte 0x22
          .byte 0xe0
          .byte 0x43
          .byte 0x3c
          .byte 0x1b
          .byte 0x17
          .byte 0x1d
          .byte 0x12
          .byte 0x9
          .byte 0xd
          .byte 0xb
          .byte 0xe
          .byte 0x8b
          .byte 0xc7
          .byte 0xad
          .byte 0xf2
          .byte 0xb6
          .byte 0xa8
          .byte 0xb9
          .byte 0x2d
          .byte 0x1e
          .byte 0xa9
          .byte 0xc8
          .byte 0x14
          .byte 0xf1
          .byte 0x19
          .byte 0x85
          .byte 0x57
          .byte 0x75
          .byte 0x7
          .byte 0x4c
          .byte 0xaf
          .byte 0x99
          .byte 0xdd
          .byte 0xbb
          .byte 0xee
          .byte 0x7f
          .byte 0x60
          .byte 0xfd
          .byte 0xa3
          .byte 0x1
          .byte 0x26
          .byte 0x9f
          .byte 0xf7
          .byte 0x72
          .byte 0xf5
          .byte 0xbc
          .byte 0x5c
          .byte 0x66
          .byte 0x3b
          .byte 0xc5
          .byte 0x44
          .byte 0xfb
          .byte 0x7e
          .byte 0x34
          .byte 0x5b
          .byte 0x43
          .byte 0x29
          .byte 0x76
          .byte 0x8b
          .byte 0x23
          .byte 0xc6
          .byte 0xdc
          .byte 0xcb
          .byte 0xed
          .byte 0xfc
          .byte 0x68
          .byte 0xb6
          .byte 0xe4
          .byte 0xf1
          .byte 0x63
          .byte 0xb8
          .byte 0x31
          .byte 0xdc
          .byte 0xca
          .byte 0xd7
          .byte 0x63
          .byte 0x85
          .byte 0x10
          .byte 0x42
          .byte 0x97
          .byte 0x22
          .byte 0x40
          .byte 0x13
          .byte 0xc6
          .byte 0x11
          .byte 0x20
          .byte 0x84
          .byte 0x4a
          .byte 0x24
          .byte 0x7d
          .byte 0x85
          .byte 0xbb
          .byte 0x3d
          .byte 0xf8
          .byte 0xd2
          .byte 0xf9
          .byte 0x32
          .byte 0x11
          .byte 0xae
          .byte 0x29
          .byte 0xa1
          .byte 0x6d
          .byte 0xc7
          .byte 0x9e
          .byte 0x2f
          .byte 0x4b
          .byte 0x1d
          .byte 0xb2
          .byte 0x30
          .byte 0xf3
          .byte 0xdc
          .byte 0x86
          .byte 0x52
          .byte 0xec
          .byte 0xd
          .byte 0xc1
          .byte 0xe3
          .byte 0xd0
          .byte 0x77
          .byte 0xb3
          .byte 0x16
          .byte 0x6c
          .byte 0x2b
          .byte 0x70
          .byte 0xb9
          .byte 0x99
          .byte 0xa9
          .byte 0x94
          .byte 0x48
          .byte 0xfa
          .byte 0x11
          .byte 0xe9
          .byte 0x64
          .byte 0x22
          .byte 0x47
          .byte 0xfc
          .byte 0x8c
          .byte 0xc4
          .byte 0xa8
          .byte 0xf0
          .byte 0x3f
          .byte 0x1a
          .byte 0xa0
          .byte 0x7d
          .byte 0x2c
          .byte 0xd8
          .byte 0x56
          .byte 0x33
          .byte 0x90
          .byte 0xef
          .byte 0x22
          .byte 0x49
          .byte 0x4e
          .byte 0xc7
          .byte 0x87
          .byte 0x38
          .byte 0xd1
          .byte 0xc1
          .byte 0xd9
          .byte 0xca
          .byte 0xa2
          .byte 0xfe
          .byte 0x8c
          .byte 0xd4
          .byte 0xb
          .byte 0x36
          .byte 0x98
          .byte 0xf5
          .byte 0x81
          .byte 0xcf
          .byte 0xa6
          .byte 0x7a
          .byte 0xde
          .byte 0x28
          .byte 0xa5
          .byte 0xb7
          .byte 0x8e
          .byte 0x26
          .byte 0xda
          .byte 0xad
          .byte 0xbf
          .byte 0xa4
          .byte 0x3f
          .byte 0x3a
          .byte 0x9d
          .byte 0xe4
          .byte 0x2c
          .byte 0x78
          .byte 0x92
          .byte 0xd
          .byte 0x50
          .byte 0x5f
          .byte 0xcc
          .byte 0x9b
          .byte 0x6a
          .byte 0x7e
          .byte 0x46
          .byte 0x62
          .byte 0x54
          .byte 0x8d
          .byte 0x13
          .byte 0xc2
          .byte 0xf6
          .byte 0xd8
          .byte 0xb8
          .byte 0xe8
          .byte 0x90
          .byte 0x39
          .byte 0xf7
          .byte 0x5e
          .byte 0x2e
          .byte 0xc3
          .byte 0xaf
          .byte 0xf5
          .byte 0x82
          .byte 0x5d
          .byte 0x80
          .byte 0xbe
          .byte 0x9f
          .byte 0xd0
          .byte 0x93
          .byte 0x7c
          .byte 0x69
          .byte 0xd5
          .byte 0x2d
          .byte 0xa9
          .byte 0x6f
          .byte 0x25
          .byte 0x12
          .byte 0xb3
          .byte 0xcf
          .byte 0xac
          .byte 0x99
          .byte 0x3b
          .byte 0xc8
          .byte 0x18
          .byte 0x7d
          .byte 0xa7
          .byte 0x10
          .byte 0x9c
          .byte 0x63
          .byte 0x6e
          .byte 0xe8
          .byte 0x3b
          .byte 0xbb
          .byte 0x7b
          .byte 0xdb
          .byte 0x26
          .byte 0x78
          .byte 0x9
          .byte 0xcd
          .byte 0x59
          .byte 0x18
          .byte 0xf4
          .byte 0x6e
          .byte 0x9a
          .byte 0xb7
          .byte 0x1
          .byte 0xec
          .byte 0x4f
          .byte 0x9a
          .byte 0xa8
          .byte 0x83
          .byte 0x95
          .byte 0x6e
          .byte 0x65
          .byte 0xe6
          .byte 0xff
          .byte 0xe6
          .byte 0x7e
          .byte 0xaa
          .byte 0xbc
          .byte 0xcf
          .byte 0x8
          .byte 0x21
          .byte 0x15
          .byte 0xe8
          .byte 0xe6
          .byte 0xef
          .byte 0xe7
          .byte 0x9b
          .byte 0xd9
          .byte 0xba
          .byte 0x6f
          .byte 0x36
          .byte 0xce
          .byte 0x4a
          .byte 0x9f
          .byte 0x9
          .byte 0xd4
          .byte 0xea
          .byte 0xb0
          .byte 0x7c
          .byte 0xd6
          .byte 0x29
          .byte 0xa4
          .byte 0xb2
          .byte 0xaf
          .byte 0x31
          .byte 0x3f
          .byte 0x23
          .byte 0x31
          .byte 0x2a
          .byte 0xa5
          .byte 0x94
          .byte 0x30
          .byte 0xc6
          .byte 0xa2
          .byte 0x66
          .byte 0xc0
          .byte 0x35
          .byte 0x4e
          .byte 0xbc
          .byte 0x37
          .byte 0x74
          .byte 0x82
          .byte 0xca
          .byte 0xa6
          .byte 0xfc
          .byte 0x90
          .byte 0xd0
          .byte 0xb0
          .byte 0xe0
          .byte 0xa7
          .byte 0xd8
          .byte 0x15
          .byte 0x33
          .byte 0x4
          .byte 0x98
          .byte 0x4a
          .byte 0xf1
          .byte 0xec
          .byte 0xda
          .byte 0xf7
          .byte 0x41
          .byte 0xcd
          .byte 0x50
          .byte 0xe
          .byte 0x7f
          .byte 0x91
          .byte 0xf6
          .byte 0x2f
          .byte 0x17
          .byte 0x4d
          .byte 0xd6
          .byte 0x8d
          .byte 0x76
          .byte 0xef
          .byte 0xb0
          .byte 0x4d
          .byte 0x43
          .byte 0xaa
          .byte 0x4d
          .byte 0x54
          .byte 0xcc
          .byte 0x96
          .byte 0x4
          .byte 0xdf
          .byte 0xe4
          .byte 0xd1
          .byte 0xb5
          .byte 0xe3
          .byte 0x9e
          .byte 0x6a
          .byte 0x88
          .byte 0x1b
          .byte 0x4c
          .byte 0x2c
          .byte 0x1f
          .byte 0xb8
          .byte 0xc1
          .byte 0x65
          .byte 0x51
          .byte 0x7f
          .byte 0x46
          .byte 0x5e
          .byte 0xea
          .byte 0x4
          .byte 0x9d
          .byte 0x8c
          .byte 0x35
          .byte 0x5d
          .byte 0x1
          .byte 0x87
          .byte 0x74
          .byte 0x73
          .byte 0xfa
          .byte 0xb
          .byte 0x41
          .byte 0x2e
          .byte 0xfb
          .byte 0x67
          .byte 0x1d
          .byte 0x5a
          .byte 0xb3
          .byte 0xdb
          .byte 0xd2
          .byte 0x52
          .byte 0x92
          .byte 0x10
          .byte 0x56
          .byte 0x33
          .byte 0xe9
          .byte 0xd6
          .byte 0x47
          .byte 0x13
          .byte 0x6d
          .byte 0xd7
          .byte 0x61
          .byte 0x8c
          .byte 0x9a
          .byte 0xa1
          .byte 0xc
          .byte 0x7a
          .byte 0x37
          .byte 0xf8
          .byte 0x14
          .byte 0x8e
          .byte 0x59
          .byte 0x13
          .byte 0x3c
          .byte 0x89
          .byte 0xeb
          .byte 0xa9
          .byte 0x27
          .byte 0xee
          .byte 0xce
          .byte 0x61
          .byte 0xc9
          .byte 0x35
          .byte 0xb7
          .byte 0x1c
          .byte 0xe5
          .byte 0xed
          .byte 0xe1
          .byte 0x47
          .byte 0xb1
          .byte 0x3c
          .byte 0x7a
          .byte 0xd2
          .byte 0xdf
          .byte 0x59
          .byte 0x9c
          .byte 0xf2
          .byte 0x73
          .byte 0x3f
          .byte 0x55
          .byte 0x14
          .byte 0xce
          .byte 0x79
          .byte 0x18
          .byte 0xc7
          .byte 0x37
          .byte 0xbf
          .byte 0x73
          .byte 0xf7
          .byte 0xcd
          .byte 0xea
          .byte 0x53
          .byte 0xfd
          .byte 0xaa
          .byte 0x5b
          .byte 0x5f
          .byte 0x3d
          .byte 0x6f
          .byte 0x14
          .byte 0xdf
          .byte 0x44
          .byte 0xdb
          .byte 0x86
          .byte 0x78
          .byte 0xaf
          .byte 0xf3
          .byte 0x81
          .byte 0xca
          .byte 0x68
          .byte 0xc4
          .byte 0x3e
          .byte 0xb9
          .byte 0x24
          .byte 0x34
          .byte 0x2c
          .byte 0x38
          .byte 0xa3
          .byte 0x40
          .byte 0x5f
          .byte 0xc2
          .byte 0x1d
          .byte 0xc3
          .byte 0x72
          .byte 0x16
          .byte 0xe2
          .byte 0x25
          .byte 0xc
          .byte 0xbc
          .byte 0x3c
          .byte 0x49
          .byte 0x8b
          .byte 0x28
          .byte 0xd
          .byte 0x95
          .byte 0x41
          .byte 0xff
          .byte 0xa8
          .byte 0x1
          .byte 0x71
          .byte 0x39
          .byte 0xc
          .byte 0xb3
          .byte 0xde
          .byte 0x8
          .byte 0xb4
          .byte 0xe4
          .byte 0x9c
          .byte 0xd8
          .byte 0x56
          .byte 0xc1
          .byte 0x90
          .byte 0x64
          .byte 0xcb
          .byte 0x84
          .byte 0x61
          .byte 0x7b
          .byte 0x32
          .byte 0xb6
          .byte 0x70
          .byte 0xd5
          .byte 0x6c
          .byte 0x5c
          .byte 0x74
          .byte 0x48
          .byte 0xb8
          .byte 0x57
          .byte 0x42
          .byte 0xd0
.L_445980:

            cmpsd [RSI], [RDI]
            push RAX
            push RCX
            hlt 
          .byte 0x65
          .byte 0x53
          .byte 0x7e
          .byte 0x41
          .byte 0xa4
          .byte 0xc3
          .byte 0x1a
          .byte 0x17
          .byte 0x5e
          .byte 0x96
          .byte 0x3a
          .byte 0x27
          .byte 0x6b
          .byte 0xcb
          .byte 0x3b
          .byte 0xab
          .byte 0x45
          .byte 0xf1
          .byte 0x1f
          .byte 0x9d
          .byte 0x58
          .byte 0xab
          .byte 0xac
          .byte 0xfa
          .byte 0x3
          .byte 0x93
          .byte 0x4b
          .byte 0xe3
          .byte 0xfa
          .byte 0x55
          .byte 0x20
          .byte 0x30
          .byte 0x6d
          .byte 0xf6
          .byte 0xad
          .byte 0x76
          .byte 0x76
          .byte 0x91
          .byte 0x88
          .byte 0xcc
          .byte 0x4c
          .byte 0x25
          .byte 0xf5
          .byte 0x2
          .byte 0xd7
          .byte 0xfc
          .byte 0x4f
          .byte 0xe5
          .byte 0xcb
          .byte 0xd7
          .byte 0xc5
          .byte 0x2a
          .byte 0x44
          .byte 0x80
          .byte 0x26
          .byte 0x35
          .byte 0xa3
          .byte 0x8f
          .byte 0xb5
          .byte 0x62
          .byte 0x5a
          .byte 0x49
          .byte 0xde
          .byte 0xb1
          .byte 0x1b
          .byte 0x67
          .byte 0x25
          .byte 0xba
          .byte 0xe
          .byte 0x98
          .byte 0x45
          .byte 0xea
          .byte 0xc0
          .byte 0xe1
          .byte 0x5d
          .byte 0xfe
          .byte 0x75
          .byte 0x2
          .byte 0xc3
          .byte 0x2f
          .byte 0xf0
          .byte 0x12
          .byte 0x81
          .byte 0x4c
          .byte 0x97
          .byte 0xa3
          .byte 0x8d
          .byte 0x46
          .byte 0xf9
          .byte 0xc6
          .byte 0x6b
          .byte 0xd3
          .byte 0x5f
          .byte 0xe7
          .byte 0x3
          .byte 0x8f
          .byte 0x9c
          .byte 0x95
          .byte 0x15
          .byte 0x92
          .byte 0x7a
          .byte 0xeb
          .byte 0xbf
          .byte 0x6d
          .byte 0x59
          .byte 0xda
          .byte 0x95
          .byte 0x52
          .byte 0x83
          .byte 0x2d
          .byte 0xd4
          .byte 0xbe
          .byte 0x21
          .byte 0xd3
          .byte 0x58
          .byte 0x74
          .byte 0x69
          .byte 0x29
          .byte 0x49
          .byte 0xe0
          .byte 0xc8
          .byte 0x44
          .byte 0x8e
          .byte 0xc9
          .byte 0x89
          .byte 0x6a
          .byte 0x75
          .byte 0xc2
          .byte 0x79
          .byte 0x78
          .byte 0xf4
          .byte 0x8e
          .byte 0x3e
          .byte 0x6b
          .byte 0x99
          .byte 0x58
          .byte 0x71
          .byte 0xdd
          .byte 0x27
          .byte 0xb9
          .byte 0x4f
          .byte 0xb6
          .byte 0xbe
          .byte 0xe1
          .byte 0xad
          .byte 0x17
          .byte 0xf0
          .byte 0x88
          .byte 0xac
          .byte 0x66
          .byte 0xc9
          .byte 0x20
          .byte 0x3a
          .byte 0xb4
          .byte 0x7d
          .byte 0xce
          .byte 0x4a
          .byte 0x18
          .byte 0x63
          .byte 0xdf
          .byte 0x31
          .byte 0x82
          .byte 0xe5
          .byte 0x1a
          .byte 0x33
          .byte 0x60
          .byte 0x97
          .byte 0x51
          .byte 0x7f
          .byte 0x45
          .byte 0x62
          .byte 0x53
          .byte 0x77
          .byte 0xe0
          .byte 0xb1
          .byte 0x64
          .byte 0xae
          .byte 0x84
          .byte 0xbb
          .byte 0x6b
          .byte 0xa0
          .byte 0x1c
          .byte 0xfe
          .byte 0x81
          .byte 0x2b
          .byte 0x94
          .byte 0xf9
          .byte 0x8
          .byte 0x68
          .byte 0x58
          .byte 0x70
          .byte 0x48
          .byte 0xfd
          .byte 0x19
          .byte 0x8f
          .byte 0x45
          .byte 0x6c
          .byte 0x87
          .byte 0x94
          .byte 0xde
          .byte 0xf8
          .byte 0xb7
          .byte 0x52
          .byte 0x7b
          .byte 0xd3
          .byte 0x23
          .byte 0xab
          .byte 0x73
          .byte 0x2
          .byte 0xe2
          .byte 0x72
          .byte 0x4b
          .byte 0x8f
          .byte 0x57
          .byte 0xe3
          .byte 0x1f
          .byte 0xab
          .byte 0x2a
          .byte 0x66
          .byte 0x55
          .byte 0x28
          .byte 0x7
          .byte 0xb2
          .byte 0xeb
          .byte 0xc2
          .byte 0x3
          .byte 0x2f
          .byte 0xb5
          .byte 0x7b
          .byte 0x9a
          .byte 0x86
          .byte 0xc5
          .byte 0x8
          .byte 0xa5
          .byte 0xd3
          .byte 0x37
          .byte 0x87
          .byte 0xf2
          .byte 0x30
          .byte 0x28
          .byte 0xa5
          .byte 0xb2
          .byte 0x23
          .byte 0xbf
          .byte 0x6a
          .byte 0xba
          .byte 0x2
          .byte 0x3
          .byte 0x82
          .byte 0x5c
          .byte 0xed
          .byte 0x16
          .byte 0x1c
          .byte 0x2b
          .byte 0x8a
          .byte 0xcf
          .byte 0xb4
          .byte 0x92
          .byte 0xa7
          .byte 0x79
          .byte 0xf2
          .byte 0xf0
          .byte 0xf3
          .byte 0x7
          .byte 0xe2
          .byte 0xa1
          .byte 0x4e
          .byte 0x69
          .byte 0xf4
          .byte 0xcd
          .byte 0x65
          .byte 0xda
          .byte 0xbe
          .byte 0xd5
          .byte 0x6
          .byte 0x5
          .byte 0x62
          .byte 0x1f
          .byte 0xd1
          .byte 0x34
          .byte 0xfe
          .byte 0x8a
          .byte 0xc4
          .byte 0xa6
          .byte 0x53
          .byte 0x9d
          .byte 0x34
          .byte 0x2e
          .byte 0x55
          .byte 0xa0
          .byte 0xa2
          .byte 0xf3
          .byte 0xe1
          .byte 0x32
          .byte 0x5
          .byte 0x8a
          .byte 0xeb
          .byte 0x75
          .byte 0xa4
          .byte 0xf6
          .byte 0xec
          .byte 0x39
          .byte 0xb
          .byte 0x83
          .byte 0xef
          .byte 0xaa
          .byte 0x40
          .byte 0x60
          .byte 0x9f
          .byte 0x6
          .byte 0x5e
          .byte 0x71
          .byte 0x10
          .byte 0x51
          .byte 0xbd
          .byte 0x6e
          .byte 0x8a
          .byte 0xf9
          .byte 0x3e
          .byte 0x21
          .byte 0x6
          .byte 0x3d
          .byte 0x96
          .byte 0xdd
          .byte 0x5
          .byte 0xae
          .byte 0xdd
          .byte 0x3e
          .byte 0xbd
          .byte 0x46
          .byte 0x4d
          .byte 0xe6
          .byte 0x8d
          .byte 0xb5
          .byte 0x91
          .byte 0x54
          .byte 0x5d
          .byte 0x5
          .byte 0x71
          .byte 0xc4
          .byte 0xd4
          .byte 0x6f
          .byte 0x4
          .byte 0x6
          .byte 0x15
          .byte 0xff
          .byte 0x60
          .byte 0x50
          .byte 0xfb
          .byte 0x24
          .byte 0x19
          .byte 0x98
          .byte 0xe9
          .byte 0x97
          .byte 0xd6
          .byte 0xbd
          .byte 0x43
          .byte 0xcc
          .byte 0x89
          .byte 0x40
          .byte 0x9e
          .byte 0x77
          .byte 0x67
          .byte 0xd9
          .byte 0x42
          .byte 0xbd
          .byte 0xb0
          .byte 0xe8
          .byte 0x8b
          .byte 0x88
          .byte 0x7
          .byte 0x89
          .byte 0x5b
          .byte 0x38
          .byte 0xe7
          .byte 0x19
          .byte 0xee
          .byte 0xdb
          .byte 0x79
          .byte 0xc8
          .byte 0xa
          .byte 0x47
          .byte 0xa1
          .byte 0x7c
          .byte 0xf
          .byte 0xe9
          .byte 0x7c
          .byte 0x42
          .byte 0x1e
          .byte 0xc9
          .byte 0xf8
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x86
          .byte 0x83
          .byte 0x9
          .byte 0x80
          .byte 0xed
          .byte 0x48
          .byte 0x32
          .byte 0x2b
          .byte 0x70
          .byte 0xac
          .byte 0x1e
          .byte 0x11
          .byte 0x72
          .byte 0x4e
          .byte 0x6c
          .byte 0x5a
          .byte 0xff
          .byte 0xfb
          .byte 0xfd
          .byte 0xe
          .byte 0x38
          .byte 0x56
          .byte 0xf
          .byte 0x85
          .byte 0xd5
          .byte 0x1e
          .byte 0x3d
          .byte 0xae
          .byte 0x39
          .byte 0x27
          .byte 0x36
          .byte 0x2d
          .byte 0xd9
          .byte 0x64
          .byte 0xa
          .byte 0xf
          .byte 0xa6
          .byte 0x21
          .byte 0x68
          .byte 0x5c
          .byte 0x54
          .byte 0xd1
          .byte 0x9b
          .byte 0x5b
          .byte 0x2e
          .byte 0x3a
          .byte 0x24
          .byte 0x36
          .byte 0x67
          .byte 0xb1
          .byte 0xc
          .byte 0xa
          .byte 0xe7
          .byte 0xf
          .byte 0x93
          .byte 0x57
          .byte 0x96
          .byte 0xd2
          .byte 0xb4
          .byte 0xee
          .byte 0x91
          .byte 0x9e
          .byte 0x1b
          .byte 0x9b
          .byte 0xc5
          .byte 0x4f
          .byte 0x80
          .byte 0xc0
          .byte 0x20
          .byte 0xa2
          .byte 0x61
          .byte 0xdc
          .byte 0x4b
          .byte 0x69
          .byte 0x5a
          .byte 0x77
          .byte 0x1a
          .byte 0x16
          .byte 0x1c
          .byte 0x12
          .byte 0xba
          .byte 0xa
          .byte 0xe2
          .byte 0x93
          .byte 0x2a
          .byte 0xe5
          .byte 0xc0
          .byte 0xa0
          .byte 0xe0
          .byte 0x43
          .byte 0x3c
          .byte 0x22
          .byte 0x17
          .byte 0x1d
          .byte 0x12
          .byte 0x1b
          .byte 0xd
          .byte 0xb
          .byte 0xe
          .byte 0x9
          .byte 0xc7
          .byte 0xad
          .byte 0xf2
          .byte 0x8b
          .byte 0xa8
          .byte 0xb9
          .byte 0x2d
          .byte 0xb6
          .byte 0xa9
          .byte 0xc8
          .byte 0x14
          .byte 0x1e
          .byte 0x19
          .byte 0x85
          .byte 0x57
          .byte 0xf1
          .byte 0x7
          .byte 0x4c
          .byte 0xaf
          .byte 0x75
          .byte 0xdd
          .byte 0xbb
          .byte 0xee
          .byte 0x99
          .byte 0x60
          .byte 0xfd
          .byte 0xa3
          .byte 0x7f
          .byte 0x26
          .byte 0x9f
          .byte 0xf7
          .byte 0x1
          .byte 0xf5
          .byte 0xbc
          .byte 0x5c
          .byte 0x72
          .byte 0x3b
          .byte 0xc5
          .byte 0x44
          .byte 0x66
          .byte 0x7e
          .byte 0x34
          .byte 0x5b
          .byte 0xfb
          .byte 0x29
          .byte 0x76
          .byte 0x8b
          .byte 0x43
          .byte 0xc6
          .byte 0xdc
          .byte 0xcb
          .byte 0x23
          .byte 0xfc
          .byte 0x68
          .byte 0xb6
          .byte 0xed
          .byte 0xf1
          .byte 0x63
          .byte 0xb8
          .byte 0xe4
          .byte 0xdc
          .byte 0xca
          .byte 0xd7
          .byte 0x31
          .byte 0x85
          .byte 0x10
          .byte 0x42
          .byte 0x63
          .byte 0x22
          .byte 0x40
          .byte 0x13
          .byte 0x97
          .byte 0x11
          .byte 0x20
          .byte 0x84
          .byte 0xc6
          .byte 0x24
          .byte 0x7d
          .byte 0x85
          .byte 0x4a
          .byte 0x3d
          .byte 0xf8
          .byte 0xd2
          .byte 0xbb
          .byte 0x32
          .byte 0x11
          .byte 0xae
          .byte 0xf9
          .byte 0xa1
          .byte 0x6d
          .byte 0xc7
          .byte 0x29
          .byte 0x2f
          .byte 0x4b
          .byte 0x1d
          .byte 0x9e
          .byte 0x30
          .byte 0xf3
          .byte 0xdc
          .byte 0xb2
          .byte 0x52
          .byte 0xec
          .byte 0xd
          .byte 0x86
          .byte 0xe3
          .byte 0xd0
          .byte 0x77
          .byte 0xc1
          .byte 0x16
          .byte 0x6c
          .byte 0x2b
          .byte 0xb3
          .byte 0xb9
          .byte 0x99
          .byte 0xa9
          .byte 0x70
          .byte 0x48
          .byte 0xfa
          .byte 0x11
          .byte 0x94
          .byte 0x64
          .byte 0x22
          .byte 0x47
          .byte 0xe9
          .byte 0x8c
          .byte 0xc4
          .byte 0xa8
          .byte 0xfc
          .byte 0x3f
          .byte 0x1a
          .byte 0xa0
          .byte 0xf0
          .byte 0x2c
          .byte 0xd8
          .byte 0x56
          .byte 0x7d
          .byte 0x90
          .byte 0xef
          .byte 0x22
          .byte 0x33
          .byte 0x4e
          .byte 0xc7
          .byte 0x87
          .byte 0x49
          .byte 0xd1
          .byte 0xc1
          .byte 0xd9
          .byte 0x38
          .byte 0xa2
          .byte 0xfe
          .byte 0x8c
          .byte 0xca
          .byte 0xb
          .byte 0x36
          .byte 0x98
          .byte 0xd4
          .byte 0x81
          .byte 0xcf
          .byte 0xa6
          .byte 0xf5
          .byte 0xde
          .byte 0x28
          .byte 0xa5
          .byte 0x7a
          .byte 0x8e
          .byte 0x26
          .byte 0xda
          .byte 0xb7
          .byte 0xbf
          .byte 0xa4
          .byte 0x3f
          .byte 0xad
          .byte 0x9d
          .byte 0xe4
          .byte 0x2c
          .byte 0x3a
          .byte 0x92
          .byte 0xd
          .byte 0x50
          .byte 0x78
          .byte 0xcc
          .byte 0x9b
          .byte 0x6a
          .byte 0x5f
          .byte 0x46
          .byte 0x62
          .byte 0x54
          .byte 0x7e
          .byte 0x13
          .byte 0xc2
          .byte 0xf6
          .byte 0x8d
          .byte 0xb8
          .byte 0xe8
          .byte 0x90
          .byte 0xd8
          .byte 0xf7
          .byte 0x5e
          .byte 0x2e
          .byte 0x39
          .byte 0xaf
          .byte 0xf5
          .byte 0x82
          .byte 0xc3
          .byte 0x80
          .byte 0xbe
          .byte 0x9f
          .byte 0x5d
          .byte 0x93
          .byte 0x7c
          .byte 0x69
          .byte 0xd0
          .byte 0x2d
          .byte 0xa9
          .byte 0x6f
          .byte 0xd5
          .byte 0x12
          .byte 0xb3
          .byte 0xcf
          .byte 0x25
          .byte 0x99
          .byte 0x3b
          .byte 0xc8
          .byte 0xac
          .byte 0x7d
          .byte 0xa7
          .byte 0x10
          .byte 0x18
          .byte 0x63
          .byte 0x6e
          .byte 0xe8
          .byte 0x9c
          .byte 0xbb
          .byte 0x7b
          .byte 0xdb
          .byte 0x3b
          .byte 0x78
          .byte 0x9
          .byte 0xcd
          .byte 0x26
          .byte 0x18
          .byte 0xf4
          .byte 0x6e
          .byte 0x59
          .byte 0xb7
          .byte 0x1
          .byte 0xec
          .byte 0x9a
          .byte 0x9a
          .byte 0xa8
          .byte 0x83
          .byte 0x4f
          .byte 0x6e
          .byte 0x65
          .byte 0xe6
          .byte 0x95
          .byte 0xe6
          .byte 0x7e
          .byte 0xaa
          .byte 0xff
          .byte 0xcf
          .byte 0x8
          .byte 0x21
          .byte 0xbc
          .byte 0xe8
          .byte 0xe6
          .byte 0xef
          .byte 0x15
          .byte 0x9b
          .byte 0xd9
          .byte 0xba
          .byte 0xe7
          .byte 0x36
          .byte 0xce
          .byte 0x4a
          .byte 0x6f
          .byte 0x9
          .byte 0xd4
          .byte 0xea
          .byte 0x9f
          .byte 0x7c
          .byte 0xd6
          .byte 0x29
          .byte 0xb0
          .byte 0xb2
          .byte 0xaf
          .byte 0x31
          .byte 0xa4
          .byte 0x23
          .byte 0x31
          .byte 0x2a
          .byte 0x3f
          .byte 0x94
          .byte 0x30
          .byte 0xc6
          .byte 0xa5
          .byte 0x66
          .byte 0xc0
          .byte 0x35
          .byte 0xa2
          .byte 0xbc
          .byte 0x37
          .byte 0x74
          .byte 0x4e
          .byte 0xca
          .byte 0xa6
          .byte 0xfc
          .byte 0x82
          .byte 0xd0
          .byte 0xb0
          .byte 0xe0
          .byte 0x90
          .byte 0xd8
          .byte 0x15
          .byte 0x33
          .byte 0xa7
          .byte 0x98
          .byte 0x4a
          .byte 0xf1
          .byte 0x4
          .byte 0xda
          .byte 0xf7
          .byte 0x41
          .byte 0xec
          .byte 0x50
          .byte 0xe
          .byte 0x7f
          .byte 0xcd
          .byte 0xf6
          .byte 0x2f
          .byte 0x17
          .byte 0x91
          .byte 0xd6
          .byte 0x8d
          .byte 0x76
          .byte 0x4d
          .byte 0xb0
          .byte 0x4d
          .byte 0x43
          .byte 0xef
          .byte 0x4d
          .byte 0x54
          .byte 0xcc
          .byte 0xaa
          .byte 0x4
          .byte 0xdf
          .byte 0xe4
          .byte 0x96
          .byte 0xb5
          .byte 0xe3
          .byte 0x9e
          .byte 0xd1
          .byte 0x88
          .byte 0x1b
          .byte 0x4c
          .byte 0x6a
          .byte 0x1f
          .byte 0xb8
          .byte 0xc1
          .byte 0x2c
          .byte 0x51
          .byte 0x7f
          .byte 0x46
          .byte 0x65
          .byte 0xea
          .byte 0x4
          .byte 0x9d
          .byte 0x5e
          .byte 0x35
          .byte 0x5d
          .byte 0x1
          .byte 0x8c
          .byte 0x74
          .byte 0x73
          .byte 0xfa
          .byte 0x87
          .byte 0x41
          .byte 0x2e
          .byte 0xfb
          .byte 0xb
          .byte 0x1d
          .byte 0x5a
          .byte 0xb3
          .byte 0x67
          .byte 0xd2
          .byte 0x52
          .byte 0x92
          .byte 0xdb
          .byte 0x56
          .byte 0x33
          .byte 0xe9
          .byte 0x10
          .byte 0x47
          .byte 0x13
          .byte 0x6d
          .byte 0xd6
          .byte 0x61
          .byte 0x8c
          .byte 0x9a
          .byte 0xd7
          .byte 0xc
          .byte 0x7a
          .byte 0x37
          .byte 0xa1
          .byte 0x14
          .byte 0x8e
          .byte 0x59
          .byte 0xf8
          .byte 0x3c
          .byte 0x89
          .byte 0xeb
          .byte 0x13
          .byte 0x27
          .byte 0xee
          .byte 0xce
          .byte 0xa9
          .byte 0xc9
          .byte 0x35
          .byte 0xb7
          .byte 0x61
          .byte 0xe5
          .byte 0xed
          .byte 0xe1
          .byte 0x1c
          .byte 0xb1
          .byte 0x3c
          .byte 0x7a
          .byte 0x47
          .byte 0xdf
          .byte 0x59
          .byte 0x9c
          .byte 0xd2
          .byte 0x73
          .byte 0x3f
          .byte 0x55
          .byte 0xf2
          .byte 0xce
          .byte 0x79
          .byte 0x18
          .byte 0x14
          .byte 0x37
          .byte 0xbf
          .byte 0x73
          .byte 0xc7
          .byte 0xcd
          .byte 0xea
          .byte 0x53
          .byte 0xf7
          .byte 0xaa
          .byte 0x5b
          .byte 0x5f
          .byte 0xfd
          .byte 0x6f
          .byte 0x14
          .byte 0xdf
          .byte 0x3d
          .byte 0xdb
          .byte 0x86
          .byte 0x78
          .byte 0x44
          .byte 0xf3
          .byte 0x81
          .byte 0xca
          .byte 0xaf
          .byte 0xc4
          .byte 0x3e
          .byte 0xb9
          .byte 0x68
          .byte 0x34
          .byte 0x2c
          .byte 0x38
          .byte 0x24
          .byte 0x40
          .byte 0x5f
          .byte 0xc2
          .byte 0xa3
          .byte 0xc3
          .byte 0x72
          .byte 0x16
          .byte 0x1d
          .byte 0x25
          .byte 0xc
          .byte 0xbc
          .byte 0xe2
          .byte 0x49
          .byte 0x8b
          .byte 0x28
          .byte 0x3c
          .byte 0x95
          .byte 0x41
          .byte 0xff
          .byte 0xd
          .byte 0x1
          .byte 0x71
          .byte 0x39
          .byte 0xa8
          .byte 0xb3
          .byte 0xde
          .byte 0x8
          .byte 0xc
          .byte 0xe4
          .byte 0x9c
          .byte 0xd8
          .byte 0xb4
          .byte 0xc1
          .byte 0x90
          .byte 0x64
          .byte 0x56
          .byte 0x84
          .byte 0x61
          .byte 0x7b
          .byte 0xcb
          .byte 0xb6
          .byte 0x70
          .byte 0xd5
          .byte 0x32
          .byte 0x5c
          .byte 0x74
          .byte 0x48
          .byte 0x6c
          .byte 0x57
          .byte 0x42
          .byte 0xd0
          .byte 0xb8
.L_445d80:

            push RAX
            push RCX
            hlt 
          .byte 0xa7
          .byte 0x53
          .byte 0x7e
          .byte 0x41
          .byte 0x65
          .byte 0xc3
          .byte 0x1a
          .byte 0x17
          .byte 0xa4
          .byte 0x96
          .byte 0x3a
          .byte 0x27
          .byte 0x5e
          .byte 0xcb
          .byte 0x3b
          .byte 0xab
          .byte 0x6b
          .byte 0xf1
          .byte 0x1f
          .byte 0x9d
          .byte 0x45
          .byte 0xab
          .byte 0xac
          .byte 0xfa
          .byte 0x58
          .byte 0x93
          .byte 0x4b
          .byte 0xe3
          .byte 0x3
          .byte 0x55
          .byte 0x20
          .byte 0x30
          .byte 0xfa
          .byte 0xf6
          .byte 0xad
          .byte 0x76
          .byte 0x6d
          .byte 0x91
          .byte 0x88
          .byte 0xcc
          .byte 0x76
          .byte 0x25
          .byte 0xf5
          .byte 0x2
          .byte 0x4c
          .byte 0xfc
          .byte 0x4f
          .byte 0xe5
          .byte 0xd7
          .byte 0xd7
          .byte 0xc5
          .byte 0x2a
          .byte 0xcb
          .byte 0x80
          .byte 0x26
          .byte 0x35
          .byte 0x44
          .byte 0x8f
          .byte 0xb5
          .byte 0x62
          .byte 0xa3
          .byte 0x49
          .byte 0xde
          .byte 0xb1
          .byte 0x5a
          .byte 0x67
          .byte 0x25
          .byte 0xba
          .byte 0x1b
          .byte 0x98
          .byte 0x45
          .byte 0xea
          .byte 0xe
          .byte 0xe1
          .byte 0x5d
          .byte 0xfe
          .byte 0xc0
          .byte 0x2
          .byte 0xc3
          .byte 0x2f
          .byte 0x75
          .byte 0x12
          .byte 0x81
          .byte 0x4c
          .byte 0xf0
          .byte 0xa3
          .byte 0x8d
          .byte 0x46
          .byte 0x97
          .byte 0xc6
          .byte 0x6b
          .byte 0xd3
          .byte 0xf9
          .byte 0xe7
          .byte 0x3
          .byte 0x8f
          .byte 0x5f
          .byte 0x95
          .byte 0x15
          .byte 0x92
          .byte 0x9c
          .byte 0xeb
          .byte 0xbf
          .byte 0x6d
          .byte 0x7a
          .byte 0xda
          .byte 0x95
          .byte 0x52
          .byte 0x59
          .byte 0x2d
          .byte 0xd4
          .byte 0xbe
          .byte 0x83
          .byte 0xd3
          .byte 0x58
          .byte 0x74
          .byte 0x21
          .byte 0x29
          .byte 0x49
          .byte 0xe0
          .byte 0x69
          .byte 0x44
          .byte 0x8e
          .byte 0xc9
          .byte 0xc8
          .byte 0x6a
          .byte 0x75
          .byte 0xc2
          .byte 0x89
          .byte 0x78
          .byte 0xf4
          .byte 0x8e
          .byte 0x79
          .byte 0x6b
          .byte 0x99
          .byte 0x58
          .byte 0x3e
          .byte 0xdd
          .byte 0x27
          .byte 0xb9
          .byte 0x71
          .byte 0xb6
          .byte 0xbe
          .byte 0xe1
          .byte 0x4f
          .byte 0x17
          .byte 0xf0
          .byte 0x88
          .byte 0xad
          .byte 0x66
          .byte 0xc9
          .byte 0x20
          .byte 0xac
          .byte 0xb4
          .byte 0x7d
          .byte 0xce
          .byte 0x3a
          .byte 0x18
          .byte 0x63
          .byte 0xdf
          .byte 0x4a
          .byte 0x82
          .byte 0xe5
          .byte 0x1a
          .byte 0x31
          .byte 0x60
          .byte 0x97
          .byte 0x51
          .byte 0x33
          .byte 0x45
          .byte 0x62
          .byte 0x53
          .byte 0x7f
          .byte 0xe0
          .byte 0xb1
          .byte 0x64
          .byte 0x77
          .byte 0x84
          .byte 0xbb
          .byte 0x6b
          .byte 0xae
          .byte 0x1c
          .byte 0xfe
          .byte 0x81
          .byte 0xa0
          .byte 0x94
          .byte 0xf9
          .byte 0x8
          .byte 0x2b
          .byte 0x58
          .byte 0x70
          .byte 0x48
          .byte 0x68
          .byte 0x19
          .byte 0x8f
          .byte 0x45
          .byte 0xfd
          .byte 0x87
          .byte 0x94
          .byte 0xde
          .byte 0x6c
          .byte 0xb7
          .byte 0x52
          .byte 0x7b
          .byte 0xf8
          .byte 0x23
          .byte 0xab
          .byte 0x73
          .byte 0xd3
          .byte 0xe2
          .byte 0x72
          .byte 0x4b
          .byte 0x2
          .byte 0x57
          .byte 0xe3
          .byte 0x1f
          .byte 0x8f
          .byte 0x2a
          .byte 0x66
          .byte 0x55
          .byte 0xab
          .byte 0x7
          .byte 0xb2
          .byte 0xeb
          .byte 0x28
          .byte 0x3
          .byte 0x2f
          .byte 0xb5
          .byte 0xc2
          .byte 0x9a
          .byte 0x86
          .byte 0xc5
          .byte 0x7b
          .byte 0xa5
          .byte 0xd3
          .byte 0x37
          .byte 0x8
          .byte 0xf2
          .byte 0x30
          .byte 0x28
          .byte 0x87
          .byte 0xb2
          .byte 0x23
          .byte 0xbf
          .byte 0xa5
          .byte 0xba
          .byte 0x2
          .byte 0x3
          .byte 0x6a
          .byte 0x5c
          .byte 0xed
          .byte 0x16
          .byte 0x82
          .byte 0x2b
          .byte 0x8a
          .byte 0xcf
          .byte 0x1c
          .byte 0x92
          .byte 0xa7
          .byte 0x79
          .byte 0xb4
          .byte 0xf0
          .byte 0xf3
          .byte 0x7
          .byte 0xf2
          .byte 0xa1
          .byte 0x4e
          .byte 0x69
          .byte 0xe2
          .byte 0xcd
          .byte 0x65
          .byte 0xda
          .byte 0xf4
          .byte 0xd5
          .byte 0x6
          .byte 0x5
          .byte 0xbe
          .byte 0x1f
          .byte 0xd1
          .byte 0x34
          .byte 0x62
          .byte 0x8a
          .byte 0xc4
          .byte 0xa6
          .byte 0xfe
          .byte 0x9d
          .byte 0x34
          .byte 0x2e
          .byte 0x53
          .byte 0xa0
          .byte 0xa2
          .byte 0xf3
          .byte 0x55
          .byte 0x32
          .byte 0x5
          .byte 0x8a
          .byte 0xe1
          .byte 0x75
          .byte 0xa4
          .byte 0xf6
          .byte 0xeb
          .byte 0x39
          .byte 0xb
          .byte 0x83
          .byte 0xec
          .byte 0xaa
          .byte 0x40
          .byte 0x60
          .byte 0xef
          .byte 0x6
          .byte 0x5e
          .byte 0x71
          .byte 0x9f
          .byte 0x51
          .byte 0xbd
          .byte 0x6e
          .byte 0x10
          .byte 0xf9
          .byte 0x3e
          .byte 0x21
          .byte 0x8a
          .byte 0x3d
          .byte 0x96
          .byte 0xdd
          .byte 0x6
          .byte 0xae
          .byte 0xdd
          .byte 0x3e
          .byte 0x5
          .byte 0x46
          .byte 0x4d
          .byte 0xe6
          .byte 0xbd
          .byte 0xb5
          .byte 0x91
          .byte 0x54
          .byte 0x8d
          .byte 0x5
          .byte 0x71
          .byte 0xc4
          .byte 0x5d
          .byte 0x6f
          .byte 0x4
          .byte 0x6
          .byte 0xd4
          .byte 0xff
          .byte 0x60
          .byte 0x50
          .byte 0x15
          .byte 0x24
          .byte 0x19
          .byte 0x98
          .byte 0xfb
          .byte 0x97
          .byte 0xd6
          .byte 0xbd
          .byte 0xe9
          .byte 0xcc
          .byte 0x89
          .byte 0x40
          .byte 0x43
          .byte 0x77
          .byte 0x67
          .byte 0xd9
          .byte 0x9e
          .byte 0xbd
          .byte 0xb0
          .byte 0xe8
          .byte 0x42
          .byte 0x88
          .byte 0x7
          .byte 0x89
          .byte 0x8b
          .byte 0x38
          .byte 0xe7
          .byte 0x19
          .byte 0x5b
          .byte 0xdb
          .byte 0x79
          .byte 0xc8
          .byte 0xee
          .byte 0x47
          .byte 0xa1
          .byte 0x7c
          .byte 0xa
          .byte 0xe9
          .byte 0x7c
          .byte 0x42
          .byte 0xf
          .byte 0xc9
          .byte 0xf8
          .byte 0x84
          .byte 0x1e
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x83
          .byte 0x9
          .byte 0x80
          .byte 0x86
          .byte 0x48
          .byte 0x32
          .byte 0x2b
          .byte 0xed
          .byte 0xac
          .byte 0x1e
          .byte 0x11
          .byte 0x70
          .byte 0x4e
          .byte 0x6c
          .byte 0x5a
          .byte 0x72
          .byte 0xfb
          .byte 0xfd
          .byte 0xe
          .byte 0xff
          .byte 0x56
          .byte 0xf
          .byte 0x85
          .byte 0x38
          .byte 0x1e
          .byte 0x3d
          .byte 0xae
          .byte 0xd5
          .byte 0x27
          .byte 0x36
          .byte 0x2d
          .byte 0x39
          .byte 0x64
          .byte 0xa
          .byte 0xf
          .byte 0xd9
          .byte 0x21
          .byte 0x68
          .byte 0x5c
          .byte 0xa6
          .byte 0xd1
          .byte 0x9b
          .byte 0x5b
          .byte 0x54
          .byte 0x3a
          .byte 0x24
          .byte 0x36
          .byte 0x2e
          .byte 0xb1
          .byte 0xc
          .byte 0xa
          .byte 0x67
          .byte 0xf
          .byte 0x93
          .byte 0x57
          .byte 0xe7
          .byte 0xd2
          .byte 0xb4
          .byte 0xee
          .byte 0x96
          .byte 0x9e
          .byte 0x1b
          .byte 0x9b
          .byte 0x91
          .byte 0x4f
          .byte 0x80
          .byte 0xc0
          .byte 0xc5
          .byte 0xa2
          .byte 0x61
          .byte 0xdc
          .byte 0x20
          .byte 0x69
          .byte 0x5a
          .byte 0x77
          .byte 0x4b
          .byte 0x16
          .byte 0x1c
          .byte 0x12
          .byte 0x1a
          .byte 0xa
          .byte 0xe2
          .byte 0x93
          .byte 0xba
          .byte 0xe5
          .byte 0xc0
          .byte 0xa0
          .byte 0x2a
          .byte 0x43
          .byte 0x3c
          .byte 0x22
          .byte 0xe0
          .byte 0x1d
          .byte 0x12
          .byte 0x1b
          .byte 0x17
          .byte 0xb
          .byte 0xe
          .byte 0x9
          .byte 0xd
          .byte 0xad
          .byte 0xf2
          .byte 0x8b
          .byte 0xc7
          .byte 0xb9
          .byte 0x2d
          .byte 0xb6
          .byte 0xa8
          .byte 0xc8
          .byte 0x14
          .byte 0x1e
          .byte 0xa9
          .byte 0x85
          .byte 0x57
          .byte 0xf1
          .byte 0x19
          .byte 0x4c
          .byte 0xaf
          .byte 0x75
          .byte 0x7
          .byte 0xbb
          .byte 0xee
          .byte 0x99
          .byte 0xdd
          .byte 0xfd
          .byte 0xa3
          .byte 0x7f
          .byte 0x60
          .byte 0x9f
          .byte 0xf7
          .byte 0x1
          .byte 0x26
          .byte 0xbc
          .byte 0x5c
          .byte 0x72
          .byte 0xf5
          .byte 0xc5
          .byte 0x44
          .byte 0x66
          .byte 0x3b
          .byte 0x34
          .byte 0x5b
          .byte 0xfb
          .byte 0x7e
          .byte 0x76
          .byte 0x8b
          .byte 0x43
          .byte 0x29
          .byte 0xdc
          .byte 0xcb
          .byte 0x23
          .byte 0xc6
          .byte 0x68
          .byte 0xb6
          .byte 0xed
          .byte 0xfc
          .byte 0x63
          .byte 0xb8
          .byte 0xe4
          .byte 0xf1
          .byte 0xca
          .byte 0xd7
          .byte 0x31
          .byte 0xdc
          .byte 0x10
          .byte 0x42
          .byte 0x63
          .byte 0x85
          .byte 0x40
          .byte 0x13
          .byte 0x97
          .byte 0x22
          .byte 0x20
          .byte 0x84
          .byte 0xc6
          .byte 0x11
          .byte 0x7d
          .byte 0x85
          .byte 0x4a
          .byte 0x24
          .byte 0xf8
          .byte 0xd2
          .byte 0xbb
          .byte 0x3d
          .byte 0x11
          .byte 0xae
          .byte 0xf9
          .byte 0x32
          .byte 0x6d
          .byte 0xc7
          .byte 0x29
          .byte 0xa1
          .byte 0x4b
          .byte 0x1d
          .byte 0x9e
          .byte 0x2f
          .byte 0xf3
          .byte 0xdc
          .byte 0xb2
          .byte 0x30
          .byte 0xec
          .byte 0xd
          .byte 0x86
          .byte 0x52
          .byte 0xd0
          .byte 0x77
          .byte 0xc1
          .byte 0xe3
          .byte 0x6c
          .byte 0x2b
          .byte 0xb3
          .byte 0x16
          .byte 0x99
          .byte 0xa9
          .byte 0x70
          .byte 0xb9
          .byte 0xfa
          .byte 0x11
          .byte 0x94
          .byte 0x48
          .byte 0x22
          .byte 0x47
          .byte 0xe9
          .byte 0x64
          .byte 0xc4
          .byte 0xa8
          .byte 0xfc
          .byte 0x8c
          .byte 0x1a
          .byte 0xa0
          .byte 0xf0
          .byte 0x3f
          .byte 0xd8
          .byte 0x56
          .byte 0x7d
          .byte 0x2c
          .byte 0xef
          .byte 0x22
          .byte 0x33
          .byte 0x90
          .byte 0xc7
          .byte 0x87
          .byte 0x49
          .byte 0x4e
          .byte 0xc1
          .byte 0xd9
          .byte 0x38
          .byte 0xd1
          .byte 0xfe
          .byte 0x8c
          .byte 0xca
          .byte 0xa2
          .byte 0x36
          .byte 0x98
          .byte 0xd4
          .byte 0xb
          .byte 0xcf
          .byte 0xa6
          .byte 0xf5
          .byte 0x81
          .byte 0x28
          .byte 0xa5
          .byte 0x7a
          .byte 0xde
          .byte 0x26
          .byte 0xda
          .byte 0xb7
          .byte 0x8e
          .byte 0xa4
          .byte 0x3f
          .byte 0xad
          .byte 0xbf
          .byte 0xe4
          .byte 0x2c
          .byte 0x3a
          .byte 0x9d
          .byte 0xd
          .byte 0x50
          .byte 0x78
          .byte 0x92
          .byte 0x9b
          .byte 0x6a
          .byte 0x5f
          .byte 0xcc
          .byte 0x62
          .byte 0x54
          .byte 0x7e
          .byte 0x46
          .byte 0xc2
          .byte 0xf6
          .byte 0x8d
          .byte 0x13
          .byte 0xe8
          .byte 0x90
          .byte 0xd8
          .byte 0xb8
          .byte 0x5e
          .byte 0x2e
          .byte 0x39
          .byte 0xf7
          .byte 0xf5
          .byte 0x82
          .byte 0xc3
          .byte 0xaf
          .byte 0xbe
          .byte 0x9f
          .byte 0x5d
          .byte 0x80
          .byte 0x7c
          .byte 0x69
          .byte 0xd0
          .byte 0x93
          .byte 0xa9
          .byte 0x6f
          .byte 0xd5
          .byte 0x2d
          .byte 0xb3
          .byte 0xcf
          .byte 0x25
          .byte 0x12
          .byte 0x3b
          .byte 0xc8
          .byte 0xac
          .byte 0x99
          .byte 0xa7
          .byte 0x10
          .byte 0x18
          .byte 0x7d
          .byte 0x6e
          .byte 0xe8
          .byte 0x9c
          .byte 0x63
          .byte 0x7b
          .byte 0xdb
          .byte 0x3b
          .byte 0xbb
          .byte 0x9
          .byte 0xcd
          .byte 0x26
          .byte 0x78
          .byte 0xf4
          .byte 0x6e
          .byte 0x59
          .byte 0x18
          .byte 0x1
          .byte 0xec
          .byte 0x9a
          .byte 0xb7
          .byte 0xa8
          .byte 0x83
          .byte 0x4f
          .byte 0x9a
          .byte 0x65
          .byte 0xe6
          .byte 0x95
          .byte 0x6e
          .byte 0x7e
          .byte 0xaa
          .byte 0xff
          .byte 0xe6
          .byte 0x8
          .byte 0x21
          .byte 0xbc
          .byte 0xcf
          .byte 0xe6
          .byte 0xef
          .byte 0x15
          .byte 0xe8
          .byte 0xd9
          .byte 0xba
          .byte 0xe7
          .byte 0x9b
          .byte 0xce
          .byte 0x4a
          .byte 0x6f
          .byte 0x36
          .byte 0xd4
          .byte 0xea
          .byte 0x9f
          .byte 0x9
          .byte 0xd6
          .byte 0x29
          .byte 0xb0
          .byte 0x7c
          .byte 0xaf
          .byte 0x31
          .byte 0xa4
          .byte 0xb2
          .byte 0x31
          .byte 0x2a
          .byte 0x3f
          .byte 0x23
          .byte 0x30
          .byte 0xc6
          .byte 0xa5
          .byte 0x94
          .byte 0xc0
          .byte 0x35
          .byte 0xa2
          .byte 0x66
          .byte 0x37
          .byte 0x74
          .byte 0x4e
          .byte 0xbc
          .byte 0xa6
          .byte 0xfc
          .byte 0x82
          .byte 0xca
          .byte 0xb0
          .byte 0xe0
          .byte 0x90
          .byte 0xd0
          .byte 0x15
          .byte 0x33
          .byte 0xa7
          .byte 0xd8
          .byte 0x4a
          .byte 0xf1
          .byte 0x4
          .byte 0x98
          .byte 0xf7
          .byte 0x41
          .byte 0xec
          .byte 0xda
          .byte 0xe
          .byte 0x7f
          .byte 0xcd
          .byte 0x50
          .byte 0x2f
          .byte 0x17
          .byte 0x91
          .byte 0xf6
          .byte 0x8d
          .byte 0x76
          .byte 0x4d
          .byte 0xd6
          .byte 0x4d
          .byte 0x43
          .byte 0xef
          .byte 0xb0
          .byte 0x54
          .byte 0xcc
          .byte 0xaa
          .byte 0x4d
          .byte 0xdf
          .byte 0xe4
          .byte 0x96
          .byte 0x4
          .byte 0xe3
          .byte 0x9e
          .byte 0xd1
          .byte 0xb5
          .byte 0x1b
          .byte 0x4c
          .byte 0x6a
          .byte 0x88
          .byte 0xb8
          .byte 0xc1
          .byte 0x2c
          .byte 0x1f
          .byte 0x7f
          .byte 0x46
          .byte 0x65
          .byte 0x51
          .byte 0x4
          .byte 0x9d
          .byte 0x5e
          .byte 0xea
          .byte 0x5d
          .byte 0x1
          .byte 0x8c
          .byte 0x35
          .byte 0x73
          .byte 0xfa
          .byte 0x87
          .byte 0x74
          .byte 0x2e
          .byte 0xfb
          .byte 0xb
          .byte 0x41
          .byte 0x5a
          .byte 0xb3
          .byte 0x67
          .byte 0x1d
          .byte 0x52
          .byte 0x92
          .byte 0xdb
          .byte 0xd2
          .byte 0x33
          .byte 0xe9
          .byte 0x10
          .byte 0x56
          .byte 0x13
          .byte 0x6d
          .byte 0xd6
          .byte 0x47
          .byte 0x8c
          .byte 0x9a
          .byte 0xd7
          .byte 0x61
          .byte 0x7a
          .byte 0x37
          .byte 0xa1
          .byte 0xc
          .byte 0x8e
          .byte 0x59
          .byte 0xf8
          .byte 0x14
          .byte 0x89
          .byte 0xeb
          .byte 0x13
          .byte 0x3c
          .byte 0xee
          .byte 0xce
          .byte 0xa9
          .byte 0x27
          .byte 0x35
          .byte 0xb7
          .byte 0x61
          .byte 0xc9
          .byte 0xed
          .byte 0xe1
          .byte 0x1c
          .byte 0xe5
          .byte 0x3c
          .byte 0x7a
          .byte 0x47
          .byte 0xb1
          .byte 0x59
          .byte 0x9c
          .byte 0xd2
          .byte 0xdf
          .byte 0x3f
          .byte 0x55
          .byte 0xf2
          .byte 0x73
          .byte 0x79
          .byte 0x18
          .byte 0x14
          .byte 0xce
          .byte 0xbf
          .byte 0x73
          .byte 0xc7
          .byte 0x37
          .byte 0xea
          .byte 0x53
          .byte 0xf7
          .byte 0xcd
          .byte 0x5b
          .byte 0x5f
          .byte 0xfd
          .byte 0xaa
          .byte 0x14
          .byte 0xdf
          .byte 0x3d
          .byte 0x6f
          .byte 0x86
          .byte 0x78
          .byte 0x44
          .byte 0xdb
          .byte 0x81
          .byte 0xca
          .byte 0xaf
          .byte 0xf3
          .byte 0x3e
          .byte 0xb9
          .byte 0x68
          .byte 0xc4
          .byte 0x2c
          .byte 0x38
          .byte 0x24
          .byte 0x34
          .byte 0x5f
          .byte 0xc2
          .byte 0xa3
          .byte 0x40
          .byte 0x72
          .byte 0x16
          .byte 0x1d
          .byte 0xc3
          .byte 0xc
          .byte 0xbc
          .byte 0xe2
          .byte 0x25
          .byte 0x8b
          .byte 0x28
          .byte 0x3c
          .byte 0x49
          .byte 0x41
          .byte 0xff
          .byte 0xd
          .byte 0x95
          .byte 0x71
          .byte 0x39
          .byte 0xa8
          .byte 0x1
          .byte 0xde
          .byte 0x8
          .byte 0xc
          .byte 0xb3
          .byte 0x9c
          .byte 0xd8
          .byte 0xb4
          .byte 0xe4
          .byte 0x90
          .byte 0x64
          .byte 0x56
          .byte 0xc1
          .byte 0x61
          .byte 0x7b
          .byte 0xcb
          .byte 0x84
          .byte 0x70
          .byte 0xd5
          .byte 0x32
          .byte 0xb6
          .byte 0x74
          .byte 0x48
          .byte 0x6c
          .byte 0x5c
          .byte 0x42
          .byte 0xd0
          .byte 0xb8
          .byte 0x57
.L_446180:

            push RCX
            hlt 
          .byte 0xa7
          .byte 0x50
          .byte 0x7e
          .byte 0x41
          .byte 0x65
          .byte 0x53
          .byte 0x1a
          .byte 0x17
          .byte 0xa4
          .byte 0xc3
          .byte 0x3a
          .byte 0x27
          .byte 0x5e
          .byte 0x96
          .byte 0x3b
          .byte 0xab
          .byte 0x6b
          .byte 0xcb
          .byte 0x1f
          .byte 0x9d
          .byte 0x45
          .byte 0xf1
          .byte 0xac
          .byte 0xfa
          .byte 0x58
          .byte 0xab
          .byte 0x4b
          .byte 0xe3
          .byte 0x3
          .byte 0x93
          .byte 0x20
          .byte 0x30
          .byte 0xfa
          .byte 0x55
          .byte 0xad
          .byte 0x76
          .byte 0x6d
          .byte 0xf6
          .byte 0x88
          .byte 0xcc
          .byte 0x76
          .byte 0x91
          .byte 0xf5
          .byte 0x2
          .byte 0x4c
          .byte 0x25
          .byte 0x4f
          .byte 0xe5
          .byte 0xd7
          .byte 0xfc
          .byte 0xc5
          .byte 0x2a
          .byte 0xcb
          .byte 0xd7
          .byte 0x26
          .byte 0x35
          .byte 0x44
          .byte 0x80
          .byte 0xb5
          .byte 0x62
          .byte 0xa3
          .byte 0x8f
          .byte 0xde
          .byte 0xb1
          .byte 0x5a
          .byte 0x49
          .byte 0x25
          .byte 0xba
          .byte 0x1b
          .byte 0x67
          .byte 0x45
          .byte 0xea
          .byte 0xe
          .byte 0x98
          .byte 0x5d
          .byte 0xfe
          .byte 0xc0
          .byte 0xe1
          .byte 0xc3
          .byte 0x2f
          .byte 0x75
          .byte 0x2
          .byte 0x81
          .byte 0x4c
          .byte 0xf0
          .byte 0x12
          .byte 0x8d
          .byte 0x46
          .byte 0x97
          .byte 0xa3
          .byte 0x6b
          .byte 0xd3
          .byte 0xf9
          .byte 0xc6
          .byte 0x3
          .byte 0x8f
          .byte 0x5f
          .byte 0xe7
          .byte 0x15
          .byte 0x92
          .byte 0x9c
          .byte 0x95
          .byte 0xbf
          .byte 0x6d
          .byte 0x7a
          .byte 0xeb
          .byte 0x95
          .byte 0x52
          .byte 0x59
          .byte 0xda
          .byte 0xd4
          .byte 0xbe
          .byte 0x83
          .byte 0x2d
          .byte 0x58
          .byte 0x74
          .byte 0x21
          .byte 0xd3
          .byte 0x49
          .byte 0xe0
          .byte 0x69
          .byte 0x29
          .byte 0x8e
          .byte 0xc9
          .byte 0xc8
          .byte 0x44
          .byte 0x75
          .byte 0xc2
          .byte 0x89
          .byte 0x6a
          .byte 0xf4
          .byte 0x8e
          .byte 0x79
          .byte 0x78
          .byte 0x99
          .byte 0x58
          .byte 0x3e
          .byte 0x6b
          .byte 0x27
          .byte 0xb9
          .byte 0x71
          .byte 0xdd
          .byte 0xbe
          .byte 0xe1
          .byte 0x4f
          .byte 0xb6
          .byte 0xf0
          .byte 0x88
          .byte 0xad
          .byte 0x17
          .byte 0xc9
          .byte 0x20
          .byte 0xac
          .byte 0x66
          .byte 0x7d
          .byte 0xce
          .byte 0x3a
          .byte 0xb4
          .byte 0x63
          .byte 0xdf
          .byte 0x4a
          .byte 0x18
          .byte 0xe5
          .byte 0x1a
          .byte 0x31
          .byte 0x82
          .byte 0x97
          .byte 0x51
          .byte 0x33
          .byte 0x60
          .byte 0x62
          .byte 0x53
          .byte 0x7f
          .byte 0x45
          .byte 0xb1
          .byte 0x64
          .byte 0x77
          .byte 0xe0
          .byte 0xbb
          .byte 0x6b
          .byte 0xae
          .byte 0x84
          .byte 0xfe
          .byte 0x81
          .byte 0xa0
          .byte 0x1c
          .byte 0xf9
          .byte 0x8
          .byte 0x2b
          .byte 0x94
          .byte 0x70
          .byte 0x48
          .byte 0x68
          .byte 0x58
          .byte 0x8f
          .byte 0x45
          .byte 0xfd
          .byte 0x19
          .byte 0x94
          .byte 0xde
          .byte 0x6c
          .byte 0x87
          .byte 0x52
          .byte 0x7b
          .byte 0xf8
          .byte 0xb7
          .byte 0xab
          .byte 0x73
          .byte 0xd3
          .byte 0x23
          .byte 0x72
          .byte 0x4b
          .byte 0x2
          .byte 0xe2
          .byte 0xe3
          .byte 0x1f
          .byte 0x8f
          .byte 0x57
          .byte 0x66
          .byte 0x55
          .byte 0xab
          .byte 0x2a
          .byte 0xb2
          .byte 0xeb
          .byte 0x28
          .byte 0x7
          .byte 0x2f
          .byte 0xb5
          .byte 0xc2
          .byte 0x3
          .byte 0x86
          .byte 0xc5
          .byte 0x7b
          .byte 0x9a
          .byte 0xd3
          .byte 0x37
          .byte 0x8
          .byte 0xa5
          .byte 0x30
          .byte 0x28
          .byte 0x87
          .byte 0xf2
          .byte 0x23
          .byte 0xbf
          .byte 0xa5
          .byte 0xb2
          .byte 0x2
          .byte 0x3
          .byte 0x6a
          .byte 0xba
          .byte 0xed
          .byte 0x16
          .byte 0x82
          .byte 0x5c
          .byte 0x8a
          .byte 0xcf
          .byte 0x1c
          .byte 0x2b
          .byte 0xa7
          .byte 0x79
          .byte 0xb4
          .byte 0x92
          .byte 0xf3
          .byte 0x7
          .byte 0xf2
          .byte 0xf0
          .byte 0x4e
          .byte 0x69
          .byte 0xe2
          .byte 0xa1
          .byte 0x65
          .byte 0xda
          .byte 0xf4
          .byte 0xcd
          .byte 0x6
          .byte 0x5
          .byte 0xbe
          .byte 0xd5
          .byte 0xd1
          .byte 0x34
          .byte 0x62
          .byte 0x1f
          .byte 0xc4
          .byte 0xa6
          .byte 0xfe
          .byte 0x8a
          .byte 0x34
          .byte 0x2e
          .byte 0x53
          .byte 0x9d
          .byte 0xa2
          .byte 0xf3
          .byte 0x55
          .byte 0xa0
          .byte 0x5
          .byte 0x8a
          .byte 0xe1
          .byte 0x32
          .byte 0xa4
          .byte 0xf6
          .byte 0xeb
          .byte 0x75
          .byte 0xb
          .byte 0x83
          .byte 0xec
          .byte 0x39
          .byte 0x40
          .byte 0x60
          .byte 0xef
          .byte 0xaa
          .byte 0x5e
          .byte 0x71
          .byte 0x9f
          .byte 0x6
          .byte 0xbd
          .byte 0x6e
          .byte 0x10
          .byte 0x51
          .byte 0x3e
          .byte 0x21
          .byte 0x8a
          .byte 0xf9
          .byte 0x96
          .byte 0xdd
          .byte 0x6
          .byte 0x3d
          .byte 0xdd
          .byte 0x3e
          .byte 0x5
          .byte 0xae
          .byte 0x4d
          .byte 0xe6
          .byte 0xbd
          .byte 0x46
          .byte 0x91
          .byte 0x54
          .byte 0x8d
          .byte 0xb5
          .byte 0x71
          .byte 0xc4
          .byte 0x5d
          .byte 0x5
          .byte 0x4
          .byte 0x6
          .byte 0xd4
          .byte 0x6f
          .byte 0x60
          .byte 0x50
          .byte 0x15
          .byte 0xff
          .byte 0x19
          .byte 0x98
          .byte 0xfb
          .byte 0x24
          .byte 0xd6
          .byte 0xbd
          .byte 0xe9
          .byte 0x97
          .byte 0x89
          .byte 0x40
          .byte 0x43
          .byte 0xcc
          .byte 0x67
          .byte 0xd9
          .byte 0x9e
          .byte 0x77
          .byte 0xb0
          .byte 0xe8
          .byte 0x42
          .byte 0xbd
          .byte 0x7
          .byte 0x89
          .byte 0x8b
          .byte 0x88
          .byte 0xe7
          .byte 0x19
          .byte 0x5b
          .byte 0x38
          .byte 0x79
          .byte 0xc8
          .byte 0xee
          .byte 0xdb
          .byte 0xa1
          .byte 0x7c
          .byte 0xa
          .byte 0x47
          .byte 0x7c
          .byte 0x42
          .byte 0xf
          .byte 0xe9
          .byte 0xf8
          .byte 0x84
          .byte 0x1e
          .byte 0xc9
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x9
          .byte 0x80
          .byte 0x86
          .byte 0x83
          .byte 0x32
          .byte 0x2b
          .byte 0xed
          .byte 0x48
          .byte 0x1e
          .byte 0x11
          .byte 0x70
          .byte 0xac
          .byte 0x6c
          .byte 0x5a
          .byte 0x72
          .byte 0x4e
          .byte 0xfd
          .byte 0xe
          .byte 0xff
          .byte 0xfb
          .byte 0xf
          .byte 0x85
          .byte 0x38
          .byte 0x56
          .byte 0x3d
          .byte 0xae
          .byte 0xd5
          .byte 0x1e
          .byte 0x36
          .byte 0x2d
          .byte 0x39
          .byte 0x27
          .byte 0xa
          .byte 0xf
          .byte 0xd9
          .byte 0x64
          .byte 0x68
          .byte 0x5c
          .byte 0xa6
          .byte 0x21
          .byte 0x9b
          .byte 0x5b
          .byte 0x54
          .byte 0xd1
          .byte 0x24
          .byte 0x36
          .byte 0x2e
          .byte 0x3a
          .byte 0xc
          .byte 0xa
          .byte 0x67
          .byte 0xb1
          .byte 0x93
          .byte 0x57
          .byte 0xe7
          .byte 0xf
          .byte 0xb4
          .byte 0xee
          .byte 0x96
          .byte 0xd2
          .byte 0x1b
          .byte 0x9b
          .byte 0x91
          .byte 0x9e
          .byte 0x80
          .byte 0xc0
          .byte 0xc5
          .byte 0x4f
          .byte 0x61
          .byte 0xdc
          .byte 0x20
          .byte 0xa2
          .byte 0x5a
          .byte 0x77
          .byte 0x4b
          .byte 0x69
          .byte 0x1c
          .byte 0x12
          .byte 0x1a
          .byte 0x16
          .byte 0xe2
          .byte 0x93
          .byte 0xba
          .byte 0xa
          .byte 0xc0
          .byte 0xa0
          .byte 0x2a
          .byte 0xe5
          .byte 0x3c
          .byte 0x22
          .byte 0xe0
          .byte 0x43
          .byte 0x12
          .byte 0x1b
          .byte 0x17
          .byte 0x1d
          .byte 0xe
          .byte 0x9
          .byte 0xd
          .byte 0xb
          .byte 0xf2
          .byte 0x8b
          .byte 0xc7
          .byte 0xad
          .byte 0x2d
          .byte 0xb6
          .byte 0xa8
          .byte 0xb9
          .byte 0x14
          .byte 0x1e
          .byte 0xa9
          .byte 0xc8
          .byte 0x57
          .byte 0xf1
          .byte 0x19
          .byte 0x85
          .byte 0xaf
          .byte 0x75
          .byte 0x7
          .byte 0x4c
          .byte 0xee
          .byte 0x99
          .byte 0xdd
          .byte 0xbb
          .byte 0xa3
          .byte 0x7f
          .byte 0x60
          .byte 0xfd
          .byte 0xf7
          .byte 0x1
          .byte 0x26
          .byte 0x9f
          .byte 0x5c
          .byte 0x72
          .byte 0xf5
          .byte 0xbc
          .byte 0x44
          .byte 0x66
          .byte 0x3b
          .byte 0xc5
          .byte 0x5b
          .byte 0xfb
          .byte 0x7e
          .byte 0x34
          .byte 0x8b
          .byte 0x43
          .byte 0x29
          .byte 0x76
          .byte 0xcb
          .byte 0x23
          .byte 0xc6
          .byte 0xdc
          .byte 0xb6
          .byte 0xed
          .byte 0xfc
          .byte 0x68
          .byte 0xb8
          .byte 0xe4
          .byte 0xf1
          .byte 0x63
          .byte 0xd7
          .byte 0x31
          .byte 0xdc
          .byte 0xca
          .byte 0x42
          .byte 0x63
          .byte 0x85
          .byte 0x10
          .byte 0x13
          .byte 0x97
          .byte 0x22
          .byte 0x40
          .byte 0x84
          .byte 0xc6
          .byte 0x11
          .byte 0x20
          .byte 0x85
          .byte 0x4a
          .byte 0x24
          .byte 0x7d
          .byte 0xd2
          .byte 0xbb
          .byte 0x3d
          .byte 0xf8
          .byte 0xae
          .byte 0xf9
          .byte 0x32
          .byte 0x11
          .byte 0xc7
          .byte 0x29
          .byte 0xa1
          .byte 0x6d
          .byte 0x1d
          .byte 0x9e
          .byte 0x2f
          .byte 0x4b
          .byte 0xdc
          .byte 0xb2
          .byte 0x30
          .byte 0xf3
          .byte 0xd
          .byte 0x86
          .byte 0x52
          .byte 0xec
          .byte 0x77
          .byte 0xc1
          .byte 0xe3
          .byte 0xd0
          .byte 0x2b
          .byte 0xb3
          .byte 0x16
          .byte 0x6c
          .byte 0xa9
          .byte 0x70
          .byte 0xb9
          .byte 0x99
          .byte 0x11
          .byte 0x94
          .byte 0x48
          .byte 0xfa
          .byte 0x47
          .byte 0xe9
          .byte 0x64
          .byte 0x22
          .byte 0xa8
          .byte 0xfc
          .byte 0x8c
          .byte 0xc4
          .byte 0xa0
          .byte 0xf0
          .byte 0x3f
          .byte 0x1a
          .byte 0x56
          .byte 0x7d
          .byte 0x2c
          .byte 0xd8
          .byte 0x22
          .byte 0x33
          .byte 0x90
          .byte 0xef
          .byte 0x87
          .byte 0x49
          .byte 0x4e
          .byte 0xc7
          .byte 0xd9
          .byte 0x38
          .byte 0xd1
          .byte 0xc1
          .byte 0x8c
          .byte 0xca
          .byte 0xa2
          .byte 0xfe
          .byte 0x98
          .byte 0xd4
          .byte 0xb
          .byte 0x36
          .byte 0xa6
          .byte 0xf5
          .byte 0x81
          .byte 0xcf
          .byte 0xa5
          .byte 0x7a
          .byte 0xde
          .byte 0x28
          .byte 0xda
          .byte 0xb7
          .byte 0x8e
          .byte 0x26
          .byte 0x3f
          .byte 0xad
          .byte 0xbf
          .byte 0xa4
          .byte 0x2c
          .byte 0x3a
          .byte 0x9d
          .byte 0xe4
          .byte 0x50
          .byte 0x78
          .byte 0x92
          .byte 0xd
          .byte 0x6a
          .byte 0x5f
          .byte 0xcc
          .byte 0x9b
          .byte 0x54
          .byte 0x7e
          .byte 0x46
          .byte 0x62
          .byte 0xf6
          .byte 0x8d
          .byte 0x13
          .byte 0xc2
          .byte 0x90
          .byte 0xd8
          .byte 0xb8
          .byte 0xe8
          .byte 0x2e
          .byte 0x39
          .byte 0xf7
          .byte 0x5e
          .byte 0x82
          .byte 0xc3
          .byte 0xaf
          .byte 0xf5
          .byte 0x9f
          .byte 0x5d
          .byte 0x80
          .byte 0xbe
          .byte 0x69
          .byte 0xd0
          .byte 0x93
          .byte 0x7c
          .byte 0x6f
          .byte 0xd5
          .byte 0x2d
          .byte 0xa9
          .byte 0xcf
          .byte 0x25
          .byte 0x12
          .byte 0xb3
          .byte 0xc8
          .byte 0xac
          .byte 0x99
          .byte 0x3b
          .byte 0x10
          .byte 0x18
          .byte 0x7d
          .byte 0xa7
          .byte 0xe8
          .byte 0x9c
          .byte 0x63
          .byte 0x6e
          .byte 0xdb
          .byte 0x3b
          .byte 0xbb
          .byte 0x7b
          .byte 0xcd
          .byte 0x26
          .byte 0x78
          .byte 0x9
          .byte 0x6e
          .byte 0x59
          .byte 0x18
          .byte 0xf4
          .byte 0xec
          .byte 0x9a
          .byte 0xb7
          .byte 0x1
          .byte 0x83
          .byte 0x4f
          .byte 0x9a
          .byte 0xa8
          .byte 0xe6
          .byte 0x95
          .byte 0x6e
          .byte 0x65
          .byte 0xaa
          .byte 0xff
          .byte 0xe6
          .byte 0x7e
          .byte 0x21
          .byte 0xbc
          .byte 0xcf
          .byte 0x8
          .byte 0xef
          .byte 0x15
          .byte 0xe8
          .byte 0xe6
          .byte 0xba
          .byte 0xe7
          .byte 0x9b
          .byte 0xd9
          .byte 0x4a
          .byte 0x6f
          .byte 0x36
          .byte 0xce
          .byte 0xea
          .byte 0x9f
          .byte 0x9
          .byte 0xd4
          .byte 0x29
          .byte 0xb0
          .byte 0x7c
          .byte 0xd6
          .byte 0x31
          .byte 0xa4
          .byte 0xb2
          .byte 0xaf
          .byte 0x2a
          .byte 0x3f
          .byte 0x23
          .byte 0x31
          .byte 0xc6
          .byte 0xa5
          .byte 0x94
          .byte 0x30
          .byte 0x35
          .byte 0xa2
          .byte 0x66
          .byte 0xc0
          .byte 0x74
          .byte 0x4e
          .byte 0xbc
          .byte 0x37
          .byte 0xfc
          .byte 0x82
          .byte 0xca
          .byte 0xa6
          .byte 0xe0
          .byte 0x90
          .byte 0xd0
          .byte 0xb0
          .byte 0x33
          .byte 0xa7
          .byte 0xd8
          .byte 0x15
          .byte 0xf1
          .byte 0x4
          .byte 0x98
          .byte 0x4a
          .byte 0x41
          .byte 0xec
          .byte 0xda
          .byte 0xf7
          .byte 0x7f
          .byte 0xcd
          .byte 0x50
          .byte 0xe
          .byte 0x17
          .byte 0x91
          .byte 0xf6
          .byte 0x2f
          .byte 0x76
          .byte 0x4d
          .byte 0xd6
          .byte 0x8d
          .byte 0x43
          .byte 0xef
          .byte 0xb0
          .byte 0x4d
          .byte 0xcc
          .byte 0xaa
          .byte 0x4d
          .byte 0x54
          .byte 0xe4
          .byte 0x96
          .byte 0x4
          .byte 0xdf
          .byte 0x9e
          .byte 0xd1
          .byte 0xb5
          .byte 0xe3
          .byte 0x4c
          .byte 0x6a
          .byte 0x88
          .byte 0x1b
          .byte 0xc1
          .byte 0x2c
          .byte 0x1f
          .byte 0xb8
          .byte 0x46
          .byte 0x65
          .byte 0x51
          .byte 0x7f
          .byte 0x9d
          .byte 0x5e
          .byte 0xea
          .byte 0x4
          .byte 0x1
          .byte 0x8c
          .byte 0x35
          .byte 0x5d
          .byte 0xfa
          .byte 0x87
          .byte 0x74
          .byte 0x73
          .byte 0xfb
          .byte 0xb
          .byte 0x41
          .byte 0x2e
          .byte 0xb3
          .byte 0x67
          .byte 0x1d
          .byte 0x5a
          .byte 0x92
          .byte 0xdb
          .byte 0xd2
          .byte 0x52
          .byte 0xe9
          .byte 0x10
          .byte 0x56
          .byte 0x33
          .byte 0x6d
          .byte 0xd6
          .byte 0x47
          .byte 0x13
          .byte 0x9a
          .byte 0xd7
          .byte 0x61
          .byte 0x8c
          .byte 0x37
          .byte 0xa1
          .byte 0xc
          .byte 0x7a
          .byte 0x59
          .byte 0xf8
          .byte 0x14
          .byte 0x8e
          .byte 0xeb
          .byte 0x13
          .byte 0x3c
          .byte 0x89
          .byte 0xce
          .byte 0xa9
          .byte 0x27
          .byte 0xee
          .byte 0xb7
          .byte 0x61
          .byte 0xc9
          .byte 0x35
          .byte 0xe1
          .byte 0x1c
          .byte 0xe5
          .byte 0xed
          .byte 0x7a
          .byte 0x47
          .byte 0xb1
          .byte 0x3c
          .byte 0x9c
          .byte 0xd2
          .byte 0xdf
          .byte 0x59
          .byte 0x55
          .byte 0xf2
          .byte 0x73
          .byte 0x3f
          .byte 0x18
          .byte 0x14
          .byte 0xce
          .byte 0x79
          .byte 0x73
          .byte 0xc7
          .byte 0x37
          .byte 0xbf
          .byte 0x53
          .byte 0xf7
          .byte 0xcd
          .byte 0xea
          .byte 0x5f
          .byte 0xfd
          .byte 0xaa
          .byte 0x5b
          .byte 0xdf
          .byte 0x3d
          .byte 0x6f
          .byte 0x14
          .byte 0x78
          .byte 0x44
          .byte 0xdb
          .byte 0x86
          .byte 0xca
          .byte 0xaf
          .byte 0xf3
          .byte 0x81
          .byte 0xb9
          .byte 0x68
          .byte 0xc4
          .byte 0x3e
          .byte 0x38
          .byte 0x24
          .byte 0x34
          .byte 0x2c
          .byte 0xc2
          .byte 0xa3
          .byte 0x40
          .byte 0x5f
          .byte 0x16
          .byte 0x1d
          .byte 0xc3
          .byte 0x72
          .byte 0xbc
          .byte 0xe2
          .byte 0x25
          .byte 0xc
          .byte 0x28
          .byte 0x3c
          .byte 0x49
          .byte 0x8b
          .byte 0xff
          .byte 0xd
          .byte 0x95
          .byte 0x41
          .byte 0x39
          .byte 0xa8
          .byte 0x1
          .byte 0x71
          .byte 0x8
          .byte 0xc
          .byte 0xb3
          .byte 0xde
          .byte 0xd8
          .byte 0xb4
          .byte 0xe4
          .byte 0x9c
          .byte 0x64
          .byte 0x56
          .byte 0xc1
          .byte 0x90
          .byte 0x7b
          .byte 0xcb
          .byte 0x84
          .byte 0x61
          .byte 0xd5
          .byte 0x32
          .byte 0xb6
          .byte 0x70
          .byte 0x48
          .byte 0x6c
          .byte 0x5c
          .byte 0x74
          .byte 0xd0
          .byte 0xb8
          .byte 0x57
          .byte 0x42
.L_446580:
          .byte 0x52
          .byte 0x9
          .byte 0x6a
          .byte 0xd5
          .byte 0x30
          .byte 0x36
          .byte 0xa5
          .byte 0x38
          .byte 0xbf
          .byte 0x40
          .byte 0xa3
          .byte 0x9e
          .byte 0x81
          .byte 0xf3
          .byte 0xd7
          .byte 0xfb
          .byte 0x7c
          .byte 0xe3
          .byte 0x39
          .byte 0x82
          .byte 0x9b
          .byte 0x2f
          .byte 0xff
          .byte 0x87
          .byte 0x34
          .byte 0x8e
          .byte 0x43
          .byte 0x44
          .byte 0xc4
          .byte 0xde
          .byte 0xe9
          .byte 0xcb
          .byte 0x54
          .byte 0x7b
          .byte 0x94
          .byte 0x32
          .byte 0xa6
          .byte 0xc2
          .byte 0x23
          .byte 0x3d
          .byte 0xee
          .byte 0x4c
          .byte 0x95
          .byte 0xb
          .byte 0x42
          .byte 0xfa
          .byte 0xc3
          .byte 0x4e
          .byte 0x8
          .byte 0x2e
          .byte 0xa1
          .byte 0x66
          .byte 0x28
          .byte 0xd9
          .byte 0x24
          .byte 0xb2
          .byte 0x76
          .byte 0x5b
          .byte 0xa2
          .byte 0x49
          .byte 0x6d
          .byte 0x8b
          .byte 0xd1
          .byte 0x25
          .byte 0x72
          .byte 0xf8
          .byte 0xf6
          .byte 0x64
          .byte 0x86
          .byte 0x68
          .byte 0x98
          .byte 0x16
          .byte 0xd4
          .byte 0xa4
          .byte 0x5c
          .byte 0xcc
          .byte 0x5d
          .byte 0x65
          .byte 0xb6
          .byte 0x92
          .byte 0x6c
          .byte 0x70
          .byte 0x48
          .byte 0x50
          .byte 0xfd
          .byte 0xed
          .byte 0xb9
          .byte 0xda
          .byte 0x5e
          .byte 0x15
          .byte 0x46
          .byte 0x57
          .byte 0xa7
          .byte 0x8d
          .byte 0x9d
          .byte 0x84
          .byte 0x90
          .byte 0xd8
          .byte 0xab
          .byte 0x0
          .byte 0x8c
          .byte 0xbc
          .byte 0xd3
          .byte 0xa
          .byte 0xf7
          .byte 0xe4
          .byte 0x58
          .byte 0x5
          .byte 0xb8
          .byte 0xb3
          .byte 0x45
          .byte 0x6
          .byte 0xd0
          .byte 0x2c
          .byte 0x1e
          .byte 0x8f
          .byte 0xca
          .byte 0x3f
          .byte 0xf
          .byte 0x2
          .byte 0xc1
          .byte 0xaf
          .byte 0xbd
          .byte 0x3
          .byte 0x1
          .byte 0x13
          .byte 0x8a
          .byte 0x6b
          .byte 0x3a
          .byte 0x91
          .byte 0x11
          .byte 0x41
          .byte 0x4f
          .byte 0x67
          .byte 0xdc
          .byte 0xea
          .byte 0x97
          .byte 0xf2
          .byte 0xcf
          .byte 0xce
          .byte 0xf0
          .byte 0xb4
          .byte 0xe6
          .byte 0x73
          .byte 0x96
          .byte 0xac
          .byte 0x74
          .byte 0x22
          .byte 0xe7
          .byte 0xad
          .byte 0x35
          .byte 0x85
          .byte 0xe2
          .byte 0xf9
          .byte 0x37
          .byte 0xe8
          .byte 0x1c
          .byte 0x75
          .byte 0xdf
          .byte 0x6e
          .byte 0x47
          .byte 0xf1
          .byte 0x1a
          .byte 0x71
          .byte 0x1d
          .byte 0x29
          .byte 0xc5
          .byte 0x89
          .byte 0x6f
          .byte 0xb7
          .byte 0x62
          .byte 0xe
          .byte 0xaa
          .byte 0x18
          .byte 0xbe
          .byte 0x1b
          .byte 0xfc
          .byte 0x56
          .byte 0x3e
          .byte 0x4b
          .byte 0xc6
          .byte 0xd2
          .byte 0x79
          .byte 0x20
          .byte 0x9a
          .byte 0xdb
          .byte 0xc0
          .byte 0xfe
          .byte 0x78
          .byte 0xcd
          .byte 0x5a
          .byte 0xf4
          .byte 0x1f
          .byte 0xdd
          .byte 0xa8
          .byte 0x33
          .byte 0x88
          .byte 0x7
          .byte 0xc7
          .byte 0x31
          .byte 0xb1
          .byte 0x12
          .byte 0x10
          .byte 0x59
          .byte 0x27
          .byte 0x80
          .byte 0xec
          .byte 0x5f
          .byte 0x60
          .byte 0x51
          .byte 0x7f
          .byte 0xa9
          .byte 0x19
          .byte 0xb5
          .byte 0x4a
          .byte 0xd
          .byte 0x2d
          .byte 0xe5
          .byte 0x7a
          .byte 0x9f
          .byte 0x93
          .byte 0xc9
          .byte 0x9c
          .byte 0xef
          .byte 0xa0
          .byte 0xe0
          .byte 0x3b
          .byte 0x4d
          .byte 0xae
          .byte 0x2a
          .byte 0xf5
          .byte 0xb0
          .byte 0xc8
          .byte 0xeb
          .byte 0xbb
          .byte 0x3c
          .byte 0x83
          .byte 0x53
          .byte 0x99
          .byte 0x61
          .byte 0x17
          .byte 0x2b
          .byte 0x4
          .byte 0x7e
          .byte 0xba
          .byte 0x77
          .byte 0xd6
          .byte 0x26
          .byte 0xe1
          .byte 0x69
          .byte 0x14
          .byte 0x63
          .byte 0x55
          .byte 0x21
          .byte 0xc
          .byte 0x7d
.L_446680:
          .byte 0x63
          .byte 0x63
          .byte 0xa5
          .byte 0xc6
          .byte 0x7c
          .byte 0x7c
          .byte 0x84
          .byte 0xf8
          .byte 0x77
          .byte 0x77
          .byte 0x99
          .byte 0xee
          .byte 0x7b
          .byte 0x7b
          .byte 0x8d
          .byte 0xf6
          .byte 0xf2
          .byte 0xf2
          .byte 0xd
          .byte 0xff
          .byte 0x6b
          .byte 0x6b
          .byte 0xbd
          .byte 0xd6
          .byte 0x6f
          .byte 0x6f
          .byte 0xb1
          .byte 0xde
          .byte 0xc5
          .byte 0xc5
          .byte 0x54
          .byte 0x91
          .byte 0x30
          .byte 0x30
          .byte 0x50
          .byte 0x60
          .byte 0x1
          .byte 0x1
          .byte 0x3
          .byte 0x2
          .byte 0x67
          .byte 0x67
          .byte 0xa9
          .byte 0xce
          .byte 0x2b
          .byte 0x2b
          .byte 0x7d
          .byte 0x56
          .byte 0xfe
          .byte 0xfe
          .byte 0x19
          .byte 0xe7
          .byte 0xd7
          .byte 0xd7
          .byte 0x62
          .byte 0xb5
          .byte 0xab
          .byte 0xab
          .byte 0xe6
          .byte 0x4d
          .byte 0x76
          .byte 0x76
          .byte 0x9a
          .byte 0xec
          .byte 0xca
          .byte 0xca
          .byte 0x45
          .byte 0x8f
          .byte 0x82
          .byte 0x82
          .byte 0x9d
          .byte 0x1f
          .byte 0xc9
          .byte 0xc9
          .byte 0x40
          .byte 0x89
          .byte 0x7d
          .byte 0x7d
          .byte 0x87
          .byte 0xfa
          .byte 0xfa
          .byte 0xfa
          .byte 0x15
          .byte 0xef
          .byte 0x59
          .byte 0x59
          .byte 0xeb
          .byte 0xb2
          .byte 0x47
          .byte 0x47
          .byte 0xc9
          .byte 0x8e
          .byte 0xf0
          .byte 0xf0
          .byte 0xb
          .byte 0xfb
          .byte 0xad
          .byte 0xad
          .byte 0xec
          .byte 0x41
          .byte 0xd4
          .byte 0xd4
          .byte 0x67
          .byte 0xb3
          .byte 0xa2
          .byte 0xa2
          .byte 0xfd
          .byte 0x5f
          .byte 0xaf
          .byte 0xaf
          .byte 0xea
          .byte 0x45
          .byte 0x9c
          .byte 0x9c
          .byte 0xbf
          .byte 0x23
          .byte 0xa4
          .byte 0xa4
          .byte 0xf7
          .byte 0x53
          .byte 0x72
          .byte 0x72
          .byte 0x96
          .byte 0xe4
          .byte 0xc0
          .byte 0xc0
          .byte 0x5b
          .byte 0x9b
          .byte 0xb7
          .byte 0xb7
          .byte 0xc2
          .byte 0x75
          .byte 0xfd
          .byte 0xfd
          .byte 0x1c
          .byte 0xe1
          .byte 0x93
          .byte 0x93
          .byte 0xae
          .byte 0x3d
          .byte 0x26
          .byte 0x26
          .byte 0x6a
          .byte 0x4c
          .byte 0x36
          .byte 0x36
          .byte 0x5a
          .byte 0x6c
          .byte 0x3f
          .byte 0x3f
          .byte 0x41
          .byte 0x7e
          .byte 0xf7
          .byte 0xf7
          .byte 0x2
          .byte 0xf5
          .byte 0xcc
          .byte 0xcc
          .byte 0x4f
          .byte 0x83
          .byte 0x34
          .byte 0x34
          .byte 0x5c
          .byte 0x68
          .byte 0xa5
          .byte 0xa5
          .byte 0xf4
          .byte 0x51
          .byte 0xe5
          .byte 0xe5
          .byte 0x34
          .byte 0xd1
          .byte 0xf1
          .byte 0xf1
          .byte 0x8
          .byte 0xf9
          .byte 0x71
          .byte 0x71
          .byte 0x93
          .byte 0xe2
          .byte 0xd8
          .byte 0xd8
          .byte 0x73
          .byte 0xab
          .byte 0x31
          .byte 0x31
          .byte 0x53
          .byte 0x62
          .byte 0x15
          .byte 0x15
          .byte 0x3f
          .byte 0x2a
          .byte 0x4
          .byte 0x4
          .byte 0xc
          .byte 0x8
          .byte 0xc7
          .byte 0xc7
          .byte 0x52
          .byte 0x95
          .byte 0x23
          .byte 0x23
          .byte 0x65
          .byte 0x46
          .byte 0xc3
          .byte 0xc3
          .byte 0x5e
          .byte 0x9d
          .byte 0x18
          .byte 0x18
          .byte 0x28
          .byte 0x30
          .byte 0x96
          .byte 0x96
          .byte 0xa1
          .byte 0x37
          .byte 0x5
          .byte 0x5
          .byte 0xf
          .byte 0xa
          .byte 0x9a
          .byte 0x9a
          .byte 0xb5
          .byte 0x2f
          .byte 0x7
          .byte 0x7
          .byte 0x9
          .byte 0xe
          .byte 0x12
          .byte 0x12
          .byte 0x36
          .byte 0x24
          .byte 0x80
          .byte 0x80
          .byte 0x9b
          .byte 0x1b
          .byte 0xe2
          .byte 0xe2
          .byte 0x3d
          .byte 0xdf
          .byte 0xeb
          .byte 0xeb
          .byte 0x26
          .byte 0xcd
          .byte 0x27
          .byte 0x27
          .byte 0x69
          .byte 0x4e
          .byte 0xb2
          .byte 0xb2
          .byte 0xcd
          .byte 0x7f
          .byte 0x75
          .byte 0x75
          .byte 0x9f
          .byte 0xea
          .byte 0x9
          .byte 0x9
          .byte 0x1b
          .byte 0x12
          .byte 0x83
          .byte 0x83
          .byte 0x9e
          .byte 0x1d
          .byte 0x2c
          .byte 0x2c
          .byte 0x74
          .byte 0x58
          .byte 0x1a
          .byte 0x1a
          .byte 0x2e
          .byte 0x34
          .byte 0x1b
          .byte 0x1b
          .byte 0x2d
          .byte 0x36
          .byte 0x6e
          .byte 0x6e
          .byte 0xb2
          .byte 0xdc
          .byte 0x5a
          .byte 0x5a
          .byte 0xee
          .byte 0xb4
          .byte 0xa0
          .byte 0xa0
          .byte 0xfb
          .byte 0x5b
          .byte 0x52
          .byte 0x52
          .byte 0xf6
          .byte 0xa4
          .byte 0x3b
          .byte 0x3b
          .byte 0x4d
          .byte 0x76
          .byte 0xd6
          .byte 0xd6
          .byte 0x61
          .byte 0xb7
          .byte 0xb3
          .byte 0xb3
          .byte 0xce
          .byte 0x7d
          .byte 0x29
          .byte 0x29
          .byte 0x7b
          .byte 0x52
          .byte 0xe3
          .byte 0xe3
          .byte 0x3e
          .byte 0xdd
          .byte 0x2f
          .byte 0x2f
          .byte 0x71
          .byte 0x5e
          .byte 0x84
          .byte 0x84
          .byte 0x97
          .byte 0x13
          .byte 0x53
          .byte 0x53
          .byte 0xf5
          .byte 0xa6
          .byte 0xd1
          .byte 0xd1
          .byte 0x68
          .byte 0xb9
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xed
          .byte 0xed
          .byte 0x2c
          .byte 0xc1
          .byte 0x20
          .byte 0x20
          .byte 0x60
          .byte 0x40
          .byte 0xfc
          .byte 0xfc
          .byte 0x1f
          .byte 0xe3
          .byte 0xb1
          .byte 0xb1
          .byte 0xc8
          .byte 0x79
          .byte 0x5b
          .byte 0x5b
          .byte 0xed
          .byte 0xb6
          .byte 0x6a
          .byte 0x6a
          .byte 0xbe
          .byte 0xd4
          .byte 0xcb
          .byte 0xcb
          .byte 0x46
          .byte 0x8d
          .byte 0xbe
          .byte 0xbe
          .byte 0xd9
          .byte 0x67
          .byte 0x39
          .byte 0x39
          .byte 0x4b
          .byte 0x72
          .byte 0x4a
          .byte 0x4a
          .byte 0xde
          .byte 0x94
          .byte 0x4c
          .byte 0x4c
          .byte 0xd4
          .byte 0x98
          .byte 0x58
          .byte 0x58
          .byte 0xe8
          .byte 0xb0
          .byte 0xcf
          .byte 0xcf
          .byte 0x4a
          .byte 0x85
          .byte 0xd0
          .byte 0xd0
          .byte 0x6b
          .byte 0xbb
          .byte 0xef
          .byte 0xef
          .byte 0x2a
          .byte 0xc5
          .byte 0xaa
          .byte 0xaa
          .byte 0xe5
          .byte 0x4f
          .byte 0xfb
          .byte 0xfb
          .byte 0x16
          .byte 0xed
          .byte 0x43
          .byte 0x43
          .byte 0xc5
          .byte 0x86
          .byte 0x4d
          .byte 0x4d
          .byte 0xd7
          .byte 0x9a
          .byte 0x33
          .byte 0x33
          .byte 0x55
          .byte 0x66
          .byte 0x85
          .byte 0x85
          .byte 0x94
          .byte 0x11
          .byte 0x45
          .byte 0x45
          .byte 0xcf
          .byte 0x8a
          .byte 0xf9
          .byte 0xf9
          .byte 0x10
          .byte 0xe9
          .byte 0x2
          .byte 0x2
          .byte 0x6
          .byte 0x4
          .byte 0x7f
          .byte 0x7f
          .byte 0x81
          .byte 0xfe
          .byte 0x50
          .byte 0x50
          .byte 0xf0
          .byte 0xa0
          .byte 0x3c
          .byte 0x3c
          .byte 0x44
          .byte 0x78
          .byte 0x9f
          .byte 0x9f
          .byte 0xba
          .byte 0x25
          .byte 0xa8
          .byte 0xa8
          .byte 0xe3
          .byte 0x4b
          .byte 0x51
          .byte 0x51
          .byte 0xf3
          .byte 0xa2
          .byte 0xa3
          .byte 0xa3
          .byte 0xfe
          .byte 0x5d
          .byte 0x40
          .byte 0x40
          .byte 0xc0
          .byte 0x80
          .byte 0x8f
          .byte 0x8f
          .byte 0x8a
          .byte 0x5
          .byte 0x92
          .byte 0x92
          .byte 0xad
          .byte 0x3f
          .byte 0x9d
          .byte 0x9d
          .byte 0xbc
          .byte 0x21
          .byte 0x38
          .byte 0x38
          .byte 0x48
          .byte 0x70
          .byte 0xf5
          .byte 0xf5
          .byte 0x4
          .byte 0xf1
          .byte 0xbc
          .byte 0xbc
          .byte 0xdf
          .byte 0x63
          .byte 0xb6
          .byte 0xb6
          .byte 0xc1
          .byte 0x77
          .byte 0xda
          .byte 0xda
          .byte 0x75
          .byte 0xaf
          .byte 0x21
          .byte 0x21
          .byte 0x63
          .byte 0x42
          .byte 0x10
          .byte 0x10
          .byte 0x30
          .byte 0x20
          .byte 0xff
          .byte 0xff
          .byte 0x1a
          .byte 0xe5
          .byte 0xf3
          .byte 0xf3
          .byte 0xe
          .byte 0xfd
          .byte 0xd2
          .byte 0xd2
          .byte 0x6d
          .byte 0xbf
          .byte 0xcd
          .byte 0xcd
          .byte 0x4c
          .byte 0x81
          .byte 0xc
          .byte 0xc
          .byte 0x14
          .byte 0x18
          .byte 0x13
          .byte 0x13
          .byte 0x35
          .byte 0x26
          .byte 0xec
          .byte 0xec
          .byte 0x2f
          .byte 0xc3
          .byte 0x5f
          .byte 0x5f
          .byte 0xe1
          .byte 0xbe
          .byte 0x97
          .byte 0x97
          .byte 0xa2
          .byte 0x35
          .byte 0x44
          .byte 0x44
          .byte 0xcc
          .byte 0x88
          .byte 0x17
          .byte 0x17
          .byte 0x39
          .byte 0x2e
          .byte 0xc4
          .byte 0xc4
          .byte 0x57
          .byte 0x93
          .byte 0xa7
          .byte 0xa7
          .byte 0xf2
          .byte 0x55
          .byte 0x7e
          .byte 0x7e
          .byte 0x82
          .byte 0xfc
          .byte 0x3d
          .byte 0x3d
          .byte 0x47
          .byte 0x7a
          .byte 0x64
          .byte 0x64
          .byte 0xac
          .byte 0xc8
          .byte 0x5d
          .byte 0x5d
          .byte 0xe7
          .byte 0xba
          .byte 0x19
          .byte 0x19
          .byte 0x2b
          .byte 0x32
          .byte 0x73
          .byte 0x73
          .byte 0x95
          .byte 0xe6
          .byte 0x60
          .byte 0x60
          .byte 0xa0
          .byte 0xc0
          .byte 0x81
          .byte 0x81
          .byte 0x98
          .byte 0x19
          .byte 0x4f
          .byte 0x4f
          .byte 0xd1
          .byte 0x9e
          .byte 0xdc
          .byte 0xdc
          .byte 0x7f
          .byte 0xa3
          .byte 0x22
          .byte 0x22
          .byte 0x66
          .byte 0x44
          .byte 0x2a
          .byte 0x2a
          .byte 0x7e
          .byte 0x54
          .byte 0x90
          .byte 0x90
          .byte 0xab
          .byte 0x3b
          .byte 0x88
          .byte 0x88
          .byte 0x83
          .byte 0xb
          .byte 0x46
          .byte 0x46
          .byte 0xca
          .byte 0x8c
          .byte 0xee
          .byte 0xee
          .byte 0x29
          .byte 0xc7
          .byte 0xb8
          .byte 0xb8
          .byte 0xd3
          .byte 0x6b
          .byte 0x14
          .byte 0x14
          .byte 0x3c
          .byte 0x28
          .byte 0xde
          .byte 0xde
          .byte 0x79
          .byte 0xa7
          .byte 0x5e
          .byte 0x5e
          .byte 0xe2
          .byte 0xbc
          .byte 0xb
          .byte 0xb
          .byte 0x1d
          .byte 0x16
          .byte 0xdb
          .byte 0xdb
          .byte 0x76
          .byte 0xad
          .byte 0xe0
          .byte 0xe0
          .byte 0x3b
          .byte 0xdb
          .byte 0x32
          .byte 0x32
          .byte 0x56
          .byte 0x64
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x74
          .byte 0xa
          .byte 0xa
          .byte 0x1e
          .byte 0x14
          .byte 0x49
          .byte 0x49
          .byte 0xdb
          .byte 0x92
          .byte 0x6
          .byte 0x6
          .byte 0xa
          .byte 0xc
          .byte 0x24
          .byte 0x24
          .byte 0x6c
          .byte 0x48
          .byte 0x5c
          .byte 0x5c
          .byte 0xe4
          .byte 0xb8
          .byte 0xc2
          .byte 0xc2
          .byte 0x5d
          .byte 0x9f
          .byte 0xd3
          .byte 0xd3
          .byte 0x6e
          .byte 0xbd
          .byte 0xac
          .byte 0xac
          .byte 0xef
          .byte 0x43
          .byte 0x62
          .byte 0x62
          .byte 0xa6
          .byte 0xc4
          .byte 0x91
          .byte 0x91
          .byte 0xa8
          .byte 0x39
          .byte 0x95
          .byte 0x95
          .byte 0xa4
          .byte 0x31
          .byte 0xe4
          .byte 0xe4
          .byte 0x37
          .byte 0xd3
          .byte 0x79
          .byte 0x79
          .byte 0x8b
          .byte 0xf2
          .byte 0xe7
          .byte 0xe7
          .byte 0x32
          .byte 0xd5
          .byte 0xc8
          .byte 0xc8
          .byte 0x43
          .byte 0x8b
          .byte 0x37
          .byte 0x37
          .byte 0x59
          .byte 0x6e
          .byte 0x6d
          .byte 0x6d
          .byte 0xb7
          .byte 0xda
          .byte 0x8d
          .byte 0x8d
          .byte 0x8c
          .byte 0x1
          .byte 0xd5
          .byte 0xd5
          .byte 0x64
          .byte 0xb1
          .byte 0x4e
          .byte 0x4e
          .byte 0xd2
          .byte 0x9c
          .byte 0xa9
          .byte 0xa9
          .byte 0xe0
          .byte 0x49
          .byte 0x6c
          .byte 0x6c
          .byte 0xb4
          .byte 0xd8
          .byte 0x56
          .byte 0x56
          .byte 0xfa
          .byte 0xac
          .byte 0xf4
          .byte 0xf4
          .byte 0x7
          .byte 0xf3
          .byte 0xea
          .byte 0xea
          .byte 0x25
          .byte 0xcf
          .byte 0x65
          .byte 0x65
          .byte 0xaf
          .byte 0xca
          .byte 0x7a
          .byte 0x7a
          .byte 0x8e
          .byte 0xf4
          .byte 0xae
          .byte 0xae
          .byte 0xe9
          .byte 0x47
          .byte 0x8
          .byte 0x8
          .byte 0x18
          .byte 0x10
          .byte 0xba
          .byte 0xba
          .byte 0xd5
          .byte 0x6f
          .byte 0x78
          .byte 0x78
          .byte 0x88
          .byte 0xf0
          .byte 0x25
          .byte 0x25
          .byte 0x6f
          .byte 0x4a
          .byte 0x2e
          .byte 0x2e
          .byte 0x72
          .byte 0x5c
          .byte 0x1c
          .byte 0x1c
          .byte 0x24
          .byte 0x38
          .byte 0xa6
          .byte 0xa6
          .byte 0xf1
          .byte 0x57
          .byte 0xb4
          .byte 0xb4
          .byte 0xc7
          .byte 0x73
          .byte 0xc6
          .byte 0xc6
          .byte 0x51
          .byte 0x97
          .byte 0xe8
          .byte 0xe8
          .byte 0x23
          .byte 0xcb
          .byte 0xdd
          .byte 0xdd
          .byte 0x7c
          .byte 0xa1
          .byte 0x74
          .byte 0x74
          .byte 0x9c
          .byte 0xe8
          .byte 0x1f
          .byte 0x1f
          .byte 0x21
          .byte 0x3e
          .byte 0x4b
          .byte 0x4b
          .byte 0xdd
          .byte 0x96
          .byte 0xbd
          .byte 0xbd
          .byte 0xdc
          .byte 0x61
          .byte 0x8b
          .byte 0x8b
          .byte 0x86
          .byte 0xd
          .byte 0x8a
          .byte 0x8a
          .byte 0x85
          .byte 0xf
          .byte 0x70
          .byte 0x70
          .byte 0x90
          .byte 0xe0
          .byte 0x3e
          .byte 0x3e
          .byte 0x42
          .byte 0x7c
          .byte 0xb5
          .byte 0xb5
          .byte 0xc4
          .byte 0x71
          .byte 0x66
          .byte 0x66
          .byte 0xaa
          .byte 0xcc
          .byte 0x48
          .byte 0x48
          .byte 0xd8
          .byte 0x90
          .byte 0x3
          .byte 0x3
          .byte 0x5
          .byte 0x6
          .byte 0xf6
          .byte 0xf6
          .byte 0x1
          .byte 0xf7
          .byte 0xe
          .byte 0xe
          .byte 0x12
          .byte 0x1c
          .byte 0x61
          .byte 0x61
          .byte 0xa3
          .byte 0xc2
          .byte 0x35
          .byte 0x35
          .byte 0x5f
          .byte 0x6a
          .byte 0x57
          .byte 0x57
          .byte 0xf9
          .byte 0xae
          .byte 0xb9
          .byte 0xb9
          .byte 0xd0
          .byte 0x69
          .byte 0x86
          .byte 0x86
          .byte 0x91
          .byte 0x17
          .byte 0xc1
          .byte 0xc1
          .byte 0x58
          .byte 0x99
          .byte 0x1d
          .byte 0x1d
          .byte 0x27
          .byte 0x3a
          .byte 0x9e
          .byte 0x9e
          .byte 0xb9
          .byte 0x27
          .byte 0xe1
          .byte 0xe1
          .byte 0x38
          .byte 0xd9
          .byte 0xf8
          .byte 0xf8
          .byte 0x13
          .byte 0xeb
          .byte 0x98
          .byte 0x98
          .byte 0xb3
          .byte 0x2b
          .byte 0x11
          .byte 0x11
          .byte 0x33
          .byte 0x22
          .byte 0x69
          .byte 0x69
          .byte 0xbb
          .byte 0xd2
          .byte 0xd9
          .byte 0xd9
          .byte 0x70
          .byte 0xa9
          .byte 0x8e
          .byte 0x8e
          .byte 0x89
          .byte 0x7
          .byte 0x94
          .byte 0x94
          .byte 0xa7
          .byte 0x33
          .byte 0x9b
          .byte 0x9b
          .byte 0xb6
          .byte 0x2d
          .byte 0x1e
          .byte 0x1e
          .byte 0x22
          .byte 0x3c
          .byte 0x87
          .byte 0x87
          .byte 0x92
          .byte 0x15
          .byte 0xe9
          .byte 0xe9
          .byte 0x20
          .byte 0xc9
          .byte 0xce
          .byte 0xce
          .byte 0x49
          .byte 0x87
          .byte 0x55
          .byte 0x55
          .byte 0xff
          .byte 0xaa
          .byte 0x28
          .byte 0x28
          .byte 0x78
          .byte 0x50
          .byte 0xdf
          .byte 0xdf
          .byte 0x7a
          .byte 0xa5
          .byte 0x8c
          .byte 0x8c
          .byte 0x8f
          .byte 0x3
          .byte 0xa1
          .byte 0xa1
          .byte 0xf8
          .byte 0x59
          .byte 0x89
          .byte 0x89
          .byte 0x80
          .byte 0x9
          .byte 0xd
          .byte 0xd
          .byte 0x17
          .byte 0x1a
          .byte 0xbf
          .byte 0xbf
          .byte 0xda
          .byte 0x65
          .byte 0xe6
          .byte 0xe6
          .byte 0x31
          .byte 0xd7
          .byte 0x42
          .byte 0x42
          .byte 0xc6
          .byte 0x84
          .byte 0x68
          .byte 0x68
          .byte 0xb8
          .byte 0xd0
          .byte 0x41
          .byte 0x41
          .byte 0xc3
          .byte 0x82
          .byte 0x99
          .byte 0x99
          .byte 0xb0
          .byte 0x29
          .byte 0x2d
          .byte 0x2d
          .byte 0x77
          .byte 0x5a
          .byte 0xf
          .byte 0xf
          .byte 0x11
          .byte 0x1e
          .byte 0xb0
          .byte 0xb0
          .byte 0xcb
          .byte 0x7b
          .byte 0x54
          .byte 0x54
          .byte 0xfc
          .byte 0xa8
          .byte 0xbb
          .byte 0xbb
          .byte 0xd6
          .byte 0x6d
          .byte 0x16
          .byte 0x16
          .byte 0x3a
          .byte 0x2c
.L_446a80:
          .byte 0x63
          .byte 0xa5
          .byte 0xc6
          .byte 0x63
          .byte 0x7c
          .byte 0x84
          .byte 0xf8
          .byte 0x7c
          .byte 0x77
          .byte 0x99
          .byte 0xee
          .byte 0x77
          .byte 0x7b
          .byte 0x8d
          .byte 0xf6
          .byte 0x7b
          .byte 0xf2
          .byte 0xd
          .byte 0xff
          .byte 0xf2
          .byte 0x6b
          .byte 0xbd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6f
          .byte 0xb1
          .byte 0xde
          .byte 0x6f
          .byte 0xc5
          .byte 0x54
          .byte 0x91
          .byte 0xc5
          .byte 0x30
          .byte 0x50
          .byte 0x60
          .byte 0x30
          .byte 0x1
          .byte 0x3
          .byte 0x2
          .byte 0x1
          .byte 0x67
          .byte 0xa9
          .byte 0xce
          .byte 0x67
          .byte 0x2b
          .byte 0x7d
          .byte 0x56
          .byte 0x2b
          .byte 0xfe
          .byte 0x19
          .byte 0xe7
          .byte 0xfe
          .byte 0xd7
          .byte 0x62
          .byte 0xb5
          .byte 0xd7
          .byte 0xab
          .byte 0xe6
          .byte 0x4d
          .byte 0xab
          .byte 0x76
          .byte 0x9a
          .byte 0xec
          .byte 0x76
          .byte 0xca
          .byte 0x45
          .byte 0x8f
          .byte 0xca
          .byte 0x82
          .byte 0x9d
          .byte 0x1f
          .byte 0x82
          .byte 0xc9
          .byte 0x40
          .byte 0x89
          .byte 0xc9
          .byte 0x7d
          .byte 0x87
          .byte 0xfa
          .byte 0x7d
          .byte 0xfa
          .byte 0x15
          .byte 0xef
          .byte 0xfa
          .byte 0x59
          .byte 0xeb
          .byte 0xb2
          .byte 0x59
          .byte 0x47
          .byte 0xc9
          .byte 0x8e
          .byte 0x47
          .byte 0xf0
          .byte 0xb
          .byte 0xfb
          .byte 0xf0
          .byte 0xad
          .byte 0xec
          .byte 0x41
          .byte 0xad
          .byte 0xd4
          .byte 0x67
          .byte 0xb3
          .byte 0xd4
          .byte 0xa2
          .byte 0xfd
          .byte 0x5f
          .byte 0xa2
          .byte 0xaf
          .byte 0xea
          .byte 0x45
          .byte 0xaf
          .byte 0x9c
          .byte 0xbf
          .byte 0x23
          .byte 0x9c
          .byte 0xa4
          .byte 0xf7
          .byte 0x53
          .byte 0xa4
          .byte 0x72
          .byte 0x96
          .byte 0xe4
          .byte 0x72
          .byte 0xc0
          .byte 0x5b
          .byte 0x9b
          .byte 0xc0
          .byte 0xb7
          .byte 0xc2
          .byte 0x75
          .byte 0xb7
          .byte 0xfd
          .byte 0x1c
          .byte 0xe1
          .byte 0xfd
          .byte 0x93
          .byte 0xae
          .byte 0x3d
          .byte 0x93
          .byte 0x26
          .byte 0x6a
          .byte 0x4c
          .byte 0x26
          .byte 0x36
          .byte 0x5a
          .byte 0x6c
          .byte 0x36
          .byte 0x3f
          .byte 0x41
          .byte 0x7e
          .byte 0x3f
          .byte 0xf7
          .byte 0x2
          .byte 0xf5
          .byte 0xf7
          .byte 0xcc
          .byte 0x4f
          .byte 0x83
          .byte 0xcc
          .byte 0x34
          .byte 0x5c
          .byte 0x68
          .byte 0x34
          .byte 0xa5
          .byte 0xf4
          .byte 0x51
          .byte 0xa5
          .byte 0xe5
          .byte 0x34
          .byte 0xd1
          .byte 0xe5
          .byte 0xf1
          .byte 0x8
          .byte 0xf9
          .byte 0xf1
          .byte 0x71
          .byte 0x93
          .byte 0xe2
          .byte 0x71
          .byte 0xd8
          .byte 0x73
          .byte 0xab
          .byte 0xd8
          .byte 0x31
          .byte 0x53
          .byte 0x62
          .byte 0x31
          .byte 0x15
          .byte 0x3f
          .byte 0x2a
          .byte 0x15
          .byte 0x4
          .byte 0xc
          .byte 0x8
          .byte 0x4
          .byte 0xc7
          .byte 0x52
          .byte 0x95
          .byte 0xc7
          .byte 0x23
          .byte 0x65
          .byte 0x46
          .byte 0x23
          .byte 0xc3
          .byte 0x5e
          .byte 0x9d
          .byte 0xc3
          .byte 0x18
          .byte 0x28
          .byte 0x30
          .byte 0x18
          .byte 0x96
          .byte 0xa1
          .byte 0x37
          .byte 0x96
          .byte 0x5
          .byte 0xf
          .byte 0xa
          .byte 0x5
          .byte 0x9a
          .byte 0xb5
          .byte 0x2f
          .byte 0x9a
          .byte 0x7
          .byte 0x9
          .byte 0xe
          .byte 0x7
          .byte 0x12
          .byte 0x36
          .byte 0x24
          .byte 0x12
          .byte 0x80
          .byte 0x9b
          .byte 0x1b
          .byte 0x80
          .byte 0xe2
          .byte 0x3d
          .byte 0xdf
          .byte 0xe2
          .byte 0xeb
          .byte 0x26
          .byte 0xcd
          .byte 0xeb
          .byte 0x27
          .byte 0x69
          .byte 0x4e
          .byte 0x27
          .byte 0xb2
          .byte 0xcd
          .byte 0x7f
          .byte 0xb2
          .byte 0x75
          .byte 0x9f
          .byte 0xea
          .byte 0x75
          .byte 0x9
          .byte 0x1b
          .byte 0x12
          .byte 0x9
          .byte 0x83
          .byte 0x9e
          .byte 0x1d
          .byte 0x83
          .byte 0x2c
          .byte 0x74
          .byte 0x58
          .byte 0x2c
          .byte 0x1a
          .byte 0x2e
          .byte 0x34
          .byte 0x1a
          .byte 0x1b
          .byte 0x2d
          .byte 0x36
          .byte 0x1b
          .byte 0x6e
          .byte 0xb2
          .byte 0xdc
          .byte 0x6e
          .byte 0x5a
          .byte 0xee
          .byte 0xb4
          .byte 0x5a
          .byte 0xa0
          .byte 0xfb
          .byte 0x5b
          .byte 0xa0
          .byte 0x52
          .byte 0xf6
          .byte 0xa4
          .byte 0x52
          .byte 0x3b
          .byte 0x4d
          .byte 0x76
          .byte 0x3b
          .byte 0xd6
          .byte 0x61
          .byte 0xb7
          .byte 0xd6
          .byte 0xb3
          .byte 0xce
          .byte 0x7d
          .byte 0xb3
          .byte 0x29
          .byte 0x7b
          .byte 0x52
          .byte 0x29
          .byte 0xe3
          .byte 0x3e
          .byte 0xdd
          .byte 0xe3
          .byte 0x2f
          .byte 0x71
          .byte 0x5e
          .byte 0x2f
          .byte 0x84
          .byte 0x97
          .byte 0x13
          .byte 0x84
          .byte 0x53
          .byte 0xf5
          .byte 0xa6
          .byte 0x53
          .byte 0xd1
          .byte 0x68
          .byte 0xb9
          .byte 0xd1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xed
          .byte 0x2c
          .byte 0xc1
          .byte 0xed
          .byte 0x20
          .byte 0x60
          .byte 0x40
          .byte 0x20
          .byte 0xfc
          .byte 0x1f
          .byte 0xe3
          .byte 0xfc
          .byte 0xb1
          .byte 0xc8
          .byte 0x79
          .byte 0xb1
          .byte 0x5b
          .byte 0xed
          .byte 0xb6
          .byte 0x5b
          .byte 0x6a
          .byte 0xbe
          .byte 0xd4
          .byte 0x6a
          .byte 0xcb
          .byte 0x46
          .byte 0x8d
          .byte 0xcb
          .byte 0xbe
          .byte 0xd9
          .byte 0x67
          .byte 0xbe
          .byte 0x39
          .byte 0x4b
          .byte 0x72
          .byte 0x39
          .byte 0x4a
          .byte 0xde
          .byte 0x94
          .byte 0x4a
          .byte 0x4c
          .byte 0xd4
          .byte 0x98
          .byte 0x4c
          .byte 0x58
          .byte 0xe8
          .byte 0xb0
          .byte 0x58
          .byte 0xcf
          .byte 0x4a
          .byte 0x85
          .byte 0xcf
          .byte 0xd0
          .byte 0x6b
          .byte 0xbb
          .byte 0xd0
          .byte 0xef
          .byte 0x2a
          .byte 0xc5
          .byte 0xef
          .byte 0xaa
          .byte 0xe5
          .byte 0x4f
          .byte 0xaa
          .byte 0xfb
          .byte 0x16
          .byte 0xed
          .byte 0xfb
          .byte 0x43
          .byte 0xc5
          .byte 0x86
          .byte 0x43
          .byte 0x4d
          .byte 0xd7
          .byte 0x9a
          .byte 0x4d
          .byte 0x33
          .byte 0x55
          .byte 0x66
          .byte 0x33
          .byte 0x85
          .byte 0x94
          .byte 0x11
          .byte 0x85
          .byte 0x45
          .byte 0xcf
          .byte 0x8a
          .byte 0x45
          .byte 0xf9
          .byte 0x10
          .byte 0xe9
          .byte 0xf9
          .byte 0x2
          .byte 0x6
          .byte 0x4
          .byte 0x2
          .byte 0x7f
          .byte 0x81
          .byte 0xfe
          .byte 0x7f
          .byte 0x50
          .byte 0xf0
          .byte 0xa0
          .byte 0x50
          .byte 0x3c
          .byte 0x44
          .byte 0x78
          .byte 0x3c
          .byte 0x9f
          .byte 0xba
          .byte 0x25
          .byte 0x9f
          .byte 0xa8
          .byte 0xe3
          .byte 0x4b
          .byte 0xa8
          .byte 0x51
          .byte 0xf3
          .byte 0xa2
          .byte 0x51
          .byte 0xa3
          .byte 0xfe
          .byte 0x5d
          .byte 0xa3
          .byte 0x40
          .byte 0xc0
          .byte 0x80
          .byte 0x40
          .byte 0x8f
          .byte 0x8a
          .byte 0x5
          .byte 0x8f
          .byte 0x92
          .byte 0xad
          .byte 0x3f
          .byte 0x92
          .byte 0x9d
          .byte 0xbc
          .byte 0x21
          .byte 0x9d
          .byte 0x38
          .byte 0x48
          .byte 0x70
          .byte 0x38
          .byte 0xf5
          .byte 0x4
          .byte 0xf1
          .byte 0xf5
          .byte 0xbc
          .byte 0xdf
          .byte 0x63
          .byte 0xbc
          .byte 0xb6
          .byte 0xc1
          .byte 0x77
          .byte 0xb6
          .byte 0xda
          .byte 0x75
          .byte 0xaf
          .byte 0xda
          .byte 0x21
          .byte 0x63
          .byte 0x42
          .byte 0x21
          .byte 0x10
          .byte 0x30
          .byte 0x20
          .byte 0x10
          .byte 0xff
          .byte 0x1a
          .byte 0xe5
          .byte 0xff
          .byte 0xf3
          .byte 0xe
          .byte 0xfd
          .byte 0xf3
          .byte 0xd2
          .byte 0x6d
          .byte 0xbf
          .byte 0xd2
          .byte 0xcd
          .byte 0x4c
          .byte 0x81
          .byte 0xcd
          .byte 0xc
          .byte 0x14
          .byte 0x18
          .byte 0xc
          .byte 0x13
          .byte 0x35
          .byte 0x26
          .byte 0x13
          .byte 0xec
          .byte 0x2f
          .byte 0xc3
          .byte 0xec
          .byte 0x5f
          .byte 0xe1
          .byte 0xbe
          .byte 0x5f
          .byte 0x97
          .byte 0xa2
          .byte 0x35
          .byte 0x97
          .byte 0x44
          .byte 0xcc
          .byte 0x88
          .byte 0x44
          .byte 0x17
          .byte 0x39
          .byte 0x2e
          .byte 0x17
          .byte 0xc4
          .byte 0x57
          .byte 0x93
          .byte 0xc4
          .byte 0xa7
          .byte 0xf2
          .byte 0x55
          .byte 0xa7
          .byte 0x7e
          .byte 0x82
          .byte 0xfc
          .byte 0x7e
          .byte 0x3d
          .byte 0x47
          .byte 0x7a
          .byte 0x3d
          .byte 0x64
          .byte 0xac
          .byte 0xc8
          .byte 0x64
          .byte 0x5d
          .byte 0xe7
          .byte 0xba
          .byte 0x5d
          .byte 0x19
          .byte 0x2b
          .byte 0x32
          .byte 0x19
          .byte 0x73
          .byte 0x95
          .byte 0xe6
          .byte 0x73
          .byte 0x60
          .byte 0xa0
          .byte 0xc0
          .byte 0x60
          .byte 0x81
          .byte 0x98
          .byte 0x19
          .byte 0x81
          .byte 0x4f
          .byte 0xd1
          .byte 0x9e
          .byte 0x4f
          .byte 0xdc
          .byte 0x7f
          .byte 0xa3
          .byte 0xdc
          .byte 0x22
          .byte 0x66
          .byte 0x44
          .byte 0x22
          .byte 0x2a
          .byte 0x7e
          .byte 0x54
          .byte 0x2a
          .byte 0x90
          .byte 0xab
          .byte 0x3b
          .byte 0x90
          .byte 0x88
          .byte 0x83
          .byte 0xb
          .byte 0x88
          .byte 0x46
          .byte 0xca
          .byte 0x8c
          .byte 0x46
          .byte 0xee
          .byte 0x29
          .byte 0xc7
          .byte 0xee
          .byte 0xb8
          .byte 0xd3
          .byte 0x6b
          .byte 0xb8
          .byte 0x14
          .byte 0x3c
          .byte 0x28
          .byte 0x14
          .byte 0xde
          .byte 0x79
          .byte 0xa7
          .byte 0xde
          .byte 0x5e
          .byte 0xe2
          .byte 0xbc
          .byte 0x5e
          .byte 0xb
          .byte 0x1d
          .byte 0x16
          .byte 0xb
          .byte 0xdb
          .byte 0x76
          .byte 0xad
          .byte 0xdb
          .byte 0xe0
          .byte 0x3b
          .byte 0xdb
          .byte 0xe0
          .byte 0x32
          .byte 0x56
          .byte 0x64
          .byte 0x32
          .byte 0x3a
          .byte 0x4e
          .byte 0x74
          .byte 0x3a
          .byte 0xa
          .byte 0x1e
          .byte 0x14
          .byte 0xa
          .byte 0x49
          .byte 0xdb
          .byte 0x92
          .byte 0x49
          .byte 0x6
          .byte 0xa
          .byte 0xc
          .byte 0x6
          .byte 0x24
          .byte 0x6c
          .byte 0x48
          .byte 0x24
          .byte 0x5c
          .byte 0xe4
          .byte 0xb8
          .byte 0x5c
          .byte 0xc2
          .byte 0x5d
          .byte 0x9f
          .byte 0xc2
          .byte 0xd3
          .byte 0x6e
          .byte 0xbd
          .byte 0xd3
          .byte 0xac
          .byte 0xef
          .byte 0x43
          .byte 0xac
          .byte 0x62
          .byte 0xa6
          .byte 0xc4
          .byte 0x62
          .byte 0x91
          .byte 0xa8
          .byte 0x39
          .byte 0x91
          .byte 0x95
          .byte 0xa4
          .byte 0x31
          .byte 0x95
          .byte 0xe4
          .byte 0x37
          .byte 0xd3
          .byte 0xe4
          .byte 0x79
          .byte 0x8b
          .byte 0xf2
          .byte 0x79
          .byte 0xe7
          .byte 0x32
          .byte 0xd5
          .byte 0xe7
          .byte 0xc8
          .byte 0x43
          .byte 0x8b
          .byte 0xc8
          .byte 0x37
          .byte 0x59
          .byte 0x6e
          .byte 0x37
          .byte 0x6d
          .byte 0xb7
          .byte 0xda
          .byte 0x6d
          .byte 0x8d
          .byte 0x8c
          .byte 0x1
          .byte 0x8d
          .byte 0xd5
          .byte 0x64
          .byte 0xb1
          .byte 0xd5
          .byte 0x4e
          .byte 0xd2
          .byte 0x9c
          .byte 0x4e
          .byte 0xa9
          .byte 0xe0
          .byte 0x49
          .byte 0xa9
          .byte 0x6c
          .byte 0xb4
          .byte 0xd8
          .byte 0x6c
          .byte 0x56
          .byte 0xfa
          .byte 0xac
          .byte 0x56
          .byte 0xf4
          .byte 0x7
          .byte 0xf3
          .byte 0xf4
          .byte 0xea
          .byte 0x25
          .byte 0xcf
          .byte 0xea
          .byte 0x65
          .byte 0xaf
          .byte 0xca
          .byte 0x65
          .byte 0x7a
          .byte 0x8e
          .byte 0xf4
          .byte 0x7a
          .byte 0xae
          .byte 0xe9
          .byte 0x47
          .byte 0xae
          .byte 0x8
          .byte 0x18
          .byte 0x10
          .byte 0x8
          .byte 0xba
          .byte 0xd5
          .byte 0x6f
          .byte 0xba
          .byte 0x78
          .byte 0x88
          .byte 0xf0
          .byte 0x78
          .byte 0x25
          .byte 0x6f
          .byte 0x4a
          .byte 0x25
          .byte 0x2e
          .byte 0x72
          .byte 0x5c
          .byte 0x2e
          .byte 0x1c
          .byte 0x24
          .byte 0x38
          .byte 0x1c
          .byte 0xa6
          .byte 0xf1
          .byte 0x57
          .byte 0xa6
          .byte 0xb4
          .byte 0xc7
          .byte 0x73
          .byte 0xb4
          .byte 0xc6
          .byte 0x51
          .byte 0x97
          .byte 0xc6
          .byte 0xe8
          .byte 0x23
          .byte 0xcb
          .byte 0xe8
          .byte 0xdd
          .byte 0x7c
          .byte 0xa1
          .byte 0xdd
          .byte 0x74
          .byte 0x9c
          .byte 0xe8
          .byte 0x74
          .byte 0x1f
          .byte 0x21
          .byte 0x3e
          .byte 0x1f
          .byte 0x4b
          .byte 0xdd
          .byte 0x96
          .byte 0x4b
          .byte 0xbd
          .byte 0xdc
          .byte 0x61
          .byte 0xbd
          .byte 0x8b
          .byte 0x86
          .byte 0xd
          .byte 0x8b
          .byte 0x8a
          .byte 0x85
          .byte 0xf
          .byte 0x8a
          .byte 0x70
          .byte 0x90
          .byte 0xe0
          .byte 0x70
          .byte 0x3e
          .byte 0x42
          .byte 0x7c
          .byte 0x3e
          .byte 0xb5
          .byte 0xc4
          .byte 0x71
          .byte 0xb5
          .byte 0x66
          .byte 0xaa
          .byte 0xcc
          .byte 0x66
          .byte 0x48
          .byte 0xd8
          .byte 0x90
          .byte 0x48
          .byte 0x3
          .byte 0x5
          .byte 0x6
          .byte 0x3
          .byte 0xf6
          .byte 0x1
          .byte 0xf7
          .byte 0xf6
          .byte 0xe
          .byte 0x12
          .byte 0x1c
          .byte 0xe
          .byte 0x61
          .byte 0xa3
          .byte 0xc2
          .byte 0x61
          .byte 0x35
          .byte 0x5f
          .byte 0x6a
          .byte 0x35
          .byte 0x57
          .byte 0xf9
          .byte 0xae
          .byte 0x57
          .byte 0xb9
          .byte 0xd0
          .byte 0x69
          .byte 0xb9
          .byte 0x86
          .byte 0x91
          .byte 0x17
          .byte 0x86
          .byte 0xc1
          .byte 0x58
          .byte 0x99
          .byte 0xc1
          .byte 0x1d
          .byte 0x27
          .byte 0x3a
          .byte 0x1d
          .byte 0x9e
          .byte 0xb9
          .byte 0x27
          .byte 0x9e
          .byte 0xe1
          .byte 0x38
          .byte 0xd9
          .byte 0xe1
          .byte 0xf8
          .byte 0x13
          .byte 0xeb
          .byte 0xf8
          .byte 0x98
          .byte 0xb3
          .byte 0x2b
          .byte 0x98
          .byte 0x11
          .byte 0x33
          .byte 0x22
          .byte 0x11
          .byte 0x69
          .byte 0xbb
          .byte 0xd2
          .byte 0x69
          .byte 0xd9
          .byte 0x70
          .byte 0xa9
          .byte 0xd9
          .byte 0x8e
          .byte 0x89
          .byte 0x7
          .byte 0x8e
          .byte 0x94
          .byte 0xa7
          .byte 0x33
          .byte 0x94
          .byte 0x9b
          .byte 0xb6
          .byte 0x2d
          .byte 0x9b
          .byte 0x1e
          .byte 0x22
          .byte 0x3c
          .byte 0x1e
          .byte 0x87
          .byte 0x92
          .byte 0x15
          .byte 0x87
          .byte 0xe9
          .byte 0x20
          .byte 0xc9
          .byte 0xe9
          .byte 0xce
          .byte 0x49
          .byte 0x87
          .byte 0xce
          .byte 0x55
          .byte 0xff
          .byte 0xaa
          .byte 0x55
          .byte 0x28
          .byte 0x78
          .byte 0x50
          .byte 0x28
          .byte 0xdf
          .byte 0x7a
          .byte 0xa5
          .byte 0xdf
          .byte 0x8c
          .byte 0x8f
          .byte 0x3
          .byte 0x8c
          .byte 0xa1
          .byte 0xf8
          .byte 0x59
          .byte 0xa1
          .byte 0x89
          .byte 0x80
          .byte 0x9
          .byte 0x89
          .byte 0xd
          .byte 0x17
          .byte 0x1a
          .byte 0xd
          .byte 0xbf
          .byte 0xda
          .byte 0x65
          .byte 0xbf
          .byte 0xe6
          .byte 0x31
          .byte 0xd7
          .byte 0xe6
          .byte 0x42
          .byte 0xc6
          .byte 0x84
          .byte 0x42
          .byte 0x68
          .byte 0xb8
          .byte 0xd0
          .byte 0x68
          .byte 0x41
          .byte 0xc3
          .byte 0x82
          .byte 0x41
          .byte 0x99
          .byte 0xb0
          .byte 0x29
          .byte 0x99
          .byte 0x2d
          .byte 0x77
          .byte 0x5a
          .byte 0x2d
          .byte 0xf
          .byte 0x11
          .byte 0x1e
          .byte 0xf
          .byte 0xb0
          .byte 0xcb
          .byte 0x7b
          .byte 0xb0
          .byte 0x54
          .byte 0xfc
          .byte 0xa8
          .byte 0x54
          .byte 0xbb
          .byte 0xd6
          .byte 0x6d
          .byte 0xbb
          .byte 0x16
          .byte 0x3a
          .byte 0x2c
          .byte 0x16
.L_446e80:
          .byte 0xa5
          .byte 0xc6
          .byte 0x63
          .byte 0x63
          .byte 0x84
          .byte 0xf8
          .byte 0x7c
          .byte 0x7c
          .byte 0x99
          .byte 0xee
          .byte 0x77
          .byte 0x77
          .byte 0x8d
          .byte 0xf6
          .byte 0x7b
          .byte 0x7b
          .byte 0xd
          .byte 0xff
          .byte 0xf2
          .byte 0xf2
          .byte 0xbd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6b
          .byte 0xb1
          .byte 0xde
          .byte 0x6f
          .byte 0x6f
          .byte 0x54
          .byte 0x91
          .byte 0xc5
          .byte 0xc5
          .byte 0x50
          .byte 0x60
          .byte 0x30
          .byte 0x30
          .byte 0x3
          .byte 0x2
          .byte 0x1
          .byte 0x1
          .byte 0xa9
          .byte 0xce
          .byte 0x67
          .byte 0x67
          .byte 0x7d
          .byte 0x56
          .byte 0x2b
          .byte 0x2b
          .byte 0x19
          .byte 0xe7
          .byte 0xfe
          .byte 0xfe
          .byte 0x62
          .byte 0xb5
          .byte 0xd7
          .byte 0xd7
          .byte 0xe6
          .byte 0x4d
          .byte 0xab
          .byte 0xab
          .byte 0x9a
          .byte 0xec
          .byte 0x76
          .byte 0x76
          .byte 0x45
          .byte 0x8f
          .byte 0xca
          .byte 0xca
          .byte 0x9d
          .byte 0x1f
          .byte 0x82
          .byte 0x82
          .byte 0x40
          .byte 0x89
          .byte 0xc9
          .byte 0xc9
          .byte 0x87
          .byte 0xfa
          .byte 0x7d
          .byte 0x7d
          .byte 0x15
          .byte 0xef
          .byte 0xfa
          .byte 0xfa
          .byte 0xeb
          .byte 0xb2
          .byte 0x59
          .byte 0x59
          .byte 0xc9
          .byte 0x8e
          .byte 0x47
          .byte 0x47
          .byte 0xb
          .byte 0xfb
          .byte 0xf0
          .byte 0xf0
          .byte 0xec
          .byte 0x41
          .byte 0xad
          .byte 0xad
          .byte 0x67
          .byte 0xb3
          .byte 0xd4
          .byte 0xd4
          .byte 0xfd
          .byte 0x5f
          .byte 0xa2
          .byte 0xa2
          .byte 0xea
          .byte 0x45
          .byte 0xaf
          .byte 0xaf
          .byte 0xbf
          .byte 0x23
          .byte 0x9c
          .byte 0x9c
          .byte 0xf7
          .byte 0x53
          .byte 0xa4
          .byte 0xa4
          .byte 0x96
          .byte 0xe4
          .byte 0x72
          .byte 0x72
          .byte 0x5b
          .byte 0x9b
          .byte 0xc0
          .byte 0xc0
          .byte 0xc2
          .byte 0x75
          .byte 0xb7
          .byte 0xb7
          .byte 0x1c
          .byte 0xe1
          .byte 0xfd
          .byte 0xfd
          .byte 0xae
          .byte 0x3d
          .byte 0x93
          .byte 0x93
          .byte 0x6a
          .byte 0x4c
          .byte 0x26
          .byte 0x26
          .byte 0x5a
          .byte 0x6c
          .byte 0x36
          .byte 0x36
          .byte 0x41
          .byte 0x7e
          .byte 0x3f
          .byte 0x3f
          .byte 0x2
          .byte 0xf5
          .byte 0xf7
          .byte 0xf7
          .byte 0x4f
          .byte 0x83
          .byte 0xcc
          .byte 0xcc
          .byte 0x5c
          .byte 0x68
          .byte 0x34
          .byte 0x34
          .byte 0xf4
          .byte 0x51
          .byte 0xa5
          .byte 0xa5
          .byte 0x34
          .byte 0xd1
          .byte 0xe5
          .byte 0xe5
          .byte 0x8
          .byte 0xf9
          .byte 0xf1
          .byte 0xf1
          .byte 0x93
          .byte 0xe2
          .byte 0x71
          .byte 0x71
          .byte 0x73
          .byte 0xab
          .byte 0xd8
          .byte 0xd8
          .byte 0x53
          .byte 0x62
          .byte 0x31
          .byte 0x31
          .byte 0x3f
          .byte 0x2a
          .byte 0x15
          .byte 0x15
          .byte 0xc
          .byte 0x8
          .byte 0x4
          .byte 0x4
          .byte 0x52
          .byte 0x95
          .byte 0xc7
          .byte 0xc7
          .byte 0x65
          .byte 0x46
          .byte 0x23
          .byte 0x23
          .byte 0x5e
          .byte 0x9d
          .byte 0xc3
          .byte 0xc3
          .byte 0x28
          .byte 0x30
          .byte 0x18
          .byte 0x18
          .byte 0xa1
          .byte 0x37
          .byte 0x96
          .byte 0x96
          .byte 0xf
          .byte 0xa
          .byte 0x5
          .byte 0x5
          .byte 0xb5
          .byte 0x2f
          .byte 0x9a
          .byte 0x9a
          .byte 0x9
          .byte 0xe
          .byte 0x7
          .byte 0x7
          .byte 0x36
          .byte 0x24
          .byte 0x12
          .byte 0x12
          .byte 0x9b
          .byte 0x1b
          .byte 0x80
          .byte 0x80
          .byte 0x3d
          .byte 0xdf
          .byte 0xe2
          .byte 0xe2
          .byte 0x26
          .byte 0xcd
          .byte 0xeb
          .byte 0xeb
          .byte 0x69
          .byte 0x4e
          .byte 0x27
          .byte 0x27
          .byte 0xcd
          .byte 0x7f
          .byte 0xb2
          .byte 0xb2
          .byte 0x9f
          .byte 0xea
          .byte 0x75
          .byte 0x75
          .byte 0x1b
          .byte 0x12
          .byte 0x9
          .byte 0x9
          .byte 0x9e
          .byte 0x1d
          .byte 0x83
          .byte 0x83
          .byte 0x74
          .byte 0x58
          .byte 0x2c
          .byte 0x2c
          .byte 0x2e
          .byte 0x34
          .byte 0x1a
          .byte 0x1a
          .byte 0x2d
          .byte 0x36
          .byte 0x1b
          .byte 0x1b
          .byte 0xb2
          .byte 0xdc
          .byte 0x6e
          .byte 0x6e
          .byte 0xee
          .byte 0xb4
          .byte 0x5a
          .byte 0x5a
          .byte 0xfb
          .byte 0x5b
          .byte 0xa0
          .byte 0xa0
          .byte 0xf6
          .byte 0xa4
          .byte 0x52
          .byte 0x52
          .byte 0x4d
          .byte 0x76
          .byte 0x3b
          .byte 0x3b
          .byte 0x61
          .byte 0xb7
          .byte 0xd6
          .byte 0xd6
          .byte 0xce
          .byte 0x7d
          .byte 0xb3
          .byte 0xb3
          .byte 0x7b
          .byte 0x52
          .byte 0x29
          .byte 0x29
          .byte 0x3e
          .byte 0xdd
          .byte 0xe3
          .byte 0xe3
          .byte 0x71
          .byte 0x5e
          .byte 0x2f
          .byte 0x2f
          .byte 0x97
          .byte 0x13
          .byte 0x84
          .byte 0x84
          .byte 0xf5
          .byte 0xa6
          .byte 0x53
          .byte 0x53
          .byte 0x68
          .byte 0xb9
          .byte 0xd1
          .byte 0xd1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2c
          .byte 0xc1
          .byte 0xed
          .byte 0xed
          .byte 0x60
          .byte 0x40
          .byte 0x20
          .byte 0x20
          .byte 0x1f
          .byte 0xe3
          .byte 0xfc
          .byte 0xfc
          .byte 0xc8
          .byte 0x79
          .byte 0xb1
          .byte 0xb1
          .byte 0xed
          .byte 0xb6
          .byte 0x5b
          .byte 0x5b
          .byte 0xbe
          .byte 0xd4
          .byte 0x6a
          .byte 0x6a
          .byte 0x46
          .byte 0x8d
          .byte 0xcb
          .byte 0xcb
          .byte 0xd9
          .byte 0x67
          .byte 0xbe
          .byte 0xbe
          .byte 0x4b
          .byte 0x72
          .byte 0x39
          .byte 0x39
          .byte 0xde
          .byte 0x94
          .byte 0x4a
          .byte 0x4a
          .byte 0xd4
          .byte 0x98
          .byte 0x4c
          .byte 0x4c
          .byte 0xe8
          .byte 0xb0
          .byte 0x58
          .byte 0x58
          .byte 0x4a
          .byte 0x85
          .byte 0xcf
          .byte 0xcf
          .byte 0x6b
          .byte 0xbb
          .byte 0xd0
          .byte 0xd0
          .byte 0x2a
          .byte 0xc5
          .byte 0xef
          .byte 0xef
          .byte 0xe5
          .byte 0x4f
          .byte 0xaa
          .byte 0xaa
          .byte 0x16
          .byte 0xed
          .byte 0xfb
          .byte 0xfb
          .byte 0xc5
          .byte 0x86
          .byte 0x43
          .byte 0x43
          .byte 0xd7
          .byte 0x9a
          .byte 0x4d
          .byte 0x4d
          .byte 0x55
          .byte 0x66
          .byte 0x33
          .byte 0x33
          .byte 0x94
          .byte 0x11
          .byte 0x85
          .byte 0x85
          .byte 0xcf
          .byte 0x8a
          .byte 0x45
          .byte 0x45
          .byte 0x10
          .byte 0xe9
          .byte 0xf9
          .byte 0xf9
          .byte 0x6
          .byte 0x4
          .byte 0x2
          .byte 0x2
          .byte 0x81
          .byte 0xfe
          .byte 0x7f
          .byte 0x7f
          .byte 0xf0
          .byte 0xa0
          .byte 0x50
          .byte 0x50
          .byte 0x44
          .byte 0x78
          .byte 0x3c
          .byte 0x3c
          .byte 0xba
          .byte 0x25
          .byte 0x9f
          .byte 0x9f
          .byte 0xe3
          .byte 0x4b
          .byte 0xa8
          .byte 0xa8
          .byte 0xf3
          .byte 0xa2
          .byte 0x51
          .byte 0x51
          .byte 0xfe
          .byte 0x5d
          .byte 0xa3
          .byte 0xa3
          .byte 0xc0
          .byte 0x80
          .byte 0x40
          .byte 0x40
          .byte 0x8a
          .byte 0x5
          .byte 0x8f
          .byte 0x8f
          .byte 0xad
          .byte 0x3f
          .byte 0x92
          .byte 0x92
          .byte 0xbc
          .byte 0x21
          .byte 0x9d
          .byte 0x9d
          .byte 0x48
          .byte 0x70
          .byte 0x38
          .byte 0x38
          .byte 0x4
          .byte 0xf1
          .byte 0xf5
          .byte 0xf5
          .byte 0xdf
          .byte 0x63
          .byte 0xbc
          .byte 0xbc
          .byte 0xc1
          .byte 0x77
          .byte 0xb6
          .byte 0xb6
          .byte 0x75
          .byte 0xaf
          .byte 0xda
          .byte 0xda
          .byte 0x63
          .byte 0x42
          .byte 0x21
          .byte 0x21
          .byte 0x30
          .byte 0x20
          .byte 0x10
          .byte 0x10
          .byte 0x1a
          .byte 0xe5
          .byte 0xff
          .byte 0xff
          .byte 0xe
          .byte 0xfd
          .byte 0xf3
          .byte 0xf3
          .byte 0x6d
          .byte 0xbf
          .byte 0xd2
          .byte 0xd2
          .byte 0x4c
          .byte 0x81
          .byte 0xcd
          .byte 0xcd
          .byte 0x14
          .byte 0x18
          .byte 0xc
          .byte 0xc
          .byte 0x35
          .byte 0x26
          .byte 0x13
          .byte 0x13
          .byte 0x2f
          .byte 0xc3
          .byte 0xec
          .byte 0xec
          .byte 0xe1
          .byte 0xbe
          .byte 0x5f
          .byte 0x5f
          .byte 0xa2
          .byte 0x35
          .byte 0x97
          .byte 0x97
          .byte 0xcc
          .byte 0x88
          .byte 0x44
          .byte 0x44
          .byte 0x39
          .byte 0x2e
          .byte 0x17
          .byte 0x17
          .byte 0x57
          .byte 0x93
          .byte 0xc4
          .byte 0xc4
          .byte 0xf2
          .byte 0x55
          .byte 0xa7
          .byte 0xa7
          .byte 0x82
          .byte 0xfc
          .byte 0x7e
          .byte 0x7e
          .byte 0x47
          .byte 0x7a
          .byte 0x3d
          .byte 0x3d
          .byte 0xac
          .byte 0xc8
          .byte 0x64
          .byte 0x64
          .byte 0xe7
          .byte 0xba
          .byte 0x5d
          .byte 0x5d
          .byte 0x2b
          .byte 0x32
          .byte 0x19
          .byte 0x19
          .byte 0x95
          .byte 0xe6
          .byte 0x73
          .byte 0x73
          .byte 0xa0
          .byte 0xc0
          .byte 0x60
          .byte 0x60
          .byte 0x98
          .byte 0x19
          .byte 0x81
          .byte 0x81
          .byte 0xd1
          .byte 0x9e
          .byte 0x4f
          .byte 0x4f
          .byte 0x7f
          .byte 0xa3
          .byte 0xdc
          .byte 0xdc
          .byte 0x66
          .byte 0x44
          .byte 0x22
          .byte 0x22
          .byte 0x7e
          .byte 0x54
          .byte 0x2a
          .byte 0x2a
          .byte 0xab
          .byte 0x3b
          .byte 0x90
          .byte 0x90
          .byte 0x83
          .byte 0xb
          .byte 0x88
          .byte 0x88
          .byte 0xca
          .byte 0x8c
          .byte 0x46
          .byte 0x46
          .byte 0x29
          .byte 0xc7
          .byte 0xee
          .byte 0xee
          .byte 0xd3
          .byte 0x6b
          .byte 0xb8
          .byte 0xb8
          .byte 0x3c
          .byte 0x28
          .byte 0x14
          .byte 0x14
          .byte 0x79
          .byte 0xa7
          .byte 0xde
          .byte 0xde
          .byte 0xe2
          .byte 0xbc
          .byte 0x5e
          .byte 0x5e
          .byte 0x1d
          .byte 0x16
          .byte 0xb
          .byte 0xb
          .byte 0x76
          .byte 0xad
          .byte 0xdb
          .byte 0xdb
          .byte 0x3b
          .byte 0xdb
          .byte 0xe0
          .byte 0xe0
          .byte 0x56
          .byte 0x64
          .byte 0x32
          .byte 0x32
          .byte 0x4e
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x1e
          .byte 0x14
          .byte 0xa
          .byte 0xa
          .byte 0xdb
          .byte 0x92
          .byte 0x49
          .byte 0x49
          .byte 0xa
          .byte 0xc
          .byte 0x6
          .byte 0x6
          .byte 0x6c
          .byte 0x48
          .byte 0x24
          .byte 0x24
          .byte 0xe4
          .byte 0xb8
          .byte 0x5c
          .byte 0x5c
          .byte 0x5d
          .byte 0x9f
          .byte 0xc2
          .byte 0xc2
          .byte 0x6e
          .byte 0xbd
          .byte 0xd3
          .byte 0xd3
          .byte 0xef
          .byte 0x43
          .byte 0xac
          .byte 0xac
          .byte 0xa6
          .byte 0xc4
          .byte 0x62
          .byte 0x62
          .byte 0xa8
          .byte 0x39
          .byte 0x91
          .byte 0x91
          .byte 0xa4
          .byte 0x31
          .byte 0x95
          .byte 0x95
          .byte 0x37
          .byte 0xd3
          .byte 0xe4
          .byte 0xe4
          .byte 0x8b
          .byte 0xf2
          .byte 0x79
          .byte 0x79
          .byte 0x32
          .byte 0xd5
          .byte 0xe7
          .byte 0xe7
          .byte 0x43
          .byte 0x8b
          .byte 0xc8
          .byte 0xc8
          .byte 0x59
          .byte 0x6e
          .byte 0x37
          .byte 0x37
          .byte 0xb7
          .byte 0xda
          .byte 0x6d
          .byte 0x6d
          .byte 0x8c
          .byte 0x1
          .byte 0x8d
          .byte 0x8d
          .byte 0x64
          .byte 0xb1
          .byte 0xd5
          .byte 0xd5
          .byte 0xd2
          .byte 0x9c
          .byte 0x4e
          .byte 0x4e
          .byte 0xe0
          .byte 0x49
          .byte 0xa9
          .byte 0xa9
          .byte 0xb4
          .byte 0xd8
          .byte 0x6c
          .byte 0x6c
          .byte 0xfa
          .byte 0xac
          .byte 0x56
          .byte 0x56
          .byte 0x7
          .byte 0xf3
          .byte 0xf4
          .byte 0xf4
          .byte 0x25
          .byte 0xcf
          .byte 0xea
          .byte 0xea
          .byte 0xaf
          .byte 0xca
          .byte 0x65
          .byte 0x65
          .byte 0x8e
          .byte 0xf4
          .byte 0x7a
          .byte 0x7a
          .byte 0xe9
          .byte 0x47
          .byte 0xae
          .byte 0xae
          .byte 0x18
          .byte 0x10
          .byte 0x8
          .byte 0x8
          .byte 0xd5
          .byte 0x6f
          .byte 0xba
          .byte 0xba
          .byte 0x88
          .byte 0xf0
          .byte 0x78
          .byte 0x78
          .byte 0x6f
          .byte 0x4a
          .byte 0x25
          .byte 0x25
          .byte 0x72
          .byte 0x5c
          .byte 0x2e
          .byte 0x2e
          .byte 0x24
          .byte 0x38
          .byte 0x1c
          .byte 0x1c
          .byte 0xf1
          .byte 0x57
          .byte 0xa6
          .byte 0xa6
          .byte 0xc7
          .byte 0x73
          .byte 0xb4
          .byte 0xb4
          .byte 0x51
          .byte 0x97
          .byte 0xc6
          .byte 0xc6
          .byte 0x23
          .byte 0xcb
          .byte 0xe8
          .byte 0xe8
          .byte 0x7c
          .byte 0xa1
          .byte 0xdd
          .byte 0xdd
          .byte 0x9c
          .byte 0xe8
          .byte 0x74
          .byte 0x74
          .byte 0x21
          .byte 0x3e
          .byte 0x1f
          .byte 0x1f
          .byte 0xdd
          .byte 0x96
          .byte 0x4b
          .byte 0x4b
          .byte 0xdc
          .byte 0x61
          .byte 0xbd
          .byte 0xbd
          .byte 0x86
          .byte 0xd
          .byte 0x8b
          .byte 0x8b
          .byte 0x85
          .byte 0xf
          .byte 0x8a
          .byte 0x8a
          .byte 0x90
          .byte 0xe0
          .byte 0x70
          .byte 0x70
          .byte 0x42
          .byte 0x7c
          .byte 0x3e
          .byte 0x3e
          .byte 0xc4
          .byte 0x71
          .byte 0xb5
          .byte 0xb5
          .byte 0xaa
          .byte 0xcc
          .byte 0x66
          .byte 0x66
          .byte 0xd8
          .byte 0x90
          .byte 0x48
          .byte 0x48
          .byte 0x5
          .byte 0x6
          .byte 0x3
          .byte 0x3
          .byte 0x1
          .byte 0xf7
          .byte 0xf6
          .byte 0xf6
          .byte 0x12
          .byte 0x1c
          .byte 0xe
          .byte 0xe
          .byte 0xa3
          .byte 0xc2
          .byte 0x61
          .byte 0x61
          .byte 0x5f
          .byte 0x6a
          .byte 0x35
          .byte 0x35
          .byte 0xf9
          .byte 0xae
          .byte 0x57
          .byte 0x57
          .byte 0xd0
          .byte 0x69
          .byte 0xb9
          .byte 0xb9
          .byte 0x91
          .byte 0x17
          .byte 0x86
          .byte 0x86
          .byte 0x58
          .byte 0x99
          .byte 0xc1
          .byte 0xc1
          .byte 0x27
          .byte 0x3a
          .byte 0x1d
          .byte 0x1d
          .byte 0xb9
          .byte 0x27
          .byte 0x9e
          .byte 0x9e
          .byte 0x38
          .byte 0xd9
          .byte 0xe1
          .byte 0xe1
          .byte 0x13
          .byte 0xeb
          .byte 0xf8
          .byte 0xf8
          .byte 0xb3
          .byte 0x2b
          .byte 0x98
          .byte 0x98
          .byte 0x33
          .byte 0x22
          .byte 0x11
          .byte 0x11
          .byte 0xbb
          .byte 0xd2
          .byte 0x69
          .byte 0x69
          .byte 0x70
          .byte 0xa9
          .byte 0xd9
          .byte 0xd9
          .byte 0x89
          .byte 0x7
          .byte 0x8e
          .byte 0x8e
          .byte 0xa7
          .byte 0x33
          .byte 0x94
          .byte 0x94
          .byte 0xb6
          .byte 0x2d
          .byte 0x9b
          .byte 0x9b
          .byte 0x22
          .byte 0x3c
          .byte 0x1e
          .byte 0x1e
          .byte 0x92
          .byte 0x15
          .byte 0x87
          .byte 0x87
          .byte 0x20
          .byte 0xc9
          .byte 0xe9
          .byte 0xe9
          .byte 0x49
          .byte 0x87
          .byte 0xce
          .byte 0xce
          .byte 0xff
          .byte 0xaa
          .byte 0x55
          .byte 0x55
          .byte 0x78
          .byte 0x50
          .byte 0x28
          .byte 0x28
          .byte 0x7a
          .byte 0xa5
          .byte 0xdf
          .byte 0xdf
          .byte 0x8f
          .byte 0x3
          .byte 0x8c
          .byte 0x8c
          .byte 0xf8
          .byte 0x59
          .byte 0xa1
          .byte 0xa1
          .byte 0x80
          .byte 0x9
          .byte 0x89
          .byte 0x89
          .byte 0x17
          .byte 0x1a
          .byte 0xd
          .byte 0xd
          .byte 0xda
          .byte 0x65
          .byte 0xbf
          .byte 0xbf
          .byte 0x31
          .byte 0xd7
          .byte 0xe6
          .byte 0xe6
          .byte 0xc6
          .byte 0x84
          .byte 0x42
          .byte 0x42
          .byte 0xb8
          .byte 0xd0
          .byte 0x68
          .byte 0x68
          .byte 0xc3
          .byte 0x82
          .byte 0x41
          .byte 0x41
          .byte 0xb0
          .byte 0x29
          .byte 0x99
          .byte 0x99
          .byte 0x77
          .byte 0x5a
          .byte 0x2d
          .byte 0x2d
          .byte 0x11
          .byte 0x1e
          .byte 0xf
          .byte 0xf
          .byte 0xcb
          .byte 0x7b
          .byte 0xb0
          .byte 0xb0
          .byte 0xfc
          .byte 0xa8
          .byte 0x54
          .byte 0x54
          .byte 0xd6
          .byte 0x6d
          .byte 0xbb
          .byte 0xbb
          .byte 0x3a
          .byte 0x2c
          .byte 0x16
          .byte 0x16
.L_447280:
          .byte 0xc6
          .byte 0x63
          .byte 0x63
          .byte 0xa5
          .byte 0xf8
          .byte 0x7c
          .byte 0x7c
          .byte 0x84
          .byte 0xee
          .byte 0x77
          .byte 0x77
          .byte 0x99
          .byte 0xf6
          .byte 0x7b
          .byte 0x7b
          .byte 0x8d
          .byte 0xff
          .byte 0xf2
          .byte 0xf2
          .byte 0xd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6b
          .byte 0xbd
          .byte 0xde
          .byte 0x6f
          .byte 0x6f
          .byte 0xb1
          .byte 0x91
          .byte 0xc5
          .byte 0xc5
          .byte 0x54
          .byte 0x60
          .byte 0x30
          .byte 0x30
          .byte 0x50
          .byte 0x2
          .byte 0x1
          .byte 0x1
          .byte 0x3
          .byte 0xce
          .byte 0x67
          .byte 0x67
          .byte 0xa9
          .byte 0x56
          .byte 0x2b
          .byte 0x2b
          .byte 0x7d
          .byte 0xe7
          .byte 0xfe
          .byte 0xfe
          .byte 0x19
          .byte 0xb5
          .byte 0xd7
          .byte 0xd7
          .byte 0x62
          .byte 0x4d
          .byte 0xab
          .byte 0xab
          .byte 0xe6
          .byte 0xec
          .byte 0x76
          .byte 0x76
          .byte 0x9a
          .byte 0x8f
          .byte 0xca
          .byte 0xca
          .byte 0x45
          .byte 0x1f
          .byte 0x82
          .byte 0x82
          .byte 0x9d
          .byte 0x89
          .byte 0xc9
          .byte 0xc9
          .byte 0x40
          .byte 0xfa
          .byte 0x7d
          .byte 0x7d
          .byte 0x87
          .byte 0xef
          .byte 0xfa
          .byte 0xfa
          .byte 0x15
          .byte 0xb2
          .byte 0x59
          .byte 0x59
          .byte 0xeb
          .byte 0x8e
          .byte 0x47
          .byte 0x47
          .byte 0xc9
          .byte 0xfb
          .byte 0xf0
          .byte 0xf0
          .byte 0xb
          .byte 0x41
          .byte 0xad
          .byte 0xad
          .byte 0xec
          .byte 0xb3
          .byte 0xd4
          .byte 0xd4
          .byte 0x67
          .byte 0x5f
          .byte 0xa2
          .byte 0xa2
          .byte 0xfd
          .byte 0x45
          .byte 0xaf
          .byte 0xaf
          .byte 0xea
          .byte 0x23
          .byte 0x9c
          .byte 0x9c
          .byte 0xbf
          .byte 0x53
          .byte 0xa4
          .byte 0xa4
          .byte 0xf7
          .byte 0xe4
          .byte 0x72
          .byte 0x72
          .byte 0x96
          .byte 0x9b
          .byte 0xc0
          .byte 0xc0
          .byte 0x5b
          .byte 0x75
          .byte 0xb7
          .byte 0xb7
          .byte 0xc2
          .byte 0xe1
          .byte 0xfd
          .byte 0xfd
          .byte 0x1c
          .byte 0x3d
          .byte 0x93
          .byte 0x93
          .byte 0xae
          .byte 0x4c
          .byte 0x26
          .byte 0x26
          .byte 0x6a
          .byte 0x6c
          .byte 0x36
          .byte 0x36
          .byte 0x5a
          .byte 0x7e
          .byte 0x3f
          .byte 0x3f
          .byte 0x41
          .byte 0xf5
          .byte 0xf7
          .byte 0xf7
          .byte 0x2
          .byte 0x83
          .byte 0xcc
          .byte 0xcc
          .byte 0x4f
          .byte 0x68
          .byte 0x34
          .byte 0x34
          .byte 0x5c
          .byte 0x51
          .byte 0xa5
          .byte 0xa5
          .byte 0xf4
          .byte 0xd1
          .byte 0xe5
          .byte 0xe5
          .byte 0x34
          .byte 0xf9
          .byte 0xf1
          .byte 0xf1
          .byte 0x8
          .byte 0xe2
          .byte 0x71
          .byte 0x71
          .byte 0x93
          .byte 0xab
          .byte 0xd8
          .byte 0xd8
          .byte 0x73
          .byte 0x62
          .byte 0x31
          .byte 0x31
          .byte 0x53
          .byte 0x2a
          .byte 0x15
          .byte 0x15
          .byte 0x3f
          .byte 0x8
          .byte 0x4
          .byte 0x4
          .byte 0xc
          .byte 0x95
          .byte 0xc7
          .byte 0xc7
          .byte 0x52
          .byte 0x46
          .byte 0x23
          .byte 0x23
          .byte 0x65
          .byte 0x9d
          .byte 0xc3
          .byte 0xc3
          .byte 0x5e
          .byte 0x30
          .byte 0x18
          .byte 0x18
          .byte 0x28
          .byte 0x37
          .byte 0x96
          .byte 0x96
          .byte 0xa1
          .byte 0xa
          .byte 0x5
          .byte 0x5
          .byte 0xf
          .byte 0x2f
          .byte 0x9a
          .byte 0x9a
          .byte 0xb5
          .byte 0xe
          .byte 0x7
          .byte 0x7
          .byte 0x9
          .byte 0x24
          .byte 0x12
          .byte 0x12
          .byte 0x36
          .byte 0x1b
          .byte 0x80
          .byte 0x80
          .byte 0x9b
          .byte 0xdf
          .byte 0xe2
          .byte 0xe2
          .byte 0x3d
          .byte 0xcd
          .byte 0xeb
          .byte 0xeb
          .byte 0x26
          .byte 0x4e
          .byte 0x27
          .byte 0x27
          .byte 0x69
          .byte 0x7f
          .byte 0xb2
          .byte 0xb2
          .byte 0xcd
          .byte 0xea
          .byte 0x75
          .byte 0x75
          .byte 0x9f
          .byte 0x12
          .byte 0x9
          .byte 0x9
          .byte 0x1b
          .byte 0x1d
          .byte 0x83
          .byte 0x83
          .byte 0x9e
          .byte 0x58
          .byte 0x2c
          .byte 0x2c
          .byte 0x74
          .byte 0x34
          .byte 0x1a
          .byte 0x1a
          .byte 0x2e
          .byte 0x36
          .byte 0x1b
          .byte 0x1b
          .byte 0x2d
          .byte 0xdc
          .byte 0x6e
          .byte 0x6e
          .byte 0xb2
          .byte 0xb4
          .byte 0x5a
          .byte 0x5a
          .byte 0xee
          .byte 0x5b
          .byte 0xa0
          .byte 0xa0
          .byte 0xfb
          .byte 0xa4
          .byte 0x52
          .byte 0x52
          .byte 0xf6
          .byte 0x76
          .byte 0x3b
          .byte 0x3b
          .byte 0x4d
          .byte 0xb7
          .byte 0xd6
          .byte 0xd6
          .byte 0x61
          .byte 0x7d
          .byte 0xb3
          .byte 0xb3
          .byte 0xce
          .byte 0x52
          .byte 0x29
          .byte 0x29
          .byte 0x7b
          .byte 0xdd
          .byte 0xe3
          .byte 0xe3
          .byte 0x3e
          .byte 0x5e
          .byte 0x2f
          .byte 0x2f
          .byte 0x71
          .byte 0x13
          .byte 0x84
          .byte 0x84
          .byte 0x97
          .byte 0xa6
          .byte 0x53
          .byte 0x53
          .byte 0xf5
          .byte 0xb9
          .byte 0xd1
          .byte 0xd1
          .byte 0x68
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc1
          .byte 0xed
          .byte 0xed
          .byte 0x2c
          .byte 0x40
          .byte 0x20
          .byte 0x20
          .byte 0x60
          .byte 0xe3
          .byte 0xfc
          .byte 0xfc
          .byte 0x1f
          .byte 0x79
          .byte 0xb1
          .byte 0xb1
          .byte 0xc8
          .byte 0xb6
          .byte 0x5b
          .byte 0x5b
          .byte 0xed
          .byte 0xd4
          .byte 0x6a
          .byte 0x6a
          .byte 0xbe
          .byte 0x8d
          .byte 0xcb
          .byte 0xcb
          .byte 0x46
          .byte 0x67
          .byte 0xbe
          .byte 0xbe
          .byte 0xd9
          .byte 0x72
          .byte 0x39
          .byte 0x39
          .byte 0x4b
          .byte 0x94
          .byte 0x4a
          .byte 0x4a
          .byte 0xde
          .byte 0x98
          .byte 0x4c
          .byte 0x4c
          .byte 0xd4
          .byte 0xb0
          .byte 0x58
          .byte 0x58
          .byte 0xe8
          .byte 0x85
          .byte 0xcf
          .byte 0xcf
          .byte 0x4a
          .byte 0xbb
          .byte 0xd0
          .byte 0xd0
          .byte 0x6b
          .byte 0xc5
          .byte 0xef
          .byte 0xef
          .byte 0x2a
          .byte 0x4f
          .byte 0xaa
          .byte 0xaa
          .byte 0xe5
          .byte 0xed
          .byte 0xfb
          .byte 0xfb
          .byte 0x16
          .byte 0x86
          .byte 0x43
          .byte 0x43
          .byte 0xc5
          .byte 0x9a
          .byte 0x4d
          .byte 0x4d
          .byte 0xd7
          .byte 0x66
          .byte 0x33
          .byte 0x33
          .byte 0x55
          .byte 0x11
          .byte 0x85
          .byte 0x85
          .byte 0x94
          .byte 0x8a
          .byte 0x45
          .byte 0x45
          .byte 0xcf
          .byte 0xe9
          .byte 0xf9
          .byte 0xf9
          .byte 0x10
          .byte 0x4
          .byte 0x2
          .byte 0x2
          .byte 0x6
          .byte 0xfe
          .byte 0x7f
          .byte 0x7f
          .byte 0x81
          .byte 0xa0
          .byte 0x50
          .byte 0x50
          .byte 0xf0
          .byte 0x78
          .byte 0x3c
          .byte 0x3c
          .byte 0x44
          .byte 0x25
          .byte 0x9f
          .byte 0x9f
          .byte 0xba
          .byte 0x4b
          .byte 0xa8
          .byte 0xa8
          .byte 0xe3
          .byte 0xa2
          .byte 0x51
          .byte 0x51
          .byte 0xf3
          .byte 0x5d
          .byte 0xa3
          .byte 0xa3
          .byte 0xfe
          .byte 0x80
          .byte 0x40
          .byte 0x40
          .byte 0xc0
          .byte 0x5
          .byte 0x8f
          .byte 0x8f
          .byte 0x8a
          .byte 0x3f
          .byte 0x92
          .byte 0x92
          .byte 0xad
          .byte 0x21
          .byte 0x9d
          .byte 0x9d
          .byte 0xbc
          .byte 0x70
          .byte 0x38
          .byte 0x38
          .byte 0x48
          .byte 0xf1
          .byte 0xf5
          .byte 0xf5
          .byte 0x4
          .byte 0x63
          .byte 0xbc
          .byte 0xbc
          .byte 0xdf
          .byte 0x77
          .byte 0xb6
          .byte 0xb6
          .byte 0xc1
          .byte 0xaf
          .byte 0xda
          .byte 0xda
          .byte 0x75
          .byte 0x42
          .byte 0x21
          .byte 0x21
          .byte 0x63
          .byte 0x20
          .byte 0x10
          .byte 0x10
          .byte 0x30
          .byte 0xe5
          .byte 0xff
          .byte 0xff
          .byte 0x1a
          .byte 0xfd
          .byte 0xf3
          .byte 0xf3
          .byte 0xe
          .byte 0xbf
          .byte 0xd2
          .byte 0xd2
          .byte 0x6d
          .byte 0x81
          .byte 0xcd
          .byte 0xcd
          .byte 0x4c
          .byte 0x18
          .byte 0xc
          .byte 0xc
          .byte 0x14
          .byte 0x26
          .byte 0x13
          .byte 0x13
          .byte 0x35
          .byte 0xc3
          .byte 0xec
          .byte 0xec
          .byte 0x2f
          .byte 0xbe
          .byte 0x5f
          .byte 0x5f
          .byte 0xe1
          .byte 0x35
          .byte 0x97
          .byte 0x97
          .byte 0xa2
          .byte 0x88
          .byte 0x44
          .byte 0x44
          .byte 0xcc
          .byte 0x2e
          .byte 0x17
          .byte 0x17
          .byte 0x39
          .byte 0x93
          .byte 0xc4
          .byte 0xc4
          .byte 0x57
          .byte 0x55
          .byte 0xa7
          .byte 0xa7
          .byte 0xf2
          .byte 0xfc
          .byte 0x7e
          .byte 0x7e
          .byte 0x82
          .byte 0x7a
          .byte 0x3d
          .byte 0x3d
          .byte 0x47
          .byte 0xc8
          .byte 0x64
          .byte 0x64
          .byte 0xac
          .byte 0xba
          .byte 0x5d
          .byte 0x5d
          .byte 0xe7
          .byte 0x32
          .byte 0x19
          .byte 0x19
          .byte 0x2b
          .byte 0xe6
          .byte 0x73
          .byte 0x73
          .byte 0x95
          .byte 0xc0
          .byte 0x60
          .byte 0x60
          .byte 0xa0
          .byte 0x19
          .byte 0x81
          .byte 0x81
          .byte 0x98
          .byte 0x9e
          .byte 0x4f
          .byte 0x4f
          .byte 0xd1
          .byte 0xa3
          .byte 0xdc
          .byte 0xdc
          .byte 0x7f
          .byte 0x44
          .byte 0x22
          .byte 0x22
          .byte 0x66
          .byte 0x54
          .byte 0x2a
          .byte 0x2a
          .byte 0x7e
          .byte 0x3b
          .byte 0x90
          .byte 0x90
          .byte 0xab
          .byte 0xb
          .byte 0x88
          .byte 0x88
          .byte 0x83
          .byte 0x8c
          .byte 0x46
          .byte 0x46
          .byte 0xca
          .byte 0xc7
          .byte 0xee
          .byte 0xee
          .byte 0x29
          .byte 0x6b
          .byte 0xb8
          .byte 0xb8
          .byte 0xd3
          .byte 0x28
          .byte 0x14
          .byte 0x14
          .byte 0x3c
          .byte 0xa7
          .byte 0xde
          .byte 0xde
          .byte 0x79
          .byte 0xbc
          .byte 0x5e
          .byte 0x5e
          .byte 0xe2
          .byte 0x16
          .byte 0xb
          .byte 0xb
          .byte 0x1d
          .byte 0xad
          .byte 0xdb
          .byte 0xdb
          .byte 0x76
          .byte 0xdb
          .byte 0xe0
          .byte 0xe0
          .byte 0x3b
          .byte 0x64
          .byte 0x32
          .byte 0x32
          .byte 0x56
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x14
          .byte 0xa
          .byte 0xa
          .byte 0x1e
          .byte 0x92
          .byte 0x49
          .byte 0x49
          .byte 0xdb
          .byte 0xc
          .byte 0x6
          .byte 0x6
          .byte 0xa
          .byte 0x48
          .byte 0x24
          .byte 0x24
          .byte 0x6c
          .byte 0xb8
          .byte 0x5c
          .byte 0x5c
          .byte 0xe4
          .byte 0x9f
          .byte 0xc2
          .byte 0xc2
          .byte 0x5d
          .byte 0xbd
          .byte 0xd3
          .byte 0xd3
          .byte 0x6e
          .byte 0x43
          .byte 0xac
          .byte 0xac
          .byte 0xef
          .byte 0xc4
          .byte 0x62
          .byte 0x62
          .byte 0xa6
          .byte 0x39
          .byte 0x91
          .byte 0x91
          .byte 0xa8
          .byte 0x31
          .byte 0x95
          .byte 0x95
          .byte 0xa4
          .byte 0xd3
          .byte 0xe4
          .byte 0xe4
          .byte 0x37
          .byte 0xf2
          .byte 0x79
          .byte 0x79
          .byte 0x8b
          .byte 0xd5
          .byte 0xe7
          .byte 0xe7
          .byte 0x32
          .byte 0x8b
          .byte 0xc8
          .byte 0xc8
          .byte 0x43
          .byte 0x6e
          .byte 0x37
          .byte 0x37
          .byte 0x59
          .byte 0xda
          .byte 0x6d
          .byte 0x6d
          .byte 0xb7
          .byte 0x1
          .byte 0x8d
          .byte 0x8d
          .byte 0x8c
          .byte 0xb1
          .byte 0xd5
          .byte 0xd5
          .byte 0x64
          .byte 0x9c
          .byte 0x4e
          .byte 0x4e
          .byte 0xd2
          .byte 0x49
          .byte 0xa9
          .byte 0xa9
          .byte 0xe0
          .byte 0xd8
          .byte 0x6c
          .byte 0x6c
          .byte 0xb4
          .byte 0xac
          .byte 0x56
          .byte 0x56
          .byte 0xfa
          .byte 0xf3
          .byte 0xf4
          .byte 0xf4
          .byte 0x7
          .byte 0xcf
          .byte 0xea
          .byte 0xea
          .byte 0x25
          .byte 0xca
          .byte 0x65
          .byte 0x65
          .byte 0xaf
          .byte 0xf4
          .byte 0x7a
          .byte 0x7a
          .byte 0x8e
          .byte 0x47
          .byte 0xae
          .byte 0xae
          .byte 0xe9
          .byte 0x10
          .byte 0x8
          .byte 0x8
          .byte 0x18
          .byte 0x6f
          .byte 0xba
          .byte 0xba
          .byte 0xd5
          .byte 0xf0
          .byte 0x78
          .byte 0x78
          .byte 0x88
          .byte 0x4a
          .byte 0x25
          .byte 0x25
          .byte 0x6f
          .byte 0x5c
          .byte 0x2e
          .byte 0x2e
          .byte 0x72
          .byte 0x38
          .byte 0x1c
          .byte 0x1c
          .byte 0x24
          .byte 0x57
          .byte 0xa6
          .byte 0xa6
          .byte 0xf1
          .byte 0x73
          .byte 0xb4
          .byte 0xb4
          .byte 0xc7
          .byte 0x97
          .byte 0xc6
          .byte 0xc6
          .byte 0x51
          .byte 0xcb
          .byte 0xe8
          .byte 0xe8
          .byte 0x23
          .byte 0xa1
          .byte 0xdd
          .byte 0xdd
          .byte 0x7c
          .byte 0xe8
          .byte 0x74
          .byte 0x74
          .byte 0x9c
          .byte 0x3e
          .byte 0x1f
          .byte 0x1f
          .byte 0x21
          .byte 0x96
          .byte 0x4b
          .byte 0x4b
          .byte 0xdd
          .byte 0x61
          .byte 0xbd
          .byte 0xbd
          .byte 0xdc
          .byte 0xd
          .byte 0x8b
          .byte 0x8b
          .byte 0x86
          .byte 0xf
          .byte 0x8a
          .byte 0x8a
          .byte 0x85
          .byte 0xe0
          .byte 0x70
          .byte 0x70
          .byte 0x90
          .byte 0x7c
          .byte 0x3e
          .byte 0x3e
          .byte 0x42
          .byte 0x71
          .byte 0xb5
          .byte 0xb5
          .byte 0xc4
          .byte 0xcc
          .byte 0x66
          .byte 0x66
          .byte 0xaa
          .byte 0x90
          .byte 0x48
          .byte 0x48
          .byte 0xd8
          .byte 0x6
          .byte 0x3
          .byte 0x3
          .byte 0x5
          .byte 0xf7
          .byte 0xf6
          .byte 0xf6
          .byte 0x1
          .byte 0x1c
          .byte 0xe
          .byte 0xe
          .byte 0x12
          .byte 0xc2
          .byte 0x61
          .byte 0x61
          .byte 0xa3
          .byte 0x6a
          .byte 0x35
          .byte 0x35
          .byte 0x5f
          .byte 0xae
          .byte 0x57
          .byte 0x57
          .byte 0xf9
          .byte 0x69
          .byte 0xb9
          .byte 0xb9
          .byte 0xd0
          .byte 0x17
          .byte 0x86
          .byte 0x86
          .byte 0x91
          .byte 0x99
          .byte 0xc1
          .byte 0xc1
          .byte 0x58
          .byte 0x3a
          .byte 0x1d
          .byte 0x1d
          .byte 0x27
          .byte 0x27
          .byte 0x9e
          .byte 0x9e
          .byte 0xb9
          .byte 0xd9
          .byte 0xe1
          .byte 0xe1
          .byte 0x38
          .byte 0xeb
          .byte 0xf8
          .byte 0xf8
          .byte 0x13
          .byte 0x2b
          .byte 0x98
          .byte 0x98
          .byte 0xb3
          .byte 0x22
          .byte 0x11
          .byte 0x11
          .byte 0x33
          .byte 0xd2
          .byte 0x69
          .byte 0x69
          .byte 0xbb
          .byte 0xa9
          .byte 0xd9
          .byte 0xd9
          .byte 0x70
          .byte 0x7
          .byte 0x8e
          .byte 0x8e
          .byte 0x89
          .byte 0x33
          .byte 0x94
          .byte 0x94
          .byte 0xa7
          .byte 0x2d
          .byte 0x9b
          .byte 0x9b
          .byte 0xb6
          .byte 0x3c
          .byte 0x1e
          .byte 0x1e
          .byte 0x22
          .byte 0x15
          .byte 0x87
          .byte 0x87
          .byte 0x92
          .byte 0xc9
          .byte 0xe9
          .byte 0xe9
          .byte 0x20
          .byte 0x87
          .byte 0xce
          .byte 0xce
          .byte 0x49
          .byte 0xaa
          .byte 0x55
          .byte 0x55
          .byte 0xff
          .byte 0x50
          .byte 0x28
          .byte 0x28
          .byte 0x78
          .byte 0xa5
          .byte 0xdf
          .byte 0xdf
          .byte 0x7a
          .byte 0x3
          .byte 0x8c
          .byte 0x8c
          .byte 0x8f
          .byte 0x59
          .byte 0xa1
          .byte 0xa1
          .byte 0xf8
          .byte 0x9
          .byte 0x89
          .byte 0x89
          .byte 0x80
          .byte 0x1a
          .byte 0xd
          .byte 0xd
          .byte 0x17
          .byte 0x65
          .byte 0xbf
          .byte 0xbf
          .byte 0xda
          .byte 0xd7
          .byte 0xe6
          .byte 0xe6
          .byte 0x31
          .byte 0x84
          .byte 0x42
          .byte 0x42
          .byte 0xc6
          .byte 0xd0
          .byte 0x68
          .byte 0x68
          .byte 0xb8
          .byte 0x82
          .byte 0x41
          .byte 0x41
          .byte 0xc3
          .byte 0x29
          .byte 0x99
          .byte 0x99
          .byte 0xb0
          .byte 0x5a
          .byte 0x2d
          .byte 0x2d
          .byte 0x77
          .byte 0x1e
          .byte 0xf
          .byte 0xf
          .byte 0x11
          .byte 0x7b
          .byte 0xb0
          .byte 0xb0
          .byte 0xcb
          .byte 0xa8
          .byte 0x54
          .byte 0x54
          .byte 0xfc
          .byte 0x6d
          .byte 0xbb
          .byte 0xbb
          .byte 0xd6
          .byte 0x2c
          .byte 0x16
          .byte 0x16
          .byte 0x3a
.L_447680:
          .byte 0x63
          .byte 0x7c
          .byte 0x77
          .byte 0x7b
          .byte 0xf2
          .byte 0x6b
          .byte 0x6f
          .byte 0xc5
          .byte 0x30
          .byte 0x1
          .byte 0x67
          .byte 0x2b
          .byte 0xfe
          .byte 0xd7
          .byte 0xab
          .byte 0x76
          .byte 0xca
          .byte 0x82
          .byte 0xc9
          .byte 0x7d
          .byte 0xfa
          .byte 0x59
          .byte 0x47
          .byte 0xf0
          .byte 0xad
          .byte 0xd4
          .byte 0xa2
          .byte 0xaf
          .byte 0x9c
          .byte 0xa4
          .byte 0x72
          .byte 0xc0
          .byte 0xb7
          .byte 0xfd
          .byte 0x93
          .byte 0x26
          .byte 0x36
          .byte 0x3f
          .byte 0xf7
          .byte 0xcc
          .byte 0x34
          .byte 0xa5
          .byte 0xe5
          .byte 0xf1
          .byte 0x71
          .byte 0xd8
          .byte 0x31
          .byte 0x15
          .byte 0x4
          .byte 0xc7
          .byte 0x23
          .byte 0xc3
          .byte 0x18
          .byte 0x96
          .byte 0x5
          .byte 0x9a
          .byte 0x7
          .byte 0x12
          .byte 0x80
          .byte 0xe2
          .byte 0xeb
          .byte 0x27
          .byte 0xb2
          .byte 0x75
          .byte 0x9
          .byte 0x83
          .byte 0x2c
          .byte 0x1a
          .byte 0x1b
          .byte 0x6e
          .byte 0x5a
          .byte 0xa0
          .byte 0x52
          .byte 0x3b
          .byte 0xd6
          .byte 0xb3
          .byte 0x29
          .byte 0xe3
          .byte 0x2f
          .byte 0x84
          .byte 0x53
          .byte 0xd1
          .byte 0x0
          .byte 0xed
          .byte 0x20
          .byte 0xfc
          .byte 0xb1
          .byte 0x5b
          .byte 0x6a
          .byte 0xcb
          .byte 0xbe
          .byte 0x39
          .byte 0x4a
          .byte 0x4c
          .byte 0x58
          .byte 0xcf
          .byte 0xd0
          .byte 0xef
          .byte 0xaa
          .byte 0xfb
          .byte 0x43
          .byte 0x4d
          .byte 0x33
          .byte 0x85
          .byte 0x45
          .byte 0xf9
          .byte 0x2
          .byte 0x7f
          .byte 0x50
          .byte 0x3c
          .byte 0x9f
          .byte 0xa8
          .byte 0x51
          .byte 0xa3
          .byte 0x40
          .byte 0x8f
          .byte 0x92
          .byte 0x9d
          .byte 0x38
          .byte 0xf5
          .byte 0xbc
          .byte 0xb6
          .byte 0xda
          .byte 0x21
          .byte 0x10
          .byte 0xff
          .byte 0xf3
          .byte 0xd2
          .byte 0xcd
          .byte 0xc
          .byte 0x13
          .byte 0xec
          .byte 0x5f
          .byte 0x97
          .byte 0x44
          .byte 0x17
          .byte 0xc4
          .byte 0xa7
          .byte 0x7e
          .byte 0x3d
          .byte 0x64
          .byte 0x5d
          .byte 0x19
          .byte 0x73
          .byte 0x60
          .byte 0x81
          .byte 0x4f
          .byte 0xdc
          .byte 0x22
          .byte 0x2a
          .byte 0x90
          .byte 0x88
          .byte 0x46
          .byte 0xee
          .byte 0xb8
          .byte 0x14
          .byte 0xde
          .byte 0x5e
          .byte 0xb
          .byte 0xdb
          .byte 0xe0
          .byte 0x32
          .byte 0x3a
          .byte 0xa
          .byte 0x49
          .byte 0x6
          .byte 0x24
          .byte 0x5c
          .byte 0xc2
          .byte 0xd3
          .byte 0xac
          .byte 0x62
          .byte 0x91
          .byte 0x95
          .byte 0xe4
          .byte 0x79
          .byte 0xe7
          .byte 0xc8
          .byte 0x37
          .byte 0x6d
          .byte 0x8d
          .byte 0xd5
          .byte 0x4e
          .byte 0xa9
          .byte 0x6c
          .byte 0x56
          .byte 0xf4
          .byte 0xea
          .byte 0x65
          .byte 0x7a
          .byte 0xae
          .byte 0x8
          .byte 0xba
          .byte 0x78
          .byte 0x25
          .byte 0x2e
          .byte 0x1c
          .byte 0xa6
          .byte 0xb4
          .byte 0xc6
          .byte 0xe8
          .byte 0xdd
          .byte 0x74
          .byte 0x1f
          .byte 0x4b
          .byte 0xbd
          .byte 0x8b
          .byte 0x8a
          .byte 0x70
          .byte 0x3e
          .byte 0xb5
          .byte 0x66
          .byte 0x48
          .byte 0x3
          .byte 0xf6
          .byte 0xe
          .byte 0x61
          .byte 0x35
          .byte 0x57
          .byte 0xb9
          .byte 0x86
          .byte 0xc1
          .byte 0x1d
          .byte 0x9e
          .byte 0xe1
          .byte 0xf8
          .byte 0x98
          .byte 0x11
          .byte 0x69
          .byte 0xd9
          .byte 0x8e
          .byte 0x94
          .byte 0x9b
          .byte 0x1e
          .byte 0x87
          .byte 0xe9
          .byte 0xce
          .byte 0x55
          .byte 0x28
          .byte 0xdf
          .byte 0x8c
          .byte 0xa1
          .byte 0x89
          .byte 0xd
          .byte 0xbf
          .byte 0xe6
          .byte 0x42
          .byte 0x68
          .byte 0x41
          .byte 0x99
          .byte 0x2d
          .byte 0xf
          .byte 0xb0
          .byte 0x54
          .byte 0xbb
          .byte 0x16
.L_447780:

            cmp RDX,16
            je .L_4477d0

            cmp RDX,8
            mov R9D,27
            jne .L_4477d8
.L_447792:

            lea EAX,DWORD PTR [RDX-1]
            xor ECX,ECX
            cdqe 
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4477a0:

            movzx R8D,BYTE PTR [RSI+RAX*1]
            add R8D,R8D
            or ECX,R8D
            mov BYTE PTR [RDI+RAX*1],CL
            movzx ECX,BYTE PTR [RSI+RAX*1]
            sub RAX,1
            shr CL,7
            test EAX,EAX
            jns .L_4477a0

            movzx EAX,BYTE PTR [RSI]
            sar AL,7
            and EAX,R9D
            xor BYTE PTR [RDI+RDX*1-1],AL
            xor EAX,EAX
            ret 

            nop
            nop
            nop
.L_4477d0:

            mov R9D,4294967175
            jmp .L_447792
.L_4477d8:

            mov EAX,4294942464
            ret 
.L_4477de:

            nop
            nop
.L_4477e0:

            push RBP
            push RBX
            sub RSP,8
.L_4477e6:

            test RDI,RDI
            je .L_447855

            cmp QWORD PTR [RDI],0
            je .L_447855

            test RSI,RSI
            je .L_447855

            mov ECX,1
            mov RBX,RDI
            call .L_45a710

            test EAX,EAX
            mov EBP,EAX
            jne .L_44784c

            mov RAX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RAX]
            cmp EAX,36
            ja .L_447855

            movabs RDX,68719476764
            bt RDX,RAX
            jae .L_447855

            mov ESI,40
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_44785c

            lea RDX,QWORD PTR [RAX+16]
            mov QWORD PTR [RBX+72],RAX
.L_447840:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_447840
.L_44784c:

            add RSP,8
.L_447850:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_447855:

            mov EBP,4294942464
            jmp .L_44784c
.L_44785c:

            mov EBP,4294942336
            jmp .L_44784c
.L_447863:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447870:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_44787e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_447a17

            mov RAX,QWORD PTR [RDI]
            mov R12,RDI
            test RAX,RAX
            je .L_447a17

            test RSI,RSI
            mov R13,RSI
            je .L_447a17

            mov RBX,QWORD PTR [RDI+72]
            test RBX,RBX
            je .L_447a17

            mov R15D,DWORD PTR [RAX+32]
            mov RAX,QWORD PTR [RBX+32]
            mov RBP,RDX
            test RAX,RAX
            jne .L_447980
.L_4478d3:

            lea RAX,QWORD PTR [R15+RBP*1-1]
            xor EDX,EDX
            lea RDI,QWORD PTR [RSP+16]
            mov R14D,1
            div R15
            mov QWORD PTR [RSP],RDI
            cmp RAX,1
            mov QWORD PTR [RSP+8],RAX
            jbe .L_44794e

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447900:

            xor EDX,EDX
            test R15,R15
            je .L_447922

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447910:

            movzx EAX,BYTE PTR [R13+RDX*1]
            xor BYTE PTR [RBX+RDX*1],AL
            add RDX,1
            cmp R15,RDX
            jne .L_447910
.L_447922:

            mov R8,QWORD PTR [RSP]
            mov RCX,RBX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R12
            call .L_45a8a0

            test EAX,EAX
            mov ECX,EAX
            jne .L_447959

            sub RBP,R15
            add R13,R15
            add R14,1
            cmp QWORD PTR [RSP+8],R14
            jne .L_447900
.L_44794e:

            xor ECX,ECX
            test RBP,RBP
            jne .L_4479f4
.L_447959:

            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_447a21

            add RSP,40
.L_447973:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_447980:

            mov RDX,R15
            sub RDX,RAX
            cmp RDX,RBP
            jae .L_4478d3

            lea RDI,QWORD PTR [RBX+RAX*1+16]
            call memcpy@PLT

            test R15,R15
            lea RCX,QWORD PTR [RBX+16]
            je .L_4479b8

            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_4479a8:

            movzx EDX,BYTE PTR [RCX+RAX*1]
            xor BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp R15,RAX
            jne .L_4479a8
.L_4479b8:

            lea R8,QWORD PTR [RSP+16]
            mov RCX,RBX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R12
            call .L_45a8a0

            test EAX,EAX
            mov ECX,EAX
            jne .L_447959

            mov RAX,QWORD PTR [RBX+32]
            mov RDX,R15
            mov QWORD PTR [RBX+32],0
            sub RDX,RAX
            add RBP,RAX
            add R13,RDX
            sub RBP,R15
            jmp .L_4478d3
.L_4479f4:

            mov RAX,QWORD PTR [RBX+32]
            mov RDX,RBP
            mov RSI,R13
            mov DWORD PTR [RSP],ECX
            lea RDI,QWORD PTR [RBX+RAX*1+16]
            call memcpy@PLT

            add QWORD PTR [RBX+32],RBP
            mov ECX,DWORD PTR [RSP]
            jmp .L_447959
.L_447a17:

            mov ECX,4294942464
            jmp .L_447959
.L_447a21:

            call __stack_chk_fail@PLT
.L_447a26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447a30:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_447a3e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+24],RSI
            je .L_447cec

            mov RCX,QWORD PTR [RDI]
            mov R11,RDI
            test RCX,RCX
            je .L_447cec

            mov R14,QWORD PTR [RDI+72]
            test R14,R14
            je .L_447cec

            test RSI,RSI
            je .L_447cec

            lea RBX,QWORD PTR [RSP+48]
            mov R10D,DWORD PTR [RCX+32]
            mov R12,R14
            lea RDX,QWORD PTR [RBX+16]
            mov RAX,RBX
            nop
            nop
            nop
            nop
.L_447a98:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_447a98

            lea RBP,QWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RBP+16]
            mov RAX,RBP
.L_447ab0:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_447ab0

            lea R15,QWORD PTR [RSP+80]
            lea RDX,QWORD PTR [R15+16]
            mov RAX,R15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447ad0:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_447ad0

            mov R13D,DWORD PTR [RCX+32]
            lea RAX,QWORD PTR [RSP+40]
            mov RDI,R11
            mov RCX,R15
            mov RSI,R15
            mov QWORD PTR [RSP+16],R10
            mov R8,RAX
            mov QWORD PTR [RSP+8],R11
            mov QWORD PTR [RSP],RAX
            mov RDX,R13
            call .L_45a8a0

            test EAX,EAX
            mov R11,QWORD PTR [RSP+8]
            mov R10,QWORD PTR [RSP+16]
            je .L_447ca8
.L_447b19:

            lea RDX,QWORD PTR [R15+16]
            mov RAX,R15
.L_447b20:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_447b20

            mov RDX,QWORD PTR [R14+32]
            lea R9,QWORD PTR [R14+16]
            xor EAX,EAX
            mov R13,R9
            cmp RDX,R10
            jb .L_447c4a

            test R10,R10
            je .L_447b82

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447b50:

            movzx EDX,BYTE PTR [R9+RAX*1]
            xor DL,BYTE PTR [RBX+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_447b50
.L_447b65:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447b70:

            movzx EDX,BYTE PTR [R15+RAX*1]
            xor BYTE PTR [R14+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_447b70
.L_447b82:

            mov R8,QWORD PTR [RSP]
            mov RDX,R10
            mov RCX,R14
            mov RSI,R14
            mov RDI,R11
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP],R10
            call .L_45a8a0

            test EAX,EAX
            mov R15D,EAX
            mov R10,QWORD PTR [RSP]
            mov R9,QWORD PTR [RSP+8]
            je .L_447c88
.L_447bb4:

            lea RAX,QWORD PTR [RBX+16]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447bc0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_447bc0

            lea RAX,QWORD PTR [RBP+16]
.L_447bd0:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RBP,RAX
            jne .L_447bd0

            mov QWORD PTR [R14+32],0
            add R14,32
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447bf0:

            mov BYTE PTR [R13],0
            add R13,1
            cmp R13,R14
            jne .L_447bf0

            nop
            nop
.L_447c00:

            mov BYTE PTR [R12],0
            add R12,1
            cmp R12,R9
            jne .L_447c00
.L_447c0e:

            mov RDI,QWORD PTR [RSP+104]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_447d01

            add RSP,120
.L_447c29:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_447c38:

            movzx ECX,BYTE PTR [R9+RAX*1]
            mov BYTE PTR [R15+RAX*1],CL
.L_447c41:

            add RAX,1
            cmp R10,RAX
            je .L_447c63
.L_447c4a:

            cmp RDX,RAX
            ja .L_447c38

            je .L_447cf7

            mov BYTE PTR [R15+RAX*1],0
            add RAX,1
            cmp R10,RAX
            jne .L_447c4a
.L_447c63:

            xor EAX,EAX
            nop
            nop
            nop
.L_447c68:

            movzx EDX,BYTE PTR [R15+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_447c68

            jmp .L_447b65
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447c88:

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R10
            mov RSI,R14
            mov QWORD PTR [RSP],R9
            call memcpy@PLT

            mov R9,QWORD PTR [RSP]
            jmp .L_447bb4
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447ca8:

            mov RDX,R13
            mov RSI,R15
            mov RDI,RBX
            mov QWORD PTR [RSP+16],R11
            mov QWORD PTR [RSP+8],R10
            call .L_447780

            test EAX,EAX
            mov R10,QWORD PTR [RSP+8]
            mov R11,QWORD PTR [RSP+16]
            jne .L_447b19

            mov RSI,RBX
            mov RDI,RBP
            call .L_447780

            mov R11,QWORD PTR [RSP+16]
            mov R10,QWORD PTR [RSP+8]
            jmp .L_447b19
.L_447cec:

            mov R15D,4294942464
            jmp .L_447c0e
.L_447cf7:

            mov BYTE PTR [R15+RDX*1],128
            jmp .L_447c41
.L_447d01:

            call __stack_chk_fail@PLT
.L_447d06:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447d10:

            test RDI,RDI
            je .L_447d5f

            cmp QWORD PTR [RDI],0
            je .L_447d5f

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_447d5f

            lea RCX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+32]
            mov QWORD PTR [RAX+32],0
            mov RDX,RCX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447d40:

            mov BYTE PTR [RDX],0
            add RDX,1
            cmp RSI,RDX
            jne .L_447d40

            nop
            nop
            nop
            nop
.L_447d50:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RCX,RAX
            jne .L_447d50

            xor EAX,EAX
            ret 
.L_447d5f:

            mov EAX,4294942464
            ret 
.L_447d65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447d70:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_447d7e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+8],R8
            je .L_447e50

            test RSI,RSI
            mov R14,RSI
            je .L_447e50

            test RCX,RCX
            mov R12,RCX
            je .L_447e50

            test R9,R9
            mov R13,R9
            je .L_447e50

            lea RBX,QWORD PTR [RSP+16]
            mov RBP,RDI
            mov R15,RDX
            mov RDI,RBX
            call .L_45a630

            mov RSI,RBP
            mov RDI,RBX
            call .L_45a6b0

            test EAX,EAX
            mov EBP,EAX
            je .L_447e10
.L_447de4:

            mov RDI,RBX
            call .L_45a650
.L_447dec:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_447e57

            add RSP,120
.L_447e02:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447e10:

            mov RDX,R15
            mov RSI,R14
            mov RDI,RBX
            call .L_4477e0

            test EAX,EAX
            mov EBP,EAX
            jne .L_447de4

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,RBX
            call .L_447870

            test EAX,EAX
            mov EBP,EAX
            jne .L_447de4

            mov RSI,R13
            mov RDI,RBX
            call .L_447a30

            mov EBP,EAX
            jmp .L_447de4
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447e50:

            mov EBP,4294942464
            jmp .L_447dec
.L_447e57:

            call __stack_chk_fail@PLT
.L_447e5c:

            nop
            nop
            nop
            nop
.L_447e60:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            sub RSP,72
.L_447e71:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test RDX,RDX
            mov QWORD PTR [RSP+8],RSI
            sete DL
            test R8,R8
            sete AL
            or DL,AL
            jne .L_447f74

            test RDI,RDI
            mov R12,RDI
            je .L_447f74

            mov EDI,2
            mov R15,RCX
            mov R14,R8
            call .L_45a550

            test RAX,RAX
            mov RBP,RAX
            je .L_447f68

            mov RSI,QWORD PTR [RSP+8]
            cmp RSI,16
            jne .L_447f30

            movdqu XMM0,XMMWORD PTR [R12]
            lea RBX,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_447edd:

            mov R9,R14
            mov R8,R15
            mov RCX,R13
            mov EDX,128
            mov RSI,RBX
            mov RDI,RBP
            call .L_447d70
.L_447ef6:

            lea RDX,QWORD PTR [RBX+16]
            mov RSI,RBX
            nop
            nop
            nop
.L_447f00:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RDX
            jne .L_447f00
.L_447f0c:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_447f7b

            add RSP,72
.L_447f20:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447f30:

            lea RAX,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+32]
            mov R8,RSI
            mov RCX,R12
            mov EDX,128
            mov RSI,RAX
            mov RDI,RBP
            mov R9,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_447d70

            test EAX,EAX
            jne .L_447ef6

            jmp .L_447edd
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447f68:

            mov EAX,4294942592
            lea RBX,QWORD PTR [RSP+32]
            jmp .L_447ef6
.L_447f74:

            mov EAX,4294942464
            jmp .L_447f0c
.L_447f7b:

            call __stack_chk_fail@PLT
.L_447f80:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,856
.L_447f91:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+840],RAX
            xor EAX,EAX
            cmp RDX,384
            ja .L_448189

            mov RBP,RDI
            lea RDI,QWORD PTR [RSP+416]
            mov ECX,52
            lea RBX,QWORD PTR [RSP+32]
            mov R12,RDX
            mov R13,RSI
            mov QWORD PTR [RSP+16],RDI

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            call .L_444760

            mov RDI,QWORD PTR [RSP+16]
            mov RAX,R12
            mov RSI,R13
            shr RAX,8
            mov ECX,392
            mov RDX,R12
            mov BYTE PTR [RSP+434],AL
            mov BYTE PTR [RSP+435],R12B
            add RDI,24
            mov BYTE PTR [RSP+439],48
            call __memcpy_chk@PLT

            lea RAX,QWORD PTR [R12+25]
            lea RSI,QWORD PTR [RSP+336]
            mov BYTE PTR [RSP+R12*1+440],128
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
.L_448030:

            mov BYTE PTR [RSI+RAX*1],AL
            add RAX,1
            cmp RAX,32
            jne .L_448030

            mov EDX,256
            mov RDI,RBX
            lea R15,QWORD PTR [RSP+320]
            call .L_4447b0

            movzx EAX,BYTE PTR [RSP+419]
            xor R12D,R12D
            add EAX,1
            mov BYTE PTR [RSP+7],AL
            lea RAX,QWORD PTR [RSP+368]
            mov QWORD PTR [RSP+8],RAX
.L_448071:

            pxor XMM0,XMM0
            mov R14,QWORD PTR [RSP+24]
            mov R13,QWORD PTR [RSP+16]
            xor EDX,EDX
            movaps XMMWORD PTR [R15],XMM0
            nop
            nop
            nop
.L_448088:

            xor EAX,EAX
            jmp .L_448095
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_448090:

            movzx EDX,BYTE PTR [R15+RAX*1]
.L_448095:

            xor DL,BYTE PTR [R13+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_448090

            add R13,16
            cmp R14,16
            mov RCX,R15
            cmovbe RAX,R14
            mov RDX,R15
            mov ESI,1
            sub R14,RAX
            mov RDI,RBX
            call .L_445520

            test R14,R14
            je .L_4480e0

            movzx EDX,BYTE PTR [RSP+320]
            jmp .L_448088
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4480e0:

            mov RAX,QWORD PTR [RSP+8]
            movdqa XMM0,XMMWORD PTR [RSP+320]
            movaps XMMWORD PTR [RAX+R12*1],XMM0
            movzx EAX,BYTE PTR [RSP+7]
            add R12,16
            mov BYTE PTR [RSP+419],AL
            add EAX,1
            cmp R12,48
            mov BYTE PTR [RSP+7],AL
            jne .L_448071

            mov R13,QWORD PTR [RSP+8]
            lea R12,QWORD PTR [RBP+48]
            mov EDX,256
            mov RDI,RBX
            mov RSI,R13
            add R13,32
            call .L_4447b0
.L_448131:

            mov RCX,R13
            mov RDX,R13
            mov ESI,1
            mov RDI,RBX
            add RBP,16
            call .L_445520

            movdqa XMM0,XMMWORD PTR [RSP+400]
            movaps XMMWORD PTR [RBP-16],XMM0
            cmp R12,RBP
            jne .L_448131

            mov RDI,RBX
            call .L_444790

            xor EAX,EAX
.L_448164:

            mov RCX,QWORD PTR [RSP+840]
            xor RCX,QWORD PTR FS:[40]
            jne .L_448190

            add RSP,856
.L_44817e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_448189:

            mov EAX,4294967240
            jmp .L_448164
.L_448190:

            call __stack_chk_fail@PLT
.L_448195:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4481a0:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
            lea RBX,QWORD PTR [RDI+40]
            sub RSP,72
.L_4481bc:

            mov RBP,RSP
            movaps XMMWORD PTR [RSP],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            lea R13,QWORD PTR [RBP+48]
            mov R15,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
.L_4481e4:

            mov EAX,15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4481f0:

            test EAX,EAX
            setne CL
            movzx ESI,BYTE PTR [R12+RAX*1]
            lea EDX,DWORD PTR [RSI+1]
            test DL,DL
            mov BYTE PTR [R12+RAX*1],DL
            sete DL
            sub RAX,1
            test CL,DL
            jne .L_4481f0

            mov RCX,R15
            mov RDX,R12
            mov ESI,1
            mov RDI,RBX
            add R15,16
            call .L_445520

            cmp R15,R13
            jne .L_4481e4

            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_448230:

            movzx EDX,BYTE PTR [RBP+RAX*1]
            xor DL,BYTE PTR [R14+RAX*1]
            mov BYTE PTR [RBP+RAX*1],DL
            add RAX,1
            cmp RAX,48
            jne .L_448230

            mov RDI,RBX
            mov EDX,256
            mov RSI,RBP
            call .L_4447b0

            movdqa XMM0,XMMWORD PTR [RSP+32]
            xor EAX,EAX
            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            movups XMMWORD PTR [R12],XMM0
            jne .L_448283

            add RSP,72
.L_448278:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_448283:

            call __stack_chk_fail@PLT
.L_448288:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448290:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+336],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,344
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_4482bf:

            nop
.L_4482c0:

            test RDI,RDI
            je .L_4482ee

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+40]
            call .L_444790

            lea RAX,QWORD PTR [RBX+344]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4482e0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RAX,RBX
            jne .L_4482e0

            pop RBX
            ret 
.L_4482ee:

            ret 
.L_4482f0:

            mov DWORD PTR [RDI+20],ESI
            ret 
.L_4482f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448300:

            mov QWORD PTR [RDI+24],RSI
            ret 
.L_448305:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448310:

            mov DWORD PTR [RDI+32],ESI
            ret 
.L_448314:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448320:

            push RBP
            push RBX
            sub RSP,72
.L_448326:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test RDX,RDX
            je .L_448364

            cmp RDX,384
            mov EAX,384
            mov RBX,RSP
            mov RBP,RDI
            cmova RDX,RAX
            mov RDI,RBX
            call .L_447f80

            mov RSI,RBX
            mov RDI,RBP
            call .L_4481a0
.L_448364:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44837b

            add RSP,72
.L_448378:

            pop RBX
            pop RBP
            ret 
.L_44837b:

            call __stack_chk_fail@PLT
.L_448380:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            sub RSP,408
.L_448394:

            mov RDX,QWORD PTR [RDI+24]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            cmp RDX,384
            ja .L_448468

            mov EAX,384
            sub RAX,RDX
            cmp RAX,R12
            jb .L_448468

            mov RBX,RSP
            mov RBP,RDI
            xor EAX,EAX
            mov ECX,48
            mov RDI,RBX
            mov R15,RSI

            rep stosq QWORD PTR [RDI]

            mov RSI,RBX
            mov RDI,QWORD PTR [RBP+336]
            call QWORD PTR [RBP+328]

            test EAX,EAX
            mov R13D,EAX
            jne .L_448470

            test R15,R15
            mov R14,QWORD PTR [RBP+24]
            je .L_448404

            test R12,R12
            jne .L_448450
.L_448404:

            mov RDX,R14
            mov RSI,RBX
            mov RDI,RBX
            call .L_447f80

            mov RSI,RBX
            mov RDI,RBP
            call .L_4481a0

            mov DWORD PTR [RBP+16],1
.L_448424:

            mov RCX,QWORD PTR [RSP+392]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_448478

            add RSP,408
.L_448441:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_448450:

            lea RDI,QWORD PTR [RBX+R14*1]
            mov RDX,R12
            mov RSI,R15
            add R14,R12
            call memcpy@PLT

            jmp .L_448404
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_448468:

            mov R13D,4294967240
            jmp .L_448424
.L_448470:

            mov R13D,4294967244
            jmp .L_448424
.L_448478:

            call __stack_chk_fail@PLT
.L_44847d:

            nop
            nop
            nop
.L_448480:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R15,R9
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+40]
            push RBX
            mov RBX,RDI
            mov R12,RCX
            mov RDI,RBP
            mov R13,R8
            sub RSP,72
.L_4484a5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RSI
            mov QWORD PTR [RSP],RDX
            lea R14,QWORD PTR [RSP+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_444760

            mov RDI,RBP
            mov RSI,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [RSP]
            mov QWORD PTR [RBX+24],R15
            mov DWORD PTR [RBX+32],10000
            mov QWORD PTR [RBX+328],RSI
            mov QWORD PTR [RBX+336],RDX
            mov RSI,R14
            mov EDX,256
            call .L_4447b0

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_448380

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_448531

            add RSP,72
.L_448526:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_448531:

            call __stack_chk_fail@PLT
.L_448536:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448540:

            mov R9D,32
            jmp .L_448480
.L_44854b:

            nop
            nop
            nop
            nop
            nop
.L_448550:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_44855e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp RDX,1024
            ja .L_448741

            cmp R8,256
            ja .L_448737

            lea RAX,QWORD PTR [RSP+32]
            pxor XMM0,XMM0
            mov RBX,RDI
            mov R15,RSI
            mov R14,RDX
            mov QWORD PTR [RSP+8],RAX
            mov EAX,DWORD PTR [RDI+32]
            cmp DWORD PTR [RDI+16],EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            jg .L_4485c1

            mov EAX,DWORD PTR [RDI+20]
            test EAX,EAX
            je .L_4486e0
.L_4485c1:

            mov RDX,R8
            mov RSI,RCX
            mov RDI,RBX
            call .L_448380

            test EAX,EAX
            jne .L_448666
.L_4485d7:

            test R14,R14
            je .L_448653

            lea R12,QWORD PTR [RBX+40]
            lea R13,QWORD PTR [RSP+16]
            mov EBP,16
.L_4485ea:

            mov EAX,15
            nop
.L_4485f0:

            movzx EDI,BYTE PTR [RBX+RAX*1]
            lea EDX,DWORD PTR [RDI+1]
            test DL,DL
            mov BYTE PTR [RBX+RAX*1],DL
            sete CL
            test EAX,EAX
            setne DL
            sub RAX,1
            test CL,DL
            jne .L_4485f0

            mov RCX,R13
            mov RDX,RBX
            mov ESI,1
            mov RDI,R12
            call .L_445520

            cmp R14,16
            mov RAX,RBP
            cmovbe RAX,R14
            cmp EAX,8
            jae .L_448690

            test AL,4
            jne .L_44870c

            test EAX,EAX
            je .L_44864b

            movzx EDX,BYTE PTR [R13]
            test AL,2
            mov BYTE PTR [R15],DL
            jne .L_448724
.L_44864b:

            add R15,RAX
            sub R14,RAX
            jne .L_4485ea
.L_448653:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_4481a0

            add DWORD PTR [RBX+16],1
            xor EAX,EAX
.L_448666:

            mov RSI,QWORD PTR [RSP+88]
            xor RSI,QWORD PTR FS:[40]
            jne .L_44874b

            add RSP,104
.L_44867e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448690:

            mov RDX,QWORD PTR [R13]
            mov R9,R13
            mov QWORD PTR [R15],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [R13+RDX*1-8]
            mov QWORD PTR [R15+RDX*1-8],RCX
            lea RCX,QWORD PTR [R15+8]
            mov RDX,R15
            and RCX,-8
            sub RDX,RCX
            sub R9,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_44864b

            and EDX,4294967288
            xor ESI,ESI
.L_4486c6:

            mov EDI,ESI
            add ESI,8
            mov R10,QWORD PTR [R9+RDI*1]
            cmp ESI,EDX
            mov QWORD PTR [RCX+RDI*1],R10
            jb .L_4486c6

            jmp .L_44864b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4486e0:

            test R8,R8
            je .L_4485d7

            mov RBP,QWORD PTR [RSP+8]
            mov RSI,RCX
            mov RDX,R8
            mov RDI,RBP
            call .L_447f80

            mov RSI,RBP
            mov RDI,RBX
            call .L_4481a0

            jmp .L_4485d7
.L_44870c:

            mov EDX,DWORD PTR [R13]
            mov DWORD PTR [R15],EDX
            mov EDX,EAX
            mov ECX,DWORD PTR [R13+RDX*1-4]
            mov DWORD PTR [R15+RDX*1-4],ECX
            jmp .L_44864b
.L_448724:

            mov EDX,EAX
            movzx ECX,WORD PTR [R13+RDX*1-2]
            mov WORD PTR [R15+RDX*1-2],CX
            jmp .L_44864b
.L_448737:

            mov EAX,4294967240
            jmp .L_448666
.L_448741:

            mov EAX,4294967242
            jmp .L_448666
.L_44874b:

            call __stack_chk_fail@PLT
.L_448750:

            xor R8D,R8D
            xor ECX,ECX
            jmp .L_448550
.L_44875a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_448760:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,600
.L_448774:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+584],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [R9+8]
            mov DWORD PTR [RSP+60],ECX
            mov QWORD PTR [RSP+40],RDI
            mov DWORD PTR [RSP+56],ESI
            mov QWORD PTR [RSP+48],RDX
            mov RCX,QWORD PTR [R9+16]
            mov RBX,RAX
            sub RBX,1
            mov QWORD PTR [RSP+32],RBX
            je .L_4487e1

            mov RDX,QWORD PTR [RCX+RBX*8]
            mov RSI,QWORD PTR [RSP+32]
            test RDX,RDX
            je .L_4487d8

            jmp .L_448aa9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4487c8:

            mov RDX,QWORD PTR [RCX+RAX*8]
            test RDX,RDX
            jne .L_448a60

            mov RSI,RAX
.L_4487d8:

            mov RAX,RSI
            sub RAX,1
            jne .L_4487c8
.L_4487e1:

            mov RDX,QWORD PTR [RCX]
            mov ESI,1
            mov QWORD PTR [RSP+32],1
            xor ECX,ECX
.L_4487f4:

            mov EAX,63
            jmp .L_448808
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448800:

            sub EAX,1
            cmp EAX,-1
            je .L_448811
.L_448808:

            bt RDX,RAX
            jae .L_448800

            lea ECX,DWORD PTR [RAX+RSI*1]
.L_448811:

            lea RBX,QWORD PTR [RSP+64]
            sub RSP,8
.L_44881a:

            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_4490d8]
            mov EDX,1
            mov ESI,512
            mov QWORD PTR [RSP+24],RBX
            push RCX
            mov RDI,RBX
            mov ECX,512
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RSP+56]
            mov ECX,DWORD PTR [RSP+76]
            mov R8,RBX
            mov RDX,QWORD PTR [RSP+64]
            mov ESI,DWORD PTR [RSP+72]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pop RAX
            pop RDX
.L_448864:

            mov RAX,QWORD PTR [RSP+32]
            test RAX,RAX
            je .L_448a72

            lea RAX,QWORD PTR [RAX*8-8]
            xor R14D,R14D
            mov DWORD PTR [RSP+24],0
            mov R8D,1
            mov QWORD PTR [RSP+8],RAX
            mov RAX,R15
            mov R15,R14
            mov R14,RAX
            jmp .L_4488c8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4488a0:

            mov RAX,QWORD PTR [R14+16]
            mov RBX,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR [RAX+RBX*1]
            test RAX,RAX
            jne .L_448a20
.L_4488b6:

            sub QWORD PTR [RSP+8],8
            sub QWORD PTR [RSP+32],1
            je .L_4489ab
.L_4488c8:

            test R8D,R8D
            jne .L_4488a0
.L_4488cd:

            mov R12D,7
.L_4488d3:

            mov R13D,DWORD PTR [RSP+24]
            lea EBP,DWORD PTR [R12*8]
            mov EBX,R12D
            mov DWORD PTR [RSP+28],R12D
            mov R12D,R13D
            mov R13,QWORD PTR [RSP+16]
.L_4488f0:

            mov ESI,512
            lea RDI,QWORD PTR [R13+R15*1]
            sub RSI,R15
            test R12B,15
            jne .L_448940

            test R12D,R12D
            je .L_448940

            lea RDX,QWORD PTR [RIP+.L_45fd50-93275]
            xor EAX,EAX
            xor R15D,R15D
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+40]
            mov ESI,DWORD PTR [RSP+56]
            mov R8,R13
            mov ECX,DWORD PTR [RSP+60]
            mov RDX,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            mov RDI,R13
            mov ESI,512
.L_448940:

            mov RAX,QWORD PTR [R14+16]
            mov RDX,QWORD PTR [RSP+8]
            mov ECX,EBP
            lea R8,QWORD PTR [RIP+.L_4490f7]
            add R15,3
            add R12D,1
            sub EBP,8
            mov R9,QWORD PTR [RAX+RDX*1]
            xor EAX,EAX
            mov EDX,1
            shr R9,CL
            mov RCX,-1
            movzx R9D,R9B
            call __snprintf_chk@PLT

            sub EBX,1
            jns .L_4488f0

            mov EAX,DWORD PTR [RSP+24]
            mov R12D,DWORD PTR [RSP+28]
            xor R8D,R8D
            sub QWORD PTR [RSP+8],8
            sub QWORD PTR [RSP+32],1
            lea EAX,DWORD PTR [R12+RAX*1+1]
            mov DWORD PTR [RSP+24],EAX
            jne .L_4488c8
.L_4489ab:

            mov RAX,QWORD PTR [RSP+16]
            mov ESI,512
            sub RSI,R15
            cmp R8D,1
            lea RDI,QWORD PTR [RAX+R15*1]
            je .L_448abd
.L_4489c6:

            lea RDX,QWORD PTR [RIP+.L_45fd50-93275]
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+40]
            mov R8,QWORD PTR [RSP+16]
            mov ECX,DWORD PTR [RSP+60]
            mov RDX,QWORD PTR [RSP+48]
            mov ESI,DWORD PTR [RSP+56]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RSP+584]
            xor RAX,QWORD PTR FS:[40]
            jne .L_448ac4

            add RSP,600
.L_448a13:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_448a20:

            mov RDX,RAX
            shr RDX,56
            test RDX,RDX
            jne .L_4488cd

            mov R12D,6
.L_448a36:

            lea ECX,DWORD PTR [R12*8]
            mov RDX,RAX
            shr RDX,CL
            test DL,DL
            jne .L_4488d3

            sub R12D,1
            cmp R12D,-1
            jne .L_448a36

            jmp .L_4488b6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448a60:

            mov ECX,EAX
            mov QWORD PTR [RSP+32],RSI
            shl ECX,6
            lea ESI,DWORD PTR [RCX+1]
            jmp .L_4487f4
.L_448a72:

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,512
.L_448a7c:

            lea RDX,QWORD PTR [RIP+.L_4490fd]
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+32]
            mov RBX,QWORD PTR [RSP+16]
            mov ESI,512
            add RAX,3
            sub RSI,RAX
            lea RDI,QWORD PTR [RBX+RAX*1]
            jmp .L_4489c6
.L_448aa9:

            mov ECX,DWORD PTR [RSP+32]
            mov QWORD PTR [RSP+32],RAX
            shl ECX,6
            lea ESI,DWORD PTR [RCX+1]
            jmp .L_4487f4
.L_448abd:

            mov QWORD PTR [RSP+32],R15
            jmp .L_448a7c
.L_448ac4:

            call __stack_chk_fail@PLT
.L_448ac9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448ad0:

            mov DWORD PTR [RIP+.L_67e5e8],EDI
            ret 
.L_448ad7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448ae0:

            push R14
            push R13
            mov R13D,ECX
            push R12
            push RBP
            mov R12,RDX
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,736
.L_448afa:

            test AL,AL
            mov QWORD PTR [RSP+600],R9
            je .L_448b46

            movaps XMMWORD PTR [RSP+608],XMM0
            movaps XMMWORD PTR [RSP+624],XMM1
            movaps XMMWORD PTR [RSP+640],XMM2
            movaps XMMWORD PTR [RSP+656],XMM3
            movaps XMMWORD PTR [RSP+672],XMM4
            movaps XMMWORD PTR [RSP+688],XMM5
            movaps XMMWORD PTR [RSP+704],XMM6
            movaps XMMWORD PTR [RSP+720],XMM7
.L_448b46:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_448b75

            mov RAX,QWORD PTR [RBX]
            test RAX,RAX
            je .L_448b75

            cmp QWORD PTR [RAX+32],0
            je .L_448b75

            cmp DWORD PTR [RIP+.L_67e5e8],EBP
            jge .L_448ba0
.L_448b75:

            mov RAX,QWORD PTR [RSP+552]
            xor RAX,QWORD PTR FS:[40]
            jne .L_448c1e

            add RSP,736
.L_448b93:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_448ba0:

            lea RAX,QWORD PTR [RSP+784]
            lea R14,QWORD PTR [RSP+32]
            lea R9,QWORD PTR [RSP+8]
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+560]
            mov RDI,R14
            mov DWORD PTR [RSP+8],40
            mov DWORD PTR [RSP+12],48
            mov QWORD PTR [RSP+24],RAX
            call __vsnprintf_chk@PLT

            cmp EAX,510
            ja .L_448c04

            movsxd RDX,EAX
            add EAX,1
            cdqe 
            mov BYTE PTR [RSP+RDX*1+32],10
            mov BYTE PTR [RSP+RAX*1+32],0
.L_448c04:

            mov RAX,QWORD PTR [RBX]
            mov R8,R14
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            jmp .L_448b75
.L_448c1e:

            call __stack_chk_fail@PLT
.L_448c23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448c30:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,528
.L_448c3f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+520],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_448c78

            cmp QWORD PTR [RAX+32],0
            je .L_448c78

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            mov EBP,ESI
            jl .L_448c78

            cmp R9D,4294940416
            jne .L_448ca0

            nop
            nop
            nop
            nop
.L_448c78:

            mov RAX,QWORD PTR [RSP+520]
            xor RAX,QWORD PTR FS:[40]
            jne .L_448cf0

            add RSP,528
.L_448c92:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448ca0:

            mov EAX,R9D
            mov R14,RSP
            mov RBX,RDI
            neg EAX
            mov R12,RDX
            mov R13D,ECX
            push RAX
            push R9
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_449101]
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov RDI,R14
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RBX]
            mov RDX,R12
            mov R8,R14
            mov ECX,R13D
            mov ESI,EBP
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pop RAX
            pop RDX
            jmp .L_448c78
.L_448cf0:

            call __stack_chk_fail@PLT
.L_448cf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448d00:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,600
.L_448d11:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+584],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            mov DWORD PTR [RSP+8],ESI
            mov QWORD PTR [RSP],RDX
            mov DWORD PTR [RSP+12],ECX
            test RAX,RAX
            je .L_448d47

            cmp QWORD PTR [RAX+32],0
            je .L_448d47

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            jge .L_448d70
.L_448d47:

            mov RAX,QWORD PTR [RSP+584]
            xor RAX,QWORD PTR FS:[40]
            jne .L_448f92

            add RSP,600
.L_448d65:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_448d70:

            lea RBX,QWORD PTR [RSP+64]
            sub RSP,8
            mov R12,R9
            mov EAX,DWORD PTR [RSP+664]
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45fd50-93235]
            mov R14,RDI
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov RDI,RBX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [R14]
            mov ECX,DWORD PTR [RSP+28]
            mov R8,RBX
            mov RDX,QWORD PTR [RSP+16]
            mov ESI,DWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pxor XMM0,XMM0
            mov BYTE PTR [RSP+64],0
            movaps XMMWORD PTR [RSP+48],XMM0
            pop RAX
            pop RDX
            cmp QWORD PTR [RSP+656],0
            je .L_448d47

            lea RAX,QWORD PTR [RSP+32]
            xor R13D,R13D
            mov QWORD PTR [RSP+16],R14
            xor R15D,R15D
            mov EBP,512
            mov R14,R13
            mov QWORD PTR [RSP+24],RAX
            jmp .L_448e15
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448e08:

            cmp R15,4096
            je .L_448f8b
.L_448e15:

            mov RSI,RBP
            mov R13,R15
            lea RDI,QWORD PTR [RBX+R14*1]
            sub RSI,R14
            and R13D,15
            jne .L_448eb4

            test R15,R15
            je .L_448e89

            mov R14,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RIP+.L_449136]
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            mov R9,R14
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RSP+16]
            mov ESI,DWORD PTR [RSP+8]
            mov R8,RBX
            mov ECX,DWORD PTR [RSP+12]
            mov RDX,QWORD PTR [RSP]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pxor XMM0,XMM0
            mov BYTE PTR [R14+16],0
            mov RDI,RBX
            mov ESI,512
            movaps XMMWORD PTR [R14],XMM0
            xor R14D,R14D
.L_448e89:

            lea R8,QWORD PTR [RIP+.L_45fd50-93204]
            add R14,6
            mov R9D,R15D
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R14*1]
            sub RSI,R14
.L_448eb4:

            movzx R9D,BYTE PTR [R12+R15*1]
            lea R8,QWORD PTR [RIP+.L_4490f7]
            mov EDX,1
            xor EAX,EAX
            mov RCX,-1
            add R14,3
            call __snprintf_chk@PLT

            movzx EAX,BYTE PTR [R12+R15*1]
            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R14*1]
            lea EDX,DWORD PTR [RAX-32]
            cmp DL,95
            mov EDX,46
            cmovae EAX,EDX
            add R15,1
            sub RSI,R14
            cmp QWORD PTR [RSP+656],R15
            mov BYTE PTR [RSP+R13*1+32],AL
            jne .L_448e08

            test R15B,15
            mov R13,R14
            mov EBP,512
            mov R14,QWORD PTR [RSP+16]
            je .L_448f4e
.L_448f1e:

            lea RDI,QWORD PTR [RBX+R13*1]
            mov RSI,RBP
            lea RDX,QWORD PTR [RIP+.L_45fd50-93197]
            sub RSI,R13
            xor EAX,EAX
            add R15,1
            call snprintf@PLT

            add R13,3
            test R15B,15
            jne .L_448f1e

            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R13*1]
            sub RSI,R13
.L_448f4e:

            mov R9,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RIP+.L_449136]
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [R14]
            mov R8,RBX
            mov ECX,DWORD PTR [RSP+12]
            mov RDX,QWORD PTR [RSP]
            mov ESI,DWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            jmp .L_448d47
.L_448f8b:

            mov R14,QWORD PTR [RSP+16]
            jmp .L_448f4e
.L_448f92:

            call __stack_chk_fail@PLT
.L_448f97:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448fa0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_448fbc

            cmp QWORD PTR [RAX+32],0
            je .L_448fbc

            test R9,R9
            je .L_448fbc

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            jge .L_448fc0
.L_448fbc:

            ret 
          .byte 0x66
          .byte 0x90
.L_448fc0:

            jmp .L_448760
.L_448fc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448fd0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,552
.L_448fe1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+536],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_44900d

            cmp QWORD PTR [RAX+32],0
            je .L_44900d

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            mov EBP,ESI
            jge .L_449040
.L_44900d:

            mov RAX,QWORD PTR [RSP+536]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4490d3

            add RSP,552
.L_44902b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449040:

            lea R15,QWORD PTR [RSP+16]
            mov R14,R9
            mov QWORD PTR [RSP+8],R8
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45fd50-93193]
            mov RBX,RDI
            mov R12,RDX
            mov R13D,ECX
            mov RDI,R15
            mov ECX,512
            mov EDX,1
            mov ESI,512
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov R9,R14
            mov R8,R15
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,RBX
            call .L_448fa0

            mov R10,QWORD PTR [RSP+8]
            lea R8,QWORD PTR [RIP+.L_45fd50-93187]
            mov RDI,R15
            mov ECX,512
            mov EDX,1
            mov ESI,512
            xor EAX,EAX
            mov R9,R10
            call __snprintf_chk@PLT

            lea R9,QWORD PTR [R14+24]
            mov R8,R15
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,RBX
            call .L_448fa0

            jmp .L_44900d
.L_4490d3:

            call __stack_chk_fail@PLT
.L_4490d8:
          .string "value of \'%s\' (%d bits) is:\n"
# WARNING: found overlapping blocks at address 48eaa
# WARNING: found overlapping blocks at address 48ead
# WARNING: found overlapping blocks at address 48ebe

            or AL,BYTE PTR [RAX]
.L_4490f7:

            and BYTE PTR [RIP+.L_67e630+5561597],AH
.L_4490fd:

            and BYTE PTR [RAX],DH
            xor BYTE PTR [RAX],AL
.L_449101:

            and EAX,539568243
            jb .L_44916d

            je .L_44917f
          .byte 0x72
          .byte 0x6e

            and BYTE PTR FS:[RIP+757604452],AH
            xor BYTE PTR [RAX+37],BH
            xor BYTE PTR [RAX+RDI*2],DH
            sub DWORD PTR [RDX],ECX
            add BYTE PTR [RBP+RSI*2+109],AH
          .byte 0x70
          .byte 0x69
          .byte 0x6e
          .byte 0x67
          .byte 0x20
          .byte 0x27
          .byte 0x25
          .byte 0x73
          .byte 0x27
          .byte 0x20
          .byte 0x28
          .byte 0x25
          .byte 0x75
          .byte 0x20
          .byte 0x62
          .byte 0x79
          .byte 0x74
          .byte 0x65

            jae .L_44915d

            or AL,BYTE PTR [RAX]
.L_449136:

            and BYTE PTR [RAX],AH
            and EAX,620759667
            xor BYTE PTR [RAX+RDI*2],DH
            cmp AH,BYTE PTR [RAX]
.L_449142:

            add BYTE PTR [RAX],AH
            and BYTE PTR [RAX],AH
            add BYTE PTR [RIP+.L_67e630+691327887],AH
            add BYTE PTR [RIP+.L_67e630+691393429],AH
            add BYTE PTR [RSI+46],AH
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44915d:

            nop
            nop
            nop
.L_449160:

            push R14
            push R13
            mov R13D,ESI
            push R12
            push RBP
            mov R12,RDX
.L_44916d:

            push RBX
            mov RBP,RDI
            mov RBX,RCX
            sub RSP,64
.L_449178:
          .byte 0x64
          .byte 0x48
          .byte 0x8b
          .byte 0x4
          .byte 0x25
          .byte 0x28
          .byte 0x0
.L_44917f:

            add BYTE PTR [RAX],AL
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            cmp RCX,32
            mov EAX,ECX
            jbe .L_4491b2

            lea R14,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,R12
            xor ECX,ECX
            mov EBX,32
            mov RDX,R14
            mov R12,R14
            call .L_444510

            mov EAX,32
.L_4491b2:

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2
            mov RDI,RBP
            mov BYTE PTR [RSP+15],AL
            mov BYTE PTR [RSP+14],R13B
            call .L_444340

            mov RDX,RBX
            mov RSI,R12
            mov RDI,RBP
            call .L_444340

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4491fa

            add RSP,64
.L_4491f1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_4491fa:

            call __stack_chk_fail@PLT
.L_4491ff:

            nop
.L_449200:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,184
.L_449211:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            jle .L_4492f8

            mov R12,RDI
            lea RBX,QWORD PTR [RDI+112]
            xor EBP,EBP
            xor R14D,R14D
            lea R15,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            jmp .L_44925f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449250:

            add R14D,1
            add RBX,40
            cmp R14D,DWORD PTR [R12+108]
            jge .L_4492c6
.L_44925f:

            cmp DWORD PTR [RBX+32],1
            mov EAX,1
            mov QWORD PTR [RSP+24],0
            mov RDI,QWORD PTR [RBX+8]
            mov RCX,R15
            mov EDX,128
            mov RSI,R13
            cmove EBP,EAX
            call QWORD PTR [RBX]

            test EAX,EAX
            mov R9D,EAX
            jne .L_4492ca

            mov RCX,QWORD PTR [RSP+24]
            test RCX,RCX
            je .L_449250

            movzx ESI,R14B
            mov RDX,R13
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            add R14D,1
            call .L_449160

            mov RAX,QWORD PTR [RSP+24]
            add QWORD PTR [RBX+16],RAX
            add RBX,40
            cmp R14D,DWORD PTR [R12+108]
            mov R9D,DWORD PTR [RSP+12]
            jl .L_44925f
.L_4492c6:

            test EBP,EBP
            je .L_4492f8
.L_4492ca:

            mov RDX,QWORD PTR [RSP+168]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_449300

            add RSP,184
.L_4492e7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4492f8:

            mov R9D,4294967235
            jmp .L_4492ca
.L_449300:

            call __stack_chk_fail@PLT
.L_449305:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449310:

            mov RDX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+144],0
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RDX
            xor EAX,EAX
            xor ESI,ESI
            and RDI,-8
            sub RCX,RDI
            add ECX,152
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,RDX
            jmp .L_443ea0
.L_44934b:

            nop
            nop
            nop
            nop
            nop
.L_449350:

            lea RAX,QWORD PTR [RDI+152]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449360:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_449360

            ret 
.L_44936e:

            nop
            nop
.L_449370:

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            jg .L_4493a8

            movsxd R9,EAX
            add EAX,1
            lea R9,QWORD PTR [R9+R9*4]
            lea R9,QWORD PTR [RDI+R9*8]
            mov QWORD PTR [R9+112],RSI
            mov QWORD PTR [R9+120],RDX
            mov QWORD PTR [R9+136],RCX
            mov DWORD PTR [R9+144],R8D
            mov DWORD PTR [RDI+108],EAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4493a8:

            mov EAX,4294967234
            ret 
.L_4493ae:

            nop
            nop
.L_4493b0:

            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            jmp .L_449160
.L_4493c0:

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            je .L_4493d0

            jmp .L_449200
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4493d0:

            mov EAX,4294967232
            ret 
.L_4493d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4493e0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_4493ee:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp RDX,32
            ja .L_44947c

            mov R14,RDI
            mov EDI,DWORD PTR [RDI+108]
            mov R13,RSI
            lea RBP,QWORD PTR [R14+168]
            mov R12,RDX
            mov EBX,257
            nop
            nop
            nop
            nop
.L_449420:

            test EDI,EDI
            je .L_4494ae

            mov RDI,R14
            call .L_449200

            test EAX,EAX
            mov R15D,EAX
            jne .L_449488

            mov EDI,DWORD PTR [R14+108]
            test EDI,EDI
            jle .L_4494c0

            lea EDX,DWORD PTR [RDI-1]
            lea RAX,QWORD PTR [R14+128]
            xor ECX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RSI,QWORD PTR [RBP+RDX*8]
            mov EDX,1
            nop
            nop
            nop
.L_449460:

            mov R8,QWORD PTR [RAX+8]
            cmp QWORD PTR [RAX],R8
            cmovb EDX,ECX
            add RAX,40
            cmp RAX,RSI
            jne .L_449460

            test EDX,EDX
            jne .L_4494c0

            sub EBX,1
            jne .L_449420
.L_44947c:

            mov R15D,4294967236
            nop
            nop
            nop
            nop
            nop
            nop
.L_449488:

            mov RBX,QWORD PTR [RSP+40]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_449573

            add RSP,56
.L_4494a3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4494ae:

            mov R15D,4294967232
            jmp .L_449488
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4494c0:

            pxor XMM0,XMM0
            mov RBX,RSP
            mov RSI,RBX
            mov RDI,R14
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_444360

            lea RDI,QWORD PTR [R14+8]
            mov RCX,R14
            xor EAX,EAX
            xor ESI,ESI
            and RDI,-8
            mov QWORD PTR [R14],0
            mov QWORD PTR [R14+100],0
            sub RCX,RDI
            add ECX,108
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,R14
            call .L_443ea0

            mov EDX,32
            mov RSI,RBX
            mov RDI,R14
            call .L_444340

            xor ECX,ECX
            mov RDX,RBX
            mov ESI,32
            mov RDI,RBX
            call .L_444510

            mov EDX,DWORD PTR [R14+108]
            test EDX,EDX
            jle .L_449560

            sub EDX,1
            lea RAX,QWORD PTR [R14+128]
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDX,QWORD PTR [R14+RDX*8+168]
            nop
            nop
            nop
.L_449550:

            mov QWORD PTR [RAX],0
            add RAX,40
            cmp RAX,RDX
            jne .L_449550
.L_449560:

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R13
            call memcpy@PLT

            jmp .L_449488
.L_449573:

            call __stack_chk_fail@PLT
.L_449578:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449580:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,48
.L_44958c:

            sub RCX,QWORD PTR [RDX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp RCX,27
            jbe .L_449640

            mov RBX,RDI
            mov R14,RSI
            mov RBP,RDX
            mov R12,R8
            mov R13,R9
            call .L_443af0

            test EAX,EAX
            jne .L_449638

            mov EDX,4
            mov RSI,R14
            mov RDI,RBX
            call .L_4439f0

            test EAX,EAX
            jne .L_449638

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_4439f0

            test EAX,EAX
            jne .L_449638

            mov RSI,RSP
            mov RDI,RBX
            call .L_443a30

            test EAX,EAX
            jne .L_449638

            mov RDX,QWORD PTR [RBP]
            movdqa XMM0,XMMWORD PTR [RSP]
            movups XMMWORD PTR [RDX],XMM0
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RDX+16],RCX
            mov ECX,DWORD PTR [RSP+24]
            mov DWORD PTR [RDX+24],ECX
            add QWORD PTR [RBP],28
.L_449617:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            jne .L_449647

            add RSP,48
.L_44962b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449638:

            mov EAX,4294939648
            jmp .L_449617

            nop
.L_449640:

            mov EAX,4294940160
            jmp .L_449617
.L_449647:

            call __stack_chk_fail@PLT
.L_44964c:

            nop
            nop
            nop
            nop
.L_449650:

            push RBX
            mov RBX,RDI
            call .L_443690

            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+32],60
            pop RBX
            ret 
.L_44966b:

            nop
            nop
            nop
            nop
            nop
.L_449670:

            mov QWORD PTR [RDI+32],RSI
            ret 
.L_449675:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449680:

            push RBX
            mov RBX,RDI
            call .L_4436a0

            lea RAX,QWORD PTR [RBX+40]
            nop
            nop
            nop
.L_449690:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_449690

            pop RBX
            ret 
.L_44969e:

            nop
            nop
.L_4496a0:

            push RBP
            push RBX
            mov RAX,RSI
            mov RBP,RDI
            mov RDI,RDX
            mov EDX,32
            sub RSP,56
            mov RBX,RSP
            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RCX
            xor ECX,ECX
            mov RSI,RBX
            call RAX

            test EAX,EAX
            je .L_4496f0
.L_4496d0:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44973e

            add RSP,56
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4496f0:

            mov EDI,5
            call .L_443660

            mov EDX,1
            mov RSI,RAX
            mov RDI,RBP
            call .L_443760

            test EAX,EAX
            jne .L_4496d0

            mov EDX,32
            mov RSI,RBX
            mov RDI,RBP
            call .L_4438a0

            test EAX,EAX
            jne .L_4496d0

            lea RDX,QWORD PTR [RBX+32]
            mov RSI,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449730:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RDX
            jne .L_449730

            jmp .L_4496d0
.L_44973e:

            call __stack_chk_fail@PLT
.L_449743:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449750:

            test RDI,RDI
            mov RAX,RSI
            je .L_4497d0

            test RCX,RCX
            je .L_4497d0

            mov R10,QWORD PTR [RSI]
            mov RSI,RDX
            sub RSI,R10
            cmp RSI,31
            jbe .L_4497c0

            mov RSI,QWORD PTR [RDI+24]
            lea R9,QWORD PTR [RSI+1]
            mov QWORD PTR [RDI+24],R9
            mov R9,RSI
            shr R9,24
            mov BYTE PTR [R10],R9B
            mov R9,QWORD PTR [RAX]
            mov R10,RSI
            shr R10,16
            mov BYTE PTR [R9+1],R10B
            mov R9,QWORD PTR [RAX]
            mov R10,RSI
            shr R10,8
            mov BYTE PTR [R9+2],R10B
            mov R9,QWORD PTR [RAX]
            mov BYTE PTR [R9+3],SIL
            mov RSI,QWORD PTR [RAX]
            lea R9,QWORD PTR [RSI+4]
            mov QWORD PTR [RAX],R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RAX
            jmp .L_449580
.L_4497c0:

            mov EAX,4294940160
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4497d0:

            mov EAX,4294938368
            ret 
.L_4497d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4497e0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,64
.L_4497eb:

            lea RBX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RDI
            xor EDI,EDI
            test R12,R12
            mov QWORD PTR [RSP+8],RBX
            je .L_4498a6

            test RCX,RCX
            mov RAX,RCX
            je .L_4498a6

            cmp RDX,32
            jne .L_44989f

            lea RCX,QWORD PTR [RBX+28]
            lea RDX,QWORD PTR [RSP+8]
            mov R9,R8
            mov RDI,R12
            mov R8,RAX
            mov RBP,RSI
            call .L_449580

            test EAX,EAX
            jne .L_44989f

            xor ESI,ESI
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
.L_449848:

            movzx ECX,BYTE PTR [RBP+RDX*1+4]
            xor CL,BYTE PTR [RBX+RDX*1]
            add RDX,1
            or ESI,ECX
            cmp RDX,28
            jne .L_449848

            test SIL,SIL
            jne .L_44989f

            mov RCX,QWORD PTR [R12+32]
            mov EDX,DWORD PTR [RBP]
            test RCX,RCX
            bswap EDX
            jne .L_449890
.L_449870:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_4498ad

            add RSP,64
.L_449884:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449890:

            mov RSI,QWORD PTR [R12+24]
            mov EDX,EDX
            sub RSI,RDX
            cmp RCX,RSI
            jae .L_449870
.L_44989f:

            mov EAX,4294967295
            jmp .L_449870
.L_4498a6:

            mov EAX,4294938368
            jmp .L_449870
.L_4498ad:

            call __stack_chk_fail@PLT
.L_4498b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4498c0:

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            je .L_449927

            push R12
            push RBP
            mov RBP,RDX
            push RBX
.L_4498d3:

            mov R12,RSI
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+360]
            call QWORD PTR [RIP+.L_677120]

            mov RSI,RBP
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+360],RAX
            je .L_449920

            mov RDX,RBP
            mov RSI,R12
            mov RDI,RAX
            call memcpy@PLT

            mov QWORD PTR [RBX+368],RBP
            xor EAX,EAX
.L_449917:

            pop RBX
.L_449918:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449920:

            mov EAX,4294934784
            jmp .L_449917
.L_449927:

            mov EAX,4294938368
            ret 
.L_44992d:

            nop
            nop
            nop
.L_449930:

            mov QWORD PTR [RDI+88],RSI
            mov QWORD PTR [RDI+96],RDX
            mov QWORD PTR [RDI+104],RCX
            ret 
.L_44993d:

            nop
            nop
            nop
.L_449940:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_44994e:

            mov R9D,DWORD PTR [RDI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            cmp R9D,16
            je .L_44a470

            cmp QWORD PTR [RDI+88],0
            mov R14,RDI
            je .L_44a470

            lea R8,QWORD PTR [RIP+.L_44b9f2]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,4016
            mov ESI,2
            call .L_448ae0

            mov RDI,R14
            call .L_44d7c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_449e20

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_4499c6

            mov RAX,QWORD PTR [R14+88]
            cmp BYTE PTR [RAX+756],1
            je .L_449e48
.L_4499c6:

            mov EBP,DWORD PTR [R14+8]
            cmp EBP,18
            ja .L_44a440

            lea RCX,QWORD PTR [RIP+.L_44c4dc]
            mov EDX,EBP
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4499e8:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44bc73]
            xor EAX,EAX
            mov ECX,2381
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            movzx EDX,BYTE PTR [RAX+152]
            test DL,2
            je .L_449a2a

            mov RCX,QWORD PTR [R14+88]
            cmp BYTE PTR [RCX+736],0
            jne .L_44a800
.L_449a2a:

            cmp QWORD PTR [RAX+48],0
            je .L_44b79e

            mov RBP,QWORD PTR [R14+320]
            mov ESI,DWORD PTR [R14+16]
            shr DL,1
            mov EDI,DWORD PTR [R14+12]
            and EDX,1
            lea RCX,QWORD PTR [RBP+4]
            lea R12,QWORD PTR [RBP+6]
            call .L_452500

            movzx EAX,BYTE PTR [RBP+5]
            sub RSP,8
.L_449a5e:

            lea R8,QWORD PTR [RIP+.L_44c258]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2415
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBP+4]
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov EDX,4
            mov RSI,R12
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            pop R13
            pop R15
            jne .L_449e20

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [RBP+10]
            mov EDX,28
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_449e20

            mov RAX,QWORD PTR [R14+88]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_44bd4c]
            movdqu XMM0,XMMWORD PTR [RBP+6]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9,R12
            mov ECX,2439
            mov ESI,3
            movups XMMWORD PTR [RAX+984],XMM0
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RBP+22]
            movups XMMWORD PTR [RAX+1000],XMM0
            push 32
            call .L_448d00

            mov RAX,QWORD PTR [R14+88]
            pop R10
            pop R11
.L_449b10:

            mov EBX,DWORD PTR [RAX+1048]
            test EBX,EBX
            jne .L_44a788

            mov RSI,QWORD PTR [R14+80]
            mov RAX,QWORD PTR [R14]
            cmp QWORD PTR [RSI+8],0
            je .L_449b61

            mov RDX,QWORD PTR [RAX+64]
            test RDX,RDX
            je .L_449b61

            mov RDI,QWORD PTR [RAX+80]
            call RDX

            test EAX,EAX
            je .L_44a75a

            mov RDX,QWORD PTR [R14+88]
            mov RSI,QWORD PTR [R14+80]
            mov R9D,DWORD PTR [RDX+1048]
            mov RAX,RSI
            test R9D,R9D
            jne .L_44a78c

            mov RAX,QWORD PTR [R14]
.L_449b61:

            add DWORD PTR [R14+8],1
            add RSI,16
            mov QWORD PTR [RSI-8],32
            mov RDI,QWORD PTR [RAX+56]
            mov EDX,32
            mov R13D,32
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_449e20
.L_449b8e:

            mov RAX,QWORD PTR [R14+80]
            lea R12,QWORD PTR [RBP+39]
            mov RDI,R12
            mov RAX,QWORD PTR [RAX+8]
            mov BYTE PTR [RBP+38],AL
            mov RAX,QWORD PTR [R14+80]
            mov RDX,QWORD PTR [RAX+8]
            lea RSI,QWORD PTR [RAX+16]
            call memcpy@PLT

            mov RAX,QWORD PTR [R14+80]
            lea R8,QWORD PTR [RIP+.L_44c2b0]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9,R13
            mov ECX,2512
            mov ESI,3
            mov RDI,R14
            mov RBX,QWORD PTR [RAX+8]
            xor EAX,EAX
            call .L_448ae0

            sub RSP,8
.L_449be2:

            lea R8,QWORD PTR [RIP+.L_44bd7f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            push R13
            mov R9,R12
            mov ECX,2513
            mov ESI,3
            mov RDI,R14
            add RBX,R12
            call .L_448d00

            mov RAX,QWORD PTR [R14+88]
            lea R9,QWORD PTR [RIP+.L_44b9ef]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            pop RSI
            pop RDI
.L_449c1e:

            mov R8D,DWORD PTR [RAX+1048]
            lea RAX,QWORD PTR [RIP+.L_44b9ed]
            mov ECX,2515
            mov ESI,3
            mov RDI,R14
            lea R12,QWORD PTR [RBX+3]
            test R8D,R8D
            lea R8,QWORD PTR [RIP+.L_44bd98]
            cmovne R9,RAX
            xor EAX,EAX
            xor R15D,R15D
            call .L_448ae0

            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX]
            mov BYTE PTR [RBX],AH
            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX]
            mov BYTE PTR [RBX+1],AL
            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX+4]
            mov BYTE PTR [RBX+2],AL
            mov RAX,QWORD PTR [R14+80]
            mov EDI,DWORD PTR [RAX]
            call .L_45c7e0

            lea R8,QWORD PTR [RIP+.L_44c2d8]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9,RAX
            mov ECX,2522
            xor EAX,EAX
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+80]
            lea R8,QWORD PTR [RIP+.L_44c300]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2524
            mov ESI,3
            mov RDI,R14
            mov R9D,DWORD PTR [RAX+4]
            xor EAX,EAX
            call .L_448ae0

            cmp DWORD PTR [R14+376],1
            lea RAX,QWORD PTR [RBX+5]
            mov R11D,2
            mov QWORD PTR [RSP+8],RAX
            je .L_44b4a8
.L_449ce7:

            mov RAX,QWORD PTR [R14+80]
            lea R13,QWORD PTR [R12+R11*1]
            cmp BYTE PTR [RAX+100],0
            je .L_449d34

            lea R8,QWORD PTR [RIP+.L_44c358]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,2184
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov DWORD PTR [R13],16777472
            mov RAX,QWORD PTR [R14+80]
            movzx EAX,BYTE PTR [RAX+100]
            mov BYTE PTR [R13+4],AL
            lea R13,QWORD PTR [R12+R15*1+7]
            add R15,5
.L_449d34:

            mov RAX,QWORD PTR [R14+88]
            test BYTE PTR [RAX+1060],1
            je .L_449d7e

            lea R8,QWORD PTR [RIP+.L_44c388]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2214
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov ECX,1
            mov DWORD PTR [R13],33557248
            mov WORD PTR [R13+4],CX
            lea R13,QWORD PTR [R12+R15*1+8]
            add R15,6
.L_449d7e:

            mov RAX,QWORD PTR [R14+120]
            mov RAX,QWORD PTR [RAX]
            cmp DWORD PTR [RAX+24],11
            je .L_44b4e7
.L_449d8f:

            lea R8,QWORD PTR [RIP+.L_44c400]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov R9,R15
            mov ECX,2579
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            test R15,R15
            je .L_449dcf

            mov R12,QWORD PTR [RSP+8]
            mov RAX,R15
            mov BYTE PTR [RBX+4],R15B
            shr RAX,8
            mov BYTE PTR [RBX+3],AL
            add R12,R15
.L_449dcf:

            mov RAX,QWORD PTR [R14+320]
            sub R12,RBP
            mov DWORD PTR [R14+328],22
            mov QWORD PTR [R14+336],R12
            mov RDI,R14
            mov BYTE PTR [RAX],2
            call .L_44db50

            lea R8,QWORD PTR [RIP+.L_44bc89]
            mov EBX,EAX
            mov ECX,2598
            nop
            nop
            nop
            nop
.L_449e08:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            nop
            nop
.L_449e20:

            mov RSI,QWORD PTR [RSP+72]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_44b682

            add RSP,88
.L_449e3a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_449e48:

            mov RDI,R14
            call .L_44e4a0

            test EAX,EAX
            je .L_4499c6

            mov EBX,EAX
            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449e60:

            mov EBX,4294940032
            jmp .L_449e20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449e70:

            mov DWORD PTR [R14+8],1
            mov EBX,EBP
            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449e80:

            lea R8,QWORD PTR [RIP+.L_44ba03]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1190
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            lea RAX,QWORD PTR [RSP+60]
            lea R13,QWORD PTR [RIP+.L_44ba31]
            lea R12,QWORD PTR [RIP+.L_44bf18]
            lea R15,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_44a045
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449ec8:

            mov RAX,QWORD PTR [R14]
            mov RBX,QWORD PTR [R14+168]
            mov R8,R13
            mov ECX,1222
            mov RDX,R12
            mov ESI,4
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            mov R9,RBX
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
.L_449efb:

            and RAX,-8
            add RAX,13
            push RAX
            call .L_448d00

            movzx R9D,BYTE PTR [RBX]
            lea R8,QWORD PTR [RIP+.L_44bf38]
            mov RDI,R14
            xor EAX,EAX
            mov ECX,1234
            mov RDX,R12
            mov ESI,3
            call .L_448ae0

            cmp BYTE PTR [RBX],22
            pop RDI
            pop R8
.L_449f31:

            jne .L_44a9c6

            mov RAX,QWORD PTR [R14+176]
            lea R8,QWORD PTR [RIP+.L_44bf60]
            mov ECX,1243
            mov RDX,R12
            mov ESI,3
            mov RDI,R14
            movzx R9D,WORD PTR [RAX]
            xor EAX,EAX
            rol R9W,8
            movzx R9D,R9W
            call .L_448ae0

            movzx EAX,BYTE PTR [RBX+2]
            sub RSP,8
.L_449f71:

            lea R8,QWORD PTR [RIP+.L_44bf88]
            mov ECX,1246
            mov RDX,R12
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBX+1]
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [RSP+24]
            lea RCX,QWORD PTR [RBX+1]
            mov RSI,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_452530

            pop RCX
            pop RSI
.L_449fb7:

            cmp DWORD PTR [RSP+60],2
            jle .L_44a720

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_44a525

            mov RAX,QWORD PTR [R14+160]
            cmp BYTE PTR [RAX],0
            jne .L_44a74c

            cmp BYTE PTR [RAX+1],0
            jne .L_44a74c

            mov ECX,DWORD PTR [RAX+2]
            mov RDX,QWORD PTR [R14+288]
            mov RDI,R14
            mov DWORD PTR [RDX+2],ECX
            movzx EAX,WORD PTR [RAX+6]
            mov WORD PTR [RDX+6],AX
            call .L_44f510

            test EAX,EAX
            je .L_44a51d

            lea R8,QWORD PTR [RIP+.L_44ba58]
            mov ECX,1281
            mov RDX,R12
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov QWORD PTR [R14+240],0
            mov QWORD PTR [R14+224],0
.L_44a045:

            mov ESI,5
            mov RDI,R14
            call .L_44e690

            test EAX,EAX
            mov EBX,EAX
            je .L_449ec8

            lea R8,QWORD PTR [RIP+.L_44ba19]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,1207
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44a088:

            mov RDI,R14
            call .L_450780

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a0a0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_44bdc5]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2845
            mov ESI,2
            mov RDI,R14
            mov RBX,QWORD PTR [R14+320]
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov EAX,4
            cmp DWORD PTR [RBP+24],11
            je .L_44a47a
.L_44a0df:

            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov RDI,R14
            mov DWORD PTR [R14+328],22
            mov BYTE PTR [RAX],12
            add DWORD PTR [R14+8],1
            call .L_44db50

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_44bde2]
            mov ECX,3245
            je .L_449e08

            lea R8,QWORD PTR [RIP+.L_44bd05]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3241
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a150:

            mov RAX,QWORD PTR [R14+120]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44bdff]
            mov ECX,2614
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov EAX,DWORD PTR [RBP+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_44a18d

            cmp EAX,11
            jne .L_44b7db
.L_44a18d:

            lea R8,QWORD PTR [RIP+.L_44c450]
            mov ECX,2622
.L_44a199:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            add DWORD PTR [R14+8],1
            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a1c0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_44be52]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,3492
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov RDI,R14
            call .L_450640

            test EAX,EAX
            mov EBX,EAX
            jne .L_44a4f5

            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [R14+192]
            mov RDX,QWORD PTR [R14+264]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp DWORD PTR [R14+208],22
            lea RSI,QWORD PTR [RCX+RAX*1]
            jne .L_44b671

            cmp BYTE PTR [RCX],16
            jne .L_44b5c4

            cmp DWORD PTR [RBP+24],11
            jne .L_44b598

            mov RDI,QWORD PTR [R14+88]
            sub RDX,RAX
            call .L_45b9f0

            test EAX,EAX
            jne .L_44b644

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,32
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            lea RCX,QWORD PTR [RDI+944]
            lea RSI,QWORD PTR [RDI+1016]
            call .L_45bd90

            test EAX,EAX
            mov EBX,EAX
            jne .L_44a4cd

            mov RDI,R14
            call .L_44d000

            test EAX,EAX
            mov EBX,EAX
            jne .L_44a7d8

            add DWORD PTR [R14+8],1
            lea R8,QWORD PTR [RIP+.L_44bea5]
            mov ECX,3729
            jmp .L_449e08
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44a2b8:

            mov RAX,QWORD PTR [R14+120]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44bec2]
            mov ECX,3745
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov EAX,DWORD PTR [RBP+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_44a2f5

            cmp EAX,11
            jne .L_44b76b
.L_44a2f5:

            lea R8,QWORD PTR [RIP+.L_44c4b8]
            mov ECX,3753
            jmp .L_44a199
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a310:

            mov RDI,R14
            call .L_4509a0

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x90
.L_44a320:

            mov RDI,R14
            call .L_450fd0

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x90
.L_44a330:

            mov RDI,R14
            call .L_4508e0

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x90
.L_44a340:

            mov RDI,R14
            call .L_450d80

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x90
.L_44a350:

            lea R8,QWORD PTR [RIP+.L_44bede]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,4121
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov DWORD PTR [R14+8],15
            jmp .L_449e20
          .byte 0x90
.L_44a380:

            mov RDI,R14
            call .L_450c40

            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44a390:

            lea R8,QWORD PTR [RIP+.L_44be1c]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,3254
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+320]
            mov QWORD PTR [R14+336],4
            mov DWORD PTR [R14+328],22
            mov BYTE PTR [RAX],14
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_44a4c0
.L_44a3e7:

            mov RDI,R14
            call .L_44db50

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_44be37]
            mov ECX,3273
            je .L_449e08

            lea R8,QWORD PTR [RIP+.L_44bd05]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3269
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44a430:

            mov RDI,R14
            call .L_450830

            mov EBX,EAX
            jmp .L_449e20
          .byte 0x90
.L_44a440:

            lea R8,QWORD PTR [RIP+.L_44beee]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EBP
            mov ECX,4130
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294938368
            call .L_448ae0

            jmp .L_449e20
          .byte 0x90
.L_44a470:

            mov EBX,4294938368
            jmp .L_449e20
.L_44a47a:

            lea RSI,QWORD PTR [RBX+4]
            mov RAX,QWORD PTR [R14]
            mov RBX,QWORD PTR [R14+320]
            mov RDI,QWORD PTR [R14+88]
            lea RCX,QWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RBX+768]
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            sub RDX,RSI
            call .L_45bb40

            test EAX,EAX
            mov EBX,EAX
            jne .L_44a9d7

            mov RAX,QWORD PTR [RSP+64]
            add RAX,4
            jmp .L_44a0df
.L_44a4c0:

            mov RDI,R14
            call .L_44dac0

            jmp .L_44a3e7
.L_44a4cd:

            lea R8,QWORD PTR [RIP+.L_44be87]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3710
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44a4f5:

            lea R8,QWORD PTR [RIP+.L_44be6f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3496
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44a51d:

            mov RDI,R14
            call .L_44f590
.L_44a525:

            mov RAX,QWORD PTR [R14+176]
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            cmp AX,768
            movzx R12D,AX
            ja .L_44b8cb

            mov RAX,QWORD PTR [R14]
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RSI,QWORD PTR [R12+RAX*1+13]
            call .L_44e690

            test EAX,EAX
            mov EBX,EAX
            jne .L_44b1aa

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_44a9ff

            lea RAX,QWORD PTR [R12+13]
            mov QWORD PTR [R14+240],RAX
.L_44a58a:

            mov R15,QWORD PTR [R14+192]
            sub RSP,8
.L_44a595:

            lea R8,QWORD PTR [RIP+.L_44ba74]
            push R12
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1328
            mov ESI,4
            mov RDI,R14
            mov R9,R15
            call .L_448d00

            mov RAX,QWORD PTR [R14+88]
            mov RDX,R12
            mov RSI,R15
            mov RDI,R14
            call QWORD PTR [RAX+912]

            mov RAX,QWORD PTR [R14]
            pop R13
            pop RDX
.L_44a5d3:

            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp R12,RAX
            jb .L_44b8ba

            movzx R9D,BYTE PTR [R15]
            lea R8,QWORD PTR [RIP+.L_44bfb8]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1346
            xor EAX,EAX
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            cmp BYTE PTR [R15],1
            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1350
            jne .L_44a72c

            movzx EAX,BYTE PTR [R15+1]
            movzx R9D,BYTE PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_44bfe0]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1355
            mov ESI,3
            mov RDI,R14
            shl R9D,8
            shl EAX,16
            or EAX,R9D
            movzx R9D,BYTE PTR [R15+3]
            or R9D,EAX
            xor EAX,EAX
            call .L_448ae0

            cmp BYTE PTR [R15+1],0
            jne .L_44b77c

            movzx EAX,WORD PTR [R15+2]
            mov RDX,QWORD PTR [R14]
            rol AX,8
            test BYTE PTR [RDX+152],2
            movzx EAX,AX
            je .L_44aa0f

            add RAX,12
            cmp R12,RAX
            jne .L_44b77c

            mov RAX,QWORD PTR [R14+192]
            mov RCX,QWORD PTR [R14+88]
            movzx EDX,WORD PTR [RAX+4]
            rol DX,8
            movzx EDX,DX
            mov DWORD PTR [RCX+720],EDX
            add EDX,1
            mov DWORD PTR [RCX+724],EDX
            cmp BYTE PTR [RAX+6],0
            jne .L_44a6ea

            cmp BYTE PTR [RAX+7],0
            jne .L_44a6ea

            cmp BYTE PTR [RAX+8],0
            jne .L_44a6ea

            movzx ESI,WORD PTR [RAX+9]
            lea RCX,QWORD PTR [RAX+1]
            cmp WORD PTR [RAX+1],SI
            je .L_44b558
.L_44a6ea:

            lea R8,QWORD PTR [RIP+.L_44c008]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1405
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294938496
            jmp .L_449e20
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a720:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1256
.L_44a72c:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_448ae0

            jmp .L_449e20
.L_44a74c:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1272
            jmp .L_44a72c
.L_44a75a:

            lea R8,QWORD PTR [RIP+.L_44c280]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2454
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+88]
            mov DWORD PTR [RAX+1048],1
.L_44a788:

            mov RAX,QWORD PTR [R14+80]
.L_44a78c:

            mov R13,QWORD PTR [RAX+8]
            mov RDI,R14
            mov DWORD PTR [R14+8],12
            call .L_44d000

            test EAX,EAX
            mov EBX,EAX
            je .L_449b8e

            lea R8,QWORD PTR [RIP+.L_44bd67]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EBX
            mov ECX,2495
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44a7d8:

            lea R8,QWORD PTR [RIP+.L_44bd67]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3723
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44a800:

            lea R8,QWORD PTR [RIP+.L_44c230]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,2387
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_44bc89]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,2388
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+320]
            lea R8,QWORD PTR [RIP+.L_44bc9f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2316
            mov ESI,2
            mov RDI,R14
            add RAX,4
            mov QWORD PTR [RSP+64],RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [RSP+64]
            mov ESI,DWORD PTR [R14+16]
            mov EDI,DWORD PTR [R14+12]
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_452500

            sub RSP,8
.L_44a89b:

            lea R8,QWORD PTR [RIP+.L_44bcbd]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            push 2
            mov R9,QWORD PTR [RSP+80]
            mov ECX,2329
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RBP,QWORD PTR [RSP+80]
            mov RDI,QWORD PTR [R14]
            lea RAX,QWORD PTR [RBP+2]
            mov QWORD PTR [RSP+80],RAX
            mov RAX,QWORD PTR [RDI+88]
            pop RCX
            pop RSI
.L_44a8d9:

            test RAX,RAX
            je .L_44b963

            mov RSI,QWORD PTR [R14+280]
            lea R12,QWORD PTR [RBP+3]
            mov RCX,QWORD PTR [R14+360]
            mov R8,QWORD PTR [R14+368]
            mov QWORD PTR [RSP+64],R12
            mov RDI,QWORD PTR [RDI+104]
            lea RDX,QWORD PTR [RSI+813]
            lea RSI,QWORD PTR [RSP+64]
            call RAX

            test EAX,EAX
            mov EBX,EAX
            jne .L_44b1e3

            mov RAX,QWORD PTR [RSP+64]
            sub RSP,8
.L_44a925:

            lea R8,QWORD PTR [RIP+.L_44bcf9]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2352
            mov R9,R12
            mov ESI,3
            mov RDI,R14
            sub RAX,R12
            mov BYTE PTR [RBP+2],AL
            movzx EAX,AL
            push RAX
.L_44a94d:

            call .L_448d00

            mov RAX,QWORD PTR [RSP+80]
            mov RDX,QWORD PTR [R14+320]
            mov RDI,R14
            mov DWORD PTR [R14+328],22
            sub RAX,RDX
            mov QWORD PTR [R14+336],RAX
            mov BYTE PTR [RDX],3
            mov DWORD PTR [R14+8],18
            call .L_44db50

            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_44bd1e]
            mov ECX,2366
            test EBX,EBX
            pop RAX
.L_44a997:

            pop RDX
.L_44a998:

            je .L_449e08

            lea R8,QWORD PTR [RIP+.L_44bd05]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EBX
            mov ECX,2362
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44a9c6:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1238
            jmp .L_44a72c
.L_44a9d7:

            lea R8,QWORD PTR [RIP+.L_44c430]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,2892
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44a9ff:

            mov QWORD PTR [R14+224],0
            jmp .L_44a58a
.L_44aa0f:

            add RAX,4
            cmp R12,RAX
            jne .L_44b77c

            mov EAX,4
.L_44aa21:

            mov RBX,R12
            add R15,RAX
            sub RBX,RAX
            cmp RBX,37
            jbe .L_44b860

            sub RSP,8
.L_44aa38:

            lea R8,QWORD PTR [RIP+.L_44ba84]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            push 2
.L_44aa48:

            mov R9,R15
            mov ECX,1444
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R14+16]
            lea RDI,QWORD PTR [R14+12]
            mov RCX,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_452530

            mov RAX,QWORD PTR [R14+88]
            mov R9D,DWORD PTR [R14+12]
            mov EDX,DWORD PTR [R14+16]
            mov DWORD PTR [RAX+1052],R9D
            mov DWORD PTR [RAX+1056],EDX
            mov RAX,QWORD PTR [R14]
            pop R11
.L_44aa9a:

            pop R12
.L_44aa9c:

            movzx ESI,BYTE PTR [RAX+150]
            movzx ECX,BYTE PTR [RAX+151]
            cmp R9D,ESI
            jl .L_44b871

            cmp EDX,ECX
            jl .L_44b871

            movzx ECX,BYTE PTR [RAX+148]
            movzx EAX,BYTE PTR [RAX+149]
            cmp R9D,ECX
            jle .L_44b1d2

            mov DWORD PTR [R14+12],ECX
            mov DWORD PTR [R14+16],EAX
.L_44aada:

            sub RSP,8
.L_44aade:

            lea R12,QWORD PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_44ba9a]
            push 32
.L_44aaeb:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1475
            mov R9,R12
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RAX,QWORD PTR [R14+88]
            movdqu XMM0,XMMWORD PTR [R15+2]
            movups XMMWORD PTR [RAX+952],XMM0
            movdqu XMM0,XMMWORD PTR [R15+18]
            movups XMMWORD PTR [RAX+968],XMM0
            movzx R12D,BYTE PTR [R15+34]
            pop R9
.L_44ab2c:

            cmp R12,32
            pop R10
            ja .L_44b7ca

            lea R13,QWORD PTR [R12+36]
            cmp RBX,R13
            jb .L_44b7ca

            sub RSP,8
            lea R10,QWORD PTR [R15+35]
            lea R8,QWORD PTR [RIP+.L_44bab5]
            push R12
.L_44ab57:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1493
            mov R9,R10
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RSP+24],R10
            call .L_448d00

            mov RAX,QWORD PTR [R14+80]
            pxor XMM0,XMM0
            mov R10,QWORD PTR [RSP+24]
            mov QWORD PTR [RAX+8],R12
            movups XMMWORD PTR [RAX+16],XMM0
            mov RSI,R10
            movups XMMWORD PTR [RAX+32],XMM0
            mov RAX,QWORD PTR [R14+80]
            mov RDX,QWORD PTR [RAX+8]
            lea RDI,QWORD PTR [RAX+16]
            call memcpy@PLT

            mov RDX,QWORD PTR [R14]
            lea RAX,QWORD PTR [R12+35]
            pop RDI
.L_44abae:

            lea RCX,QWORD PTR [R15+RAX*1]
            test BYTE PTR [RDX+152],2
            pop R8
            je .L_44ac77

            movzx R10D,BYTE PTR [RCX]
            lea R12,QWORD PTR [R10+RAX*1]
            lea RAX,QWORD PTR [R12+3]
            cmp RBX,RAX
            jb .L_44b98d

            sub RSP,8
            add R13,R15
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            push R10
            lea R8,QWORD PTR [RIP+.L_44bace]
            mov ECX,1519
            mov ESI,3
            mov R9,R13
            mov RDI,R14
            mov QWORD PTR [RSP+24],R10
            call .L_448d00

            mov RDX,QWORD PTR [R14]
            pop RCX
            pop RSI
.L_44ac0d:

            mov RAX,QWORD PTR [RDX+96]
            mov R10,QWORD PTR [RSP+8]
            test RAX,RAX
            je .L_44b8dc

            mov RDI,QWORD PTR [RDX+104]
            mov RCX,QWORD PTR [R14+360]
            mov RDX,R10
            mov R8,QWORD PTR [R14+368]
            mov RSI,R13
            call RAX

            test EAX,EAX
            je .L_44b476

            lea R8,QWORD PTR [RIP+.L_44bae3]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1532
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],1
.L_44ac6e:

            lea RAX,QWORD PTR [R12+1]
            lea RCX,QWORD PTR [R15+RAX*1]
.L_44ac77:

            movzx ECX,BYTE PTR [RCX]
            movzx EDX,BYTE PTR [R15+RAX*1+1]
            shl ECX,8
            or EDX,ECX
            movsxd RSI,EDX
            cmp EDX,1
            mov QWORD PTR [RSP+32],RSI
            jle .L_44b687

            lea R12,QWORD PTR [RAX+RSI*1]
            lea R13,QWORD PTR [R12+3]
            cmp RBX,R13
            jb .L_44b687

            and EDX,1
            jne .L_44b687

            lea RAX,QWORD PTR [R15+RAX*1+2]
            sub RSP,8
.L_44acba:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44bb35]
            mov ECX,1578
            mov ESI,3
            mov QWORD PTR [RSP+48],RAX
            push QWORD PTR [RSP+40]
            mov R9,RAX
            mov RDI,R14
            call .L_448d00

            movzx EDX,BYTE PTR [R15+R12*1+2]
            lea RAX,QWORD PTR [R12+2]
            pop R11
            pop R12
            lea RCX,QWORD PTR [RDX-1]
            cmp RCX,15
            ja .L_44b78d

            lea R12,QWORD PTR [RAX+RDX*1]
            lea RAX,QWORD PTR [R12+1]
            cmp RBX,RAX
            jb .L_44b78d

            mov QWORD PTR [RSP+8],RAX
            sub RSP,8
            lea R9,QWORD PTR [R15+R13*1]
            push RDX
            lea R8,QWORD PTR [RIP+.L_44bb53]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1598
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RDX,QWORD PTR [R14+80]
            mov DWORD PTR [RDX+4],0
            lea RDX,QWORD PTR [R12+3]
            pop R9
            pop R10
.L_44ad57:

            mov RAX,QWORD PTR [RSP+8]
            cmp RBX,RAX
            jbe .L_44b245

            cmp RBX,RDX
            jb .L_44b9dc

            movzx R13D,BYTE PTR [R15+R12*1+1]
            movzx EAX,BYTE PTR [R15+R12*1+2]
            shl R13D,8
            or R13D,EAX
            movsxd R13,R13D
            lea RAX,QWORD PTR [R13-1]
            cmp RAX,2
            jbe .L_44b811

            lea RAX,QWORD PTR [R13+RDX*1]
            cmp RBX,RAX
            jne .L_44b811

            sub RSP,8
.L_44ada4:

            add R15,RDX
            lea R8,QWORD PTR [RIP+.L_44bb6d]
            push R13
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov RDI,R14
            mov R9,R15
            mov ECX,1653
            mov ESI,3
            call .L_448d00

            pop RDI
            pop R8
.L_44adcf:

            nop
.L_44add0:

            test R13,R13
            je .L_44b271

            movzx R11D,WORD PTR [R15+2]
            movzx R9D,WORD PTR [R15]
            rol R11W,8
            rol R9W,8
            movzx R11D,R11W
            movzx R9D,R9W
            lea R12D,DWORD PTR [R11+4]
            cmp R12,R13
            ja .L_44b465

            cmp R9D,11
            je .L_44aff3

            jg .L_44af88

            cmp R9D,1
            je .L_44b0a5

            cmp R9D,10
            jne .L_44b07e

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44c098]
            xor EAX,EAX
            mov ECX,1711
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_448ae0

            movzx EAX,WORD PTR [R15+4]
            movsxd R11,DWORD PTR [RSP+8]
            rol AX,8
            movzx EBX,AX
            lea RDX,QWORD PTR [RBX+2]
            cmp R11,RDX
            jne .L_44b749

            test AL,1
            jne .L_44b749

            mov RAX,QWORD PTR [R14+88]
            cmp QWORD PTR [RAX+712],0
            jne .L_44b75a

            mov R8,RBX
            mov EAX,12
            mov ESI,8
            shr R8,1
            add R8,1
            cmp R8,12
            mov QWORD PTR [RSP+8],R8
            cmovbe RAX,R8
            mov QWORD PTR [RSP+24],RAX
            mov RDI,RAX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov RCX,RAX
            mov R8,QWORD PTR [RSP+8]
            je .L_44b947

            mov RAX,QWORD PTR [R14+88]
            test RBX,RBX
            lea RDX,QWORD PTR [R15+6]
            mov QWORD PTR [RAX+712],RCX
            je .L_44af30

            cmp R8,1
            ja .L_44aee8

            jmp .L_44af30
.L_44aee0:

            cmp QWORD PTR [RSP+24],1
            jbe .L_44af30
.L_44aee8:

            movzx EDI,BYTE PTR [RDX]
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+8],RDX
            mov EAX,EDI
            movzx EDI,BYTE PTR [RDX+1]
            shl EAX,8
            or EDI,EAX
            movzx EDI,DI
            call .L_454780

            test RAX,RAX
            mov RDX,QWORD PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+16]
            je .L_44af24

            sub QWORD PTR [RSP+24],1
            mov QWORD PTR [RCX],RAX
            add RCX,8
.L_44af24:

            add RDX,2
            sub RBX,2
            jne .L_44aee0

            nop
            nop
.L_44af30:

            sub R13,R12
            add R15,R12
            lea RAX,QWORD PTR [R13-1]
            cmp RAX,2
            ja .L_44add0

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1809
.L_44af50:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_448ae0

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_449e20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44af88:

            cmp R9D,256
            mov DWORD PTR [RSP+8],R11D
            je .L_44b0f4

            cmp R9D,65281
            jne .L_44b07e

            lea R8,QWORD PTR [RIP+.L_44bb85]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1684
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov R11D,DWORD PTR [RSP+8]
            cmp R11D,1
            jne .L_44b698

            cmp BYTE PTR [R15+4],0
            jne .L_44b698

            mov DWORD PTR [R14+376],1
            jmp .L_44af30
.L_44aff3:

            lea R8,QWORD PTR [RIP+.L_44c0c8]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1719
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_448ae0

            mov RSI,QWORD PTR [R14+88]
            movsxd R11,DWORD PTR [RSP+8]
            or DWORD PTR [RSI+1060],1
            movzx ECX,BYTE PTR [R15+4]
            lea RAX,QWORD PTR [RCX+1]
            cmp R11,RAX
            jne .L_44b918

            test RCX,RCX
            lea RDI,QWORD PTR [R15+5]
            je .L_44af30

            movzx EDX,BYTE PTR [R15+5]
            add RCX,RDI
            lea RAX,QWORD PTR [R15+6]
            cmp DL,1
            ja .L_44b071

            jmp .L_44b152
          .byte 0x90
.L_44b060:

            add RAX,1
            movzx EDX,BYTE PTR [RAX-1]
            cmp DL,1
            jbe .L_44b152
.L_44b071:

            cmp RAX,RCX
            mov RDI,RAX
            jne .L_44b060

            jmp .L_44af30
.L_44b07e:

            lea R8,QWORD PTR [RIP+.L_44c138]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1801
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44af30
.L_44b0a5:

            lea R8,QWORD PTR [RIP+.L_44c110]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1741
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_448ae0

            mov R11D,DWORD PTR [RSP+8]
            cmp R11D,1
            jne .L_44b6d6

            movzx EAX,BYTE PTR [R15+4]
            cmp AL,4
            ja .L_44b6d6

            mov RDX,QWORD PTR [R14+80]
            mov BYTE PTR [RDX+100],AL
            jmp .L_44af30
.L_44b0f4:

            lea R8,QWORD PTR [RIP+.L_44bbbd]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1731
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RDI,QWORD PTR [R14+88]
            call .L_45b6c0

            test EAX,EAX
            mov R11D,DWORD PTR [RSP+8]
            jne .L_44b183

            mov RDI,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [R15+4]
            movsxd RDX,R11D
            call .L_45b6f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_44b20b

            mov RAX,QWORD PTR [R14+88]
            or DWORD PTR [RAX+1060],2
            jmp .L_44af30
.L_44b152:

            mov DWORD PTR [RSI+260],EDX
            movzx R9D,BYTE PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_44bba3]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,362
            mov ESI,4
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44af30
.L_44b183:

            lea R8,QWORD PTR [RIP+.L_44bbda]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,384
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44af30
.L_44b1aa:

            lea R8,QWORD PTR [RIP+.L_44ba19]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,1313
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44b1d2:

            cmp EDX,EAX
            jle .L_44aada

            mov DWORD PTR [R14+16],EAX
            jmp .L_44aada
.L_44b1e3:

            lea R8,QWORD PTR [RIP+.L_44bcea]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,2346
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449e20
.L_44b20b:

            lea R8,QWORD PTR [RIP+.L_44c0f0]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov RDI,R14
            mov R9D,EAX
            mov ECX,391
            mov ESI,1
            call .L_448c30

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_449e20
.L_44b245:

            sub RSP,8
.L_44b249:

            lea R9,QWORD PTR [R15+RDX*1]
            lea R8,QWORD PTR [RIP+.L_44bb6d]
            push 0
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1653
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            pop RAX
            pop RDX
.L_44b271:

            xor EAX,EAX
.L_44b273:

            mov RSI,QWORD PTR [RSP+40]
            cmp BYTE PTR [RSI+RAX*1],0
            jne .L_44b289

            cmp BYTE PTR [RSI+RAX*1+1],255
            je .L_44b714
.L_44b289:

            add RAX,2
            cmp QWORD PTR [RSP+32],RAX
            ja .L_44b273

            cmp DWORD PTR [R14+376],1
            mov RAX,QWORD PTR [R14]
            je .L_44b2b4

            movzx EDX,BYTE PTR [RAX+152]
            and EDX,48
            cmp DL,32
            je .L_44b9cb
.L_44b2b4:

            movsxd RDX,DWORD PTR [R14+16]
            mov R13,QWORD PTR [RAX+RDX*8]
            mov EAX,DWORD PTR [R13]
            test EAX,EAX
            je .L_44b822

            xor EDX,EDX
.L_44b2ca:

            xor EBX,EBX
            jmp .L_44b2e3
          .byte 0x66
          .byte 0x90
.L_44b2d0:

            add RBX,2
            cmp QWORD PTR [RSP+32],RBX
            jbe .L_44b411

            mov EAX,DWORD PTR [R13]
.L_44b2e3:

            mov RSI,QWORD PTR [RSP+40]
            movzx ECX,BYTE PTR [RSI+RBX*1]
            cmp AH,CL
            jne .L_44b2d0

            cmp BYTE PTR [RSI+RBX*1+1],AL
            jne .L_44b2d0

            mov EDI,EAX
            call .L_45c7c0

            test RAX,RAX
            mov R12,RAX
            je .L_44b936

            mov R9,QWORD PTR [RAX+8]
            lea R8,QWORD PTR [RIP+.L_44bc0a]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,799
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov EAX,DWORD PTR [R14+16]
            cmp DWORD PTR [R12+32],EAX
            jg .L_44b3e8

            cmp EAX,DWORD PTR [R12+40]
            jg .L_44b3e8

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_44b361

            test BYTE PTR [R12+44],4
            jne .L_44b591
.L_44b361:

            cmp DWORD PTR [R12+24],11
            je .L_44b56f
.L_44b36d:

            mov R9,QWORD PTR [R12+8]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44beff]
            xor EAX,EAX
            mov ECX,1972
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov EDX,DWORD PTR [R13]
            mov RAX,QWORD PTR [R14+80]
            mov DWORD PTR [RAX],EDX
            mov RAX,QWORD PTR [R14+120]
            mov QWORD PTR [RAX],R12
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_44b929
.L_44b3ba:

            lea R8,QWORD PTR [RIP+.L_44bc5d]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2006
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            xor EBX,EBX
            jmp .L_449e20
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44b3e8:

            lea R8,QWORD PTR [RIP+.L_44bc21]
            mov ECX,804
.L_44b3f4:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,EBP
            jmp .L_44b2d0
.L_44b411:

            add R13,4
            mov EAX,DWORD PTR [R13]
            test EAX,EAX
            jne .L_44b2ca

            test EDX,EDX
            je .L_44b822

            lea R8,QWORD PTR [RIP+.L_44c1f8]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1958
            mov ESI,1
            mov RDI,R14
            mov EBX,4294940288
            call .L_448ae0

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_449e20
.L_44b465:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1664
            jmp .L_44af50
.L_44b476:

            lea R8,QWORD PTR [RIP+.L_44bafe]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1537
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],0
            jmp .L_44ac6e
.L_44b4a8:

            lea R8,QWORD PTR [RIP+.L_44c328]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2143
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            lea R15,QWORD PTR [RBX+10]
            sub R15,QWORD PTR [RSP+8]
            mov DWORD PTR [RBX+5],16777727
            mov BYTE PTR [RBX+9],0
            lea R11,QWORD PTR [R15+2]
            jmp .L_449ce7
.L_44b4e7:

            mov RAX,QWORD PTR [R14+320]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            lea R8,QWORD PTR [RIP+.L_44c3b8]
            mov ECX,2246
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RSP+16],RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RAX+768]
            mov RAX,RDX
            sub RAX,R13
            cmp RAX,3
            jg .L_44b5f0

            lea R8,QWORD PTR [RIP+.L_44bdb4]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2250
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_449d8f
.L_44b558:

            movzx EAX,BYTE PTR [RAX+11]
            cmp BYTE PTR [RCX+2],AL
            jne .L_44a6ea

            mov EAX,12
            jmp .L_44aa21
.L_44b56f:

            mov RAX,QWORD PTR [R14+88]
            test BYTE PTR [RAX+1060],2
            jne .L_44b36d

            lea R8,QWORD PTR [RIP+.L_44c1b8]
            mov ECX,828
            jmp .L_44b3f4
.L_44b591:

            mov EDX,EBP
            jmp .L_44b2d0
.L_44b598:

            lea R8,QWORD PTR [RIP+.L_44bbf6]
            mov ECX,3717
.L_44b5a4:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294939648
            call .L_448ae0

            jmp .L_449e20
.L_44b5c4:

            lea R8,QWORD PTR [RIP+.L_44c478]
            mov ECX,3511
.L_44b5d0:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294935552
            call .L_448ae0

            jmp .L_449e20
.L_44b5f0:

            mov WORD PTR [R13],1
            mov RAX,QWORD PTR [R14]
            sub RDX,R13
            mov RDI,QWORD PTR [R14+88]
            lea RCX,QWORD PTR [RSP+64]
            lea RSI,QWORD PTR [R13+4]
            sub RDX,4
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            call .L_45b7e0

            test EAX,EAX
            mov R9D,EAX
            jne .L_44b7ec

            mov RAX,QWORD PTR [RSP+64]
            mov RDX,RAX
            mov BYTE PTR [R13+3],AL
            lea R15,QWORD PTR [RAX+R15*1+4]
            shr RDX,8
            mov BYTE PTR [R13+2],DL
            jmp .L_449d8f
.L_44b644:

            lea R8,QWORD PTR [RIP+.L_44c498]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov R9D,EAX
            mov ECX,3701
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            mov EBX,4294935808
            jmp .L_449e20
.L_44b671:

            lea R8,QWORD PTR [RIP+.L_44c478]
            mov ECX,3505
            jmp .L_44b5d0
.L_44b682:

            call __stack_chk_fail@PLT
.L_44b687:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1571
            jmp .L_44af50
.L_44b698:

            lea R8,QWORD PTR [RIP+.L_44c070]
            mov ECX,175
.L_44b6a4:

            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_448ae0

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_449e20
.L_44b6d6:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,411
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294936320
            jmp .L_449e20
.L_44b714:

            lea R8,QWORD PTR [RIP+.L_44c160]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            xor EAX,EAX
            mov ECX,1869
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov DWORD PTR [R14+376],1
            mov RAX,QWORD PTR [R14]
            jmp .L_44b2b4
.L_44b749:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,286
            jmp .L_44af50
.L_44b75a:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,295
            jmp .L_44af50
.L_44b76b:

            lea R8,QWORD PTR [RIP+.L_44bbf6]
            mov ECX,3758
            jmp .L_44b5a4
.L_44b77c:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1361
            jmp .L_44a72c
.L_44b78d:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1591
            jmp .L_44af50
.L_44b79e:

            lea R8,QWORD PTR [RIP+.L_44bd3c]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2396
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294937600
            jmp .L_449e20
.L_44b7ca:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1487
            jmp .L_44af50
.L_44b7db:

            lea R8,QWORD PTR [RIP+.L_44bbf6]
            mov ECX,2627
            jmp .L_44b5a4
.L_44b7ec:

            lea R8,QWORD PTR [RIP+.L_44c3e0]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2262
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_449d8f
.L_44b811:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1643
            jmp .L_44af50
.L_44b822:

            lea R8,QWORD PTR [RIP+.L_44bc3f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1965
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294937728
            jmp .L_449e20
.L_44b860:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1437
            jmp .L_44a72c
.L_44b871:

            sub RSP,8
.L_44b875:

            lea R8,QWORD PTR [RIP+.L_44c030]
            mov RDI,R14
            push RCX
            push RSI
            mov ECX,1458
            push RDX
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ESI,1
            xor EAX,EAX
            mov EBX,4294939008
            call .L_448ae0

            add RSP,32
            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_449e20
.L_44b8ba:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1342
            jmp .L_44a72c
.L_44b8cb:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1306
            jmp .L_44a72c
.L_44b8dc:

            test R10,R10
            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1548
            jne .L_44a72c

            lea R8,QWORD PTR [RIP+.L_44bb19]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1552
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44ac6e
.L_44b918:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,344
            jmp .L_44af50
.L_44b929:

            mov RDI,R14
            call .L_44da00

            jmp .L_44b3ba
.L_44b936:

            lea R8,QWORD PTR [RIP+.L_44bbf6]
            mov ECX,795
            jmp .L_44b5a4
.L_44b947:

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294934784
            jmp .L_449e20
.L_44b963:

            lea R8,QWORD PTR [RIP+.L_44bccc]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,2335
            mov ESI,1
            mov RDI,R14
            mov EBX,4294939648
            call .L_448ae0

            jmp .L_449e20
.L_44b98d:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            lea RDX,QWORD PTR [RIP+.L_44bf18]
            mov ECX,1512
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294936320
            jmp .L_449e20
.L_44b9cb:

            lea R8,QWORD PTR [RIP+.L_44c188]
            mov ECX,1891
            jmp .L_44b6a4
.L_44b9dc:

            lea R8,QWORD PTR [RIP+.L_44ba3f]
            mov ECX,1631
            jmp .L_44af50
.L_44b9ed:
          .string "a"
.L_44b9ef:
          .string "no"
.L_44b9f2:
          .string "server state: %d"
.L_44ba03:
          .string "=> parse client hello"
.L_44ba19:
          .string "mbedtls_ssl_fetch_input"
.L_44ba31:
          .string "record header"
.L_44ba3f:
          .string "bad client hello message"
.L_44ba58:
          .string "replayed record, discarding"
.L_44ba74:
          .string "record contents"
.L_44ba84:
          .string "client hello, version"
.L_44ba9a:
          .string "client hello, random bytes"
.L_44bab5:
          .string "client hello, session id"
.L_44bace:
          .string "client hello, cookie"
.L_44bae3:
          .string "cookie verification failed"
.L_44bafe:
          .string "cookie verification passed"
.L_44bb19:
          .string "cookie verification skipped"
.L_44bb35:
          .string "client hello, ciphersuitelist"
.L_44bb53:
          .string "client hello, compression"
.L_44bb6d:
          .string "client hello extensions"
.L_44bb85:
          .string "found renegotiation extension"
.L_44bba3:
          .string "point format selected: %d"
.L_44bbbd:
          .string "found ecjpake kkpp extension"
.L_44bbda:
          .string "skip ecjpake kkpp extension"
.L_44bbf6:
          .string "should never happen"
.L_44bc0a:
          .string "trying ciphersuite: %s"
.L_44bc21:
          .string "ciphersuite mismatch: version"
.L_44bc3f:
          .string "got no ciphersuites in common"
.L_44bc5d:
          .string "<= parse client hello"
.L_44bc73:
          .string "=> write server hello"
.L_44bc89:
          .string "<= write server hello"
.L_44bc9f:
          .string "=> write hello verify request"
.L_44bcbd:
          .string "server version"
.L_44bccc:
          .string "inconsistent cookie callbacks"
.L_44bcea:
          .string "f_cookie_write"
.L_44bcf9:
          .string "cookie sent"
.L_44bd05:
          .string "mbedtls_ssl_write_record"
.L_44bd1e:
          .string "<= write hello verify request"
.L_44bd3c:
          .string "no RNG provided"
.L_44bd4c:
          .string "server hello, random bytes"
.L_44bd67:
          .string "mbedtls_ssl_derive_keys"
.L_44bd7f:
          .string "server hello, session id"
.L_44bd98:
          .string "%s session has been resumed"
.L_44bdb4:
          .string "buffer too small"
.L_44bdc5:
          .string "=> write server key exchange"
.L_44bde2:
          .string "<= write server key exchange"
.L_44bdff:
          .string "=> write certificate request"
.L_44be1c:
          .string "=> write server hello done"
.L_44be37:
          .string "<= write server hello done"
.L_44be52:
          .string "=> parse client key exchange"
.L_44be6f:
          .string "mbedtls_ssl_read_record"
.L_44be87:
          .string "mbedtls_ecjpake_derive_secret"
.L_44bea5:
          .string "<= parse client key exchange"
.L_44bec2:
          .string "=> parse certificate verify"
.L_44bede:
          .string "handshake: done"
.L_44beee:
          .string "invalid state %d"
.L_44beff:
          .string "selected ciphersuite: %s"
.L_44bf18:
          .string "repo.patched/library/ssl_srv.c"
          .zero 1
.L_44bf38:
          .string "client hello v3, message type: %d"
          .zero 6
.L_44bf60:
          .string "client hello v3, message len.: %d"
          .zero 6
.L_44bf88:
          .string "client hello v3, protocol version: [%d:%d]"
          .zero 5
.L_44bfb8:
          .string "client hello v3, handshake type: %d"
          .zero 4
.L_44bfe0:
          .string "client hello v3, handshake len.: %d"
          .zero 4
.L_44c008:
          .string "ClientHello fragmentation not supported"
.L_44c030:
          .string "client only supports ssl smaller than minimum [%d:%d] < [%d:%d]"
.L_44c070:
          .string "non-zero length renegotiation info"
          .zero 5
.L_44c098:
          .string "found supported elliptic curves extension"
          .zero 6
.L_44c0c8:
          .string "found supported point formats extension"
.L_44c0f0:
          .string "mbedtls_ecjpake_read_round_one"
          .zero 1
.L_44c110:
          .string "found max fragment length extension"
          .zero 4
.L_44c138:
          .string "unknown extension found: %d (ignoring)"
          .zero 1
.L_44c160:
          .string "received TLS_EMPTY_RENEGOTIATION_INFO "
          .zero 1
.L_44c188:
          .string "legacy renegotiation, breaking off handshake"
          .zero 3
.L_44c1b8:
          .string "ciphersuite mismatch: ecjpake not configured or ext missing"
          .zero 4
.L_44c1f8:
          .string "got ciphersuites in common, but none of them usable"
          .zero 4
.L_44c230:
          .string "client hello was not authenticated"
          .zero 5
.L_44c258:
          .string "server hello, chosen version: [%d:%d]"
          .zero 2
.L_44c280:
          .string "session successfully restored from cache"
          .zero 7
.L_44c2b0:
          .string "server hello, session id len.: %d"
          .zero 6
.L_44c2d8:
          .string "server hello, chosen ciphersuite: %s"
          .zero 3
.L_44c300:
          .string "server hello, compress alg.: 0x%02X"
          .zero 4
.L_44c328:
          .string "server hello, secure renegotiation extension"
          .zero 3
.L_44c358:
          .string "server hello, max_fragment_length extension"
          .zero 4
.L_44c388:
          .string "server hello, supported_point_formats extension"
.L_44c3b8:
          .string "server hello, ecjpake kkpp extension"
          .zero 3
.L_44c3e0:
          .string "mbedtls_ecjpake_write_round_one"
.L_44c400:
          .string "server hello, total extension length: %d"
          .zero 7
.L_44c430:
          .string "mbedtls_ecjpake_write_round_two"
.L_44c450:

            cmp AL,61
            and BYTE PTR [RBX+107],DH
            imul ESI,DWORD PTR [RAX+32],1953067639
            and BYTE PTR GS:[RBX+101],AH
            jb .L_44c4d6
          .byte 0x69
          .byte 0x66
          .byte 0x69
          .byte 0x63
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x20
          .byte 0x72
          .byte 0x65
          .byte 0x71
          .byte 0x75
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c478:
          .string "bad client key exchange message"
.L_44c498:
          .string "mbedtls_ecjpake_read_round_two"
          .zero 1
.L_44c4b8:

            cmp AL,61
            and BYTE PTR [RBX+107],DH
            imul ESI,DWORD PTR [RAX+32],1936875888
          .byte 0x65
          .byte 0x20
          .byte 0x63
          .byte 0x65
          .byte 0x72
          .byte 0x74

            imul ESP,DWORD PTR [RSI+105],1702125923
            and BYTE PTR [RSI+101],DH
          .byte 0x72
          .byte 0x69
.L_44c4d6:

            jns .L_44c4d9
.L_44c4d9:

            nop
            nop
            nop
.L_44c4dc:
          .long .L_449e70-.L_44c4dc
          .long .L_449e80-.L_44c4dc
          .long .L_4499e8-.L_44c4dc
          .long .L_44a088-.L_44c4dc
          .long .L_44a0a0-.L_44c4dc
          .long .L_44a150-.L_44c4dc
          .long .L_44a390-.L_44c4dc
          .long .L_44a430-.L_44c4dc
          .long .L_44a1c0-.L_44c4dc
          .long .L_44a2b8-.L_44c4dc
          .long .L_44a310-.L_44c4dc
          .long .L_44a320-.L_44c4dc
          .long .L_44a330-.L_44c4dc
          .long .L_44a340-.L_44c4dc
          .long .L_44a350-.L_44c4dc
          .long .L_44a380-.L_44c4dc
          .long .L_44a440-.L_44c4dc
          .long .L_44a440-.L_44c4dc
          .long .L_449e60-.L_44c4dc
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c530:

            mov EAX,4294938496
            ret 
.L_44c536:
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c540:

            mov EAX,4294938496
            ret 
.L_44c546:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c550:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            sub RSP,168
.L_44c569:

            mov R13,QWORD PTR [RDI+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            test R13,R13
            je .L_44c6d3
.L_44c589:

            mov R12,RSP
            lea R15,QWORD PTR [RIP+.L_452596]
            mov RDI,R12
            call .L_443e00

            lea R8,QWORD PTR [RIP+.L_4525b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5077
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBP
            call .L_448ae0

            mov RAX,QWORD PTR [RBP+88]
            mov RDI,R12
            lea RSI,QWORD PTR [RAX+800]
            call .L_443e50

            sub RSP,8
.L_44c5d4:

            lea R9,QWORD PTR [R12+8]
            lea R8,QWORD PTR [RIP+.L_4525d3]
            push 32
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5089
            mov ESI,4
            mov RDI,RBP
            call .L_448d00

            pop RAX
            pop RDX
            test EBX,EBX
            lea RDX,QWORD PTR [RIP+.L_4525a6]
            mov RDI,R12
            cmovne R15,RDX
            lea RBX,QWORD PTR [RSP+112]
            mov RSI,RBX
            call .L_444360

            mov RAX,QWORD PTR [RBP+88]
            sub RSP,8
            lea RDI,QWORD PTR [R13+48]
            push 12
.L_44c628:

            mov R9,R14
            mov R8D,32
            mov RCX,RBX
            mov RDX,R15
            mov ESI,48
            call QWORD PTR [RAX+936]

            lea R8,QWORD PTR [RIP+.L_4525e7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5101
            mov ESI,3
            mov R9,R14
            mov RDI,RBP
            mov QWORD PTR [RSP],12
            call .L_448d00

            mov RDI,R12
            call .L_443e30

            pop RCX
.L_44c676:

            pop RSI
.L_44c677:

            lea RAX,QWORD PTR [RBX+32]
            mov RCX,RBX
            nop
            nop
.L_44c680:

            mov BYTE PTR [RCX],0
            add RCX,1
            cmp RCX,RAX
            jne .L_44c680

            lea R8,QWORD PTR [RIP+.L_4525fc]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,5107
            mov ESI,2
            mov RDI,RBP
            call .L_448ae0

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44c6dc

            add RSP,168
.L_44c6c8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44c6d3:

            mov R13,QWORD PTR [RDI+72]
            jmp .L_44c589
.L_44c6dc:

            call __stack_chk_fail@PLT
.L_44c6e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c6f0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R12,RSI
            add RSP,-128
.L_44c6fe:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_443e00

            lea R8,QWORD PTR [RIP+.L_45260e]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,1046
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBP
            call .L_448ae0

            mov RAX,QWORD PTR [RBP+88]
            mov RDI,RBX
            lea RSI,QWORD PTR [RAX+800]
            call .L_443e50

            mov RSI,R12
            mov RDI,RBX
            call .L_444360

            sub RSP,8
.L_44c75d:

            lea R8,QWORD PTR [RIP+.L_452624]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push 32
.L_44c76d:

            mov R9,R12
            mov ECX,1051
            mov ESI,3
            mov RDI,RBP
            call .L_448d00

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_45263d]
            xor EAX,EAX
            mov ECX,1052
            mov ESI,2
            mov RDI,RBP
            call .L_448ae0

            mov RDI,RBX
            call .L_443e30

            pop RAX
.L_44c7ad:

            pop RDX
            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44c7c7

            sub RSP,-128
            pop RBX
            pop RBP
            pop R12
            ret 
.L_44c7c7:

            call __stack_chk_fail@PLT
.L_44c7cc:

            nop
            nop
            nop
            nop
.L_44c7d0:

            mov RAX,QWORD PTR [RDI+88]
            mov RAX,QWORD PTR [RAX+784]
            cmp QWORD PTR [RDI+104],RAX
            je .L_44c880

            push RBX
.L_44c7e6:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_45265d]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,2548
            mov ESI,3
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX+104]
            mov RCX,QWORD PTR [RAX+784]
            mov QWORD PTR [RBX+104],RCX
            mov QWORD PTR [RAX+784],RDX
            mov RDX,QWORD PTR [RBX+288]
            mov RAX,QWORD PTR [RAX+792]
            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RDX],RAX
            mov RAX,QWORD PTR [RBX+88]
            mov QWORD PTR [RAX+792],RCX
            mov RDX,QWORD PTR [RBX+104]
            mov RAX,QWORD PTR [RBX+312]
            test RDX,RDX
            je .L_44c870

            cmp DWORD PTR [RBX+16],1
            jle .L_44c870

            add RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            mov QWORD PTR [RBX+320],RAX
            pop RBX
.L_44c867:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c870:

            mov QWORD PTR [RBX+320],RAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c880:

            lea R8,QWORD PTR [RIP+.L_45264c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2544
            mov ESI,3
            xor EAX,EAX
            jmp .L_448ae0
.L_44c89f:

            nop
.L_44c8a0:

            mov RDI,QWORD PTR [RDI+88]
            add RDI,800
            jmp .L_444340
.L_44c8b0:

            jmp .L_44c8a0
.L_44c8b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c8c0:

            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_452669]
            mov RBP,RDI
            mov EBX,ESI
            sub RSP,8
            mov R9D,ESI
            xor EAX,EAX
            mov ESI,3
            mov ECX,82
            call .L_448ae0

            mov RDI,QWORD PTR [RBP+128]
            mov RAX,QWORD PTR [RBP+136]
            add RSP,8
            mov ESI,EBX
            mov EDX,EBX
            pop RBX
            pop RBP
            shr ESI,2
            jmp RAX
.L_44c90a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44c910:

            mov RAX,QWORD PTR [RDI+144]
            test RAX,RAX
            je .L_44c938

            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+128]
            call RAX

            cmp EAX,2
            je .L_44c93b

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c938:

            xor EAX,EAX
            ret 
.L_44c93b:

            lea R8,QWORD PTR [RIP+.L_45267c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,96
            mov ESI,3
            call .L_448ae0

            mov EAX,4294967295
            pop RBX
            ret 
.L_44c964:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c970:

            push RBX

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+128]
            call .L_45a650

            lea RDI,QWORD PTR [RBX+208]
            call .L_45a650

            lea RDI,QWORD PTR [RBX+80]
            call .L_4436a0

            lea RDI,QWORD PTR [RBX+104]
            call .L_4436a0

            lea RAX,QWORD PTR [RBX+288]
            nop
            nop
            nop
.L_44c9a8:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_44c9a8

            pop RBX

            ret 
.L_44c9b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c9c0:

            push R12
            push RBP
            push RBX
.L_44c9c4:

            mov RBX,RDI
            add RDI,800
            call .L_443e30

            mov RDI,RBX
            call .L_45b610

            mov RDI,QWORD PTR [RBX+696]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+712]
            mov QWORD PTR [RBX+696],0
            mov QWORD PTR [RBX+704],0
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+728]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+744]
            call QWORD PTR [RIP+.L_677120]

            mov RBP,QWORD PTR [RBX+760]
            test RBP,RBP
            je .L_44ca57

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ca38:

            mov R12,QWORD PTR [RBP+24]
            mov RDI,QWORD PTR [RBP]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,RBP
            call QWORD PTR [RIP+.L_677120]

            test R12,R12
            mov RBP,R12
            jne .L_44ca38
.L_44ca57:

            lea RAX,QWORD PTR [RBX+1064]
            nop
            nop
.L_44ca60:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_44ca60

            pop RBX
.L_44ca6d:

            pop RBP
            pop R12
            ret 
.L_44ca71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ca80:

            push RBX

            lea R8,QWORD PTR [RIP+.L_452f18]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,5163
            mov ESI,3
            call .L_448ae0

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_44cab5

            call .L_44c9c0

            mov RDI,QWORD PTR [RBX+88]
.L_44cab5:

            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+112]
            mov QWORD PTR [RBX+88],0
            test RDI,RDI
            je .L_44cadb

            call .L_44c970

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]
.L_44cadb:

            mov RAX,QWORD PTR [RBX+120]
            mov RDI,RBX
            mov QWORD PTR [RBX+120],0
            lea R8,QWORD PTR [RIP+.L_452f38]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5183
            mov ESI,3
            mov QWORD PTR [RBX+112],RAX
            xor EAX,EAX
            pop RBX

            jmp .L_448ae0
.L_44cb0e:

            nop
            nop
.L_44cb10:

            lea RAX,QWORD PTR [RDI+104]
            nop
            nop
            nop
            nop
.L_44cb18:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_44cb18

            ret 
.L_44cb26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44cb30:

            push R12
            push RBP
            push RBX
.L_44cb34:

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+120]
            test RDI,RDI
            je .L_44cb45

            call .L_44c970
.L_44cb45:

            mov RDI,QWORD PTR [RBX+80]
            test RDI,RDI
            je .L_44cb53

            call .L_44cb10
.L_44cb53:

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_44cb61

            call .L_44c9c0
.L_44cb61:

            cmp QWORD PTR [RBX+120],0
            jne .L_44cb7c

            mov ESI,288
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [RBX+120],RAX
.L_44cb7c:

            cmp QWORD PTR [RBX+80],0
            jne .L_44cb97

            mov ESI,104
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [RBX+80],RAX
.L_44cb97:

            cmp QWORD PTR [RBX+88],0
            jne .L_44cbbb

            mov ESI,1064
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+88],RAX
            je .L_44cd18
.L_44cbbb:

            cmp QWORD PTR [RBX+120],0
            je .L_44cd18

            mov RCX,QWORD PTR [RBX+80]
            test RCX,RCX
            je .L_44cd18

            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+96],0
            xor R12D,R12D
            and RDI,-8
            mov RAX,R12
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RBP,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RBP+8]
            mov RCX,RBP
            mov QWORD PTR [RBP],0
            mov QWORD PTR [RBP+280],0
            and RDI,-8
            sub RCX,RDI
            add ECX,288
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [RBP+128]
            call .L_45a630

            lea RDI,QWORD PTR [RBP+208]
            call .L_45a630

            lea RDI,QWORD PTR [RBP+80]
            call .L_443690

            lea RDI,QWORD PTR [RBP+104]
            call .L_443690

            mov RBP,QWORD PTR [RBX+88]
            mov RAX,R12
            lea RDI,QWORD PTR [RBP+8]
            mov RCX,RBP
            mov QWORD PTR [RBP],0
            mov QWORD PTR [RBP+1056],0
            lea R12,QWORD PTR [RBP+800]
            and RDI,-8
            sub RCX,RDI
            add ECX,1064
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,R12
            call .L_443e00

            xor ESI,ESI
            mov RDI,R12
            call .L_443ea0

            lea RAX,QWORD PTR [RIP+.L_44c8a0]
            mov RDI,RBP
            mov QWORD PTR [RBP+912],RAX
            call .L_45b570

            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RBP+696],0
            mov QWORD PTR [RBP+704],0
            movzx EAX,BYTE PTR [RAX+152]
            test AL,2
            je .L_44cd0c

            mov RDX,QWORD PTR [RBX+88]
            and EAX,1
            mov RCX,QWORD PTR [RBX+104]
            add EAX,EAX
            mov BYTE PTR [RDX+756],AL
            cmp QWORD PTR [RBX+136],0
            mov QWORD PTR [RDX+784],RCX
            je .L_44cd0c

            xor ESI,ESI
            mov RDI,RBX
            call .L_44c8c0
.L_44cd0c:

            xor EAX,EAX
.L_44cd0e:

            pop RBX
.L_44cd0f:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44cd18:

            lea R8,QWORD PTR [RIP+.L_452f58]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,5549
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RDI,QWORD PTR [RBX+88]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+120]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+80]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+88],0
            mov QWORD PTR [RBX+120],0
            mov EAX,4294934784
            mov QWORD PTR [RBX+80],0
            jmp .L_44cd0e
.L_44cd77:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44cd80:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            sub RSP,280
.L_44cd97:

            lea RBP,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP+48],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            mov RDI,RBP
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+8],R9
            call .L_443690

            mov EDI,6
            call .L_443660

            test RAX,RAX
            je .L_44cfe4

            mov RDI,RAX
            mov R13,RAX
            call .L_443c60

            mov RDI,R14
            movzx R12D,AL
            call strlen@PLT

            lea RCX,QWORD PTR [R12+RAX*1]
            mov R8,RAX
            lea RAX,QWORD PTR [R15+RCX*1]
            mov QWORD PTR [RSP+24],RCX
            cmp RAX,128
            ja .L_44cfd9

            lea RBX,QWORD PTR [RSP+128]
            mov RDX,R8
            mov RSI,R14
            mov QWORD PTR [RSP+32],R8
            lea RDI,QWORD PTR [RBX+R12*1]
            mov QWORD PTR [RSP+56],RDI
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            mov RDX,R15
            lea RDI,QWORD PTR [RBX+RCX*1]
            call memcpy@PLT

            mov EDX,1
            mov RSI,R13
            mov RDI,RBP
            call .L_443760

            test EAX,EAX
            mov R14D,EAX
            mov R8,QWORD PTR [RSP+32]
            je .L_44ce90
.L_44ce64:

            mov RSI,QWORD PTR [RSP+264]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_44cfef

            add RSP,280
.L_44ce85:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44ce90:

            mov RDX,QWORD PTR [RSP+48]
            mov RSI,QWORD PTR [RSP+40]
            mov RDI,RBP
            add R15,R8
            lea R13,QWORD PTR [RSP+96]
            call .L_4438a0

            mov RSI,QWORD PTR [RSP+56]
            mov RDX,R15
            mov RDI,RBP
            call .L_4439f0

            mov RSI,RBX
            mov RDI,RBP
            call .L_443a30

            cmp QWORD PTR [RSP+336],0
            je .L_44cf9c

            lea RAX,QWORD PTR [R12+R15*1]
            mov RSI,QWORD PTR [RSP+8]
            mov R15,QWORD PTR [RSP+336]
            lea R13,QWORD PTR [RSP+96]
            mov DWORD PTR [RSP+32],R14D
            mov QWORD PTR [RSP+16],RAX
            mov RAX,R12
            sub RAX,RSI
            mov R14,RSI
            mov QWORD PTR [RSP+24],RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_44cf08:

            mov RDI,RBP
            call .L_443af0

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,RBP
            call .L_4439f0

            mov RSI,R13
            mov RDI,RBP
            call .L_443a30

            mov RDI,RBP
            call .L_443af0

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_4439f0

            mov RSI,RBX
            mov RDI,RBP
            call .L_443a30

            mov RAX,QWORD PTR [RSP+24]
            mov RDX,R12
            add RAX,R14
            cmp R15,RAX
            jae .L_44cf64

            mov RAX,R15
            xor EDX,EDX
            div R12
.L_44cf64:

            test RDX,RDX
            je .L_44cf83

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
.L_44cf70:

            movzx ECX,BYTE PTR [R13+RAX*1]
            mov BYTE PTR [R14+RAX*1],CL
            add RAX,1
            cmp RAX,RDX
            jne .L_44cf70
.L_44cf83:

            add R14,R12
            mov RAX,R14
            sub RAX,QWORD PTR [RSP+8]
            cmp R15,RAX
            ja .L_44cf08

            mov R14D,DWORD PTR [RSP+32]
.L_44cf9c:

            mov RDI,RBP
            call .L_4436a0

            lea RAX,QWORD PTR [RBX+128]
            nop
            nop
            nop
            nop
            nop
.L_44cfb0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_44cfb0

            lea RDX,QWORD PTR [R13+32]
            mov RAX,R13
            nop
            nop
            nop
            nop
            nop
.L_44cfc8:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_44cfc8

            jmp .L_44ce64
.L_44cfd9:

            mov R14D,4294938368
            jmp .L_44ce64
.L_44cfe4:

            mov R14D,4294939648
            jmp .L_44ce64
.L_44cfef:

            call __stack_chk_fail@PLT
.L_44cff4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d000:

            push R15
            push R14
            lea R8,QWORD PTR [RIP+.L_45268a]
            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RBP
            push RBX
            mov ECX,501
            mov ESI,2
            mov R12,RDI
            sub RSP,392
.L_44d02c:

            mov R13,QWORD PTR [RDI+120]
            mov R15,QWORD PTR [RDI+88]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+376],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+80]
            mov QWORD PTR [RSP+16],RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R13]
            mov EDI,DWORD PTR [RAX+16]
            call .L_45a550

            test RAX,RAX
            je .L_44d74c

            mov R14,RAX
            mov RAX,QWORD PTR [R13]
            mov EDI,DWORD PTR [RAX+20]
            call .L_443660

            test RAX,RAX
            mov QWORD PTR [RSP+24],RAX
            je .L_44d781

            cmp DWORD PTR [R12+16],3
            jne .L_44d70f

            lea RAX,QWORD PTR [RIP+.L_44cd80]
            mov R10D,DWORD PTR [R15+1048]
            lea RBX,QWORD PTR [R15+952]
            mov QWORD PTR [R15+936],RAX
            lea RAX,QWORD PTR [RIP+.L_44c6f0]
            mov QWORD PTR [R15+920],RAX
            lea RAX,QWORD PTR [RIP+.L_44c550]
            mov QWORD PTR [R15+928],RAX
            mov RAX,QWORD PTR [RSP+16]
            add RAX,48
            test R10D,R10D
            mov QWORD PTR [RSP+8],RAX
            je .L_44d490

            lea R8,QWORD PTR [RIP+.L_452fa8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,636
            mov ESI,3
            mov RDI,R12
            xor EAX,EAX
            call .L_448ae0
.L_44d106:

            movdqu XMM1,XMMWORD PTR [R15+952]
            lea RAX,QWORD PTR [RSP+48]
            lea RDX,QWORD PTR [RSP+112]
            movdqu XMM3,XMMWORD PTR [R15+984]
            movdqu XMM0,XMMWORD PTR [R15+968]
            movdqu XMM2,XMMWORD PTR [R15+1000]
            movups XMMWORD PTR [R15+952],XMM3
            movaps XMMWORD PTR [RSP+48],XMM1
            movups XMMWORD PTR [RBX+16],XMM2
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM3
            movaps XMMWORD PTR [RSP+96],XMM2
            movups XMMWORD PTR [R15+984],XMM1
            movups XMMWORD PTR [R15+1000],XMM0
            nop
            nop
            nop
            nop
.L_44d168:

            add RAX,1
            mov BYTE PTR [RAX-1],0
            cmp RAX,RDX
            jne .L_44d168

            lea RBP,QWORD PTR [RSP+112]
            sub RSP,8
.L_44d17e:

            mov ESI,48
            push 256
            mov R8D,64
            mov RDI,QWORD PTR [RSP+24]
            mov R9,RBP
            mov RCX,RBX
            lea RDX,QWORD PTR [RIP+.L_4526ed]
            call QWORD PTR [R15+936]

            test EAX,EAX
            pop RSI
            pop RDI
            jne .L_44d522

            mov RAX,QWORD PTR [RSP+16]
            mov EDI,DWORD PTR [RAX]
            call .L_45c7e0

            lea R8,QWORD PTR [RIP+.L_4526fb]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,RAX
            mov ECX,667
            xor EAX,EAX
            mov ESI,3
            mov RDI,R12
            call .L_448ae0

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_4526db]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push 48
.L_44d1f6:

            mov R9,QWORD PTR [RSP+24]
            mov ECX,668
            mov ESI,3
            mov RDI,R12
            call .L_448d00

            lea R8,QWORD PTR [RIP+.L_45270c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,RBX
            mov ECX,669
            mov ESI,4
            mov RDI,R12
            mov QWORD PTR [RSP],64
            call .L_448d00

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_452719]
            mov ECX,670
            mov R9,RBP
            mov ESI,4
            mov RDI,R12
            mov QWORD PTR [RSP],256
            call .L_448d00

            pop RDX
.L_44d264:

            pop RCX
.L_44d265:

            lea R10,QWORD PTR [R15+1016]
            nop
            nop
            nop
            nop
.L_44d270:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp R10,RBX
            jne .L_44d270

            mov EAX,DWORD PTR [R14+4]
            mov R9D,DWORD PTR [R14+8]
            sub EAX,6
            shr R9D,3
            and EAX,4294967293
            mov DWORD PTR [R13+8],R9D
            jne .L_44d604

            mov RAX,QWORD PTR [R13]
            mov QWORD PTR [R13+40],0
            mov EDI,12
            mov QWORD PTR [R13+24],12
            mov QWORD PTR [R13+32],4
            movzx EAX,BYTE PTR [RAX+44]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            xor ESI,ESI
            and EAX,8
            add RAX,16
            mov QWORD PTR [R13+16],RAX
.L_44d2d2:

            sub RSP,8
.L_44d2d6:

            lea R8,QWORD PTR [RIP+.L_452fc8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RSI
            push RDI
            mov ECX,767
            push RAX
            mov ESI,3
            xor EAX,EAX
            mov RDI,R12
            call .L_448ae0

            mov RAX,QWORD PTR [R12]
            add RSP,32
.L_44d303:

            test BYTE PTR [RAX+152],1
            je .L_44d57a

            mov R8,QWORD PTR [R13+40]
            mov ECX,DWORD PTR [R13+8]
            lea RAX,QWORD PTR [R8+R8*1]
            add R8,RBP
            lea RBX,QWORD PTR [RAX+RCX*1]
            add RAX,RBP
            mov QWORD PTR [RSP+32],RAX
            lea RSI,QWORD PTR [RBP+RBX*1]
            mov RBX,QWORD PTR [R13+32]
            mov QWORD PTR [RSP+24],RSI
            test RBX,RBX
            jne .L_44d342

            mov RBX,QWORD PTR [R13+24]
.L_44d342:

            mov R15,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+64]
            mov RDX,RBX
            mov QWORD PTR [RSP+40],R8
            mov QWORD PTR [RSP+16],RCX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+48]
            mov RDX,RBX
            add RCX,RBX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov R8,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+16],RBP
.L_44d383:

            mov EAX,DWORD PTR [R12+16]
            test EAX,EAX
            jle .L_44d797

            mov RDX,QWORD PTR [R13+40]
            lea RDI,QWORD PTR [R13+80]
            mov RSI,R8
            call .L_4438a0

            mov RDX,QWORD PTR [R13+40]
            mov RSI,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+104]
            call .L_4438a0

            mov RDX,QWORD PTR [R12]
            mov RAX,QWORD PTR [RDX+112]
            test RAX,RAX
            je .L_44d3d8

            mov R8D,DWORD PTR [R13+8]
            mov RDI,QWORD PTR [RDX+120]
            mov R9,RBX
            mov RCX,QWORD PTR [R13+40]
            mov RDX,RBP
            mov RSI,QWORD PTR [RSP+8]
            call RAX
.L_44d3d8:

            lea R15,QWORD PTR [R13+128]
            mov RSI,R14
            mov RDI,R15
            call .L_45a6b0

            test EAX,EAX
            jne .L_44d5ec

            add R13,208
            mov RSI,R14
            mov RDI,R13
            call .L_45a6b0

            test EAX,EAX
            jne .L_44d66b

            mov EDX,DWORD PTR [R14+8]
            mov RSI,QWORD PTR [RSP+24]
            mov ECX,1
            mov RDI,R15
            call .L_45a710

            test EAX,EAX
            jne .L_44d69c

            mov EDX,DWORD PTR [R14+8]
            mov RSI,QWORD PTR [RSP+32]
            xor ECX,ECX
            mov RDI,R13
            call .L_45a710

            mov R11D,EAX
            lea RAX,QWORD PTR [RBP+256]
            test R11D,R11D
            jne .L_44d683
.L_44d450:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RBP,RAX
            jne .L_44d450

            lea R8,QWORD PTR [RIP+.L_45275f]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,957
            mov ESI,2
            mov RDI,R12
            xor EAX,EAX
            mov DWORD PTR [RSP+8],R11D
            call .L_448ae0

            mov R11D,DWORD PTR [RSP+8]
            jmp .L_44d54e
          .byte 0x66
          .byte 0x90
.L_44d490:

            lea RBP,QWORD PTR [R15+1016]
            sub RSP,8
.L_44d49b:

            lea R8,QWORD PTR [RIP+.L_4526ca]
            push QWORD PTR [R15+944]
.L_44d4a9:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,579
            mov R9,RBP
            mov ESI,3
            mov RDI,R12
            call .L_448d00

            mov R9,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [R15+944]
            mov R8D,64
            mov QWORD PTR [RSP],48
            mov RCX,RBX
            lea RDX,QWORD PTR [RIP+.L_4526db]
            mov RDI,RBP
            call QWORD PTR [R15+936]

            mov R11D,EAX
            lea RAX,QWORD PTR [R15+1048]
            test R11D,R11D
            pop R8
.L_44d502:

            pop R9
.L_44d504:

            jne .L_44d652

            nop
            nop
            nop
            nop
            nop
            nop
.L_44d510:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RAX,RBP
            jne .L_44d510

            jmp .L_44d106
.L_44d522:

            lea R8,QWORD PTR [RIP+.L_4526e9]
            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            mov ECX,662
.L_44d535:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,R12
            call .L_448c30

            mov R11D,DWORD PTR [RSP+8]
.L_44d54e:

            mov RCX,QWORD PTR [RSP+376]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R11D
            jne .L_44d7b9

            add RSP,392
.L_44d56f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44d57a:

            mov RDX,QWORD PTR [R13+40]
            mov RBX,QWORD PTR [R13+32]
            lea RAX,QWORD PTR [RDX+RDX*1]
            lea RCX,QWORD PTR [RBP+RAX*1]
            mov QWORD PTR [RSP+24],RCX
            mov ECX,DWORD PTR [R13+8]
            add RAX,RCX
            add RAX,RBP
            test RBX,RBX
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RBP+RDX*1]
            mov QWORD PTR [RSP+16],RAX
            jne .L_44d5b2

            mov RBX,QWORD PTR [R13+24]
.L_44d5b2:

            mov R15,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R13+48]
            mov RDX,RBX
            mov QWORD PTR [RSP+40],RCX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [R13+64]
            mov RDX,RBX
            add RCX,RBX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov R8,RBP
            jmp .L_44d383
.L_44d5ec:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_452734]
            mov ECX,877
            jmp .L_44d535
.L_44d604:

            mov RBX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+80]
            mov EDX,1
            mov RSI,RBX
            call .L_443760

            test EAX,EAX
            mov R11D,EAX
            jne .L_44d639

            lea RDI,QWORD PTR [R13+104]
            mov EDX,1
            mov RSI,RBX
            call .L_443760

            test EAX,EAX
            mov R11D,EAX
            je .L_44d6b4
.L_44d639:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_452723]
            mov ECX,699
            jmp .L_44d535
.L_44d652:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_4526e9]
            mov ECX,629
            jmp .L_44d535
.L_44d66b:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_452734]
            mov ECX,884
            jmp .L_44d535
.L_44d683:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_452749]
            mov ECX,900
            jmp .L_44d535
.L_44d69c:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_452749]
            mov ECX,892
            jmp .L_44d535
.L_44d6b4:

            mov RDI,QWORD PTR [RSP+24]
            call .L_443c60

            mov EDI,DWORD PTR [R14+24]
            cmp DWORD PTR [R14+4],7
            movzx ESI,AL
            mov QWORD PTR [R13+40],RSI
            mov QWORD PTR [R13+24],RDI
            je .L_44d73c

            mov R8D,DWORD PTR [R14+32]
            xor EDX,EDX
            mov RAX,RSI
            div R8
            lea RCX,QWORD PTR [RSI+R8*1]
            mov RAX,RCX
            mov ECX,DWORD PTR [R12+16]
            sub RAX,RDX
            lea EDX,DWORD PTR [RCX-2]
            mov QWORD PTR [R13+16],RAX
            cmp EDX,1
            ja .L_44d7a8

            add RAX,RDI
            mov R9D,DWORD PTR [R13+8]
            mov QWORD PTR [R13+16],RAX
            jmp .L_44d2d2
.L_44d70f:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,562
.L_44d71b:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,R12
            xor EAX,EAX
            call .L_448ae0

            mov R11D,4294939648
            jmp .L_44d54e
.L_44d73c:

            mov QWORD PTR [R13+16],RSI
            mov R9D,DWORD PTR [R13+8]
            mov RAX,RSI
            jmp .L_44d2d2
.L_44d74c:

            mov RAX,QWORD PTR [R13]
            lea R8,QWORD PTR [RIP+.L_452699]
            mov ECX,507
            mov R9D,DWORD PTR [RAX+16]
.L_44d760:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,R12
            xor EAX,EAX
            call .L_448ae0

            mov R11D,4294938368
            jmp .L_44d54e
.L_44d781:

            mov RAX,QWORD PTR [R13]
            lea R8,QWORD PTR [RIP+.L_452f80]
            mov ECX,515
            mov R9D,DWORD PTR [RAX+20]
            jmp .L_44d760
.L_44d797:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,841
            jmp .L_44d71b
.L_44d7a8:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,759
            jmp .L_44d71b
.L_44d7b9:

            call __stack_chk_fail@PLT
.L_44d7be:

            nop
            nop
.L_44d7c0:

            push R12
            lea R8,QWORD PTR [RIP+.L_45276e]
            push RBP
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RBX
.L_44d7d2:

            xor EAX,EAX
            mov RBX,RDI
            mov ECX,2416
            mov ESI,2
            call .L_448ae0

            cmp QWORD PTR [RBX+24],0
            je .L_44d99e

            mov RAX,QWORD PTR [RBX+344]
            lea R12,QWORD PTR [RIP+.L_452ef8]
            test RAX,RAX
            jne .L_44d82a

            jmp .L_44d968
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44d810:

            mov RAX,QWORD PTR [RBX+344]
            sub RAX,RBP
            test RAX,RAX
            mov QWORD PTR [RBX+344],RAX
            je .L_44d8e0
.L_44d82a:

            mov RDX,QWORD PTR [RBX]
            mov RCX,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_453038]
            mov ESI,2
            mov RDI,RBX
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            cmp DL,1
            sbb RDX,RDX
            sub RSP,8
.L_44d857:

            and RDX,-8
            push RAX
            xor EAX,EAX
            lea R9,QWORD PTR [RDX+RCX*1+13]
            mov ECX,2435
            mov RDX,R12
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+48]
            pop RDX
            mov RDX,QWORD PTR [RBX+344]
            movzx EAX,BYTE PTR [RAX+152]
            pop RCX
.L_44d887:

            and EAX,2
            cmp AL,1
            mov RAX,QWORD PTR [RBX+336]
            sbb RCX,RCX
            and RCX,-8
            sub RAX,RDX
            lea RSI,QWORD PTR [RCX+RAX*1+13]
            add RSI,QWORD PTR [RBX+296]
            call QWORD PTR [RBX+24]

            lea R8,QWORD PTR [RIP+.L_45278e]
            movsxd RBP,EAX
            mov ECX,2441
            mov R9D,EBP
            mov RDX,R12
            mov ESI,2
            mov RDI,RBX
            call .L_448c30

            test EBP,EBP
            jg .L_44d810
.L_44d8d6:

            mov EAX,EBP
            pop RBX
.L_44d8d9:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44d8e0:

            mov EDI,8
            jmp .L_44d908
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44d8f0:

            mov RDX,QWORD PTR [RBX+288]
            lea RCX,QWORD PTR [RDX+RSI*1-1]
            add BYTE PTR [RCX],1
            jne .L_44d990

            sub EDI,1
.L_44d908:

            mov RDX,QWORD PTR [RBX]
            xor ECX,ECX
            movzx ESI,DIL
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            setne CL
            add RCX,RCX
            cmp RSI,RCX
            ja .L_44d8f0

            test DL,DL
            je .L_44d92f
.L_44d92a:

            mov EAX,2
.L_44d92f:

            cmp RSI,RAX
            je .L_44d9ca
.L_44d938:

            lea R8,QWORD PTR [RIP+.L_45277e]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            xor EBP,EBP
            mov ECX,2460
            mov ESI,2
            call .L_448ae0

            mov EAX,EBP
            pop RBX
.L_44d95f:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d968:

            lea R8,QWORD PTR [RIP+.L_45277e]
            mov RDX,R12
            mov RDI,RBX
            xor EBP,EBP
            mov ECX,2428
            mov ESI,2
            call .L_448ae0

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44d990:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44d92a

            jmp .L_44d938
.L_44d99e:

            lea R8,QWORD PTR [RIP+.L_452ff8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2421
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EBP,4294938368
            jmp .L_44d8d6
.L_44d9ca:

            lea R8,QWORD PTR [RIP+.L_453060]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2456
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EBP,4294939776
            jmp .L_44d8d6
.L_44d9f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44da00:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_44da07:

            mov RAX,QWORD PTR [RDI+88]
            mov RBX,QWORD PTR [RAX+760]
            test RBX,RBX
            je .L_44da43

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44da20:

            mov RBP,QWORD PTR [RBX+24]
            mov RDI,QWORD PTR [RBX]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,RBX
            call QWORD PTR [RIP+.L_677120]

            test RBP,RBP
            mov RBX,RBP
            jne .L_44da20

            mov RAX,QWORD PTR [R12+88]
.L_44da43:

            cmp QWORD PTR [R12+136],0
            mov EDX,DWORD PTR [RAX+724]
            mov QWORD PTR [RAX+760],0
            mov QWORD PTR [RAX+768],0
            mov DWORD PTR [RAX+776],EDX
            je .L_44da7f

            xor ESI,ESI
            mov RDI,R12
            call .L_44c8c0

            mov RAX,QWORD PTR [R12+88]
.L_44da7f:

            cmp DWORD PTR [R12+208],22
            je .L_44daa0
.L_44da8a:

            mov BYTE PTR [RAX+756],0
            pop RBX
.L_44da92:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44daa0:

            mov RDX,QWORD PTR [R12+192]
            cmp BYTE PTR [RDX],20
            jne .L_44da8a

            mov BYTE PTR [RAX+756],3
            pop RBX
            pop RBP
            pop R12
            ret 
.L_44dab9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44dac0:

            push RBX
.L_44dac1:

            mov RAX,QWORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_453088]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            mov ECX,135
            mov ESI,3
            mov R9D,DWORD PTR [RAX+140]
            mov RAX,QWORD PTR [RDI+88]
            mov DWORD PTR [RAX+752],R9D
            xor EAX,EAX
            call .L_448ae0

            cmp QWORD PTR [RBX+136],0
            mov RAX,QWORD PTR [RBX+88]
            je .L_44db18

            mov ESI,DWORD PTR [RAX+752]
            mov RDI,RBX
            call .L_44c8c0

            mov RAX,QWORD PTR [RBX+88]
.L_44db18:

            cmp DWORD PTR [RBX+208],22
            je .L_44db30
.L_44db21:

            mov BYTE PTR [RAX+756],2
            pop RBX
.L_44db29:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44db30:

            mov RDX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RDX],20
            jne .L_44db21

            mov BYTE PTR [RAX+756],3
            pop RBX
            ret 
.L_44db45:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44db50:

            push R15
            push R14
            lea R8,QWORD PTR [RIP+.L_45279a]
            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RBP
            push RBX
            mov ECX,2701
            mov RBX,RDI
            mov ESI,2
            sub RSP,56
.L_44db79:

            mov RBP,QWORD PTR [RDI+336]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44ddd0

            mov RDX,QWORD PTR [RBX+88]
            mov EAX,DWORD PTR [RBX+328]
            test RDX,RDX
            je .L_44e080

            cmp BYTE PTR [RDX+756],1
            je .L_44dbca

            cmp EAX,22
            je .L_44dddf
.L_44dbca:

            cmp BYTE PTR [RDX+756],1
            je .L_44dbe8

            mov EDX,EAX
            and EDX,4294967293
            cmp EDX,20
            je .L_44e0d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44dbe8:

            mov ECX,EBP
.L_44dbea:

            mov RDX,QWORD PTR [RBX+296]
            mov BYTE PTR [RDX],AL
            mov RDI,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RBX+296]
            mov ESI,DWORD PTR [RBX+16]
            mov EDX,DWORD PTR [RBX+12]
            test BYTE PTR [RDI+152],2
            jne .L_44e178

            mov BYTE PTR [RAX+1],DL
            mov BYTE PTR [RAX+2],SIL
.L_44dc17:

            mov RAX,QWORD PTR [RBX+304]
            shr RBP,8
            mov BYTE PTR [RAX],BPL
            mov RAX,QWORD PTR [RBX+304]
            mov BYTE PTR [RAX+1],CL
            cmp QWORD PTR [RBX+104],0
            je .L_44def6

            lea R8,QWORD PTR [RIP+.L_4527d2]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,1258
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            cmp QWORD PTR [RBX+64],0
            je .L_44e3fc

            mov RAX,QWORD PTR [RBX+104]
            test RAX,RAX
            je .L_44e3fc

            mov RAX,QWORD PTR [RAX+128]
            mov RDX,QWORD PTR [RBX+336]
            mov R9,QWORD PTR [RBX+320]
            test RAX,RAX
            je .L_44e040

            mov EBP,DWORD PTR [RAX+4]
            sub RSP,8
.L_44dc99:

            lea R8,QWORD PTR [RIP+.L_4530b0]
            push RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,1269
            mov ESI,4
            mov RDI,RBX
            sub EBP,6
            call .L_448d00

            and EBP,4294967293
            pop R11
            pop R12
.L_44dcc4:

            jne .L_44e067

            mov RAX,QWORD PTR [RBX+104]
            mov RCX,QWORD PTR [RBX]
            mov EDX,DWORD PTR [RBX+16]
            mov RAX,QWORD PTR [RAX]
            movzx EAX,BYTE PTR [RAX+44]
            and EAX,2
            cmp AL,1
            mov RAX,QWORD PTR [RBX+288]
            sbb R13D,R13D
            and R13D,8
            mov RAX,QWORD PTR [RAX]
            add R13D,8
            test BYTE PTR [RCX+152],2
            mov QWORD PTR [RSP+27],RAX
            mov EAX,DWORD PTR [RBX+328]
            mov BYTE PTR [RSP+35],AL
            mov EAX,DWORD PTR [RBX+12]
            jne .L_44e2b8

            mov BYTE PTR [RSP+36],AL
            mov BYTE PTR [RSP+37],DL
.L_44dd1c:

            mov RAX,QWORD PTR [RBX+336]
            lea R12,QWORD PTR [RSP+27]
            sub RSP,8
.L_44dd2c:

            lea R8,QWORD PTR [RIP+.L_4527e1]
            mov ECX,1371
            mov ESI,4
            mov R9,R12
            mov RDI,RBX
            mov RDX,RAX
            mov BYTE PTR [RSP+47],AL
            shr RDX,8
            mov BYTE PTR [RSP+46],DL
            push 13
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            call .L_448d00

            mov RDX,QWORD PTR [RBX+104]
            pop R9
            pop R10
.L_44dd68:

            mov RCX,QWORD PTR [RDX+32]
            mov RAX,QWORD PTR [RDX+24]
            sub RAX,RCX
            cmp RAX,8
            je .L_44e1a0

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1379
.L_44dd89:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_448ae0
.L_44dda4:

            lea R8,QWORD PTR [RIP+.L_452845]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EBP
            mov ECX,2824
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44dff0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44ddd0:

            mov EAX,DWORD PTR [RBX+328]
            cmp EAX,22
            jne .L_44dbe8
.L_44dddf:

            mov RAX,QWORD PTR [RBX+320]
            movzx R12D,BYTE PTR [RAX]
            test R12D,R12D
            jne .L_44e090
.L_44ddf3:

            lea RDX,QWORD PTR [RBP-4]
            lea ESI,DWORD PTR [RBP-4]
            mov RCX,RDX
            shr RCX,16
            mov BYTE PTR [RAX+1],CL
            mov RAX,QWORD PTR [RBX+320]
            mov RCX,RDX
            shr RCX,8
            mov BYTE PTR [RAX+2],CL
            mov RAX,QWORD PTR [RBX+320]
            mov ECX,EBP
            mov BYTE PTR [RAX+3],SIL
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44e2e0

            test R12D,R12D
            je .L_44e3e0
.L_44de3b:

            mov RAX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RBX+320]
            mov RDX,RBP
            mov RDI,RBX
            call QWORD PTR [RAX+912]
.L_44de52:

            mov RDX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RBX+328]
            test BYTE PTR [RDX+152],2
            je .L_44dbe8

            mov RDX,QWORD PTR [RBX+88]
            test RDX,RDX
            je .L_44dbe8

            jmp .L_44dbca
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44de80:

            add QWORD PTR [RBX+336],R13
            sub RSP,8
.L_44de8b:

            lea R8,QWORD PTR [RIP+.L_452823]
            push R13
.L_44de94:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,R15
            mov ECX,1426
            mov ESI,4
            mov RDI,RBX
            call .L_448d00

            lea R8,QWORD PTR [RIP+.L_452836]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,1560
            mov RDI,RBX
            xor EAX,EAX
            mov ESI,2
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+336]
            mov RDX,QWORD PTR [RBX+304]
            mov RCX,RAX
            shr RCX,8
            mov BYTE PTR [RDX],CL
            mov RDX,QWORD PTR [RBX+304]
            mov BYTE PTR [RDX+1],AL
            pop RDI
.L_44def4:

            pop R8
.L_44def6:

            mov RAX,QWORD PTR [RBX]
            mov RDX,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_453110]
            mov ECX,2838
            mov ESI,3
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
            and RAX,-8
            lea RAX,QWORD PTR [RAX+RDX*1+13]
            mov RDX,QWORD PTR [RBX+296]
            mov QWORD PTR [RBX+344],RAX
            mov RAX,QWORD PTR [RBX+304]
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,BYTE PTR [RDX+2]
            push RAX
            movzx EAX,BYTE PTR [RDX+1]
            push RAX
            movzx R9D,BYTE PTR [RDX]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            add RSP,24
.L_44df73:

            mov RDX,QWORD PTR [RBX+336]
            mov R9,QWORD PTR [RBX+296]
            lea R8,QWORD PTR [RIP+.L_452855]
            mov ECX,2841
            mov ESI,4
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RAX,QWORD PTR [RAX+RDX*1+13]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RAX
.L_44dfb5:

            call .L_448d00

            mov RDI,RBX
            call .L_44d7c0

            test EAX,EAX
            mov EBP,EAX
            pop RCX
            pop RSI
.L_44dfc8:

            jne .L_44e018

            lea R8,QWORD PTR [RIP+.L_45288c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2850
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_44dff0:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_44e46d

            add RSP,56
.L_44e00a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e018:

            lea R8,QWORD PTR [RIP+.L_452873]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,2846
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44dff0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e040:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_4530b0]
            mov ECX,1269
            push RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,4
            mov RDI,RBX
            call .L_448d00

            pop RAX
            pop RDX
.L_44e067:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1549
            jmp .L_44dd89
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e080:

            cmp EAX,22
            jne .L_44dbe8

            jmp .L_44dddf
          .byte 0x66
          .byte 0x90
.L_44e090:

            cmp QWORD PTR [RBX+88],0
            jne .L_44ddf3

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2719
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EBP,4294939648
            jmp .L_44dff0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e0d0:

            mov ESI,32
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_44e472

            mov RSI,QWORD PTR [RBX+336]
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [R12],RAX
            je .L_44e40d

            mov RSI,QWORD PTR [RBX+320]
            mov RDX,QWORD PTR [RBX+336]
            mov RDI,RAX
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+336]
            mov EDX,DWORD PTR [RBX+328]
            mov ECX,EBP
            mov QWORD PTR [R12+24],0
            mov BYTE PTR [R12+16],DL
            mov QWORD PTR [R12+8],RAX
            mov EAX,EDX
            mov RDX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RDX+760]
            test RSI,RSI
            jne .L_44e163

            jmp .L_44e3f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e160:

            mov RSI,RDX
.L_44e163:

            mov RDX,QWORD PTR [RSI+24]
            test RDX,RDX
            jne .L_44e160

            mov QWORD PTR [RSI+24],R12
            jmp .L_44dbea
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e178:

            mov EDI,ESI
            neg EDI
            cmp ESI,2
            mov ESI,4294967295
            cmovne ESI,EDI
            sub EDX,2
            not EDX
            mov BYTE PTR [RAX+2],SIL
            mov BYTE PTR [RAX+1],DL
            jmp .L_44dc17
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e1a0:

            mov RAX,QWORD PTR [RBX+288]
            sub RSP,8
.L_44e1ab:

            lea R8,QWORD PTR [RIP+.L_4527ff]
            mov ESI,4
            mov RDI,RBX
            movzx R13D,R13B
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RDX+RCX*1+48],RAX
            mov RDX,QWORD PTR [RBX+288]
            mov ECX,1388
            mov RAX,QWORD PTR [RBX+312]
            mov RDX,QWORD PTR [RDX]
            mov QWORD PTR [RAX],RDX
            mov RDX,QWORD PTR [RBX+104]
            mov R9,QWORD PTR [RBX+312]
            mov RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RAX
.L_44e1fa:

            call .L_448d00

            mov RAX,QWORD PTR [RBX+104]
            mov R14,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_4530d0]
            mov R10,QWORD PTR [RBX+320]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,1400
            mov ESI,3
            mov RDI,RBX
            mov R9,QWORD PTR [RAX+24]
            mov QWORD PTR [RSP+24],R10
            add R9,R14
            sub R9,QWORD PTR [RAX+32]
            xor EAX,EAX
            mov DWORD PTR [RSP],0
            mov QWORD PTR [RBX+336],R9
            call .L_448ae0

            mov R10,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RBX+104]
            mov R8D,13
            mov RCX,R12
            lea R15,QWORD PTR [R10+R14*1]
            mov RDX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSP],R13
            lea RSI,QWORD PTR [RDI+48]
            mov R9,R10
            sub RDI,-128
            push R15
.L_44e27c:

            lea RAX,QWORD PTR [RSP+40]
            push RAX
            push R10
            push R14
            call .L_45aa40

            add RSP,48
            test EAX,EAX
            mov EBP,EAX
            jne .L_44e370

            cmp R14,QWORD PTR [RSP+16]
            je .L_44de80

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1419
            jmp .L_44dd89
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e2b8:

            mov ECX,EDX
            neg ECX
            cmp EDX,2
            mov EDX,4294967295
            cmovne EDX,ECX
            sub EAX,2
            not EAX
            mov BYTE PTR [RSP+37],DL
            mov BYTE PTR [RSP+36],AL
            jmp .L_44dd1c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e2e0:

            mov RDI,QWORD PTR [RBX+320]
            add RBP,8
            lea RSI,QWORD PTR [RDI+4]
            add RDI,12
            call memmove@PLT

            add QWORD PTR [RBX+336],8
            test R12D,R12D
            mov RAX,QWORD PTR [RBX+320]
            je .L_44e3a0

            mov RDX,QWORD PTR [RBX+88]
            xor R14D,R14D
            mov EDX,DWORD PTR [RDX+720]
            mov BYTE PTR [RAX+4],DH
            mov RDX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RBX+320]
            mov EDX,DWORD PTR [RDX+720]
            mov BYTE PTR [RAX+5],DL
            mov RAX,QWORD PTR [RBX+88]
            add DWORD PTR [RAX+720],1
            mov RAX,QWORD PTR [RBX+320]
            mov WORD PTR [RAX+6],R14W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+320]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            jmp .L_44de3b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e370:

            lea R8,QWORD PTR [RIP+.L_452807]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,1413
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44dda4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e3a0:

            mov BYTE PTR [RAX+4],0
            mov RAX,QWORD PTR [RBX+320]
            xor R13D,R13D
            mov BYTE PTR [RAX+5],0
            mov RAX,QWORD PTR [RBX+320]
            mov WORD PTR [RAX+6],R13W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+320]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            jmp .L_44de52
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e3e0:

            movzx EAX,BYTE PTR [RBX+328]
            jmp .L_44dbea
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e3f0:

            mov QWORD PTR [RDX+760],R12
            jmp .L_44dbea
.L_44e3fc:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1262
            jmp .L_44dd89
.L_44e40d:

            mov R9,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_4527aa]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ECX,2486
            mov ESI,1
            call .L_448ae0

            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]
.L_44e43d:

            lea R8,QWORD PTR [RIP+.L_4527c0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,4294934784
            mov ECX,2775
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            mov EBP,4294934784
            jmp .L_44dff0
.L_44e46d:

            call __stack_chk_fail@PLT
.L_44e472:

            lea R8,QWORD PTR [RIP+.L_4527aa]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,32
            mov ECX,2480
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44e43d
.L_44e49c:

            nop
            nop
            nop
            nop
.L_44e4a0:

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_45289c]
            push RBX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,2591
            mov ESI,2
            sub RSP,16
.L_44e4c5:

            call .L_448ae0

            mov RAX,QWORD PTR [RBX+88]
            cmp BYTE PTR [RAX+756],1
            je .L_44e51e

            lea R8,QWORD PTR [RIP+.L_4528b2]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2595
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+88]
            mov RDI,RBX
            mov RDX,QWORD PTR [RAX+760]
            mov QWORD PTR [RAX+768],RDX
            call .L_44c7d0

            mov RAX,QWORD PTR [RBX+88]
            mov BYTE PTR [RAX+756],1
.L_44e51e:

            lea R12,QWORD PTR [RIP+.L_453150]
            jmp .L_44e5a3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e530:

            mov RDI,QWORD PTR [RBX+320]
            mov RDX,QWORD PTR [RBP+8]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP+8]
            mov RDX,QWORD PTR [RBP+24]
            sub RSP,8
.L_44e54c:

            mov R9,QWORD PTR [RBX+320]
            mov ECX,2623
            mov R8,R12
            mov ESI,3
            mov RDI,RBX
            mov QWORD PTR [RBX+336],RAX
            movzx EAX,BYTE PTR [RBP+16]
            mov DWORD PTR [RBX+328],EAX
            mov RAX,QWORD PTR [RBX+88]
            mov QWORD PTR [RAX+768],RDX
            push 12
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            call .L_448d00

            mov RDI,RBX
            call .L_44db50

            test EAX,EAX
            pop RDX
            pop RCX
.L_44e599:

            jne .L_44e640

            mov RAX,QWORD PTR [RBX+88]
.L_44e5a3:

            mov RBP,QWORD PTR [RAX+768]
            test RBP,RBP
            je .L_44e5e0

            cmp BYTE PTR [RBP+16],22
            mov RSI,QWORD PTR [RBP]
            jne .L_44e530

            cmp BYTE PTR [RSI],20
            jne .L_44e530

            mov RDI,RBX
            call .L_44c7d0

            mov RSI,QWORD PTR [RBP]
            jmp .L_44e530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e5e0:

            cmp DWORD PTR [RBX+8],16
            je .L_44e678

            mov BYTE PTR [RAX+756],2
            cmp QWORD PTR [RBX+136],0
            je .L_44e609

            mov ESI,DWORD PTR [RAX+752]
            mov RDI,RBX
            call .L_44c8c0
.L_44e609:

            lea R8,QWORD PTR [RIP+.L_4528e0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2640
            mov ESI,2
            call .L_448ae0

            add RSP,16
.L_44e62f:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e640:

            lea R8,QWORD PTR [RIP+.L_4528c7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,2627
            mov ESI,1
            mov DWORD PTR [RSP+12],EAX
            call .L_448c30

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e678:

            mov BYTE PTR [RAX+756],3
            jmp .L_44e609
.L_44e681:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e690:

            push R13
            push R12
            lea R8,QWORD PTR [RIP+.L_4528f6]
            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            mov R12,RSI
            sub RSP,8
.L_44e6b0:

            mov ECX,2208
            mov ESI,2
            call .L_448ae0

            cmp QWORD PTR [RBX+32],0
            je .L_44ea28
.L_44e6ca:

            mov RDX,QWORD PTR [RBX+168]
            sub RDX,QWORD PTR [RBX+152]
            mov EAX,813
            sub RAX,RDX
            cmp RAX,R12
            jb .L_44ebbe

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44e8a0

            cmp QWORD PTR [RBX+136],0
            je .L_44ebfb

            cmp QWORD PTR [RBX+144],0
            je .L_44ebfb

            mov RAX,QWORD PTR [RBX+240]
            mov R9,QWORD PTR [RBX+224]
            test RAX,RAX
            je .L_44e74f

            cmp RAX,R9
            ja .L_44ec16

            sub R9,RAX
            test R9,R9
            mov QWORD PTR [RBX+224],R9
            jne .L_44eb50
.L_44e744:

            mov QWORD PTR [RBX+240],0
.L_44e74f:

            sub RSP,8
.L_44e753:

            lea R8,QWORD PTR [RIP+.L_452905]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push R12
            xor EAX,EAX
            mov ECX,2269
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_45291e]
            mov ECX,2276
            pop R9
            pop R10
.L_44e78e:

            cmp RAX,R12
            jae .L_44e874

            test RAX,RAX
            jne .L_44ebcf

            mov RDI,RBX
            call .L_44c910

            test EAX,EAX
            jne .L_44ea60

            mov RAX,QWORD PTR [RBX+168]
            sub RAX,QWORD PTR [RBX+152]
            mov EDX,813
            sub RDX,RAX
            cmp DWORD PTR [RBX+8],16
            mov RBP,RDX
            je .L_44eb38

            mov RAX,QWORD PTR [RBX+88]
            mov R12D,DWORD PTR [RAX+752]
.L_44e7de:

            lea R8,QWORD PTR [RIP+.L_452935]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ESI,3
            mov RDI,RBX
            mov R9D,R12D
            mov ECX,2307
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+40]
            mov RSI,QWORD PTR [RBX+168]
            mov RDI,QWORD PTR [RBX+48]
            test RAX,RAX
            je .L_44ebb0

            mov RDX,RBP
            mov ECX,R12D
            call RAX

            movsxd RBP,EAX
.L_44e826:

            lea R8,QWORD PTR [RIP+.L_45294b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EBP
            mov ECX,2315
            mov ESI,2
            mov RDI,RBX
            call .L_448c30

            test EBP,EBP
            je .L_44eba0

            cmp EBP,4294940672
            je .L_44ea60

            test EBP,EBP
            js .L_44e88c

            mov QWORD PTR [RBX+224],RBP
.L_44e868:

            lea R8,QWORD PTR [RIP+.L_45291e]
            mov ECX,2403
.L_44e874:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            xor EBP,EBP
            call .L_448ae0
.L_44e88c:

            add RSP,8
.L_44e890:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e8a0:

            sub RSP,8
            mov R9,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_452905]
            push R12
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2366
            mov ESI,2
            call .L_448ae0

            mov RBP,QWORD PTR [RBX+224]
            pop RDI
            pop R8
.L_44e8d9:

            cmp R12,RBP
            jbe .L_44e868

            lea R13,QWORD PTR [RIP+.L_452905]
            jmp .L_44e998
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e8f0:

            mov RAX,QWORD PTR [RBX+40]
            mov RDX,R12
            mov RSI,QWORD PTR [RBX+224]
            sub RDX,RBP
            add RSI,QWORD PTR [RBX+168]
            mov RDI,QWORD PTR [RBX+48]
            test RAX,RAX
            je .L_44ea18

            mov RCX,QWORD PTR [RBX]
            mov ECX,DWORD PTR [RCX+136]
            call RAX

            movsxd RBP,EAX
.L_44e923:

            sub RSP,8
.L_44e927:

            mov R9,QWORD PTR [RBX+224]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push R12
            xor EAX,EAX
            mov R8,R13
            mov ECX,2390
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_45294b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2391
            mov ESI,2
            mov R9D,EBP
            mov RDI,RBX
            call .L_448c30

            test EBP,EBP
            pop RCX
            pop RSI
            je .L_44eba0

            js .L_44e88c

            add RBP,QWORD PTR [RBX+224]
            cmp RBP,R12
            mov QWORD PTR [RBX+224],RBP
            jae .L_44e868
.L_44e998:

            mov RDI,RBX
            call .L_44c910

            test EAX,EAX
            je .L_44e8f0

            sub RSP,8
            mov R9,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_452905]
            push R12
.L_44e9bc:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2390
            mov ESI,2
            call .L_448ae0

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_45294b]
            mov RDI,RBX
            mov R9D,4294940672
            mov ECX,2391
            mov ESI,2
            call .L_448c30

            pop RAX
.L_44e9fe:

            pop RDX
            mov EBP,4294940672
            mov EAX,EBP
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44ea18:

            call QWORD PTR [RBX+32]

            movsxd RBP,EAX
            jmp .L_44e923
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ea28:

            cmp QWORD PTR [RBX+40],0
            jne .L_44e6ca

            lea R8,QWORD PTR [RIP+.L_452ff8]
            mov ECX,2213
.L_44ea3f:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294938368
            call .L_448ae0

            jmp .L_44e88c
          .byte 0x90
.L_44ea60:

            lea R8,QWORD PTR [RIP+.L_45292d]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,2323
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            cmp QWORD PTR [RBX+136],0
            je .L_44ea96

            xor ESI,ESI
            mov RDI,RBX
            call .L_44c8c0
.L_44ea96:

            cmp DWORD PTR [RBX+8],16
            mov EBP,4294940672
            je .L_44e88c

            mov RCX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RCX+752]
            mov R9D,DWORD PTR [RDX+144]
            cmp EAX,R9D
            jae .L_44ec24

            lea EDX,DWORD PTR [RAX+RAX*1]
            cmp EAX,EDX
            ja .L_44ead0

            cmp R9D,EDX
            cmovae R9D,EDX
.L_44ead0:

            lea R8,QWORD PTR [RIP+.L_453088]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov DWORD PTR [RCX+752],R9D
            xor EAX,EAX
            mov ECX,126
            mov ESI,3
            mov RDI,RBX
            call .L_448ae0

            mov RDI,RBX
            call .L_44e4a0

            test EAX,EAX
            mov EBP,EAX
            je .L_44ec0c

            lea R8,QWORD PTR [RIP+.L_452973]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,2336
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44e88c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44eb38:

            mov RAX,QWORD PTR [RBX]
            mov R12D,DWORD PTR [RAX+136]
            jmp .L_44e7de
          .byte 0x66

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44eb50:

            lea R8,QWORD PTR [RIP+.L_4531c8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,RAX
            mov ECX,2259
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov RDI,QWORD PTR [RBX+168]
            mov RSI,QWORD PTR [RBX+240]
            mov RDX,QWORD PTR [RBX+224]
            add RSI,RDI
            call memmove@PLT

            mov R9,QWORD PTR [RBX+224]
            jmp .L_44e744
          .byte 0x66
          .byte 0x90
.L_44eba0:

            mov EBP,4294937984
            jmp .L_44e88c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ebb0:

            mov RDX,RBP
            call QWORD PTR [RBX+32]

            movsxd RBP,EAX
            jmp .L_44e826
.L_44ebbe:

            lea R8,QWORD PTR [RIP+.L_453170]
            mov ECX,2219
            jmp .L_44ea3f
.L_44ebcf:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,2287
.L_44ebdb:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_448ae0

            jmp .L_44e88c
.L_44ebfb:

            lea R8,QWORD PTR [RIP+.L_453190]
            mov ECX,2232
            jmp .L_44ea3f
.L_44ec0c:

            mov EBP,4294940416
            jmp .L_44e88c
.L_44ec16:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,2250
            jmp .L_44ebdb
.L_44ec24:

            lea R8,QWORD PTR [RIP+.L_452961]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2330
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            jmp .L_44e88c
.L_44ec4b:

            nop
            nop
            nop
            nop
            nop
.L_44ec50:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,24
.L_44ec61:

            mov RAX,QWORD PTR [RDI]
            mov R9,QWORD PTR [RDI+216]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RDX,RDX
            and RDX,-8
            add RDX,12
            cmp R9,RDX
            jb .L_44f310

            mov RCX,QWORD PTR [RDI+192]
            lea R8,QWORD PTR [RIP+.L_453218]
            movzx EAX,BYTE PTR [RCX+1]
            movzx ESI,BYTE PTR [RCX+2]
            shl EAX,16
            shl ESI,8
            or EAX,ESI
            movzx ESI,BYTE PTR [RCX+3]
            or EAX,ESI
            mov ESI,3
            cdqe 
            add RAX,RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov QWORD PTR [RDI+264],RAX
            push RAX
.L_44ecc8:

            movzx EAX,BYTE PTR [RCX]
            mov ECX,3089
            push RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            pop R13
            pop R14
.L_44ecdf:

            test BYTE PTR [RAX+152],2
            je .L_44edb0

            mov RDX,QWORD PTR [RBX+88]
            mov RCX,QWORD PTR [RBX+192]
            test RDX,RDX
            je .L_44edd8

            movzx EAX,WORD PTR [RCX+4]
            mov ESI,DWORD PTR [RDX+724]
            rol AX,8
            movzx EAX,AX
            cmp ESI,EAX
            je .L_44edd8

            mov EDX,DWORD PTR [RDX+776]
            lea R9D,DWORD PTR [RDX-1]
            cmp R9D,EAX
            jne .L_44f339

            cmp BYTE PTR [RCX],3
            je .L_44f339

            sub RSP,8
.L_44ed39:

            lea R8,QWORD PTR [RIP+.L_453250]
            xor EAX,EAX
            push RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,3110
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov RDI,RBX
            call .L_44e4a0

            test EAX,EAX
            pop RBP
            pop R12
            je .L_44f371

            lea R8,QWORD PTR [RIP+.L_452973]
            mov R9D,EAX
            mov DWORD PTR [RSP],EAX
            mov ECX,3114
.L_44ed81:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ESI,1
            call .L_448c30

            mov EAX,DWORD PTR [RSP]
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44edb0:

            mov RAX,QWORD PTR [RBX+264]
            cmp QWORD PTR [RBX+216],RAX
            jb .L_44f37b

            xor EAX,EAX
.L_44edc6:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44edd8:

            mov RAX,QWORD PTR [RBX+264]
            cmp QWORD PTR [RBX+216],RAX
            jb .L_44ee10

            movzx EDI,WORD PTR [RIP+.L_453890]
            cmp WORD PTR [RCX+6],DI
            jne .L_44ee10

            movzx EDI,BYTE PTR [RIP+.L_453892]
            cmp BYTE PTR [RCX+8],DIL
            je .L_44f1d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ee10:

            lea R8,QWORD PTR [RIP+.L_4532e8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3137
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+88]
            mov R14,QWORD PTR [RBX+264]
            test RAX,RAX
            lea R12,QWORD PTR [R14-12]
            je .L_44f44a

            mov R11,QWORD PTR [RAX+744]
            test R11,R11
            je .L_44f238

            mov RAX,QWORD PTR [RBX+192]
            mov EDI,DWORD PTR [R11]
            cmp DWORD PTR [RAX],EDI
            jne .L_44f209
.L_44ee6c:

            movzx R15D,BYTE PTR [RAX+6]
            movzx EDX,BYTE PTR [RAX+7]
            add R14,R11
            movzx EBP,BYTE PTR [RAX+9]
            shl EDX,8
            shl R15D,16
            or R15D,EDX
            movzx EDX,BYTE PTR [RAX+8]
            shl EBP,16
            or R15D,EDX
            movzx EDX,BYTE PTR [RAX+10]
            movsxd R13,R15D
            shl EDX,8
            or EBP,EDX
            movzx EDX,BYTE PTR [RAX+11]
            or EBP,EDX
            movsxd RBP,EBP
            lea RAX,QWORD PTR [R13+RBP*1]
            cmp R12,RAX
            jb .L_44f40a

            lea RAX,QWORD PTR [RBP+12]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            mov RAX,QWORD PTR [RBX+216]
            cmp RDI,RAX
            ja .L_44f3a7

            mov QWORD PTR [RSP+8],R11
            sub RSP,8
.L_44eed7:

            lea R8,QWORD PTR [RIP+.L_4533c8]
            push RBP
.L_44eedf:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,3008
            xor EAX,EAX
            mov R9,R13
            mov ESI,2
            mov RDI,RBX
            and R15D,7
            call .L_448ae0

            mov R11,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RBX+192]
            mov RDX,RBP
            lea RDI,QWORD PTR [R11+R13*1+12]
            lea RSI,QWORD PTR [RAX+12]
            call memcpy@PLT

            mov EAX,8
            mov RDI,R13
            sub EAX,R15D
            shr RDI,3
            cmp EAX,8
            pop RCX
.L_44ef31:

            pop RSI
.L_44ef32:

            je .L_44efa3

            mov EDX,EAX
            cmp RBP,RDX
            ja .L_44ef70

            test RBP,RBP
            je .L_44eff5

            add RDI,R14
            mov ESI,1
            movzx EDX,BYTE PTR [RDI]
            nop
.L_44ef50:

            mov ECX,EAX
            mov R10D,ESI
            sub ECX,EBP
            shl R10D,CL
            or EDX,R10D
            sub RBP,1
            jne .L_44ef50

            mov BYTE PTR [RDI],DL
            jmp .L_44eff5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ef70:

            add RDI,R14
            add R13,RDX
            sub RBP,RDX
            movzx EDX,BYTE PTR [RDI]
            mov ESI,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ef88:

            sub EAX,1
            mov R10D,ESI
            mov ECX,EAX
            shl R10D,CL
            or EDX,R10D
            test EAX,EAX
            jne .L_44ef88

            mov BYTE PTR [RDI],DL
            mov RDI,R13
            shr RDI,3
.L_44efa3:

            mov ESI,EBP
            and ESI,7
            je .L_44efe1

            lea R10,QWORD PTR [RBP+R13*1]
            mov EAX,ESI
            mov ECX,8
            sub RBP,RAX
            sub ECX,ESI
            mov R8D,1
            shr R10,3
            lea RAX,QWORD PTR [R14+R10*1]
            movzx EDX,BYTE PTR [RAX]
            nop
            nop
            nop
            nop
.L_44efd0:

            mov ESI,R8D
            shl ESI,CL
            add ECX,1
            or EDX,ESI
            cmp ECX,8
            jne .L_44efd0

            mov BYTE PTR [RAX],DL
.L_44efe1:

            mov RDX,RBP
            add RDI,R14
            mov ESI,255
            shr RDX,3
            call memset@PLT
.L_44eff5:

            mov RCX,R12
            shr RCX,3
            test RCX,RCX
            je .L_44f02b

            cmp BYTE PTR [R14],255
            jne .L_44f188

            lea RAX,QWORD PTR [R14+1]
            lea RDX,QWORD PTR [R14+RCX*1]
            jmp .L_44f026
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f018:

            add RAX,1
            cmp BYTE PTR [RAX-1],255
            jne .L_44f188
.L_44f026:

            cmp RAX,RDX
            jne .L_44f018
.L_44f02b:

            and R12D,7
            je .L_44f063

            movzx ESI,BYTE PTR [R14+RCX*1]
            test SIL,SIL
            jns .L_44f188

            mov EDX,7
            mov ECX,6
            sub EDX,R12D
            jmp .L_44f05f
          .byte 0x66
          .byte 0x90
.L_44f050:

            mov EAX,ESI
            sar EAX,CL
            sub ECX,1
            test AL,1
            je .L_44f188
.L_44f05f:

            cmp ECX,EDX
            jne .L_44f050
.L_44f063:

            lea R8,QWORD PTR [RIP+.L_452a2b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3023
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RSP]
            cmp RAX,QWORD PTR [RBX+216]
            jb .L_44f41e

            mov RAX,QWORD PTR [RBX+224]
            mov R8,QWORD PTR [RBX+240]
            mov RDI,QWORD PTR [RBX+192]
            mov RDX,QWORD PTR [RBX+264]
            cmp RAX,R8
            jbe .L_44f10e

            mov RCX,QWORD PTR [RBX+168]
            sub RAX,R8
            add RDI,RDX
            mov RDX,RAX
            mov RAX,RDI
            sub RAX,RCX
            lea RSI,QWORD PTR [RCX+R8*1]
            sub RCX,QWORD PTR [RBX+152]
            mov R8D,813
            mov QWORD PTR [RBX+240],RAX
            add RAX,RDX
            mov QWORD PTR [RBX+224],RAX
            sub R8,RCX
            cmp RAX,R8
            ja .L_44f3de

            call memmove@PLT

            mov RDX,QWORD PTR [RBX+264]
            mov RDI,QWORD PTR [RBX+192]
.L_44f10e:

            mov RAX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RAX+744]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+88]
            mov RDI,QWORD PTR [RAX+744]
            call QWORD PTR [RIP+.L_677120]

            mov RAX,QWORD PTR [RBX+88]
            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_44f13e:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_4529d3]
            mov RDI,RBX
            mov ECX,3067
            mov ESI,3
            mov QWORD PTR [RAX+744],0
            push QWORD PTR [RBX+264]
            call .L_448d00

            pop RAX
            pop RDX
            xor EAX,EAX
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f188:

            lea R8,QWORD PTR [RIP+.L_452a0f]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3019
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294940416
.L_44f1af:

            mov R9D,EAX
            mov DWORD PTR [RSP],EAX
            lea R8,QWORD PTR [RIP+.L_4529f1]
            mov ECX,3141
            jmp .L_44ed81
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f1d0:

            movzx EDI,WORD PTR [RCX+1]
            cmp WORD PTR [RCX+9],DI
            jne .L_44ee10

            movzx EAX,BYTE PTR [RCX+3]
            cmp BYTE PTR [RCX+11],AL
            jne .L_44ee10

            xor EAX,EAX
            test RDX,RDX
            je .L_44edc6

            cmp QWORD PTR [RDX+744],0
            jne .L_44ee10

            jmp .L_44edc6
.L_44f209:

            lea R8,QWORD PTR [RIP+.L_4529ba]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,2975
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294938112
            jmp .L_44f1af
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f238:

            lea R8,QWORD PTR [RIP+.L_453340]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov R9,R12
            mov ECX,2945
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            cmp QWORD PTR [RBX+264],768
            ja .L_44f4a1

            xor EBP,EBP
            mov RAX,R12
            test R12B,7
            setne BPL
            mov R13,QWORD PTR [RBX+88]
            shr RAX,3
            add RAX,R14
            mov EDI,1
            add RBP,RAX
            mov RSI,RBP
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [R13+744],RAX
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            test RAX,RAX
            je .L_44f474

            mov RDX,QWORD PTR [RBX+192]
            xor R9D,R9D
            mov ECX,DWORD PTR [RDX]
            mov DWORD PTR [RAX],ECX
            movzx EDX,WORD PTR [RDX+4]
            mov WORD PTR [RAX+4],DX
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            mov WORD PTR [RAX+6],R9W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            mov RAX,QWORD PTR [RBX+88]
            mov R11,QWORD PTR [RAX+744]
            mov RAX,QWORD PTR [RBX+192]
            jmp .L_44ee6c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f310:

            lea R8,QWORD PTR [RIP+.L_4531f8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3078
            mov ESI,1
            call .L_448ae0

            mov EAX,4294938112
            jmp .L_44edc6
.L_44f339:

            sub RSP,8
.L_44f33d:

            lea R8,QWORD PTR [RIP+.L_4532a0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RSI
            mov R9D,EAX
            mov ECX,3123
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            pop R10
            mov EAX,4294940416
            pop R11
            jmp .L_44edc6
.L_44f371:

            mov EAX,4294940416
            jmp .L_44edc6
.L_44f37b:

            lea R8,QWORD PTR [RIP+.L_453450]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3151
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294938496
            jmp .L_44edc6
.L_44f3a7:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_4533a0]
            mov R9,RBP
            push RAX
            mov ECX,3003
.L_44f3bb:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ESI,1
            call .L_448ae0

            pop RDI
            mov EAX,4294938112
            pop R8
            jmp .L_44f1af
.L_44f3de:

            lea R8,QWORD PTR [RIP+.L_453420]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3054
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294940160
            jmp .L_44f1af
.L_44f40a:

            push R12
            mov R9,R13
            push RBP
            lea R8,QWORD PTR [RIP+.L_453370]
            mov ECX,2996
            jmp .L_44f3bb
.L_44f41e:

            lea R8,QWORD PTR [RIP+.L_4533f8]
            mov ECX,3032
.L_44f42a:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294938496
            jmp .L_44f1af
.L_44f44a:

            lea R8,QWORD PTR [RIP+.L_453310]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2933
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294938496
            jmp .L_44f1af
.L_44f474:

            lea R8,QWORD PTR [RIP+.L_4529a2]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,RBP
            mov ECX,2959
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294934784
            jmp .L_44f1af
.L_44f4a1:

            lea R8,QWORD PTR [RIP+.L_452986]
            mov ECX,2949
            jmp .L_44f42a
.L_44f4b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f4c0:

            cmp DWORD PTR [RDI+8],16
            push RBX
            mov RBX,RDI
            je .L_44f4e7

            mov RAX,QWORD PTR [RDI+88]
            test RAX,RAX
            je .L_44f503

            mov RDX,QWORD PTR [RDI+264]
            mov RSI,QWORD PTR [RDI+192]
            call QWORD PTR [RAX+912]
.L_44f4e7:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44f503

            mov RAX,QWORD PTR [RBX+88]
            test RAX,RAX
            je .L_44f503

            add DWORD PTR [RAX+724],1
.L_44f503:

            pop RBX
            ret 
.L_44f505:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f510:

            mov RDX,QWORD PTR [RDI]
            xor EAX,EAX
            test BYTE PTR [RDX+153],2
            je .L_44f58a

            mov RCX,QWORD PTR [RDI+160]
            movzx EDX,BYTE PTR [RCX+2]
            movzx ESI,BYTE PTR [RCX+3]
            shl RDX,40
            shl RSI,32
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+7]
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+4]
            shl RSI,24
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+5]
            movzx ECX,BYTE PTR [RCX+6]
            shl RSI,16
            shl RCX,8
            or RDX,RSI
            or RDX,RCX
            mov RCX,QWORD PTR [RDI+248]
            cmp RCX,RDX
            jb .L_44f58a

            sub RCX,RDX
            cmp RCX,63
            ja .L_44f585

            mov RAX,QWORD PTR [RDI+256]
            shr RAX,CL
            and EAX,1
            neg EAX
            ret 
.L_44f585:

            mov EAX,4294967295
.L_44f58a:

            ret 
.L_44f58c:

            nop
            nop
            nop
            nop
.L_44f590:

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+153],2
            je .L_44f638

            mov RDX,QWORD PTR [RDI+160]
            movzx EAX,BYTE PTR [RDX+2]
            movzx ECX,BYTE PTR [RDX+3]
            shl RAX,40
            shl RCX,32
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+7]
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+4]
            shl RCX,24
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+5]
            movzx EDX,BYTE PTR [RDX+6]
            shl RCX,16
            shl RDX,8
            or RAX,RCX
            mov RCX,QWORD PTR [RDI+248]
            or RAX,RDX
            cmp RCX,RAX
            jae .L_44f620

            mov RSI,RAX
            sub RSI,RCX
            cmp RSI,63
            mov RCX,RSI
            ja .L_44f640

            mov RDX,QWORD PTR [RDI+256]
            mov QWORD PTR [RDI+248],RAX
            shl RDX,CL
            or RDX,1
            mov QWORD PTR [RDI+256],RDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f620:

            sub RCX,RAX
            cmp RCX,63
            ja .L_44f638

            mov EAX,1
            shl RAX,CL
            or QWORD PTR [RDI+256],RAX
.L_44f638:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f640:

            mov QWORD PTR [RDI+256],1
            mov QWORD PTR [RDI+248],RAX
            ret 
.L_44f653:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f660:

            push RBX
            mov EDX,DWORD PTR [RDI+208]
            mov RBX,RDI
            cmp EDX,22
            je .L_44f708
.L_44f673:

            xor EAX,EAX
            cmp EDX,21
            je .L_44f680
.L_44f67a:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44f680:

            mov RAX,QWORD PTR [RBX+192]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_453480]
            mov ECX,4072
            mov ESI,2
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+1]
            push RDX
            movzx R9D,BYTE PTR [RAX]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            call .L_448ae0

            mov RCX,QWORD PTR [RBX+192]
            pop RAX
            pop RSI
.L_44f6bf:

            movzx EDX,BYTE PTR [RCX]
            cmp DL,2
            je .L_44f720

            cmp DL,1
            mov EAX,4294941056
            jne .L_44f67a

            movzx EDX,BYTE PTR [RCX+1]
            test DL,DL
            je .L_44f74e

            cmp DL,100
            jne .L_44f67a

            lea R8,QWORD PTR [RIP+.L_452a61]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4095
            mov ESI,2
            call .L_448ae0

            xor EAX,EAX
            pop RBX
.L_44f703:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44f708:

            call .L_44ec50

            test EAX,EAX
            jne .L_44f67a

            mov EDX,DWORD PTR [RBX+208]
            jmp .L_44f673
.L_44f720:

            movzx R9D,BYTE PTR [RCX+1]
            lea R8,QWORD PTR [RIP+.L_4534a8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4080
            mov ESI,1
            call .L_448ae0

            mov EAX,4294936704
            pop RBX
.L_44f74d:

            ret 
.L_44f74e:

            lea R8,QWORD PTR [RIP+.L_452a47]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4087
            mov ESI,2
            call .L_448ae0

            mov EAX,4294936448
            pop RBX
            ret 
.L_44f777:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f780:

            test RDI,RDI
            push R12
            push RBP
            push RBX
            je .L_44f880

            cmp QWORD PTR [RDI],0
            je .L_44f880

            mov EBP,EDX
            lea R8,QWORD PTR [RIP+.L_452a74]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R12D,ESI
            xor EAX,EAX
            mov ECX,4143
            mov ESI,2
            mov RBX,RDI
            call .L_448ae0

            sub RSP,8
            movzx EAX,BPL
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RAX
.L_44f7ce:

            lea R8,QWORD PTR [RIP+.L_4534d0]
            xor EAX,EAX
            movzx R9D,R12B
            mov ECX,4144
            mov ESI,3
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+320]
            mov DWORD PTR [RBX+328],21
            mov RDI,RBX
            mov QWORD PTR [RBX+336],2
            mov BYTE PTR [RAX],R12B
            mov RAX,QWORD PTR [RBX+320]
            mov BYTE PTR [RAX+1],BPL
            call .L_44db50

            mov EBP,EAX
            test EBP,EBP
            pop RAX
.L_44f824:

            pop RDX
            jne .L_44f850

            lea R8,QWORD PTR [RIP+.L_452a8a]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4156
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_44f849:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_44f850:

            lea R8,QWORD PTR [RIP+.L_4528c7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EBP
            mov RDI,RBX
            mov ECX,4153
            mov ESI,1
            call .L_448c30

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f880:

            mov EBP,4294938368
            jmp .L_44f849
.L_44f887:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f890:

            mov EDX,40
            mov ESI,2
            jmp .L_44f780
.L_44f89f:

            nop
.L_44f8a0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,56
.L_44f8b1:

            mov RSI,QWORD PTR [RDI+264]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+200]
            test RSI,RSI
            je .L_44fc10

            test RAX,RAX
            jne .L_4503ff

            mov RDX,QWORD PTR [RDI+216]
            cmp RSI,RDX
            jb .L_450330

            mov QWORD PTR [RDI+216],0
            mov QWORD PTR [RDI+264],0
.L_44f907:

            lea RAX,QWORD PTR [RSP+27]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_44faa6
          .byte 0x90
.L_44f920:

            mov RAX,QWORD PTR [RAX+16]
            cmp R8,RAX
            jb .L_45050c

            mov R14D,DWORD PTR [RBX+16]
            test R14D,R14D
            jle .L_44f945

            add RAX,1024
            cmp R8,RAX
            ja .L_45051d
.L_44f945:

            test BYTE PTR [RCX+152],2
            je .L_450110

            mov RAX,QWORD PTR [RBX+160]
            movzx EBP,WORD PTR [RAX]
            rol BP,8
            cmp ESI,20
            movzx EBP,BP
            je .L_450150

            cmp ESI,23
            jne .L_44f97b

            cmp DWORD PTR [RBX+8],16
            jne .L_45052e
.L_44f97b:

            movzx R9D,WORD PTR [RBX+232]
            cmp EBP,R9D
            je .L_44fca0

            sub RSP,8
.L_44f990:

            lea R8,QWORD PTR [RIP+.L_4535a8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RBP
            xor EAX,EAX
            mov ECX,3602
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            pop R12
            pop R13
.L_44f9ba:

            movzx EAX,BYTE PTR [RAX+152]
            test AL,1
            je .L_450310

            cmp DWORD PTR [RBX+8],16
            jne .L_450310

            test EBP,EBP
            jne .L_450310

            cmp WORD PTR [RBX+232],1
            jne .L_450310

            cmp DWORD PTR [RBX+208],22
            jne .L_450310

            cmp QWORD PTR [RBX+224],13
            jbe .L_450310

            mov RDX,QWORD PTR [RBX+152]
            cmp BYTE PTR [RDX+13],16
            jne .L_450310

            lea R8,QWORD PTR [RIP+.L_4535e0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3617
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RDI,RBX
            call .L_44e4a0

            test EAX,EAX
            mov EBP,EAX
            je .L_4501a0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44fc1b

            cmp EBP,4294940800
            je .L_44fc1b

            cmp EBP,4294940928
            jne .L_44fc72
.L_44fa71:

            mov RAX,QWORD PTR [RBX+216]
            lea R8,QWORD PTR [RIP+.L_453558]
            mov ECX,3911
            add RAX,13
            mov QWORD PTR [RBX+240],RAX
            nop
.L_44fa90:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_44faa6:

            mov RAX,QWORD PTR [RBX]
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,13
            call .L_44e690

            test EAX,EAX
            mov EBP,EAX
            jne .L_4503c8

            mov RAX,QWORD PTR [RBX]
            mov R9,QWORD PTR [RBX+168]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_452ad4]
            mov ECX,3478
            mov ESI,4
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
.L_44fb0a:

            and RAX,-8
            add RAX,13
            push RAX
            call .L_448d00

            mov RDX,QWORD PTR [RBX+168]
            mov RAX,QWORD PTR [RBX+176]
            mov RCX,QWORD PTR [RBX]
            pop R15
            movzx R9D,BYTE PTR [RDX]
            pop RSI
            mov DWORD PTR [RBX+208],R9D
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            test BYTE PTR [RCX+152],2
            movzx EAX,AX
            mov QWORD PTR [RBX+216],RAX
            jne .L_450120

            movzx R12D,BYTE PTR [RDX+1]
            movzx EBP,BYTE PTR [RDX+2]
.L_44fb5e:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_4534f0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push RAX
            push RBP
            xor EAX,EAX
            push R12
            mov ESI,3
            mov ECX,3487
            mov RDI,RBX
            call .L_448ae0

            mov ESI,DWORD PTR [RBX+208]
            add RSP,32
.L_44fb92:

            lea EAX,DWORD PTR [RSI-20]
            cmp EAX,3
            ja .L_450461

            cmp DWORD PTR [RBX+12],R12D
            jne .L_44fc40

            mov RCX,QWORD PTR [RBX]
            movzx EAX,BYTE PTR [RCX+149]
            cmp EAX,EBP
            jl .L_4504ea

            mov RDX,QWORD PTR [RBX+192]
            sub RDX,QWORD PTR [RBX+152]
            mov EAX,813
            mov R8,QWORD PTR [RBX+216]
            sub RAX,RDX
            cmp R8,RAX
            ja .L_4504fb

            mov RAX,QWORD PTR [RBX+96]
            test RAX,RAX
            jne .L_44f920

            lea RAX,QWORD PTR [R8-1]
            cmp RAX,767
            jbe .L_44f945

            lea R8,QWORD PTR [RIP+.L_452b2a]
            mov ECX,3528
            jmp .L_44fc4c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44fc10:

            test RAX,RAX
            je .L_450320
.L_44fc19:

            xor EBP,EBP
.L_44fc1b:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_45061a

            add RSP,56
.L_44fc35:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44fc40:

            lea R8,QWORD PTR [RIP+.L_452afc]
            mov ECX,3504
.L_44fc4c:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4504a5
.L_44fc72:

            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+224],0
            lea R8,QWORD PTR [RIP+.L_453610]
            mov ECX,3920
            jmp .L_44fa90
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fca0:

            mov RDI,RBX
            call .L_44f510

            test EAX,EAX
            jne .L_450550

            mov ESI,13
.L_44fcb5:

            add RSI,R8
            mov RDI,RBX
            call .L_44e690

            test EAX,EAX
            mov EBP,EAX
            jne .L_4504c2

            mov RDX,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RBX+216]
            test BYTE PTR [RDX+152],2
            je .L_4500f8

            add RAX,13
            mov QWORD PTR [RBX+240],RAX
.L_44fcec:

            sub RSP,8
.L_44fcf0:

            mov R9,QWORD PTR [RBX+168]
            lea R8,QWORD PTR [RIP+.L_452b4d]
            push RAX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,3668
            mov ESI,4
            mov RDI,RBX
            call .L_448d00

            cmp QWORD PTR [RBX+96],0
            pop R10
            pop R11
.L_44fd21:

            je .L_45008e

            lea R8,QWORD PTR [RIP+.L_452b67]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,1576
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            cmp QWORD PTR [RBX+56],0
            je .L_45053f

            mov RAX,QWORD PTR [RBX+96]
            test RAX,RAX
            je .L_45053f

            mov RDX,QWORD PTR [RAX+208]
            mov R9,QWORD PTR [RBX+216]
            mov RCX,QWORD PTR [RAX+16]
            test RDX,RDX
            je .L_450270

            cmp R9,RCX
            mov EDX,DWORD PTR [RDX+4]
            jb .L_450279

            sub EDX,6
            and EDX,4294967293
            jne .L_450561

            mov RDX,QWORD PTR [RAX]
            mov RCX,QWORD PTR [RAX+24]
            movzx EDX,BYTE PTR [RDX+44]
            and EDX,2
            cmp DL,1
            sbb R12,R12
            and R12D,8
            add R12,8
            cmp DL,1
            sbb EDX,EDX
            sub RCX,QWORD PTR [RAX+32]
            and EDX,8
            add EDX,8
            mov RAX,RCX
            lea RCX,QWORD PTR [RCX+R12*1]
            cmp RCX,R9
            ja .L_4501d0

            sub R9,RAX
            mov RAX,QWORD PTR [RBX+160]
            mov RCX,QWORD PTR [RBX]
            sub R9,R12
            mov R14,QWORD PTR [RBX+192]
            mov EDX,DWORD PTR [RBX+16]
            mov QWORD PTR [RBX+216],R9
            mov R13,R9
            mov RAX,QWORD PTR [RAX]
            test BYTE PTR [RCX+152],2
            mov QWORD PTR [RSP+27],RAX
            mov EAX,DWORD PTR [RBX+208]
            mov BYTE PTR [RSP+35],AL
            mov EAX,DWORD PTR [RBX+12]
            jne .L_4503a0

            mov BYTE PTR [RSP+36],AL
            mov BYTE PTR [RSP+37],DL
.L_44fe1d:

            mov RAX,R13
            mov BYTE PTR [RSP+39],R13B
            sub RSP,8
.L_44fe29:

            shr RAX,8
            lea R8,QWORD PTR [RIP+.L_4527e1]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov BYTE PTR [RSP+46],AL
            push 13
.L_44fe41:

            mov ECX,1654
            mov R9,QWORD PTR [RSP+16]
            mov ESI,4
            mov RDI,RBX
            lea R15,QWORD PTR [R14+R13*1]
            call .L_448d00

            mov RAX,QWORD PTR [RBX+96]
            mov RSI,QWORD PTR [RBX+184]
            mov RCX,QWORD PTR [RAX+32]
            mov RDX,QWORD PTR [RAX+24]
            lea RDI,QWORD PTR [RAX+RCX*1+64]
            sub RDX,RCX
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+96]
            lea R8,QWORD PTR [RIP+.L_4527ff]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            pop RDI
.L_44fe8f:

            mov ECX,1661
            mov ESI,4
            mov RDI,RBX
            push QWORD PTR [RAX+24]
.L_44fe9f:

            lea R9,QWORD PTR [RAX+64]
            call .L_448d00

            lea R8,QWORD PTR [RIP+.L_452b93]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9,R15
            mov ECX,1662
            mov ESI,4
            mov RDI,RBX
            mov QWORD PTR [RSP],R12
            call .L_448d00

            mov RDI,QWORD PTR [RBX+96]
            mov R9,R14
            mov R8D,13
            mov RDX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSP],R12
            lea RSI,QWORD PTR [RDI+64]
            push R15
.L_44feea:

            push QWORD PTR [RSP+32]
            add RDI,208
            push R14
            push R13
            mov RCX,QWORD PTR [RSP+48]
            call .L_45aaa0

            add RSP,48
.L_44ff07:

            test EAX,EAX
            mov R12D,EAX
            jne .L_450290

            cmp R13,QWORD PTR [RSP+16]
            je .L_44ff70

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1686
.L_44ff25:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_448ae0
.L_44ff40:

            lea R8,QWORD PTR [RIP+.L_452bd4]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EBP
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44fc1b
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44ff70:

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_44ff7b:

            lea R8,QWORD PTR [RIP+.L_452bb8]
            push QWORD PTR [RBX+216]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,1912
            mov ESI,4
            mov RDI,RBX
            call .L_448d00

            cmp QWORD PTR [RBX+216],0
            pop RCX
            pop RSI
.L_44ffab:

            jne .L_4503f0

            mov EAX,DWORD PTR [RBX+272]
            add EAX,1
            cmp EAX,3
            mov DWORD PTR [RBX+272],EAX
            jg .L_450572
.L_44ffc9:

            mov RAX,QWORD PTR [RBX]
            mov ECX,8
            movzx EAX,BYTE PTR [RAX+152]
            test AL,2
            je .L_450004

            jmp .L_450028
          .byte 0x66
          .byte 0x90
.L_44ffe0:

            mov RDX,QWORD PTR [RBX+160]
            lea RSI,QWORD PTR [RCX-1]
            add RDX,RSI
            add BYTE PTR [RDX],1
            mov RAX,QWORD PTR [RBX]
            jne .L_4504b0

            movzx EAX,BYTE PTR [RAX+152]
            mov RCX,RSI
.L_450004:

            xor EDX,EDX
            and EAX,2
            setne DL
            add RDX,RDX
            cmp RCX,RDX
            ja .L_44ffe0

            xor EDX,EDX
            test AL,AL
            je .L_45001f
.L_45001a:

            mov EDX,2
.L_45001f:

            cmp RCX,RDX
            je .L_4505ee
.L_450028:

            lea R8,QWORD PTR [RIP+.L_452be4]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,2051
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_450055:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            push QWORD PTR [RBX+216]
            lea R8,QWORD PTR [RIP+.L_452bf3]
            mov ECX,3695
            mov ESI,4
            mov RDI,RBX
            call .L_448d00

            cmp QWORD PTR [RBX+216],768
            pop RAX
            pop RDX
.L_450088:

            ja .L_450428
.L_45008e:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44fc1b

            mov RDI,RBX
            call .L_44f590

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44fc1b

            cmp QWORD PTR [RBX+88],0
            je .L_44fc1b

            cmp DWORD PTR [RBX+8],16
            jne .L_44fc1b

            cmp DWORD PTR [RBX+208],22
            jne .L_4500e4

            mov RAX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RAX],20
            je .L_450599
.L_4500e4:

            mov RDI,RBX
            call .L_44ca80

            jmp .L_44fc1b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4500f8:

            mov QWORD PTR [RBX+224],0
            add RAX,5
            jmp .L_44fcec
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450110:

            mov ESI,5
            jmp .L_44fcb5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450120:

            movzx ECX,BYTE PTR [RDX+1]
            movzx EDX,BYTE PTR [RDX+2]
            mov EBP,256
            mov R12D,257
            sub EBP,EDX
            sub R12D,ECX
            mov EDX,2
            cmp EBP,1
            cmove EBP,EDX
            jmp .L_44fb5e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450150:

            mov EAX,DWORD PTR [RBX+8]
            sub EAX,10
            and EAX,4294967293
            je .L_44f97b

            lea R8,QWORD PTR [RIP+.L_453530]
            mov ECX,3579
.L_45016b:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44fa71
.L_450191:

            mov EBP,4294940928
            jmp .L_44fc1b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4501a0:

            mov RAX,QWORD PTR [RBX]
            mov R8,QWORD PTR [RBX+216]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,13
            jmp .L_44fcb5
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4501d0:

            movzx EDX,DL
            lea R8,QWORD PTR [RIP+.L_453638]
            mov ECX,1637
            push RDX
.L_4501e0:

            push RAX
.L_4501e1:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            pop R8
            pop R9
.L_4501fb:

            lea R8,QWORD PTR [RIP+.L_452bd4]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,4294938240
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_450629

            mov R12D,4294938240
.L_450237:

            mov EAX,DWORD PTR [RBX+8]
            lea EDX,DWORD PTR [RAX-11]
            and EDX,4294967293
            je .L_4502ff

            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+224],0
            lea R8,QWORD PTR [RIP+.L_4536d8]
            mov ECX,3989
            jmp .L_44fa90
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_450270:

            cmp R9,RCX
            jae .L_450561
.L_450279:

            sub RSP,8
.L_45027d:

            lea R8,QWORD PTR [RIP+.L_452b76]
            push RCX
            mov ECX,1589
            jmp .L_4501e1
          .byte 0x90
.L_450290:

            lea R8,QWORD PTR [RIP+.L_452b9c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,1675
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            cmp R12D,4294941952
            je .L_4501fb

            lea R8,QWORD PTR [RIP+.L_452bd4]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,R12D
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4502ff

            mov EAX,R12D
            and AL,127
            cmp EAX,4294938112
            je .L_450237
.L_4502ff:

            mov EBP,R12D
            jmp .L_44fc1b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450310:

            test AL,2
            jne .L_44fa71

            jmp .L_450191
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_450320:

            mov QWORD PTR [RDI+216],0
            jmp .L_44f907
.L_450330:

            sub RDX,RSI
            mov QWORD PTR [RDI+216],RDX
            mov RDI,QWORD PTR [RDI+192]
            add RSI,RDI
            call memmove@PLT

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_450354:

            lea R8,QWORD PTR [RIP+.L_452aa0]
            push QWORD PTR [RBX+216]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ECX,3851
            mov ESI,4
            call .L_448d00

            mov RAX,QWORD PTR [RBX+216]
            mov QWORD PTR [RBX+264],0
            pop RDI
            pop R8
            test RAX,RAX
            jne .L_44fc19

            jmp .L_44f907
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4503a0:

            mov ECX,EDX
            neg ECX
            cmp EDX,2
            mov EDX,4294967295
            cmovne EDX,ECX
            sub EAX,2
            not EAX
            mov BYTE PTR [RSP+37],DL
            mov BYTE PTR [RSP+36],AL
            jmp .L_44fe1d
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4503c8:

            lea R8,QWORD PTR [RIP+.L_452abc]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,3894
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44fc1b
.L_4503f0:

            mov DWORD PTR [RBX+272],0
            jmp .L_44ffc9
.L_4503ff:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,3819
            mov ESI,1
            xor EAX,EAX
            mov EBP,4294939648
            call .L_448ae0

            jmp .L_44fc1b
.L_450428:

            lea R8,QWORD PTR [RIP+.L_452b2a]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3699
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4504a5

            mov R12D,4294938112
            jmp .L_450237
.L_450461:

            lea R8,QWORD PTR [RIP+.L_452ae8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,3495
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_44f780

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44fc72
.L_4504a5:

            mov EBP,4294938112
            jmp .L_44fc1b
          .byte 0x90
.L_4504b0:

            test BYTE PTR [RAX+152],2
            jne .L_45001a

            jmp .L_450028
.L_4504c2:

            lea R8,QWORD PTR [RIP+.L_452abc]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,3936
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44fc1b
.L_4504ea:

            lea R8,QWORD PTR [RIP+.L_452b13]
            mov ECX,3510
            jmp .L_44fc4c
.L_4504fb:

            lea R8,QWORD PTR [RIP+.L_452b2a]
            mov ECX,3518
            jmp .L_44fc4c
.L_45050c:

            lea R8,QWORD PTR [RIP+.L_452b2a]
            mov ECX,3536
            jmp .L_44fc4c
.L_45051d:

            lea R8,QWORD PTR [RIP+.L_452b2a]
            mov ECX,3557
            jmp .L_44fc4c
.L_45052e:

            lea R8,QWORD PTR [RIP+.L_453580]
            mov ECX,3593
            jmp .L_45016b
.L_45053f:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1580
            jmp .L_44ff25
.L_450550:

            lea R8,QWORD PTR [RIP+.L_452b3d]
            mov ECX,3650
            jmp .L_45016b
.L_450561:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            mov ECX,1907
            jmp .L_44ff25
.L_450572:

            lea R8,QWORD PTR [RIP+.L_453670]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2024
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            jmp .L_4501fb
.L_450599:

            lea R8,QWORD PTR [RIP+.L_4536f8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,4034
            mov ESI,2
            call .L_448ae0

            mov RDI,RBX
            call .L_44e4a0

            test EAX,EAX
            mov EBP,EAX
            je .L_45061f

            lea R8,QWORD PTR [RIP+.L_452973]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,4038
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_44fc1b
.L_4505ee:

            lea R8,QWORD PTR [RIP+.L_4536b0]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,2046
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EBP,4294939776
            jmp .L_44ff40
.L_45061a:

            call __stack_chk_fail@PLT
.L_45061f:

            mov EBP,4294940416
            jmp .L_44fc1b
.L_450629:

            mov EBP,4294938240
            jmp .L_44fc1b
.L_450633:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450640:

            push RBX
            lea R8,QWORD PTR [RIP+.L_452c0f]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,3739
            sub RSP,16
.L_45065d:

            mov ESI,2
            call .L_448ae0

            mov EAX,DWORD PTR [RBX+276]
            test EAX,EAX
            jne .L_4506c8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450678:

            mov RDI,RBX
            call .L_44f8a0

            test EAX,EAX
            jne .L_450720

            mov RDI,RBX
            call .L_44f660

            cmp EAX,4294941056
            je .L_450678

            cmp EAX,4294940416
            jne .L_450758

            cmp QWORD PTR [RBX+216],0
            jne .L_450678
.L_4506ac:

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_452c1e]
            mov ECX,3758
            jmp .L_450733
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4506c8:

            lea R8,QWORD PTR [RIP+.L_453720]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,3769
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov DWORD PTR [RBX+276],0
.L_4506f4:

            lea R8,QWORD PTR [RIP+.L_452c3c]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,3773
            mov ESI,2
            call .L_448ae0

            add RSP,16
.L_45071a:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_450720:

            lea R8,QWORD PTR [RIP+.L_452c1e]
            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            mov ECX,3747
.L_450733:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ESI,1
            call .L_448c30

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450758:

            test EAX,EAX
            jne .L_4506ac

            cmp DWORD PTR [RBX+208],22
            jne .L_4506f4

            mov RDI,RBX
            call .L_44f4c0

            jmp .L_4506f4
.L_450776:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450780:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452c4b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4176
            mov ESI,2
            sub RSP,8
            mov RAX,QWORD PTR [RDI+120]
            mov RBX,RDI
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov EAX,DWORD PTR [RBP+24]
            cmp EAX,11
            jbe .L_4507e8
.L_4507b7:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4188
            mov ESI,1
            call .L_448ae0

            add RSP,8
            mov EAX,4294939648
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4507e8:

            mov EDX,2400
            bt RDX,RAX
            jae .L_4507b7

            lea R8,QWORD PTR [RIP+.L_452c60]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4183
            mov ESI,2
            call .L_448ae0

            add DWORD PTR [RBX+8],1
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_450822:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450830:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452c7a]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4196
            mov ESI,2
            sub RSP,8
            mov RAX,QWORD PTR [RDI+120]
            mov RBX,RDI
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov EAX,DWORD PTR [RBP+24]
            cmp EAX,11
            jbe .L_450898
.L_450867:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4208
            mov ESI,1
            call .L_448ae0

            add RSP,8
            mov EAX,4294939648
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_450898:

            mov EDX,2400
            bt RDX,RAX
            jae .L_450867

            lea R8,QWORD PTR [RIP+.L_452c8f]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4203
            mov ESI,2
            call .L_448ae0

            add DWORD PTR [RBX+8],1
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_4508d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4508e0:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452ca9]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_4508f9:

            mov ECX,4719
            mov ESI,2
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+320]
            mov DWORD PTR [RBX+328],20
            mov RDI,RBX
            mov QWORD PTR [RBX+336],1
            mov BYTE PTR [RAX],1
            add DWORD PTR [RBX+8],1
            call .L_44db50

            test EAX,EAX
            mov EBP,EAX
            jne .L_450968

            lea R8,QWORD PTR [RIP+.L_452cc5]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4733
            mov ESI,2
            call .L_448ae0

            add RSP,8
.L_45095f:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450968:

            lea R8,QWORD PTR [RIP+.L_4528c7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,4729
            mov ESI,1
            call .L_448c30

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_450994:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4509a0:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452ce1]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov RBX,RDI
            sub RSP,8
.L_4509b9:

            mov ECX,4742
            mov ESI,2
            call .L_448ae0

            mov RDI,RBX
            call .L_450640

            test EAX,EAX
            mov EBP,EAX
            jne .L_450af8

            cmp DWORD PTR [RBX+208],20
            jne .L_450b70

            cmp QWORD PTR [RBX+216],1
            jne .L_450b28

            mov RAX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RAX],1
            jne .L_450b28

            lea R8,QWORD PTR [RIP+.L_453768]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,4770
            mov ESI,3
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+96],RAX
            mov RAX,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+56],RAX
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_450ad0

            movzx EAX,WORD PTR [RBX+232]
            mov QWORD PTR [RBX+248],0
            mov QWORD PTR [RBX+256],0
            add EAX,1
            test AX,AX
            mov WORD PTR [RBX+232],AX
            je .L_450bae

            cmp DWORD PTR [RBX+16],1
            mov RAX,QWORD PTR [RBX+184]
            jle .L_450aeb
.L_450a84:

            mov RDX,QWORD PTR [RBX+120]
            add RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            mov QWORD PTR [RBX+192],RAX
.L_450a97:

            add DWORD PTR [RBX+8],1
            lea R8,QWORD PTR [RIP+.L_452d2b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4820
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_450abd:

            add RSP,8
.L_450ac1:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450ad0:

            mov RAX,QWORD PTR [RBX+160]
            mov QWORD PTR [RAX],0
            cmp DWORD PTR [RBX+16],1
            mov RAX,QWORD PTR [RBX+184]
            jg .L_450a84
.L_450aeb:

            mov QWORD PTR [RBX+192],RAX
            jmp .L_450a97
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450af8:

            lea R8,QWORD PTR [RIP+.L_452cfd]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,4746
            mov ESI,1
            call .L_448c30

            add RSP,8
.L_450b1f:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450b28:

            lea R8,QWORD PTR [RIP+.L_453748]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4760
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EDX,50
            mov ESI,2
            mov RDI,RBX
            call .L_44f780

            mov EBP,4294935040
            jmp .L_450abd
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450b70:

            lea R8,QWORD PTR [RIP+.L_453748]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4752
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_44f780

            mov EBP,4294936832
            jmp .L_450abd
.L_450bae:

            lea R8,QWORD PTR [RIP+.L_452d15]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4784
            mov ESI,1
            mov RDI,RBX
            mov EBP,4294939776
            call .L_448ae0

            jmp .L_450abd
.L_450bd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450be0:

            cmp DWORD PTR [RSI+20],7
            je .L_450c00

            mov RAX,QWORD PTR [RDI+88]
            lea RDX,QWORD PTR [RIP+.L_44c8b0]
            mov QWORD PTR [RAX+912],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450c00:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,4849
            mov ESI,1
            xor EAX,EAX
            jmp .L_448ae0
.L_450c1f:

            nop
.L_450c20:

            mov RDI,QWORD PTR [RDI+88]
            xor ESI,ESI
            add RDI,800
            jmp .L_443ea0
.L_450c32:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450c40:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452d47]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            mov ECX,5190
            sub RSP,8
.L_450c5c:

            mov RAX,QWORD PTR [RDI+88]
            mov ESI,3
            mov EBP,DWORD PTR [RAX+1048]
            xor EAX,EAX
            call .L_448ae0

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_450c8a

            call .L_44cb10

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_450c8a:

            mov RAX,QWORD PTR [RBX]
            mov RSI,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+80],0
            mov RDX,QWORD PTR [RAX+72]
            mov QWORD PTR [RBX+72],RSI
            test RDX,RDX
            je .L_450cc2

            cmp QWORD PTR [RSI+8],0
            je .L_450cc2

            test EBP,EBP
            jne .L_450cc2

            mov RDI,QWORD PTR [RAX+80]
            call RDX

            test EAX,EAX
            jne .L_450d50
.L_450cbf:

            mov RAX,QWORD PTR [RBX]
.L_450cc2:

            test BYTE PTR [RAX+152],2
            je .L_450d18

            mov RAX,QWORD PTR [RBX+88]
            cmp QWORD PTR [RAX+760],0
            je .L_450d18

            cmp QWORD PTR [RBX+136],0
            je .L_450ced

            xor ESI,ESI
            mov RDI,RBX
            call .L_44c8c0
.L_450ced:

            lea R8,QWORD PTR [RIP+.L_45fd50-50608]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5237
            mov ESI,3
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            jmp .L_450d20
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450d18:

            mov RDI,RBX
            call .L_44ca80
.L_450d20:

            add DWORD PTR [RBX+8],1
            add RSP,8
.L_450d28:

            mov RDI,RBX
            pop RBX
            pop RBP
            lea R8,QWORD PTR [RIP+.L_452d77]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5245
            mov ESI,3
            xor EAX,EAX
            jmp .L_448ae0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450d50:

            lea R8,QWORD PTR [RIP+.L_452d5b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5225
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            jmp .L_450cbf
.L_450d77:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450d80:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_452d8b]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_450d99:

            mov ECX,5252
            mov ESI,2
            call .L_448ae0

            cmp DWORD PTR [RBX+16],1
            jle .L_450fa0

            mov RAX,QWORD PTR [RBX+120]
            mov RSI,QWORD PTR [RAX+24]
            sub RSI,QWORD PTR [RAX+32]
            add RSI,QWORD PTR [RBX+312]
            mov QWORD PTR [RBX+320],RSI
.L_450dcc:

            mov RAX,QWORD PTR [RBX]
            add RSI,4
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+152]
            mov RAX,QWORD PTR [RBX+88]
            and EDX,1
            call QWORD PTR [RAX+928]

            cmp DWORD PTR [RBX+16],1
            mov DWORD PTR [RBX+328],22
            sbb RAX,RAX
            and EAX,24
            add RAX,16
            mov QWORD PTR [RBX+336],RAX
            mov RAX,QWORD PTR [RBX+320]
            mov BYTE PTR [RAX],20
            mov RAX,QWORD PTR [RBX+88]
            mov ECX,DWORD PTR [RAX+1048]
            test ECX,ECX
            je .L_450f60

            mov RAX,QWORD PTR [RBX]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,1
            cmp AL,1
            sbb EAX,EAX
            and EAX,5
            add EAX,10
            mov DWORD PTR [RBX+8],EAX
.L_450e3f:

            lea R8,QWORD PTR [RIP+.L_4537c8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,5306
            mov ESI,3
            mov RDI,RBX
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_450ef8

            mov RAX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX+104]
            mov QWORD PTR [RAX+784],RDX
            mov RDX,QWORD PTR [RBX+288]
            mov RDX,QWORD PTR [RDX]
            mov QWORD PTR [RAX+792],RDX
            mov RAX,QWORD PTR [RBX+288]
            xor EDX,EDX
            mov DWORD PTR [RAX+2],0
            mov WORD PTR [RAX+6],DX
            mov RDX,QWORD PTR [RBX+288]
            add BYTE PTR [RDX+1],1
            jne .L_450f06

            mov RDX,QWORD PTR [RBX+288]
            movzx EAX,BYTE PTR [RDX]
            add EAX,1
            test AL,AL
            mov BYTE PTR [RDX],AL
            jne .L_450f06

            lea R8,QWORD PTR [RIP+.L_452d15]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ECX,5328
            mov ESI,1
            mov EBP,4294939776
            call .L_448ae0

            add RSP,8
.L_450eee:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450ef8:

            mov RAX,QWORD PTR [RBX+288]
            mov QWORD PTR [RAX],0
.L_450f06:

            mov RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+104],RAX
            mov RAX,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+64],RAX
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_450fb8
.L_450f26:

            mov RDI,RBX
            call .L_44db50

            test EAX,EAX
            mov EBP,EAX
            jne .L_450f70

            lea R8,QWORD PTR [RIP+.L_452d9d]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,5361
            mov ESI,2
            call .L_448ae0

            add RSP,8
.L_450f5a:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_450f60:

            add DWORD PTR [RBX+8],1
            jmp .L_450e3f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450f70:

            lea R8,QWORD PTR [RIP+.L_4528c7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,5357
            mov ESI,1
            call .L_448c30

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450fa0:

            mov RSI,QWORD PTR [RBX+312]
            mov QWORD PTR [RBX+320],RSI
            jmp .L_450dcc
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450fb8:

            mov RDI,RBX
            call .L_44dac0

            jmp .L_450f26
.L_450fc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450fd0:

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_452daf]
            push RBX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            mov ECX,5378
            mov ESI,2
            sub RSP,32
.L_450ff3:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            lea RBP,QWORD PTR [RSP+12]
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            mov RSI,RBP
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+152]
            mov RAX,QWORD PTR [RBX+88]
            and EDX,1
            xor EDX,1
            movzx EDX,DL
            call QWORD PTR [RAX+928]

            mov RDI,RBX
            call .L_450640

            test EAX,EAX
            mov R12D,EAX
            jne .L_451148

            cmp DWORD PTR [RBX+208],22
            jne .L_4511ac

            mov R9,QWORD PTR [RBX+192]
            cmp BYTE PTR [R9],20
            jne .L_45116d

            mov RAX,QWORD PTR [RBX]
            movzx R8D,BYTE PTR [RAX+152]
            mov EDI,R8D
            and EDI,2
            cmp DIL,1
            sbb RDX,RDX
            and RDX,-8
            add RDX,24
            cmp DIL,1
            sbb RSI,RSI
            xor ECX,ECX
            xor EAX,EAX
            and RSI,-8
            cmp QWORD PTR [RBX+264],RDX
            lea RSI,QWORD PTR [R9+RSI*1+12]
            jne .L_45116d

            nop
            nop
            nop
            nop
            nop
            nop
.L_4510a8:

            movzx EDX,BYTE PTR [RSI+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            add RAX,1
            or ECX,EDX
            cmp RAX,12
            jne .L_4510a8

            test CL,CL
            jne .L_4511eb

            mov RAX,QWORD PTR [RBX+88]
            mov EAX,DWORD PTR [RAX+1048]
            test EAX,EAX
            jne .L_451120

            add DWORD PTR [RBX+8],1
            test DIL,DIL
            jne .L_451138
.L_4510db:

            lea R8,QWORD PTR [RIP+.L_452dd6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5446
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_4510fd:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_4511f9

            add RSP,32
.L_451118:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_451120:

            and R8D,1
            cmp R8B,1
            sbb EAX,EAX
            and EAX,4294967291
            add EAX,15
            test DIL,DIL
            mov DWORD PTR [RBX+8],EAX
            je .L_4510db
.L_451138:

            mov RDI,RBX
            call .L_44da00

            jmp .L_4510db
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451148:

            lea R8,QWORD PTR [RIP+.L_452cfd]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,5384
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_4510fd
.L_45116d:

            lea R8,QWORD PTR [RIP+.L_452dc1]
            mov ECX,5407
.L_451179:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov R12D,4294934912
            call .L_448ae0

            mov EDX,50
            mov ESI,2
            mov RDI,RBX
            call .L_44f780

            jmp .L_4510fd
.L_4511ac:

            lea R8,QWORD PTR [RIP+.L_452dc1]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,5390
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_44f780

            mov R12D,4294936832
            jmp .L_4510fd
.L_4511eb:

            lea R8,QWORD PTR [RIP+.L_452dc1]
            mov ECX,5416
            jmp .L_451179
.L_4511f9:

            call __stack_chk_fail@PLT
.L_4511fe:

            nop
            nop
.L_451200:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+96],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_451229:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451230:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+376],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,384
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_45125f:

            nop
.L_451260:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_45126c:

            mov QWORD PTR [RDI],RSI
            mov ESI,813
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+152],RAX
            je .L_45138c

            mov ESI,813
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+280],RAX
            je .L_45138c

            test BYTE PTR [RBP+152],2
            mov RDX,QWORD PTR [RBX+152]
            lea R8,QWORD PTR [RAX+11]
            lea RSI,QWORD PTR [RAX+13]
            lea RDI,QWORD PTR [RDX+11]
            lea RCX,QWORD PTR [RDX+13]
            jne .L_451330

            mov QWORD PTR [RBX+288],RAX
            mov QWORD PTR [RBX+160],RDX
            add RAX,8
            add RDX,8
            mov QWORD PTR [RBX+176],RDI
            mov QWORD PTR [RBX+296],RAX
            mov QWORD PTR [RBX+304],R8
            mov QWORD PTR [RBX+312],RSI
            mov RDI,RBX
            mov QWORD PTR [RBX+320],RSI
            mov QWORD PTR [RBX+168],RDX
            mov QWORD PTR [RBX+184],RCX
            mov QWORD PTR [RBX+192],RCX
            add RSP,8
.L_451324:

            pop RBX
            pop RBP
            jmp .L_44cb30
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451330:

            mov QWORD PTR [RBX+296],RAX
            mov QWORD PTR [RBX+168],RDX
            add RAX,3
            add RDX,3
            mov QWORD PTR [RBX+176],RDI
            mov QWORD PTR [RBX+288],RAX
            mov QWORD PTR [RBX+304],R8
            mov QWORD PTR [RBX+312],RSI
            mov RDI,RBX
            mov QWORD PTR [RBX+320],RSI
            mov QWORD PTR [RBX+160],RDX
            mov QWORD PTR [RBX+184],RCX
            mov QWORD PTR [RBX+192],RCX
            add RSP,8
.L_451385:

            pop RBX
            pop RBP
            jmp .L_44cb30
.L_45138c:

            lea R8,QWORD PTR [RIP+.L_452de8]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            xor EAX,EAX
            mov R9D,813
            mov ECX,5638
            mov ESI,1
            call .L_448ae0

            mov RDI,QWORD PTR [RBX+152]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+152],0
            add RSP,8
.L_4513d0:

            mov EAX,4294934784
            pop RBX
            pop RBP
            ret 
.L_4513d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4513e0:

            push RBX

            cmp QWORD PTR [RDI+136],0
            mov RBX,RDI
            mov DWORD PTR [RDI+8],0
            je .L_4513fc

            xor ESI,ESI
            call .L_44c8c0
.L_4513fc:

            mov RAX,QWORD PTR [RBX+152]
            mov RCX,QWORD PTR [RBX+280]
            mov DWORD PTR [RBX+376],0
            mov QWORD PTR [RBX+200],0
            mov DWORD PTR [RBX+208],0
            mov QWORD PTR [RBX+216],0
            add RAX,13
            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RBX+224],0
            mov QWORD PTR [RBX+192],RAX
            xor EAX,EAX
            mov QWORD PTR [RBX+240],0
            mov WORD PTR [RBX+232],AX
            lea RAX,QWORD PTR [RCX+13]
            and RDI,-8
            mov QWORD PTR [RBX+248],0
            mov QWORD PTR [RBX+256],0
            mov QWORD PTR [RBX+320],RAX
            mov QWORD PTR [RBX+264],0
            xor EAX,EAX
            mov QWORD PTR [RBX+272],0
            mov DWORD PTR [RBX+328],0
            mov QWORD PTR [RBX+336],0
            mov QWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+96],0
            mov QWORD PTR [RBX+104],0
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+805],0
            sub RCX,RDI
            add ECX,813
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RCX,QWORD PTR [RBX+152]
            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+805],0
            and RDI,-8
            sub RCX,RDI
            add ECX,813
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,QWORD PTR [RBX+112]
            test RDI,RDI
            je .L_451540

            call .L_44c970

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+112],0
.L_451540:

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_451560

            call .L_44cb10

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+72],0
.L_451560:

            mov RDI,QWORD PTR [RBX+360]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+360],0
            mov QWORD PTR [RBX+368],0
            mov RDI,RBX
            pop RBX

            jmp .L_44cb30
.L_45158c:

            nop
            nop
            nop
            nop
.L_451590:

            mov EAX,ESI
            movzx ESI,BYTE PTR [RDI+152]
            and EAX,1
            and ESI,4294967294
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_4515a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4515b0:

            and ESI,1
            lea EAX,DWORD PTR [RSI+RSI*1]
            movzx ESI,BYTE PTR [RDI+152]
            and ESI,4294967293
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_4515ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4515d0:

            and ESI,1
            lea EAX,DWORD PTR [RSI+RSI*1]
            movzx ESI,BYTE PTR [RDI+153]
            and ESI,4294967293
            or ESI,EAX
            mov BYTE PTR [RDI+153],SIL
            ret 
.L_4515ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4515f0:

            mov DWORD PTR [RDI+140],ESI
            mov DWORD PTR [RDI+144],EDX
            ret 
.L_4515fd:

            nop
            nop
            nop
.L_451600:

            and ESI,3
            lea EAX,DWORD PTR [RSI*4]
            movzx ESI,BYTE PTR [RDI+152]
            and ESI,4294967283
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_45161e:

            nop
            nop
.L_451620:

            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+56],RDX
            ret 
.L_451629:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451630:

            mov QWORD PTR [RDI+32],RSI
            mov QWORD PTR [RDI+40],RDX
            ret 
.L_451639:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451640:

            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+24],RDX
            mov QWORD PTR [RDI+32],RCX
            mov QWORD PTR [RDI+40],R8
            ret 
.L_451651:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451660:

            mov DWORD PTR [RDI+136],ESI
            ret 
.L_451667:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451670:

            test RDX,RDX
            mov QWORD PTR [RDI+128],RSI
            mov QWORD PTR [RDI+136],RDX
            mov QWORD PTR [RDI+144],RCX
            je .L_451698

            xor ESI,ESI
            jmp .L_44c8c0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451698:

            ret 
.L_45169a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4516a0:

            mov QWORD PTR [RDI+80],RSI
            mov QWORD PTR [RDI+64],RDX
            mov QWORD PTR [RDI+72],RCX
            ret 
.L_4516ad:

            nop
            nop
            nop
.L_4516b0:

            test RDI,RDI
            je .L_451730

            test RSI,RSI
            je .L_451730

            mov RDX,QWORD PTR [RDI+80]
            test RDX,RDX
            je .L_451730

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            jne .L_451730

            mov RCX,RDI
            sub RSP,8
.L_4516d6:

            mov RDI,RDX
            call .L_44cb10

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDX],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDX+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            movups XMMWORD PTR [RDX+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+48]
            movups XMMWORD PTR [RDX+48],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+64]
            movups XMMWORD PTR [RDX+64],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+80]
            movups XMMWORD PTR [RDX+80],XMM0
            mov RAX,QWORD PTR [RSI+96]
            mov QWORD PTR [RDX+96],RAX
            mov RAX,QWORD PTR [RCX+88]
            mov DWORD PTR [RAX+1048],1
            xor EAX,EAX
            add RSP,8
.L_45172e:

            ret 
          .byte 0x90
.L_451730:

            mov EAX,4294938368
            ret 
.L_451736:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451740:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RSI
            mov QWORD PTR [RDI+16],RSI
            mov QWORD PTR [RDI+24],RSI
            ret 
.L_451750:

            cmp EDX,3
            je .L_451760
.L_451755:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451760:

            cmp ECX,3
            ja .L_451755

            movsxd RCX,ECX
            mov QWORD PTR [RDI+RCX*8],RSI
            ret 
.L_45176d:

            nop
            nop
            nop
.L_451770:

            mov RAX,RDI
            mov RDI,QWORD PTR [RDI+88]
            mov R8,RSI
            mov R9,RDX
            test RDI,RDI
            je .L_4517a8

            mov RAX,QWORD PTR [RAX]
            test RAX,RAX
            je .L_4517a8

            movzx EAX,BYTE PTR [RAX+152]
            mov ECX,3
            mov EDX,6
            mov ESI,EAX
            and ESI,1
            jmp .L_45b630
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4517a8:

            mov EAX,4294938368
            ret 
.L_4517ae:

            nop
            nop
.L_4517b0:

            mov QWORD PTR [RDI+128],RSI
            ret 
.L_4517b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4517c0:

            mov BYTE PTR [RDI+148],SIL
            mov BYTE PTR [RDI+149],DL
            ret 
.L_4517ce:

            nop
            nop
.L_4517d0:

            mov BYTE PTR [RDI+150],SIL
            mov BYTE PTR [RDI+151],DL
            ret 
.L_4517de:

            nop
            nop
.L_4517e0:

            and ESI,1
            lea EAX,DWORD PTR [RSI*4]
            movzx ESI,BYTE PTR [RDI+153]
            and ESI,4294967291
            or ESI,EAX
            mov BYTE PTR [RDI+153],SIL
            ret 
.L_4517fe:

            nop
            nop
.L_451800:

            cmp SIL,4
            ja .L_451840

            lea RDX,QWORD PTR [RIP+.L_4538a0]
            movzx EAX,SIL
            cmp DWORD PTR [RDX+RAX*4],768
            ja .L_451840

            movzx EAX,WORD PTR [RDI+152]
            and ESI,7
            shl ESI,6
            and AX,65087
            or ESI,EAX
            xor EAX,EAX
            mov WORD PTR [RDI+152],SI
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451840:

            mov EAX,4294938368
            ret 
.L_451846:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451850:

            and ESI,3
            mov EAX,ESI
            movzx ESI,BYTE PTR [RDI+152]
            shl EAX,4
            and ESI,4294967247
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_45186c:

            nop
            nop
            nop
            nop
.L_451870:

            mov QWORD PTR [RDI+112],RSI
            mov QWORD PTR [RDI+120],RDX
            ret 
.L_451879:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451880:

            xor EAX,EAX
            cmp QWORD PTR [RDI+200],0
            je .L_451893

            mov RAX,QWORD PTR [RDI+216]
.L_451893:

            ret 
.L_451895:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4518a0:

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_4518b0

            mov EAX,DWORD PTR [RAX+96]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4518b0:

            mov RDX,QWORD PTR [RDI+80]
            mov EAX,4294967295
            test RDX,RDX
            je .L_4518c1

            mov EAX,DWORD PTR [RDX+96]
.L_4518c1:

            ret 
.L_4518c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4518d0:

            test RDI,RDI
            je .L_4518e8

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_4518e8

            mov EDI,DWORD PTR [RAX]
            jmp .L_45c7e0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4518e8:

            xor EAX,EAX
            ret 
.L_4518eb:

            nop
            nop
            nop
            nop
            nop
.L_4518f0:

            mov RAX,QWORD PTR [RDI]
            mov EDX,DWORD PTR [RDI+16]
            test BYTE PTR [RAX+152],2
            je .L_451928

            cmp EDX,2
            lea RAX,QWORD PTR [RIP+.L_452dff]
            je .L_451955

            cmp EDX,3
            lea RAX,QWORD PTR [RIP+.L_452e08]
            lea RDX,QWORD PTR [RIP+.L_452e11]
            cmovne RAX,RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451928:

            cmp EDX,1
            lea RAX,QWORD PTR [RIP+.L_452e28]
            je .L_451955

            jle .L_451960

            cmp EDX,2
            lea RAX,QWORD PTR [RIP+.L_452e30]
            je .L_451955

            cmp EDX,3
            lea RAX,QWORD PTR [RIP+.L_452e38]
            je .L_451955
.L_45194e:

            lea RAX,QWORD PTR [RIP+.L_452e40]
.L_451955:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451960:

            test EDX,EDX
            lea RAX,QWORD PTR [RIP+.L_452e20]
            jne .L_45194e

            ret 
.L_45196d:

            nop
            nop
            nop
.L_451970:

            mov RAX,QWORD PTR [RDI+104]
            test RAX,RAX
            je .L_4519c8

            mov RCX,QWORD PTR [RAX+128]
            test RCX,RCX
            je .L_4519e0

            mov EDX,DWORD PTR [RCX+4]
            cmp EDX,2
            je .L_4519b8

            jb .L_4519e0

            sub EDX,6
            cmp EDX,2
            ja .L_4519e0

            mov RDX,QWORD PTR [RAX+16]
.L_45199b:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb EAX,EAX
            and EAX,4294967288
            lea EAX,DWORD PTR [RAX+RDX*1+13]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4519b8:

            mov EDX,DWORD PTR [RCX+32]
            add RDX,QWORD PTR [RAX+40]
            jmp .L_45199b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4519c8:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb EAX,EAX
            and EAX,4294967288
            add EAX,13
            ret 
.L_4519e0:

            lea R8,QWORD PTR [RIP+.L_4526b6]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            sub RSP,8

            xor EAX,EAX
            mov ECX,6489
            mov ESI,1
            call .L_448ae0

            mov EAX,4294939648
            add RSP,8
            ret 
.L_451a0d:

            nop
            nop
            nop
.L_451a10:

            mov RAX,QWORD PTR [RDI]
            mov RSI,QWORD PTR [RDI+64]
            lea RCX,QWORD PTR [RIP+.L_4538a0]
            movzx EAX,WORD PTR [RAX+152]
            shr AX,6
            and EAX,7
            test RSI,RSI
            mov EAX,DWORD PTR [RCX+RAX*4]
            je .L_451a41

            movzx ESI,BYTE PTR [RSI+100]
            mov ESI,DWORD PTR [RCX+RSI*4]
            cmp EAX,ESI
            cmova RAX,RSI
.L_451a41:

            ret 
.L_451a43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451a50:

            test RDI,RDI
            je .L_451ac0

            test RSI,RSI
            je .L_451ac0

            mov RDX,QWORD PTR [RDI+72]
            test RDX,RDX
            je .L_451ac0

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            jne .L_451ac0

            sub RSP,8
.L_451a73:

            mov RDI,RSI
            call .L_44cb10

            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RSI],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movups XMMWORD PTR [RSI+16],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            movups XMMWORD PTR [RSI+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+48]
            movups XMMWORD PTR [RSI+48],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+64]
            movups XMMWORD PTR [RSI+64],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+80]
            movups XMMWORD PTR [RSI+80],XMM0
            mov RAX,QWORD PTR [RDX+96]
            mov QWORD PTR [RSI+96],RAX
            xor EAX,EAX
            add RSP,8
.L_451abd:

            ret 
          .byte 0x66
          .byte 0x90
.L_451ac0:

            mov EAX,4294938368
            ret 
.L_451ac6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451ad0:

            test RDI,RDI
            je .L_451b10

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_451b10

            push RBX
            test BYTE PTR [RAX+152],1
            mov RBX,RDI
            je .L_451af8
.L_451aea:

            mov RDI,RBX
            pop RBX
            jmp .L_449940
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451af8:

            call .L_45c8c0

            mov RDX,QWORD PTR [RBX]
            test BYTE PTR [RDX+152],1
            jne .L_451aea

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451b10:

            mov EAX,4294938368
            ret 
.L_451b16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451b20:

            push RBP
            push RBX
            sub RSP,8
.L_451b26:

            test RDI,RDI
            je .L_451b99

            cmp QWORD PTR [RDI],0
            je .L_451b99

            lea R8,QWORD PTR [RIP+.L_452e48]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,6576
            mov ESI,2
            xor EAX,EAX
            mov RBX,RDI
            call .L_448ae0

            jmp .L_451b66
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_451b58:

            mov RDI,RBX
            call .L_451ad0

            test EAX,EAX
            mov EBP,EAX
            jne .L_451b6e
.L_451b66:

            cmp DWORD PTR [RBX+8],16
            jne .L_451b58

            xor EBP,EBP
.L_451b6e:

            lea R8,QWORD PTR [RIP+.L_452e55]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,6586
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_451b90:

            add RSP,8
.L_451b94:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_451b99:

            mov EBP,4294938368
            jmp .L_451b90
.L_451ba0:

            test RDI,RDI
            je .L_451e60

            cmp QWORD PTR [RDI],0
            je .L_451e60

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_452e62]
            push RBX
            mov RBP,RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov RBX,RDI
            mov R12,RSI
            sub RSP,16
.L_451bd4:

            mov ECX,6762
            mov ESI,2
            call .L_448ae0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_451d60
.L_451bf3:

            cmp DWORD PTR [RBX+8],16
            jne .L_451c78
.L_451bf9:

            mov RSI,QWORD PTR [RBX+200]
            test RSI,RSI
            je .L_451cd0
.L_451c09:

            cmp QWORD PTR [RBX+216],RBP
            mov RDI,R12
            cmovbe RBP,QWORD PTR [RBX+216]
            mov RDX,RBP
            call memcpy@PLT

            sub QWORD PTR [RBX+216],RBP
            jne .L_451d50

            mov QWORD PTR [RBX+200],0
            mov DWORD PTR [RBX+276],0
.L_451c45:

            lea R8,QWORD PTR [RIP+.L_452e9d]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,7061
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov EAX,EBP
.L_451c69:

            add RSP,16
.L_451c6d:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451c78:

            mov RDI,RBX
            call .L_451b20

            cmp EAX,4294939904
            je .L_451bf9

            test EAX,EAX
            je .L_451bf9

            lea R8,QWORD PTR [RIP+.L_452e6a]
            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            mov ECX,6807
.L_451ca6:

            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RDI,RBX
            mov ESI,1
            call .L_448c30

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
.L_451cc2:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451cd0:

            mov RAX,QWORD PTR [RBX+144]
            test RAX,RAX
            je .L_451cee

            mov RDI,QWORD PTR [RBX+128]
            call RAX

            cmp EAX,-1
            je .L_451dd0
.L_451cee:

            mov RDI,RBX
            call .L_450640

            test EAX,EAX
            jne .L_451da0

            cmp QWORD PTR [RBX+216],0
            mov EAX,DWORD PTR [RBX+208]
            jne .L_451e10

            cmp EAX,23
            je .L_451df8

            cmp EAX,21
            jne .L_451e89
.L_451d24:

            lea R8,QWORD PTR [RIP+.L_45fd50-50512]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,7008
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294940416
            jmp .L_451c69
.L_451d50:

            add QWORD PTR [RBX+200],RBP
            jmp .L_451c45
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_451d60:

            mov RDI,RBX
            call .L_44d7c0

            test EAX,EAX
            jne .L_451c69

            mov RAX,QWORD PTR [RBX+88]
            test RAX,RAX
            je .L_451bf3

            cmp BYTE PTR [RAX+756],1
            jne .L_451bf3

            mov RDI,RBX
            call .L_44e4a0

            test EAX,EAX
            je .L_451bf3

            jmp .L_451c69
          .byte 0x90
.L_451da0:

            cmp EAX,4294937984
            jne .L_451db0
.L_451da7:

            xor EAX,EAX
            jmp .L_451c69
          .byte 0x66
          .byte 0x90
.L_451db0:

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_452cfd]
            mov ECX,6861
            jmp .L_451ca6
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451dd0:

            cmp QWORD PTR [RBX+136],0
            je .L_451cee

            mov RAX,QWORD PTR [RBX]
            mov RDI,RBX
            mov ESI,DWORD PTR [RAX+136]
            call .L_44c8c0

            jmp .L_451cee
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_451df8:

            mov RDI,RBX
            call .L_450640

            test EAX,EAX
            jne .L_451e66

            mov EAX,DWORD PTR [RBX+208]
            nop
            nop
            nop
            nop
            nop
            nop
.L_451e10:

            cmp EAX,21
            je .L_451d24

            cmp EAX,23
            jne .L_451e89

            cmp DWORD PTR [RBX+8],16
            mov RSI,QWORD PTR [RBX+192]
            mov QWORD PTR [RBX+200],RSI
            jne .L_451c09

            cmp QWORD PTR [RBX+136],0
            je .L_451c09

            xor ESI,ESI
            mov RDI,RBX
            call .L_44c8c0

            mov RSI,QWORD PTR [RBX+200]
            jmp .L_451c09
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451e60:

            mov EAX,4294938368
            ret 
.L_451e66:

            cmp EAX,4294937984
            je .L_451da7

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_452cfd]
            mov ECX,6876
            jmp .L_451ca6
.L_451e89:

            lea R8,QWORD PTR [RIP+.L_452e80]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,7014
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EAX,4294936832
            jmp .L_451c69
.L_451eb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451ec0:

            push R13
            push R12
            lea R8,QWORD PTR [RIP+.L_452ea5]
            push RBP
            push RBX
            mov R12,RDX
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_451ee0:

            mov R13,RSI
            mov ECX,7162
            mov ESI,2
            call .L_448ae0

            test RBX,RBX
            je .L_452080

            mov RDX,QWORD PTR [RBX]
            test RDX,RDX
            je .L_452080

            cmp DWORD PTR [RBX+8],16
            je .L_451f22

            mov RDI,RBX
            call .L_451b20

            test EAX,EAX
            mov EBP,EAX
            jne .L_452018

            mov RDX,QWORD PTR [RBX]
.L_451f22:

            movzx EAX,WORD PTR [RDX+152]
            mov RDI,QWORD PTR [RBX+64]
            lea RSI,QWORD PTR [RIP+.L_4538a0]
            shr AX,6
            and EAX,7
            test RDI,RDI
            mov EAX,DWORD PTR [RSI+RAX*4]
            je .L_451f50

            movzx EDI,BYTE PTR [RDI+100]
            mov EDI,DWORD PTR [RSI+RDI*4]
            cmp EAX,EDI
            cmova RAX,RDI
.L_451f50:

            cmp R12,RAX
            jbe .L_451f65

            test BYTE PTR [RDX+152],2
            jne .L_45208a

            mov R12,RAX
.L_451f65:

            cmp QWORD PTR [RBX+344],0
            je .L_451fb8

            mov RDI,RBX
            call .L_44d7c0

            test EAX,EAX
            mov EBP,EAX
            jne .L_452050
.L_451f81:

            mov EBP,R12D
.L_451f84:

            lea R8,QWORD PTR [RIP+.L_452eae]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov ECX,7190
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_448ae0
.L_451fa6:

            add RSP,8
.L_451faa:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451fb8:

            mov RDI,QWORD PTR [RBX+320]
            mov RDX,R12
            mov RSI,R13
            mov QWORD PTR [RBX+336],R12
            mov DWORD PTR [RBX+328],23
            call memcpy@PLT

            mov RDI,RBX
            call .L_44db50

            test EAX,EAX
            mov EBP,EAX
            je .L_451f81

            lea R8,QWORD PTR [RIP+.L_4528c7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,7109
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_451f84
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452018:

            lea R8,QWORD PTR [RIP+.L_452e6a]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,7179
            mov ESI,1
            call .L_448c30

            add RSP,8
.L_45203f:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452050:

            lea R8,QWORD PTR [RIP+.L_452873]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,7097
            mov ESI,1
            mov RDI,RBX
            call .L_448c30

            jmp .L_451f84
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452080:

            mov EBP,4294938368
            jmp .L_451fa6
.L_45208a:

            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            lea R8,QWORD PTR [RIP+.L_453828]
            push RAX
            mov R9,R12
            xor EAX,EAX
            mov ECX,7084
            mov ESI,1
            mov RDI,RBX
            call .L_448ae0

            mov EBP,4294938368
            pop RAX
            pop RDX
            jmp .L_451f84
.L_4520c0:

            test RDI,RDI
            je .L_452190

            cmp QWORD PTR [RDI],0
            je .L_452190

            push RBX
            lea R8,QWORD PTR [RIP+.L_452eb7]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,7205
            sub RSP,16
.L_4520f0:

            mov ESI,2
            call .L_448ae0

            cmp QWORD PTR [RBX+344],0
            jne .L_452180

            cmp DWORD PTR [RBX+8],16
            je .L_452138
.L_45210a:

            lea R8,QWORD PTR [RIP+.L_452ecd]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,7221
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            xor EAX,EAX
.L_45212e:

            add RSP,16
.L_452132:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_452138:

            xor EDX,EDX
            mov ESI,1
            mov RDI,RBX
            call .L_44f780

            test EAX,EAX
            je .L_45210a

            lea R8,QWORD PTR [RIP+.L_45fd50-50400]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            mov R9D,EAX
            mov ECX,7216
            mov ESI,1
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_448c30

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_45212e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452180:

            add RSP,16
.L_452184:

            mov RDI,RBX
            pop RBX
            jmp .L_44d7c0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_452190:

            mov EAX,4294938368
            ret 
.L_452196:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4521a0:

            test RDI,RDI
            je .L_4521b0

            jmp .L_44c970
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4521b0:

            ret 
.L_4521b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4521c0:

            test RDI,RDI
            je .L_4521d0

            jmp .L_44c9c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4521d0:

            ret 
.L_4521d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4521e0:

            test RDI,RDI
            je .L_4521ea

            jmp .L_44cb10
.L_4521ea:

            ret 
.L_4521eb:

            nop
            nop
            nop
            nop
            nop
.L_4521f0:

            test RDI,RDI
            je .L_45233e

            push RBX
.L_4521fa:

            lea R8,QWORD PTR [RIP+.L_452ee3]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,7363
            mov ESI,2
            call .L_448ae0

            mov RAX,QWORD PTR [RBX+280]
            test RAX,RAX
            je .L_452249

            lea RDX,QWORD PTR [RAX+813]
            nop
.L_452230:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_452230

            mov RDI,QWORD PTR [RBX+280]
            call QWORD PTR [RIP+.L_677120]
.L_452249:

            mov RAX,QWORD PTR [RBX+152]
            test RAX,RAX
            je .L_452279

            lea RDX,QWORD PTR [RAX+813]
            nop
            nop
            nop
            nop
.L_452260:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_452260

            mov RDI,QWORD PTR [RBX+152]
            call QWORD PTR [RIP+.L_677120]
.L_452279:

            mov RDI,QWORD PTR [RBX+112]
            test RDI,RDI
            je .L_452291

            call .L_44c970

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]
.L_452291:

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_4522d9

            call .L_44c9c0

            mov RDI,QWORD PTR [RBX+120]
            test RDI,RDI
            je .L_4522ad

            call .L_44c970
.L_4522ad:

            mov RDI,QWORD PTR [RBX+80]
            test RDI,RDI
            je .L_4522bb

            call .L_44cb10
.L_4522bb:

            mov RDI,QWORD PTR [RBX+88]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+120]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+80]
            call QWORD PTR [RIP+.L_677120]
.L_4522d9:

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_4522f1

            call .L_44cb10

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_4522f1:

            mov RDI,QWORD PTR [RBX+360]
            call QWORD PTR [RIP+.L_677120]

            lea R8,QWORD PTR [RIP+.L_452eeb]
            lea RDX,QWORD PTR [RIP+.L_452ef8]
            xor EAX,EAX
            mov ECX,7428
            mov ESI,2
            mov RDI,RBX
            call .L_448ae0

            lea RAX,QWORD PTR [RBX+384]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452330:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_452330

            pop RBX
.L_45233d:

            ret 
.L_45233e:

            ret 
.L_452340:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+152],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,160
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_45236f:

            nop
.L_452370:

            movzx EAX,BYTE PTR [RDI+152]
            mov R9D,ESI
            mov R8D,EDX
            and R9D,1
            and R8D,1
            add R8D,R8D
            and EAX,4294967292
            or EAX,R9D
            or EAX,R8D
            test ESI,ESI
            mov BYTE PTR [RDI+152],AL
            jne .L_4523a7

            and EAX,4294967283
            or EAX,8
            mov BYTE PTR [RDI+152],AL
.L_4523a7:

            lea RAX,QWORD PTR [RIP+.L_44c530]
            or BYTE PTR [RDI+153],6
            cmp ECX,2
            mov QWORD PTR [RDI+88],RAX
            lea RAX,QWORD PTR [RIP+.L_44c540]
            mov QWORD PTR [RDI+96],RAX
            movabs RAX,257698037761000
            mov QWORD PTR [RDI+140],RAX
            je .L_452418

            cmp EDX,1
            push RBX
.L_4523de:

            mov DWORD PTR [RDI+148],16974595
            je .L_452450
.L_4523ea:

            mov RBX,RDI
            call .L_45c7a0

            mov QWORD PTR [RBX+24],RAX
            mov QWORD PTR [RBX+16],RAX
            mov QWORD PTR [RBX+8],RAX
            mov QWORD PTR [RBX],RAX
            call .L_454730

            mov QWORD PTR [RBX+128],RAX
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452418:

            lea RAX,QWORD PTR [RIP+.L_677140]
            mov DWORD PTR [RDI+148],50529027
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RDI+16],RAX
            mov QWORD PTR [RDI+8],RAX
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_677130]
            mov QWORD PTR [RDI+128],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452450:

            mov BYTE PTR [RDI+151],2
            jmp .L_4523ea
.L_452459:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452460:

            lea RAX,QWORD PTR [RDI+160]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452470:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_452470

            ret 
.L_45247e:

            nop
            nop
.L_452480:

            cmp DIL,3
            mov EAX,5
            je .L_45249c

            cmp DIL,4
            mov EAX,6
            mov EDX,0
            cmovne EAX,EDX
.L_45249c:

            ret 
.L_45249e:

            nop
            nop
.L_4524a0:

            cmp EDI,5
            mov EAX,3
            je .L_4524b3

            cmp EDI,6
            sete AL
            shl EAX,2
.L_4524b3:

            ret 
.L_4524b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4524c0:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RAX+128]
            test RDX,RDX
            je .L_4524ee

            mov ECX,DWORD PTR [RDX]
            mov EAX,4294967295
            test ECX,ECX
            je .L_4524fa

            cmp ESI,ECX
            jne .L_4524e4

            jmp .L_4524f8
.L_4524e0:

            cmp EAX,ESI
            je .L_4524f8
.L_4524e4:

            add RDX,4
            mov EAX,DWORD PTR [RDX]
            test EAX,EAX
            jne .L_4524e0
.L_4524ee:

            mov EAX,4294967295
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4524f8:

            xor EAX,EAX
.L_4524fa:

            ret 
.L_4524fc:

            nop
            nop
            nop
            nop
.L_452500:

            cmp EDX,1
            je .L_452510

            mov BYTE PTR [RCX],DIL
            mov BYTE PTR [RCX+1],SIL
            ret 

            nop
            nop
            nop
.L_452510:

            mov EAX,ESI
            mov EDX,4294967295
            neg EAX
            cmp ESI,2
            cmove EAX,EDX
            sub EDI,2
            not EDI
            mov BYTE PTR [RCX+1],AL
            mov BYTE PTR [RCX],DIL
            ret 
.L_45252b:

            nop
            nop
            nop
            nop
            nop
.L_452530:

            cmp EDX,1
            movzx EAX,BYTE PTR [RCX]
            je .L_452548

            mov DWORD PTR [RDI],EAX
            movzx EAX,BYTE PTR [RCX+1]
            mov DWORD PTR [RSI],EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452548:

            mov EDX,257
            sub EDX,EAX
            mov EAX,256
            mov DWORD PTR [RDI],EDX
            movzx EDX,BYTE PTR [RCX+1]
            sub EAX,EDX
            mov EDX,2
            cmp EAX,1
            cmove EAX,EDX
            mov DWORD PTR [RSI],EAX
            ret 
.L_45256a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_452570:

            cmp DWORD PTR [RDI+16],3
            jne .L_452590

            cmp ESI,4
            jne .L_452590

            mov RAX,QWORD PTR [RDI+88]
            lea RDX,QWORD PTR [RIP+.L_44c6f0]
            mov QWORD PTR [RAX+920],RDX
            xor EAX,EAX
            ret 
.L_452590:

            mov EAX,4294941184
            ret 
.L_452596:
          .string "client finished"
.L_4525a6:
          .string "server finished"
.L_4525b6:
          .string "=> calc  finished tls sha256"
.L_4525d3:
          .string "finished sha2 state"
.L_4525e7:
          .string "calc finished result"
.L_4525fc:
          .string "<= calc  finished"
.L_45260e:
          .string "=> calc verify sha256"
.L_452624:
          .string "calculated verify result"
.L_45263d:
          .string "<= calc verify"
.L_45264c:
          .string "skip swap epochs"
.L_45265d:
          .string "swap epochs"
.L_452669:
          .string "set_timer to %d ms"
.L_45267c:
          .string "timer expired"
.L_45268a:
          .string "=> derive keys"
.L_452699:
          .string "cipher info for %d not found"
.L_4526b6:
          .string "should never happen"
.L_4526ca:
          .string "premaster secret"
.L_4526db:
          .string "master secret"
.L_4526e9:
          .string "prf"
.L_4526ed:
          .string "key expansion"
.L_4526fb:
          .string "ciphersuite = %s"
.L_45270c:
          .string "random bytes"
.L_452719:
          .string "key block"
.L_452723:
          .string "mbedtls_md_setup"
.L_452734:
          .string "mbedtls_cipher_setup"
.L_452749:
          .string "mbedtls_cipher_setkey"
.L_45275f:
          .string "<= derive keys"
.L_45276e:
          .string "=> flush output"
.L_45277e:
          .string "<= flush output"
.L_45278e:
          .string "ssl->f_send"
.L_45279a:
          .string "=> write record"
.L_4527aa:
          .string "alloc %d bytes failed"
.L_4527c0:
          .string "ssl_flight_append"
.L_4527d2:
          .string "=> encrypt buf"
.L_4527e1:
          .string "additional data used for AEAD"
.L_4527ff:
          .string "IV used"
.L_452807:
          .string "mbedtls_cipher_auth_encrypt"
.L_452823:
          .string "after encrypt: tag"
.L_452836:
          .string "<= encrypt buf"
.L_452845:
          .string "ssl_encrypt_buf"
.L_452855:
          .string "output record sent to network"
.L_452873:
          .string "mbedtls_ssl_flush_output"
.L_45288c:
          .string "<= write record"
.L_45289c:
          .string "=> mbedtls_ssl_resend"
.L_4528b2:
          .string "initialise resending"
.L_4528c7:
          .string "mbedtls_ssl_write_record"
.L_4528e0:
          .string "<= mbedtls_ssl_resend"
.L_4528f6:
          .string "=> fetch input"
.L_452905:
          .string "in_left: %d, nb_want: %d"
.L_45291e:
          .string "<= fetch input"
.L_45292d:
          .string "timeout"
.L_452935:
          .string "f_recv_timeout: %u ms"
.L_45294b:
          .string "ssl->f_recv(_timeout)"
.L_452961:
          .string "handshake timeout"
.L_452973:
          .string "mbedtls_ssl_resend"
.L_452986:
          .string "handshake message too large"
.L_4529a2:
          .string "alloc failed (%d bytes)"
.L_4529ba:
          .string "fragment header mismatch"
.L_4529d3:
          .string "reassembled handshake message"
.L_4529f1:
          .string "ssl_reassemble_dtls_handshake"
.L_452a0f:
          .string "message is not complete yet"
.L_452a2b:
          .string "handshake message completed"
.L_452a47:
          .string "is a close notify message"
.L_452a61:
          .string "is a SSLv3 no_cert"
.L_452a74:
          .string "=> send alert message"
.L_452a8a:
          .string "<= send alert message"
.L_452aa0:
          .string "remaining content in record"
.L_452abc:
          .string "mbedtls_ssl_fetch_input"
.L_452ad4:
          .string "input record header"
.L_452ae8:
          .string "unknown record type"
.L_452afc:
          .string "major version mismatch"
.L_452b13:
          .string "minor version mismatch"
.L_452b2a:
          .string "bad message length"
.L_452b3d:
          .string "replayed record"
.L_452b4d:
          .string "input record from network"
.L_452b67:
          .string "=> decrypt buf"
.L_452b76:
          .string "in_msglen (%d) < minlen (%d)"
.L_452b93:
          .string "TAG used"
.L_452b9c:
          .string "mbedtls_cipher_auth_decrypt"
.L_452bb8:
          .string "raw buffer after decryption"
.L_452bd4:
          .string "ssl_decrypt_buf"
.L_452be4:
          .string "<= decrypt buf"
.L_452bf3:
          .string "input payload after decrypt"
.L_452c0f:
          .string "=> read record"
.L_452c1e:
          .string "mbedtls_ssl_read_record_layer"
.L_452c3c:
          .string "<= read record"
.L_452c4b:
          .string "=> write certificate"
.L_452c60:
          .string "<= skip write certificate"
.L_452c7a:
          .string "=> parse certificate"
.L_452c8f:
          .string "<= skip parse certificate"
.L_452ca9:
          .string "=> write change cipher spec"
.L_452cc5:
          .string "<= write change cipher spec"
.L_452ce1:
          .string "=> parse change cipher spec"
.L_452cfd:
          .string "mbedtls_ssl_read_record"
.L_452d15:
          .string "DTLS epoch would wrap"
.L_452d2b:
          .string "<= parse change cipher spec"
.L_452d47:
          .string "=> handshake wrapup"
.L_452d5b:
          .string "cache did not store session"
.L_452d77:
          .string "<= handshake wrapup"
.L_452d8b:
          .string "=> write finished"
.L_452d9d:
          .string "<= write finished"
.L_452daf:
          .string "=> parse finished"
.L_452dc1:
          .string "bad finished message"
.L_452dd6:
          .string "<= parse finished"
.L_452de8:
          .string "alloc(%d bytes) failed"
.L_452dff:
          .string "DTLSv1.0"
.L_452e08:
          .string "DTLSv1.2"
.L_452e11:
          .string "unknown (DTLS)"
.L_452e20:
          .string "SSLv3.0"
.L_452e28:
          .string "TLSv1.0"
.L_452e30:
          .string "TLSv1.1"
.L_452e38:
          .string "TLSv1.2"
.L_452e40:
          .string "unknown"
.L_452e48:
          .string "=> handshake"
.L_452e55:
          .string "<= handshake"
.L_452e62:
          .string "=> read"
.L_452e6a:
          .string "mbedtls_ssl_handshake"
.L_452e80:
          .string "bad application data message"
.L_452e9d:
          .string "<= read"
.L_452ea5:
          .string "=> write"
.L_452eae:
          .string "<= write"
.L_452eb7:
          .string "=> write close notify"
.L_452ecd:
          .string "<= write close notify"
.L_452ee3:
          .string "=> free"
.L_452eeb:
          .string "<= free"
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_452ef8:
          .string "repo.patched/library/ssl_tls.c"
          .zero 1
.L_452f18:
          .string "=> handshake wrapup: final free"
.L_452f38:
          .string "<= handshake wrapup: final free"
.L_452f58:
          .string "alloc() of ssl sub-contexts failed"
          .zero 5
.L_452f80:
          .string "mbedtls_md info for %d not found"
          .zero 7
.L_452fa8:
          .string "no premaster (session resumed)"
          .zero 1
.L_452fc8:
          .string "keylen: %d, minlen: %d, ivlen: %d, maclen: %d"
          .zero 2
.L_452ff8:
          .string "Bad usage of mbedtls_ssl_set_bio() or mbedtls_ssl_set_bio()"
          .zero 4
.L_453038:
          .string "message length: %d, out_left: %d"
          .zero 7
.L_453060:
          .string "outgoing message counter would wrap"
          .zero 4
.L_453088:
          .string "update timeout value to %d millisecs"
          .zero 3
.L_4530b0:
          .string "before encrypt: output payload"
          .zero 1
.L_4530d0:
          .string "before encrypt: msglen = %d, including %d bytes of padding"
          .zero 5
.L_453110:
          .string "output record: msgtype = %d, version = [%d:%d], msglen = %d"
          .zero 4
.L_453150:
          .string "resent handshake message header"
.L_453170:
          .string "requesting more data than fits"
          .zero 1
.L_453190:
          .string "You must use mbedtls_ssl_set_timer_cb() for DTLS"
          .zero 7
.L_4531c8:
          .string "next record in same datagram, offset: %d"
          .zero 7
.L_4531f8:
          .string "handshake message too short: %d"
.L_453218:
          .string "handshake message: msglen = %d, type = %d, hslen = %d"
          .zero 2
.L_453250:
          .string "received message from last flight, message_seq = %d, start_of_flight = %d"
          .zero 6
.L_4532a0:
          .string "dropping out-of-sequence message: message_seq = %d, expected = %d"
          .zero 6
.L_4532e8:
          .string "found fragmented DTLS handshake message"
.L_453310:
          .string "not supported outside handshake (for now)"
          .zero 6
.L_453340:
          .string "initialize reassembly, total length = %d"
          .zero 7
.L_453370:
          .string "invalid fragment offset/len: %d + %d > %d"
          .zero 6
.L_4533a0:
          .string "invalid fragment length: %d + 12 > %d"
          .zero 2
.L_4533c8:
          .string "adding fragment, offset = %d, length = %d"
          .zero 6
.L_4533f8:
          .string "last fragment not alone in its record"
          .zero 2
.L_453420:
          .string "reassembled message too large for buffer"
          .zero 7
.L_453450:
          .string "TLS handshake fragmentation not supported"
          .zero 6
.L_453480:
          .string "got an alert message, type: [%d:%d]"
          .zero 4
.L_4534a8:
          .string "is a fatal alert message (msg %d)"
          .zero 6
.L_4534d0:
          .string "send alert level=%u message=%u"
          .zero 1
.L_4534f0:
          .string "input record: msgtype = %d, version = [%d:%d], msglen = %d"
          .zero 5
.L_453530:
          .string "dropping unexpected ChangeCipherSpec"
          .zero 3
.L_453558:
          .string "discarding unexpected record (header)"
          .zero 2
.L_453580:
          .string "dropping unexpected ApplicationData"
          .zero 4
.L_4535a8:
          .string "record from another epoch: expected %d, received %d"
          .zero 4
.L_4535e0:
          .string "possible Client Key Exchange retransmission"
          .zero 4
.L_453610:
          .string "discarding invalid record (header)"
          .zero 5
.L_453638:

            insd DWORD PTR [RDI],DX
            jae .L_4536a2
          .byte 0x6c
          .byte 0x65
          .byte 0x6e
          .byte 0x20
          .byte 0x28
          .byte 0x25
          .byte 0x64
          .byte 0x29
          .byte 0x20
          .byte 0x3c
          .byte 0x20
          .byte 0x65
          .byte 0x78
          .byte 0x70
          .byte 0x6c
          .byte 0x69
          .byte 0x63
          .byte 0x69
          .byte 0x74
          .byte 0x5f
          .byte 0x69
          .byte 0x76
          .byte 0x5f
          .byte 0x6c
          .byte 0x65
          .byte 0x6e
          .byte 0x20
          .byte 0x28
          .byte 0x25
          .byte 0x64
          .byte 0x29
          .byte 0x20
          .byte 0x2b
          .byte 0x20
          .byte 0x74
          .byte 0x61
          .byte 0x67
          .byte 0x6c
          .byte 0x65
          .byte 0x6e
          .byte 0x20
          .byte 0x28
          .byte 0x25
          .byte 0x64
          .byte 0x29
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453670:
          .byte 0x72
          .byte 0x65
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x64
          .byte 0x20
          .byte 0x66
          .byte 0x6f
          .byte 0x75
          .byte 0x72
          .byte 0x20
          .byte 0x63
          .byte 0x6f
          .byte 0x6e
          .byte 0x73
          .byte 0x65
          .byte 0x63
          .byte 0x75
          .byte 0x74
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x20
          .byte 0x65
          .byte 0x6d
          .byte 0x70
          .byte 0x74
          .byte 0x79
          .byte 0x20
          .byte 0x6d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x73
          .byte 0x2c
          .byte 0x20
          .byte 0x70
          .byte 0x6f
          .byte 0x73
          .byte 0x73
          .byte 0x69
          .byte 0x62
          .byte 0x6c
          .byte 0x65
.L_4536a2:

            and BYTE PTR [RDI+RBP*2+83],AL
            and BYTE PTR [RCX+116],AH
            je .L_45370c
          .byte 0x63
          .byte 0x6b
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4536b0:
          .string "incoming message counter would wrap"
          .zero 4
.L_4536d8:
          .string "discarding invalid record (mac)"
.L_4536f8:
          .byte 0x72
          .byte 0x65
          .byte 0x63
          .byte 0x65
          .byte 0x69
          .byte 0x76
          .byte 0x65
          .byte 0x64
          .byte 0x20
          .byte 0x72
          .byte 0x65
          .byte 0x74
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x6d
          .byte 0x69
          .byte 0x74
          .byte 0x20
.L_45370c:

            outsd DX,DWORD PTR [RSI]
            and BYTE PTR [RCX+115],CH
            je .L_453734
          .byte 0x66
          .byte 0x6c
          .byte 0x69
          .byte 0x67
          .byte 0x68
          .byte 0x74
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453720:
          .byte 0x3c
          .byte 0x3d
          .byte 0x20
          .byte 0x72
          .byte 0x65
          .byte 0x75
          .byte 0x73
          .byte 0x65
          .byte 0x20
          .byte 0x70
          .byte 0x72
          .byte 0x65
          .byte 0x76
          .byte 0x69
          .byte 0x6f
          .byte 0x75
          .byte 0x73
          .byte 0x6c
          .byte 0x79
          .byte 0x20
.L_453734:

            jb .L_45379b
          .byte 0x61
          .byte 0x64
          .byte 0x20
          .byte 0x6d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453748:
          .string "bad change cipher spec message"
          .zero 1
.L_453768:
          .string "switching to new transform spec for inbound data"
          .zero 2
.L_45379b:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RBX+107],DH
            imul ESI,DWORD PTR [RAX+32],1701147238
            imul EBP,DWORD PTR [RSI+103],1851877408
          .byte 0x64
          .byte 0x73
          .byte 0x68
          .byte 0x61
          .byte 0x6b
          .byte 0x65
          .byte 0x20
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x20
          .byte 0x74
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x66
          .byte 0x6f
          .byte 0x72
          .byte 0x6d
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4537c8:

            jae .L_453841

            imul ESI,DWORD PTR [RBX+104],543649385
            je .L_453843

            and BYTE PTR [RSI+101],CH
            ja .L_4537f9
          .byte 0x74
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x66
          .byte 0x6f
          .byte 0x72
          .byte 0x6d
          .byte 0x20
          .byte 0x73
          .byte 0x70
          .byte 0x65
          .byte 0x63
          .byte 0x20
          .byte 0x66
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x6f
          .byte 0x75
          .byte 0x74
          .byte 0x62
          .byte 0x6f
          .byte 0x75
          .byte 0x6e
          .byte 0x64
          .byte 0x20
          .byte 0x64
          .byte 0x61
          .byte 0x74
          .byte 0x61
.L_4537f9:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RCX+103],CH
            outsb DX,BYTE PTR [RSI]
            outsd DX,DWORD PTR [RSI]
            jb .L_45386f

            outsb DX,BYTE PTR [RSI]
            and BYTE PTR [ESI+111],CH
            outsb DX,BYTE PTR [RSI]
            sub EAX,1635017062
            insb BYTE PTR [RDI],DX
            and BYTE PTR [RSI+111],CH
            outsb DX,BYTE PTR [RSI]
            sub EAX,1936682083
          .byte 0x75
          .byte 0x72

            and BYTE PTR GS:[RCX+108],AH
            jb .L_453898

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_453828:
          .byte 0x66
          .byte 0x72
          .byte 0x61
          .byte 0x67
          .byte 0x6d
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x20
          .byte 0x6c
          .byte 0x61
          .byte 0x72
          .byte 0x67
          .byte 0x65
          .byte 0x72
          .byte 0x20
          .byte 0x74
          .byte 0x68
          .byte 0x61
          .byte 0x6e
          .byte 0x20
          .byte 0x74
          .byte 0x68
          .byte 0x65
          .byte 0x20
.L_453841:

            sub BYTE PTR [RSI+101],CH
            outsd DX,DWORD PTR [ESI]
            je .L_4538b1
# WARNING: found overlapping blocks at address 53613
.set .L_453843, . - 5

          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x64
          .byte 0x29
          .byte 0x20
          .byte 0x6d
          .byte 0x61
          .byte 0x78
          .byte 0x69

            insd DWORD PTR [RDI],DX
            jne .L_4538c2
          .byte 0x20
          .byte 0x66
          .byte 0x72
          .byte 0x61
          .byte 0x67
          .byte 0x6d
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x20
          .byte 0x6c
          .byte 0x65
          .byte 0x6e
          .byte 0x67
          .byte 0x74
          .byte 0x68
          .byte 0x3a
          .byte 0x20
          .byte 0x25
          .byte 0x64
          .byte 0x20
          .byte 0x3e
          .byte 0x20
          .byte 0x25
          .byte 0x64
          .byte 0x0
.L_45386f:

            add BYTE PTR [RBP+98],CH
          .byte 0x65
          .byte 0x64
          .byte 0x74
          .byte 0x6c

            jae .L_4538d7

            jae .L_4538ed
          .byte 0x6c
          .byte 0x5f
          .byte 0x73
          .byte 0x65
          .byte 0x6e
          .byte 0x64
          .byte 0x5f
          .byte 0x61
          .byte 0x6c
          .byte 0x65
          .byte 0x72
          .byte 0x74
          .byte 0x5f
          .byte 0x6d
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x0
          .byte 0x90
.L_453890:

            add BYTE PTR [RAX],AL
.L_453892:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_453898:

            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_4538a0:

            add BYTE PTR [RBX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RDX],AL
            add BYTE PTR [RAX],AL
            add BYTE PTR [RAX+RAX*1],AL
            add BYTE PTR [RAX],AL
            or BYTE PTR [RAX],AL
            add BYTE PTR [RAX],AL
.L_4538b1:

            adc BYTE PTR [RAX],AL
            add BYTE PTR [RSI+46],AH
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4538c0:

            push R13
.L_4538c2:

            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            mov R13D,EDX
            add RBX,24
            sub RSP,40
.L_4538d7:

            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
.L_4538ed:

            call .L_456790

            lea RSI,QWORD PTR [R12+8]
            mov RDX,RBX
            mov RDI,RBP
            call .L_4578f0

            test EAX,EAX
            mov R12D,EAX
            jne .L_45392b

            xor ESI,ESI
            mov RDI,RBX
            call .L_457590

            xor EDX,EDX
            test EAX,EAX
            mov RSI,RBP
            setne DL
            mov RDI,RBX
            and EDX,R13D
            call .L_456b00

            mov R12D,EAX
.L_45392b:

            mov RDI,RBP
            call .L_4567b0

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_453951

            add RSP,40
.L_45394a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_453951:

            call __stack_chk_fail@PLT
.L_453956:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453960:

            push R15
            push R14
            push R13
            push R12
            mov R12D,R8D
            push RBP
            push RBX
            shr R12B,1
            and R12D,63
            mov R13,RSI
            sub RSP,24
.L_45397b:

            test CL,CL
            mov QWORD PTR [RSP],RDI
            mov DWORD PTR [RSP+12],R8D
            mov BYTE PTR [RSP+11],CL
            je .L_4539f0

            mov RBX,RDX
            xor EBP,EBP
            lea R14,QWORD PTR [RSI+24]
            jmp .L_4539c1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4539a0:

            lea RSI,QWORD PTR [RBX+24]
            mov EDX,R15D
            mov RDI,R14
            call .L_456b00

            test EAX,EAX
            jne .L_4539dd

            add EBP,1
            add RBX,72
            cmp BYTE PTR [RSP+11],BPL
            je .L_4539f0
.L_4539c1:

            xor R15D,R15D
            cmp R12B,BPL
            mov RSI,RBX
            sete R15B
            mov RDI,R13
            mov EDX,R15D
            call .L_456b00

            test EAX,EAX
            je .L_4539a0
.L_4539dd:

            add RSP,24
.L_4539e1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4539f0:

            movzx EDX,BYTE PTR [RSP+12]
            mov RDI,QWORD PTR [RSP]
            add RSP,24
            pop RBX
            mov RSI,R13
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            shr DL,7
            movzx EDX,DL
            jmp .L_4538c0
.L_453a15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453a20:

            cmp QWORD PTR [RSI+200],0
            je .L_453b10

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_453a35:

            mov EDX,DWORD PTR [RDI]
            mov RBX,RDI
            test EDX,EDX
            js .L_453ae0
.L_453a42:

            mov RDI,RBX
            call .L_456df0

            mov RCX,QWORD PTR [RBP+176]
            lea RDX,QWORD PTR [RCX+RCX*1]
            cmp RAX,RDX
            ja .L_453aef

            mov RDI,RBX
            call QWORD PTR [RBP+200]

            add RBP,8
            test EAX,EAX
            mov R12D,EAX
            je .L_453aa0
.L_453a72:

            mov EAX,R12D
            pop RBX
.L_453a76:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453a80:

            xor ESI,ESI
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            je .L_453aca

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457870

            test EAX,EAX
            jne .L_453b00
.L_453aa0:

            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            js .L_453a80

            mov RSI,RBP
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            js .L_453a72

            nop
            nop
            nop
.L_453ab8:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457730

            test EAX,EAX
            jne .L_453b00
.L_453aca:

            mov RSI,RBP
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            jns .L_453ab8

            jmp .L_453a72
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453ae0:

            xor ESI,ESI
            call .L_457590

            test EAX,EAX
            je .L_453a42
.L_453aef:

            mov R12D,4294946944
            jmp .L_453a72
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453b00:

            mov R12D,EAX
            mov EAX,R12D
            pop RBX
.L_453b07:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453b10:

            lea RDX,QWORD PTR [RSI+8]
            mov RSI,RDI
            jmp .L_458a80
.L_453b1c:

            nop
            nop
            nop
            nop
.L_453b20:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            sub RSP,168
.L_453b37:

            lea RBP,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+64]
            lea R12,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RDI,RBP
            mov QWORD PTR [RSP+16],RSI
            lea R13,QWORD PTR [RSP+128]
            call .L_456790

            mov RDI,RBX
            call .L_456790

            mov RDI,R12
            call .L_456790

            mov RDI,R13
            call .L_456790

            cmp QWORD PTR [R15+48],0
            je .L_453dc0

            mov RDX,R14
            mov RSI,R14
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            je .L_453bf8
.L_453ba3:

            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_4567b0

            mov RDI,RBX
            call .L_4567b0

            mov RDI,R12
            call .L_4567b0

            mov RDI,R13
            call .L_4567b0

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_453fb2

            add RSP,168
.L_453be9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_453bf8:

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov EDX,3
            mov RSI,RBX
            mov RDI,RBP
            call .L_458030

            test EAX,EAX
            jne .L_453ba3

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_453c48
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453c30:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            jne .L_453ba3
.L_453c48:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_457490

            test EAX,EAX
            jns .L_453c30

            lea RAX,QWORD PTR [R15+32]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_457590

            test EAX,EAX
            jne .L_453ef0
.L_453c74:

            lea RAX,QWORD PTR [R14+24]
            mov RDI,R12
            mov RSI,RAX
            mov RDX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,R12
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov ESI,1
            mov RDI,R12
            call .L_457010

            test EAX,EAX
            je .L_453cd4

            jmp .L_453ba3
.L_453cbc:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_457730

            test EAX,EAX
            jne .L_453ba3
.L_453cd4:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_457490

            test EAX,EAX
            jns .L_453cbc

            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov ESI,1
            mov RDI,RBX
            call .L_457010

            test EAX,EAX
            je .L_453d3c

            jmp .L_453ba3
.L_453d24:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_457730

            test EAX,EAX
            jne .L_453ba3
.L_453d3c:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            jns .L_453d24

            mov RDX,R12
            mov RSI,R12
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov ESI,1
            mov RDI,R13
            call .L_457010

            test EAX,EAX
            jne .L_453ba3
.L_453d8b:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_457490

            test EAX,EAX
            js .L_453fb7

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_457730

            test EAX,EAX
            je .L_453d8b

            jmp .L_453ba3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453dc0:

            lea RSI,QWORD PTR [R14+48]
            mov RDI,RBX
            mov RDX,RSI
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R12
            call .L_457870

            test EAX,EAX
            jne .L_453ba3

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_453e28
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453e10:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_457730

            test EAX,EAX
            jne .L_453ba3
.L_453e28:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_457490

            test EAX,EAX
            jns .L_453e10

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R13
            call .L_4578f0

            test EAX,EAX
            je .L_453e76

            jmp .L_453ba3
.L_453e50:

            xor ESI,ESI
            mov RDI,R13
            call .L_457590

            test EAX,EAX
            je .L_453e81

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_457870

            test EAX,EAX
            jne .L_453ba3
.L_453e76:

            mov EAX,DWORD PTR [RSP+128]
            test EAX,EAX
            js .L_453e50
.L_453e81:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov EDX,3
            mov RSI,RBX
            mov RDI,RBP
            call .L_458030

            test EAX,EAX
            jne .L_453ba3
.L_453ec2:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_457490

            test EAX,EAX
            js .L_453c74

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            je .L_453ec2

            jmp .L_453ba3
.L_453ef0:

            lea RSI,QWORD PTR [R14+48]
            mov RDI,RBX
            mov RDX,RSI
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,R12
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,R12
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R12
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_457870

            test EAX,EAX
            jne .L_453ba3
.L_453f84:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_457490

            test EAX,EAX
            js .L_453c74

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            je .L_453f84

            jmp .L_453ba3
.L_453fb2:

            call __stack_chk_fail@PLT
.L_453fb7:

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R12
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,R12
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_4578f0

            test EAX,EAX
            jne .L_453ba3
.L_453ff6:

            cmp DWORD PTR [RSP+96],0
            jns .L_454024

            xor ESI,ESI
            mov RDI,R12
            call .L_457590

            test EAX,EAX
            je .L_454024

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_457870

            test EAX,EAX
            je .L_453ff6

            jmp .L_453ba3
.L_454024:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_4578f0

            test EAX,EAX
            jne .L_453ba3
.L_45403a:

            cmp DWORD PTR [RSP+96],0
            jns .L_454068

            xor ESI,ESI
            mov RDI,R12
            call .L_457590

            test EAX,EAX
            je .L_454068

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_457870

            test EAX,EAX
            je .L_45403a

            jmp .L_453ba3
.L_454068:

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBX
            call .L_4578f0

            test EAX,EAX
            jne .L_453ba3
.L_45407e:

            cmp DWORD PTR [RSP+64],0
            jns .L_4540ac

            xor ESI,ESI
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            je .L_4540ac

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_457870

            test EAX,EAX
            je .L_45407e

            jmp .L_453ba3
.L_4540ac:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,RBX
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBX
            call .L_4578f0

            test EAX,EAX
            jne .L_453ba3
.L_4540eb:

            cmp DWORD PTR [RSP+64],0
            jns .L_454119

            xor ESI,ESI
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            je .L_454119

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_457870

            test EAX,EAX
            je .L_4540eb

            jmp .L_453ba3
.L_454119:

            mov RSI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [R14+48]
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_453ba3

            mov RSI,R15
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            jne .L_453ba3

            mov ESI,1
            mov RDI,R13
            call .L_457010

            test EAX,EAX
            jne .L_453ba3
.L_45415a:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_457490

            test EAX,EAX
            js .L_454184

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_457730

            test EAX,EAX
            je .L_45415a

            jmp .L_453ba3
.L_454184:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R12
            call .L_4569c0

            test EAX,EAX
            jne .L_453ba3

            mov RAX,QWORD PTR [RSP+16]
            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+24]
            call .L_4569c0

            test EAX,EAX
            jne .L_453ba3

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R13
            add RDI,48
            call .L_4569c0

            jmp .L_453ba3
.L_4541c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4541d0:

            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            lea RBX,QWORD PTR [RSI+48]
            xor ESI,ESI
            sub RSP,80
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_457590

            test EAX,EAX
            jne .L_454228
.L_454204:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_454316

            add RSP,80
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_454228:

            lea R12,QWORD PTR [RSP+16]
            lea R14,QWORD PTR [RSP+48]
            mov RDI,R12
            call .L_456790

            mov RDI,R14
            call .L_456790

            lea RDX,QWORD PTR [R13+8]
            mov RSI,RBX
            mov RDI,R12
            call .L_459b60

            test EAX,EAX
            je .L_454270
.L_454255:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_4567b0

            mov RDI,R14
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_454204
          .byte 0x90
.L_454270:

            mov RDX,R12
            mov RSI,R12
            mov RDI,R14
            call .L_457a50

            test EAX,EAX
            jne .L_454255

            mov RSI,R13
            mov RDI,R14
            call .L_453a20

            test EAX,EAX
            jne .L_454255

            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_457a50

            test EAX,EAX
            jne .L_454255

            mov RSI,R13
            mov RDI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_454255

            add RBP,24
            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_457a50

            test EAX,EAX
            jne .L_454255

            mov RSI,R13
            mov RDI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_454255

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_457a50

            test EAX,EAX
            jne .L_454255

            mov RSI,R13
            mov RDI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_454255

            mov ESI,1
            mov RDI,RBX
            call .L_456c90

            jmp .L_454255
.L_454316:

            call __stack_chk_fail@PLT
.L_45431b:

            nop
            nop
            nop
            nop
            nop
.L_454320:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,152
.L_454334:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            cmp RDX,1
            mov QWORD PTR [RSP+8],RDI
            jbe .L_454692

            mov RBP,RDX
            mov ESI,24
            mov RDI,RDX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_45469f

            lea RDI,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP+32],RDI
            call .L_456790

            lea RAX,QWORD PTR [RSP+80]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_456790

            lea RAX,QWORD PTR [RSP+112]
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_456790

            mov RAX,QWORD PTR [R14]
            mov RDI,R12
            lea RSI,QWORD PTR [RAX+48]
            call .L_4569c0

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            lea R13,QWORD PTR [R12+24]
            mov EBX,1
            jmp .L_4543d3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4543d0:

            mov RBX,RAX
.L_4543d3:

            mov RAX,QWORD PTR [R14+RBX*8]
            lea RSI,QWORD PTR [R13-24]
            mov RDI,R13
            lea RDX,QWORD PTR [RAX+48]
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            lea RAX,QWORD PTR [RBX+1]
            add R13,24
            cmp RBP,RAX
            jne .L_4543d0

            mov RAX,QWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RBP+RBP*2]
            mov RDI,QWORD PTR [RSP+32]
            shl RCX,3
            lea RDX,QWORD PTR [RAX+8]
            lea RSI,QWORD PTR [R12+RCX*1-24]
            mov QWORD PTR [RSP+40],RCX
            call .L_459b60

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RCX,QWORD PTR [RSP+40]
            test RBX,RBX
            lea R14,QWORD PTR [R14+RBP*8-8]
            lea RAX,QWORD PTR [R12+RCX*1-48]
            mov QWORD PTR [RSP+40],RAX
            jne .L_4545b6
.L_454465:

            mov RSI,QWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+24]
            call .L_4569c0

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620
.L_45447f:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RSI
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov R13,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R13
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RDI,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RDI,QWORD PTR [R14]
            mov RSI,R13
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+24]
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            lea RDI,QWORD PTR [RAX+24]
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RAX+24]
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            lea RDI,QWORD PTR [RAX+24]
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RSI,QWORD PTR [R13+16]
            mov RDI,QWORD PTR [R14]
            call .L_4568d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RSI,QWORD PTR [R13+16]
            lea RDI,QWORD PTR [RAX+24]
            call .L_4568d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            sub R14,8
            lea RDI,QWORD PTR [RAX+48]
            call .L_4567b0

            sub QWORD PTR [RSP+40],24
            test RBX,RBX
            je .L_454620

            sub RBX,1
            test RBX,RBX
            je .L_454465
.L_4545b6:

            mov R13,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+40]
            mov RDI,QWORD PTR [RSP+24]
            mov RSI,R13
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            mov RDI,R13
            lea RDX,QWORD PTR [RAX+48]
            call .L_457a50

            test EAX,EAX
            mov R15D,EAX
            jne .L_454620

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            mov R15D,EAX
            je .L_45447f

            nop
            nop
            nop
            nop
            nop
.L_454620:

            mov RDI,QWORD PTR [RSP+32]
            mov RBX,R12
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+24]
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+16]
            call .L_4567b0

            lea RDX,QWORD PTR [RBP+RBP*2]
            lea RBP,QWORD PTR [R12+RDX*8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_454650:

            mov RDI,RBX
            add RBX,24
            call .L_4567b0

            cmp RBP,RBX
            jne .L_454650

            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]
.L_45466a:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_4546a7

            add RSP,152
.L_454687:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_454692:

            mov RSI,QWORD PTR [RSI]
            call .L_4541d0

            mov R15D,EAX
            jmp .L_45466a
.L_45469f:

            mov R15D,4294947456
            jmp .L_45466a
.L_4546a7:

            call __stack_chk_fail@PLT
.L_4546ac:

            nop
            nop
            nop
            nop
.L_4546b0:

            push RBX
            mov RBX,RDI
            call .L_456790

            lea RDI,QWORD PTR [RBX+24]
            call .L_456790

            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            jmp .L_456790
.L_4546cc:

            nop
            nop
            nop
            nop
.L_4546d0:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+240],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,248
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_4546ff:

            nop
.L_454700:

            push RBX
            mov RBX,RDI
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+24]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            jmp .L_4567b0
.L_45471c:

            nop
            nop
            nop
            nop
.L_454720:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            ret 
.L_454728:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454730:

            mov EAX,DWORD PTR [RIP+.L_67e5f0]
            test EAX,EAX
            jne .L_454758

            mov DWORD PTR [RIP+.L_67e5f8],3
            mov DWORD PTR [RIP+.L_67e5fc],0
            mov DWORD PTR [RIP+.L_67e5f0],1
.L_454758:

            lea RAX,QWORD PTR [RIP+.L_67e5f8]
            ret 
.L_454760:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            cmp EDI,3
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_454774:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454780:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            cmp DI,23
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_454795:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4547a0:

            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [RIP+.L_676a00]
            lea RDI,QWORD PTR [RIP+.L_45637f]
            sub RSP,8
            jmp .L_4547ce
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4547c0:

            add RBX,16
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_4547e8

            mov RDI,QWORD PTR [RBX+8]
.L_4547ce:

            mov RSI,RBP
            call strcmp@PLT

            test EAX,EAX
            jne .L_4547c0

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4547e8:

            xor EBX,EBX
            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_4547f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454800:

            test RDI,RDI
            je .L_454810

            jmp .L_4546b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454810:

            ret 
.L_454812:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454820:

            test RDI,RDI
            je .L_454830

            jmp .L_4546d0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454830:

            ret 
.L_454832:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454840:

            test RDI,RDI
            je .L_454870

            push RBX
            mov RBX,RDI
            call .L_4546d0

            lea RDI,QWORD PTR [RBX+248]
            call .L_456790

            lea RDI,QWORD PTR [RBX+272]
            pop RBX
            jmp .L_4546b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454870:

            ret 
.L_454872:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454880:

            test RDI,RDI
            je .L_454890

            jmp .L_454700
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454890:

            ret 
.L_454892:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4548a0:

            test RDI,RDI
            je .L_454956

            push R12
            push RBP
            push RBX
.L_4548ad:

            cmp DWORD PTR [RDI+192],1
            mov RBX,RDI
            jne .L_454921
.L_4548b9:

            mov RAX,QWORD PTR [RBX+232]
            test RAX,RAX
            je .L_454906

            cmp QWORD PTR [RBX+240],0
            je .L_4548fd

            xor EBP,EBP
            xor R12D,R12D
            nop
            nop
            nop
            nop
.L_4548d8:

            mov RDI,RAX
            add RDI,RBP
            je .L_4548ec

            call .L_454700

            mov RAX,QWORD PTR [RBX+232]
.L_4548ec:

            add R12,1
            add RBP,72
            cmp QWORD PTR [RBX+240],R12
            ja .L_4548d8
.L_4548fd:

            mov RDI,RAX
            call QWORD PTR [RIP+.L_677120]
.L_454906:

            lea RAX,QWORD PTR [RBX+248]
            nop
            nop
            nop
.L_454910:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_454910

            pop RBX
.L_45491d:

            pop RBP
            pop R12
            ret 
.L_454921:

            lea RDI,QWORD PTR [RDI+8]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+32]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+56]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+80]
            call .L_454700

            lea RDI,QWORD PTR [RBX+152]
            call .L_4567b0

            jmp .L_4548b9
.L_454956:

            ret 
.L_454958:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454960:

            test RDI,RDI
            je .L_454990

            push RBX
            mov RBX,RDI
            call .L_4548a0

            lea RDI,QWORD PTR [RBX+248]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+272]
            pop RBX
            jmp .L_454700
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454990:

            ret 
.L_454992:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4549a0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_4569c0

            test EAX,EAX
            je .L_4549c0
.L_4549b5:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4549c0:

            lea RSI,QWORD PTR [RBP+24]
            lea RDI,QWORD PTR [RBX+24]
            call .L_4569c0

            test EAX,EAX
            jne .L_4549b5

            add RSP,8
            lea RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            pop RBP
            jmp .L_4569c0
.L_4549e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4549f0:

            mov ESI,DWORD PTR [RSI]
            jmp .L_45c570
.L_4549f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454a00:

            push RBX
            mov ESI,1
            mov RBX,RDI
            call .L_456c90

            test EAX,EAX
            je .L_454a18
.L_454a12:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_454a18:

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,1
            call .L_456c90

            test EAX,EAX
            jne .L_454a12

            lea RDI,QWORD PTR [RBX+48]
            xor ESI,ESI
            pop RBX
            jmp .L_456c90
.L_454a36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454a40:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+48]
            sub RSP,296
.L_454a5b:

            mov QWORD PTR [RSP+48],RDI
            mov QWORD PTR [RSP+8],RSI
            mov RDI,RBX
            xor ESI,ESI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_457590

            test EAX,EAX
            je .L_454bd0

            cmp QWORD PTR [R12+64],0
            je .L_454ac6

            lea RBP,QWORD PTR [R12+48]
            xor ESI,ESI
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            je .L_454d58

            cmp QWORD PTR [R12+64],0
            je .L_454ac6

            mov ESI,1
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            jne .L_454d6a
.L_454ac6:

            lea RBP,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+96]
            lea R15,QWORD PTR [RSP+128]
            mov RDI,RBP
            call .L_456790

            mov RDI,R13
            call .L_456790

            mov RDI,R15
            call .L_456790

            lea RAX,QWORD PTR [RSP+160]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_456790

            lea RAX,QWORD PTR [RSP+192]
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_456790

            lea RAX,QWORD PTR [RSP+224]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_456790

            lea RAX,QWORD PTR [RSP+256]
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_456790

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,RBP
            call .L_457a50

            test EAX,EAX
            je .L_454be0
.L_454b5a:

            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_4567b0

            mov RDI,R13
            call .L_4567b0

            mov RDI,R15
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+24]
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+16]
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+40]
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+32]
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+8]
.L_454ba2:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_454d74

            add RSP,296
.L_454bc0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454bd0:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R12
            call .L_4549a0

            jmp .L_454ba2
          .byte 0x90
.L_454be0:

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            lea RDX,QWORD PTR [R12+24]
            mov RSI,R13
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a

            mov RAX,QWORD PTR [RSP+48]
            lea R12,QWORD PTR [RAX+8]
            jmp .L_454cbd
.L_454c99:

            xor ESI,ESI
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            je .L_454cc4

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_457870

            test EAX,EAX
            jne .L_454b5a
.L_454cbd:

            cmp DWORD PTR [RSP+64],0
            js .L_454c99
.L_454cc4:

            lea R12,QWORD PTR [R14+24]
            mov RSI,R13
            mov RDI,R13
            mov RDX,R12
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a

            mov RAX,QWORD PTR [RSP+48]
            add RAX,8
            mov QWORD PTR [RSP+56],RAX
            jmp .L_454d14
.L_454cee:

            xor ESI,ESI
            mov RDI,R13
            call .L_457590

            test EAX,EAX
            je .L_454d1b

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,R13
            mov RDI,R13
            call .L_457870

            test EAX,EAX
            jne .L_454b5a
.L_454d14:

            cmp DWORD PTR [RSP+96],0
            js .L_454cee
.L_454d1b:

            xor ESI,ESI
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            jne .L_454d79

            xor ESI,ESI
            mov RDI,R13
            call .L_457590

            test EAX,EAX
            jne .L_454e74

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+48]
            mov RDX,R14
            call .L_453b20

            jmp .L_454b5a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454d58:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_4549a0

            jmp .L_454ba2
.L_454d6a:

            mov EAX,4294946944
            jmp .L_454ba2
.L_454d74:

            call __stack_chk_fail@PLT
.L_454d79:

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,RBP
            mov RSI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+32]
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,RBP
            mov RSI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov EDX,2
            mov RSI,R15
            mov RDI,RBP
            call .L_458030

            test EAX,EAX
            jne .L_454b5a

            mov RAX,QWORD PTR [RSP+48]
            lea RBX,QWORD PTR [RAX+8]
.L_454e4e:

            mov RSI,RBX
            mov RDI,RBP
            call .L_457490

            test EAX,EAX
            js .L_454e83

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            je .L_454e4e

            jmp .L_454b5a
.L_454e74:

            mov RDI,QWORD PTR [RSP+8]
            call .L_454a00

            jmp .L_454b5a
.L_454e83:

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,R13
            mov RSI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+16]
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov R14,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,R14
            mov RDI,R14
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a
.L_454ecd:

            cmp DWORD PTR [RSP+192],0
            jns .L_454efc

            xor ESI,ESI
            mov RDI,R14
            call .L_457590

            test EAX,EAX
            je .L_454efc

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_457870

            test EAX,EAX
            je .L_454ecd

            jmp .L_454b5a
.L_454efc:

            mov R14,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R14
            mov RDI,R14
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a
.L_454f19:

            cmp DWORD PTR [RSP+192],0
            jns .L_454f48

            xor ESI,ESI
            mov RDI,R14
            call .L_457590

            test EAX,EAX
            je .L_454f48

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_457870

            test EAX,EAX
            je .L_454f19

            jmp .L_454b5a
.L_454f48:

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,R15
            mov RDI,R15
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a
.L_454f60:

            cmp DWORD PTR [RSP+128],0
            jns .L_454f8f

            xor ESI,ESI
            mov RDI,R15
            call .L_457590

            test EAX,EAX
            je .L_454f8f

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R15
            call .L_457870

            test EAX,EAX
            je .L_454f60

            jmp .L_454b5a
.L_454f8f:

            mov RDX,R13
            mov RSI,R15
            mov RDI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R12
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            jne .L_454b5a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_453a20

            test EAX,EAX
            jne .L_454b5a

            mov R12,QWORD PTR [RSP+40]
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R15
            mov RDI,R12
            call .L_4578f0

            test EAX,EAX
            jne .L_454b5a
.L_455006:

            cmp DWORD PTR [RSP+224],0
            jns .L_455035

            xor ESI,ESI
            mov RDI,R12
            call .L_457590

            test EAX,EAX
            je .L_455035

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_457870

            test EAX,EAX
            je .L_455006

            jmp .L_454b5a
.L_455035:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_4569c0

            test EAX,EAX
            jne .L_454b5a

            mov RAX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [RAX+24]
            call .L_4569c0

            test EAX,EAX
            jne .L_454b5a

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+32]
            add RDI,48
            call .L_4569c0

            jmp .L_454b5a
.L_45507f:

            nop
.L_455080:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,456
.L_455091:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+440],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+120],0
            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP+16],R8
            mov QWORD PTR [RSP+24],R9
            je .L_4551e2

            lea R14,QWORD PTR [RSP+96]
            lea R15,QWORD PTR [RSP+128]
            mov RBP,RDI
            mov RBX,RCX
            mov RDI,R14
            call .L_456790

            mov RDI,R15
            call .L_456790

            lea RAX,QWORD PTR [RBP+152]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_456cf0

            cmp EAX,1
            jne .L_45547f

            mov R13,QWORD PTR [RBP+184]
            mov ESI,72
            mov EDI,2
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_455210

            mov RSI,RBX
            mov RDI,RAX
            lea RBX,QWORD PTR [R12+72]
            call .L_4549a0

            test EAX,EAX
            jne .L_455194

            mov RSI,R12
            mov RDI,RBX
            call .L_4549a0

            test EAX,EAX
            jne .L_455194

            add R13,1
            mov RAX,R13
            shr RAX,1
            mov QWORD PTR [RSP+48],RAX
            je .L_455245

            xor R13D,R13D
            mov QWORD PTR [RSP+40],R12
            mov R12,R13
            mov R13,RAX
            jmp .L_45517d
          .byte 0x90
.L_455170:

            add R12,1
            cmp R13,R12
            je .L_455240
.L_45517d:

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,RBP
            call .L_453b20

            test EAX,EAX
            je .L_455170

            mov R12,QWORD PTR [RSP+40]
.L_455194:

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_454700

            test RBX,RBX
            mov EAX,DWORD PTR [RSP+8]
            je .L_455459
.L_4551ad:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_454700

            mov EAX,DWORD PTR [RSP+8]
.L_4551bd:

            mov DWORD PTR [RSP+8],EAX
            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]

            mov RDI,R14
            call .L_4567b0

            mov RDI,R15
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+8]
            test EAX,EAX
            jne .L_455225
.L_4551e2:

            mov RCX,QWORD PTR [RSP+440]
            xor RCX,QWORD PTR FS:[40]
            jne .L_455727

            add RSP,456
.L_455200:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455210:

            mov RDI,R14
            call .L_4567b0

            mov RDI,R15
            call .L_4567b0

            mov EAX,4294947456
.L_455225:

            mov RDI,QWORD PTR [RSP]
            test RDI,RDI
            je .L_4551e2

            mov DWORD PTR [RSP],EAX
            call .L_454700

            mov EAX,DWORD PTR [RSP]
            jmp .L_4551e2
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455240:

            mov R12,QWORD PTR [RSP+40]
.L_455245:

            lea R13,QWORD PTR [RSP+296]
            mov EDX,1
            mov RDI,RBP
            mov QWORD PTR [RSP+296],RBX
            mov RSI,R13
            call .L_454320

            test EAX,EAX
            jne .L_455194

            mov RCX,RBX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_454a40

            test EAX,EAX
            jne .L_455194

            mov EDX,1
            mov RSI,R13
            mov RDI,RBP
            mov QWORD PTR [RSP+296],RBX
            call .L_454320

            test EAX,EAX
            jne .L_455194

            mov RDI,QWORD PTR [RSP+8]
            xor ESI,ESI
            call .L_456cf0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R14
            mov R13D,EAX
            call .L_4569c0

            test EAX,EAX
            jne .L_455194

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+32]
            mov RDI,R15
            call .L_4578f0

            test EAX,EAX
            jne .L_455194

            xor EAX,EAX
            cmp R13D,1
            mov RSI,R15
            setne AL
            mov RDI,R14
            mov EDX,EAX
            mov DWORD PTR [RSP+32],EAX
            call .L_456b00

            test EAX,EAX
            jne .L_455194

            mov R13,QWORD PTR [RSP+48]
            lea RAX,QWORD PTR [RSP+304]
            xor ESI,ESI
            mov ECX,129
            mov RDI,RAX
            mov QWORD PTR [RSP+56],RAX
            lea RDX,QWORD PTR [R13+1]
            call __memset_chk@PLT

            test R13,R13
            je .L_455407

            mov QWORD PTR [RSP+8],R12
            mov R12,QWORD PTR [RSP+56]
            xor R8D,R8D
            mov QWORD PTR [RSP+64],RBP
            mov QWORD PTR [RSP+72],R15
            mov RBP,R13
            mov QWORD PTR [RSP+40],RBX
            mov R15,R8
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455360:

            mov RSI,R15
            mov RDI,R14
            call .L_456cf0

            movzx EBX,BYTE PTR [R12+R15*1]
            lea RSI,QWORD PTR [RBP+R15*1]
            mov RDI,R14
            mov R13D,EAX
            call .L_456cf0

            add EAX,EAX
            or EBX,EAX
            or R13D,EBX
            mov BYTE PTR [R12+R15*1],R13B
            add R15,1
            cmp RBP,R15
            jne .L_455360

            mov R10,QWORD PTR [RSP+56]
            mov R8,R15
            mov R12,QWORD PTR [RSP+8]
            mov RBX,QWORD PTR [RSP+40]
            mov RBP,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov R15,QWORD PTR [RSP+72]
            lea RDI,QWORD PTR [R10+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4553c0:

            movzx R11D,BYTE PTR [RDI]
            movzx R9D,BYTE PTR [RDI-1]
            mov ECX,ESI
            add RDI,1
            xor ECX,R11D
            mov EAX,R9D
            and ESI,R11D
            mov EDX,ECX
            mov R13D,ECX
            not EDX
            and EDX,1
            imul EAX,EDX
            movzx EDX,DL
            shl EDX,7
            or EDX,R9D
            xor ECX,EAX
            mov BYTE PTR [RDI-2],DL
            and R13D,EAX
            mov BYTE PTR [RDI-1],CL
            mov RAX,RDI
            or ESI,R13D
            sub RAX,R10
            cmp RAX,R8
            jbe .L_4553c0
.L_455407:

            lea RAX,QWORD PTR [RSP+224]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_4546b0

            mov RAX,QWORD PTR [RSP+48]
            mov RSI,QWORD PTR [RSP]
            mov ECX,2
            mov RDX,R12
            mov RDI,RBP
            movzx R8D,BYTE PTR [RSP+RAX*1+304]
            call .L_453960

            test EAX,EAX
            je .L_455489
.L_455442:

            mov RDI,QWORD PTR [RSP+40]
            mov DWORD PTR [RSP+8],EAX
            call .L_454700

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_455194
.L_455459:

            mov DWORD PTR [RSP+8],EAX
            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]

            mov RDI,R14
            call .L_4567b0

            mov RDI,R15
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_455225
.L_45547f:

            mov EAX,4294946944
            jmp .L_4551e2
.L_455489:

            mov RAX,QWORD PTR [RSP]
            mov ESI,1
            add RAX,48
            mov RDI,RAX
            mov QWORD PTR [RSP+64],RAX
            call .L_456c90

            test EAX,EAX
            jne .L_455442

            cmp QWORD PTR [RSP+16],0
            je .L_455670

            mov RAX,QWORD PTR [RBP+176]
            lea R13,QWORD PTR [RSP+160]
            mov RDI,R13
            add RAX,7
            shr RAX,3
            mov QWORD PTR [RSP+88],RAX
            call .L_456790

            lea RAX,QWORD PTR [RSP+192]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_456790

            lea RAX,QWORD PTR [RBP+8]
            mov DWORD PTR [RSP+84],12
            mov QWORD PTR [RSP+72],RAX
.L_4554fd:

            mov RCX,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RSP+16]
            mov RDI,R13
            mov RSI,QWORD PTR [RSP+88]
            call .L_459af0

            test EAX,EAX
            je .L_455531

            jmp .L_455572
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455520:

            mov ESI,1
            mov RDI,R13
            call .L_457120

            test EAX,EAX
            jne .L_455572
.L_455531:

            mov RSI,QWORD PTR [RSP+72]
            mov RDI,R13
            call .L_457490

            test EAX,EAX
            jns .L_455520

            sub DWORD PTR [RSP+84],1
            je .L_45572c

            mov ESI,1
            mov RDI,R13
            call .L_457590

            test EAX,EAX
            jle .L_4554fd

            mov RDI,QWORD PTR [RSP+64]
            mov RDX,R13
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            je .L_455591
.L_455572:

            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+8]
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+16]
            jmp .L_455442
.L_455591:

            mov RDI,QWORD PTR [RSP+64]
            mov RSI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,R13
            mov RSI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP]
            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP]
            mov RSI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,R13
            mov RSI,RDI
            call .L_457a50

            test EAX,EAX
            jne .L_455572

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBP
            call .L_453a20

            test EAX,EAX
            jne .L_455572

            mov RAX,QWORD PTR [RSP]
            mov RDX,QWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RAX+24]
            mov RSI,RCX
            mov RDI,RCX
            mov QWORD PTR [RSP+16],RCX
            call .L_457a50

            test EAX,EAX
            mov RCX,QWORD PTR [RSP+16]
            jne .L_455572

            mov RDI,RCX
            mov RSI,RBP
            call .L_453a20

            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+8]
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+16]
            test EAX,EAX
            jne .L_455442
.L_455670:

            mov R13,QWORD PTR [RSP+48]
            jmp .L_4556d1
.L_455677:

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            mov RDX,RSI
            call .L_453b20

            test EAX,EAX
            jne .L_455442

            mov RAX,QWORD PTR [RSP+56]
            mov RSI,QWORD PTR [RSP+40]
            mov ECX,2
            mov RDX,R12
            mov RDI,RBP
            movzx R8D,BYTE PTR [RAX+R13*1]
            call .L_453960

            test EAX,EAX
            jne .L_455442

            mov RSI,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RSP+40]
            mov RDI,RBP
            mov RDX,RSI
            call .L_454a40

            test EAX,EAX
            jne .L_455442
.L_4556d1:

            sub R13,1
            cmp R13,-1
            jne .L_455677

            mov RDI,QWORD PTR [RSP+40]
            call .L_454700

            mov EDX,DWORD PTR [RSP+32]
            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            call .L_4538c0

            test EAX,EAX
            jne .L_455194

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            call .L_4541d0

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_454700

            test RBX,RBX
            mov EAX,DWORD PTR [RSP+8]
            jne .L_4551ad

            jmp .L_4551bd
.L_455727:

            call __stack_chk_fail@PLT
.L_45572c:

            mov EAX,4294947584
            jmp .L_455442
.L_455736:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455740:

            sub RSP,8
            add RDI,48
            xor ESI,ESI
            call .L_457590

            test EAX,EAX
            sete AL
            add RSP,8
            movzx EAX,AL
            ret 
.L_45575c:

            nop
            nop
            nop
            nop
.L_455760:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_457490

            test EAX,EAX
            jne .L_4557a0

            lea RSI,QWORD PTR [RBP+24]
            lea RDI,QWORD PTR [RBX+24]
            call .L_457490

            test EAX,EAX
            jne .L_4557a0

            lea RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RBX+48]
            call .L_457490

            test EAX,EAX
            jne .L_4557a0
.L_455797:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_4557a0:

            mov EAX,4294946944
            jmp .L_455797
.L_4557a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4557b0:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            call .L_457cc0

            test EAX,EAX
            je .L_4557d0
.L_4557c5:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4557d0:

            lea RDI,QWORD PTR [RBX+24]
            mov RDX,R12
            mov ESI,EBP
            call .L_457cc0

            test EAX,EAX
            jne .L_4557c5

            lea RDI,QWORD PTR [RBX+48]
            mov ESI,1
            pop RBX
            pop RBP
            pop R12
            jmp .L_456c90
.L_4557f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455800:

            cmp EDX,1
            ja .L_4558f0

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RDI,QWORD PTR [RSI+48]
            mov RBX,RSI
            xor ESI,ESI
            mov R14,R9
            sub RSP,8
            mov R12,R8
            mov EBP,EDX
            call .L_457590

            test EAX,EAX
            jne .L_455860

            test R14,R14
            je .L_455900

            mov BYTE PTR [R12],0
            mov QWORD PTR [R15],1
.L_45584c:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455860:

            lea RDI,QWORD PTR [R13+8]
            call .L_456e70

            test EBP,EBP
            mov R13,RAX
            je .L_4558b0

            lea RAX,QWORD PTR [RAX+1]
            cmp R14,RAX
            mov QWORD PTR [R15],RAX
            jb .L_455900

            lea RDI,QWORD PTR [RBX+24]
            xor ESI,ESI
            call .L_456cf0

            lea RSI,QWORD PTR [R12+1]
            add EAX,2
            mov RDX,R13
            mov BYTE PTR [R12],AL
            mov RDI,RBX
.L_45589d:

            add RSP,8
.L_4558a1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_456f80
.L_4558b0:

            lea RAX,QWORD PTR [RAX+RAX*1+1]
            cmp R14,RAX
            mov QWORD PTR [R15],RAX
            jb .L_455900

            lea RSI,QWORD PTR [R12+1]
            mov BYTE PTR [R12],4
            mov RDX,R13
            mov RDI,RBX
            call .L_456f80

            test EAX,EAX
            jne .L_45584c

            lea RSI,QWORD PTR [R12+R13*1+1]
            lea RDI,QWORD PTR [RBX+24]
            mov RDX,R13
            jmp .L_45589d
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4558f0:

            mov EAX,4294946944
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455900:

            mov EAX,4294947072
            jmp .L_45584c
.L_45590a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_455910:

            test RCX,RCX
            je .L_4559b0

            cmp BYTE PTR [RDX],0
            jne .L_455930

            cmp RCX,1
            jne .L_4559b0

            mov RDI,RSI
            jmp .L_454a00
.L_455930:

            push R13
            push R12
            add RDI,8
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RCX
            mov R12,RSI
            sub RSP,8
            call .L_456e70

            cmp BYTE PTR [RBP],4
            mov R13,RAX
            jne .L_4559d0

            lea RAX,QWORD PTR [RAX+RAX*1+1]
            cmp RBX,RAX
            jne .L_4559c0

            lea RSI,QWORD PTR [RBP+1]
            mov RDX,R13
            mov RDI,R12
            call .L_456e80

            test EAX,EAX
            je .L_455980
.L_455972:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_455980:

            lea RSI,QWORD PTR [RBP+R13*1+1]
            lea RDI,QWORD PTR [R12+24]
            mov RDX,R13
            call .L_456e80

            test EAX,EAX
            jne .L_455972

            add RSP,8
            lea RDI,QWORD PTR [R12+48]
            mov ESI,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_456c90
          .byte 0x90
.L_4559b0:

            mov EAX,4294946944
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4559c0:

            mov EAX,4294946944
            jmp .L_455972
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4559d0:

            mov EAX,4294947200
            jmp .L_455972
.L_4559d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4559e0:

            cmp RCX,1
            mov R8,RDX
            jbe .L_455a18

            mov RAX,QWORD PTR [RDX]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [R8],RDX
            movzx EAX,BYTE PTR [RAX]
            test AL,AL
            je .L_455a18

            sub RCX,1
            cmp RAX,RCX
            ja .L_455a18

            lea RCX,QWORD PTR [RDX+RAX*1]
            mov QWORD PTR [R8],RCX
            mov RCX,RAX
            jmp .L_455910
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455a18:

            mov EAX,4294946944
            ret 
.L_455a1e:

            nop
            nop
.L_455a20:

            test R9,R9
            je .L_455a58

            push RBP
            push RBX
            mov RBP,R8
            lea R8,QWORD PTR [R8+1]
            sub R9,1
            mov RBX,RCX
            sub RSP,8
            call .L_455800

            test EAX,EAX
            jne .L_455a4c

            mov RDX,QWORD PTR [RBX]
            mov BYTE PTR [RBP],DL
            add QWORD PTR [RBX],1
.L_455a4c:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455a58:

            mov EAX,4294946944
            ret 
.L_455a5e:

            nop
            nop
.L_455a60:

            cmp RDX,2
            jbe .L_455ab0

            mov RAX,QWORD PTR [RSI]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSI],RDX
            cmp BYTE PTR [RAX],3
            jne .L_455ab0

            lea RDX,QWORD PTR [RAX+2]
            lea RCX,QWORD PTR [RAX+3]
            mov QWORD PTR [RSI],RDX
            movzx EDX,BYTE PTR [RAX+1]
            mov QWORD PTR [RSI],RCX
            movzx EAX,BYTE PTR [RAX+2]
            shl EDX,8
            or EAX,EDX
            cmp AX,23
            je .L_455aa0

            mov EAX,4294947200
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455aa0:

            mov ESI,3
            jmp .L_45c570
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455ab0:

            mov EAX,4294946944
            ret 
.L_455ab6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455ac0:

            cmp DWORD PTR [RDI],3
            je .L_455ad0

            mov EAX,4294946944
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455ad0:

            cmp RCX,2
            mov QWORD PTR [RSI],3
            jbe .L_455af0

            mov EAX,3
            mov BYTE PTR [RDX+2],23
            mov WORD PTR [RDX],AX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455af0:

            mov EAX,4294947072
            ret 
.L_455af6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455b00:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea RDI,QWORD PTR [RSI+48]
            mov RBX,RSI
            mov ESI,1
            sub RSP,88
.L_455b1d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_457590

            test EAX,EAX
            jne .L_455d20

            cmp QWORD PTR [R12+96],0
            je .L_455d30

            cmp QWORD PTR [R12+120],0
            je .L_455d30

            xor ESI,ESI
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            js .L_455d20

            lea RBP,QWORD PTR [RBX+24]
            xor ESI,ESI
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            js .L_455d20

            lea R14,QWORD PTR [R12+8]
            mov RDI,RBX
            mov RSI,R14
            call .L_457490

            test EAX,EAX
            jns .L_455d20

            mov RSI,R14
            mov RDI,RBP
            call .L_457490

            test EAX,EAX
            jns .L_455d20

            lea R13,QWORD PTR [RSP+16]
            lea R15,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_456790

            mov RDI,R15
            call .L_456790

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            je .L_455c10
.L_455bd1:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_4567b0

            mov RDI,R15
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+12]
.L_455be9:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_455d8d

            add RSP,88
.L_455c01:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455c10:

            mov RSI,R12
            mov RDI,R13
            call .L_453a20

            test EAX,EAX
            jne .L_455bd1

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_455bd1

            mov RSI,R12
            mov RDI,R15
            call .L_453a20

            test EAX,EAX
            jne .L_455bd1

            cmp QWORD PTR [R12+48],0
            je .L_455d3a

            lea RDX,QWORD PTR [R12+32]
            mov RSI,R15
            mov RDI,R15
            call .L_457870

            test EAX,EAX
            jne .L_455bd1

            jmp .L_455c86
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455c70:

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_457730

            test EAX,EAX
            jne .L_455bd1
.L_455c86:

            mov RSI,R14
            mov RDI,R15
            call .L_457490

            test EAX,EAX
            jns .L_455c70
.L_455c95:

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R15
            call .L_457a50

            test EAX,EAX
            jne .L_455bd1

            mov RSI,R12
            mov RDI,R15
            call .L_453a20

            test EAX,EAX
            jne .L_455bd1

            lea RDX,QWORD PTR [R12+56]
            mov RSI,R15
            mov RDI,R15
            call .L_457870

            test EAX,EAX
            jne .L_455bd1

            jmp .L_455cee
.L_455cd8:

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_457730

            test EAX,EAX
            jne .L_455bd1
.L_455cee:

            mov RSI,R14
            mov RDI,R15
            call .L_457490

            test EAX,EAX
            jns .L_455cd8

            mov RSI,R15
            mov RDI,R13
            call .L_457490

            test EAX,EAX
            je .L_455bd1

            mov EAX,4294947712
            jmp .L_455bd1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455d20:

            mov EAX,4294947712
            jmp .L_455be9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455d30:

            mov EAX,4294946944
            jmp .L_455be9
.L_455d3a:

            mov EDX,3
            mov RSI,R15
            mov RDI,R15
            call .L_4579e0

            test EAX,EAX
            jne .L_455bd1

            jmp .L_455d80
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455d58:

            xor ESI,ESI
            mov RDI,R15
            call .L_457590

            test EAX,EAX
            je .L_455c95

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_457870

            test EAX,EAX
            jne .L_455bd1
.L_455d80:

            mov EAX,DWORD PTR [RSP+48]
            test EAX,EAX
            js .L_455d58

            jmp .L_455c95
.L_455d8d:

            call __stack_chk_fail@PLT
.L_455d92:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455da0:

            cmp QWORD PTR [RDI+96],0
            je .L_455e00

            cmp QWORD PTR [RDI+120],0
            je .L_455e00

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov ESI,1
            mov RDI,RBP
            sub RSP,8
            call .L_457590

            test EAX,EAX
            js .L_455df0

            lea RSI,QWORD PTR [RBX+152]
            mov RDI,RBP
            call .L_457490

            xor EDX,EDX
            test EAX,EAX
            jns .L_455df0
.L_455de0:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455df0:

            mov EDX,4294947712
            jmp .L_455de0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455e00:

            mov EDX,4294946944
            mov EAX,EDX
            ret 
.L_455e08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455e10:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RCX+48]
            mov ESI,1
            mov R12,RDX
            sub RSP,8
            mov RBP,RCX
            mov R14,R8
            call .L_457590

            test EAX,EAX
            jne .L_455ea0

            mov RSI,R12
            mov RDI,RBX
            call .L_455da0

            test EAX,EAX
            je .L_455e60
.L_455e51:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_455e60:

            mov RSI,RBP
            mov RDI,RBX
            call .L_455b00

            test EAX,EAX
            jne .L_455e51

            cmp QWORD PTR [RBX+96],0
            je .L_455e51

            add RSP,8
            mov R9,R15
            mov R8,R14
            mov RCX,RBP
            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_455080
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455ea0:

            mov EAX,4294946944
            jmp .L_455e51
.L_455ea7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455eb0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov RDI,RDX
            mov ESI,1
            mov RBX,RDX
            sub RSP,8
            mov R12,RCX
            call .L_457590

            test EAX,EAX
            je .L_455f30

            mov RSI,-1
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            jne .L_455f08

            mov RSI,R12
            mov RDI,RBP
            call .L_4549a0

            test EAX,EAX
            je .L_455f48
.L_455ef9:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455f08:

            add RSP,8
            mov RCX,R12
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            xor R9D,R9D
            pop RBX
            pop RBP
            pop R12
            pop R13
            xor R8D,R8D
            jmp .L_455e10
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455f30:

            add RSP,8
            mov RSI,R12
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4549a0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_455f48:

            add RBP,24
            xor ESI,ESI
            mov RDI,RBP
            call .L_457590

            test EAX,EAX
            je .L_455ef9

            add RSP,8
            lea RSI,QWORD PTR [R13+8]
            mov RDX,RBP
            pop RBX
            mov RDI,RBP
            pop RBP
            pop R12
            pop R13
            jmp .L_4578f0
.L_455f73:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455f80:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_455f8e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+96],0
            mov QWORD PTR [RSP+8],RCX
            je .L_456060

            cmp QWORD PTR [RDI+120],0
            mov RBX,RDI
            je .L_456060

            lea RBP,QWORD PTR [RSP+16]
            mov R12,RDX
            mov R13,RSI
            mov R14,R8
            mov R15,R9
            mov RDI,RBP
            call .L_4546b0

            mov RCX,QWORD PTR [RSP+8]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_455eb0

            test EAX,EAX
            mov R12D,EAX
            je .L_456020
.L_455fef:

            mov RDI,RBP
            call .L_454700
.L_455ff7:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_456068

            add RSP,104
.L_45600e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456020:

            mov RCX,R15
            mov RDX,R14
            mov RSI,R13
            mov RDI,RBX
            call .L_455eb0

            test EAX,EAX
            mov R12D,EAX
            jne .L_455fef

            mov RCX,R13
            mov RDX,RBP
            mov RSI,R13
            mov RDI,RBX
            call .L_454a40

            test EAX,EAX
            mov R12D,EAX
            jne .L_455fef

            mov RSI,R13
            mov RDI,RBX
            call .L_4541d0

            mov R12D,EAX
            jmp .L_455fef
.L_456060:

            mov R12D,4294947200
            jmp .L_455ff7
.L_456068:

            call __stack_chk_fail@PLT
.L_45606d:

            nop
            nop
            nop
.L_456070:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_45607e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+184]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP],R9
            add RAX,7
            mov R12,RAX
            shr R12,3
            cmp QWORD PTR [RDI+96],0
            je .L_456187

            cmp QWORD PTR [RDI+120],0
            mov R14,RDI
            je .L_456187

            and RAX,-8
            lea R13,QWORD PTR [RSP+32]
            mov RBX,RDX
            mov R15,R8
            mov EBP,31
            mov QWORD PTR [RSP+8],RAX
.L_4560e0:

            mov RDX,R12
            mov RSI,R13
            mov RDI,QWORD PTR [RSP]
            call R15

            test EAX,EAX
            jne .L_456160

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_456e80

            test EAX,EAX
            jne .L_456160

            mov RSI,QWORD PTR [RSP+8]
            sub RSI,QWORD PTR [R14+184]
            mov RDI,RBX
            call .L_457120

            test EAX,EAX
            jne .L_456160

            sub EBP,1
            je .L_456180

            mov ESI,1
            mov RDI,RBX
            call .L_457590

            test EAX,EAX
            js .L_4560e0

            lea RSI,QWORD PTR [R14+152]
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            jns .L_4560e0

            mov R9,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RSP+16]
            mov R8,R15
            mov RSI,QWORD PTR [RSP+24]
            mov RDX,RBX
            mov RDI,R14
            call .L_455e10
.L_456160:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_45618e

            add RSP,88
.L_456174:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_456180:

            mov EAX,4294947584
            jmp .L_456160
.L_456187:

            mov EAX,4294946944
            jmp .L_456160
.L_45618e:

            call __stack_chk_fail@PLT
.L_456193:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4561a0:

            mov RAX,RSI
            lea RSI,QWORD PTR [RDI+80]
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RAX
            jmp .L_456070
.L_4561b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4561c0:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov RBX,RSI
            mov ESI,EDI
            mov RDI,RBX
            mov RBP,RDX
            call .L_45c570

            test EAX,EAX
            je .L_4561e0

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4561e0:

            lea RCX,QWORD PTR [RBX+272]
            lea RDX,QWORD PTR [RBX+248]
            lea RSI,QWORD PTR [RBX+80]
            mov R9,R12
            mov R8,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_456070
.L_456204:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456210:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,344
.L_456221:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_456370

            cmp EAX,DWORD PTR [RSI]
            mov RBX,RSI
            jne .L_456370

            lea R13,QWORD PTR [RSI+272]
            mov RBP,RDI
            lea RDI,QWORD PTR [RDI+272]
            mov RSI,R13
            call .L_457490

            test EAX,EAX
            jne .L_456370

            lea R14,QWORD PTR [RBX+296]
            lea RDI,QWORD PTR [RBP+296]
            mov RSI,R14
            call .L_457490

            test EAX,EAX
            jne .L_456370

            lea R15,QWORD PTR [RBX+320]
            lea RDI,QWORD PTR [RBP+320]
            mov RSI,R15
            call .L_457490

            test EAX,EAX
            jne .L_456370

            lea RBP,QWORD PTR [RSP+80]
            mov R12,RSP
            mov RDI,R12
            call .L_4546b0

            mov RDI,RBP
            call .L_4546d0

            mov ESI,DWORD PTR [RBX]
            mov RDI,RBP
            call .L_45c570

            lea RCX,QWORD PTR [RBX+80]
            lea RDX,QWORD PTR [RBX+248]
            xor R9D,R9D
            xor R8D,R8D
            mov RSI,R12
            mov RDI,RBP
            call .L_455e10

            test EAX,EAX
            mov EBX,EAX
            je .L_456328
.L_4562ea:

            mov RDI,R12
            call .L_454700

            mov RDI,RBP
            call .L_4548a0
.L_4562fa:

            mov RDX,QWORD PTR [RSP+328]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_45637a

            add RSP,344
.L_456316:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456328:

            mov RSI,R13
            mov RDI,R12
            call .L_457490

            test EAX,EAX
            je .L_456340
.L_456337:

            mov EBX,4294946944
            jmp .L_4562ea
          .byte 0x66
          .byte 0x90
.L_456340:

            lea RDI,QWORD PTR [R12+24]
            mov RSI,R14
            call .L_457490

            test EAX,EAX
            jne .L_456337

            lea RDI,QWORD PTR [R12+48]
            mov RSI,R15
            call .L_457490

            test EAX,EAX
            mov EBX,EAX
            je .L_4562ea

            jmp .L_456337
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456370:

            mov EBX,4294946944
            jmp .L_4562fa
.L_45637a:

            call __stack_chk_fail@PLT
.L_45637f:

            jae .L_4563e6
          .byte 0x63
          .byte 0x70
          .byte 0x32
          .byte 0x35
          .byte 0x36
          .byte 0x72
          .byte 0x31
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456390:

            test RDI,RDI
            je .L_4563fc

            xor R8D,R8D
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_4563a0:

            mov RAX,QWORD PTR [RDX+RCX*8]
            xor R10D,R10D
            cmp RAX,R8
            setb R10B
            sub RAX,R8
            mov QWORD PTR [RDX+RCX*8],RAX
            mov R9,QWORD PTR [RSI+RCX*8]
            cmp RAX,R9
            adc R10,0
            sub RAX,R9
            mov QWORD PTR [RDX+RCX*8],RAX
            add RCX,1
            mov R8,R10
            cmp RDI,RCX
            jne .L_4563a0

            test R10,R10
            lea RAX,QWORD PTR [RDX+RDI*8]
            jne .L_4563e6

            jmp .L_4563fe
          .byte 0x66
          .byte 0x90
.L_4563e0:

            mov R8D,1
.L_4563e6:

            mov RDX,QWORD PTR [RAX]
            add RAX,8
            mov RCX,RDX
            sub RCX,R8
            mov QWORD PTR [RAX-8],RCX
            cmp RDX,R8
            jb .L_4563e0
.L_4563fc:

            ret 
.L_4563fe:

            ret 
.L_456400:

            mov R9,RDI
            push RBX
.L_456404:

            mov RDI,RDX
            cmp R9,15
            mov RBX,RCX
            jbe .L_456780

            mov R11,R9
            mov R10,R9
            xor ECX,ECX
            and R11D,15
.L_456420:

            sub R10,16
            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            cmp R11,R10
            jne .L_456420

            and R9D,15
.L_456624:

            cmp R9,7
            jbe .L_45672d

            sub R9,8
            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
.L_45672d:

            test R9,R9
            je .L_456760

            nop
            nop
            nop
            nop
            nop
            nop
.L_456738:

            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            sub R9,1
            jne .L_456738
.L_456760:

            xor EAX,EAX
            add RCX,QWORD PTR [RDI]
            setb AL
            mov QWORD PTR [RDI],RCX
            add RDI,8
            test RAX,RAX
            mov ECX,1
            jne .L_456760

            pop RBX
.L_45677a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456780:

            xor ECX,ECX
            jmp .L_456624
.L_456787:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456790:

            test RDI,RDI
            je .L_4567ab

            mov DWORD PTR [RDI],1
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
.L_4567ab:

            ret 
.L_4567ad:

            nop
            nop
            nop
.L_4567b0:

            test RDI,RDI
            je .L_456810

            push RBX

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            je .L_4567f3

            mov RDX,QWORD PTR [RBX+8]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4567ed

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
.L_4567d8:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4567d8
.L_4567ed:

            call QWORD PTR [RIP+.L_677120]
.L_4567f3:

            mov DWORD PTR [RBX],1
            mov QWORD PTR [RBX+8],0
            mov QWORD PTR [RBX+16],0
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456810:

            ret 
.L_456812:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456820:

            cmp RSI,10000
            ja .L_4568ca

            cmp QWORD PTR [RDI+8],RSI
            jae .L_4568c0

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_45683e:

            mov ESI,8
            mov RBX,RDI
            mov RDI,RBP
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_4568c3

            mov RSI,QWORD PTR [RBX+16]
            test RSI,RSI
            je .L_4568ab

            mov RAX,QWORD PTR [RBX+8]
            mov RDI,R12
            lea RDX,QWORD PTR [RAX*8]
            call memcpy@PLT

            mov RDX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4568a5

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456890:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_456890
.L_4568a5:

            call QWORD PTR [RIP+.L_677120]
.L_4568ab:

            mov QWORD PTR [RBX+8],RBP
            mov QWORD PTR [RBX+16],R12
            xor EAX,EAX
.L_4568b5:

            pop RBX
.L_4568b6:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4568c0:

            xor EAX,EAX
            ret 
.L_4568c3:

            mov EAX,4294967280
            jmp .L_4568b5
.L_4568ca:

            mov EAX,4294967280
            ret 
.L_4568d0:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            jbe .L_4569a0

            mov RAX,RDX
            push R12
            push RBP
            sub RAX,1
            push RBX
.L_4568e8:

            je .L_456913

            mov RCX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RCX+RAX*8],0
            je .L_45690a

            jmp .L_4569a8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456900:

            cmp QWORD PTR [RCX+RDX*8],0
            jne .L_456918

            mov RAX,RDX
.L_45690a:

            mov RDX,RAX
            sub RDX,1
            jne .L_456900
.L_456913:

            mov EAX,1
.L_456918:

            cmp RSI,RAX
            mov RBX,RDI
            cmovae RAX,RSI
            mov ESI,8
            mov RBP,RAX
            mov RDI,RAX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_4569b0

            mov RSI,QWORD PTR [RBX+16]
            test RSI,RSI
            je .L_45698b

            lea RDX,QWORD PTR [RBP*8]
            mov RDI,RAX
            call memcpy@PLT

            mov RDX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_456985

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456970:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_456970
.L_456985:

            call QWORD PTR [RIP+.L_677120]
.L_45698b:

            mov QWORD PTR [RBX+8],RBP
            mov QWORD PTR [RBX+16],R12
            xor EAX,EAX
.L_456995:

            pop RBX
.L_456996:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4569a0:

            jmp .L_456820
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4569a8:

            mov RAX,RDX
            jmp .L_456918
.L_4569b0:

            mov EAX,4294967280
            jmp .L_456995
.L_4569b7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4569c0:

            push R13
            push R12
            xor R13D,R13D
            push RBP
            push RBX
            sub RSP,8
.L_4569cd:

            cmp RDI,RSI
            je .L_456a31

            mov RDX,QWORD PTR [RSI+16]
            mov RBP,RSI
            mov R12,RDI
            test RDX,RDX
            je .L_456a80

            mov RAX,QWORD PTR [RSI+8]
            mov RBX,RAX
            sub RBX,1
            je .L_456a13

            cmp QWORD PTR [RDX+RBX*8],0
            je .L_456a0a

            jmp .L_456a98
          .byte 0x66
          .byte 0x90
.L_456a00:

            cmp QWORD PTR [RDX+RAX*8],0
            jne .L_456a18

            mov RBX,RAX
.L_456a0a:

            mov RAX,RBX
            sub RAX,1
            jne .L_456a00
.L_456a13:

            mov EBX,1
.L_456a18:

            mov EAX,DWORD PTR [RBP]
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [R12],EAX
            call .L_456820

            test EAX,EAX
            mov R13D,EAX
            je .L_456a40
.L_456a31:

            add RSP,8
.L_456a35:

            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_456a40:

            mov RAX,QWORD PTR [R12+8]
            mov RDI,QWORD PTR [R12+16]
            xor ESI,ESI
            lea RDX,QWORD PTR [RAX*8]
            call memset@PLT

            mov RDI,QWORD PTR [R12+16]
            mov RSI,QWORD PTR [RBP+16]
            lea RDX,QWORD PTR [RBX*8]
            call memcpy@PLT

            add RSP,8
            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_456a80:

            call .L_4567b0

            add RSP,8
            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456a98:

            mov RBX,RAX
            jmp .L_456a18
.L_456aa0:

            sub RSP,40
.L_456aa4:

            movdqu XMM1,XMMWORD PTR [RSI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movdqu XMM0,XMMWORD PTR [RDI]
            mov RAX,QWORD PTR [RDI+16]
            movups XMMWORD PTR [RDI],XMM1
            mov RDX,QWORD PTR [RSI+16]
            movaps XMMWORD PTR [RSP],XMM0
            mov QWORD PTR [RDI+16],RDX
            mov QWORD PTR [RSP+16],RAX
            mov QWORD PTR [RSI+16],RAX
            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            movups XMMWORD PTR [RSI],XMM0
            jne .L_456af0

            add RSP,40
.L_456aef:

            ret 
.L_456af0:

            call __stack_chk_fail@PLT
.L_456af5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456b00:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_456b07:

            mov RSI,QWORD PTR [RSI+8]
            mov RBX,RDI
            mov R12D,EDX
            call .L_456820

            test EAX,EAX
            jne .L_456ba6

            mov ESI,R12D
            mov EDI,1
            neg ESI
            or ESI,R12D
            mov EDX,ESI
            mov ESI,DWORD PTR [RBX]
            shr DL,7
            movzx ECX,DL
            sub EDI,ECX
            imul ECX,DWORD PTR [RBP]
            imul ESI,EDI
            mov R9D,EDI
            add ECX,ESI
            mov DWORD PTR [RBX],ECX
            mov RCX,QWORD PTR [RBP+8]
            test RCX,RCX
            je .L_456b81

            mov RDI,QWORD PTR [RBX+16]
            mov R11,QWORD PTR [RBP+16]
            movsxd R10,R9D
            movzx ESI,DL
            xor ECX,ECX
            nop
            nop
.L_456b60:

            mov RDX,QWORD PTR [RDI+RCX*8]
            mov R8,QWORD PTR [R11+RCX*8]
            imul RDX,R10
            imul R8,RSI
            add RDX,R8
            mov QWORD PTR [RDI+RCX*8],RDX
            add RCX,1
            cmp QWORD PTR [RBP+8],RCX
            ja .L_456b60
.L_456b81:

            cmp QWORD PTR [RBX+8],RCX
            jbe .L_456ba6

            mov RDX,QWORD PTR [RBX+16]
            movsxd RDI,R9D
            nop
            nop
.L_456b90:

            mov RSI,QWORD PTR [RDX+RCX*8]
            imul RSI,RDI
            mov QWORD PTR [RDX+RCX*8],RSI
            add RCX,1
            cmp QWORD PTR [RBX+8],RCX
            ja .L_456b90
.L_456ba6:

            pop RBX
.L_456ba7:

            pop RBP
            pop R12
            ret 
.L_456bab:

            nop
            nop
            nop
            nop
            nop
.L_456bb0:

            cmp RDI,RSI
            je .L_456c80

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RSI,QWORD PTR [RSI+8]
            mov R12D,EDX
            mov RBX,RDI
            call .L_456820

            test EAX,EAX
            je .L_456be0
.L_456bd3:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456be0:

            mov RSI,QWORD PTR [RBX+8]
            mov RDI,RBP
            call .L_456820

            test EAX,EAX
            jne .L_456bd3

            mov R8D,R12D
            mov ECX,DWORD PTR [RBX]
            mov EDX,DWORD PTR [RBP]
            neg R8D
            mov ESI,1
            or R8D,R12D
            shr R8B,7
            movzx EAX,R8B
            sub ESI,EAX
            mov EDI,ESI
            imul EDX,EAX
            imul EDI,ECX
            add EDX,EDI
            mov DWORD PTR [RBX],EDX
            mov EDX,DWORD PTR [RBP]
            imul EAX,ECX
            imul EDX,ESI
            add EAX,EDX
            cmp QWORD PTR [RBX+8],0
            mov DWORD PTR [RBP],EAX
            je .L_456c77

            mov R9,QWORD PTR [RBX+16]
            mov RDI,QWORD PTR [RBP+16]
            movsxd RSI,ESI
            movzx R8D,R8B
            xor EAX,EAX
            nop
.L_456c40:

            mov RDX,QWORD PTR [R9+RAX*8]
            mov RCX,QWORD PTR [RDI+RAX*8]
            mov R10,RDX
            imul RCX,R8
            imul R10,RSI
            imul RDX,R8
            add RCX,R10
            mov QWORD PTR [R9+RAX*8],RCX
            mov RCX,QWORD PTR [RDI+RAX*8]
            imul RCX,RSI
            add RDX,RCX
            mov QWORD PTR [RDI+RAX*8],RDX
            add RAX,1
            cmp QWORD PTR [RBX+8],RAX
            ja .L_456c40
.L_456c77:

            pop RBX
.L_456c78:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_456c80:

            xor EAX,EAX
            ret 
.L_456c83:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456c90:

            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_456c97:

            mov ESI,1
            mov RBX,RDI
            call .L_456820

            test EAX,EAX
            mov EBP,EAX
            jne .L_456cda

            mov RAX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            xor ESI,ESI
            lea RDX,QWORD PTR [RAX*8]
            call memset@PLT

            mov RDX,QWORD PTR [RBX+16]
            mov RAX,R12
            sar RAX,63
            xor R12,RAX
            mov QWORD PTR [RDX],R12
            sub QWORD PTR [RDX],RAX
            or EAX,1
            mov DWORD PTR [RBX],EAX
.L_456cda:

            mov EAX,EBP
            pop RBX
.L_456cdd:

            pop RBP
            pop R12
            ret 
.L_456ce1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456cf0:

            mov RDX,QWORD PTR [RDI+8]
            xor EAX,EAX
            shl RDX,6
            cmp RDX,RSI
            jbe .L_456d16

            mov RAX,QWORD PTR [RDI+16]
            mov RDX,RSI
            mov ECX,ESI
            shr RDX,6
            mov RAX,QWORD PTR [RAX+RDX*8]
            shr RAX,CL
            and EAX,1
.L_456d16:

            ret 
.L_456d18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456d20:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            shr R13,6
            sub RSP,8
.L_456d31:

            cmp DL,1
            ja .L_456d98

            mov RAX,QWORD PTR [RDI+8]
            movzx R12D,DL
            mov RBX,RSI
            mov RBP,RDI
            shl RAX,6
            cmp RAX,RSI
            jbe .L_456d80
.L_456d4d:

            mov RAX,QWORD PTR [RBP+16]
            mov RCX,RBX
            and ECX,63
            shl R12,CL
            lea RDX,QWORD PTR [RAX+R13*8]
            mov RAX,-2
            rol RAX,CL
            and RAX,QWORD PTR [RDX]
            or RAX,R12
            mov QWORD PTR [RDX],RAX
            xor EAX,EAX
.L_456d73:

            add RSP,8
.L_456d77:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_456d80:

            xor EAX,EAX
            test DL,DL
            je .L_456d73

            lea RSI,QWORD PTR [R13+1]
            call .L_456820

            test EAX,EAX
            je .L_456d4d

            jmp .L_456d73
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_456d98:

            mov EAX,4294967292
            jmp .L_456d73
.L_456d9f:

            nop
.L_456da0:

            mov R9,QWORD PTR [RDI+8]
            test R9,R9
            je .L_456de6

            mov R10,QWORD PTR [RDI+16]
            xor ECX,ECX
            xor R8D,R8D
.L_456db2:

            mov RSI,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RCX+64]
            mov RAX,RCX
            jmp .L_456dc9
          .byte 0x90
.L_456dc0:

            add RAX,1
            cmp RAX,RDI
            je .L_456dd8
.L_456dc9:

            mov EDX,EAX
            sub EDX,ECX
            bt RSI,RDX
            jae .L_456dc0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_456dd8:

            add R8,1
            cmp R9,R8
            je .L_456de6

            mov RCX,RAX
            jmp .L_456db2
.L_456de6:

            xor EAX,EAX
            ret 
.L_456de9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456df0:

            mov RCX,QWORD PTR [RDI+8]
            xor EAX,EAX
            test RCX,RCX
            je .L_456e60

            mov RAX,RCX
            mov RDX,QWORD PTR [RDI+16]
            sub RAX,1
            jne .L_456e26

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456e10:

            mov RSI,QWORD PTR [RDX]
            mov EDI,64
            jmp .L_456e37
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456e20:

            sub RAX,1
            je .L_456e10
.L_456e26:

            mov RSI,QWORD PTR [RDX+RAX*8]
            test RSI,RSI
            je .L_456e20

            shl RAX,6
            lea RDI,QWORD PTR [RAX+64]
.L_456e37:

            xor ECX,ECX
            movabs RDX,-9223372036854775808
            jmp .L_456e55
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_456e48:

            add RCX,1
            shr RDX,1
            cmp RCX,64
            je .L_456e68
.L_456e55:

            test RDX,RSI
            je .L_456e48

            mov RAX,RDI
            sub RAX,RCX
.L_456e60:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456e68:

            ret 
.L_456e6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_456e70:

            call .L_456df0

            add RAX,7
            shr RAX,3
            ret 
.L_456e7e:

            nop
            nop
.L_456e80:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            mov RBP,RDX
            sub RSP,8
.L_456e93:

            test RDX,RDX
            je .L_456f60

            cmp BYTE PTR [RSI],0
            jne .L_456f70

            xor EBX,EBX
            jmp .L_456eb7
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456eb0:

            cmp BYTE PTR [R12+RBX*1],0
            jne .L_456ef0
.L_456eb7:

            add RBX,1
            cmp RBP,RBX
            jne .L_456eb0

            xor ESI,ESI
.L_456ec2:

            xor EAX,EAX
            test SIL,7
            mov RDI,R13
            setne AL
            shr RSI,3
            add RSI,RAX
            call .L_456820

            test EAX,EAX
            je .L_456f00
.L_456ede:

            add RSP,8
.L_456ee2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456ef0:

            mov RSI,RBP
            sub RSI,RBX
            jmp .L_456ec2
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456f00:

            xor ESI,ESI
            mov RDI,R13
            call .L_456c90

            test EAX,EAX
            jne .L_456ede

            cmp RBP,RBX
            jbe .L_456ede

            mov R9,QWORD PTR [R13+16]
            lea RDI,QWORD PTR [R12+RBP*1-1]
            xor EDX,EDX
            sub RBP,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_456f28:

            movzx ESI,BYTE PTR [RDI]
            lea ECX,DWORD PTR [RDX*8]
            mov R8,RDX
            and R8,-8
            add RDX,1
            sub RDI,1
            and ECX,56
            shl RSI,CL
            or QWORD PTR [R9+R8*1],RSI
            cmp RDX,RBP
            jne .L_456f28

            add RSP,8
.L_456f54:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456f60:

            xor ESI,ESI
            xor EBX,EBX
            jmp .L_456ec2
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456f70:

            mov RSI,RDX
            xor EBX,EBX
            jmp .L_456ec2
.L_456f7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_456f80:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RSI
            sub RSP,8
.L_456f93:

            call .L_456df0

            add RAX,7
            shr RAX,3
            cmp R12,RAX
            jb .L_457000

            mov RBX,RAX
            mov RDX,R12
            xor ESI,ESI
            mov RDI,RBP
            sub R12,RBX
            call memset@PLT

            add RBP,R12
            xor EDX,EDX
            test RBX,RBX
            mov RAX,RBX
            je .L_456ff3

            nop
            nop
            nop
.L_456fc8:

            mov RDI,QWORD PTR [R13+16]
            mov RSI,RDX
            lea ECX,DWORD PTR [RDX*8]
            and RSI,-8
            add RDX,1
            and ECX,56
            mov RSI,QWORD PTR [RDI+RSI*1]
            shr RSI,CL
            mov BYTE PTR [RBP+RAX*1-1],SIL
            sub RAX,1
            jne .L_456fc8
.L_456ff3:

            xor EAX,EAX
.L_456ff5:

            add RSP,8
.L_456ff9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_457000:

            mov EAX,4294967288
            jmp .L_456ff5
.L_457007:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457010:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_457017:

            mov R8,RSI
            mov RBX,RSI
            mov R12,RSI
            shr RBX,6
            call .L_456df0

            mov RDX,QWORD PTR [RBP+8]
            add RAX,R8
            and R12D,63
            shl RDX,6
            cmp RDX,RAX
            jb .L_4570e0
.L_457041:

            test RBX,RBX
            je .L_45708f

            mov RAX,QWORD PTR [RBP+8]
            cmp RBX,RAX
            jae .L_457108

            mov RCX,QWORD PTR [RBP+16]
            sub RAX,RBX
            lea RAX,QWORD PTR [RCX+RAX*8-8]
            lea RSI,QWORD PTR [RCX-8]
            nop
            nop
            nop
            nop
            nop
.L_457068:

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RAX+RBX*8],RDX
            sub RAX,8
            cmp RSI,RAX
            jne .L_457068

            mov RAX,RBX
            nop
            nop
            nop
            nop
            nop
.L_457080:

            mov QWORD PTR [RCX+RAX*8-8],0
            sub RAX,1
            jne .L_457080
.L_45708f:

            test R12,R12
            je .L_4570d7

            cmp RBX,QWORD PTR [RBP+8]
            jae .L_4570d7

            mov RDI,QWORD PTR [RBP+16]
            mov R8D,64
            mov R9D,R12D
            sub R8D,R12D
            xor ESI,ESI
            nop
            nop
            nop
            nop
.L_4570b0:

            mov RDX,QWORD PTR [RDI+RBX*8]
            mov ECX,R9D
            mov RAX,RDX
            shl RAX,CL
            mov ECX,R8D
            or RAX,RSI
            mov RSI,RDX
            mov QWORD PTR [RDI+RBX*8],RAX
            shr RSI,CL
            add RBX,1
            cmp QWORD PTR [RBP+8],RBX
            ja .L_4570b0
.L_4570d7:

            pop RBX
.L_4570d8:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_4570e0:

            xor ESI,ESI
            test AL,63
            mov RDI,RBP
            setne SIL
            shr RAX,6
            add RSI,RAX
            call .L_456820

            test EAX,EAX
            je .L_457041

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_457108:

            test RAX,RAX
            je .L_45708f

            mov RCX,QWORD PTR [RBP+16]
            jmp .L_457080
.L_45711a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_457120:

            mov RAX,QWORD PTR [RDI+8]
            mov RDX,RSI
            shr RDX,6
            cmp RAX,RDX
            jb .L_4571f8

            and ESI,63
            cmp RAX,RDX
            je .L_4571e0

            test RDX,RDX
            je .L_457182

            mov RCX,QWORD PTR [RDI+16]
            xor EAX,EAX
            lea R10,QWORD PTR [RCX+RDX*8]
            nop
.L_457150:

            mov R8,QWORD PTR [R10+RAX*8]
            mov QWORD PTR [RCX+RAX*8],R8
            mov R8,QWORD PTR [RDI+8]
            add RAX,1
            mov R9,R8
            sub R9,RDX
            cmp R9,RAX
            ja .L_457150

            cmp R8,RAX
            jbe .L_457182
.L_457170:

            mov QWORD PTR [RCX+RAX*8],0
            add RAX,1
            cmp QWORD PTR [RDI+8],RAX
            ja .L_457170
.L_457182:

            test RSI,RSI
            je .L_4571d5

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            je .L_4571d5

            mov R8,QWORD PTR [RDI+16]
            mov R9D,64
            mov R10D,ESI
            sub R9D,ESI
            xor EDI,EDI
            lea RAX,QWORD PTR [R8+RAX*8-8]
            sub R8,8
            nop
            nop
            nop
            nop
            nop
.L_4571b0:

            mov RSI,QWORD PTR [RAX]
            mov ECX,R10D
            sub RAX,8
            mov RDX,RSI
            shr RDX,CL
            mov ECX,R9D
            or RDX,RDI
            shl RSI,CL
            mov QWORD PTR [RAX+8],RDX
            cmp RAX,R8
            mov RDI,RSI
            jne .L_4571b0
.L_4571d5:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4571e0:

            test RSI,RSI
            jne .L_4571f8

            test RAX,RAX
            je .L_4571d5

            xor EAX,EAX
            mov RCX,QWORD PTR [RDI+16]
            jmp .L_457170
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4571f8:

            xor ESI,ESI
            jmp .L_456c90
.L_4571ff:

            nop
.L_457200:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_457232

            mov RAX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RAX+RDX*8-8],0
            je .L_45722c

            jmp .L_4572c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457220:

            cmp QWORD PTR [RAX+RDX*8-8],0
            jne .L_4572c0
.L_45722c:

            sub RDX,1
            jne .L_457220
.L_457232:

            mov RCX,QWORD PTR [RSI+8]
            xor EDX,EDX
            test RCX,RCX
            je .L_4572b4
.L_45723d:

            mov RSI,QWORD PTR [RSI+16]
            cmp QWORD PTR [RSI+RCX*8-8],0
            je .L_457258

            jmp .L_457270
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457250:

            cmp QWORD PTR [RSI+RCX*8-8],0
            jne .L_457270
.L_457258:

            sub RCX,1
            jne .L_457250

            xor EAX,EAX
            test RDX,RDX
            jne .L_457270
.L_457265:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457270:

            cmp RDX,RCX
            mov EAX,1
            ja .L_457265

            jb .L_4572d8

            test RDX,RDX
            je .L_4572b4

            mov RCX,QWORD PTR [RDI+16]
            mov RDI,QWORD PTR [RSI+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RDI
            ja .L_457265

            mov EAX,4294967295
            jae .L_4572ae

            jmp .L_4572de
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4572a0:

            mov RAX,QWORD PTR [RSI+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RAX
            ja .L_4572cd

            jb .L_4572d8
.L_4572ae:

            sub RDX,1
            jne .L_4572a0
.L_4572b4:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4572c0:

            mov RCX,QWORD PTR [RSI+8]
            test RCX,RCX
            jne .L_45723d
.L_4572cd:

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4572d8:

            mov EAX,4294967295
            ret 
.L_4572de:

            ret 
.L_4572e0:

            mov RAX,QWORD PTR [RCX+8]
            add RAX,1
            cmp RAX,R9
            ja .L_45747a

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,56
.L_457302:

            mov RAX,QWORD PTR [RSP+112]
            mov RDI,QWORD PTR [RAX]
            test RDI,RDI
            je .L_457480

            mov QWORD PTR [RSP+24],RDX
            lea RDX,QWORD PTR [R9*8]
            mov RBX,RSI
            mov R12,RCX
            xor ESI,ESI
            mov QWORD PTR [RSP+32],R8
            call memset@PLT

            mov RBP,QWORD PTR [R12+8]
            mov RAX,QWORD PTR [RSP+112]
            cmp QWORD PTR [RBX],RBP
            mov R14,QWORD PTR [RAX]
            mov RAX,RBP
            cmovbe RAX,QWORD PTR [RBX]
            test RBP,RBP
            mov QWORD PTR [RSP+40],R14
            mov QWORD PTR [RSP+16],RAX
            je .L_457470

            lea RAX,QWORD PTR [RBP*8+8]
            xor R15D,R15D
            mov QWORD PTR [RSP+8],RBP
            mov RBP,R13
            mov R13,R14
            mov R14,R15
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457380:

            mov RAX,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RBP+16]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RAX]
            mov R15,QWORD PTR [RDX+R14*8]
            mov RDX,R13
            add R14,1
            mov RBX,QWORD PTR [RSI]
            mov RCX,R15
            imul RBX,R15
            add RBX,QWORD PTR [R13]
            imul RBX,QWORD PTR [RSP+32]
            call .L_456400

            mov RSI,QWORD PTR [R12+16]
            mov RDX,R13
            add R13,8
            mov RCX,RBX
            mov RBX,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_456400

            mov RAX,QWORD PTR [RSP]
            cmp RBX,R14
            mov QWORD PTR [R13-8],R15
            mov QWORD PTR [R13+RAX*1],0
            jne .L_457380

            mov RAX,QWORD PTR [RSP+40]
            mov RCX,QWORD PTR [RSP]
            mov R13,RBP
            mov RBP,QWORD PTR [RSP+8]
            lea RAX,QWORD PTR [RAX+RCX*1-8]
            mov QWORD PTR [RSP+40],RAX
.L_457402:

            mov RDI,QWORD PTR [R13+16]
            mov RDX,QWORD PTR [RSP]
            mov RSI,QWORD PTR [RSP+40]
            call memcpy@PLT

            mov RSI,R12
            mov RDI,R13
            call .L_457200

            test EAX,EAX
            js .L_457448

            mov RDX,QWORD PTR [R13+16]
            mov RSI,QWORD PTR [R12+16]
            mov RDI,RBP
            call .L_456390

            xor EAX,EAX
.L_457436:

            add RSP,56
.L_45743a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_457448:

            mov RAX,QWORD PTR [RSP+112]
            mov RSI,QWORD PTR [R13+16]
            mov RDI,RBP
            mov RDX,QWORD PTR [RAX]
            call .L_456390

            add RSP,56
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_457470:

            mov QWORD PTR [RSP],8
            jmp .L_457402
.L_45747a:

            mov EAX,4294967292
            ret 
.L_457480:

            mov EAX,4294967292
            jmp .L_457436
.L_457487:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457490:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_4574c2

            mov RAX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RAX+RDX*8-8],0
            je .L_4574bc

            jmp .L_457550
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4574b0:

            cmp QWORD PTR [RAX+RDX*8-8],0
            jne .L_457550
.L_4574bc:

            sub RDX,1
            jne .L_4574b0
.L_4574c2:

            mov RCX,QWORD PTR [RSI+8]
            xor EDX,EDX
            test RCX,RCX
            je .L_457568
.L_4574d1:

            mov R8,QWORD PTR [RSI+16]
            cmp QWORD PTR [R8+RCX*8-8],0
            je .L_4574e8

            jmp .L_457500
          .byte 0x90
.L_4574e0:

            cmp QWORD PTR [R8+RCX*8-8],0
            jne .L_457500
.L_4574e8:

            sub RCX,1
            jne .L_4574e0

            xor EAX,EAX
            test RDX,RDX
            jne .L_457500
.L_4574f5:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457500:

            cmp RCX,RDX
            jb .L_45755d

            mov ECX,DWORD PTR [RSI]
            ja .L_457560

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jle .L_45756b

            test ECX,ECX
            js .L_457583
.L_457513:

            test RDX,RDX
            je .L_457568

            mov RCX,QWORD PTR [RDI+16]
            mov RDI,QWORD PTR [R8+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RDI
            ja .L_4574f5

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457530:

            jb .L_457580

            sub RDX,1
            je .L_457568

            mov RSI,QWORD PTR [R8+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RSI
            jbe .L_457530

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457550:

            mov RCX,QWORD PTR [RSI+8]
            test RCX,RCX
            jne .L_4574d1
.L_45755d:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_457560:

            mov EAX,ECX
            neg EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_457568:

            xor EAX,EAX
            ret 
.L_45756b:

            test EAX,EAX
            jns .L_457513

            test ECX,ECX
            jle .L_457513

            or EAX,4294967295
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457580:

            neg EAX
            ret 
.L_457583:

            mov EAX,1
            ret 
.L_457589:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457590:

            sub RSP,56
.L_457594:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RSI
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RSI,RAX
            mov QWORD PTR [RSP+32],RSI
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RSI,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_457490

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4575ee

            add RSP,56
.L_4575ed:

            ret 
.L_4575ee:

            call __stack_chk_fail@PLT
.L_4575f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457600:

            cmp RDI,RDX
            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            push RBX
.L_45760e:

            mov RBX,RSI
            je .L_457629

            cmp RDI,RSI
            mov R12,RDX
            je .L_457626

            call .L_4569c0

            test EAX,EAX
            mov EBP,EAX
            jne .L_457672
.L_457626:

            mov RBX,R12
.L_457629:

            mov R12,QWORD PTR [RBX+8]
            mov DWORD PTR [R13],1
            test R12,R12
            je .L_45765e

            mov RAX,QWORD PTR [RBX+16]
            cmp QWORD PTR [RAX+R12*8-8],0
            je .L_457658

            jmp .L_457680
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457650:

            cmp QWORD PTR [RAX+R12*8-8],0
            jne .L_457680
.L_457658:

            sub R12,1
            jne .L_457650
.L_45765e:

            pop RBX
.L_45765f:

            mov RDI,R13
            xor ESI,ESI
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_456820
.L_457670:

            mov EBP,EAX
.L_457672:

            pop RBX
            mov EAX,EBP
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_457680:

            mov RSI,R12
            mov RDI,R13
            call .L_456820

            test EAX,EAX
            mov EBP,EAX
            jne .L_457672

            mov RAX,QWORD PTR [R13+16]
            mov RSI,QWORD PTR [RBX+16]
            xor EDX,EDX
            xor EBX,EBX
            nop
            nop
            nop
.L_4576a0:

            xor ECX,ECX
            add RBX,QWORD PTR [RAX]
            setb CL
            add RBX,QWORD PTR [RSI+RDX*8]
            adc RCX,0
            add RDX,1
            mov QWORD PTR [RAX],RBX
            add RAX,8
            cmp R12,RDX
            mov RBX,RCX
            ja .L_4576a0

            test RCX,RCX
            je .L_457672

            lea R12,QWORD PTR [RDX*8]
            jmp .L_4576fc
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4576d8:

            xor ECX,ECX
            add RBX,QWORD PTR [RAX]
            mov RDX,R14
            setb CL
            mov QWORD PTR [RAX],RBX
            add R12,8
            add RAX,8
            test RCX,RCX
            mov EBX,1
            je .L_457672
.L_4576fc:

            cmp QWORD PTR [R13+8],RDX
            lea R14,QWORD PTR [RDX+1]
            ja .L_4576d8

            mov RSI,R14
            mov RDI,R13
            call .L_456820

            test EAX,EAX
            jne .L_457670

            mov RAX,QWORD PTR [R13+16]
            add RAX,R12
            jmp .L_4576d8
.L_457722:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457730:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RSI,RDX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RDX
            sub RSP,32
.L_45774b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_457200

            test EAX,EAX
            js .L_457855

            cmp RBP,RBX
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+16],0
            je .L_457838
.L_45778a:

            cmp R12,RBX
            je .L_4577a1

            mov RSI,R12
            mov RDI,RBX
            call .L_4569c0

            test EAX,EAX
            mov R13D,EAX
            jne .L_4577da
.L_4577a1:

            mov RDI,QWORD PTR [RBP+8]
            mov DWORD PTR [RBX],1
            mov RSI,QWORD PTR [RBP+16]
            test RDI,RDI
            jne .L_4577c6

            jmp .L_4577ce
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4577c0:

            sub RDI,1
            je .L_4577ce
.L_4577c6:

            cmp QWORD PTR [RSI+RDI*8-8],0
            je .L_4577c0
.L_4577ce:

            mov RDX,QWORD PTR [RBX+16]
            xor R13D,R13D
            call .L_456390
.L_4577da:

            mov RDI,QWORD PTR [RSP+16]
            test RDI,RDI
            je .L_457813

            mov RAX,QWORD PTR [RSP+8]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_45780d

            mov RCX,RDI
            nop
            nop
            nop
.L_4577f8:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4577f8
.L_45780d:

            call QWORD PTR [RIP+.L_677120]
.L_457813:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_45785d

            add RSP,32
.L_45782a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457838:

            mov R14,RSP
            mov RSI,RBP
            mov RDI,R14
            call .L_4569c0

            test EAX,EAX
            mov R13D,EAX
            jne .L_4577da

            mov RBP,R14
            jmp .L_45778a
.L_457855:

            mov R13D,4294967286
            jmp .L_457813
.L_45785d:

            call __stack_chk_fail@PLT
.L_457862:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457870:

            push RBP
            push RBX
            mov RBP,RDI
            mov R8,RSI
            mov R9,RDX
            sub RSP,8
            mov EBX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RDX]
            imul EAX,EBX
            test EAX,EAX
            jns .L_4578b8

            mov RSI,RDX
            mov RDI,R8
            call .L_457200

            test EAX,EAX
            js .L_4578d0

            mov RDX,R9
            mov RSI,R8
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            je .L_4578c1
.L_4578ab:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4578b8:

            call .L_457600

            test EAX,EAX
            jne .L_4578ab
.L_4578c1:

            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4578d0:

            mov RDX,R8
            mov RSI,R9
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            jne .L_4578ab

            neg EBX
            mov DWORD PTR [RBP],EBX
            jmp .L_4578ab
.L_4578e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4578f0:

            push RBP
            push RBX
            mov RBP,RDI
            mov R8,RSI
            mov R9,RDX
            sub RSP,8
            mov EBX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RDX]
            imul EAX,EBX
            test EAX,EAX
            jle .L_457938

            mov RSI,RDX
            mov RDI,R8
            call .L_457200

            test EAX,EAX
            js .L_457950

            mov RDX,R9
            mov RSI,R8
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            je .L_457941
.L_45792b:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457938:

            call .L_457600

            test EAX,EAX
            jne .L_45792b
.L_457941:

            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457950:

            mov RDX,R8
            mov RSI,R9
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            jne .L_45792b

            neg EBX
            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_45796e:

            nop
            nop
.L_457970:

            sub RSP,56
.L_457974:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RDX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RDX,RAX
            mov QWORD PTR [RSP+32],RDX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RDX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_457870

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4579ce

            add RSP,56
.L_4579cd:

            ret 
.L_4579ce:

            call __stack_chk_fail@PLT
.L_4579d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4579e0:

            sub RSP,56
.L_4579e4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RDX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RDX,RAX
            mov QWORD PTR [RSP+32],RDX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RDX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_4578f0

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_457a3e

            add RSP,56
.L_457a3d:

            ret 
.L_457a3e:

            call __stack_chk_fail@PLT
.L_457a43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457a50:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            sub RSP,88
.L_457a67:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            cmp RDI,RSI
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            je .L_457c70
.L_457ab4:

            cmp R13,R15
            je .L_457c90
.L_457abd:

            mov RBP,QWORD PTR [R14+8]
            test RBP,RBP
            je .L_457ae6

            mov RAX,QWORD PTR [R14+16]
            cmp QWORD PTR [RAX+RBP*8-8],0
            je .L_457ae0

            jmp .L_457ae6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_457ad8:

            cmp QWORD PTR [RAX+RBP*8-8],0
            jne .L_457ae6
.L_457ae0:

            sub RBP,1
            jne .L_457ad8
.L_457ae6:

            mov RBX,QWORD PTR [R15+8]
            test RBX,RBX
            je .L_457b12

            mov RAX,QWORD PTR [R15+16]
            cmp QWORD PTR [RAX+RBX*8-8],0
            je .L_457b0c

            jmp .L_457be8
.L_457b00:

            cmp QWORD PTR [RAX+RBX*8-8],0
            jne .L_457be8
.L_457b0c:

            sub RBX,1
            jne .L_457b00
.L_457b12:

            mov RSI,RBP
            mov RDI,R13
            call .L_456820

            test EAX,EAX
            mov R12D,EAX
            je .L_457c00
.L_457b28:

            mov RDI,QWORD PTR [RSP+64]
            test RDI,RDI
            je .L_457b63

            mov RAX,QWORD PTR [RSP+56]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_457b5d

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_457b48:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_457b48
.L_457b5d:

            call QWORD PTR [RIP+.L_677120]
.L_457b63:

            mov RDI,QWORD PTR [RSP+32]
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            test RDI,RDI
            je .L_457bbb

            mov RAX,QWORD PTR [RSP+24]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_457bb5

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457ba0:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_457ba0
.L_457bb5:

            call QWORD PTR [RIP+.L_677120]
.L_457bbb:

            mov RSI,QWORD PTR [RSP+72]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_457cb0

            add RSP,88
.L_457bd6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457be8:

            lea RSI,QWORD PTR [RBP+RBX*1]
            mov RDI,R13
            call .L_456820

            test EAX,EAX
            mov R12D,EAX
            jne .L_457b28
.L_457c00:

            xor ESI,ESI
            mov RDI,R13
            call .L_456c90

            test EAX,EAX
            mov R12D,EAX
            jne .L_457b28

            test RBX,RBX
            je .L_457c57

            lea RAX,QWORD PTR [RBX*8-8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_457c28:

            mov RDX,QWORD PTR [R15+16]
            mov RSI,QWORD PTR [R14+16]
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            mov RCX,QWORD PTR [RDX+RAX*1]
            mov RDX,RAX
            add RDX,QWORD PTR [R13+16]
            call .L_456400

            mov RAX,QWORD PTR [RSP+8]
            sub RAX,8
            sub RBX,1
            jne .L_457c28
.L_457c57:

            mov EAX,DWORD PTR [R14]
            imul EAX,DWORD PTR [R15]
            mov DWORD PTR [R13],EAX
            jmp .L_457b28
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457c70:

            lea R14,QWORD PTR [RSP+16]
            mov RSI,RDI
            mov RDI,R14
            call .L_4569c0

            test EAX,EAX
            mov R12D,EAX
            jne .L_457b28

            jmp .L_457ab4
.L_457c90:

            lea R15,QWORD PTR [RSP+48]
            mov RSI,R13
            mov RDI,R15
            call .L_4569c0

            test EAX,EAX
            mov R12D,EAX
            jne .L_457b28

            jmp .L_457abd
.L_457cb0:

            call __stack_chk_fail@PLT
.L_457cb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457cc0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_457cce:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_458000

            mov EBP,ESI
            mov RBX,RDI
            mov RDI,RDX
            mov R12,RDX
            mov DWORD PTR [RSP+32],1
            mov QWORD PTR [RSP+40],0
            mov QWORD PTR [RSP+48],0
            call strlen@PLT

            cmp EBP,16
            mov R13,RAX
            mov QWORD PTR [RSP+24],RAX
            jne .L_457dd0

            movabs RAX,4611686018427387903
            cmp R13,RAX
            ja .L_458000

            lea RSI,QWORD PTR [R13*4]
            xor EAX,EAX
            mov RDI,RBX
            test SIL,60
            setne AL
            shr RSI,6
            add RSI,RAX
            call .L_456820

            test EAX,EAX
            je .L_457f30
.L_457d60:

            mov RDI,QWORD PTR [RSP+48]
            test RDI,RDI
            je .L_457da3

            mov RCX,QWORD PTR [RSP+40]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_457d95

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_457d80:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_457d80
.L_457d95:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_457da3:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            jne .L_458026

            add RSP,120
.L_457dbb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457dd0:

            xor ESI,ESI
            mov RDI,RBX
            call .L_456c90

            test EAX,EAX
            jne .L_457d60

            cmp QWORD PTR [RSP+24],0
            je .L_457fcd

            lea RAX,QWORD PTR [RSP+64]
            xor R13D,R13D
            lea R15,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_457e4e
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_457e10:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+16]
            or EAX,1
            mov RDI,RBX
            mov DWORD PTR [RSP+64],EAX
            mov QWORD PTR [RSP+72],1
            mov QWORD PTR [RSP+80],R15
            call .L_4578f0

            test EAX,EAX
            jne .L_457d60
.L_457e3f:

            add R13,1
            cmp QWORD PTR [RSP+24],R13
            je .L_457fcd
.L_457e4e:

            test R13,R13
            je .L_458010
.L_457e57:

            movsx EDX,BYTE PTR [R12+R13*1]
            mov R14D,255
            lea ESI,DWORD PTR [RDX-48]
            mov EAX,EDX
            cmp SIL,9
            ja .L_457e73

            lea ECX,DWORD PTR [RDX-48]
            movsxd R14,ECX
.L_457e73:

            lea ESI,DWORD PTR [RAX-65]
            cmp SIL,5
            ja .L_457e82

            lea ECX,DWORD PTR [RDX-55]
            movsxd R14,ECX
.L_457e82:

            sub EAX,97
            cmp AL,5
            ja .L_457e8f

            lea ECX,DWORD PTR [RDX-87]
            movsxd R14,ECX
.L_457e8f:

            movsxd RAX,EBP
            cmp RAX,R14
            jbe .L_457f7f

            mov RDX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],1
            mov QWORD PTR [RSP+80],R15
            mov QWORD PTR [RSP+96],RAX
            call .L_457a50

            test EAX,EAX
            jne .L_457d60

            mov RAX,R14
            mov ESI,DWORD PTR [RBX]
            sar RAX,63
            mov RDX,RAX
            xor RDX,R14
            sub RDX,RAX
            cmp ESI,1
            mov QWORD PTR [RSP+96],RDX
            jne .L_457e10

            test R14,R14
            mov EAX,4294967295
            mov RDX,QWORD PTR [RSP+8]
            cmovs ESI,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+72],1
            mov DWORD PTR [RSP+64],ESI
            mov RSI,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+80],R15
            call .L_457870

            test EAX,EAX
            je .L_457e3f

            jmp .L_457d60
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_457f30:

            xor ESI,ESI
            mov RDI,RBX
            call .L_456c90

            test EAX,EAX
            jne .L_457d60

            xor ESI,ESI
            test R13,R13
            je .L_457fcd

            nop
            nop
            nop
.L_457f50:

            cmp R13,1
            je .L_457fe0
.L_457f5a:

            sub R13,1
            movsx EDI,BYTE PTR [R12+R13*1]
            lea EDX,DWORD PTR [RDI-48]
            mov ECX,EDI
            lea R8D,DWORD PTR [RDI-97]
            cmp DL,9
            jbe .L_457fd8

            sub ECX,65
            cmp CL,5
            jbe .L_457f90

            cmp R8B,5
            jbe .L_457f9c
.L_457f7f:

            mov EAX,4294967290
            jmp .L_457d60
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457f90:

            lea EDX,DWORD PTR [RDI-55]
            movsxd RDX,EDX
.L_457f96:

            cmp R8B,5
            ja .L_457fa2
.L_457f9c:

            lea EDX,DWORD PTR [RDI-87]
            movsxd RDX,EDX
.L_457fa2:

            cmp RDX,15
            ja .L_457f7f

            lea ECX,DWORD PTR [RSI*4]
            mov RDI,QWORD PTR [RBX+16]
            mov R8,RSI
            shr R8,4
            add RSI,1
            and ECX,60
            shl RDX,CL
            or QWORD PTR [RDI+R8*8],RDX
            test R13,R13
            jne .L_457f50
.L_457fcd:

            xor EAX,EAX
            jmp .L_457d60
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_457fd8:

            lea EDX,DWORD PTR [RDI-48]
            movsxd RDX,EDX
            jmp .L_457f96
.L_457fe0:

            cmp BYTE PTR [R12],45
            jne .L_457f5a

            mov DWORD PTR [RBX],4294967295
            jmp .L_457d60
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458000:

            mov EAX,4294967292
            jmp .L_457da3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_458010:

            cmp BYTE PTR [R12],45
            jne .L_457e57

            mov DWORD PTR [RBX],4294967295
            jmp .L_457e3f
.L_458026:

            call __stack_chk_fail@PLT
.L_45802b:

            nop
            nop
            nop
            nop
            nop
.L_458030:

            sub RSP,56
.L_458034:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+32],RDX
            mov RDX,RSP
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov QWORD PTR [RSP+16],RAX
            call .L_457a50

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_458080

            add RSP,56
.L_45807f:

            ret 
.L_458080:

            call __stack_chk_fail@PLT
.L_458085:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458090:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov RDI,RCX
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RCX
            sub RSP,360
.L_4580ad:

            lea R14,QWORD PTR [RSP+304]
            lea R13,QWORD PTR [RSP+336]
            mov QWORD PTR [RSP+8],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            mov RSI,R14
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_457490

            test EAX,EAX
            je .L_4587c0

            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],0
            mov QWORD PTR [RSP+192],0
            mov DWORD PTR [RSP+208],1
            mov QWORD PTR [RSP+216],0
            mov QWORD PTR [RSP+224],0
            mov DWORD PTR [RSP+240],1
            mov QWORD PTR [RSP+248],0
            mov QWORD PTR [RSP+256],0
            mov DWORD PTR [RSP+272],1
            mov QWORD PTR [RSP+280],0
            mov QWORD PTR [RSP+288],0
            call .L_457200

            test EAX,EAX
            jns .L_458418

            test R15,R15
            je .L_4583f0

            xor ESI,ESI
            mov RDI,R15
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            je .L_4583f0

            nop
.L_4581f0:

            mov RDI,QWORD PTR [RSP+160]
            test RDI,RDI
            je .L_458233

            mov RDX,QWORD PTR [RSP+152]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_45822d

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458218:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_458218
.L_45822d:

            call QWORD PTR [RIP+.L_677120]
.L_458233:

            mov RDI,QWORD PTR [RSP+192]
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            test RDI,RDI
            je .L_45829b

            mov RDX,QWORD PTR [RSP+184]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_458295

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458280:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_458280
.L_458295:

            call QWORD PTR [RIP+.L_677120]
.L_45829b:

            mov RDI,QWORD PTR [RSP+224]
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],0
            mov QWORD PTR [RSP+192],0
            test RDI,RDI
            je .L_4582fb

            mov RDX,QWORD PTR [RSP+216]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4582f5

            mov RDX,RDI
            nop
.L_4582e0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4582e0
.L_4582f5:

            call QWORD PTR [RIP+.L_677120]
.L_4582fb:

            mov RDI,QWORD PTR [RSP+256]
            mov DWORD PTR [RSP+208],1
            mov QWORD PTR [RSP+216],0
            mov QWORD PTR [RSP+224],0
            test RDI,RDI
            je .L_45835b

            mov RDX,QWORD PTR [RSP+248]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_458355

            mov RDX,RDI
            nop
.L_458340:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_458340
.L_458355:

            call QWORD PTR [RIP+.L_677120]
.L_45835b:

            mov RDI,QWORD PTR [RSP+288]
            mov DWORD PTR [RSP+240],1
            mov QWORD PTR [RSP+248],0
            mov QWORD PTR [RSP+256],0
            test RDI,RDI
            je .L_4583bb

            mov RDX,QWORD PTR [RSP+280]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4583b5

            mov RDX,RDI
            nop
.L_4583a0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4583a0
.L_4583b5:

            call QWORD PTR [RIP+.L_677120]
.L_4583bb:

            mov RCX,QWORD PTR [RSP+344]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_4587d8

            add RSP,360
.L_4583db:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4583f0:

            cmp QWORD PTR [RSP+8],0
            je .L_45840f

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R12
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0
.L_45840f:

            xor EBX,EBX
            jmp .L_4583bb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_458418:

            lea RDI,QWORD PTR [RSP+144]
            mov RSI,R12
            mov QWORD PTR [RSP+16],RDI
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            lea RAX,QWORD PTR [RSP+176]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RAX,QWORD PTR [R12+8]
            mov DWORD PTR [RSP+176],1
            mov DWORD PTR [RSP+144],1
            lea RSI,QWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RSP+208]
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_456820

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RDI,QWORD PTR [RSP+32]
            xor ESI,ESI
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            lea RAX,QWORD PTR [RSP+240]
            mov ESI,2
            mov RDI,RAX
            mov QWORD PTR [RSP+104],RAX
            call .L_456820

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            lea RAX,QWORD PTR [RSP+272]
            mov ESI,3
            mov RDI,RAX
            mov QWORD PTR [RSP+72],RAX
            call .L_456820

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RDI,QWORD PTR [RSP+24]
            call .L_456df0

            and EAX,63
            cmp RAX,63
            je .L_4587ca

            mov EDX,63
            mov RDI,QWORD PTR [RSP+16]
            sub RDX,RAX
            mov RSI,RDX
            mov QWORD PTR [RSP+48],RDX
            call .L_457010

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_457010

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0
.L_458549:

            mov RAX,QWORD PTR [RSP+152]
            mov RCX,QWORD PTR [RSP+184]
            mov RDI,QWORD PTR [RSP+24]
            mov QWORD PTR [RSP+80],RAX
            mov QWORD PTR [RSP+88],RCX
            sub RAX,1
            sub RCX,1
            mov QWORD PTR [RSP+40],RAX
            sub RAX,RCX
            mov QWORD PTR [RSP+56],RCX
            mov QWORD PTR [RSP+96],RAX
            shl RAX,6
            mov RSI,RAX
            mov QWORD PTR [RSP+64],RAX
            call .L_457010

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RDX,QWORD PTR [RSP+96]
            lea RAX,QWORD PTR [RDX*8]
            mov RBX,RAX
            jmp .L_4585d8
.L_4585af:

            mov RAX,QWORD PTR [RSP+224]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+24]
            add RAX,RBX
            mov RSI,RDI
            add QWORD PTR [RAX],1
            call .L_4578f0

            test EAX,EAX
            jne .L_458836
.L_4585d8:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            call .L_457490

            test EAX,EAX
            jns .L_4585af

            mov RSI,QWORD PTR [RSP+64]
            mov RDI,QWORD PTR [RSP+24]
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_4581f0

            mov RAX,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+136],RBP
            mov RBP,QWORD PTR [RSP+104]
            mov QWORD PTR [RSP+120],R15
            mov DWORD PTR [RSP+116],EBX
            mov QWORD PTR [RSP+128],R12
            shl RAX,3
            mov QWORD PTR [RSP+64],RAX
            mov RAX,QWORD PTR [RSP+80]
            lea RCX,QWORD PTR [RAX*8-16]
            mov RAX,QWORD PTR [RSP+88]
            mov R15,RCX
            imul RSI,RAX,-8
            imul RAX,RAX,-64
            mov QWORD PTR [RSP+96],RSI
            mov QWORD PTR [RSP+88],RAX
.L_458657:

            mov RCX,QWORD PTR [RSP+56]
            cmp QWORD PTR [RSP+40],RCX
            jbe .L_4587dd

            lea RCX,QWORD PTR [R15+8]
            mov RDX,QWORD PTR [RSP+192]
            mov RAX,QWORD PTR [RSP+160]
            mov R9,QWORD PTR [RSP+224]
            mov QWORD PTR [RSP+80],RCX
            mov RCX,QWORD PTR [RSP+64]
            mov RSI,QWORD PTR [RAX+R15*1+8]
            mov RDX,QWORD PTR [RDX+RCX*1]
            mov RCX,QWORD PTR [RSP+96]
            lea RBX,QWORD PTR [RCX+R15*1+8]
            cmp RSI,RDX
            lea R12,QWORD PTR [R9+RBX*1]
            jb .L_4588aa

            mov QWORD PTR [R12],-1
.L_4586b5:

            add QWORD PTR [R12],1
            mov R12,QWORD PTR [RSP+64]
            jmp .L_458703
.L_4586c1:

            mov RCX,QWORD PTR [RDX+R15*1-8]
.L_4586c6:

            mov RAX,QWORD PTR [RSP+288]
            mov RSI,QWORD PTR [RSP+72]
            mov RDI,RBP
            mov QWORD PTR [RAX],RCX
            mov RCX,QWORD PTR [RDX+R15*1]
            mov QWORD PTR [RAX+8],RCX
            mov RCX,QWORD PTR [RSP+80]
            mov RDX,QWORD PTR [RDX+RCX*1]
            mov QWORD PTR [RAX+16],RDX
            call .L_457490

            test EAX,EAX
            jle .L_4588df

            mov R9,QWORD PTR [RSP+224]
.L_458703:

            sub QWORD PTR [R9+RBX*1],1
            xor ESI,ESI
            mov RDI,RBP
            call .L_456c90

            test EAX,EAX
            jne .L_458836

            xor ECX,ECX
            cmp QWORD PTR [RSP+56],0
            mov RDX,QWORD PTR [RSP+192]
            je .L_458731

            mov RCX,QWORD PTR [RDX+R12*1-8]
.L_458731:

            mov RAX,QWORD PTR [RSP+256]
            mov RSI,RBP
            mov RDI,RBP
            mov QWORD PTR [RAX],RCX
            mov RDX,QWORD PTR [RDX+R12*1]
            mov QWORD PTR [RAX+8],RDX
            mov RAX,QWORD PTR [RSP+224]
            mov RDX,R14
            mov RAX,QWORD PTR [RAX+RBX*1]
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            mov QWORD PTR [RSP+336],RAX
            call .L_457a50

            test EAX,EAX
            jne .L_458836

            mov RDI,QWORD PTR [RSP+72]
            xor ESI,ESI
            call .L_456c90

            test EAX,EAX
            jne .L_458836

            cmp QWORD PTR [RSP+40],1
            mov RDX,QWORD PTR [RSP+160]
            jne .L_4586c1

            xor ECX,ECX
            jmp .L_4586c6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4587c0:

            mov EBX,4294967284
            jmp .L_4583bb
.L_4587ca:

            mov QWORD PTR [RSP+48],0
            jmp .L_458549
.L_4587d8:

            call __stack_chk_fail@PLT
.L_4587dd:

            mov R15,QWORD PTR [RSP+120]
            mov EBX,DWORD PTR [RSP+116]
            mov R12,QWORD PTR [RSP+128]
            mov RBP,QWORD PTR [RSP+136]
            test R15,R15
            je .L_458817

            mov RSI,QWORD PTR [RSP+32]
            mov RDI,R15
            call .L_4569c0

            test EAX,EAX
            jne .L_458836

            mov EAX,DWORD PTR [R12]
            imul EAX,DWORD PTR [RBP]
            mov DWORD PTR [R15],EAX
.L_458817:

            cmp QWORD PTR [RSP+8],0
            je .L_4581f0

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+16]
            call .L_457120

            test EAX,EAX
            je .L_45883d
.L_458836:

            mov EBX,EAX
            jmp .L_4581f0
.L_45883d:

            mov R15,QWORD PTR [RSP+8]
            mov EAX,DWORD PTR [R12]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R15
            mov DWORD PTR [RSP+144],EAX
            call .L_4569c0

            test EAX,EAX
            jne .L_458836

            mov RSI,R14
            mov RDI,R15
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_457490

            test EAX,EAX
            jne .L_4581f0

            mov DWORD PTR [R15],1
            xor EBX,EBX
            jmp .L_4581f0
.L_4588aa:

            mov RDI,QWORD PTR [RAX+R15*1]
            or RAX,-1
            test RDX,RDX
            je .L_4588d6

            xor ECX,ECX
            mov QWORD PTR [RSP+104],R9
            call __udivti3@PLT

            mov R9,QWORD PTR [RSP+104]
            test RDX,RDX
            mov RCX,-1
            cmovne RAX,RCX
.L_4588d6:

            mov QWORD PTR [R12],RAX
            jmp .L_4586b5
.L_4588df:

            mov RAX,QWORD PTR [RSP+224]
            mov RSI,QWORD PTR [RSP+24]
            mov RDX,R14
            mov RDI,RBP
            mov RAX,QWORD PTR [RAX+RBX*1]
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            mov QWORD PTR [RSP+336],RAX
            call .L_457a50

            test EAX,EAX
            jne .L_458836

            mov RAX,QWORD PTR [RSP+40]
            mov RCX,QWORD PTR [RSP+88]
            mov RDI,RBP
            shl RAX,6
            lea R12,QWORD PTR [RAX+RCX*1]
            mov RSI,R12
            call .L_457010

            test EAX,EAX
            jne .L_458836

            mov RAX,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RAX
            mov RDI,RAX
            call .L_4578f0

            test EAX,EAX
            jne .L_458836

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R14
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_457490

            test EAX,EAX
            js .L_4589b5
.L_4589a6:

            sub QWORD PTR [RSP+40],1
            sub R15,8
            jmp .L_458657
.L_4589b5:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,RBP
            call .L_4569c0

            test EAX,EAX
            jne .L_458836

            mov RSI,R12
            mov RDI,RBP
            call .L_457010

            test EAX,EAX
            jne .L_458836

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_457870

            test EAX,EAX
            jne .L_458836

            add RBX,QWORD PTR [RSP+224]
            sub QWORD PTR [RBX],1
            jmp .L_4589a6
.L_458a03:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458a10:

            sub RSP,56
.L_458a14:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RCX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RCX,RAX
            mov QWORD PTR [RSP+32],RCX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RCX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_458090

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_458a6e

            add RSP,56
.L_458a6d:

            ret 
.L_458a6e:

            call __stack_chk_fail@PLT
.L_458a73:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458a80:

            push R14
            push R13
            mov R9,RSI
            push R12
            push RBP
            mov RBP,RDX
            push RBX
            mov RBX,RDI
            mov RDI,RDX
            sub RSP,48
.L_458a98:

            lea R13,QWORD PTR [RSP+32]
            mov R12,RSP
            mov QWORD PTR [RSP+32],0
            mov RSI,R12
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+16],R13
            call .L_457490

            test EAX,EAX
            js .L_458b95

            xor EDI,EDI
            mov RCX,RBP
            mov RDX,R9
            mov RSI,RBX
            call .L_458090

            test EAX,EAX
            mov R14D,EAX
            je .L_458b12

            jmp .L_458b70
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458b00:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457870

            test EAX,EAX
            jne .L_458b90
.L_458b12:

            mov RSI,R12
            mov RDI,RBX
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov QWORD PTR [RSP+16],R13
            call .L_457490

            test EAX,EAX
            js .L_458b00

            jmp .L_458b5a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458b48:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_4578f0

            test EAX,EAX
            jne .L_458b90
.L_458b5a:

            mov RSI,RBP
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            jns .L_458b48

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458b70:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_458b9d

            add RSP,48
.L_458b87:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_458b90:

            mov R14D,EAX
            jmp .L_458b70
.L_458b95:

            mov R14D,4294967286
            jmp .L_458b70
.L_458b9d:

            call __stack_chk_fail@PLT
.L_458ba2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458bb0:

            test RDX,RDX
            mov R8,RDX
            je .L_458c54

            js .L_458c5a

            cmp RDX,1
            je .L_458c40

            cmp RDX,2
            je .L_458c28

            mov R9,QWORD PTR [RSI+8]
            test R9,R9
            je .L_458c50

            mov R10,QWORD PTR [RSI+16]
            xor EDX,EDX
            nop
            nop
            nop
.L_458be0:

            mov RCX,QWORD PTR [R10+R9*8-8]
            shl RDX,32
            mov RAX,RCX
            shr RAX,32
            or RAX,RDX
            xor EDX,EDX
            div R8
            mov EAX,ECX
            shl RDX,32
            or RAX,RDX
            xor EDX,EDX
            div R8
            sub R9,1
            jne .L_458be0

            mov EAX,DWORD PTR [RSI]
            test EAX,EAX
            jns .L_458c1c

            sub R8,RDX
            test RDX,RDX
            cmovne RDX,R8
.L_458c1c:

            mov QWORD PTR [RDI],RDX
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_458c28:

            mov RAX,QWORD PTR [RSI+16]
            mov RAX,QWORD PTR [RAX]
            and EAX,1
            mov QWORD PTR [RDI],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458c40:

            mov QWORD PTR [RDI],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_458c50:

            xor EDX,EDX
            jmp .L_458c1c
.L_458c54:

            mov EAX,4294967284
            ret 
.L_458c5a:

            mov EAX,4294967286
            ret 
.L_458c60:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,72
.L_458c6e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_458d70

            movsxd R11,ESI
            mov RBP,RDI
            lea RDI,QWORD PTR [RSP+8]
            mov R12D,ESI
            mov R13,RDX
            mov RSI,RBP
            mov RDX,R11
            call .L_458bb0

            test EAX,EAX
            mov EBX,EAX
            jne .L_458d38

            lea R14,QWORD PTR [RSP+16]
            lea R15,QWORD PTR [RSP+48]
            xor ESI,ESI
            mov RDX,RBP
            mov RDI,RBP
            mov QWORD PTR [RSP+48],R11
            mov RCX,R14
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],1
            mov QWORD PTR [RSP+32],R15
            call .L_458090

            test EAX,EAX
            mov EBX,EAX
            jne .L_458d38

            mov RSI,R14
            mov RDI,RBP
            mov QWORD PTR [RSP+48],0
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],1
            mov QWORD PTR [RSP+32],R15
            call .L_457490

            test EAX,EAX
            jne .L_458d80
.L_458d19:

            mov RAX,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [R13]
            cmp RAX,9
            lea RCX,QWORD PTR [RDX+1]
            jbe .L_458d60

            add EAX,55
            mov QWORD PTR [R13],RCX
            mov BYTE PTR [RDX],AL
            nop
            nop
            nop
.L_458d38:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_458d96

            add RSP,72
.L_458d4e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458d60:

            add EAX,48
            mov QWORD PTR [R13],RCX
            mov BYTE PTR [RDX],AL
            jmp .L_458d38
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_458d70:

            mov EBX,4294967292
            jmp .L_458d38
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458d80:

            mov RDX,R13
            mov ESI,R12D
            mov RDI,RBP
            call .L_458c60

            test EAX,EAX
            je .L_458d19

            mov EBX,EAX
            jmp .L_458d38
.L_458d96:

            call __stack_chk_fail@PLT
.L_458d9b:

            nop
            nop
            nop
            nop
            nop
.L_458da0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,48
.L_458dac:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_458fc0

            mov R12D,ESI
            mov RBX,RDX
            mov R10,RCX
            mov R9,RDI
            mov RBP,R8
            call .L_456df0

            mov RDX,RAX
            shr RDX,1
            cmp R12D,3
            cmovg RAX,RDX
            mov RDX,RAX
            shr RDX,1
            cmp R12D,16
            cmove RAX,RDX
            lea RDX,QWORD PTR [RAX+1]
            and EDX,1
            lea RAX,QWORD PTR [RDX+RAX*1+3]
            cmp RAX,R10
            ja .L_458fc8

            cmp DWORD PTR [R9],-1
            mov QWORD PTR [RSP+8],RBX
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            jne .L_458e3e

            lea RAX,QWORD PTR [RBX+1]
            mov BYTE PTR [RBX],45
            mov QWORD PTR [RSP+8],RAX
.L_458e3e:

            cmp R12D,16
            jne .L_458f78

            mov RAX,QWORD PTR [R9+8]
            test RAX,RAX
            je .L_458ef6

            lea R10,QWORD PTR [RAX+8]
            lea R8,QWORD PTR [RAX*8-8]
            lea RDI,QWORD PTR [RIP+.L_45a4d9]
            xor R11D,R11D
            nop
            nop
            nop
            nop
            nop
.L_458e70:

            mov RSI,R10
            mov ECX,56
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458e80:

            mov RAX,QWORD PTR [R9+16]
            mov RAX,QWORD PTR [RAX+R8*1]
            shr RAX,CL
            mov EDX,EAX
            and EDX,255
            jne .L_458ea0

            test R11,R11
            jne .L_458ea0

            cmp RSI,2
            jne .L_458ed8
.L_458ea0:

            sar EDX,4
            mov R11,QWORD PTR [RSP+8]
            and EAX,15
            movsxd RDX,EDX
            movzx EAX,BYTE PTR [RDI+RAX*1]
            movzx EDX,BYTE PTR [RDI+RDX*1]
            lea R12,QWORD PTR [R11+1]
            mov QWORD PTR [RSP+8],R12
            mov BYTE PTR [R11],DL
            mov RDX,QWORD PTR [RSP+8]
            lea R11,QWORD PTR [RDX+1]
            mov QWORD PTR [RSP+8],R11
            mov BYTE PTR [RDX],AL
            mov R11D,1
.L_458ed8:

            sub ECX,8
            sub RSI,1
            cmp ECX,-8
            jne .L_458e80

            sub R10,1
            sub R8,8
            cmp R10,8
            jne .L_458e70
.L_458ef6:

            mov RAX,QWORD PTR [RSP+8]
            xor R13D,R13D
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+8],RDX
            mov BYTE PTR [RAX],0
            mov RAX,QWORD PTR [RSP+8]
            sub RAX,RBX
            mov QWORD PTR [RBP],RAX
.L_458f16:

            mov RDI,QWORD PTR [RSP+32]
            test RDI,RDI
            je .L_458f53

            mov RAX,QWORD PTR [RSP+24]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_458f4d

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458f38:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_458f38
.L_458f4d:

            call QWORD PTR [RIP+.L_677120]
.L_458f53:

            mov RBX,QWORD PTR [RSP+40]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_458fd3

            add RSP,48
.L_458f6a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 

            nop
            nop
            nop
            nop
            nop
.L_458f78:

            lea R14,QWORD PTR [RSP+16]
            mov RSI,R9
            mov RDI,R14
            call .L_4569c0

            test EAX,EAX
            mov R13D,EAX
            jne .L_458f16

            cmp DWORD PTR [RSP+16],-1
            je .L_458fb6
.L_458f96:

            lea RDX,QWORD PTR [RSP+8]
            mov ESI,R12D
            mov RDI,R14
            call .L_458c60

            test EAX,EAX
            mov R13D,EAX
            je .L_458ef6

            jmp .L_458f16
.L_458fb6:

            mov DWORD PTR [RSP+16],1
            jmp .L_458f96
.L_458fc0:

            mov R13D,4294967292
            jmp .L_458f53
.L_458fc8:

            mov QWORD PTR [R8],RAX
            mov R13D,4294967288
            jmp .L_458f53
.L_458fd3:

            call __stack_chk_fail@PLT
.L_458fd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_458fe0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RCX
            mov R13,RDX
            mov RBP,RCX
            sub RSP,328
.L_458ffd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+312],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+176]
            lea R14,QWORD PTR [RSP+208]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP],R8
            mov QWORD PTR [RSP+208],0
            mov RSI,RAX
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],1
            mov QWORD PTR [RSP+192],R14
            mov QWORD PTR [RSP+8],RAX
            call .L_457490

            test EAX,EAX
            js .L_4596e0

            mov RAX,QWORD PTR [RBP+16]
            mov R9,QWORD PTR [RAX]
            test R9B,1
            je .L_4596e0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_457490

            test EAX,EAX
            js .L_4596e0

            lea R8,QWORD PTR [R9+R9*1+4]
            mov EAX,4
            mov ECX,2
            and R8D,8
            lea R15,QWORD PTR [R8+R9*1]
.L_4590a6:

            mov RDX,R9
            mov RBX,RCX
            imul RDX,R15
            sub RBX,RDX
            imul R15,RBX
            sub EAX,1
            jne .L_4590a6

            xor EAX,EAX
            mov ECX,12
            mov RDI,R14

            rep stosq QWORD PTR [RDI]

            mov RAX,QWORD PTR [RBP+8]
            mov RDI,R12
            mov DWORD PTR [RSP+80],1
            mov QWORD PTR [RSP+88],0
            mov QWORD PTR [RSP+96],0
            mov DWORD PTR [RSP+112],1
            mov QWORD PTR [RSP+120],0
            lea RBX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+128],0
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            mov RSI,RBX
            call .L_456820

            test EAX,EAX
            jne .L_459428

            lea RDI,QWORD PTR [R14+24]
            mov RSI,RBX
            call .L_456820

            test EAX,EAX
            jne .L_459428

            lea RAX,QWORD PTR [RSP+112]
            lea RSI,QWORD PTR [RBX+RBX*1]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_456820

            test EAX,EAX
            jne .L_459428

            mov RAX,QWORD PTR [RSP+16]
            mov EAX,DWORD PTR [RAX]
            cmp EAX,-1
            mov DWORD PTR [RSP+36],EAX
            je .L_459668
.L_459184:

            mov RAX,QWORD PTR [RSP]
            test RAX,RAX
            je .L_4595f8

            cmp QWORD PTR [RAX+16],0
            je .L_4595f8

            mov RAX,QWORD PTR [RSP]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RAX,QWORD PTR [RAX+16]
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+96],RAX
.L_4591b2:

            mov RBX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            lea RDI,QWORD PTR [R14+24]
            js .L_4596c8

            mov RDX,RBP
            mov RSI,RBX
            call .L_458a80

            test EAX,EAX
            jne .L_459428
.L_4591e1:

            mov R8,R15
            lea R15,QWORD PTR [RSP+80]
            sub RSP,8
.L_4591ed:

            neg R8
            lea RDI,QWORD PTR [R14+24]
            mov RCX,RBP
            mov QWORD PTR [RSP+24],R8
            mov RAX,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [R15+16]
            lea RSI,QWORD PTR [R15+8]
            lea RBX,QWORD PTR [RAX+16]
            push RBX
            mov R9,QWORD PTR [RSP+136]
            call .L_4572e0

            test EAX,EAX
            pop RDX
            pop RCX
.L_45921f:

            jne .L_459428

            mov RSI,R15
            mov RDI,R12
            call .L_4569c0

            test EAX,EAX
            jne .L_459428

            lea RAX,QWORD PTR [RSP+72]
            mov QWORD PTR [RSP+72],1
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],1
            sub RSP,8
.L_459261:

            mov RCX,RBP
            mov QWORD PTR [RSP+64],RAX
            mov QWORD PTR [RSP+200],RAX
            mov RDI,R12
            mov RAX,QWORD PTR [RSP+16]
            push RBX
            mov R9,QWORD PTR [RSP+136]
            mov R8,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+8]
            call .L_4572e0

            test EAX,EAX
            pop R10
            pop R11
.L_45929a:

            jne .L_459428

            mov R15,QWORD PTR [R13+8]
            mov R9,QWORD PTR [RSP+120]
            xor EDI,EDI
            xor EBX,EBX
.L_4592ad:

            test RBX,RBX
            je .L_45937d
.L_4592b6:

            sub RBX,1
            mov ECX,EBX
.L_4592bc:

            mov RAX,QWORD PTR [R13+16]
            mov RSI,RDI
            mov RAX,QWORD PTR [RAX+R15*8]
            shr RAX,CL
            mov R10,RAX
            and R10D,1
            or RSI,R10
            je .L_4596a0

            not RAX
            lea RSI,QWORD PTR [R12+8]
            lea RDX,QWORD PTR [R12+16]
            test RAX,RDI
            jne .L_4596b0

            mov QWORD PTR [RSP+48],R10
            sub RSP,8
.L_4592f9:

            mov RDI,R12
            mov RAX,QWORD PTR [RSP+32]
            mov RCX,RBP
            lea R11,QWORD PTR [RAX+16]
            push R11
            mov R8,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+56],R11
            call .L_4572e0

            pop RSI
            test EAX,EAX
            pop RDI
            mov R11,QWORD PTR [RSP+40]
            mov R10,QWORD PTR [RSP+48]
            jne .L_459428

            lea RAX,QWORD PTR [R10+R10*1]
            sub RSP,8
            push R11
            mov R9,QWORD PTR [RSP+136]
            add R10,RAX
            lea RSI,QWORD PTR [R14+R10*8]
            lea RDX,QWORD PTR [RSI+16]
            add RSI,8
.L_45934e:

            mov R8,QWORD PTR [RSP+32]
            mov RCX,RBP
            mov RDI,R12
            call .L_4572e0

            test EAX,EAX
            pop R8
            pop R9
.L_459364:

            jne .L_459428

            test RBX,RBX
            mov R9,QWORD PTR [RSP+120]
            mov EDI,1
            jne .L_4592b6
.L_45937d:

            test R15,R15
            je .L_459398

            sub R15,1
            mov EBX,63
            mov ECX,63
            jmp .L_4592bc
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_459398:

            mov RAX,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+72],1
            sub RSP,8
.L_4593aa:

            mov DWORD PTR [RSP+184],1
            mov QWORD PTR [RSP+192],1
            mov RCX,RBP
            mov RDI,R12
            mov QWORD PTR [RSP+200],RAX
            mov RAX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+8]
            mov RAX,QWORD PTR [RSP+32]
            add RAX,16
            push RAX
            mov R8,QWORD PTR [RSP+32]
            call .L_4572e0

            test EAX,EAX
            pop RDX
            pop RCX
.L_4593f4:

            jne .L_459428

            cmp DWORD PTR [RSP+36],-1
            jne .L_459428

            cmp QWORD PTR [R13+8],0
            je .L_459428

            mov RDX,QWORD PTR [R13+16]
            test BYTE PTR [RDX],1
            je .L_459428

            mov EAX,DWORD PTR [RSP+36]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [R12],EAX
            call .L_457870

            nop
            nop
            nop
            nop
            nop
.L_459428:

            lea RDI,QWORD PTR [R14+24]
            mov DWORD PTR [RSP+8],EAX
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+248]
            mov EAX,DWORD PTR [RSP+8]
            test RDI,RDI
            je .L_459483

            mov RCX,QWORD PTR [RSP+240]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_459475

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
.L_459460:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_459460
.L_459475:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_459483:

            mov RDI,QWORD PTR [RSP+128]
            mov DWORD PTR [RSP+232],1
            mov QWORD PTR [RSP+240],0
            mov QWORD PTR [RSP+248],0
            test RDI,RDI
            je .L_4594eb

            mov RCX,QWORD PTR [RSP+120]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_4594dd

            mov RCX,RDI
            nop
            nop
            nop
            nop
.L_4594c8:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4594c8
.L_4594dd:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_4594eb:

            mov RDI,QWORD PTR [RSP+160]
            mov DWORD PTR [RSP+112],1
            mov QWORD PTR [RSP+120],0
            mov QWORD PTR [RSP+128],0
            test RDI,RDI
            je .L_459553

            mov RCX,QWORD PTR [RSP+152]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_459545

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_459530:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_459530
.L_459545:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_459553:

            mov RSI,QWORD PTR [RSP]
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            test RSI,RSI
            je .L_4595b0

            cmp QWORD PTR [RSI+16],0
            je .L_4595b0
.L_459586:

            mov RBX,QWORD PTR [RSP+312]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4596ea

            add RSP,328
.L_4595a4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_4595b0:

            mov RDI,QWORD PTR [RSP+96]
            test RDI,RDI
            je .L_459586

            mov RCX,QWORD PTR [RSP+88]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_4595e5

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_4595d0:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4595d0
.L_4595e5:

            mov DWORD PTR [RSP],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP]
            jmp .L_459586
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4595f8:

            lea RBX,QWORD PTR [RSP+80]
            mov ESI,1
            mov RDI,RBX
            call .L_456c90

            test EAX,EAX
            jne .L_459428

            mov RSI,QWORD PTR [RBP+8]
            mov RDI,RBX
            shl RSI,7
            call .L_457010

            test EAX,EAX
            jne .L_459428

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_458a80

            test EAX,EAX
            jne .L_459428

            mov RSI,QWORD PTR [RSP]
            test RSI,RSI
            je .L_4591b2

            mov RAX,QWORD PTR [RBX+16]
            movdqa XMM0,XMMWORD PTR [RBX]
            mov QWORD PTR [RSI+16],RAX
            movups XMMWORD PTR [RSI],XMM0
            jmp .L_4591b2
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_459668:

            lea RBX,QWORD PTR [RSP+144]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_4569c0

            test EAX,EAX
            jne .L_459428

            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+16],RBX
            jmp .L_459184
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4596a0:

            xor EDI,EDI
            jmp .L_4592ad
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4596b0:

            sub RSP,8
.L_4596b4:

            mov RAX,QWORD PTR [RSP+32]
            add RAX,16
            push RAX
            jmp .L_45934e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4596c8:

            mov RSI,QWORD PTR [RSP+16]
            call .L_4569c0

            test EAX,EAX
            je .L_4591e1

            jmp .L_459428
          .byte 0x90
.L_4596e0:

            mov EAX,4294967292
            jmp .L_459586
.L_4596ea:

            call __stack_chk_fail@PLT
.L_4596ef:

            nop
.L_4596f0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RDX
            sub RSP,136
.L_459707:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            call .L_4569c0

            test EAX,EAX
            je .L_459830
.L_459760:

            mov RDI,QWORD PTR [RSP+32]
            test RDI,RDI
            je .L_4597a3

            mov RCX,QWORD PTR [RSP+24]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_459795

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_459780:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_459780
.L_459795:

            mov DWORD PTR [RSP+12],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+12]
.L_4597a3:

            mov RDI,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            test RDI,RDI
            je .L_459803

            mov RCX,QWORD PTR [RSP+56]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_4597f5

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4597e0:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4597e0
.L_4597f5:

            mov DWORD PTR [RSP+12],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+12]
.L_459803:

            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            jne .L_459aeb

            add RSP,136
.L_45981e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_459830:

            lea RBP,QWORD PTR [RSP+48]
            mov RSI,R13
            mov RDI,RBP
            call .L_4569c0

            test EAX,EAX
            jne .L_459760

            mov R9,QWORD PTR [RSP+24]
            test R9,R9
            je .L_459ab9

            mov R10,QWORD PTR [RSP+32]
            xor ECX,ECX
            xor R8D,R8D
.L_459860:

            mov RSI,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RCX+64]
            mov RAX,RCX
            jmp .L_45987d

            nop
            nop
            nop
.L_459870:

            add RAX,1
            cmp RAX,RDI
            je .L_459a9a
.L_45987d:

            mov EDX,EAX
            sub EDX,ECX
            bt RSI,RDX
            jae .L_459870
.L_459887:

            mov R13,QWORD PTR [RSP+56]
            test R13,R13
            je .L_4598d1

            mov R10,QWORD PTR [RSP+64]
            xor ESI,ESI
            xor R9D,R9D
.L_45989b:

            mov RDI,QWORD PTR [R10+R9*8]
            lea R8,QWORD PTR [RSI+64]
            mov RDX,RSI
            jmp .L_4598bd

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4598b0:

            add RDX,1
            cmp RDX,R8
            je .L_459a89
.L_4598bd:

            mov ECX,EDX
            sub ECX,ESI
            bt RDI,RCX
            jae .L_4598b0

            cmp RAX,RDX
            cmovbe RDX,RAX
            mov R13,RDX
.L_4598d1:

            mov RSI,R13
            mov RDI,RBX
            call .L_457120

            test EAX,EAX
            jne .L_459760

            mov RSI,R13
            mov RDI,RBP
            call .L_457120

            test EAX,EAX
            jne .L_459760

            lea R15,QWORD PTR [RSP+112]
            lea R14,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+48],1
            mov DWORD PTR [RSP+16],1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_459918:

            mov RSI,R14
            mov RDI,RBX
            mov QWORD PTR [RSP+112],0
            mov DWORD PTR [RSP+80],1
            mov QWORD PTR [RSP+88],1
            mov QWORD PTR [RSP+96],R15
            call .L_457490

            test EAX,EAX
            je .L_459ac0

            mov R9,QWORD PTR [RSP+24]
            test R9,R9
            je .L_459aab

            mov R10,QWORD PTR [RSP+32]
            xor EDX,EDX
            xor R8D,R8D
.L_459962:

            mov RCX,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RDX+64]
            mov RSI,RDX
            jmp .L_45997d
          .byte 0x90
.L_459970:

            add RSI,1
            cmp RSI,RDI
            je .L_459a60
.L_45997d:

            mov EAX,ESI
            sub EAX,EDX
            bt RCX,RAX
            jae .L_459970
.L_459987:

            mov RDI,RBX
            call .L_457120

            test EAX,EAX
            jne .L_459760

            mov R9,QWORD PTR [RSP+56]
            test R9,R9
            je .L_459ab2

            mov R10,QWORD PTR [RSP+64]
            xor EDX,EDX
            xor R8D,R8D
.L_4599af:

            mov RCX,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RDX+64]
            mov RSI,RDX
            jmp .L_4599cd
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4599c0:

            add RSI,1
            cmp RSI,RDI
            je .L_459a78
.L_4599cd:

            mov EAX,ESI
            sub EAX,EDX
            bt RCX,RAX
            jae .L_4599c0
.L_4599d7:

            mov RDI,RBP
            call .L_457120

            test EAX,EAX
            jne .L_459760

            mov RSI,RBP
            mov RDI,RBX
            call .L_457490

            test EAX,EAX
            js .L_459a30

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457730

            test EAX,EAX
            jne .L_459760

            mov ESI,1
            mov RDI,RBX
            call .L_457120

            test EAX,EAX
            je .L_459918

            jmp .L_459760
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_459a30:

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_457730

            test EAX,EAX
            jne .L_459760

            mov ESI,1
            mov RDI,RBP
            call .L_457120

            test EAX,EAX
            je .L_459918

            jmp .L_459760
.L_459a60:

            add R8,1
            cmp R9,R8
            je .L_459aab

            mov RDX,RSI
            jmp .L_459962
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_459a78:

            add R8,1
            cmp R8,R9
            je .L_459ab2

            mov RDX,RSI
            jmp .L_4599af
.L_459a89:

            add R9,1
            cmp R9,R13
            je .L_459ae3

            mov RSI,RDX
            jmp .L_45989b
.L_459a9a:

            add R8,1
            cmp R8,R9
            je .L_459ab9

            mov RCX,RAX
            jmp .L_459860
.L_459aab:

            xor ESI,ESI
            jmp .L_459987
.L_459ab2:

            xor ESI,ESI
            jmp .L_4599d7
.L_459ab9:

            xor EAX,EAX
            jmp .L_459887
.L_459ac0:

            mov RSI,R13
            mov RDI,RBP
            call .L_457010

            test EAX,EAX
            jne .L_459760

            mov RSI,RBP
            mov RDI,R12
            call .L_4569c0

            jmp .L_459760
.L_459ae3:

            xor R13D,R13D
            jmp .L_4598d1
.L_459aeb:

            call __stack_chk_fail@PLT
.L_459af0:

            push R12
            push RBP
            mov RAX,RDX
            push RBX
            sub RSP,48
.L_459afb:

            mov RDX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RDX
            xor EDX,EDX
            cmp RSI,32
            ja .L_459b50

            mov RBP,RSP
            mov RDX,RSI
            mov R12,RDI
            mov RBX,RSI
            mov RDI,RCX
            mov RSI,RBP
            call RAX

            test EAX,EAX
            jne .L_459b37

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_456e80
.L_459b37:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            jne .L_459b57

            add RSP,48
.L_459b4b:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_459b50:

            mov EAX,4294967292
            jmp .L_459b37
.L_459b57:

            call __stack_chk_fail@PLT
.L_459b5c:

            nop
            nop
            nop
            nop
.L_459b60:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDX
            sub RSP,408
.L_459b77:

            lea R12,QWORD PTR [RSP+352]
            lea R13,QWORD PTR [RSP+384]
            mov QWORD PTR [RSP+8],RDI
            mov RDI,RDX
            mov QWORD PTR [RSP+384],1
            mov DWORD PTR [RSP+352],1
            mov RSI,R12
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            call .L_457490

            test EAX,EAX
            jle .L_45a408

            lea R15,QWORD PTR [RSP+64]
            mov RDX,RBP
            mov RSI,R14
            mov DWORD PTR [RSP+96],1
            mov QWORD PTR [RSP+104],0
            mov RDI,R15
            mov QWORD PTR [RSP+112],0
            mov DWORD PTR [RSP+128],1
            mov QWORD PTR [RSP+136],0
            mov QWORD PTR [RSP+144],0
            mov DWORD PTR [RSP+160],1
            mov QWORD PTR [RSP+168],0
            mov QWORD PTR [RSP+176],0
            mov DWORD PTR [RSP+192],1
            mov QWORD PTR [RSP+200],0
            mov QWORD PTR [RSP+208],0
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],0
            mov QWORD PTR [RSP+80],0
            mov DWORD PTR [RSP+224],1
            mov QWORD PTR [RSP+232],0
            mov QWORD PTR [RSP+240],0
            mov DWORD PTR [RSP+256],1
            mov QWORD PTR [RSP+264],0
            mov QWORD PTR [RSP+272],0
            mov DWORD PTR [RSP+288],1
            mov QWORD PTR [RSP+296],0
            mov QWORD PTR [RSP+304],0
            mov DWORD PTR [RSP+320],1
            mov QWORD PTR [RSP+328],0
            mov QWORD PTR [RSP+336],0
            call .L_4596f0

            test EAX,EAX
            mov EBX,EAX
            je .L_45a090
.L_459d23:

            mov RDI,QWORD PTR [RSP+112]
            test RDI,RDI
            je .L_459d5b

            mov RDX,QWORD PTR [RSP+104]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459d55

            mov RDX,RDI
            nop
            nop
.L_459d40:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459d40
.L_459d55:

            call QWORD PTR [RIP+.L_677120]
.L_459d5b:

            mov RDI,QWORD PTR [RSP+144]
            mov DWORD PTR [RSP+96],1
            mov QWORD PTR [RSP+104],0
            mov QWORD PTR [RSP+112],0
            test RDI,RDI
            je .L_459dbb

            mov RDX,QWORD PTR [RSP+136]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459db5

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_459da0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459da0
.L_459db5:

            call QWORD PTR [RIP+.L_677120]
.L_459dbb:

            mov RDI,QWORD PTR [RSP+176]
            mov DWORD PTR [RSP+128],1
            mov QWORD PTR [RSP+136],0
            mov QWORD PTR [RSP+144],0
            test RDI,RDI
            je .L_459e1b

            mov RDX,QWORD PTR [RSP+168]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459e15

            mov RDX,RDI
            nop
.L_459e00:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459e00
.L_459e15:

            call QWORD PTR [RIP+.L_677120]
.L_459e1b:

            mov RDI,QWORD PTR [RSP+208]
            mov DWORD PTR [RSP+160],1
            mov QWORD PTR [RSP+168],0
            mov QWORD PTR [RSP+176],0
            test RDI,RDI
            je .L_459e7b

            mov RDX,QWORD PTR [RSP+200]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459e75

            mov RDX,RDI
            nop
.L_459e60:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459e60
.L_459e75:

            call QWORD PTR [RIP+.L_677120]
.L_459e7b:

            mov RDI,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+192],1
            mov QWORD PTR [RSP+200],0
            mov QWORD PTR [RSP+208],0
            test RDI,RDI
            je .L_459edb

            mov RDX,QWORD PTR [RSP+72]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459ed5

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_459ec0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459ec0
.L_459ed5:

            call QWORD PTR [RIP+.L_677120]
.L_459edb:

            mov RDI,QWORD PTR [RSP+240]
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],0
            mov QWORD PTR [RSP+80],0
            test RDI,RDI
            je .L_459f3b

            mov RDX,QWORD PTR [RSP+232]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459f35

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_459f20:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459f20
.L_459f35:

            call QWORD PTR [RIP+.L_677120]
.L_459f3b:

            mov RDI,QWORD PTR [RSP+272]
            mov DWORD PTR [RSP+224],1
            mov QWORD PTR [RSP+232],0
            mov QWORD PTR [RSP+240],0
            test RDI,RDI
            je .L_459f9b

            mov RDX,QWORD PTR [RSP+264]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459f95

            mov RDX,RDI
            nop
.L_459f80:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459f80
.L_459f95:

            call QWORD PTR [RIP+.L_677120]
.L_459f9b:

            mov RDI,QWORD PTR [RSP+304]
            mov DWORD PTR [RSP+256],1
            mov QWORD PTR [RSP+264],0
            mov QWORD PTR [RSP+272],0
            test RDI,RDI
            je .L_459ffb

            mov RDX,QWORD PTR [RSP+296]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_459ff5

            mov RDX,RDI
            nop
.L_459fe0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_459fe0
.L_459ff5:

            call QWORD PTR [RIP+.L_677120]
.L_459ffb:

            mov RDI,QWORD PTR [RSP+336]
            mov DWORD PTR [RSP+288],1
            mov QWORD PTR [RSP+296],0
            mov QWORD PTR [RSP+304],0
            test RDI,RDI
            je .L_45a05b

            mov RDX,QWORD PTR [RSP+328]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_45a055

            mov RDX,RDI
            nop
.L_45a040:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_45a040
.L_45a055:

            call QWORD PTR [RIP+.L_677120]
.L_45a05b:

            mov RCX,QWORD PTR [RSP+392]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_45a412

            add RSP,408
.L_45a07b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a090:

            mov RSI,R12
            mov RDI,R15
            mov QWORD PTR [RSP+384],1
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov EBX,4294967282
            mov QWORD PTR [RSP+368],R13
            call .L_457490

            test EAX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+96]
            mov RDX,RBP
            mov RSI,R14
            mov RDI,RAX
            mov R15,RAX
            call .L_458a80

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea R14,QWORD PTR [RSP+128]
            mov RSI,R15
            mov RDI,R14
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+224]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+48],RAX
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+256]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+56],RAX
            call .L_4569c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+160]
            mov ESI,1
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+192]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+288]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            lea RAX,QWORD PTR [RSP+320]
            mov ESI,1
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_456c90

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23
.L_45a1de:

            mov RAX,QWORD PTR [RSP+144]
            test BYTE PTR [RAX],1
            jne .L_45a2f6

            mov ESI,1
            mov RDI,R14
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RAX,QWORD PTR [RSP+176]
            test BYTE PTR [RAX],1
            jne .L_45a417

            mov RAX,QWORD PTR [RSP+208]
            test BYTE PTR [RAX],1
            jne .L_45a417
.L_45a228:

            mov RDI,QWORD PTR [RSP+32]
            mov ESI,1
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+40]
            mov ESI,1
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            je .L_45a1de

            jmp .L_459d23
.L_45a25b:

            mov RDI,QWORD PTR [RSP+56]
            mov ESI,1
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RAX,QWORD PTR [RSP+304]
            test BYTE PTR [RAX],1
            jne .L_45a28e

            mov RAX,QWORD PTR [RSP+336]
            test BYTE PTR [RAX],1
            je .L_45a2c4
.L_45a28e:

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+48]
            mov RSI,RDI
            call .L_457870

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R15
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23
.L_45a2c4:

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,1
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+24]
            mov ESI,1
            call .L_457120

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23
.L_45a2f6:

            mov RAX,QWORD PTR [RSP+272]
            test BYTE PTR [RAX],1
            je .L_45a25b

            mov RBX,QWORD PTR [RSP+56]
            mov RDI,R14
            mov RSI,RBX
            call .L_457490

            test EAX,EAX
            js .L_45a47e

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDX,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+40]
.L_45a35d:

            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RSI,R12
            mov RDI,R14
            mov QWORD PTR [RSP+384],0
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            call .L_457490

            test EAX,EAX
            jne .L_45a1de
.L_45a3ad:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R12
            mov QWORD PTR [RSP+384],0
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            call .L_457490

            test EAX,EAX
            jns .L_45a452

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_457870

            test EAX,EAX
            mov EBX,EAX
            je .L_45a3ad

            jmp .L_459d23
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45a408:

            mov EBX,4294967292
            jmp .L_45a05b
.L_45a412:

            call __stack_chk_fail@PLT
.L_45a417:

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+48]
            mov RSI,RDI
            call .L_457870

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+40]
            mov RDX,R15
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            je .L_45a228

            jmp .L_459d23
.L_45a452:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,RBP
            call .L_457490

            test EAX,EAX
            js .L_45a4c3

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            je .L_45a452

            jmp .L_459d23
.L_45a47e:

            mov RDI,QWORD PTR [RSP+56]
            mov RDX,R14
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+32]
            mov RSI,RDI
            call .L_4578f0

            test EAX,EAX
            mov EBX,EAX
            jne .L_459d23

            mov RDX,QWORD PTR [RSP+40]
            mov RDI,QWORD PTR [RSP+24]
            jmp .L_45a35d
.L_45a4c3:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_4569c0

            mov EBX,EAX
            jmp .L_459d23
.L_45a4d9:
          .byte 0x30
          .byte 0x31
          .byte 0x32
          .byte 0x33
          .byte 0x34
          .byte 0x35
          .byte 0x36
          .byte 0x37
          .byte 0x38
          .byte 0x39
          .byte 0x41
          .byte 0x42
          .byte 0x43
          .byte 0x44
          .byte 0x45
          .byte 0x46
          .byte 0x0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45a4f0:

            mov EAX,DWORD PTR [RIP+.L_67e600]
            test EAX,EAX
            jne .L_45a539

            mov EDX,DWORD PTR [RIP+.L_676a20]
            lea RAX,QWORD PTR [RIP+.L_67e610]
            test EDX,EDX
            je .L_45a529

            lea RCX,QWORD PTR [RIP+.L_676a20]
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a518:

            add RCX,16
            add RAX,4
            mov DWORD PTR [RAX-4],EDX
            mov EDX,DWORD PTR [RCX]
            test EDX,EDX
            jne .L_45a518
.L_45a529:

            mov DWORD PTR [RAX],0
            mov DWORD PTR [RIP+.L_67e600],1
.L_45a539:

            lea RAX,QWORD PTR [RIP+.L_67e610]
            ret 
.L_45a541:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a550:

            mov RAX,QWORD PTR [RIP+.L_676a28]
            test RAX,RAX
            je .L_45a581

            cmp EDI,DWORD PTR [RIP+.L_676a20]
            je .L_45a581

            lea RDX,QWORD PTR [RIP+.L_676a20]
            jmp .L_45a574
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45a570:

            cmp DWORD PTR [RDX],EDI
            je .L_45a581
.L_45a574:

            add RDX,16
            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_45a570
.L_45a581:

            ret 
.L_45a583:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a590:

            test RDI,RDI
            push R12
            push RBP
            push RBX
.L_45a597:

            je .L_45a5dd

            mov RBX,QWORD PTR [RIP+.L_676a28]
            test RBX,RBX
            je .L_45a5d5

            mov R12,RDI
            lea RBP,QWORD PTR [RIP+.L_676a20]
            jmp .L_45a5c5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a5b8:

            add RBP,16
            mov RBX,QWORD PTR [RBP+8]
            test RBX,RBX
            je .L_45a5d5
.L_45a5c5:

            mov RDI,QWORD PTR [RBX+16]
            mov RSI,R12
            call strcmp@PLT

            test EAX,EAX
            jne .L_45a5b8
.L_45a5d5:

            mov RAX,RBX
            pop RBX
.L_45a5d9:

            pop RBP
            pop R12
            ret 
.L_45a5dd:

            xor EBX,EBX
            jmp .L_45a5d5
.L_45a5e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a5f0:

            mov RAX,QWORD PTR [RIP+.L_676a28]
            test RAX,RAX
            je .L_45a628

            lea RCX,QWORD PTR [RIP+.L_676a20]
            jmp .L_45a615
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45a608:

            add RCX,16
            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            je .L_45a628
.L_45a615:

            mov R8,QWORD PTR [RAX+40]
            cmp DWORD PTR [R8],EDI
            jne .L_45a608

            cmp DWORD PTR [RAX+8],ESI
            jne .L_45a608

            cmp DWORD PTR [RAX+4],EDX
            jne .L_45a608
.L_45a628:

            ret 
.L_45a62a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_45a630:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            ret 
.L_45a648:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a650:

            test RDI,RDI
            je .L_45a6ae

            push RBX

            mov RAX,QWORD PTR [RDI+72]
            mov RBX,RDI
            test RAX,RAX
            je .L_45a686

            lea RDX,QWORD PTR [RAX+40]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a670:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_45a670

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_45a686:

            mov RDI,QWORD PTR [RBX+64]
            test RDI,RDI
            je .L_45a699

            mov RAX,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+40]
.L_45a699:

            lea RAX,QWORD PTR [RBX+80]
            nop
            nop
            nop
.L_45a6a0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_45a6a0

            pop RBX

            ret 
.L_45a6ae:

            ret 
.L_45a6b0:

            test RSI,RSI
            je .L_45a700

            test RDI,RDI
            je .L_45a700

            pxor XMM0,XMM0
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            mov RAX,QWORD PTR [RSI+40]
            call QWORD PTR [RAX+32]

            test RAX,RAX
            mov QWORD PTR [RBX+64],RAX
            je .L_45a706

            mov QWORD PTR [RBX],RBP
            xor EAX,EAX
.L_45a6f2:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a700:

            mov EAX,4294942464
            ret 
.L_45a706:

            mov EAX,4294942336
            jmp .L_45a6f2
.L_45a70d:

            nop
            nop
            nop
.L_45a710:

            test RDI,RDI
            je .L_45a745

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_45a745

            test BYTE PTR [RAX+28],2
            je .L_45a740
.L_45a723:

            cmp ECX,1
            mov DWORD PTR [RDI+8],EDX
            mov DWORD PTR [RDI+12],ECX
            jne .L_45a750
.L_45a72e:

            mov RAX,QWORD PTR [RAX+40]
            mov RDI,QWORD PTR [RDI+64]
            jmp QWORD PTR [RAX+16]
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a740:

            cmp DWORD PTR [RAX+8],EDX
            je .L_45a723
.L_45a745:

            mov EAX,4294942464
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45a750:

            mov R9D,DWORD PTR [RAX+4]
            lea R8D,DWORD PTR [R9-3]
            and R8D,4294967293
            je .L_45a72e

            test ECX,ECX
            jne .L_45a745

            mov RAX,QWORD PTR [RAX+40]
            mov RDI,QWORD PTR [RDI+64]
            jmp QWORD PTR [RAX+24]
.L_45a76d:

            nop
            nop
            nop
.L_45a770:

            test RDI,RDI
            je .L_45a858

            test RSI,RSI
            mov RAX,QWORD PTR [RDI]
            je .L_45a858

            test RAX,RAX
            je .L_45a858

            cmp RDX,16
            ja .L_45a860

            test BYTE PTR [RAX+28],1
            jne .L_45a830

            mov EAX,DWORD PTR [RAX+24]
            cmp RDX,RAX
            jb .L_45a858
.L_45a7ae:

            cmp EAX,8
            lea R8,QWORD PTR [RDI+40]
            jb .L_45a808

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+40],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [R8+RDX*1-8],RCX
            lea RCX,QWORD PTR [RDI+48]
            and RCX,-8
            sub R8,RCX
            lea EDX,DWORD PTR [RAX+R8*1]
            sub RSI,R8
            and EDX,4294967288
            cmp EDX,8
            jb .L_45a7fe

            and EDX,4294967288
            xor R8D,R8D
.L_45a7ea:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RSI+R9*1]
            cmp R8D,EDX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_45a7ea
.L_45a7fe:

            mov QWORD PTR [RDI+56],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45a808:

            test AL,4
            jne .L_45a840

            test EAX,EAX
            je .L_45a7fe

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RDI+40],CL
            je .L_45a7fe

            mov ECX,EAX
            movzx EDX,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R8+RCX*1-2],DX
            jmp .L_45a7fe
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a830:

            mov RAX,RDX
            jmp .L_45a7ae
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a840:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RDI+40],ECX
            mov ECX,EAX
            mov EDX,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R8+RCX*1-4],EDX
            jmp .L_45a7fe
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45a858:

            mov EAX,4294942464
            ret 
          .byte 0x66
          .byte 0x90
.L_45a860:

            mov EAX,4294942592
            ret 
.L_45a866:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a870:

            test RDI,RDI
            je .L_45a890

            cmp QWORD PTR [RDI],0
            je .L_45a890

            mov QWORD PTR [RDI+32],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a890:

            mov EAX,4294942464
            ret 
.L_45a896:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a8a0:

            test RDI,RDI
            je .L_45a8e8

            test R8,R8
            mov R9,QWORD PTR [RDI]
            je .L_45a8e8

            test R9,R9
            je .L_45a8e8

            cmp DWORD PTR [R9+4],1
            mov QWORD PTR [R8],0
            mov R10D,DWORD PTR [R9+32]
            je .L_45a8f8

            test R10,R10
            je .L_45a920

            cmp RSI,RCX
            mov R8D,4294942592
            jne .L_45a8ee

            cmp QWORD PTR [RDI+32],0
            jne .L_45a8e8

            mov RAX,RDX
            xor EDX,EDX
            div R10
            test RDX,RDX
            je .L_45a8ee
.L_45a8e8:

            mov R8D,4294942464
.L_45a8ee:

            mov EAX,R8D
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45a8f8:

            cmp R10,RDX
            jne .L_45a928

            mov QWORD PTR [R8],R10
            mov RAX,QWORD PTR [R9+40]
            mov RDX,RSI
            mov R8D,DWORD PTR [RDI+12]
            mov RDI,QWORD PTR [RDI+64]
            mov RAX,QWORD PTR [RAX+8]
            mov ESI,R8D
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a920:

            mov R8D,4294941824
            jmp .L_45a8ee
.L_45a928:

            mov R8D,4294942080
            jmp .L_45a8ee
.L_45a930:

            test RDI,RDI
            je .L_45a978

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_45a978

            test RDX,RDX
            je .L_45a978

            mov EAX,DWORD PTR [RAX+4]
            mov QWORD PTR [RDX],0
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,2
            jbe .L_45a959

            cmp EAX,3
            jne .L_45a960
.L_45a959:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45a960:

            cmp EAX,1
            jne .L_45a97e

            cmp QWORD PTR [RDI+32],1
            sbb EAX,EAX
            not EAX
            and EAX,4294942080
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45a978:

            mov EAX,4294942464
            ret 
.L_45a97e:

            mov EAX,4294942592
            ret 
.L_45a984:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45a990:

            push R13
            push R12
            mov R11,RCX
            push RBP
            push RBX
            mov R13,R8
            mov RBX,RDI
            mov RBP,R9
            sub RSP,24
.L_45a9a6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov R12,QWORD PTR [RSP+64]
            call .L_45a770

            test EAX,EAX
            jne .L_45a9ec

            test RDI,RDI
            je .L_45aa30

            cmp QWORD PTR [RDI],0
            je .L_45aa30

            mov QWORD PTR [RDI+32],0
            mov R8,R12
            mov RCX,RBP
            mov RDX,R13
            mov RSI,R11
            call .L_45a8a0

            test EAX,EAX
            je .L_45aa10
.L_45a9ec:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_45aa37

            add RSP,24
.L_45aa00:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45aa10:

            mov RSI,QWORD PTR [R12]
            mov RDX,RSP
            mov RDI,RBX
            add RSI,RBP
            call .L_45a930

            test EAX,EAX
            jne .L_45a9ec

            mov RDX,QWORD PTR [RSP]
            add QWORD PTR [R12],RDX
            jmp .L_45a9ec
.L_45aa30:

            mov EAX,4294942464
            jmp .L_45a9ec
.L_45aa37:

            call __stack_chk_fail@PLT
.L_45aa3c:

            nop
            nop
            nop
            nop
.L_45aa40:

            push RBP
            push RBX
.L_45aa42:

            mov R10,RSI
            mov RAX,QWORD PTR [RDI]
            mov RSI,QWORD PTR [RSP+24]
            mov RBP,QWORD PTR [RSP+40]
            mov R11,QWORD PTR [RSP+48]
            mov RBX,QWORD PTR [RSP+56]
            cmp DWORD PTR [RAX+4],8
            jne .L_45aa90

            mov QWORD PTR [RBP],RSI
            mov RDI,QWORD PTR [RDI+64]
            mov QWORD PTR [RSP+24],R9
            mov QWORD PTR [RSP+48],RBX
            mov R9,R8
            mov QWORD PTR [RSP+40],R11
            mov R8,RCX
            mov RCX,RDX
            pop RBX
.L_45aa83:

            pop RBP
            mov RDX,R10
            jmp .L_45fbd0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45aa90:

            mov EAX,4294942592
            pop RBX
            pop RBP
            ret 
.L_45aa98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45aaa0:

            sub RSP,8
            mov R11,QWORD PTR [RDI]
            mov R10,RSI
            mov EAX,4294942592
            mov RSI,QWORD PTR [RSP+16]
            cmp DWORD PTR [R11+4],8
            jne .L_45aaf1

            mov RAX,R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,R10
            mov R10,QWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RDI+64]
            mov QWORD PTR [R10],RSI
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+40]
            push RAX
            call .L_45fc00

            add RSP,32
            cmp EAX,-15
            je .L_45aaf6
.L_45aaf1:

            add RSP,8
            ret 
.L_45aaf6:

            mov EAX,4294941952
            jmp .L_45aaf1
.L_45aafd:

            nop
            nop
            nop
.L_45ab00:

            push RBX
            mov RBX,RDI
            call .L_45fbb0

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_45ab13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45ab20:

            sub RSP,24
            mov ESI,80
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_45ab4b

            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_45fb10

            mov RAX,QWORD PTR [RSP+8]
.L_45ab4b:

            add RSP,24
            ret 
.L_45ab50:

            mov ECX,EDX
            mov RDX,RSI
            mov ESI,2
            jmp .L_45fb30
.L_45ab5f:

            nop
.L_45ab60:

            push RBX
            mov RBX,RDI
            call .L_444790

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_45ab73:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45ab80:

            push RBX
            mov ESI,288
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov RBX,RAX
            je .L_45aba1

            mov RDI,RAX
            call .L_444760
.L_45aba1:

            mov RAX,RBX
            pop RBX
            ret 
.L_45aba6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45abb0:

            jmp .L_444aa0
.L_45abb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45abc0:

            jmp .L_4447b0
.L_45abc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45abd0:

            jmp .L_445520
.L_45abd5:
          .string "AES-256-CCM"
.L_45abe1:
          .string "AES-192-CCM"
.L_45abed:
          .string "AES-128-CCM"
.L_45abf9:
          .string "AES-256-ECB"
.L_45ac05:
          .string "AES-192-ECB"
.L_45ac11:
          .string "AES-128-ECB"
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45ac20:

            push RBX
            mov R9,RSI
            mov RSI,R8
            mov RBX,RDI
            sub RSP,16
.L_45ac2e:

            mov R8,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp R8,R9
            ja .L_45acc0

            mov RAX,R9
            sub RAX,R8
            cmp RAX,4
            jle .L_45acc0

            add R8,4
            mov RDI,RDX
            mov EDX,ECX
            sub R9,R8
            mov RCX,RSP
            call .L_455800

            test EAX,EAX
            jne .L_45aca8

            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,24
            mov BYTE PTR [RCX],DL
            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,16
            mov BYTE PTR [RCX+1],DL
            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,8
            mov BYTE PTR [RCX+2],DL
            mov RDX,QWORD PTR [RBX]
            mov RCX,QWORD PTR [RSP]
            mov BYTE PTR [RDX+3],CL
            mov RSI,QWORD PTR [RSP]
            lea RDX,QWORD PTR [RSI+4]
            add QWORD PTR [RBX],RDX
.L_45aca8:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_45acc7

            add RSP,16
.L_45acbc:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_45acc0:

            mov EAX,4294947072
            jmp .L_45aca8
.L_45acc7:

            call __stack_chk_fail@PLT
.L_45accc:

            nop
            nop
            nop
            nop
.L_45acd0:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            sub RSP,344
.L_45ace7:

            mov R15,QWORD PTR [RSP+400]
            mov RAX,QWORD PTR [RSP+408]
            lea RBX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP],RCX
            lea R13,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP+16],R9
            lea RBP,QWORD PTR [RBX+217]
            mov RDI,R15
            mov QWORD PTR [RSP+24],RAX
            mov QWORD PTR [RSP+56],RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            call strlen@PLT

            mov RCX,QWORD PTR [RSP]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            mov QWORD PTR [RSP+32],RAX
            mov R8,RCX
            mov ECX,R14D
            call .L_45ac20

            test EAX,EAX
            je .L_45ad90
.L_45ad61:

            mov RSI,QWORD PTR [RSP+328]
            xor RSI,QWORD PTR FS:[40]
            jne .L_45aebb

            add RSP,344
.L_45ad7f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45ad90:

            mov R8,QWORD PTR [RSP+8]
            mov ECX,R14D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            call .L_45ac20

            test EAX,EAX
            jne .L_45ad61

            mov R8,QWORD PTR [RSP+16]
            mov ECX,R14D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            call .L_45ac20

            test EAX,EAX
            jne .L_45ad61

            mov RAX,QWORD PTR [RSP+56]
            mov RDX,RBP
            sub RDX,RAX
            cmp RDX,3
            jle .L_45aeb1

            mov RSI,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,24
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,16
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,8
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov BYTE PTR [RAX],SIL
            mov RDI,QWORD PTR [RSP+56]
            cmp RDI,RBP
            ja .L_45aeb1

            sub RBP,RDI
            mov R14,RSI
            cmp RBP,RSI
            jb .L_45aeb1

            mov RDX,RSI
            mov RSI,R15
            lea RBP,QWORD PTR [RSP+64]
            call memcpy@PLT

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,RBX
            mov RCX,RBP
            add RDX,R14
            mov QWORD PTR [RSP+56],RDX
            sub RDX,RBX
            mov RBX,QWORD PTR [RSP+40]
            mov RDI,RBX
            call .L_443870

            mov RDI,RBX
            call .L_443c60

            mov RDI,QWORD PTR [RSP+24]
            movzx EDX,AL
            mov RSI,RBP
            call .L_456e80

            test EAX,EAX
            jne .L_45ad61

            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [R12+152]
            mov RSI,RDI
            call .L_458a80

            jmp .L_45ad61
.L_45aeb1:

            mov EAX,4294947072
            jmp .L_45ad61
.L_45aebb:

            call __stack_chk_fail@PLT
.L_45aec0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,232
.L_45aed1:

            mov RAX,QWORD PTR [RSP+288]
            mov R13,QWORD PTR [RSP+296]
            mov R15,QWORD PTR [RSP+304]
            mov QWORD PTR [RSP+56],R8
            mov QWORD PTR [RSP+40],R9
            mov R8,QWORD PTR [RSP+312]
            mov QWORD PTR [RSP+48],RAX
            mov R9,QWORD PTR [RSP+320]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            cmp QWORD PTR [R13],R15
            mov QWORD PTR [RSP+32],RDI
            mov DWORD PTR [RSP+28],EDX
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+16],R8
            mov QWORD PTR [RSP+8],R9
            ja .L_45b0b8

            lea RBX,QWORD PTR [RSP+144]
            lea RBP,QWORD PTR [RSP+80]
            lea R12,QWORD PTR [RSP+112]
            mov R14,RSI
            mov RDI,RBX
            call .L_454800

            mov RDI,RBP
            call .L_456790

            mov RDI,R12
            call .L_456790

            mov R9,QWORD PTR [RSP+8]
            mov R8,QWORD PTR [RSP+16]
            mov RCX,RBX
            mov RSI,QWORD PTR [RSP]
            mov RDX,RBP
            mov RDI,R14
            call .L_456070

            test EAX,EAX
            je .L_45afd0
.L_45af89:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_454880

            mov RDI,RBP
            call .L_4567b0

            mov RDI,R12
            call .L_4567b0

            mov EAX,DWORD PTR [RSP]
.L_45afa7:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_45b0c2

            add RSP,232
.L_45afc5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_45afd0:

            push R12
            push QWORD PTR [RSP+56]
            mov R8,RBX
            mov R9,QWORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+16]
            mov RSI,R14
            mov EDX,DWORD PTR [RSP+44]
            mov RDI,QWORD PTR [RSP+48]
            call .L_45acd0

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_45af89

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,R12
            mov RDI,R12
            call .L_457a50

            test EAX,EAX
            jne .L_45af89

            mov RDX,R12
            mov RSI,RBP
            mov RDI,R12
            call .L_4578f0

            test EAX,EAX
            jne .L_45af89

            lea RDX,QWORD PTR [R14+152]
            mov RSI,R12
            mov RDI,R12
            call .L_458a80

            test EAX,EAX
            jne .L_45af89

            mov R8,QWORD PTR [R13]
            mov EDX,DWORD PTR [RSP+28]
            lea RCX,QWORD PTR [RSP+72]
            mov R9,R15
            mov RSI,RBX
            mov RDI,R14
            sub R9,R8
            call .L_455a20

            test EAX,EAX
            jne .L_45af89

            mov RAX,QWORD PTR [RSP+72]
            add QWORD PTR [R13],RAX
            mov RDI,R12
            call .L_456e70

            mov RCX,QWORD PTR [R13]
            mov RSI,RAX
            mov QWORD PTR [RSP+72],RAX
            mov EAX,4294947072
            cmp RCX,R15
            ja .L_45af89

            mov RDX,R15
            lea RAX,QWORD PTR [RSI+1]
            sub RDX,RCX
            cmp RDX,RAX
            jb .L_45b0ab

            cmp RSI,255
            jbe .L_45b0c7
.L_45b0ab:

            mov EAX,4294947072
            jmp .L_45af89
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45b0b8:

            mov EAX,4294947072
            jmp .L_45afa7
.L_45b0c2:

            call __stack_chk_fail@PLT
.L_45b0c7:

            lea RAX,QWORD PTR [RCX+1]
            mov RDI,R12
            mov QWORD PTR [R13],RAX
            mov BYTE PTR [RCX],SIL
            mov RDX,QWORD PTR [RSP+72]
            mov RSI,QWORD PTR [R13]
            call .L_456f80

            test EAX,EAX
            jne .L_45af89

            mov RDX,QWORD PTR [RSP+72]
            add QWORD PTR [R13],RDX
            jmp .L_45af89
.L_45b0f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b100:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            mov R14,RDX
            sub RSP,56
.L_45b11a:

            lea RBX,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],R8
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDI,RBX
            call .L_456790

            mov ESI,1
            mov RDI,RBX
            call .L_456c90

            test EAX,EAX
            mov EBP,EAX
            je .L_45b180
.L_45b14f:

            mov RDI,RBX
            call .L_4567b0

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_45b1ba

            add RSP,56
.L_45b16d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b180:

            mov R9,R15
            mov R8,RBX
            mov RCX,R14
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_455f80

            test EAX,EAX
            mov EBP,EAX
            jne .L_45b14f

            mov R9,QWORD PTR [RSP+8]
            mov R8,RBX
            mov RCX,R12
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_455f80

            mov EBP,EAX
            jmp .L_45b14f
.L_45b1ba:

            call __stack_chk_fail@PLT
.L_45b1bf:

            nop
.L_45b1c0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RCX
            mov RBP,R8
            sub RSP,56
.L_45b1da:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],ESI
            mov QWORD PTR [RSP],R9
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov R14,QWORD PTR [RSP+112]
            call .L_456790

            mov R9,QWORD PTR [RSP]
            mov ESI,16
            mov RDI,RBX
            mov RCX,R14
            mov RDX,R9
            call .L_459af0

            test EAX,EAX
            je .L_45b250
.L_45b21f:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_4567b0

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP]
            jne .L_45b2a7

            add RSP,56
.L_45b241:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45b250:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_457a50

            test EAX,EAX
            jne .L_45b21f

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBX
            call .L_457870

            test EAX,EAX
            jne .L_45b21f

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            call .L_457a50

            test EAX,EAX
            jne .L_45b21f

            mov R14D,DWORD PTR [RSP+12]
            mov RDX,RBP
            mov RSI,R13
            imul R14D,DWORD PTR [R13]
            mov RDI,R13
            mov DWORD PTR [R13],R14D
            call .L_458a80

            jmp .L_45b21f
.L_45b2a7:

            call __stack_chk_fail@PLT
.L_45b2ac:

            nop
            nop
            nop
            nop
.L_45b2b0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,296
.L_45b2c1:

            mov RBP,QWORD PTR [RSP+352]
            mov RBX,QWORD PTR [RSP+360]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+8],RDI
            mov DWORD PTR [RSP+20],EDX
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RSP+24],R9
            cmp RAX,RBX
            ja .L_45b4d0

            mov R13,RSI
            mov R15,RCX
            mov RCX,RBX
            sub RCX,RAX
            mov RDX,RBP
            mov RSI,R8
            mov RDI,R13
            mov R12,R8
            call .L_4559e0

            test EAX,EAX
            je .L_45b350
.L_45b320:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_45b4ea

            add RSP,296
.L_45b33e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b350:

            mov RDI,R12
            call .L_455740

            test EAX,EAX
            jne .L_45b4e0

            lea R14,QWORD PTR [RSP+128]
            mov RDI,R14
            call .L_454800

            lea RAX,QWORD PTR [RSP+208]
            mov RDI,RAX
            mov QWORD PTR [RSP+48],RAX
            call .L_454800

            lea RDI,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+32],RDI
            call .L_456790

            lea RAX,QWORD PTR [RSP+96]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_456790

            mov RAX,QWORD PTR [RBP]
            cmp RBX,RAX
            jb .L_45b4d0

            mov RCX,RBX
            mov RDX,RBP
            mov RSI,R14
            sub RCX,RAX
            mov RDI,R13
            call .L_4559e0

            test EAX,EAX
            jne .L_45b488

            mov RAX,QWORD PTR [RBP]
            cmp RBX,RAX
            jb .L_45b4c0

            cmp RAX,RBX
            je .L_45b4c0

            lea RSI,QWORD PTR [RAX+1]
            cmp RBX,RSI
            mov QWORD PTR [RBP],RSI
            jb .L_45b4c0

            movzx ECX,BYTE PTR [RAX]
            sub RBX,RSI
            cmp RCX,RBX
            ja .L_45b4c0

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,RCX
            mov QWORD PTR [RSP+56],RCX
            call .L_456e80

            test EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            jne .L_45b488

            add QWORD PTR [RBP],RCX
            push QWORD PTR [RSP+40]
.L_45b428:

            mov RCX,R15
            push QWORD PTR [RSP+32]
            mov EDX,DWORD PTR [RSP+36]
            mov R9,R12
            mov RDI,QWORD PTR [RSP+24]
            mov R8,R14
            mov RSI,R13
            call .L_45acd0

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_45b488

            mov R8,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+40]
            mov R9,R15
            mov RSI,QWORD PTR [RSP+48]
            mov RCX,R12
            mov RDI,R13
            call .L_455f80

            test EAX,EAX
            jne .L_45b488

            mov RDI,QWORD PTR [RSP+48]
            mov RSI,R14
            call .L_455760

            test EAX,EAX
            je .L_45b488

            mov EAX,4294947328
            nop
            nop
            nop
            nop
            nop
.L_45b488:

            mov RDI,R14
            mov DWORD PTR [RSP+8],EAX
            call .L_454880

            mov RDI,QWORD PTR [RSP+48]
            call .L_454880

            mov RDI,QWORD PTR [RSP+32]
            call .L_4567b0

            mov RDI,QWORD PTR [RSP+40]
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_45b320
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45b4c0:

            mov EAX,4294946944
            jmp .L_45b488
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b4d0:

            mov EAX,4294946944
            jmp .L_45b320
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45b4e0:

            mov EAX,4294947712
            jmp .L_45b320
.L_45b4ea:

            call __stack_chk_fail@PLT
.L_45b4ef:

            nop
.L_45b4f0:

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            call .L_4548a0

            lea RDI,QWORD PTR [RBX+264]
            call .L_454880

            lea RDI,QWORD PTR [RBX+336]
            call .L_454880

            lea RDI,QWORD PTR [RBX+408]
            call .L_454880

            lea RDI,QWORD PTR [RBX+480]
            call .L_454880

            lea RDI,QWORD PTR [RBX+552]
            call .L_454880

            lea RDI,QWORD PTR [RBX+624]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+648]
            call .L_4567b0

            lea RDI,QWORD PTR [RBX+672]
            pop RBX

            jmp .L_4567b0
.L_45b565:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b570:

            test RDI,RDI
            je .L_45b600

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            call .L_454820

            lea RDI,QWORD PTR [RBX+264]
            mov DWORD PTR [RBX+260],0
            call .L_454800

            lea RDI,QWORD PTR [RBX+336]
            call .L_454800

            lea RDI,QWORD PTR [RBX+408]
            call .L_454800

            lea RDI,QWORD PTR [RBX+480]
            call .L_454800

            lea RDI,QWORD PTR [RBX+552]
            call .L_454800

            lea RDI,QWORD PTR [RBX+624]
            call .L_456790

            lea RDI,QWORD PTR [RBX+648]
            call .L_456790

            lea RDI,QWORD PTR [RBX+672]
            pop RBX

            jmp .L_456790
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b600:

            ret 
.L_45b602:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b610:

            test RDI,RDI
            je .L_45b620

            jmp .L_45b4f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45b620:

            ret 
.L_45b622:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b630:

            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,R8
            mov R12,R9
            sub RSP,24
            mov DWORD PTR [RDI+256],ESI
            mov EDI,EDX
            call .L_443660

            test RAX,RAX
            mov QWORD PTR [RBX],RAX
            je .L_45b6b8

            lea RDI,QWORD PTR [RBX+8]
            mov ESI,R13D
            call .L_45c570

            test EAX,EAX
            je .L_45b690
.L_45b66b:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_45b4f0

            mov EAX,DWORD PTR [RSP+12]
.L_45b67b:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b690:

            lea RDI,QWORD PTR [RBX+672]
            mov RDX,R12
            mov RSI,RBP
            call .L_456e80

            test EAX,EAX
            jne .L_45b66b

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45b6b8:

            mov EAX,4294946688
            jmp .L_45b67b
.L_45b6bf:

            nop
.L_45b6c0:

            cmp QWORD PTR [RDI],0
            je .L_45b6e0

            mov EAX,DWORD PTR [RDI+8]
            test EAX,EAX
            je .L_45b6e0

            cmp QWORD PTR [RDI+688],1
            sbb EAX,EAX
            and EAX,4294946944
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45b6e0:

            mov EAX,4294946944
            ret 
.L_45b6e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b6f0:

            push R15
            push R14
            lea RCX,QWORD PTR [RIP+.L_676c90]
            push R13
            push R12
            lea R15,QWORD PTR [RDI+88]
            push RBP
            push RBX
            lea RBP,QWORD PTR [RSI+RDX*1]
            lea R13,QWORD PTR [RDI+8]
            lea R8,QWORD PTR [RDI+408]
            mov RBX,RDI
            sub RSP,40
            mov R14D,DWORD PTR [RDI+260]
            mov R12,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,1
            sub EAX,DWORD PTR [RDI+256]
            mov QWORD PTR [RSP+16],RSI
            push RBP
            mov RSI,R13
            mov RDI,R12
            mov EDX,R14D
            lea R11,QWORD PTR [RSP+24]
            mov R10,QWORD PTR [RCX+RAX*8]
            mov RCX,R15
            push R11
            mov R9,R10
            mov QWORD PTR [RSP+24],R11
            mov QWORD PTR [RSP+16],R10
            call .L_45b2b0

            pop RSI
            test EAX,EAX
            pop RDI
            mov R10,QWORD PTR [RSP]
            mov R11,QWORD PTR [RSP+8]
            je .L_45b7a0
.L_45b77e:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_45b7d3

            add RSP,40
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45b7a0:

            push RBP
            lea R8,QWORD PTR [RBX+480]
            push R11
            mov RCX,R15
            mov EDX,R14D
            mov R9,R10
            mov RSI,R13
            mov RDI,R12
            call .L_45b2b0

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_45b77e

            cmp RBP,QWORD PTR [RSP+16]
            mov EDX,4294946944
            cmovne EAX,EDX
            jmp .L_45b77e
.L_45b7d3:

            call __stack_chk_fail@PLT
.L_45b7d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45b7e0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_45b7ee:

            mov QWORD PTR [RSP+24],RCX
            mov ECX,DWORD PTR [RDI+256]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RIP+.L_676c90]
            add RDX,RSI
            mov QWORD PTR [RSP+72],RSI
            mov QWORD PTR [RSP],RDX
            mov RAX,QWORD PTR [RAX+RCX*8]
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RDI+88]
            mov QWORD PTR [RSP+16],RAX
            mov EAX,DWORD PTR [RDI+260]
            mov DWORD PTR [RSP+12],EAX
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [RSP+40],RAX
            jb .L_45b9e0

            lea R14,QWORD PTR [RDI+264]
            lea RBP,QWORD PTR [RDI+8]
            lea RDX,QWORD PTR [RDI+624]
            mov RBX,RSI
            lea RSI,QWORD PTR [RDI+88]
            mov R15,RDI
            mov RCX,R14
            mov RDI,RBP
            mov R12,R8
            mov R13,R9
            call .L_456070

            test EAX,EAX
            je .L_45b8a0
.L_45b877:

            mov RSI,QWORD PTR [RSP+88]
            xor RSI,QWORD PTR FS:[40]
            jne .L_45b9ea

            add RSP,104
.L_45b88f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45b8a0:

            mov R8,QWORD PTR [RSP+72]
            mov R9,QWORD PTR [RSP]
            lea RAX,QWORD PTR [RSP+80]
            mov EDX,DWORD PTR [RSP+12]
            mov RSI,R14
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+48],RAX
            sub R9,R8
            call .L_455a20

            test EAX,EAX
            jne .L_45b877

            mov RAX,QWORD PTR [RSP+80]
            add QWORD PTR [RSP+72],RAX
            sub RSP,8
            push R13
            push R12
            lea R8,QWORD PTR [R15+624]
            push QWORD PTR [RSP+24]
            lea RCX,QWORD PTR [R15+88]
            mov R9,R14
            mov RSI,RBP
            lea RDI,QWORD PTR [RSP+104]
            mov QWORD PTR [RSP+88],RDI
            push RDI
            push QWORD PTR [RSP+72]
            mov EDX,DWORD PTR [RSP+60]
            mov RDI,QWORD PTR [RSP+88]
            call .L_45aec0

            add RSP,48
.L_45b914:

            test EAX,EAX
            jne .L_45b877

            mov RAX,QWORD PTR [RSP]
            cmp RAX,QWORD PTR [RSP+72]
            jb .L_45b9e0

            lea R14,QWORD PTR [R15+336]
            mov RSI,QWORD PTR [RSP+16]
            add R15,648
            mov R9,R13
            mov R8,R12
            mov RDX,R15
            mov RCX,R14
            mov RDI,RBP
            call .L_456070

            test EAX,EAX
            jne .L_45b877

            mov R8,QWORD PTR [RSP+72]
            mov R9,QWORD PTR [RSP]
            mov RSI,R14
            mov RCX,QWORD PTR [RSP+48]
            mov EDX,DWORD PTR [RSP+12]
            mov RDI,RBP
            sub R9,R8
            call .L_455a20

            test EAX,EAX
            jne .L_45b877

            mov RAX,QWORD PTR [RSP+80]
            add QWORD PTR [RSP+72],RAX
            sub RSP,8
.L_45b990:

            push R13
            push R12
            mov R9,R14
            push QWORD PTR [RSP+24]
            push QWORD PTR [RSP+88]
            mov R8,R15
            push QWORD PTR [RSP+72]
            mov RSI,RBP
            mov RCX,QWORD PTR [RSP+64]
            mov EDX,DWORD PTR [RSP+60]
            mov RDI,QWORD PTR [RSP+88]
            call .L_45aec0

            add RSP,48
            test EAX,EAX
            jne .L_45b877

            mov RDX,QWORD PTR [RSP+72]
            mov RDI,QWORD PTR [RSP+24]
            sub RDX,RBX
            mov QWORD PTR [RDI],RDX
            jmp .L_45b877
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45b9e0:

            mov EAX,4294947072
            jmp .L_45b877
.L_45b9ea:

            call __stack_chk_fail@PLT
.L_45b9ef:

            nop
.L_45b9f0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RDI
            lea R14,QWORD PTR [RBX+8]
            sub RSP,376
.L_45ba0e:

            lea R12,QWORD PTR [RSP+112]
            lea RBP,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+24],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+360],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_454820

            mov RDI,RBP
            call .L_454800

            lea RCX,QWORD PTR [RBX+336]
            lea RDX,QWORD PTR [RBX+264]
            lea R8,QWORD PTR [RBX+408]
            mov RSI,RBP
            mov RDI,R14
            call .L_45b100

            test EAX,EAX
            jne .L_45babd

            mov EDX,DWORD PTR [RBX+256]
            lea RCX,QWORD PTR [RSP+24]
            test EDX,EDX
            je .L_45bb00
.L_45ba77:

            add R13,R15
            mov EAX,1
            mov RDI,QWORD PTR [RBX]
            push R13
.L_45ba84:

            push RCX
            lea RCX,QWORD PTR [RIP+.L_676c90]
            sub EAX,EDX
            mov EDX,DWORD PTR [RBX+260]
            lea R8,QWORD PTR [RBX+552]
            mov R9,QWORD PTR [RCX+RAX*8]
            mov RSI,R14
            mov RCX,RBP
            call .L_45b2b0

            test EAX,EAX
            pop RDX
            pop RCX
.L_45baae:

            jne .L_45babd

            cmp QWORD PTR [RSP+24],R13
            mov EDX,4294946944
            cmovne EAX,EDX
.L_45babd:

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_4548a0

            mov RDI,RBP
            call .L_454880

            mov RSI,QWORD PTR [RSP+360]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_45bb37

            add RSP,376
.L_45baef:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45bb00:

            mov RDX,R13
            mov RSI,RCX
            mov RDI,R12
            mov QWORD PTR [RSP+8],RCX
            call .L_455a60

            test EAX,EAX
            jne .L_45babd

            mov EAX,DWORD PTR [RBX+8]
            cmp DWORD PTR [RSP+112],EAX
            jne .L_45bb30

            mov EDX,DWORD PTR [RBX+256]
            mov RCX,QWORD PTR [RSP+8]
            jmp .L_45ba77
.L_45bb30:

            mov EAX,4294947200
            jmp .L_45babd
.L_45bb37:

            call __stack_chk_fail@PLT
.L_45bb3c:

            nop
            nop
            nop
            nop
.L_45bb40:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea R15,QWORD PTR [R14+8]
            sub RSP,248
.L_45bb5b:

            lea RBX,QWORD PTR [RSP+80]
            lea R12,QWORD PTR [RSP+160]
            lea RBP,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP],R8
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP+32],RSI
            call .L_454800

            mov RDI,R12
            call .L_454800

            mov RDI,RBP
            call .L_456790

            lea RCX,QWORD PTR [R14+480]
            lea RDX,QWORD PTR [R14+408]
            lea R8,QWORD PTR [R14+264]
            mov RSI,RBX
            mov RDI,R15
            call .L_45b100

            test EAX,EAX
            je .L_45bc20
.L_45bbd4:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_454880

            mov RDI,R12
            call .L_454880

            mov RDI,RBP
            call .L_4567b0

            mov RSI,QWORD PTR [RSP+232]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP]
            jne .L_45bd8b

            add RSP,248
.L_45bc10:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45bc20:

            sub RSP,8
            lea RCX,QWORD PTR [R14+672]
            lea RDX,QWORD PTR [R14+648]
            push QWORD PTR [RSP+16]
            mov R9,QWORD PTR [RSP+16]
            lea R8,QWORD PTR [R14+160]
            mov ESI,1
            mov RDI,RBP
            call .L_45b1c0

            test EAX,EAX
            pop RDX
            pop RCX
.L_45bc53:

            jne .L_45bbd4

            mov R9,QWORD PTR [RSP+8]
            mov R8,QWORD PTR [RSP]
            mov RCX,RBX
            mov RDX,RBP
            mov RSI,R12
            mov RDI,R15
            call .L_455e10

            test EAX,EAX
            jne .L_45bbd4

            mov R11,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+32]
            add R11,R13
            cmp DWORD PTR [R14+256],1
            je .L_45bd40
.L_45bc96:

            cmp R11,R8
            jb .L_45bd81

            mov EDX,DWORD PTR [R14+260]
            mov R9,R11
            lea RCX,QWORD PTR [RSP+40]
            sub R9,R8
            mov RSI,R12
            mov RDI,R15
            mov QWORD PTR [RSP+16],R11
            call .L_455a20

            test EAX,EAX
            mov R11,QWORD PTR [RSP+16]
            jne .L_45bbd4

            mov RAX,QWORD PTR [RSP+40]
            add QWORD PTR [RSP+32],RAX
            sub RSP,8
.L_45bcdc:

            push QWORD PTR [RSP+16]
            push QWORD PTR [RSP+16]
            mov R9,R12
            push R11
            mov ECX,DWORD PTR [R14+256]
            mov R8,RBP
            mov EDX,DWORD PTR [R14+260]
            mov RSI,R15
            lea RAX,QWORD PTR [RSP+64]
            mov RDI,QWORD PTR [R14]
            push RAX
            lea RAX,QWORD PTR [RIP+.L_676c90]
            push QWORD PTR [RAX+RCX*8]
            mov RCX,RBX
            call .L_45aec0

            add RSP,48
            test EAX,EAX
            jne .L_45bbd4

            mov RDX,QWORD PTR [RSP+32]
            mov RSI,QWORD PTR [RSP+24]
            sub RDX,R13
            mov QWORD PTR [RSI],RDX
            jmp .L_45bbd4
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45bd40:

            cmp R11,R8
            jb .L_45bd81

            mov RCX,R11
            lea RSI,QWORD PTR [RSP+40]
            mov RDX,R8
            sub RCX,R8
            mov RDI,R15
            mov QWORD PTR [RSP+16],R11
            call .L_455ac0

            test EAX,EAX
            jne .L_45bbd4

            mov R8,QWORD PTR [RSP+40]
            add R8,QWORD PTR [RSP+32]
            mov R11,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+32],R8
            jmp .L_45bc96
.L_45bd81:

            mov EAX,4294947072
            jmp .L_45bbd4
.L_45bd8b:

            call __stack_chk_fail@PLT
.L_45bd90:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDX
            mov R14,R8
            sub RSP,232
.L_45bdb0:

            mov RDI,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+8],RSI
            call .L_443c60

            movzx EAX,AL
            cmp RAX,RBX
            mov QWORD PTR [RBP],RAX
            ja .L_45bf48

            lea R13,QWORD PTR [RSP+96]
            lea RBP,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+64]
            mov RDI,R13
            call .L_454800

            mov RDI,RBP
            call .L_456790

            mov RDI,RBX
            call .L_456790

            mov ESI,1
            mov RDI,RBX
            call .L_456c90

            test EAX,EAX
            je .L_45be68
.L_45be18:

            mov RDI,R13
            mov DWORD PTR [RSP+8],EAX
            call .L_454880

            mov RDI,RBP
            call .L_4567b0

            mov RDI,RBX
            call .L_4567b0

            mov EAX,DWORD PTR [RSP+8]
.L_45be38:

            mov RDX,QWORD PTR [RSP+216]
            xor RDX,QWORD PTR FS:[40]
            jne .L_45bf52

            add RSP,232
.L_45be56:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45be68:

            lea RAX,QWORD PTR [R12+648]
            sub RSP,8
            lea RCX,QWORD PTR [R12+672]
            lea R8,QWORD PTR [R12+160]
            mov R9,R14
            mov ESI,4294967295
            mov QWORD PTR [RSP+24],RAX
            push R15
            mov RDX,RAX
            mov RDI,RBP
            call .L_45b1c0

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_45be18

            lea RAX,QWORD PTR [R12+8]
            lea RCX,QWORD PTR [R12+552]
            lea R9,QWORD PTR [R12+480]
            mov R8,RBP
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_455f80

            test EAX,EAX
            jne .L_45be18

            mov RDX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+24]
            mov R9,R15
            mov R8,R14
            mov RCX,R13
            mov RSI,R13
            call .L_455e10

            test EAX,EAX
            jne .L_45be18

            mov RAX,QWORD PTR [R12+184]
            lea R14,QWORD PTR [RSP+176]
            mov RDI,R13
            mov RSI,R14
            lea R15,QWORD PTR [RAX+7]
            shr R15,3
            mov RDX,R15
            call .L_456f80

            test EAX,EAX
            jne .L_45be18

            mov RCX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [R12]
            mov RDX,R15
            mov RSI,R14
            call .L_443870

            jmp .L_45be18
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45bf48:

            mov EAX,4294947072
            jmp .L_45be38
.L_45bf52:

            call __stack_chk_fail@PLT
.L_45bf57:
          .string "client"
.L_45bf5e:
          .string "server"
# WARNING: found overlapping blocks at address 5bd32

.L_45bf65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45bf70:

            push R15
            push R14
            mov ESI,8
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            pxor XMM0,XMM0
            sub RSP,136
.L_45bf8d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],5
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+64],RAX
            mov QWORD PTR [RSP+112],0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_456820

            test EAX,EAX
            mov DWORD PTR [RSP+20],EAX
            jne .L_45c490

            mov RAX,QWORD PTR [RBX+16]
            xor R12D,R12D
            mov R14,QWORD PTR [RAX+32]
            mov R8,QWORD PTR [RAX+40]
            mov R13,QWORD PTR [RAX+48]
            mov R9,QWORD PTR [RAX+56]
            mov ECX,R14D
            add ECX,DWORD PTR [RAX]
            mov RDI,R14
            mov R15,R8
            mov DWORD PTR [RSP+32],R14D
            mov DWORD PTR [RSP+4],R9D
            setb R12B
            shr RDI,32
            xor EDX,EDX
            add ECX,EDI
            mov QWORD PTR [RSP+8],RDI
            mov ESI,EDI
            setb DL
            mov EBP,ECX
            shr R15,32
            sub EBP,R15D
            mov RDI,R13
            add EDX,R12D
            mov R11D,EBP
            shr RDI,32
            mov DWORD PTR [RSP+36],R15D
            sub R11D,R13D
            mov DWORD PTR [RSP+24],EDI
            mov R10D,R11D
            sub R10D,EDI
            cmp R15D,ECX
            seta CL
            sub EDX,ECX
            cmp R13D,EBP
            seta CL
            sub EDX,ECX
            cmp EDI,R11D
            movabs R11,-4294967296
            seta CL
            sub EDX,ECX
            cmp R9D,R10D
            seta CL
            and R11,QWORD PTR [RAX]
            sub R10D,R9D
            sub EDX,ECX
            movsx ECX,DL
            mov EBP,ECX
            or R11,R10
            mov R10,R11
            shr R10,32
            add EBP,R10D
            setb BYTE PTR [RSP+28]
            test DL,DL
            js .L_45c4d8
.L_45c095:

            xor EDX,EDX
            add ESI,EBP
            mov RBP,R9
            setb DL
            mov R11D,R11D
            mov ECX,R8D
            mov DWORD PTR [RSP+44],EDX
            xor EDX,EDX
            add ESI,R8D
            mov R10D,ESI
            setb DL
            add DL,BYTE PTR [RSP+44]
            sub R10D,R13D
            shr RBP,32
            mov R12D,R10D
            mov DWORD PTR [RSP+40],R10D
            mov DWORD PTR [RSP+16],EBP
            sub R12D,EDI
            mov R10D,R12D
            sub R10D,R9D
            cmp R13D,ESI
            seta SIL
            sub EDX,ESI
            cmp EDI,DWORD PTR [RSP+40]
            seta SIL
            sub EDX,ESI
            cmp R9D,R12D
            movzx R12D,BYTE PTR [RSP+28]
            seta SIL
            sub EDX,ESI
            cmp EBP,R10D
            seta SIL
            sub R10D,EBP
            sub EDX,ESI
            shl R10,32
            or R11,R10
            add R12D,EDX
            mov R10,QWORD PTR [RAX+8]
            movsx EDX,R12B
            mov QWORD PTR [RAX],R11
            mov ESI,EDX
            add ESI,R10D
            setb R11B
            test R12B,R12B
            js .L_45c4f0
.L_45c129:

            add ECX,ESI
            setb SIL
            xor EDX,EDX
            add ECX,DWORD PTR [RSP+36]
            movzx ESI,SIL
            mov DWORD PTR [RSP+28],ESI
            mov R12D,ECX
            setb DL
            add DL,BYTE PTR [RSP+28]
            sub R12D,EDI
            mov ESI,R12D
            sub ESI,R9D
            cmp EDI,ECX
            seta CL
            sub EDX,ECX
            cmp R9D,R12D
            seta CL
            sub EDX,ECX
            cmp EBP,ESI
            seta CL
            sub ESI,EBP
            sub EDX,ECX
            add R11D,EDX
            movabs RDX,-4294967296
            and R10,RDX
            movsx EDX,R11B
            or RSI,R10
            mov ECX,EDX
            mov R9,RSI
            shr R9,32
            add ECX,R9D
            setb R10B
            test R11B,R11B
            js .L_45c508
.L_45c198:

            xor EDX,EDX
            add ECX,R15D
            mov ESI,ESI
            setb DL
            add ECX,R15D
            adc DL,0
            add ECX,R13D
            adc DL,0
            add ECX,R13D
            adc DL,0
            xor R12D,R12D
            add ECX,DWORD PTR [RSP+24]
            mov R11D,ECX
            setb R12B
            sub R11D,EBP
            add EDX,R12D
            mov R9D,R11D
            sub R9D,R14D
            cmp EBP,ECX
            seta CL
            sub EDX,ECX
            cmp R14D,R11D
            mov R11,QWORD PTR [RSP+8]
            seta CL
            sub EDX,ECX
            cmp R11D,R9D
            seta CL
            sub R9D,R11D
            sub EDX,ECX
            shl R9,32
            add R10D,EDX
            or RSI,R9
            mov R9,QWORD PTR [RAX+16]
            movsx ECX,R10B
            mov QWORD PTR [RAX+8],RSI
            mov EDX,ECX
            add EDX,R9D
            setb R11B
            test R10B,R10B
            js .L_45c520
.L_45c215:

            xor ESI,ESI
            add EDX,R13D
            mov RBP,QWORD PTR [RSP+8]
            setb SIL
            add EDX,R13D
            adc SIL,0
            add EDX,EDI
            adc SIL,0
            add EDX,EDI
            adc SIL,0
            xor ECX,ECX
            add EDX,DWORD PTR [RSP+4]
            setb CL
            mov R10D,EDX
            sub R10D,EBP
            add ECX,ESI
            cmp EBP,EDX
            seta DL
            movabs RSI,-4294967296
            sub ECX,EDX
            cmp R8D,R10D
            seta DL
            and RSI,R9
            sub R10D,R8D
            sub ECX,EDX
            or RSI,R10
            add ECX,R11D
            mov R11,RSI
            movsx R10D,CL
            shr R11,32
            mov EDX,R10D
            add EDX,R11D
            setb R9B
            test CL,CL
            js .L_45c538
.L_45c289:

            mov ECX,DWORD PTR [RSP+4]
            xor R11D,R11D
            add EDX,EDI
            setb R11B
            add EDX,EDI
            mov ESI,ESI
            adc R11B,0
            add EDX,ECX
            adc R11B,0
            add EDX,ECX
            adc R11B,0
            xor ECX,ECX
            add EDX,DWORD PTR [RSP+16]
            setb CL
            mov R10D,EDX
            sub R10D,R8D
            add ECX,R11D
            cmp R8D,EDX
            seta DL
            sub ECX,EDX
            cmp R15D,R10D
            seta DL
            sub R10D,R15D
            sub ECX,EDX
            shl R10,32
            add R9D,ECX
            or RSI,R10
            mov RCX,QWORD PTR [RAX+24]
            mov QWORD PTR [RAX+16],RSI
            movsx ESI,R9B
            mov EDX,ESI
            add EDX,ECX
            setb R10B
            test R9B,R9B
            js .L_45c550
.L_45c2f6:

            mov R9D,DWORD PTR [RSP+4]
            mov R11D,DWORD PTR [RSP+16]
            xor ESI,ESI
            add EDX,R9D
            setb SIL
            add EDX,R9D
            adc SIL,0
            add EDX,R11D
            adc SIL,0
            add EDX,R11D
            adc SIL,0
            add EDX,R9D
            adc SIL,0
            xor R9D,R9D
            add EDX,DWORD PTR [RSP+24]
            setb R9B
            mov R11D,EDX
            add ESI,R9D
            mov R9,QWORD PTR [RSP+8]
            sub R11D,R14D
            cmp R14D,EDX
            seta DL
            sub ESI,EDX
            cmp R9D,R11D
            seta DL
            sub R11D,R9D
            sub ESI,EDX
            movabs RDX,-4294967296
            and RCX,RDX
            add R10D,ESI
            or RCX,R11
            movsx ESI,R10B
            mov R9,RCX
            mov EDX,ESI
            shr R9,32
            add EDX,R9D
            setb R11B
            test R10B,R10B
            js .L_45c4c0
.L_45c381:

            mov ESI,DWORD PTR [RSP+16]
            xor R10D,R10D
            mov ECX,ECX
            add EDX,ESI
            setb R10B
            add EDX,ESI
            adc R10B,0
            add EDX,ESI
            adc R10B,0
            xor ESI,ESI
            add EDX,DWORD PTR [RSP+32]
            mov R12D,EDX
            setb SIL
            sub R12D,R8D
            add ESI,R10D
            mov EBP,R12D
            sub EBP,R15D
            mov R9D,EBP
            sub R9D,R13D
            cmp R8D,EDX
            seta DL
            sub ESI,EDX
            cmp R15D,R12D
            seta DL
            sub ESI,EDX
            cmp R13D,EBP
            seta DL
            sub ESI,EDX
            cmp EDI,R9D
            seta DL
            sub R9D,EDI
            movabs RDI,-4294967296
            shl R9,32
            sub ESI,EDX
            mov RDX,R14
            or RCX,R9
            and RDX,RDI
            add R11B,SIL
            mov QWORD PTR [RAX+24],RCX
            mov ECX,0
            cmovns ECX,R11D
            movsx RCX,CL
            or RDX,RCX
            mov QWORD PTR [RAX+32],RDX
            mov EDX,8
            nop
            nop
            nop
.L_45c418:

            mov RSI,QWORD PTR [RBX+8]
            add RDX,1
            lea RCX,QWORD PTR [RSI+RSI*1]
            cmp RCX,RDX
            jbe .L_45c450

            mov RCX,RDX
            shr RCX,1
            test DL,1
            lea RSI,QWORD PTR [RAX+RCX*8]
            mov RCX,QWORD PTR [RSI]
            je .L_45c448

            and ECX,4294967295
            mov QWORD PTR [RSI],RCX
            jmp .L_45c418
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45c448:

            and RCX,RDI
            mov QWORD PTR [RSI],RCX
            jmp .L_45c418
.L_45c450:

            test R11B,R11B
            jns .L_45c490

            mov RDX,QWORD PTR [RSP+64]
            mov RCX,QWORD PTR [RSP+56]
            movsx R11D,R11B
            neg R11D
            lea RSI,QWORD PTR [RSP+48]
            mov RDI,RBX
            movsxd RAX,R11D
            mov QWORD PTR [RDX+RCX*8-8],RAX
            mov RDX,RBX
            call .L_457730

            test EAX,EAX
            jne .L_45c490

            mov DWORD PTR [RBX],4294967295
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c490:

            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+20]
            jne .L_45c560

            add RSP,136
.L_45c4af:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45c4c0:

            neg ESI
            cmp ESI,R9D
            seta R11B
            neg R11D
            jmp .L_45c381
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c4d8:

            neg ECX
            cmp ECX,R10D
            seta R12B
            neg R12D
            mov BYTE PTR [RSP+28],R12B
            jmp .L_45c095
          .byte 0x66
          .byte 0x90
.L_45c4f0:

            neg EDX
            cmp EDX,R10D
            seta R11B
            neg R11D
            jmp .L_45c129
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c508:

            neg EDX
            cmp EDX,R9D
            seta R10B
            neg R10D
            jmp .L_45c198
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c520:

            neg ECX
            cmp ECX,R9D
            seta CL
            neg ECX
            mov R11D,ECX
            jmp .L_45c215
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45c538:

            neg R10D
            cmp R10D,R11D
            seta R9B
            neg R9D
            jmp .L_45c289
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45c550:

            neg ESI
            cmp ESI,ECX
            seta R10B
            neg R10D
            jmp .L_45c2f6
.L_45c560:

            call __stack_chk_fail@PLT
.L_45c565:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c570:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_45c57b:

            call .L_4548a0

            cmp EBP,3
            mov DWORD PTR [RBX],EBP
            jne .L_45c680

            lea RAX,QWORD PTR [RIP+.L_45bf70]
            lea RDI,QWORD PTR [RBX+8]
            mov DWORD PTR [RBX+8],1
            mov QWORD PTR [RBX+16],4
            mov DWORD PTR [RBX+56],1
            mov QWORD PTR [RBX+200],RAX
            lea RAX,QWORD PTR [RIP+.L_45c720]
            mov QWORD PTR [RBX+64],4
            mov DWORD PTR [RBX+152],1
            mov QWORD PTR [RBX+160],4
            mov QWORD PTR [RBX+24],RAX
            lea RAX,QWORD PTR [RIP+.L_45c700]
            mov DWORD PTR [RBX+80],1
            mov QWORD PTR [RBX+88],4
            mov DWORD PTR [RBX+104],1
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_45c6a0]
            mov QWORD PTR [RBX+112],4
            mov DWORD PTR [RBX+128],1
            mov QWORD PTR [RBX+136],1
            mov QWORD PTR [RBX+168],RAX
            lea RAX,QWORD PTR [RIP+.L_45c6e0]
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RIP+.L_45c6c0]
            mov QWORD PTR [RBX+120],RAX
            lea RAX,QWORD PTR [RIP+.L_677150]
            mov QWORD PTR [RBX+144],RAX
            call .L_456df0

            lea RDI,QWORD PTR [RBX+152]
            mov QWORD PTR [RBX+176],RAX
            call .L_456df0

            mov DWORD PTR [RBX+192],1
            mov QWORD PTR [RBX+184],RAX
            xor EAX,EAX
.L_45c676:

            add RSP,8
.L_45c67a:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45c680:

            mov RDI,RBX
            call .L_4548a0

            mov EAX,4294947200
            jmp .L_45c676
.L_45c68f:
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c6a0:
          .byte 0x51
          .byte 0x25
          .byte 0x63
          .byte 0xfc
          .byte 0xc2
          .byte 0xca
          .byte 0xb9
          .byte 0xf3
          .byte 0x84
          .byte 0x9e
          .byte 0x17
          .byte 0xa7
          .byte 0xad
          .byte 0xfa
          .byte 0xe6
          .byte 0xbc
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
.L_45c6c0:
          .byte 0xf5
          .byte 0x51
          .byte 0xbf
          .byte 0x37
          .byte 0x68
          .byte 0x40
          .byte 0xb6
          .byte 0xcb
          .byte 0xce
          .byte 0x5e
          .byte 0x31
          .byte 0x6b
          .byte 0x57
          .byte 0x33
          .byte 0xce
          .byte 0x2b
          .byte 0x16
          .byte 0x9e
          .byte 0xf
          .byte 0x7c
          .byte 0x4a
          .byte 0xeb
          .byte 0xe7
          .byte 0x8e
          .byte 0x9b
          .byte 0x7f
          .byte 0x1a
          .byte 0xfe
          .byte 0xe2
          .byte 0x42
          .byte 0xe3
          .byte 0x4f
.L_45c6e0:

            xchg ESI,EAX
            ret 55448

            cmp DWORD PTR [R9-348937996],R12D
            sub EAX,1996717441

            repne movsb 
          .byte 0x63
          .byte 0xe5
          .byte 0xe6
          .byte 0xbc
          .byte 0xf8
          .byte 0x47
          .byte 0x42
          .byte 0x2c
          .byte 0xe1
          .byte 0xf2
          .byte 0xd1
          .byte 0x17
          .byte 0x6b
.L_45c700:
          .byte 0x4b
          .byte 0x60
          .byte 0xd2
          .byte 0x27
          .byte 0x3e
          .byte 0x3c
          .byte 0xce
          .byte 0x3b
          .byte 0xf6
          .byte 0xb0
          .byte 0x53
          .byte 0xcc
          .byte 0xb0
          .byte 0x6
          .byte 0x1d
          .byte 0x65
          .byte 0xbc
          .byte 0x86
          .byte 0x98
          .byte 0x76
          .byte 0x55
          .byte 0xbd
          .byte 0xeb
          .byte 0xb3
          .byte 0xe7
          .byte 0x93
          .byte 0x3a
          .byte 0xaa
          .byte 0xd8
          .byte 0x35
          .byte 0xc6
          .byte 0x5a
.L_45c720:
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
.L_45c740:

            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [RIP+.L_676ca0]
            lea RDI,QWORD PTR [RIP+.L_45c888]
            sub RSP,8
            jmp .L_45c76e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c760:

            add RBX,48
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_45c788

            mov RDI,QWORD PTR [RBX+8]
.L_45c76e:

            mov RSI,RBP
            call strcmp@PLT

            test EAX,EAX
            jne .L_45c760

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45c788:

            xor EBX,EBX
            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_45c794:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c7a0:

            lea RAX,QWORD PTR [RIP+.L_45c8b0]
            ret 
.L_45c7a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c7b0:

            test RDI,RDI
            je .L_45c7b7

            jmp .L_45c740
.L_45c7b7:

            xor EAX,EAX
            ret 
.L_45c7ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_45c7c0:

            lea RAX,QWORD PTR [RIP+.L_676ca0]
            cmp EDI,49407
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_45c7d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c7e0:

            lea RDX,QWORD PTR [RIP+.L_45c888]
            lea RAX,QWORD PTR [RIP+.L_45c8a7]
            cmp EDI,49407
            cmove RAX,RDX
            ret 
.L_45c7f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c800:

            push RBX
            xor EBX,EBX
            test RDI,RDI
            je .L_45c814

            call .L_45c740

            test RAX,RAX
            je .L_45c814

            mov EBX,DWORD PTR [RAX]
.L_45c814:

            mov EAX,EBX
            pop RBX
            ret 
.L_45c818:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c820:

            mov ECX,DWORD PTR [RDI+24]
            xor EAX,EAX
            cmp ECX,10
            ja .L_45c851

            mov EDX,1
            mov EAX,1
            shl RDX,CL
            test DL,142
            jne .L_45c851

            test DH,6
            mov EAX,2
            jne .L_45c851

            xor EAX,EAX
            and EDX,16
            setne AL
            shl EAX,2
.L_45c851:

            ret 
.L_45c853:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45c860:

            mov EDX,DWORD PTR [RDI+24]
            cmp EDX,1
            jb .L_45c880

            cmp EDX,3
            mov EAX,1
            jbe .L_45c87c

            cmp EDX,4
            mov EAX,4
            jne .L_45c880
.L_45c87c:

            ret 
          .byte 0x66
          .byte 0x90
.L_45c880:

            xor EAX,EAX
            ret 
.L_45c883:
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45c888:
          .string "TLS-ECJPAKE-WITH-AES-128-CCM-8"
.L_45c8a7:
          .string "unknown"
.L_45c8af:
          .zero 1
.L_45c8b0:
          .byte 0xff
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c8c0:

            push RBP
            mov RBP,RSP
            push R15
            push R14
            push R13
            push R12
            push RBX
            sub RSP,88
.L_45c8d1:

            mov R9D,DWORD PTR [RDI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RBP-56],RAX
            xor EAX,EAX
            cmp R9D,16
            je .L_45d860

            cmp QWORD PTR [RDI+88],0
            mov R14,RDI
            je .L_45d860

            lea R8,QWORD PTR [RIP+.L_45e98a]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,3363
            mov ESI,2
            call .L_448ae0

            mov RDI,R14
            call .L_44d7c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_45cf50

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_45c948

            mov RAX,QWORD PTR [R14+88]
            cmp BYTE PTR [RAX+756],1
            je .L_45cf78
.L_45c948:

            mov R9D,DWORD PTR [R14+8]
            cmp R9D,15
            ja .L_45d830

            lea RCX,QWORD PTR [RIP+.L_45f4b4]
            mov EDX,R9D
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45c970:

            lea R8,QWORD PTR [RIP+.L_45e99b]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,719
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            cmp QWORD PTR [RAX+48],0
            je .L_45e8e2

            movzx EDX,BYTE PTR [RAX+150]
            mov DWORD PTR [R14+12],EDX
            movzx EDX,BYTE PTR [RAX+151]
            mov DWORD PTR [R14+16],EDX
            movzx EDI,BYTE PTR [RAX+148]
            test DIL,DIL
            je .L_45e4b2

            movzx EDX,BYTE PTR [RAX+152]
            mov RBX,QWORD PTR [R14+320]
            movzx ESI,BYTE PTR [RAX+149]
            lea RCX,QWORD PTR [RBX+4]
            mov QWORD PTR [RBP-88],RBX
            shr DL,1
            and EDX,1
            call .L_452500

            movzx EAX,BYTE PTR [RBX+5]
            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45ee70]
            mov ECX,757
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBX+4]
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov R12,QWORD PTR [R14+88]
            pop RDX
            pop RCX
            test BYTE PTR [RAX+152],2
            lea RSI,QWORD PTR [R12+952]
            jne .L_45e12c
.L_45ca3b:

            mov RDI,QWORD PTR [RAX+56]
            mov EDX,4
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d870

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R12+956]
            mov EDX,28
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d870

            mov RAX,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [RAX+952]
.L_45ca7d:

            mov RBX,QWORD PTR [RBP-88]
            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            movdqu XMM0,XMMWORD PTR [RSI]
            lea R8,QWORD PTR [RIP+.L_45e9c1]
            mov ECX,766
            mov RDI,R14
            movups XMMWORD PTR [RBX+6],XMM0
            lea R9,QWORD PTR [RBX+6]
            lea R12,QWORD PTR [RBX+39]
            mov R13,R12
            movdqu XMM0,XMMWORD PTR [RSI+16]
            mov ESI,3
            movups XMMWORD PTR [R9+16],XMM0
            push 32
            call .L_448d00

            mov RAX,QWORD PTR [R14+80]
            pop RBX
            pop R15
            mov RDX,QWORD PTR [RAX+8]
            lea RAX,QWORD PTR [RDX-16]
            cmp RAX,16
            ja .L_45d8d0

            mov RAX,QWORD PTR [R14+88]
            mov R11D,DWORD PTR [RAX+1048]
            test R11D,R11D
            je .L_45d8d0

            mov RAX,QWORD PTR [RBP-88]
            xor EBX,EBX
            mov BYTE PTR [RAX+38],DL
            nop
            nop
            nop
            nop
            nop
            nop
.L_45cb00:

            mov RAX,QWORD PTR [R14+80]
            movzx EAX,BYTE PTR [RAX+RBX*1+16]
            mov BYTE PTR [R12+RBX*1],AL
            add RBX,1
            cmp RDX,RBX
            jne .L_45cb00

            lea R13,QWORD PTR [R12+RBX*1]
.L_45cb1a:

            lea R8,QWORD PTR [RIP+.L_45ee98]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov R9,RBX
            mov ECX,819
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45e9dc]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            push RBX
            mov R9,R12
            mov ECX,820
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RAX,QWORD PTR [R14]
            pop R9
            pop R10
            test BYTE PTR [RAX+152],2
            je .L_45cc18

            mov RAX,QWORD PTR [R14+88]
            lea RBX,QWORD PTR [R13+1]
            mov R9,QWORD PTR [RAX+728]
            test R9,R9
            je .L_45e20a

            movzx EAX,BYTE PTR [RAX+736]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45ea0e]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,3
            mov ECX,837
            mov RDI,R14
            push RAX
            call .L_448d00

            mov RAX,QWORD PTR [R14+88]
            movzx EAX,BYTE PTR [RAX+736]
            mov BYTE PTR [R13],AL
            mov R8,QWORD PTR [R14+88]
            movzx EAX,BYTE PTR [R8+736]
            mov RSI,QWORD PTR [R8+728]
            cmp EAX,8
            jae .L_45e1c8

            test AL,4
            jne .L_45e5aa

            test EAX,EAX
            je .L_45cc07

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBX],DL
            jne .L_45e87b
.L_45cc03:

            mov R8,QWORD PTR [R14+88]
.L_45cc07:

            movzx R13D,BYTE PTR [R8+736]
            mov RAX,QWORD PTR [R14]
            pop RDI
            pop R8
            add R13,RBX
.L_45cc18:

            movsxd RDX,DWORD PTR [R14+16]
            lea RBX,QWORD PTR [R13+2]
            mov R15,QWORD PTR [RAX+RDX*8]
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            je .L_45e1f8

            xor R12D,R12D
            nop
            nop
            nop
            nop
            nop
            nop
.L_45cc38:

            call .L_45c7c0

            test RAX,RAX
            je .L_45ccaf

            mov RDX,QWORD PTR [R14]
            movzx ECX,BYTE PTR [RDX+149]
            cmp DWORD PTR [RAX+32],ECX
            jg .L_45ccaf

            movzx ECX,BYTE PTR [RDX+151]
            cmp DWORD PTR [RAX+40],ECX
            jl .L_45ccaf

            test BYTE PTR [RDX+152],2
            je .L_45cc6c

            test BYTE PTR [RAX+44],4
            jne .L_45ccaf
.L_45cc6c:

            cmp DWORD PTR [RAX+24],11
            je .L_45d91d
.L_45cc76:

            mov R9D,DWORD PTR [R15]
            lea R8,QWORD PTR [RIP+.L_45eec0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,887
            mov ESI,3
            mov RDI,R14
            add R12,1
            add RBX,2
            call .L_448ae0

            mov EAX,DWORD PTR [R15]
            mov BYTE PTR [RBX-2],AH
            mov EAX,DWORD PTR [R15]
            mov BYTE PTR [RBX-1],AL
.L_45ccaf:

            add R15,4
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            jne .L_45cc38

            lea R9,QWORD PTR [R12+1]
            mov RAX,R9
            lea EDX,DWORD PTR [R9+R9*1]
            shr RAX,7
.L_45ccce:

            mov ECX,4294967040
            lea R8,QWORD PTR [RIP+.L_45eee8]
            mov ESI,3
            mov WORD PTR [RBX],CX
            mov BYTE PTR [R13+1],DL
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov BYTE PTR [R13],AL
            mov ECX,920
            xor EAX,EAX
            mov RDI,R14
            xor R15D,R15D
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_45ef10]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov R9D,1
            mov ECX,951
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_45ef30]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor R9D,R9D
            xor EAX,EAX
            mov ECX,953
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            lea RAX,QWORD PTR [RBX+4]
            mov ESI,1
            lea R8,QWORD PTR [RIP+.L_45ef50]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov WORD PTR [RBX+2],SI
            mov RDI,R14
            mov QWORD PTR [RBP-96],RAX
            lea RAX,QWORD PTR [RBX+6]
            mov ECX,263
            mov ESI,3
            mov R13,QWORD PTR [R14+320]
            mov QWORD PTR [RBP-104],RAX
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov R12,QWORD PTR [RAX+128]
            mov EDI,DWORD PTR [R12]
            test EDI,EDI
            jne .L_45cdc0

            jmp .L_45d9e8
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45cdb0:

            add R15,2
            mov EDI,DWORD PTR [R12+R15*2]
            test EDI,EDI
            je .L_45d9e8
.L_45cdc0:

            call .L_454760

            test RAX,RAX
            jne .L_45cdb0

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45ef90]
            mov ECX,276
            mov ESI,1
            mov RDI,R14
            xor R13D,R13D
            call .L_448ae0

            mov EDX,2
.L_45cdf2:

            mov RAX,QWORD PTR [RBP-96]
            lea R8,QWORD PTR [RIP+.L_45efb8]
            mov ECX,328
            mov ESI,3
            mov RDI,R14
            lea R12,QWORD PTR [RAX+RDX*1]
            mov RAX,QWORD PTR [R14+320]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R9,QWORD PTR [RAX+768]
            xor EAX,EAX
            mov QWORD PTR [RBP-112],R9
            call .L_448ae0

            mov R9,QWORD PTR [RBP-112]
            cmp R12,R9
            ja .L_45d8f6

            sub R9,R12
            cmp R9,5
            jbe .L_45d8f6

            mov RAX,QWORD PTR [RBP-96]
            mov R15D,1
            mov DWORD PTR [R12],33557248
            mov WORD PTR [R12+4],R15W
            lea R12,QWORD PTR [RAX+R13*1+8]
            add R13,6
.L_45ce69:

            mov RAX,QWORD PTR [R14+320]
            mov RDI,QWORD PTR [R14+88]
            mov R15,RAX
            call .L_45b6c0

            test EAX,EAX
            je .L_45dfaa
.L_45ce84:

            mov RAX,QWORD PTR [R14]
            test WORD PTR [RAX+152],448
            jne .L_45df35
.L_45ce96:

            lea R8,QWORD PTR [RIP+.L_45f0c8]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov R9,R13
            mov ECX,1025
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            test R13,R13
            je .L_45ced6

            mov RAX,R13
            mov BYTE PTR [RBX+5],R13B
            add R13,QWORD PTR [RBP-104]
            shr RAX,8
            mov BYTE PTR [RBX+4],AL
            mov QWORD PTR [RBP-96],R13
.L_45ced6:

            mov RAX,QWORD PTR [RBP-96]
            sub RAX,QWORD PTR [RBP-88]
            mov DWORD PTR [R14+328],22
            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov BYTE PTR [RAX],1
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_45e0f0
.L_45cf0f:

            mov RDI,R14
            call .L_44db50

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45ea5f]
            mov ECX,1051
            je .L_45d543

            lea R8,QWORD PTR [RIP+.L_45ea46]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,1047
            mov ESI,1
            mov RDI,R14
            call .L_448c30
.L_45cf50:

            mov RSI,QWORD PTR [RBP-56]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_45e594

            lea RSP,QWORD PTR [RBP-40]
            pop RBX
            pop R12
            pop R13
            pop R14
            pop R15
            pop RBP
.L_45cf73:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45cf78:

            mov RDI,R14
            call .L_44e4a0

            test EAX,EAX
            je .L_45c948

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45cf90:

            lea R8,QWORD PTR [RIP+.L_45edbd]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,3474
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov DWORD PTR [R14+8],15
            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45cfc0:

            mov RDI,R14
            call .L_450c40

            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45cfd0:

            mov DWORD PTR [R14+8],1
            mov EBX,R9D
            jmp .L_45cf50
.L_45cfe0:

            lea R8,QWORD PTR [RIP+.L_45ea75]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1447
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RDI,R14
            mov R12,QWORD PTR [R14+192]
            call .L_450640

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d9ab

            cmp DWORD PTR [R14+208],22
            jne .L_45e55a

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_45d8e0

            cmp BYTE PTR [R12],3
            je .L_45e610

            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+728]
            call QWORD PTR [RIP+.L_677120]

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],0
            mov QWORD PTR [RAX+728],0
            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [R14+264]
            movzx EDX,BYTE PTR [RAX+152]
            and EDX,2
            cmp DL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,50
            cmp DL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,12
.L_45d09b:

            cmp RCX,RAX
            jb .L_45e3b0

            cmp BYTE PTR [R12],2
            jne .L_45e3b0

            sub RSP,8
            add R12,RSI
            lea R8,QWORD PTR [RIP+.L_45eb6d]
            push 2
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9,R12
            mov ECX,1527
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RBP-88],R12
            call .L_448d00

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R14+16]
            lea RDI,QWORD PTR [R14+12]
            mov RCX,R12
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_452530

            mov RAX,QWORD PTR [R14]
            mov ECX,DWORD PTR [R14+12]
            pop RDX
            mov EDX,DWORD PTR [R14+16]
            movzx R9D,BYTE PTR [RAX+150]
            movzx EDI,BYTE PTR [RAX+149]
            pop RSI
            movzx ESI,BYTE PTR [RAX+148]
            movzx EAX,BYTE PTR [RAX+151]
            cmp ECX,R9D
            jl .L_45e3c1

            cmp EDX,EAX
            jl .L_45e3c1

            cmp ECX,ESI
            jg .L_45e3c1

            cmp EDX,EDI
            jg .L_45e3c1

            mov R15,QWORD PTR [RBP-88]
            lea R8,QWORD PTR [RIP+.L_45f180]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1553
            mov ESI,3
            mov RDI,R14
            mov R9D,DWORD PTR [R15+2]
            bswap R9D
            call .L_448ae0

            mov RAX,QWORD PTR [R14+88]
            lea R9,QWORD PTR [R15+2]
            sub RSP,8
            movdqu XMM0,XMMWORD PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_45eb83]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1560
            mov ESI,3
            movups XMMWORD PTR [RAX+984],XMM0
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [R9+16]
            movups XMMWORD PTR [RAX+1000],XMM0
            movzx R12D,BYTE PTR [R15+34]
            push 32
            call .L_448d00

            pop R13
            cmp R12,32
            pop R15
            ja .L_45e800

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [R14+264]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RAX,QWORD PTR [R12+RAX*1+12]
            lea RCX,QWORD PTR [RAX+39]
            cmp RDX,RCX
            jbe .L_45d9d3

            mov RSI,QWORD PTR [RBP-88]
            movzx R15D,BYTE PTR [RSI+R12*1+38]
            movzx ECX,BYTE PTR [RSI+R12*1+39]
            shl R15D,8
            or R15D,ECX
            movsxd R15,R15D
            lea RCX,QWORD PTR [R15-1]
            cmp RCX,2
            jbe .L_45e50b

            lea RAX,QWORD PTR [RAX+R15*1+40]
            cmp RDX,RAX
            jne .L_45e50b
.L_45d236:

            mov RSI,QWORD PTR [RBP-88]
            movzx R13D,BYTE PTR [RSI+R12*1+35]
            movzx EAX,BYTE PTR [RSI+R12*1+36]
            shl R13D,8
            or R13D,EAX
            lea RAX,QWORD PTR [RSI+R12*1+37]
            movzx R9D,BYTE PTR [RAX]
            mov QWORD PTR [RBP-96],RAX
            test R9B,R9B
            jne .L_45e5c1

            mov RDX,QWORD PTR [R14+120]
            mov EDI,R13D
            mov QWORD PTR [RBP-104],RDX
            call .L_45c7c0

            mov RDX,QWORD PTR [RBP-104]
            mov QWORD PTR [RDX],RAX
            mov RAX,QWORD PTR [R14+120]
            mov RSI,QWORD PTR [RAX]
            test RSI,RSI
            je .L_45e890

            mov RDI,R14
            call .L_450be0

            lea R8,QWORD PTR [RIP+.L_45f1f0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov R9,R12
            mov ECX,1640
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [RBP-88]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45eb9e]
            push R12
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1641
            mov ESI,3
            mov RDI,R14
            lea R11,QWORD PTR [RAX+35]
            mov R9,R11
            mov QWORD PTR [RBP-104],R11
            call .L_448d00

            mov R8,QWORD PTR [R14+88]
            pop R9
            mov R9,QWORD PTR [R14+80]
            mov R11D,DWORD PTR [R8+1048]
            pop R10
            lea RCX,QWORD PTR [R9+16]
            test R11D,R11D
            mov R11,QWORD PTR [RBP-104]
            je .L_45d31a

            test R12,R12
            je .L_45d31a

            cmp R13D,DWORD PTR [R9]
            je .L_45e2fe
.L_45d31a:

            add DWORD PTR [R14+8],1
            cmp R12D,8
            mov DWORD PTR [R8+1048],0
            mov DWORD PTR [R9],R13D
            mov DWORD PTR [R9+4],0
            mov QWORD PTR [R9+8],R12
            jae .L_45da97

            test R12B,4
            jne .L_45e483

            test R12D,R12D
            je .L_45d36a

            mov RAX,QWORD PTR [RBP-88]
            test R12B,2
            movzx EAX,BYTE PTR [RAX+35]
            mov BYTE PTR [RCX],AL
            jne .L_45e4f8
.L_45d366:

            mov R8,QWORD PTR [R14+88]
.L_45d36a:

            mov ESI,DWORD PTR [R8+1048]
            lea RAX,QWORD PTR [RIP+.L_45e985]
            lea R9,QWORD PTR [RIP+.L_45e987]
            lea R8,QWORD PTR [RIP+.L_45ebcf]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1679
            mov RDI,R14
            test ESI,ESI
            mov ESI,3
            cmovne R9,RAX
            xor EAX,EAX
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_45f218]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov R9D,R13D
            mov ECX,1681
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [RBP-96]
            lea R8,QWORD PTR [RIP+.L_45f240]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1682
            mov ESI,3
            mov RDI,R14
            movzx R9D,BYTE PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov RAX,QWORD PTR [R14+80]
            mov EDI,DWORD PTR [RAX]
            call .L_45c7c0

            test RAX,RAX
            je .L_45e85b

            mov R9,QWORD PTR [RAX+8]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45f260]
            xor EAX,EAX
            mov ECX,1698
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            movsxd RDX,DWORD PTR [R14+16]
            mov RAX,QWORD PTR [R14]
            mov RAX,QWORD PTR [RAX+RDX*8]
            jmp .L_45d450
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45d440:

            mov RCX,QWORD PTR [R14+80]
            add RAX,4
            cmp EDX,DWORD PTR [RCX]
            je .L_45dad2
.L_45d450:

            mov EDX,DWORD PTR [RAX]
            test EDX,EDX
            jne .L_45d440

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1705
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
.L_45d473:

            call .L_448ae0

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294936192
            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45d498:

            mov RDI,R14
            call .L_450830

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45d4b0:

            lea R8,QWORD PTR [RIP+.L_45ecf5]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,2767
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RDI,R14
            call .L_450640

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d933

            cmp DWORD PTR [R14+208],22
            jne .L_45e568

            mov RAX,QWORD PTR [R14]
            movzx EDX,BYTE PTR [RAX+152]
            and EDX,2
            cmp DL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp QWORD PTR [R14+264],RAX
            jne .L_45e445

            mov RAX,QWORD PTR [R14+192]
            cmp BYTE PTR [RAX],14
            jne .L_45e445

            add DWORD PTR [R14+8],1
            test DL,DL
            jne .L_45df28
.L_45d537:

            lea R8,QWORD PTR [RIP+.L_45ed2e]
            mov ECX,2797
.L_45d543:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45cf50
          .byte 0x66
          .byte 0x90
.L_45d560:

            mov RDI,R14
            call .L_450780

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x90
.L_45d570:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45ed49]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,2809
            mov ESI,2
            mov RDI,R14
            mov RBX,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            cmp DWORD PTR [RBX+24],11
            jne .L_45e419

            mov RAX,QWORD PTR [R14]
            mov RSI,QWORD PTR [R14+320]
            lea RCX,QWORD PTR [RBP-64]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,764
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            add RSI,4
            call .L_45bb40

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d8a0

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,32
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            lea RCX,QWORD PTR [RDI+944]
            lea RSI,QWORD PTR [RDI+1016]
            call .L_45bd90

            test EAX,EAX
            mov EBX,EAX
            jne .L_45de44

            mov RAX,QWORD PTR [RBP-64]
            mov DWORD PTR [R14+328],22
            mov RDI,R14
            add RAX,4
            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov BYTE PTR [RAX],16
            add DWORD PTR [R14+8],1
            call .L_44db50

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45ed84]
            mov ECX,3051
            je .L_45d543

            lea R8,QWORD PTR [RIP+.L_45ea46]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,3047
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45d678:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45eda1]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,3068
            mov ESI,2
            mov RDI,R14
            mov RAX,QWORD PTR [RAX]
            mov R15,RAX
            xor EAX,EAX
            call .L_448ae0

            mov RDI,R14
            call .L_44d000

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d95b

            mov EAX,DWORD PTR [R15+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_45d6cb

            cmp EAX,11
            jne .L_45e8d1
.L_45d6cb:

            lea R8,QWORD PTR [RIP+.L_45f490]
            mov ECX,3082
.L_45d6d7:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            add DWORD PTR [R14+8],1
            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45d700:

            mov RDI,R14
            call .L_4508e0

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x90
.L_45d710:

            mov RDI,R14
            call .L_450d80

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x90
.L_45d720:

            mov RDI,R14
            call .L_4509a0

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x90
.L_45d730:

            mov RDI,R14
            call .L_450fd0

            mov EBX,EAX
            jmp .L_45cf50
          .byte 0x90
.L_45d740:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45ec76]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,2263
            mov ESI,2
            mov RDI,R14
            mov R12,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_448ae0

            mov RDI,R14
            call .L_450640

            test EAX,EAX
            mov EBX,EAX
            jne .L_45d983

            cmp DWORD PTR [R14+208],22
            jne .L_45e51c

            mov RAX,QWORD PTR [R14+192]
            cmp BYTE PTR [RAX],12
            je .L_45de6c

            mov EAX,DWORD PTR [R12+24]
            and EAX,4294967293
            cmp EAX,5
            jne .L_45e90e

            mov DWORD PTR [R14+276],1
.L_45d7b5:

            add DWORD PTR [R14+8],1
            lea R8,QWORD PTR [RIP+.L_45ecbb]
            mov ECX,2607
            jmp .L_45d543
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45d7d0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45ecd8]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,2618
            mov ESI,2
            mov RDI,R14
            mov RAX,QWORD PTR [RAX]
            mov R15,RAX
            xor EAX,EAX
            call .L_448ae0

            mov ECX,DWORD PTR [R15+24]
            cmp ECX,10
            ja .L_45d818

            mov EAX,1
            shl RAX,CL
            test EAX,1566
            jne .L_45e811
.L_45d818:

            lea R8,QWORD PTR [RIP+.L_45f448]
            mov ECX,2622
            jmp .L_45d6d7
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45d830:

            lea R8,QWORD PTR [RIP+.L_45edcd]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,3483
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294938368
            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45d860:

            mov EBX,4294938368
            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45d870:

            lea R8,QWORD PTR [RIP+.L_45edde]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EBX
            mov ECX,761
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45d8a0:

            lea R8,QWORD PTR [RIP+.L_45f470]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,3018
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45d8d0:

            mov RAX,QWORD PTR [RBP-88]
            xor EBX,EBX
            mov BYTE PTR [RAX+38],0
            jmp .L_45cb1a
          .byte 0x90
.L_45d8e0:

            mov RCX,QWORD PTR [R14+264]
            mov EAX,42
            mov ESI,4
            jmp .L_45d09b
.L_45d8f6:

            lea R8,QWORD PTR [RIP+.L_45ea23]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,332
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45ce69
.L_45d91d:

            mov RDI,QWORD PTR [R14+88]
            call .L_45b6c0

            test EAX,EAX
            je .L_45cc76

            jmp .L_45ccaf
.L_45d933:

            lea R8,QWORD PTR [RIP+.L_45ea8b]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,2771
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
.L_45d95b:

            lea R8,QWORD PTR [RIP+.L_45ebb7]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,3072
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
.L_45d983:

            lea R8,QWORD PTR [RIP+.L_45ea8b]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,2300
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
.L_45d9ab:

            lea R8,QWORD PTR [RIP+.L_45ea8b]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,1454
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
.L_45d9d3:

            add RAX,38
            cmp RDX,RAX
            jne .L_45e84a

            xor R15D,R15D
            jmp .L_45d236
.L_45d9e8:

            mov RAX,QWORD PTR [RBP-104]
            add R13,768
            cmp RAX,R13
            ja .L_45e0fd

            lea RDX,QWORD PTR [R15+6]
            sub R13,RAX
            cmp R13,RDX
            jb .L_45e0fd

            mov RAX,QWORD PTR [R14]
            xor R12D,R12D
            lea R13,QWORD PTR [RBX+12]
            mov R15,QWORD PTR [RAX+128]
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            jne .L_45da33

            jmp .L_45e40c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45da30:

            mov R12,RCX
.L_45da33:

            call .L_454760

            movzx ECX,BYTE PTR [RAX+5]
            mov BYTE PTR [R13+R12*1],CL
            movzx EAX,WORD PTR [RAX+4]
            lea RCX,QWORD PTR [R12+2]
            mov BYTE PTR [R13+RCX*1-1],AL
            mov EDI,DWORD PTR [R15+RCX*2]
            test EDI,EDI
            jne .L_45da30

            test RCX,RCX
            je .L_45e40c

            mov EAX,2560
            mov BYTE PTR [RBX+11],CL
            lea R13,QWORD PTR [R12+8]
            mov WORD PTR [RBX+6],AX
            lea RAX,QWORD PTR [R12+4]
            lea RDX,QWORD PTR [R12+10]
            shr RAX,8
            mov BYTE PTR [RBX+8],AL
            lea EAX,DWORD PTR [RCX+2]
            mov BYTE PTR [RBX+9],AL
            mov RAX,RCX
            shr RAX,8
            mov BYTE PTR [RBX+10],AL
            jmp .L_45cdf2
.L_45da97:

            mov RAX,QWORD PTR [RBP-88]
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,R11
            and RDI,-8
            mov RAX,QWORD PTR [RAX+35]
            mov QWORD PTR [RCX],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [R11+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R12D
            shr ECX,3

            rep movsq 

            mov R8,QWORD PTR [R14+88]
            jmp .L_45d36a
.L_45dad2:

            mov RAX,QWORD PTR [RBP-88]
            lea R8,QWORD PTR [RIP+.L_45f288]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov DWORD PTR [RCX+4],0
            mov R9,R15
            mov ECX,1733
            mov ESI,2
            mov RDI,R14
            lea R13,QWORD PTR [RAX+R12*1+40]
            xor EAX,EAX
            call .L_448ae0

            test R15,R15
            je .L_45e2a1

            movzx EAX,WORD PTR [R13+2]
            movzx R9D,WORD PTR [R13]
            rol AX,8
            rol R9W,8
            movzx EAX,AX
            movzx R9D,R9W
            lea R12D,DWORD PTR [RAX+4]
            mov DWORD PTR [RBP-88],EAX
            cmp R15,R12
            jae .L_45dbe3

            jmp .L_45e263
          .byte 0x90
.L_45db40:

            cmp R9D,256
            je .L_45dd50

            cmp R9D,65281
            jne .L_45dd20

            lea R8,QWORD PTR [RIP+.L_45ebeb]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1753
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            cmp DWORD PTR [RBP-88],1
            jne .L_45e4a1

            cmp BYTE PTR [R13+4],0
            jne .L_45e4a1

            mov DWORD PTR [R14+376],1
.L_45db9c:

            sub R15,R12
            add R13,R12
            lea RAX,QWORD PTR [R15-1]
            cmp RAX,2
            jbe .L_45e2d2

            test R15,R15
            je .L_45e2a1

            movzx EAX,WORD PTR [R13+2]
            movzx R9D,WORD PTR [R13]
            rol AX,8
            rol R9W,8
            movzx EAX,AX
            movzx R9D,R9W
            lea R12D,DWORD PTR [RAX+4]
            mov DWORD PTR [RBP-88],EAX
            cmp R12,R15
            ja .L_45e263
.L_45dbe3:

            cmp R9D,11
            je .L_45dc90

            jg .L_45db40

            cmp R9D,1
            jne .L_45dd20

            lea R8,QWORD PTR [RIP+.L_45f2e0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1766
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            movzx EAX,WORD PTR [RAX+152]
            test AX,448
            je .L_45dc46

            cmp DWORD PTR [RBP-88],1
            jne .L_45dc46

            shr AX,6
            and EAX,7
            cmp BYTE PTR [R13+4],AL
            je .L_45db9c
.L_45dc46:

            lea R8,QWORD PTR [RIP+.L_45f308]
            mov ECX,1107
            nop
            nop
            nop
            nop
            nop
            nop
.L_45dc58:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936192
            call .L_448ae0

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45dc90:

            lea R8,QWORD PTR [RIP+.L_45f338]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1832
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            movsxd RAX,DWORD PTR [RBP-88]
            movzx ECX,BYTE PTR [R13+4]
            mov RSI,RAX
            lea RAX,QWORD PTR [RCX+1]
            cmp RSI,RAX
            jne .L_45e599

            test RCX,RCX
            lea RSI,QWORD PTR [R13+5]
            je .L_45dd09

            movzx EDX,BYTE PTR [R13+5]
            add RCX,RSI
            lea RAX,QWORD PTR [R13+6]
            cmp DL,1
            ja .L_45dd01

            jmp .L_45de0f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45dcf0:

            add RAX,1
            movzx EDX,BYTE PTR [RAX-1]
            cmp DL,1
            jbe .L_45de0f
.L_45dd01:

            cmp RAX,RCX
            mov RSI,RAX
            jne .L_45dcf0
.L_45dd09:

            lea R8,QWORD PTR [RIP+.L_45ec23]
            mov ECX,1245
            jmp .L_45dc58
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45dd20:

            lea R8,QWORD PTR [RIP+.L_45f380]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1869
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45db9c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45dd50:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45ec3d]
            xor EAX,EAX
            mov ECX,1846
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            lea RAX,QWORD PTR [R13+4]
            movsxd RDX,DWORD PTR [RBP-88]
            mov QWORD PTR [RBP-88],RAX
            mov RAX,QWORD PTR [R14+120]
            mov RAX,QWORD PTR [RAX]
            cmp DWORD PTR [RAX+24],11
            jne .L_45e23c

            mov RAX,QWORD PTR [R14+88]
            mov QWORD PTR [RBP-88],RDX
            mov RDI,QWORD PTR [RAX+696]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [R14+88]
            mov RDX,QWORD PTR [RBP-88]
            lea RSI,QWORD PTR [R13+4]
            mov QWORD PTR [RDI+696],0
            mov QWORD PTR [RDI+704],0
            call .L_45b6f0

            test EAX,EAX
            je .L_45db9c

            lea R8,QWORD PTR [RIP+.L_45f360]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov RDI,R14
            mov R9D,EAX
            mov ECX,1275
            mov ESI,1
            mov EBX,EAX
            call .L_448c30

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_45cf50
.L_45de0f:

            mov RAX,QWORD PTR [R14+88]
            lea R8,QWORD PTR [RIP+.L_45ec09]
            mov ECX,1237
            mov RDI,R14
            mov DWORD PTR [RAX+260],EDX
            movzx R9D,BYTE PTR [RSI]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,4
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45db9c
.L_45de44:

            lea R8,QWORD PTR [RIP+.L_45ed66]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,3027
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45cf50
.L_45de6c:

            mov RDX,QWORD PTR [R14]
            mov R13,QWORD PTR [R14+264]
            lea R8,QWORD PTR [RIP+.L_45ec93]
            mov ECX,2337
            mov ESI,3
            mov RDI,R14
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            cmp DL,1
            sbb RDX,RDX
            sub RSP,8
            and RDX,-8
            add RDX,12
            lea R15,QWORD PTR [RAX+RDX*1]
            sub R13,RDX
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            push R13
            mov R9,R15
            call .L_448d00

            cmp DWORD PTR [R12+24],11
            pop RAX
            pop RDX
            jne .L_45e5ff

            mov RDI,QWORD PTR [R14+88]
            mov RDX,R13
            mov RSI,R15
            call .L_45b9f0

            test EAX,EAX
            je .L_45d7b5

            lea R8,QWORD PTR [RIP+.L_45f428]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,2405
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294935808
            jmp .L_45cf50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45df28:

            mov RDI,R14
            call .L_44da00

            jmp .L_45d537
.L_45df35:

            mov RAX,QWORD PTR [R14+320]
            lea R8,QWORD PTR [RIP+.L_45f090]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,442
            mov ESI,3
            mov RDI,R14
            lea R9,QWORD PTR [RAX+768]
            xor EAX,EAX
            mov QWORD PTR [RBP-112],R9
            call .L_448ae0

            mov R9,QWORD PTR [RBP-112]
            cmp R9,R12
            jb .L_45e140

            sub R9,R12
            cmp R9,4
            jbe .L_45e140

            mov DWORD PTR [R12],16777472
            mov RAX,QWORD PTR [R14]
            add R13,5
            movzx EAX,WORD PTR [RAX+152]
            shr AX,6
            and EAX,7
            mov BYTE PTR [R12+4],AL
            jmp .L_45ce96
.L_45dfaa:

            lea R8,QWORD PTR [RIP+.L_45eff0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,366
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,R15
            lea R8,QWORD PTR [RIP+.L_45ea23]
            mov ECX,370
            add RAX,768
            mov RDX,RAX
            sub RDX,R12
            cmp RDX,3
            jle .L_45e1ad

            mov R11D,1
            sub RAX,R12
            mov WORD PTR [R12],R11W
            mov RDX,QWORD PTR [R14+88]
            sub RAX,4
            mov R15,RAX
            cmp QWORD PTR [RDX+696],0
            je .L_45e020

            cmp QWORD PTR [RDX+704],0
            jne .L_45e167
.L_45e020:

            lea R8,QWORD PTR [RIP+.L_45f020]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,385
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [R12+4]
            lea RCX,QWORD PTR [RBP-64]
            mov RDX,R15
            mov QWORD PTR [RBP-120],RSI
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            call .L_45b7e0

            test EAX,EAX
            jne .L_45e822

            mov RDX,QWORD PTR [R14+88]
            mov EDI,1
            mov RSI,QWORD PTR [RBP-64]
            mov QWORD PTR [RBP-112],RDX
            call QWORD PTR [RIP+.L_677128]

            mov RDX,QWORD PTR [RBP-112]
            lea R8,QWORD PTR [RIP+.L_45ea34]
            mov ECX,399
            mov QWORD PTR [RDX+696],RAX
            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+696]
            test RDI,RDI
            je .L_45e1ad

            mov RDX,QWORD PTR [RBP-64]
            mov RSI,QWORD PTR [RBP-120]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP-64]
            mov RDX,QWORD PTR [R14+88]
            mov QWORD PTR [RDX+704],RAX
.L_45e0cc:

            mov RDX,RAX
            mov BYTE PTR [R12+3],AL
            lea R13,QWORD PTR [R13+RAX*1+4]
            mov RAX,QWORD PTR [RBP-96]
            shr RDX,8
            mov BYTE PTR [R12+2],DL
            lea R12,QWORD PTR [RAX+R13*1+2]
            jmp .L_45ce84
.L_45e0f0:

            mov RDI,R14
            call .L_44dac0

            jmp .L_45cf0f
.L_45e0fd:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45ea23]
            mov ECX,285
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            xor R13D,R13D
            mov EDX,2
            jmp .L_45cdf2
.L_45e12c:

            cmp QWORD PTR [R12+728],0
            jne .L_45ca7d

            jmp .L_45ca3b
.L_45e140:

            lea R8,QWORD PTR [RIP+.L_45ea23]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,446
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45ce96
.L_45e167:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            lea R8,QWORD PTR [RIP+.L_45f068]
            xor EAX,EAX
            mov ECX,408
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14+88]
            mov RDX,QWORD PTR [RAX+704]
            cmp RDX,R15
            mov QWORD PTR [RBP-64],RDX
            jbe .L_45e4de

            lea R8,QWORD PTR [RIP+.L_45ea23]
            mov ECX,414
.L_45e1ad:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45ce84
.L_45e1c8:

            mov RDX,QWORD PTR [RSI]
            lea RDI,QWORD PTR [R13+9]
            and RDI,-8
            mov QWORD PTR [RBX],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RBX+RDX*1-8],RCX
            mov RCX,RBX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            shr ECX,3

            rep movsq 

            jmp .L_45cc03
.L_45e1f8:

            mov EDX,2
            xor EAX,EAX
            mov R9D,1
            jmp .L_45ccce
.L_45e20a:

            lea R8,QWORD PTR [RIP+.L_45e9f5]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,830
            mov ESI,3
            mov RDI,R14
            call .L_448ae0

            mov BYTE PTR [R13],0
            mov R13,RBX
            mov RAX,QWORD PTR [R14]
            jmp .L_45cc18
.L_45e23c:

            lea R8,QWORD PTR [RIP+.L_45ec5a]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1263
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45db9c
.L_45e263:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1744
.L_45e26f:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936192
            call .L_448ae0

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_45cf50
.L_45e2a1:

            mov ECX,DWORD PTR [R14+376]
            test ECX,ECX
            jne .L_45e2c1

            mov RAX,QWORD PTR [R14]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,48
            cmp AL,32
            je .L_45e91f
.L_45e2c1:

            lea R8,QWORD PTR [RIP+.L_45eada]
            mov ECX,1922
            jmp .L_45d543
.L_45e2d2:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1877
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294936192
            jmp .L_45cf50
.L_45e2fe:

            mov EDI,DWORD PTR [R9+4]
            test EDI,EDI
            jne .L_45d31a

            cmp R12,QWORD PTR [R9+8]
            jne .L_45d31a

            mov RSI,R11
            mov RDI,RCX
            mov RDX,R12
            mov QWORD PTR [RBP-128],R8
            mov QWORD PTR [RBP-120],R9
            mov QWORD PTR [RBP-112],R11
            mov QWORD PTR [RBP-104],RCX
            call memcmp@PLT

            test EAX,EAX
            mov RCX,QWORD PTR [RBP-104]
            mov R11,QWORD PTR [RBP-112]
            mov R9,QWORD PTR [RBP-120]
            mov R8,QWORD PTR [RBP-128]
            jne .L_45d31a

            mov DWORD PTR [R14+8],12
            mov RDI,R14
            call .L_44d000

            test EAX,EAX
            je .L_45d366

            lea R8,QWORD PTR [RIP+.L_45ebb7]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,1671
            mov ESI,1
            mov RDI,R14
            mov DWORD PTR [RBP-88],EAX
            call .L_448c30

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov R11D,DWORD PTR [RBP-88]
            mov EBX,R11D
            jmp .L_45cf50
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45e3b0:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1508
            jmp .L_45e26f
.L_45e3c1:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45f130]
            push RDI
            push RSI
            mov RDI,R14
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            push RCX
            push RAX
            mov ECX,1540
            mov ESI,1
            xor EAX,EAX
            call .L_448ae0

            add RSP,48
.L_45e3f0:

            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294939008
            jmp .L_45cf50
.L_45e40c:

            mov EDX,2
            xor R13D,R13D
            jmp .L_45cdf2
.L_45e419:

            lea R8,QWORD PTR [RIP+.L_45eca7]
            mov ECX,3035
.L_45e425:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294939648
            call .L_448ae0

            jmp .L_45cf50
.L_45e445:

            lea R8,QWORD PTR [RIP+.L_45ed10]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,2784
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294935680
            jmp .L_45cf50
.L_45e483:

            mov RAX,QWORD PTR [RBP-88]
            mov EAX,DWORD PTR [RAX+35]
            mov DWORD PTR [RCX],EAX
            mov EAX,R12D
            mov EDX,DWORD PTR [R11+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            mov R8,QWORD PTR [R14+88]
            jmp .L_45d36a
.L_45e4a1:

            lea R8,QWORD PTR [RIP+.L_45f2b8]
            mov ECX,1082
            jmp .L_45dc58
.L_45e4b2:

            lea R8,QWORD PTR [RIP+.L_45ee18]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,738
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294938368
            jmp .L_45cf50
.L_45e4de:

            mov RSI,QWORD PTR [RAX+696]
            lea RDI,QWORD PTR [R12+4]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP-64]
            jmp .L_45e0cc
.L_45e4f8:

            mov EAX,R12D
            movzx EDX,WORD PTR [R11+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_45d366
.L_45e50b:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1578
            jmp .L_45e26f
.L_45e51c:

            lea R8,QWORD PTR [RIP+.L_45f3d8]
            mov ECX,2306
.L_45e528:

            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936832
            call .L_448ae0

            mov EDX,10
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_45cf50
.L_45e55a:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1480
            jmp .L_45e528
.L_45e568:

            lea R8,QWORD PTR [RIP+.L_45ed10]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,2777
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294936832
            jmp .L_45cf50
.L_45e594:

            call __stack_chk_fail@PLT
.L_45e599:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1219
            jmp .L_45e26f
.L_45e5aa:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBX],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBX+RAX*1-4],EDX
            mov R8,QWORD PTR [R14+88]
            jmp .L_45cc07
.L_45e5c1:

            lea R8,QWORD PTR [RIP+.L_45f1a0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1619
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            mov EBX,4294938496
            jmp .L_45cf50
.L_45e5ff:

            lea R8,QWORD PTR [RIP+.L_45eca7]
            mov ECX,2414
            jmp .L_45e425
.L_45e610:

            lea R8,QWORD PTR [RIP+.L_45eabc]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1491
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            lea R8,QWORD PTR [RIP+.L_45eada]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            xor EAX,EAX
            mov ECX,1492
            mov ESI,2
            mov RDI,R14
            call .L_448ae0

            mov RAX,QWORD PTR [R14]
            lea R8,QWORD PTR [RIP+.L_45eaf0]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1363
            mov ESI,2
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            add RAX,QWORD PTR [R14+192]
            mov R15,RAX
            xor EAX,EAX
            call .L_448ae0

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45eb0e]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            push 2
            mov R9,R15
            mov ECX,1371
            mov ESI,3
            mov RDI,R14
            call .L_448d00

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [RBP-64]
            lea RDI,QWORD PTR [RBP-68]
            mov RCX,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_452530

            mov ECX,DWORD PTR [RBP-68]
            pop R9
            pop R10
            cmp ECX,2
            jle .L_45e95e

            mov EAX,DWORD PTR [RBP-64]
            cmp EAX,1
            jle .L_45e95e

            mov RDX,QWORD PTR [R14]
            movzx ESI,BYTE PTR [RDX+148]
            cmp ECX,ESI
            jg .L_45e95e

            movzx EDX,BYTE PTR [RDX+149]
            cmp EAX,EDX
            jg .L_45e95e

            lea R12,QWORD PTR [R15+3]
            movzx R15D,BYTE PTR [R15+2]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45eb30]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1393
            mov RDI,R14
            mov R9,R12
            mov ESI,3
            push R15
            mov QWORD PTR [RBP-88],R15
            mov R13,R15
            call .L_448d00

            mov RAX,QWORD PTR [R14+216]
            add RAX,QWORD PTR [R14+192]
            mov ECX,1398
            pop RDI
            pop R8
            lea R8,QWORD PTR [RIP+.L_45f0f8]
            sub RAX,R12
            cmp RAX,R15
            jl .L_45e26f

            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+728]
            call QWORD PTR [RIP+.L_677120]

            mov R15,QWORD PTR [R14+88]
            mov RSI,QWORD PTR [RBP-88]
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [R15+728],RAX
            mov RAX,QWORD PTR [R14+88]
            mov RAX,QWORD PTR [RAX+728]
            test RAX,RAX
            je .L_45e930

            mov RDI,RAX
            mov RCX,QWORD PTR [RBP-88]
            mov RSI,R12

            rep movsb 

            mov RDI,R14
            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],R13B
            mov DWORD PTR [R14+8],1
            call .L_450c20

            mov RDI,R14
            call .L_44da00

            lea R8,QWORD PTR [RIP+.L_45eb4f]
            mov ECX,1422
            jmp .L_45d543
.L_45e800:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1564
            jmp .L_45e26f
.L_45e811:

            lea R8,QWORD PTR [RIP+.L_45eca7]
            mov ECX,2627
            jmp .L_45e425
.L_45e822:

            lea R8,QWORD PTR [RIP+.L_45f048]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,EAX
            mov ECX,392
            mov ESI,1
            mov RDI,R14
            call .L_448c30

            jmp .L_45ce84
.L_45e84a:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1590
            jmp .L_45e26f
.L_45e85b:

            lea R8,QWORD PTR [RIP+.L_45eaa3]
            mov ECX,1692
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ESI,1
            mov RDI,R14
            jmp .L_45d473
.L_45e87b:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBX+RAX*1-2],DX
            mov R8,QWORD PTR [R14+88]
            jmp .L_45cc07
.L_45e890:

            lea R8,QWORD PTR [RIP+.L_45f1c8]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov R9D,R13D
            mov ECX,1632
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294938368
            call .L_448ae0

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_44f780

            jmp .L_45cf50
.L_45e8d1:

            lea R8,QWORD PTR [RIP+.L_45eca7]
            mov ECX,3087
            jmp .L_45e425
.L_45e8e2:

            lea R8,QWORD PTR [RIP+.L_45e9b1]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,723
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            mov EBX,4294937600
            jmp .L_45cf50
.L_45e90e:

            lea R8,QWORD PTR [RIP+.L_45f3f8]
            mov ECX,2328
            jmp .L_45e528
.L_45e91f:

            lea R8,QWORD PTR [RIP+.L_45f3a8]
            mov ECX,1888
            jmp .L_45dc58
.L_45e930:

            lea R8,QWORD PTR [RIP+.L_45eb37]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            movzx R9D,R13B
            mov ECX,1409
            mov ESI,1
            mov RDI,R14
            call .L_448ae0

            mov EBX,4294934784
            jmp .L_45cf50
.L_45e95e:

            lea R8,QWORD PTR [RIP+.L_45eb1d]
            lea RDX,QWORD PTR [RIP+.L_45edf8]
            mov ECX,1384
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_448ae0

            jmp .L_45e3f0
.L_45e985:
          .string "a"
.L_45e987:
          .string "no"
.L_45e98a:
          .string "client state: %d"
.L_45e99b:
          .string "=> write client hello"
.L_45e9b1:
          .string "no RNG provided"
.L_45e9c1:
          .string "client hello, random bytes"
.L_45e9dc:
          .string "client hello, session id"
.L_45e9f5:
          .string "no verify cookie to send"
.L_45ea0e:
          .string "client hello, cookie"
.L_45ea23:
          .string "buffer too small"
.L_45ea34:
          .string "allocation failed"
.L_45ea46:
          .string "mbedtls_ssl_write_record"
.L_45ea5f:
          .string "<= write client hello"
.L_45ea75:
          .string "=> parse server hello"
.L_45ea8b:
          .string "mbedtls_ssl_read_record"
.L_45eaa3:
          .string "bad server hello message"
.L_45eabc:
          .string "received hello verify request"
.L_45eada:
          .string "<= parse server hello"
.L_45eaf0:
          .string "=> parse hello verify request"
.L_45eb0e:
          .string "server version"
.L_45eb1d:
          .string "bad server version"
.L_45eb30:
          .string "cookie"
.L_45eb37:
          .string "alloc failed (%d bytes)"
.L_45eb4f:
          .string "<= parse hello verify request"
.L_45eb6d:
          .string "server hello, version"
.L_45eb83:
          .string "server hello, random bytes"
.L_45eb9e:
          .string "server hello, session id"
.L_45ebb7:
          .string "mbedtls_ssl_derive_keys"
.L_45ebcf:
          .string "%s session has been resumed"
.L_45ebeb:
          .string "found renegotiation extension"
.L_45ec09:
          .string "point format selected: %d"
.L_45ec23:
          .string "no point format in common"
.L_45ec3d:
          .string "found ecjpake_kkpp extension"
.L_45ec5a:
          .string "skip ecjpake kkpp extension"
.L_45ec76:
          .string "=> parse server key exchange"
.L_45ec93:
          .string "server key exchange"
.L_45eca7:
          .string "should never happen"
.L_45ecbb:
          .string "<= parse server key exchange"
.L_45ecd8:
          .string "=> parse certificate request"
.L_45ecf5:
          .string "=> parse server hello done"
.L_45ed10:
          .string "bad server hello done message"
.L_45ed2e:
          .string "<= parse server hello done"
.L_45ed49:
          .string "=> write client key exchange"
.L_45ed66:
          .string "mbedtls_ecjpake_derive_secret"
.L_45ed84:
          .string "<= write client key exchange"
.L_45eda1:
          .string "=> write certificate verify"
.L_45edbd:
          .string "handshake: done"
.L_45edcd:
          .string "invalid state %d"
.L_45edde:
          .string "ssl_generate_random"
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45edf8:
          .string "repo.patched/library/ssl_cli.c"
          .zero 1
.L_45ee18:
          .string "configured max major version is invalid, consider using mbedtls_ssl_config_defaults()"
          .zero 2
.L_45ee70:
          .string "client hello, max version: [%d:%d]"
          .zero 5
.L_45ee98:
          .string "client hello, session id len.: %d"
          .zero 6
.L_45eec0:
          .string "client hello, add ciphersuite: %04x"
          .zero 4
.L_45eee8:
          .string "client hello, got %d ciphersuites"
          .zero 6
.L_45ef10:
          .string "client hello, compress len.: %d"
.L_45ef30:
          .string "client hello, compress alg.: %d"
.L_45ef50:
          .string "client hello, adding supported_elliptic_curves extension"
          .zero 7
.L_45ef90:
          .string "invalid curve in ssl configuration"
          .zero 5
.L_45efb8:
          .string "client hello, adding supported_point_formats extension"
          .zero 1
.L_45eff0:
          .string "client hello, adding ecjpake_kkpp extension"
          .zero 4
.L_45f020:
          .string "generating new ecjpake parameters"
          .zero 6
.L_45f048:
          .string "mbedtls_ecjpake_write_round_one"
.L_45f068:
          .string "re-using cached ecjpake parameters"
          .zero 5
.L_45f090:
          .string "client hello, adding max_fragment_length extension"
          .zero 5
.L_45f0c8:
          .string "client hello, total extension length: %d"
          .zero 7
.L_45f0f8:
          .string "cookie length does not match incoming message size"
          .zero 5
.L_45f130:
          .string "server version out of bounds -  min: [%d:%d], server: [%d:%d], max: [%d:%d]"
          .zero 4
.L_45f180:
          .string "server hello, current time: %lu"
.L_45f1a0:
          .string "server hello, bad compression: %d"
          .zero 6
.L_45f1c8:
          .string "ciphersuite info for %04x not found"
          .zero 4
.L_45f1f0:
          .string "server hello, session id len.: %d"
          .zero 6
.L_45f218:
          .string "server hello, chosen ciphersuite: %04x"
          .zero 1
.L_45f240:
          .string "server hello, compress alg.: %d"
.L_45f260:
          .string "server hello, chosen ciphersuite: %s"
          .zero 3
.L_45f288:
          .string "server hello, total extension length: %d"
          .zero 7
.L_45f2b8:
          .string "non-zero length renegotiation info"
          .zero 5
.L_45f2e0:
          .string "found max_fragment_length extension"
          .zero 4
.L_45f308:
          .string "non-matching max fragment length extension"
          .zero 5
.L_45f338:
          .string "found supported_point_formats extension"
.L_45f360:
          .string "mbedtls_ecjpake_read_round_one"
          .zero 1
.L_45f380:

            jne .L_45f3f0
          .byte 0x6b
          .byte 0x6e
          .byte 0x6f
          .byte 0x77
          .byte 0x6e
          .byte 0x20
          .byte 0x65
          .byte 0x78
          .byte 0x74
          .byte 0x65
          .byte 0x6e
          .byte 0x73
          .byte 0x69
          .byte 0x6f
          .byte 0x6e
          .byte 0x20
          .byte 0x66
          .byte 0x6f
          .byte 0x75
          .byte 0x6e
          .byte 0x64
          .byte 0x3a
          .byte 0x20
          .byte 0x25
          .byte 0x64
          .byte 0x20
          .byte 0x28
          .byte 0x69
          .byte 0x67
          .byte 0x6e
          .byte 0x6f
          .byte 0x72
          .byte 0x69
          .byte 0x6e
          .byte 0x67
          .byte 0x29
          .byte 0x0
          .byte 0x0
.L_45f3a8:
          .string "legacy renegotiation, breaking off handshake"
          .zero 3
.L_45f3d8:
          .byte 0x62
          .byte 0x61
          .byte 0x64
          .byte 0x20
          .byte 0x73
          .byte 0x65
          .byte 0x72
          .byte 0x76
          .byte 0x65
          .byte 0x72
          .byte 0x20
          .byte 0x6b
          .byte 0x65
          .byte 0x79
          .byte 0x20
          .byte 0x65
          .byte 0x78
          .byte 0x63
          .byte 0x68
          .byte 0x61
          .byte 0x6e
          .byte 0x67
          .byte 0x65
          .byte 0x20
.L_45f3f0:

            insd DWORD PTR [RDI],DX
          .byte 0x65
          .byte 0x73
          .byte 0x73
          .byte 0x61
          .byte 0x67
          .byte 0x65
          .byte 0x0
.L_45f3f8:
          .string "server key exchange message must not be skipped"
.L_45f428:
          .string "mbedtls_ecjpake_read_round_two"
          .zero 1
.L_45f448:
          .string "<= skip parse certificate request"
          .zero 6
.L_45f470:
          .string "mbedtls_ecjpake_write_round_two"
.L_45f490:

            cmp AL,61
            and BYTE PTR [RBX+107],DH
          .byte 0x69
          .byte 0x70
          .byte 0x20
          .byte 0x77
          .byte 0x72
          .byte 0x69
          .byte 0x74
          .byte 0x65
          .byte 0x20
          .byte 0x63
          .byte 0x65
          .byte 0x72
          .byte 0x74
          .byte 0x69
          .byte 0x66
          .byte 0x69
          .byte 0x63
          .byte 0x61
          .byte 0x74
          .byte 0x65
          .byte 0x20
          .byte 0x76
          .byte 0x65
          .byte 0x72
          .byte 0x69
          .byte 0x66
          .byte 0x79
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45f4b4:
          .long .L_45cfd0-.L_45f4b4
          .long .L_45c970-.L_45f4b4
          .long .L_45cfe0-.L_45f4b4
          .long .L_45d498-.L_45f4b4
          .long .L_45d740-.L_45f4b4
          .long .L_45d7d0-.L_45f4b4
          .long .L_45d4b0-.L_45f4b4
          .long .L_45d560-.L_45f4b4
          .long .L_45d570-.L_45f4b4
          .long .L_45d678-.L_45f4b4
          .long .L_45d700-.L_45f4b4
          .long .L_45d710-.L_45f4b4
          .long .L_45d720-.L_45f4b4
          .long .L_45d730-.L_45f4b4
          .long .L_45cf90-.L_45f4b4
          .long .L_45cfc0-.L_45f4b4
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x66
          .byte 0x90
.L_45f500:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,168
.L_45f511:

            mov RAX,QWORD PTR [RSP+248]
            mov QWORD PTR [RSP],RDI
            mov DWORD PTR [RSP+48],ESI
            mov QWORD PTR [RSP+40],RCX
            mov QWORD PTR [RSP+32],R8
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP+56],RAX
            mov R14,QWORD PTR [RSP+224]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RSP+256]
            mov R13,QWORD PTR [RSP+232]
            mov R15,QWORD PTR [RSP+240]
            sub RAX,4
            cmp RAX,12
            ja .L_45facd

            test BYTE PTR [RSP+256],1
            jne .L_45facd

            mov RSI,QWORD PTR [RSP+32]
            lea RAX,QWORD PTR [RSI-7]
            cmp RAX,6
            ja .L_45facd

            cmp R14,65280
            ja .L_45facd

            mov EAX,15
            lea RBP,QWORD PTR [RSP+96]
            mov R12,RDX
            sub EAX,ESI
            test R14,R14
            mov RDX,RSI
            mov BYTE PTR [RSP+55],AL
            setne AL
            lea RDI,QWORD PTR [RBP+1]
            shl EAX,6
            mov ECX,EAX
            mov EAX,14
            sub EAX,ESI
            mov RSI,QWORD PTR [RSP+40]
            mov EBX,EAX
            mov BYTE PTR [RSP+54],AL
            mov RAX,QWORD PTR [RSP+256]
            sub RAX,2
            shr RAX,1
            lea EAX,DWORD PTR [RAX*8]
            or EAX,ECX
            mov ECX,15
            or EAX,EBX
            mov BYTE PTR [RSP+96],AL
            call __memcpy_chk@PLT

            lea RCX,QWORD PTR [RSP+95]
            movzx EDI,BL
            mov RAX,RBP
            mov QWORD PTR [RSP+24],RDI
            mov RDX,R12
            sub RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45f620:

            mov BYTE PTR [RAX+15],DL
            sub RAX,1
            shr RDX,8
            cmp RCX,RAX
            jne .L_45f620

            test RDX,RDX
            jne .L_45facd

            pxor XMM0,XMM0
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+112]
            movaps XMMWORD PTR [RSP+112],XMM0
            jmp .L_45f654
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45f650:

            movzx EDX,BYTE PTR [RBX+RAX*1]
.L_45f654:

            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_45f650

            lea RAX,QWORD PTR [RSP+88]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            mov R8,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_45a8a0

            test EAX,EAX
            mov ECX,EAX
            jne .L_45f990

            test R14,R14
            je .L_45f7f0

            lea RDI,QWORD PTR [RBP+2]
            mov RAX,R14
            xor ESI,ESI
            shr RAX,8
            mov QWORD PTR [RBP+2],0
            cmp R14,14
            mov WORD PTR [RDI+12],SI
            mov DWORD PTR [RDI+8],0
            mov ECX,14
            mov BYTE PTR [RSP+64],AL
            mov BYTE PTR [RSP+96],AL
            mov EAX,14
            mov RSI,QWORD PTR [RSP+8]
            cmovbe RAX,R14
            mov BYTE PTR [RSP+97],R14B
            mov RDX,RAX
            mov QWORD PTR [RSP+72],RAX
            call __memcpy_chk@PLT

            xor EAX,EAX
            movzx R8D,BYTE PTR [RSP+64]
            jmp .L_45f6fe
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_45f6f8:

            movzx R8D,BYTE PTR [RBP+RAX*1]
.L_45f6fe:

            xor BYTE PTR [RBX+RAX*1],R8B
            add RAX,1
            cmp RAX,16
            jne .L_45f6f8

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_45a8a0

            test EAX,EAX
            mov ECX,EAX
            jne .L_45f990

            mov RDI,QWORD PTR [RSP+72]
            mov RAX,R14
            sub RAX,RDI
            je .L_45f7f0

            mov RSI,QWORD PTR [RSP+8]
            mov QWORD PTR [RSP+72],R15
            mov R15,RBP
            mov RBP,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],R12
            mov R12,RAX
            mov QWORD PTR [RSP+64],R13
            add RSI,RDI
            mov R14,RSI
            nop
            nop
            nop
.L_45f768:

            pxor XMM0,XMM0
            cmp R12,16
            mov R13D,16
            cmovbe R13,R12
            mov ECX,16
            mov RSI,R14
            mov RDX,R13
            mov RDI,R15
            movaps XMMWORD PTR [R15],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
.L_45f798:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [R15+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_45f798

            mov RDI,QWORD PTR [RSP]
            mov R8,RBP
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_45a8a0

            test EAX,EAX
            jne .L_45fa60

            add R14,R13
            sub R12,R13
            jne .L_45f768

            mov RBP,R15
            mov R12,QWORD PTR [RSP+8]
            mov R13,QWORD PTR [RSP+64]
            mov R15,QWORD PTR [RSP+72]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45f7f0:

            movzx EAX,BYTE PTR [RSP+54]
            mov RDX,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+128]
            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [RSP+129]
            mov ECX,15
            mov QWORD PTR [RSP+8],R14
            mov BYTE PTR [RSP+128],AL
            call __memcpy_chk@PLT

            movzx EAX,BYTE PTR [RSP+55]
            mov RDI,QWORD PTR [RSP+32]
            xor ESI,ESI
            lea RDX,QWORD PTR [R14+RDI*1+1]
            cmp EAX,8
            jae .L_45f9bb

            test AL,4
            jne .L_45fad7

            test EAX,EAX
            je .L_45f856

            test AL,2
            mov BYTE PTR [RDX],0
            jne .L_45faf4
.L_45f856:

            test R12,R12
            mov BYTE PTR [RSP+143],1
            je .L_45faea

            lea RAX,QWORD PTR [RSP+127]
            mov QWORD PTR [RSP+32],RAX
            mov RAX,R15
            mov R15,R12
            mov R12,RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_45f880:

            mov EAX,DWORD PTR [RSP+48]
            cmp R15,16
            mov R14D,16
            cmovbe R14,R15
            test EAX,EAX
            je .L_45fa00
.L_45f89a:

            mov R8,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+8]
            mov RCX,RBP
            mov RDI,QWORD PTR [RSP]
            mov EDX,16
            call .L_45a8a0

            test EAX,EAX
            jne .L_45fa60

            xor EDX,EDX
            nop
.L_45f8c0:

            movzx ECX,BYTE PTR [R13+RDX*1]
            movzx ESI,AL
            add EAX,1
            xor CL,BYTE PTR [RSP+RSI*1+96]
            mov BYTE PTR [R12+RDX*1],CL
            movzx EDX,AL
            cmp RDX,R14
            jb .L_45f8c0

            cmp DWORD PTR [RSP+48],1
            je .L_45fa70
.L_45f8e7:

            mov RCX,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+8]
            add R12,R14
            add R13,R14
            sub R15,R14
            mov RSI,RCX
            sub RCX,QWORD PTR [RSP+24]
            nop
            nop
            nop
            nop
            nop
            nop
.L_45f908:

            add BYTE PTR [RDX+15],1
            jne .L_45f917

            sub RDX,1
            cmp RCX,RDX
            jne .L_45f908
.L_45f917:

            test R15,R15
            jne .L_45f880
.L_45f920:

            sub RSI,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RSP+8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_45f930:

            mov BYTE PTR [RAX+15],0
            sub RAX,1
            cmp RSI,RAX
            jne .L_45f930

            mov R8,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+8]
            mov RCX,RBP
            mov RDI,QWORD PTR [RSP]
            mov EDX,16
            call .L_45a8a0

            test EAX,EAX
            mov ECX,EAX
            jne .L_45f990

            xor EAX,EAX
.L_45f960:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_45f960

            mov RDX,QWORD PTR [RSP+256]
            mov RDI,QWORD PTR [RSP+56]
            mov RSI,RBX
            mov DWORD PTR [RSP],ECX
            call memcpy@PLT

            mov ECX,DWORD PTR [RSP]
.L_45f990:

            mov RDI,QWORD PTR [RSP+152]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_45fb00

            add RSP,168
.L_45f9b0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_45f9bb:

            lea RCX,QWORD PTR [RDX+8]
            mov QWORD PTR [RDX],0
            mov QWORD PTR [RAX+RDX*1-8],0
            and RCX,-8
            sub RDX,RCX
            add EAX,EDX
            and EAX,4294967288
            cmp EAX,8
            jb .L_45f856

            and EAX,4294967288
            xor EDX,EDX
.L_45f9e9:

            mov EDI,EDX
            add EDX,8
            cmp EDX,EAX
            mov QWORD PTR [RCX+RDI*1],RSI
            jb .L_45f9e9

            jmp .L_45f856
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_45fa00:

            pxor XMM0,XMM0
            mov ECX,16
            mov RDX,R14
            mov RSI,R13
            mov RDI,RBP
            movaps XMMWORD PTR [RBP],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
.L_45fa20:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_45fa20

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_45a8a0

            test EAX,EAX
            je .L_45f89a

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fa60:

            mov ECX,EAX
            jmp .L_45f990
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45fa70:

            pxor XMM0,XMM0
            mov ECX,16
            mov RDX,R14
            mov RSI,R12
            mov RDI,RBP
            movaps XMMWORD PTR [RBP],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
.L_45fa90:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_45fa90

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_45a8a0

            test EAX,EAX
            je .L_45f8e7

            mov ECX,EAX
            jmp .L_45f990
.L_45facd:

            mov ECX,4294967283
            jmp .L_45f990
.L_45fad7:

            mov DWORD PTR [RDX],0
            mov DWORD PTR [RAX+RDX*1-4],0
            jmp .L_45f856
.L_45faea:

            lea RSI,QWORD PTR [RSP+127]
            jmp .L_45f920
.L_45faf4:

            xor ECX,ECX
            mov WORD PTR [RAX+RDX*1-2],CX
            jmp .L_45f856
.L_45fb00:

            call __stack_chk_fail@PLT
.L_45fb05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fb10:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            ret 
.L_45fb28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fb30:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov EDX,1
            mov EDI,ESI
            mov ESI,ECX
            sub RSP,8
            mov R12D,ECX
            call .L_45a5f0

            test RAX,RAX
            je .L_45fba8

            cmp DWORD PTR [RAX+32],16
            mov RBX,RAX
            jne .L_45fba8

            mov RDI,RBP
            call .L_45a650

            mov RSI,RBX
            mov RDI,RBP
            call .L_45a6b0

            test EAX,EAX
            je .L_45fb88
.L_45fb76:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45fb88:

            add RSP,8
            mov EDX,R12D
            mov RSI,R13
            pop RBX
            mov RDI,RBP
            mov ECX,1
            pop RBP
            pop R12
            pop R13
            jmp .L_45a710
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_45fba8:

            mov EAX,4294967283
            jmp .L_45fb76
.L_45fbaf:

            nop
.L_45fbb0:

            push RBX
            mov RBX,RDI
            call .L_45a650

            lea RAX,QWORD PTR [RBX+80]
            nop
            nop
            nop
.L_45fbc0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_45fbc0

            pop RBX
            ret 
.L_45fbce:

            nop
            nop
.L_45fbd0:

            sub RSP,16
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RSI
            xor ESI,ESI
            call .L_45f500

            add RSP,56
            ret 
.L_45fbfe:

            nop
            nop
.L_45fc00:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            sub RSP,48
            mov RBP,QWORD PTR [RSP+112]
            mov RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+32],RAX
            xor EAX,EAX
            mov R12,QWORD PTR [RSP+104]
            push RBP
            lea RAX,QWORD PTR [RSP+16]
            push RAX
            push RBX
            push QWORD PTR [RSP+112]
            push R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            call .L_45f500

            add RSP,48
.L_45fc54:

            test EAX,EAX
            jne .L_45fca1

            test RBP,RBP
            je .L_45fca1

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fc68:

            movzx ESI,CL
            movzx EDX,BYTE PTR [R12+RDX*1]
            add ECX,1
            xor DL,BYTE PTR [RSP+RSI*1]
            movzx EDX,DL
            or EAX,EDX
            movzx EDX,CL
            cmp RDX,RBP
            jb .L_45fc68

            test EAX,EAX
            je .L_45fca1

            test R13,R13
            lea RAX,QWORD PTR [RBX+R13*1]
            je .L_45fc9c
.L_45fc90:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_45fc90
.L_45fc9c:

            mov EAX,4294967281
.L_45fca1:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_45fcbc

            add RSP,40
.L_45fcb5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_45fcbc:

            call __stack_chk_fail@PLT
.L_45fcc1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fcd0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            lea R12,QWORD PTR [RIP+.L_6767b0]
            push RBP
            lea RBP,QWORD PTR [RIP+.L_6767b8]
            push RBX
            mov R13D,EDI
            mov R14,RSI
            sub RBP,R12
            sub RSP,8
            sar RBP,3
            call 2768

            test RBP,RBP
            je .L_45fd26

            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fd10:

            mov RDX,R15
            mov RSI,R14
            mov EDI,R13D
            call QWORD PTR [R12+RBX*8]

            add RBX,1
            cmp RBP,RBX
            jne .L_45fd10
.L_45fd26:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_45fd35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_45fd40:

            ret 
.L_45fd42:
#===================================
# end section .text
#===================================

#===================================
.section .rodata ,"a",@progbits
.align 16
#===================================

.L_45fd50:
          .byte 0x1
          .byte 0x0
          .byte 0x2
          .byte 0x0
.L_45fd54:
          .string "rb"
.L_45fd57:
          .string "malloc error!"
.L_45fd65:
          .string "read error!"
#===================================
# end section .rodata
#===================================

#===================================
.section .gcc_except_table ,"a",@progbits
.align 8
#===================================

.L_476378:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_476396-.L_47637c
.L_47637c:
          .uleb128 .L_40663d-.L_406610
          .uleb128 .L_406655-.L_40663d
          .zero 2
          .uleb128 .L_406669-.L_406610
          .uleb128 .L_40682a-.L_406669
          .uleb128 .L_406910-.L_406610
          .zero 1
          .uleb128 .L_40682d-.L_406610
          .uleb128 .L_406832-.L_40682d
          .zero 2
          .uleb128 .L_406881-.L_406610
          .uleb128 .L_4068de-.L_406881
          .uleb128 .L_406910-.L_406610
          .zero 1
          .uleb128 .L_40691e-.L_406610
          .uleb128 .L_406923-.L_40691e
          .zero 2
.L_476396:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_4763b4-.L_47639a
.L_47639a:
          .uleb128 .L_406a62-.L_406a30
          .uleb128 .L_406a72-.L_406a62
          .zero 2
          .uleb128 .L_406a8a-.L_406a30
          .uleb128 .L_406aa9-.L_406a8a
          .uleb128 .L_406e23-.L_406a30
          .zero 1
          .uleb128 .L_406ad7-.L_406a30
          .uleb128 .L_406adc-.L_406ad7
          .zero 2
          .uleb128 .L_406b25-.L_406a30
          .uleb128 .L_406e0f-.L_406b25
          .uleb128 .L_406e23-.L_406a30
          .zero 1
          .uleb128 .L_406e31-.L_406a30
          .uleb128 .L_406e36-.L_406e31
          .zero 2
.L_4763b4:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_4763cb-.L_4763b8
.L_4763b8:
          .uleb128 .L_413bf8-.L_413bd0
          .uleb128 .L_413bfd-.L_413bf8
          .zero 2
          .uleb128 .L_413c08-.L_413bd0
          .uleb128 .L_413c5b-.L_413c08
          .uleb128 .L_413c85-.L_413bd0
          .zero 1
          .uleb128 .L_413c5e-.L_413bd0
          .uleb128 .L_413c63-.L_413c5e
          .zero 2
          .uleb128 .L_413c93-.L_413bd0
          .uleb128 .L_413c98-.L_413c93
          .zero 2
.L_4763cb:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_4763e9-.L_4763cf
.L_4763cf:
          .uleb128 .L_418109-.L_4180d0
          .uleb128 .L_418119-.L_418109
          .zero 2
          .uleb128 .L_418139-.L_4180d0
          .uleb128 .L_4182eb-.L_418139
          .uleb128 .L_4183a7-.L_4180d0
          .zero 1
          .uleb128 .L_4182f4-.L_4180d0
          .uleb128 .L_4182f9-.L_4182f4
          .zero 2
          .uleb128 .L_41832f-.L_4180d0
          .uleb128 .L_41837c-.L_41832f
          .uleb128 .L_4183a7-.L_4180d0
          .zero 1
          .uleb128 .L_4183b5-.L_4180d0
          .uleb128 .L_4183ba-.L_4183b5
          .zero 2
.L_4763e9:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_476404-.L_4763ed
.L_4763ed:
          .uleb128 .L_41ba92-.L_41ba60
          .uleb128 .L_41bab7-.L_41ba92
          .zero 2
          .uleb128 .L_41baf5-.L_41ba60
          .uleb128 .L_41bea1-.L_41baf5
          .uleb128 .L_41bea6-.L_41ba60
          .zero 1
          .uleb128 .L_41beb4-.L_41ba60
          .uleb128 .L_41beb9-.L_41beb4
          .zero 2
          .uleb128 .L_41bebc-.L_41ba60
          .uleb128 .L_41c05a-.L_41bebc
          .uleb128 .L_41bea6-.L_41ba60
          .zero 1
.L_476404:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_47641c-.L_476408
.L_476408:
          .uleb128 .L_42efcf-.L_42efa0
          .uleb128 .L_42efd4-.L_42efcf
          .zero 2
          .uleb128 .L_42efd7-.L_42efa0
          .uleb128 .L_42f07f-.L_42efd7
          .uleb128 .L_42f0c5-.L_42efa0
          .zero 1
          .uleb128 .L_42f098-.L_42efa0
          .uleb128 .L_42f09d-.L_42f098
          .zero 2
          .uleb128 .L_42f0d3-.L_42efa0
          .uleb128 .L_42f0d8-.L_42f0d3
          .zero 2
.L_47641c:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_476433-.L_476420
.L_476420:
          .uleb128 .L_4389d9-.L_4389a0
          .uleb128 .L_4389de-.L_4389d9
          .zero 2
          .uleb128 .L_4389e1-.L_4389a0
          .uleb128 .L_438a24-.L_4389e1
          .uleb128 .L_438a58-.L_4389a0
          .zero 1
          .uleb128 .L_438a27-.L_4389a0
          .uleb128 .L_438a2c-.L_438a27
          .zero 2
          .uleb128 .L_438a66-.L_4389a0
          .uleb128 .L_438a6b-.L_438a66
          .zero 2
.L_476433:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_476449-.L_476437
.L_476437:
          .uleb128 .L_43a89a-.L_43a870
          .uleb128 .L_43a89f-.L_43a89a
          .zero 2
          .uleb128 .L_43a8a2-.L_43a870
          .uleb128 .L_43a8c4-.L_43a8a2
          .uleb128 .L_43a8fd-.L_43a870
          .zero 1
          .uleb128 .L_43a8d4-.L_43a870
          .uleb128 .L_43a8d9-.L_43a8d4
          .zero 2
          .uleb128 .L_43a90b-.L_43a870
          .uleb128 .L_43a910-.L_43a90b
          .zero 2
.L_476449:
#===================================
# end section .gcc_except_table
#===================================

#===================================
.section .init_array ,"wa"
.align 8
#===================================

.L_6767b0:
          .quad .L_401120
#===================================
# end section .init_array
#===================================

#===================================
.section .fini_array ,"wa"
.align 8
#===================================

.L_6767b8:
#===================================
# end section .fini_array
#===================================

#===================================
.section .data.rel.ro ,"wa",@progbits
.align 16
#===================================

.L_6767c0:
          .byte 0xff
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0xe0
          .byte 0x67
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x68
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676800:
          .byte 0xff
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x20
          .byte 0x68
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x10
          .byte 0x1a
          .byte 0x41
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676840:
          .quad .L_4144ff
          .quad .L_414501
          .quad .L_414505
          .quad .L_414508
          .quad .L_41450c
          .quad .L_41450e
          .quad .L_414512
          .quad .L_414515
          .zero 8
          .quad .L_676d50
.L_676890:
          .quad .L_40fdb0
          .quad .L_42d5a0
          .quad .L_42d5c0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768b8:
          .quad .L_42f720
          .quad .L_430e70
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x98
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768d8:
          .quad .L_42f720
          .quad .L_430e70
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768f8:
          .quad .L_42f720
          .quad .L_430e70
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xb0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676918:
          .quad .L_431e80
          .quad .L_431ea0
          .zero 24
.L_676940:
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_443d87
          .byte 0x20
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_443d80
          .quad .L_443d60
          .quad .L_443d50
          .quad .L_443d40
          .quad .L_443d00
          .quad .L_443ce0
          .quad .L_443cd0
          .quad .L_443cc0
          .zero 8
.L_6769a0:
          .byte 0x5
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x8e
          .byte 0x3d
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1c
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_443d70
          .quad .L_443d60
          .quad .L_443d50
          .quad .L_443d30
          .quad .L_443d00
          .quad .L_443ce0
          .quad .L_443cd0
          .quad .L_443cc0
          .zero 8
.L_676a00:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x17
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .quad .L_45637f
          .zero 16
.L_676a20:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676a28:
          .quad .L_676c20
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676be0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676ba0
          .byte 0x2b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676b20
          .byte 0x2c
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676ae0
          .byte 0x2d
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676aa0
          .zero 32
.L_676aa0:
          .string "-"
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45abd5
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676ae0:
          .string ","
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45abe1
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676b20:
          .string "+"
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45abed
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ab50
          .quad .L_45ab50
          .quad .L_45ab20
          .quad .L_45ab00
          .zero 16
.L_676ba0:
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45abf9
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676be0:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ac05
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676c20:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ac11
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45abd0
          .quad .L_45abc0
          .quad .L_45abb0
          .quad .L_45ab80
          .quad .L_45ab60
.L_676c90:
          .quad .L_45bf57
          .quad .L_45bf5e
.L_676ca0:
          .byte 0xff
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45c888
          .byte 0x2b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xb
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45c8af
          .zero 32
          .quad _ZTVN10__cxxabiv117__class_type_infoE+16
          .quad .L_4119e0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_411a00
          .byte 0x0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676d38:
          .quad __cxa_pure_virtual
          .quad __cxa_pure_virtual
          .quad __cxa_pure_virtual
.L_676d50:
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_42da50
          .byte 0x10
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_4312b0
          .byte 0x0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_4312d0
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_4312e0
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_432570
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676dd0:
          .quad .L_401250
          .quad .L_401260
          .quad .L_401240
_DYNAMIC:
#===================================
# end section .data.rel.ro
#===================================

#===================================
.data
.align 16
#===================================

          .zero 16
.L_677110:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677118:
          .quad __gxx_personality_v0
.L_677120:
          .quad .L_443db0
.L_677128:
          .quad .L_443da0
.L_677130:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677140:
          .byte 0x2b
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x2c
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677150:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677158:
#===================================
# end section .data
#===================================

#===================================
.bss
.align 16
#===================================

.L_677160:
          .zero 32
.L_677180:
          .zero 29792
.L_67e5e0:
          .zero 8
.L_67e5e8:
          .zero 8
.L_67e5f0:
          .zero 8
.L_67e5f8:
          .zero 4
.L_67e5fc:
          .zero 4
.L_67e600:
          .zero 16
.L_67e610:
          .zero 32
.L_67e630:
#===================================
# end section .bss
#===================================
