#===================================
.intel_syntax noprefix
#===================================

nop
nop
nop
nop
nop
nop
nop
nop

#===================================
.section .interp ,"a",@progbits
.align 8
#===================================

          .byte 0x2f
          .byte 0x6c
          .byte 0x69
          .byte 0x62
          .byte 0x36
          .byte 0x34
          .byte 0x2f
          .byte 0x6c
          .byte 0x64
          .byte 0x2d
          .byte 0x6c
          .byte 0x69
          .byte 0x6e
          .byte 0x75
          .byte 0x78
          .byte 0x2d
          .byte 0x78
          .byte 0x38
          .byte 0x36
          .byte 0x2d
          .byte 0x36
          .byte 0x34
          .byte 0x2e
          .byte 0x73
          .byte 0x6f
          .byte 0x2e
          .byte 0x32
          .byte 0x0
#===================================
# end section .interp
#===================================

#===================================
.text
.align 16
#===================================

.L_400f00:

            lea RCX,QWORD PTR [RIP+.L_457fa0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579da]
            sub RSP,8
            mov EDX,350
            call __assert_fail@PLT
.L_400f23:

            nop
.L_400f24:

            lea RCX,QWORD PTR [RIP+.L_4582a0]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458055]
            sub RSP,8
            mov EDX,997
            call __assert_fail@PLT
.L_400f47:

            nop
.L_400f48:

            lea RCX,QWORD PTR [RIP+.L_45a860]
            lea RSI,QWORD PTR [RIP+.L_45a843]
            lea RDI,QWORD PTR [RIP+.L_45a854]
            sub RSP,8
            mov EDX,523
            call __assert_fail@PLT
.L_400f6b:

            nop
            nop
            nop
            nop
            nop
#-----------------------------------
.align 16
.globl main
.type main, @notype
#-----------------------------------
main:

            cmp EDI,1
            push R12
            push RBP
            push RBX
.L_400f77:

            jle .L_401001

            mov RDI,QWORD PTR [RSI+8]
            lea RSI,QWORD PTR [RIP+.L_457944]
            call fopen@PLT

            test RAX,RAX
            mov RBX,RAX
            je .L_401001

            xor ESI,ESI
            mov EDX,2
            mov RDI,RAX
            call fseek@PLT

            mov RDI,RBX
            call ftell@PLT

            mov RDI,RBX
            mov R12,RAX
            call rewind@PLT

            mov RDI,R12
            call malloc@PLT

            test RAX,RAX
            mov RBP,RAX
            je .L_401021

            mov RCX,RBX
            mov RDX,R12
            mov ESI,1
            mov RDI,RAX
            call fread@PLT

            cmp R12,RAX
            jne .L_40100b

            mov RSI,R12
            mov RDI,RBP
            call .L_401130

            mov RDI,RBP
            call free@PLT

            mov RDI,RBX
            call fclose@PLT

            pop RBX
.L_400ffb:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_401001:

            mov EDI,1
            call exit@PLT
.L_40100b:

            lea RDI,QWORD PTR [RIP+.L_457955]
            call puts@PLT

            mov EDI,3
            call exit@PLT
.L_401021:

            lea RDI,QWORD PTR [RIP+.L_457947]
            call puts@PLT

            mov EDI,2
            call exit@PLT
.L_401037:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401070:

            ret 
.L_401072:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401080:

            push RBP
            mov EAX,OFFSET .L_677158
            cmp RAX,OFFSET .L_677158
            mov RBP,RSP
            je .L_4010a8

            mov EAX,0
            test RAX,RAX
            je .L_4010a8

            pop RBP
            mov EDI,OFFSET .L_677158
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4010a8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4010b0:

            mov ESI,OFFSET .L_677158
            push RBP
            sub RSI,OFFSET .L_677158
            mov RBP,RSP
            sar RSI,3
            mov RAX,RSI
            shr RAX,63
            add RSI,RAX
            sar RSI,1
            je .L_4010e8

            mov EAX,0
            test RAX,RAX
            je .L_4010e8

            pop RBP
            mov EDI,OFFSET .L_677158
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4010e8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401120:

            push RBP
            mov RBP,RSP
            pop RBP
            jmp .L_4010b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401130:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,32
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp RSI,127
            jbe .L_401178
.L_401152:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_401226

            add RSP,32
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_401178:

            mov RBX,RSI
            mov R12,RDI
            mov R14,RSP
            call .L_401230

            call .L_401580

            mov ESI,57005
            mov RBP,RAX
            mov RDI,RAX
            call .L_4019c0

            mov ESI,1
            mov RDI,RBP
            call .L_401620

            mov ESI,1
            mov RDI,RBP
            call .L_402260

            mov RDI,RBP
            call .L_402560

            mov RDI,RBX
            call malloc@PLT

            mov R13,RAX
            mov RDX,RBX
            xor EAX,EAX
            mov RSI,R12
            mov RDI,R13
            mov QWORD PTR [RSP+10],0
            mov QWORD PTR [RSP],R13
            mov DWORD PTR [R14+18],0
            mov WORD PTR [R14+22],AX
            mov BYTE PTR [RSP+9],11
            mov BYTE PTR [RSP+8],BL
            call memcpy@PLT

            xor EDX,EDX
            mov RSI,R14
            mov RDI,RBP
            call .L_407bb0

            mov RDI,R13
            call free@PLT

            test RBP,RBP
            je .L_401152

            mov RDI,RBP
            call .L_4015a0

            jmp .L_401152
.L_401226:

            call __stack_chk_fail@PLT
.L_40122b:

            nop
            nop
            nop
            nop
            nop
.L_401230:

            mov DWORD PTR [RIP+.L_677110],1
            ret 
.L_40123b:

            nop
            nop
            nop
            nop
            nop
.L_401240:

            xor EAX,EAX
            ret 
.L_401243:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401250:

            ret 
.L_401252:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401260:

            ret 
.L_401262:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401270:

            xor EAX,EAX
            ret 
.L_401273:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401280:

            ret 
.L_401282:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401290:

            ret 
.L_401292:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012a0:

            ret 
.L_4012a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012b0:

            xor EAX,EAX
            ret 
.L_4012b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012c0:

            ret 
.L_4012c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012d0:

            ret 
.L_4012d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012e0:

            ret 
.L_4012e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4012f0:

            ret 
.L_4012f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401300:

            ret 
.L_401302:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401310:

            ret 
.L_401312:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401320:

            mov EAX,1
            ret 
.L_401326:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401330:

            xor EAX,EAX
            ret 
.L_401333:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401340:

            xor EAX,EAX
            ret 
.L_401343:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401350:

            xor EAX,EAX
            ret 
.L_401353:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401360:

            xor EAX,EAX
            ret 
.L_401363:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401370:

            xor EAX,EAX
            ret 
.L_401373:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401380:

            xor EAX,EAX
            ret 
.L_401383:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401390:

            xor EAX,EAX
            ret 
.L_401393:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013a0:

            xor EAX,EAX
            ret 
.L_4013a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013b0:

            xor EAX,EAX
            ret 
.L_4013b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013c0:

            ret 
.L_4013c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013d0:

            xor EAX,EAX
            ret 
.L_4013d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013e0:

            xor EAX,EAX
            ret 
.L_4013e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4013f0:

            xor EAX,EAX
            ret 
.L_4013f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401400:

            xor EAX,EAX
            ret 
.L_401403:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401410:

            ret 
.L_401412:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401420:

            ret 
.L_401422:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401430:

            mov EAX,12
            ret 
.L_401436:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401440:

            mov EAX,12
            ret 
.L_401446:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401450:

            xor EAX,EAX
            ret 
.L_401453:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401460:

            mov EAX,DWORD PTR [RIP+.L_677110]
            imul RAX,RAX,33614
            mov EDX,EAX
            shr RAX,32
            shr EDX,1
            add EAX,EDX
            mov EDX,EAX
            and EDX,2147483647
            add EDX,1
            test EAX,EAX
            cmovs EAX,EDX
            mov DWORD PTR [RIP+.L_677110],EAX
            ret 
.L_40148e:

            nop
            nop
.L_401490:

            test SI,SI
            je .L_4014e4

            sub ESI,1
            mov EAX,DWORD PTR [RIP+.L_677110]
            movzx ESI,SI
            lea RCX,QWORD PTR [RDI+RSI*1+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4014b0:

            imul RAX,RAX,33614
            mov EDX,EAX
            shr RAX,32
            shr EDX,1
            add EAX,EDX
            mov EDX,EAX
            and EDX,2147483647
            add EDX,1
            test EAX,EAX
            cmovs RAX,RDX
            add RDI,1
            mov BYTE PTR [RDI-1],AL
            cmp RCX,RDI
            jne .L_4014b0

            mov DWORD PTR [RIP+.L_677110],EAX
.L_4014e4:

            xor EAX,EAX
            ret 
.L_4014e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4014f0:

            ret 
.L_4014f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401500:

            xor EAX,EAX
            ret 
.L_401503:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401510:

            xor EAX,EAX
            ret 
.L_401513:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401520:

            xor EAX,EAX
            ret 
.L_401523:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401530:

            mov EAX,23
            ret 
.L_401536:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401540:

            xor EAX,EAX
            ret 
.L_401543:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401550:

            xor EAX,EAX
            ret 
.L_401553:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401560:

            xor EAX,EAX
            ret 
.L_401563:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401570:

            ret 
.L_401572:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401580:

            jmp .L_4028b0
.L_401585:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401590:

            movzx EAX,BYTE PTR [RDI+29792]
            ret 
.L_401598:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015a0:

            jmp .L_4028f0
.L_4015a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015b0:

            add RDI,32
            jmp .L_402cb0
.L_4015b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015c0:

            add RDI,32
            jmp .L_402d00
.L_4015c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015d0:

            jmp .L_402920
.L_4015d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015e0:

            jmp .L_402930
.L_4015e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4015f0:

            jmp .L_402950
.L_4015f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401600:

            mov EAX,1
            ret 
.L_401606:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401610:

            mov EAX,33
            ret 
.L_401616:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401620:

            test SIL,SIL
            movzx EAX,BYTE PTR [RDI+24336]
            je .L_401640

            test AL,AL
            jne .L_401650

            add RDI,12720
            jmp .L_42b7f0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401640:

            test AL,AL
            jne .L_401650

            add RDI,12720
            jmp .L_42b880
.L_401650:

            mov EAX,13
            ret 
.L_401656:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401660:

            movzx EAX,BYTE PTR [RDI+20840]
            ret 
.L_401668:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401670:

            mov RAX,QWORD PTR [RDI+12728]
            ret 
.L_401678:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401680:

            add RDI,12720
            jmp .L_410660
.L_40168c:

            nop
            nop
            nop
            nop
.L_401690:

            add RDI,12720
            jmp .L_410770
.L_40169c:

            nop
            nop
            nop
            nop
.L_4016a0:

            mov RAX,QWORD PTR [RDI+12736]
            ret 
.L_4016a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016b0:

            add RDI,12720
            jmp .L_4103f0
.L_4016bc:

            nop
            nop
            nop
            nop
.L_4016c0:

            add RDI,12720
            jmp .L_4104a0
.L_4016cc:

            nop
            nop
            nop
            nop
.L_4016d0:

            movzx EAX,BYTE PTR [RDI+12745]
            ret 
.L_4016d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016e0:

            mov BYTE PTR [RDI+12745],SIL
            ret 
.L_4016e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4016f0:

            jmp .L_42cb30
.L_4016f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401700:

            jmp .L_42cda0
.L_401705:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401710:

            mov RAX,QWORD PTR [RDI+14376]
            mov QWORD PTR [RSI+8],RAX
            xor EAX,EAX
            xor BYTE PTR [RSI+8],2
            ret 
.L_401722:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401730:

            mov RAX,RDI
            mov RDI,RDX
            mov RDX,RSI
            mov RSI,RAX
            jmp .L_42cf70
.L_401741:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401750:

            add RDI,12400
            jmp .L_40d260
.L_40175c:

            nop
            nop
            nop
            nop
.L_401760:

            movzx EAX,BYTE PTR [RDI+12401]
            ret 
.L_401768:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401770:

            mov BYTE PTR [RDI+12401],SIL
            ret 
.L_401778:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401780:

            movsx EDX,BYTE PTR [RDI+12744]
            add RDI,12400
            jmp .L_40ebf0
.L_401793:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4017a0:

            push RBX
            add RDI,24624
            xor EDX,EDX
            mov EBX,ESI
            xor ESI,ESI
            call .L_403740

            test RAX,RAX
            je .L_4017c8

            movzx ESI,BYTE PTR [RAX+78]
            shl EBX,7
            and ESI,127
            or ESI,EBX
            mov BYTE PTR [RAX+78],SIL
.L_4017c8:

            pop RBX
            ret 
.L_4017ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4017d0:

            movzx ESI,SI
            add RDI,14080
            jmp .L_40f5d0
.L_4017df:

            nop
.L_4017e0:

            movzx ESI,SI
            add RDI,14080
            jmp .L_40f620
.L_4017ef:

            nop
.L_4017f0:

            add RDI,14080
            jmp .L_40f650
.L_4017fc:

            nop
            nop
            nop
            nop
.L_401800:

            jmp .L_40f290
.L_401805:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401810:

            mov RAX,RDI
            mov RDI,RSI
            mov RSI,RAX
            jmp .L_40f2d0
.L_40181e:

            nop
            nop
.L_401820:

            test RDI,RDI
            je .L_401830

            test RSI,RSI
            je .L_401830

            jmp .L_40f240
          .byte 0x90
.L_401830:

            xor EAX,EAX
            ret 
.L_401833:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401840:

            jmp .L_40ede0
.L_401845:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401850:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,88
.L_401859:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_401883

            mov RBP,RSP
            lea RDI,QWORD PTR [RDI+14280]
            mov RDX,RBP
            call .L_405430

            mov RSI,RBP
.L_401883:

            mov RDI,RBX
            call .L_402990

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4018a2

            add RSP,88
.L_40189f:

            pop RBX
            pop RBP
            ret 
.L_4018a2:

            call __stack_chk_fail@PLT
.L_4018a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018b0:

            jmp .L_4029c0
.L_4018b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018c0:

            movzx EAX,BYTE PTR [RDI+14388]
            ret 
.L_4018c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4018d0:

            mov EDX,DWORD PTR [RDI+15300]
            mov EAX,13
            test EDX,EDX
            jne .L_401908

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            movzx ESI,SIL
            sub RSP,16
            call .L_405ba0

            test EAX,EAX
            je .L_401910

            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401908:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_401910:

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
.L_401936:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401940:

            lea RAX,QWORD PTR [RDI+14376]
            ret 
.L_401948:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401950:

            test RSI,RSI
            je .L_401990

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401980

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            call .L_405760

            lea RDI,QWORD PTR [RBX+15288]
            pop RBX
            jmp .L_415450
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401980:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401990:

            mov EAX,7
            ret 
.L_401996:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019a0:

            jmp .L_4012d0
.L_4019a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019b0:

            movzx EAX,WORD PTR [RDI+14386]
            ret 
.L_4019b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4019c0:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401a10

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            movzx ESI,SI
            sub RSP,16
            call .L_405a50

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401a10:

            mov EAX,13
            ret 
.L_401a16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a20:

            add RDI,15240
            jmp .L_4123a0
.L_401a2c:

            nop
            nop
            nop
            nop
.L_401a30:

            add RDI,15240
            jmp .L_412780
.L_401a3c:

            nop
            nop
            nop
            nop
.L_401a40:

            add RDI,15240
            jmp .L_412560
.L_401a4c:

            nop
            nop
            nop
            nop
.L_401a50:

            movzx EAX,WORD PTR [RDI+14384]
            ret 
.L_401a58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a60:

            mov EAX,DWORD PTR [RDI+14816]
            ret 
.L_401a67:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401a70:

            add RDI,14496
            jmp .L_407fc0
.L_401a7c:

            nop
            nop
            nop
            nop
.L_401a80:

            test RSI,RSI
            je .L_401a98

            add RDI,14496
            jmp .L_407fe0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401a98:

            mov EAX,7
            ret 
.L_401a9e:

            nop
            nop
.L_401aa0:

            test RSI,RSI
            je .L_401ab8

            add RDI,14496
            jmp .L_408060
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401ab8:

            mov EAX,7
            ret 
.L_401abe:

            nop
            nop
.L_401ac0:

            add RDI,14496
            jmp .L_4080a0
.L_401acc:

            nop
            nop
            nop
            nop
.L_401ad0:

            test RSI,RSI
            je .L_401af0

            test RDX,RDX
            je .L_401af0

            add RDI,14496
            jmp .L_4080c0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401af0:

            mov EAX,7
            ret 
.L_401af6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401b00:

            movsx EDX,DL
            add RDI,14496
            jmp .L_408150
.L_401b0f:

            nop
.L_401b10:

            add RDI,14496
            jmp .L_4081e0
.L_401b1c:

            nop
            nop
            nop
            nop
.L_401b20:

            add RDI,14496
            jmp .L_408220
.L_401b2c:

            nop
            nop
            nop
            nop
.L_401b30:

            test RSI,RSI
            je .L_401b50

            test RDX,RDX
            je .L_401b50

            add RDI,14496
            jmp .L_408250
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401b50:

            mov EAX,7
            ret 
.L_401b56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401b60:

            push RBX
            add RDI,14280
            mov EBX,ESI
            call .L_407e20

            movsx ESI,BL
            movsx EDI,AL
            pop RBX
            jmp .L_413260
.L_401b7b:

            nop
            nop
            nop
            nop
            nop
.L_401b80:

            push RBX
            add RDI,14280
            mov EBX,ESI
            call .L_407e20

            movzx ESI,BL
            movsx EDI,AL
            pop RBX
            jmp .L_4132a0
.L_401b9b:

            nop
            nop
            nop
            nop
            nop
.L_401ba0:

            add RDI,14280
            jmp .L_406810
.L_401bac:

            nop
            nop
            nop
            nop
.L_401bb0:

            add RDI,14280
            jmp .L_406820
.L_401bbc:

            nop
            nop
            nop
            nop
.L_401bc0:

            cmp BYTE PTR [RDI+20840],0
            jne .L_401be8

            sub RSP,8
            movzx ESI,SIL
            add RDI,14280
            call .L_406840

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401be8:

            mov EAX,13
            ret 
.L_401bee:

            nop
            nop
.L_401bf0:

            lea RAX,QWORD PTR [RDI+14840]
            ret 
.L_401bf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c00:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RSI,RCX
            mov RDX,R8
            call .L_402980

            movzx EDX,BX
            lea RDI,QWORD PTR [RBP+14280]
            mov R8,RBP
            pop RBX
            mov ESI,R12D
            lea RCX,QWORD PTR [RIP+.L_401850]
            pop RBP
            pop R12
            jmp .L_405c90
.L_401c37:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c40:

            add RDI,14280
            jmp .L_4053d0
.L_401c4c:

            nop
            nop
            nop
            nop
.L_401c50:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RSI,RCX
            mov RDX,R8
            call .L_4029b0

            movzx EDX,BX
            lea RDI,QWORD PTR [RBP+14280]
            mov R8,RBP
            pop RBX
            mov ESI,R12D
            lea RCX,QWORD PTR [RIP+.L_4018b0]
            pop RBP
            pop R12
            jmp .L_405d20
.L_401c87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401c90:

            add RDI,14280
            jmp .L_4053f0
.L_401c9c:

            nop
            nop
            nop
            nop
.L_401ca0:

            add RDI,14280
            jmp .L_405410
.L_401cac:

            nop
            nop
            nop
            nop
.L_401cb0:

            add RDI,14280
            jmp .L_405ae0
.L_401cbc:

            nop
            nop
            nop
            nop
.L_401cc0:

            movzx EAX,WORD PTR [RDI+14972]
            ret 
.L_401cc8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401cd0:

            mov EAX,DWORD PTR [RDI+15608]
            ret 
.L_401cd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401ce0:

            add RDI,15288
            jmp .L_419ec0
.L_401cec:

            nop
            nop
            nop
            nop
.L_401cf0:

            lea RAX,QWORD PTR [RDI+14406]
            ret 
.L_401cf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401d00:

            push RBP
            push RBX
            sub RSP,24
.L_401d06:

            mov EDX,DWORD PTR [RDI+15300]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,13
            test EDX,EDX
            jne .L_401d79

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            mov RBP,RSI
            call .L_405a70

            mov EAX,DWORD PTR [RBP]
            mov RSI,RSP
            lea RDI,QWORD PTR [RBX+15288]
            mov BYTE PTR [RSP],253
            mov DWORD PTR [RSP+1],EAX
            movzx EAX,BYTE PTR [RBP+4]
            mov BYTE PTR [RSI+5],AL
            xor EAX,EAX
            mov WORD PTR [RSP+6],AX
            call .L_4154c0

            lea RDI,QWORD PTR [RBX+13800]
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            xor EAX,EAX
.L_401d79:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_401d90

            add RSP,24
.L_401d8d:

            pop RBX
            pop RBP
            ret 
.L_401d90:

            call __stack_chk_fail@PLT
.L_401d95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401da0:

            test RSI,RSI
            je .L_401db8

            add RDI,15288
            jmp .L_415f80
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_401db8:

            mov EAX,7
            ret 
.L_401dbe:

            nop
            nop
.L_401dc0:

            sub RSP,24
.L_401dc4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDI+15344]
            mov BYTE PTR [RSP+7],0
            test AL,8
            je .L_401de9

            mov BYTE PTR [RSP+7],1
.L_401de9:

            test AL,4
            je .L_401df2

            or BYTE PTR [RSP+7],2
.L_401df2:

            test AL,2
            je .L_401dfb

            or BYTE PTR [RSP+7],4
.L_401dfb:

            test AL,1
            je .L_401e04

            or BYTE PTR [RSP+7],8
.L_401e04:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            movzx EAX,BYTE PTR [RSP+7]
            jne .L_401e1e

            add RSP,24
.L_401e1d:

            ret 
.L_401e1e:

            call __stack_chk_fail@PLT
.L_401e23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401e30:

            mov EAX,ESI
            and EAX,1
            shl EAX,3
            mov EDX,EAX
            or EDX,4
            test SIL,2
            cmovne EAX,EDX
            mov EDX,EAX
            or EDX,2
            test SIL,4
            cmovne EAX,EDX
            mov EDX,EAX
            or EDX,1
            and ESI,8
            cmovne EAX,EDX
            add RDI,15288
            movzx ESI,AL
            jmp .L_419f20
.L_401e6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_401e70:

            add RDI,14088
            jmp .L_4129e0
.L_401e7c:

            nop
            nop
            nop
            nop
.L_401e80:

            test RSI,RSI
            je .L_401ed8

            mov EDX,DWORD PTR [RDI+15300]
            mov EAX,13
            test EDX,EDX
            jne .L_401ed0

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14088]
            sub RSP,16
            call .L_412ac0

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_401ed0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_401ed8:

            mov EAX,7
            ret 
.L_401ede:

            nop
            nop
.L_401ee0:

            add RDI,15288
            jmp .L_415f70
.L_401eec:

            nop
            nop
            nop
            nop
.L_401ef0:

            add RDI,15288
            jmp .L_4154b0
.L_401efc:

            nop
            nop
            nop
            nop
.L_401f00:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401f48

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+15288]
            sub RSP,16
            call .L_4154c0

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401f48:

            mov EAX,13
            ret 
.L_401f4e:

            nop
            nop
.L_401f50:

            add RDI,15288
            jmp .L_415440
.L_401f5c:

            nop
            nop
            nop
            nop
.L_401f60:

            lea RAX,QWORD PTR [RDI+14389]
            ret 
.L_401f68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401f70:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_401fb8

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14280]
            sub RSP,16
            call .L_405800

            lea RDI,QWORD PTR [RBX+13800]
            mov DWORD PTR [RSP+12],EAX
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_401fb8:

            mov EAX,13
            ret 
.L_401fbe:

            nop
            nop
.L_401fc0:

            mov EAX,DWORD PTR [RDI+14104]
            ret 
.L_401fc7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401fd0:

            add RDI,14088
            jmp .L_412d70
.L_401fdc:

            nop
            nop
            nop
            nop
.L_401fe0:

            mov EAX,DWORD PTR [RDI+14196]
            ret 
.L_401fe7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_401ff0:

            mov DWORD PTR [RDI+14196],ESI
            ret 
.L_401ff7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402000:

            add RDI,15288
            jmp .L_415e50
.L_40200c:

            nop
            nop
            nop
            nop
.L_402010:

            add RDI,15288
            xor ESI,ESI
            jmp .L_415170
.L_40201e:

            nop
            nop
.L_402020:

            test RDX,RDX
            je .L_402040

            test RSI,RSI
            je .L_402040

            add RDI,15288
            jmp .L_41e300
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402040:

            mov EAX,7
            ret 
.L_402046:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402050:

            mov EAX,DWORD PTR [RDI+15300]
            ret 
.L_402057:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402060:

            test RSI,RSI
            je .L_402078

            add RDI,15288
            jmp .L_416120
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402078:

            mov EAX,7
            ret 
.L_40207e:

            nop
            nop
.L_402080:

            sub RSP,8
            add RDI,15288
            call .L_4160f0

            movzx EAX,BYTE PTR [RAX+9]
            add RSP,8
            ret 
.L_402099:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4020a0:

            sub RSP,8
            add RDI,15288
            call .L_4160f0

            movzx EAX,BYTE PTR [RAX+6]
            add RSP,8
            ret 
.L_4020b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4020c0:

            sub RSP,8
            add RDI,15288
            call .L_4160f0

            mov EAX,DWORD PTR [RAX+2]
            add RSP,8
            bswap EAX
            ret 
.L_4020da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4020e0:

            add RDI,15288
            jmp .L_415a90
.L_4020ec:

            nop
            nop
            nop
            nop
.L_4020f0:

            test RSI,RSI
            je .L_4021a0

            push RBP
            push RBX
            add RDI,15288
            mov RBX,RSI
            sub RSP,8
.L_402109:

            call .L_41ad80

            mov RBP,RAX
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RBX],RAX
            movzx EAX,WORD PTR [RBP+24]
            mov WORD PTR [RBX+8],AX
            movzx EAX,WORD PTR [RBP+24]
            sar EAX,10
            mov BYTE PTR [RBX+10],AL
            movzx EAX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+11],AL
            movzx EAX,BYTE PTR [RBP+37]
            shr AL,2
            and EAX,15
            mov BYTE PTR [RBX+12],AL
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+13],AL
            movzx EAX,BYTE PTR [RBP+37]
            and EAX,3
            mov BYTE PTR [RBX+14],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            mul EDX
            shr EDX,6
            mov BYTE PTR [RBX+15],DL
            movzx EAX,BYTE PTR [RBP+37]
            shr AL,6
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+16]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EDX,7
            cmp DL,7
            sete DL
            and EAX,4294967293
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            add RSP,8
.L_402196:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4021a0:

            mov EAX,7
            ret 
.L_4021a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4021b0:

            test RSI,RSI
            je .L_4021e0

            push RBX
            add RDI,15288
            mov RBX,RSI
            call .L_41ad80

            lea RDI,QWORD PTR [RAX+28]
            call .L_412ff0

            cmp AL,127
            mov BYTE PTR [RBX],AL
            sete AL
            movzx EAX,AL
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4021e0:

            mov EAX,7
            ret 
.L_4021e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4021f0:

            test RSI,RSI
            je .L_402218

            push RBX
            add RDI,15288
            mov RBX,RSI
            call .L_41ad80

            movzx EAX,BYTE PTR [RAX+31]
            cmp AL,127
            mov BYTE PTR [RBX],AL
            sete AL
            movzx EAX,AL
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402218:

            mov EAX,7
            ret 
.L_40221e:

            nop
            nop
.L_402220:

            lea RAX,QWORD PTR [RIP+.L_457980]
            ret 
.L_402228:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402230:

            add RDI,20696
            jmp .L_42a230
.L_40223c:

            nop
            nop
            nop
            nop
.L_402240:

            movzx ECX,CL
            add RDI,20696
            jmp .L_42a240
.L_40224f:

            nop
.L_402250:

            movzx ECX,CL
            add RDI,20696
            jmp .L_42ae20
.L_40225f:

            nop
.L_402260:

            test SIL,SIL
            je .L_402290

            cmp WORD PTR [RDI+14386],-1
            je .L_402288

            add RDI,15288
            xor EDX,EDX
            mov ESI,1
            jmp .L_419c10

            nop
            nop
            nop
            nop
            nop
            nop
.L_402288:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x90
.L_402290:

            add RDI,15288
            mov ESI,1
            jmp .L_415330
.L_4022a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4022b0:

            sub RSP,24
.L_4022b4:

            xor EDX,EDX
            mov ESI,6
            lea RCX,QWORD PTR [RSP+5]
            lea R8,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+5],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1
            mov WORD PTR [RSP+6],AX
            call .L_401530

            xor EDX,EDX
            test EAX,EAX
            jne .L_4022f7

            cmp BYTE PTR [RSP+5],0
            setne DL
.L_4022f7:

            mov RSI,QWORD PTR [RSP+8]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_40230e

            add RSP,24
.L_40230d:

            ret 
.L_40230e:

            call __stack_chk_fail@PLT
.L_402313:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402320:

            sub RSP,24
            mov ECX,1
            lea RDX,QWORD PTR [RSP+7]
            mov BYTE PTR [RSP+7],SIL
            mov ESI,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_401540

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_402362

            add RSP,24
            ret 
.L_402362:

            call __stack_chk_fail@PLT
.L_402367:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402370:

            add RDI,15288
            jmp .L_41bb70
.L_40237c:

            nop
            nop
            nop
            nop
.L_402380:

            movzx ECX,CL
            movzx EDX,DX
            add RDI,15288
            movzx R8D,R8B
            jmp .L_417310
.L_402396:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4023a0:

            add RDI,15288
            jmp .L_415140
.L_4023ac:

            nop
            nop
            nop
            nop
.L_4023b0:

            lea RAX,QWORD PTR [RDI+15200]
            ret 
.L_4023b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4023c0:

            sub RSP,24
            add RDI,15288
            lea RSI,QWORD PTR [RSP+7]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_41cd80

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            movzx EAX,BYTE PTR [RSP+7]
            jne .L_4023ff

            add RSP,24
            ret 
.L_4023ff:

            call __stack_chk_fail@PLT
.L_402404:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402410:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41cda0
.L_402420:

            add RDI,15288
            jmp .L_41b1e0
.L_40242c:

            nop
            nop
            nop
            nop
.L_402430:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41b200
.L_402440:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41db10
.L_402450:

            movzx EAX,BYTE PTR [RDI+19951]
            ret 
.L_402458:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402460:

            mov BYTE PTR [RDI+19951],SIL
            ret 
.L_402468:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402470:

            mov EAX,DWORD PTR [RDI+19952]
            ret 
.L_402477:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402480:

            mov DWORD PTR [RDI+19952],ESI
            ret 
.L_402487:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402490:

            add RDI,23088
            jmp .L_40bb90
.L_40249c:

            nop
            nop
            nop
            nop
.L_4024a0:

            movzx ESI,SI
            add RDI,23088
            jmp .L_40bbb0
.L_4024af:

            nop
.L_4024b0:

            add RDI,20240
            jmp .L_427680
.L_4024bc:

            nop
            nop
            nop
            nop
.L_4024c0:

            add RDI,20240
            jmp .L_427690
.L_4024cc:

            nop
            nop
            nop
            nop
.L_4024d0:

            movzx EAX,BYTE PTR [RDI+19948]
            ret 
.L_4024d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024e0:

            mov BYTE PTR [RDI+19948],SIL
            ret 
.L_4024e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4024f0:

            movzx EAX,BYTE PTR [RDI+19949]
            ret 
.L_4024f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402500:

            mov BYTE PTR [RDI+19949],SIL
            ret 
.L_402508:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402510:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41b3b0
.L_402520:

            mov EAX,DWORD PTR [RDI+15300]
            cmp EAX,2
            je .L_402540

            jb .L_402538

            cmp EAX,4
            ja .L_402538

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402538:

            mov EAX,13
            ret 
          .byte 0x66
          .byte 0x90
.L_402540:

            add RDI,15288
            mov ESI,3
            jmp .L_41e920
.L_402551:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402560:

            add RDI,15288
            jmp .L_4211a0
.L_40256c:

            nop
            nop
            nop
            nop
.L_402570:

            movzx EAX,BYTE PTR [RDI+19950]
            ret 
.L_402578:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402580:

            mov BYTE PTR [RDI+19950],SIL
            ret 
.L_402588:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402590:

            movzx EAX,BYTE PTR [RDI+19964]
            ret 
.L_402598:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4025a0:

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41ba60
.L_4025b0:

            test RDX,RDX
            je .L_4025c8

            movzx ESI,SI
            add RDI,15288
            jmp .L_41e160
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4025c8:

            mov EAX,7
            ret 
.L_4025ce:

            nop
            nop
.L_4025d0:

            test RDX,RDX
            je .L_4025e8

            movzx ESI,SIL
            add RDI,15288
            jmp .L_41e1e0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4025e8:

            mov EAX,7
            ret 
.L_4025ee:

            nop
            nop
.L_4025f0:

            push RBX
            sub RSP,16
.L_4025f5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            test RDX,RDX
            mov WORD PTR [RSP+6],AX
            je .L_402660

            test RCX,RCX
            je .L_402660

            movzx EAX,WORD PTR [RDX]
            mov RBX,RDX
            lea RDX,QWORD PTR [RSP+6]
            add RDI,15288
            movzx ESI,SIL
            mov WORD PTR [RSP+6],AX
            call .L_41dbb0

            test EAX,EAX
            jne .L_402642

            movzx EDX,WORD PTR [RSP+6]
            mov WORD PTR [RBX],DX
.L_402642:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_402667

            add RSP,16
.L_402656:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402660:

            mov EAX,7
            jmp .L_402642
.L_402667:

            call __stack_chk_fail@PLT
.L_40266c:

            nop
            nop
            nop
            nop
.L_402670:

            movzx EAX,BYTE PTR [RDI+16032]
            ret 
.L_402678:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402680:

            mov EAX,62
            ret 
.L_402686:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402690:

            test RDX,RDX
            je .L_4026a8

            movzx ESI,SI
            add RDI,15288
            jmp .L_41e210
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4026a8:

            mov EAX,7
            ret 
.L_4026ae:

            nop
            nop
.L_4026b0:

            test RDX,RDX
            je .L_4026c8

            movzx ESI,SIL
            add RDI,23408
            jmp .L_4111d0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4026c8:

            mov EAX,7
            ret 
.L_4026ce:

            nop
            nop
.L_4026d0:

            mov EAX,33
            ret 
.L_4026d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4026e0:

            add RDI,14088
            jmp .L_412980
.L_4026ec:

            nop
            nop
            nop
            nop
.L_4026f0:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_402730

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+14088]
            call .L_412990

            lea RDI,QWORD PTR [RBX+13800]
            call .L_409ea0

            lea RDI,QWORD PTR [RBX+13928]
            call .L_40a020

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402730:

            mov EAX,13
            ret 
.L_402736:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402740:

            add RDI,15288
            jmp .L_420a90
.L_40274c:

            nop
            nop
            nop
            nop
.L_402750:

            movsx ESI,SIL
            add RDI,15288
            jmp .L_420aa0
.L_402760:

            mov RAX,QWORD PTR [RDI+19928]
            ret 
.L_402768:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402770:

            mov QWORD PTR [RDI+19928],RSI
            ret 
.L_402778:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402780:

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            lea RDI,QWORD PTR [RDI+32]
            mov QWORD PTR [RDI-8],0
            mov RSI,RBX
            call .L_402c00

            lea RDI,QWORD PTR [RBX+80]
            call .L_404b30

            lea RDI,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+96],0
            call .L_405140

            lea RDI,QWORD PTR [RBX+112]
            call .L_404c80

            lea RDI,QWORD PTR [RBX+12400]
            mov RSI,RBX
            call .L_40d150

            lea RDI,QWORD PTR [RBX+12720]
            mov RSI,RBX
            call .L_42b580

            lea RDI,QWORD PTR [RBX+24328]
            mov RSI,RBX
            call .L_42d310

            lea RDI,QWORD PTR [RBX+24368]
            mov RSI,RBX
            call .L_42f050

            lea RDI,QWORD PTR [RBX+24560]
            mov RSI,RBX
            call .L_42c060

            lea RDI,QWORD PTR [RBX+24624]
            mov RSI,RBX
            call .L_402ff0

            mov BYTE PTR [RBX+29792],0
            pop RBX

            ret 
.L_402835:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402840:

            lea RAX,QWORD PTR [RIP+.L_677180]
            ret 
.L_402848:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402850:

            push RBX
            mov RBX,RDI
            mov BYTE PTR [RDI+29792],1
            call .L_4014f0

            lea RDI,QWORD PTR [RBX+15288]
            call .L_415b30

            mov RDI,RBX
            call .L_4022b0

            test AL,AL
            jne .L_402880
.L_402878:

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402880:

            mov ESI,1
            mov RDI,RBX
            call .L_401620

            test EAX,EAX
            jne .L_402878

            mov ESI,1
            mov RDI,RBX
            call .L_402260

            test EAX,EAX
            je .L_402878

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            jmp .L_401620
.L_4028ad:

            nop
            nop
            nop
.L_4028b0:

            cmp BYTE PTR [RIP+.L_67e5e0],0
            je .L_4028c8

            lea RAX,QWORD PTR [RIP+.L_677180]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4028c8:

            lea RDI,QWORD PTR [RIP+.L_677180]
            sub RSP,8
            call .L_402780

            lea RDI,QWORD PTR [RIP+.L_677180]
            call .L_402850

            lea RAX,QWORD PTR [RIP+.L_677180]
            add RSP,8
            ret 
.L_4028f0:

            cmp BYTE PTR [RDI+29792],0
            jne .L_402900

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402900:

            push RBX
            xor ESI,ESI
            mov RBX,RDI
            mov BYTE PTR [RDI+29792],0
            call .L_402260

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            jmp .L_401620
.L_40291d:

            nop
            nop
            nop
.L_402920:

            jmp .L_4012a0
.L_402925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402930:

            push RBX
            mov RBX,RDI
            call .L_401570

            mov RDI,RBX
            pop RBX
            jmp .L_4012a0
.L_402942:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402950:

            mov EAX,DWORD PTR [RDI+15300]
            test EAX,EAX
            jne .L_402970

            sub RSP,8
            call .L_401570

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402970:

            mov EAX,13
            ret 
.L_402976:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402980:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDX
            ret 
.L_402988:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402990:

            mov RAX,QWORD PTR [RDI]
            mov RDX,RSI
            test RAX,RAX
            je .L_4029a8

            mov RSI,QWORD PTR [RDI+8]
            mov RDI,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4029a8:

            ret 
.L_4029aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4029b0:

            mov QWORD PTR [RDI+16],RSI
            mov QWORD PTR [RDI+24],RDX
            ret 
.L_4029b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4029c0:

            mov RAX,QWORD PTR [RDI+16]
            mov RDX,RSI
            test RAX,RAX
            je .L_4029d8

            mov RSI,QWORD PTR [RDI+24]
            mov RDI,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4029d8:

            ret 
.L_4029da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4029e0:

            lea RAX,QWORD PTR [RDI+32]
            ret 
.L_4029e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4029f0:

            lea RAX,QWORD PTR [RDI+80]
            ret 
.L_4029f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a00:

            lea RAX,QWORD PTR [RDI+14976]
            ret 
.L_402a08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a10:

            lea RAX,QWORD PTR [RDI+15288]
            ret 
.L_402a18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a20:

            lea RAX,QWORD PTR [RDI+15288]
            ret 
.L_402a28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a30:

            lea RAX,QWORD PTR [RDI+12720]
            ret 
.L_402a38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a40:

            lea RAX,QWORD PTR [RDI+12400]
            ret 
.L_402a48:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a50:

            lea RAX,QWORD PTR [RDI+14280]
            ret 
.L_402a58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a60:

            lea RAX,QWORD PTR [RDI+14088]
            ret 
.L_402a68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a70:

            lea RAX,QWORD PTR [RDI+23408]
            ret 
.L_402a78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a80:

            lea RAX,QWORD PTR [RDI+23248]
            ret 
.L_402a88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402a90:

            lea RAX,QWORD PTR [RDI+23088]
            ret 
.L_402a98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402aa0:

            lea RAX,QWORD PTR [RDI+24016]
            ret 
.L_402aa8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ab0:

            lea RAX,QWORD PTR [RDI+15240]
            ret 
.L_402ab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ac0:

            lea RAX,QWORD PTR [RDI+24160]
            ret 
.L_402ac8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ad0:

            lea RAX,QWORD PTR [RDI+24080]
            ret 
.L_402ad8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ae0:

            lea RAX,QWORD PTR [RDI+20240]
            ret 
.L_402ae8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402af0:

            lea RAX,QWORD PTR [RDI+12520]
            ret 
.L_402af8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b00:

            lea RAX,QWORD PTR [RDI+12936]
            ret 
.L_402b08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b10:

            lea RAX,QWORD PTR [RDI+13800]
            ret 
.L_402b18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b20:

            lea RAX,QWORD PTR [RDI+13928]
            ret 
.L_402b28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b30:

            lea RAX,QWORD PTR [RDI+24368]
            ret 
.L_402b38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b40:

            lea RAX,QWORD PTR [RDI+20848]
            ret 
.L_402b48:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b50:

            lea RAX,QWORD PTR [RDI+22800]
            ret 
.L_402b58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b60:

            lea RAX,QWORD PTR [RDI+13688]
            ret 
.L_402b68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b70:

            lea RAX,QWORD PTR [RDI+21224]
            ret 
.L_402b78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b80:

            lea RAX,QWORD PTR [RDI+22504]
            ret 
.L_402b88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402b90:

            lea RAX,QWORD PTR [RDI+24328]
            ret 
.L_402b98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ba0:

            lea RAX,QWORD PTR [RDI+13128]
            ret 
.L_402ba8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bb0:

            lea RAX,QWORD PTR [RDI+22952]
            ret 
.L_402bb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bc0:

            lea RAX,QWORD PTR [RDI+23952]
            ret 
.L_402bc8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bd0:

            lea RAX,QWORD PTR [RDI+23984]
            ret 
.L_402bd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402be0:

            lea RAX,QWORD PTR [RDI+24560]
            ret 
.L_402be8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402bf0:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDI
            ret 
.L_402bf8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c00:

            push RBX
            lea RDX,QWORD PTR [RIP+.L_402da0]
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RBX
            call .L_404b20

            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+32],0
            mov QWORD PTR [RBX+40],0
            pop RBX
            ret 
.L_402c37:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402c40:

            cmp QWORD PTR [RSI+8],RSI
            mov EAX,24
            je .L_402c50

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402c50:

            mov RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSI+8],RAX
            mov QWORD PTR [RDI+24],RSI
            xor EAX,EAX
            ret 
.L_402c5f:

            nop
.L_402c60:

            mov RDX,QWORD PTR [RDI+24]
            test RDX,RDX
            je .L_402c81

            cmp RDX,RSI
            jne .L_402c78

            jmp .L_402ca0
.L_402c70:

            cmp RAX,RSI
            je .L_402c90

            mov RDX,RAX
.L_402c78:

            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_402c70
.L_402c81:

            mov QWORD PTR [RSI+8],RSI
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402c90:

            mov RAX,QWORD PTR [RSI+8]
            mov QWORD PTR [RDX+8],RAX
            mov QWORD PTR [RSI+8],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402ca0:

            mov RAX,QWORD PTR [RSI+8]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RSI+8],RSI
            ret 
.L_402cad:

            nop
            nop
            nop
.L_402cb0:

            xor EAX,EAX
            test RSI,RSI
            je .L_402cf0

            mov RCX,QWORD PTR [RDI+32]
            test RCX,RCX
            je .L_402ce0

            cmp RCX,RSI
            mov EAX,3
            je .L_402cd0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402cd0:

            cmp QWORD PTR [RDI+40],RDX
            mov EDX,24
            cmove EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_402ce0:

            mov QWORD PTR [RDI+32],RSI
            mov QWORD PTR [RDI+40],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402cf0:

            ret 
.L_402cf2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402d00:

            test RSI,RSI
            je .L_402d11

            cmp QWORD PTR [RDI+32],RSI
            jne .L_402d11

            cmp RDX,QWORD PTR [RDI+40]
            je .L_402d18
.L_402d11:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402d18:

            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+40],0
            ret 
.L_402d29:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402d30:

            or DWORD PTR [RDI],ESI
            add RDI,8
            jmp .L_404bc0
.L_402d3b:

            nop
            nop
            nop
            nop
            nop
.L_402d40:

            push R12
            push RBP
            push RBX
            mov EBP,DWORD PTR [RDI]
            test EBP,EBP
            je .L_402d8f

            mov RBX,QWORD PTR [RDI+24]
            mov R12,RDI
            mov DWORD PTR [RDI],0
            test RBX,RBX
            je .L_402d78

            nop
            nop
            nop
            nop
.L_402d60:

            mov RAX,QWORD PTR [RBX]
            test RAX,RAX
            je .L_402d6f

            mov ESI,EBP
            mov RDI,RBX
            call RAX
.L_402d6f:

            mov RBX,QWORD PTR [RBX+8]
            test RBX,RBX
            jne .L_402d60
.L_402d78:

            mov RAX,QWORD PTR [R12+32]
            test RAX,RAX
            je .L_402d8f

            pop RBX
            mov RSI,QWORD PTR [R12+40]
            mov EDI,EBP
            pop RBP
            pop R12
            jmp RAX
.L_402d8f:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_402d94:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402da0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_4029e0

            add RSP,8
            mov RDI,RAX
            jmp .L_402d40
.L_402dba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_402dc0:

            ret 
.L_402dc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402dd0:

            xor EAX,EAX
            ret 
.L_402dd3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402de0:

            movzx EDX,BYTE PTR [RSI+79]
            mov QWORD PTR [RSI+48],RDI
            or EDX,4
            mov BYTE PTR [RSI+79],DL
            and EDX,3
            movzx R8D,DL
            mov ECX,EDX
.L_402df7:

            movzx EAX,CL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_402e40

            test CL,CL
            jne .L_402e28

            cmp DL,3
            je .L_402e30

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_402e40

            cmp DL,2
            je .L_402e30

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_402e40

            mov ECX,2
.L_402e28:

            sub ECX,1
            cmp DL,CL
            jne .L_402df7

            nop
.L_402e30:

            mov QWORD PTR [RSI+16],RSI
            mov QWORD PTR [RSI+32],RSI
            jmp .L_402e54
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_402e40:

            mov RDX,QWORD PTR [RAX+16]
            mov QWORD PTR [RSI+32],RAX
            mov QWORD PTR [RSI+16],RDX
            mov QWORD PTR [RDX+32],RSI
            mov QWORD PTR [RAX+16],RSI
.L_402e54:

            mov QWORD PTR [RDI+R8*8],RSI
            movzx EDX,BYTE PTR [RSI+79]
            mov RCX,QWORD PTR [RSI+40]
            and EDX,3
            movzx R8D,DL
            mov EDI,EDX
.L_402e69:

            movzx EAX,DIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_402ec8

            test DIL,DIL
            jne .L_402ea6

            cmp DL,3
            je .L_402eae

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_402ec8

            cmp DL,2
            je .L_402eae

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_402ec8

            mov EDI,2
.L_402ea6:

            sub EDI,1
            cmp DL,DIL
            jne .L_402e69
.L_402eae:

            mov QWORD PTR [RSI+8],RSI
            mov QWORD PTR [RSI+24],RSI
            xor EAX,EAX
            mov QWORD PTR [RCX+R8*8+5136],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402ec8:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RSI+24],RAX
            mov QWORD PTR [RSI+8],RDX
            mov QWORD PTR [RDX+24],RSI
            mov QWORD PTR [RAX+8],RSI
            mov QWORD PTR [RCX+R8*8+5136],RSI
            xor EAX,EAX
            ret 
.L_402ee7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_402ef0:

            movzx EAX,BYTE PTR [RSI+79]
            and EAX,3
            movzx EDX,AL
            lea RDI,QWORD PTR [RDI+RDX*8]
            mov RDX,QWORD PTR [RSI+32]
            mov RCX,QWORD PTR [RDI]
            cmp RSI,RCX
            je .L_402f80
.L_402f0a:

            mov RAX,QWORD PTR [RSI+16]
            mov QWORD PTR [RAX+32],RDX
            mov RAX,QWORD PTR [RSI+32]
            mov RDX,QWORD PTR [RSI+16]
            mov QWORD PTR [RAX+16],RDX
            movzx EAX,BYTE PTR [RSI+79]
            mov RDX,QWORD PTR [RSI+40]
            mov QWORD PTR [RSI+16],0
            mov QWORD PTR [RSI+32],0
            and EAX,3
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RCX*8]
            cmp RSI,QWORD PTR [RDX+5136]
            je .L_402fb0
.L_402f49:

            mov RAX,QWORD PTR [RSI+8]
            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov RAX,QWORD PTR [RSI+24]
            mov RDX,QWORD PTR [RSI+8]
            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RSI+8],0
            xor EAX,EAX
            mov QWORD PTR [RSI+24],0
            mov QWORD PTR [RSI+48],0
            and BYTE PTR [RSI+79],251
            ret 
.L_402f80:

            cmp RSI,RDX
            je .L_402fe0

            movzx R8D,BYTE PTR [RDX+79]
            and R8D,3
            cmp AL,R8B
            mov EAX,0
            cmovne RDX,RAX
.L_402f9a:

            mov QWORD PTR [RDI],RDX
            mov RDX,QWORD PTR [RCX+32]
            jmp .L_402f0a
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402fb0:

            mov RCX,QWORD PTR [RSI+24]
            cmp RSI,RCX
            je .L_402fe8

            movzx EDI,BYTE PTR [RCX+79]
            and EDI,3
            cmp AL,DIL
            mov EAX,0
            cmovne RCX,RAX
.L_402fcc:

            mov QWORD PTR [RDX+5136],RCX
            jmp .L_402f49
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_402fe0:

            xor EDX,EDX
            jmp .L_402f9a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_402fe8:

            xor ECX,ECX
            jmp .L_402fcc
.L_402fec:

            nop
            nop
            nop
            nop
.L_402ff0:

            mov QWORD PTR [RDI+5136],0
            mov QWORD PTR [RDI+5144],0
            mov RSI,RDI
            mov QWORD PTR [RDI+5152],0
            mov QWORD PTR [RDI+5160],0
            lea R8,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+5120],0
            lea RDX,QWORD PTR [RDI+5128]
            lea RDI,QWORD PTR [RDI+16]
            mov RCX,R8
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,5120
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RAX,QWORD PTR [RSI+136]
            mov QWORD PTR [RSI+5128],R8
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403070:

            mov QWORD PTR [RAX-128],RAX
            sub RAX,-128
            cmp RAX,RDX
            jne .L_403070

            mov EAX,40
            mov QWORD PTR [RSI+5000],0
            mov WORD PTR [RSI],AX
            ret 
.L_403091:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4030a0:

            sub RSP,8
.L_4030a4:

            cmp QWORD PTR [RSI+8],0
            jne .L_4030f1

            cmp QWORD PTR [RSI+24],0
            jne .L_4030f1

            cmp QWORD PTR [RSI+16],0
            jne .L_403110

            cmp QWORD PTR [RSI+32],0
            jne .L_403110

            mov RDX,QWORD PTR [RDI+5128]
            jmp .L_4030d3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4030d0:

            mov RSI,RAX
.L_4030d3:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RSI],RDX
            mov RDX,RSI
            add WORD PTR [RDI],1
            mov QWORD PTR [RDI+5128],RSI
            test RAX,RAX
            jne .L_4030d0

            add RSP,8
.L_4030f0:

            ret 
.L_4030f1:

            lea RCX,QWORD PTR [RIP+.L_458020]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457a38]
            mov EDX,95
            call __assert_fail@PLT
.L_403110:

            lea RCX,QWORD PTR [RIP+.L_458020]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457a98]
            mov EDX,97
            call __assert_fail@PLT
.L_40312f:

            nop
.L_403130:

            mov RAX,QWORD PTR [RDI+5128]
            test RAX,RAX
            je .L_403151

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RDI+5128],RDX
            mov QWORD PTR [RAX],0
            sub WORD PTR [RDI],1
.L_403151:

            ret 
.L_403153:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403160:

            test RSI,RSI
            je .L_40318c

            mov RDX,QWORD PTR [RDI+5128]
            jmp .L_403173
          .byte 0x66
          .byte 0x90
.L_403170:

            mov RSI,RAX
.L_403173:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RSI],RDX
            mov RDX,RSI
            add WORD PTR [RDI],1
            mov QWORD PTR [RDI+5128],RSI
            test RAX,RAX
            jne .L_403170
.L_40318c:

            ret 
.L_40318e:

            nop
            nop
.L_403190:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
            jmp .L_4031b8
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4031a0:

            mov RDI,RBX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+14976]
            call .L_4138a0

            test EAX,EAX
            jne .L_4031d0
.L_4031b8:

            movzx EAX,WORD PTR [RBX]
            cmp EAX,EBP
            jl .L_4031a0
.L_4031bf:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4031d0:

            movzx EDX,WORD PTR [RBX]
            mov EAX,3
            cmp EDX,EBP
            jge .L_4031bf

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_4031e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4031f0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_40323f

            mov RCX,QWORD PTR [RAX+40]
            mov RDX,QWORD PTR [RCX+5160]
            test RDX,RDX
            jne .L_403238

            mov RDX,QWORD PTR [RCX+5152]
            test RDX,RDX
            jne .L_403238

            mov RDX,QWORD PTR [RCX+5144]
            test RDX,RDX
            jne .L_403238

            mov RDX,QWORD PTR [RCX+5136]
            test RDX,RDX
            jne .L_403238
.L_40322c:

            mov RAX,QWORD PTR [RAX+8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403238:

            cmp RAX,RDX
            jne .L_40322c

            xor EAX,EAX
.L_40323f:

            ret 
.L_403241:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403250:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_403298

            mov RCX,QWORD PTR [RAX+40]
            mov RDX,QWORD PTR [RCX+5160]
            test RDX,RDX
            jne .L_4032a0

            mov RDX,QWORD PTR [RCX+5152]
            test RDX,RDX
            jne .L_4032a0

            mov RDX,QWORD PTR [RCX+5144]
            test RDX,RDX
            jne .L_4032a0

            mov RDX,QWORD PTR [RCX+5136]
            test RDX,RDX
            jne .L_4032a0
.L_40328c:

            mov RAX,QWORD PTR [RAX+24]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403298:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4032a0:

            cmp RAX,QWORD PTR [RDX+8]
            jne .L_40328c

            xor EAX,EAX
            ret 
.L_4032a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4032b0:

            mov RAX,QWORD PTR [RDI+5160]
            test RAX,RAX
            jne .L_4032e8

            mov RAX,QWORD PTR [RDI+5152]
            test RAX,RAX
            jne .L_4032e8

            mov RAX,QWORD PTR [RDI+5144]
            test RAX,RAX
            jne .L_4032e8

            mov RAX,QWORD PTR [RDI+5136]
            test RAX,RAX
            jne .L_4032e8

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4032e8:

            mov RAX,QWORD PTR [RAX+8]
            ret 
.L_4032ed:

            nop
            nop
            nop
.L_4032f0:

            cmp SI,48
            mov R8D,ESI
            mov RCX,RDI
            jbe .L_4033a6

            mov EDX,48
            jmp .L_40331c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403310:

            add EDX,120
            mov RCX,RAX
            cmp R8W,DX
            jbe .L_403358
.L_40331c:

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            jne .L_403310

            mov RSI,QWORD PTR [RDI+40]
            mov RAX,QWORD PTR [RSI+5128]
            test RAX,RAX
            je .L_4033a0

            mov R9,QWORD PTR [RAX]
            add EDX,120
            mov QWORD PTR [RSI+5128],R9
            mov QWORD PTR [RAX],0
            sub WORD PTR [RSI],1
            cmp R8W,DX
            mov QWORD PTR [RCX],RAX
            mov RCX,RAX
            ja .L_40331c
.L_403358:

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RAX],0
            mov RAX,QWORD PTR [RDI+40]
            test RDX,RDX
            je .L_403394

            mov RSI,QWORD PTR [RAX+5128]
            jmp .L_40337b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403378:

            mov RDX,RCX
.L_40337b:

            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RDX],RSI
            mov RSI,RDX
            add WORD PTR [RAX],1
            mov QWORD PTR [RAX+5128],RDX
            test RCX,RCX
            jne .L_403378
.L_403394:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4033a0:

            mov EAX,3
            ret 
.L_4033a6:

            mov RAX,RDI
            jmp .L_403358
.L_4033ab:

            nop
            nop
            nop
            nop
            nop
.L_4033b0:

            mov RSI,RDI
            mov RDI,QWORD PTR [RDI+40]
            jmp .L_4030a0
.L_4033bc:

            nop
            nop
            nop
            nop
.L_4033c0:

            test BYTE PTR [RDI+79],4
            mov RDX,QWORD PTR [RDI+48]
            je .L_403400

            test RDX,RDX
            je .L_403418

            mov RAX,QWORD PTR [RDX+24]
            test RAX,RAX
            jne .L_403408

            mov RAX,QWORD PTR [RDX+16]
            test RAX,RAX
            jne .L_403408

            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_403408

            mov RAX,QWORD PTR [RDX]
            test RAX,RAX
            jne .L_403408

            mov RAX,QWORD PTR [RDI+16]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403400:

            test RDX,RDX
            je .L_403418

            mov RAX,QWORD PTR [RDX]
.L_403408:

            cmp RAX,RDI
            je .L_403418

            mov RAX,QWORD PTR [RDI+16]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403418:

            xor EAX,EAX
            ret 
.L_40341b:

            nop
            nop
            nop
            nop
            nop
.L_403420:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_403427:

            movzx EAX,WORD PTR [RDI+56]
            mov EBX,ESI
            lea R12D,DWORD PTR [RAX+RSI*1]
            add AX,WORD PTR [RDI+58]
            xor ESI,ESI
            cmp R12W,48
            mov ECX,EAX
            jbe .L_403456

            movzx EDX,R12W
            mov ESI,2290649225
            sub EDX,49
            mov EAX,EDX
            mul ESI
            shr EDX,6
            lea ESI,DWORD PTR [RDX+1]
.L_403456:

            cmp CX,48
            jbe .L_403473

            movzx EDX,CX
            mov ECX,2290649225
            sub EDX,49
            mov EAX,EDX
            mul ECX
            shr EDX,6
            add EDX,1
            sub ESI,EDX
.L_403473:

            mov RDI,QWORD PTR [RBP+40]
            call .L_403190

            test EAX,EAX
            je .L_403488
.L_403480:

            pop RBX
.L_403481:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403488:

            movzx ESI,R12W
            mov RDI,RBP
            call .L_4032f0

            test EAX,EAX
            jne .L_403480

            mov WORD PTR [RBP+58],BX
            pop RBX
            pop RBP
            pop R12
            ret 
.L_4034a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4034b0:

            mov RDX,QWORD PTR [RDI]
            mov EAX,1
            test RDX,RDX
            je .L_4034d0

            nop
            nop
            nop
.L_4034c0:

            mov RDX,QWORD PTR [RDX]
            add EAX,1
            test RDX,RDX
            jne .L_4034c0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4034d0:

            ret 
.L_4034d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4034e0:

            sub RSP,8
            movzx EDX,WORD PTR [RDI+60]
            movzx R8D,WORD PTR [RDI+58]
            mov EAX,EDX
            add EDX,ESI
            cmp EDX,R8D
            jg .L_403509

            add EAX,ESI
            cmp AX,R8W
            mov WORD PTR [RDI+60],AX
            ja .L_403528

            xor EAX,EAX
            add RSP,8
            ret 
.L_403509:

            lea RCX,QWORD PTR [RIP+.L_457fe0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457b08]
            mov EDX,336
            call __assert_fail@PLT
.L_403528:

            lea RCX,QWORD PTR [RIP+.L_457fe0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457b30]
            mov EDX,340
            call __assert_fail@PLT
.L_403547:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403550:

            cmp SI,WORD PTR [RDI+58]
            ja .L_40355d

            mov WORD PTR [RDI+60],SI
            xor EAX,EAX
            ret 
.L_40355d:

            sub RSP,8
            call .L_400f00
.L_403566:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403570:

            movzx ECX,BYTE PTR [RDI+78]
            xor EAX,EAX
            and ECX,60
            cmp CL,36
            ja .L_40358e

            movabs RAX,73031225616
            shr RAX,CL
            and EAX,1
.L_40358e:

            ret 
.L_403590:

            cmp SIL,3
            mov EAX,7
            ja .L_40369a

            mov R9,QWORD PTR [RDI+48]
            test R9,R9
            je .L_4036d0

            movzx ECX,BYTE PTR [RDI+79]
            movzx R8D,SIL
            mov R10D,ECX
            and R10D,3
            movzx EAX,R10B
            cmp EAX,R8D
            je .L_403698

            mov R11D,ESI
            push RBX
.L_4035cc:

            and R11D,3
            and ECX,4
            jne .L_403700

            mov RAX,QWORD PTR [RDI+40]
            movzx ECX,R10B
            mov EDX,ESI
            lea R9,QWORD PTR [RAX+RCX*8]
            mov RCX,QWORD PTR [RDI+24]
            mov RAX,QWORD PTR [R9+5136]
            cmp RDI,RAX
            je .L_4036a0
.L_4035fb:

            mov RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RAX+24],RCX
            mov RAX,QWORD PTR [RDI+24]
            mov RCX,QWORD PTR [RDI+8]
            mov QWORD PTR [RAX+8],RCX
            movzx EAX,BYTE PTR [RDI+79]
            mov RCX,QWORD PTR [RDI+40]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+24],0
            and EAX,4294967292
            or EAX,R11D
            mov BYTE PTR [RDI+79],AL
.L_403630:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_4036e8

            test SIL,SIL
            jne .L_403675

            cmp DL,3
            je .L_403680

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_4036e8

            cmp DL,2
            je .L_403680

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_4036e8

            mov ESI,2
.L_403675:

            sub ESI,1
            cmp DL,SIL
            jne .L_403630

            nop
            nop
            nop
.L_403680:

            mov QWORD PTR [RDI+8],RDI
            mov QWORD PTR [RDI+24],RDI
.L_403688:

            mov QWORD PTR [RCX+R8*8+5136],RDI
.L_403690:

            xor EAX,EAX
            pop RBX
.L_403693:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403698:

            xor EAX,EAX
.L_40369a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4036a0:

            cmp RDI,RCX
            je .L_403738

            movzx EBX,BYTE PTR [RCX+79]
            and EBX,3
            cmp R10B,BL
            mov R10D,0
            cmovne RCX,R10
.L_4036bd:

            mov QWORD PTR [R9+5136],RCX
            mov RCX,QWORD PTR [RAX+24]
            jmp .L_4035fb
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4036d0:

            movzx EAX,BYTE PTR [RDI+79]
            and ESI,3
            and EAX,4294967292
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+79],SIL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4036e8:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RDI+8],RDX
            mov QWORD PTR [RDX+24],RDI
            mov QWORD PTR [RAX+8],RDI
            jmp .L_403688
          .byte 0x66
          .byte 0x90
.L_403700:

            mov R10,RDI
            mov RSI,RDI
            mov RDI,R9
            call .L_402ef0

            movzx EAX,BYTE PTR [R10+79]
            and EAX,4294967292
            or EAX,R11D
            cmp QWORD PTR [R10+48],0
            mov BYTE PTR [R10+79],AL
            jne .L_403690

            mov RDI,R9
            call .L_402de0

            xor EAX,EAX
            pop RBX
.L_403733:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403738:

            xor ECX,ECX
            jmp .L_4036bd
.L_40373f:

            nop
.L_403740:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBP,ESI
            mov ESI,1
            mov R12D,EDX
            sub RSP,8
.L_403757:

            call .L_403190

            test EAX,EAX
            jne .L_4037f8

            mov RBX,QWORD PTR [R13+5128]
            test RBX,RBX
            je .L_4037e6

            lea RDI,QWORD PTR [RBX+8]
            mov RAX,QWORD PTR [RBX]
            mov RCX,RBX
            and EBP,3
            and RDI,-8
            sub RCX,RDI
            mov QWORD PTR [R13+5128],RAX
            xor EAX,EAX
            sub ECX,-128
            mov QWORD PTR [RBX],0
            sub WORD PTR [R13],1
            shr ECX,3
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+120],0

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            mov QWORD PTR [RBX+40],R13
            mov WORD PTR [RBX+56],R12W
            movzx ESI,BYTE PTR [RBX+78]
            and ESI,4294967292
            or ESI,EBP
            or ESI,4294967168
            mov BYTE PTR [RBX+78],SIL
            mov ESI,2
            call .L_403590

            xor ESI,ESI
            mov RDI,RBX
            call .L_403420

            test EAX,EAX
            jne .L_403800
.L_4037e6:

            add RSP,8
.L_4037ea:

            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4037f8:

            xor EBX,EBX
            jmp .L_4037e6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403800:

            mov RSI,RBX
            mov RDI,R13
            xor EBX,EBX
            call .L_4030a0

            jmp .L_4037e6
.L_40380f:

            nop
.L_403810:

            movzx EAX,WORD PTR [RDI+58]
            cmp AX,SI
            jb .L_40383d

            movzx EDX,WORD PTR [RDI+60]
            sub EAX,ESI
            add WORD PTR [RDI+56],SI
            mov WORD PTR [RDI+58],AX
            mov EAX,EDX
            sub EAX,ESI
            cmp DX,SI
            mov EDX,0
            cmovbe EAX,EDX
            mov WORD PTR [RDI+60],AX
            xor EAX,EAX
            ret 
.L_40383d:

            lea RCX,QWORD PTR [RIP+.L_457f20]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457b60]
            sub RSP,8

            mov EDX,463
            call __assert_fail@PLT
.L_403860:

            movzx EAX,WORD PTR [RDI+58]
            cmp SI,AX
            jae .L_4039d0

            push RBP
            mov R10D,EDX
            push RBX
            mov R11,RCX
            movzx EDX,DX
            movzx ECX,SI
            add EDX,ECX
            movzx ECX,AX
            sub RSP,8
.L_403884:

            sub EAX,ESI
            cmp EDX,ECX
            cmovge R10D,EAX
            add SI,WORD PTR [RDI+56]
            cmp SI,47
            jbe .L_403980

            lea EDX,DWORD PTR [RSI-48]
            mov R9,QWORD PTR [RDI]
            cmp DX,119
            jbe .L_4038c5

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4038b0:

            test R9,R9
            je .L_403a79

            sub EDX,120
            mov R9,QWORD PTR [R9]
            cmp DX,119
            ja .L_4038b0
.L_4038c5:

            xor EAX,EAX
.L_4038c7:

            test R10W,R10W
            je .L_403977

            test R9,R9
            je .L_403a98

            mov EBP,120
            jmp .L_40391e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4038e8:

            test BL,4
            jne .L_4039d8

            test EBX,EBX
            je .L_403904

            movzx EDX,BYTE PTR [RSI]
            test BL,2
            mov BYTE PTR [R11],DL
            jne .L_403a40
.L_403904:

            add EAX,R8D
            add R11,RBX
            sub R10W,R8W
            mov R9,QWORD PTR [R9]
            je .L_403977
.L_403913:

            xor EDX,EDX
            test R9,R9
            je .L_403a98
.L_40391e:

            mov R8D,EBP
            sub R8D,EDX
            movzx EDX,DX
            cmp R8W,R10W
            lea RSI,QWORD PTR [R9+RDX*1+8]
            cmova R8D,R10D
            movzx EBX,R8W
            cmp EBX,8
            jb .L_4038e8

            mov RDX,QWORD PTR [RSI]
            lea RDI,QWORD PTR [R11+8]
            add EAX,R8D
            and RDI,-8
            mov QWORD PTR [R11],RDX
            mov EDX,EBX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [R11+RDX*1-8],RCX
            mov RCX,R11
            add R11,RBX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EBX
            shr ECX,3
            sub R10W,R8W

            rep movsq 

            mov R9,QWORD PTR [R9]
            jne .L_403913
.L_403977:

            add RSP,8
.L_40397b:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_403980:

            mov EAX,48
            sub EAX,ESI
            movzx ESI,SI
            cmp R10W,AX
            lea RSI,QWORD PTR [RDI+RSI*1+80]
            cmovbe EAX,R10D
            movzx EDX,AX
            cmp EDX,8
            jae .L_4039f0

            test DL,4
            jne .L_403a52

            test EDX,EDX
            je .L_4039bb

            movzx ECX,BYTE PTR [RSI]
            test DL,2
            mov BYTE PTR [R11],CL
            jne .L_403a67
.L_4039bb:

            add R11,RDX
            sub R10D,EAX
            mov R9,QWORD PTR [RDI]
            xor EDX,EDX
            jmp .L_4038c7
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4039d0:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4039d8:

            mov EDX,DWORD PTR [RSI]
            mov DWORD PTR [R11],EDX
            mov EDX,EBX
            mov ECX,DWORD PTR [RSI+RDX*1-4]
            mov DWORD PTR [R11+RDX*1-4],ECX
            jmp .L_403904
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4039f0:

            mov RCX,QWORD PTR [RSI]
            mov QWORD PTR [R11],RCX
            mov ECX,EDX
            mov R8,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [R11+RCX*1-8],R8
            lea R8,QWORD PTR [R11+8]
            mov RCX,R11
            and R8,-8
            sub RCX,R8
            sub RSI,RCX
            add ECX,EDX
            and ECX,4294967288
            cmp ECX,8
            jb .L_4039bb

            and ECX,4294967288
            xor R9D,R9D
.L_403a23:

            mov EBX,R9D
            add R9D,8
            mov RBP,QWORD PTR [RSI+RBX*1]
            cmp R9D,ECX
            mov QWORD PTR [R8+RBX*1],RBP
            jb .L_403a23

            jmp .L_4039bb
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403a40:

            mov EDX,EBX
            movzx ECX,WORD PTR [RSI+RDX*1-2]
            mov WORD PTR [R11+RDX*1-2],CX
            jmp .L_403904
.L_403a52:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [R11],ECX
            mov ECX,EDX
            mov ESI,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R11+RCX*1-4],ESI
            jmp .L_4039bb
.L_403a67:

            mov ECX,EDX
            movzx ESI,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R11+RCX*1-2],SI
            jmp .L_4039bb
.L_403a79:

            lea RCX,QWORD PTR [RIP+.L_457ee0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,526
            call __assert_fail@PLT
.L_403a98:

            lea RCX,QWORD PTR [RIP+.L_457ee0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,535
            call __assert_fail@PLT
.L_403ab7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403ac0:

            push R14
            push RBX
            mov R11,RCX
            mov R9D,EDX
            movzx EAX,SI
            movzx EDX,DX
            sub RSP,8
.L_403ad3:

            movzx ECX,WORD PTR [RDI+58]
            add EDX,EAX
            cmp EDX,ECX
            jg .L_403d07

            mov EAX,ECX
            sub EAX,ESI
            cmp EDX,ECX
            cmovge R9D,EAX
            add SI,WORD PTR [RDI+56]
            cmp SI,47
            ja .L_403b70

            mov EAX,48
            sub EAX,ESI
            movzx ESI,SI
            cmp R9W,AX
            lea RDX,QWORD PTR [RDI+RSI*1+80]
            cmovbe EAX,R9D
            movzx ECX,AX
            cmp ECX,8
            jb .L_403c70

            mov RSI,QWORD PTR [R11]
            mov RBX,R11
            mov QWORD PTR [RDX],RSI
            mov ESI,ECX
            mov R8,QWORD PTR [R11+RSI*1-8]
            mov QWORD PTR [RDX+RSI*1-8],R8
            lea RSI,QWORD PTR [RDX+8]
            and RSI,-8
            sub RDX,RSI
            sub RBX,RDX
            add EDX,ECX
            and EDX,4294967288
            cmp EDX,8
            jb .L_403b60

            and EDX,4294967288
            xor R8D,R8D
.L_403b4b:

            mov R10D,R8D
            add R8D,8
            mov R14,QWORD PTR [RBX+R10*1]
            cmp R8D,EDX
            mov QWORD PTR [RSI+R10*1],R14
            jb .L_403b4b

            nop
.L_403b60:

            add R11,RCX
            sub R9D,EAX
            mov R8,QWORD PTR [RDI]
            xor ECX,ECX
            jmp .L_403b97
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403b70:

            lea ECX,DWORD PTR [RSI-48]
            mov R8,QWORD PTR [RDI]
            cmp CX,119
            jbe .L_403b95

            nop
            nop
            nop
            nop
.L_403b80:

            test R8,R8
            je .L_403cc9

            sub ECX,120
            mov R8,QWORD PTR [R8]
            cmp CX,119
            ja .L_403b80
.L_403b95:

            xor EAX,EAX
.L_403b97:

            test R9W,R9W
            je .L_403c4a

            test R8,R8
            je .L_403ce8

            mov EBX,120
            jmp .L_403bf1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_403bb8:

            test R10B,4
            jne .L_403c58

            test R10D,R10D
            je .L_403bd8

            movzx ESI,BYTE PTR [R11]
            test R10B,2
            mov BYTE PTR [RCX],SIL
            jne .L_403ca0
.L_403bd8:

            add EAX,EDX
            add R11,R10
            sub R9W,DX
            mov R8,QWORD PTR [R8]
            je .L_403c4a
.L_403be6:

            xor ECX,ECX
            test R8,R8
            je .L_403ce8
.L_403bf1:

            mov EDX,EBX
            sub EDX,ECX
            movzx ECX,CX
            cmp DX,R9W
            lea RCX,QWORD PTR [R8+RCX*1+8]
            cmova EDX,R9D
            movzx R10D,DX
            cmp R10D,8
            jb .L_403bb8

            mov RSI,QWORD PTR [R11]
            add EAX,EDX
            mov QWORD PTR [RCX],RSI
            mov ESI,R10D
            mov RDI,QWORD PTR [R11+RSI*1-8]
            mov QWORD PTR [RCX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,R11
            add R11,R10
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R10D
            shr ECX,3
            sub R9W,DX

            rep movsq 

            mov R8,QWORD PTR [R8]
            jne .L_403be6
.L_403c4a:

            add RSP,8
.L_403c4e:

            movzx EAX,AX
            pop RBX
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403c58:

            mov ESI,DWORD PTR [R11]
            mov DWORD PTR [RCX],ESI
            mov ESI,R10D
            mov EDI,DWORD PTR [R11+RSI*1-4]
            mov DWORD PTR [RCX+RSI*1-4],EDI
            jmp .L_403bd8
          .byte 0x66
          .byte 0x90
.L_403c70:

            test CL,4
            jne .L_403cb3

            test ECX,ECX
            je .L_403b60

            movzx ESI,BYTE PTR [R11]
            test CL,2
            mov BYTE PTR [RDX],SIL
            je .L_403b60

            mov ESI,ECX
            movzx R8D,WORD PTR [R11+RSI*1-2]
            mov WORD PTR [RDX+RSI*1-2],R8W
            jmp .L_403b60
.L_403ca0:

            mov ESI,R10D
            movzx EDI,WORD PTR [R11+RSI*1-2]
            mov WORD PTR [RCX+RSI*1-2],DI
            jmp .L_403bd8
.L_403cb3:

            mov ESI,DWORD PTR [R11]
            mov DWORD PTR [RDX],ESI
            mov ESI,ECX
            mov R8D,DWORD PTR [R11+RSI*1-4]
            mov DWORD PTR [RDX+RSI*1-4],R8D
            jmp .L_403b60
.L_403cc9:

            lea RCX,QWORD PTR [RIP+.L_457ea0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,601
            call __assert_fail@PLT
.L_403ce8:

            lea RCX,QWORD PTR [RIP+.L_457ea0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,610
            call __assert_fail@PLT
.L_403d07:

            lea RCX,QWORD PTR [RIP+.L_457ea0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457b88]
            mov EDX,564
            call __assert_fail@PLT
.L_403d26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_403d30:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            movzx R13D,WORD PTR [RDI+58]
            mov RBP,RDI
            mov EBX,EDX
            lea ESI,DWORD PTR [R13+RDX*1]
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            mov R14D,EAX
            je .L_403d68
.L_403d59:

            pop RBX
            mov EAX,R14D
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_403d68:

            movzx EBX,BX
            movzx ESI,R13W
            mov RCX,R12
            mov EDX,EBX
            mov RDI,RBP
            call .L_403ac0

            cmp EBX,EAX
            je .L_403d59

            lea RCX,QWORD PTR [RIP+.L_457f60]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457a03]
            mov EDX,419
            call __assert_fail@PLT
.L_403d9f:

            nop
.L_403da0:

            movzx EAX,WORD PTR [RDI+56]
            push R14
            push RBP
            push RBX
.L_403da8:

            cmp DX,AX
            jbe .L_403e70

            mov RAX,QWORD PTR [RDI+40]
            mov R10D,EDX
            mov ECX,48
            lea R11,QWORD PTR [RDI+80]
            mov R8,QWORD PTR [RAX+5128]
            test R8,R8
            jne .L_403dfd

            jmp .L_403f08
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_403dd8:

            add EAX,120
            cmp AX,R10W
            mov WORD PTR [RDI+56],AX
            jae .L_403e70
.L_403de9:

            mov RAX,QWORD PTR [RDI+40]
            mov R8,QWORD PTR [RAX+5128]
            test R8,R8
            je .L_403f08
.L_403dfd:

            mov R9,QWORD PTR [R8]
            mov QWORD PTR [RAX+5128],R9
            mov QWORD PTR [R8],0
            sub WORD PTR [RAX],1
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [R8],RAX
            movzx EAX,WORD PTR [RDI+56]
            mov QWORD PTR [RDI],R8
            cmp AX,47
            ja .L_403dd8

            movzx R9D,AX
            mov RBX,RCX
            sub RBX,R9
            lea R8,QWORD PTR [R8+R9*1+80]
            add R9,R11
            cmp EBX,8
            jae .L_403eb0

            test BL,4
            jne .L_403f18

            test EBX,EBX
            je .L_403dd8

            movzx EAX,BYTE PTR [R9]
            test BL,2
            mov BYTE PTR [R8],AL
            jne .L_403f33
.L_403e59:

            movzx EAX,WORD PTR [RDI+56]
.L_403e5d:

            add EAX,120
            cmp AX,R10W
            mov WORD PTR [RDI+56],AX
            jb .L_403de9

            nop
            nop
.L_403e70:

            sub EAX,EDX
            movzx ECX,WORD PTR [RDI+58]
            mov WORD PTR [RDI+56],AX
            movzx EAX,WORD PTR [RDI+60]
            add ECX,EDX
            add EAX,EDX
            mov WORD PTR [RDI+58],CX
            cmp CX,AX
            jb .L_403f4a

            xor EBX,EBX
            test RSI,RSI
            mov WORD PTR [RDI+60],AX
            je .L_403ea7

            mov RCX,RSI
            movzx EDX,DX
            xor ESI,ESI
            call .L_403ac0
.L_403ea7:

            mov EAX,EBX
            pop RBX
.L_403eaa:

            pop RBP
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_403eb0:

            mov RAX,QWORD PTR [R9]
            mov QWORD PTR [R8],RAX
            mov EAX,EBX
            mov RBP,QWORD PTR [R9+RAX*1-8]
            mov QWORD PTR [R8+RAX*1-8],RBP
            lea RBP,QWORD PTR [R8+8]
            and RBP,-8
            sub R8,RBP
            lea EAX,DWORD PTR [RBX+R8*1]
            sub R9,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_403e59

            and EAX,4294967288
            xor R8D,R8D
.L_403ee6:

            mov EBX,R8D
            add R8D,8
            mov R14,QWORD PTR [R9+RBX*1]
            cmp R8D,EAX
            mov QWORD PTR [RBP+RBX*1],R14
            jb .L_403ee6

            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403e5d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403f08:

            mov EBX,3
            mov EAX,EBX
            pop RBX
.L_403f10:

            pop RBP
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_403f18:

            mov EAX,DWORD PTR [R9]
            mov DWORD PTR [R8],EAX
            mov EAX,EBX
            mov R9D,DWORD PTR [R9+RAX*1-4]
            mov DWORD PTR [R8+RAX*1-4],R9D
            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403dd8
.L_403f33:

            mov EAX,EBX
            movzx R9D,WORD PTR [R9+RAX*1-2]
            mov WORD PTR [R8+RAX*1-2],R9W
            movzx EAX,WORD PTR [RDI+56]
            jmp .L_403dd8
.L_403f4a:

            call .L_400f00
.L_403f4f:

            nop
.L_403f50:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,72
.L_403f5e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test CX,CX
            mov QWORD PTR [RSP+16],RDI
            mov QWORD PTR [RSP+24],R8
            je .L_404010

            lea RAX,QWORD PTR [RSP+32]
            mov R15D,ESI
            mov EBX,EDX
            mov R13D,ECX
            xor EBP,EBP
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
.L_403f98:

            cmp R13W,16
            mov R14D,16
            mov RCX,QWORD PTR [RSP+8]
            cmovbe R14D,R13D
            mov RDI,QWORD PTR [RSP+16]
            movzx ESI,R15W
            movzx R12D,R14W
            add R15D,R14D
            add EBP,R14D
            mov EDX,R12D
            call .L_403860

            mov RCX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            movzx ESI,BX
            mov EDX,R12D
            add EBX,R14D
            call .L_403ac0

            sub R13W,R14W
            jne .L_403f98

            movzx EAX,BP
.L_403fe8:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_404014

            add RSP,72
.L_403ffc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404010:

            xor EAX,EAX
            jmp .L_403fe8
.L_404014:

            call __stack_chk_fail@PLT
.L_404019:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404020:

            push R12
            mov R12D,ESI
            push RBP
            push RBX
.L_404027:

            movzx ESI,BYTE PTR [RDI+78]
            mov RBP,RDI
            movzx EDX,WORD PTR [RDI+56]
            mov RDI,QWORD PTR [RDI+40]
            and ESI,3
            call .L_403740

            test RAX,RAX
            mov RBX,RAX
            je .L_404067

            movzx R12D,R12W
            mov RDI,RAX
            mov ESI,R12D
            call .L_403420

            test EAX,EAX
            je .L_404070

            mov RDI,QWORD PTR [RBX+40]
            mov RSI,RBX
            xor EBX,EBX
            call .L_4030a0
.L_404067:

            mov RAX,RBX
            pop RBX
.L_40406b:

            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_404070:

            xor EDX,EDX
            xor ESI,ESI
            mov R8,RBX
            mov ECX,R12D
            mov RDI,RBP
            call .L_403f50

            movzx EAX,WORD PTR [RBP+60]
            cmp AX,WORD PTR [RBX+58]
            ja .L_4040d6

            mov WORD PTR [RBX+60],AX
            movzx EAX,BYTE PTR [RBP+75]
            mov RDI,RBX
            mov BYTE PTR [RBX+75],AL
            movzx EAX,BYTE PTR [RBX+78]
            movzx EDX,BYTE PTR [RBP+78]
            and EAX,4294967235
            and EDX,60
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            movzx ESI,BYTE PTR [RBP+79]
            and ESI,3
            call .L_403590

            movzx EAX,BYTE PTR [RBP+78]
            and EAX,4294967168
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+78]
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            mov RAX,RBX
            pop RBX
.L_4040d2:

            pop RBP
            pop R12
            ret 
.L_4040d6:

            call .L_400f00
.L_4040db:

            nop
            nop
            nop
            nop
            nop
.L_4040e0:

            cmp SIL,63
            ja .L_404105

            mov EAX,ESI
            mov ECX,ESI
            shr AL,3
            and ECX,7
            and EAX,31
            movzx EDX,BYTE PTR [RDI+RAX*1+66]
            mov EAX,128
            sar EAX,CL
            test EDX,EAX
            setne AL
            ret 
.L_404105:

            lea RCX,QWORD PTR [RIP+.L_457e60]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457bb0]
            sub RSP,8
            mov EDX,683
            call __assert_fail@PLT
.L_404128:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404130:

            cmp SIL,63
            ja .L_404151

            mov EDX,ESI
            mov ECX,ESI
            mov EAX,128
            shr DL,3
            and ECX,7
            and EDX,31
            sar EAX,CL
            not EAX
            and BYTE PTR [RDI+RDX*1+66],AL
            ret 
.L_404151:

            lea RCX,QWORD PTR [RIP+.L_457e20]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457bb0]
            sub RSP,8
            mov EDX,689
            call __assert_fail@PLT
.L_404174:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404180:

            cmp SIL,63
            ja .L_40419f

            mov EAX,ESI
            mov ECX,ESI
            mov EDX,128
            shr AL,3
            and ECX,7
            and EAX,31
            sar EDX,CL
            or BYTE PTR [RDI+RAX*1+66],DL
            ret 
.L_40419f:

            lea RCX,QWORD PTR [RIP+.L_457de0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457bb0]
            sub RSP,8
            mov EDX,695
            call __assert_fail@PLT
.L_4041c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4041d0:

            lea RAX,QWORD PTR [RDI+66]
            add RDI,74
.L_4041d8:

            cmp BYTE PTR [RAX],0
            jne .L_4041f0

            add RAX,1
            cmp RAX,RDI
            jne .L_4041d8

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4041f0:

            mov EAX,1
            ret 
.L_4041f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404200:

            xor EDX,EDX
            add SI,DI
            jb .L_40420b
.L_404207:

            lea EAX,DWORD PTR [RDX+RSI*1]
            ret 
.L_40420b:

            mov EDX,1
            jmp .L_404207
.L_404212:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404220:

            test DX,DX
            je .L_404260

            movzx EDX,DX
            mov EAX,EDI
            xor EDI,EDI
            lea R8D,DWORD PTR [RDX-1]
            add R8,1
            nop
            nop
            nop
            nop
.L_404238:

            movzx ECX,BYTE PTR [RSI+RDI*1]
            test DIL,1
            movzx EDX,CL
            jne .L_40424b

            shl ECX,8
            movzx EDX,CX
.L_40424b:

            xor ECX,ECX
            add AX,DX
            jb .L_404263
.L_404252:

            add RDI,1
            add EAX,ECX
            cmp R8,RDI
            jne .L_404238

            ret 
          .byte 0x90
.L_404260:

            mov EAX,EDI
            ret 
.L_404263:

            mov ECX,1
            jmp .L_404252
.L_40426a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_404270:

            movzx R8D,CX
            movzx EAX,DX
            push RBX
.L_404278:

            add EAX,R8D
            movzx R8D,WORD PTR [RDI+58]
            cmp EAX,R8D
            jg .L_4043f6

            movzx EAX,WORD PTR [RDI+56]
            mov R8,QWORD PTR [RDI]
            add EAX,EDX
            cmp AX,47
            ja .L_4043a4

            mov R9D,48
            sub R9D,EAX
            movzx EAX,AX
            cmp CX,R9W
            lea R11,QWORD PTR [RDI+RAX*1+80]
            cmovbe R9D,ECX
            test R9W,R9W
            je .L_4042f7

            movzx EAX,R9W
            xor EDX,EDX
            lea R10D,DWORD PTR [RAX-1]
            add R10,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4042d0:

            test DL,1
            movzx EAX,BYTE PTR [R11+RDX*1]
            jne .L_4042e0

            shl EAX,8
            movzx EAX,AX
.L_4042e0:

            xor EDI,EDI
            add AX,SI
            jb .L_404415
.L_4042eb:

            add RDX,1
            lea ESI,DWORD PTR [RDI+RAX*1]
            cmp R10,RDX
            jne .L_4042d0
.L_4042f7:

            mov EAX,ECX
            sub EAX,R9D
            mov R9D,EAX
            xor EAX,EAX
.L_404301:

            test R9W,R9W
            je .L_4043a0

            test R8,R8
            je .L_404379

            mov R11D,120
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404320:

            mov EDI,R11D
            sub EDI,EAX
            movzx EAX,AX
            cmp DI,R9W
            lea R10,QWORD PTR [R8+RAX*1+8]
            cmova EDI,R9D
            xor ECX,ECX
            movzx EBX,DI
            nop
            nop
            nop
            nop
            nop
            nop
.L_404340:

            movzx EDX,BYTE PTR [R10+RCX*1]
            test CL,1
            movzx EAX,DL
            jne .L_404353

            shl EDX,8
            movzx EAX,DX
.L_404353:

            xor EDX,EDX
            add AX,SI
            jb .L_4043ec
.L_40435e:

            add RCX,1
            lea ESI,DWORD PTR [RDX+RAX*1]
            cmp EBX,ECX
            jg .L_404340

            sub R9W,DI
            mov R8,QWORD PTR [R8]
            je .L_4043a0

            xor EAX,EAX
            test R8,R8
            jne .L_404320
.L_404379:

            lea RCX,QWORD PTR [RIP+.L_457d80]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,779
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4043a0:

            mov EAX,ESI
            pop RBX
.L_4043a3:

            ret 
.L_4043a4:

            sub EAX,48
            mov R9D,ECX
            cmp AX,119
            ja .L_4043c8

            jmp .L_404301
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4043b8:

            sub EAX,120
            mov R8,QWORD PTR [R8]
            cmp AX,119
            jbe .L_404301
.L_4043c8:

            test R8,R8
            jne .L_4043b8

            lea RCX,QWORD PTR [RIP+.L_457d80]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_4579f1]
            mov EDX,770
            call __assert_fail@PLT
.L_4043ec:

            mov EDX,1
            jmp .L_40435e
.L_4043f6:

            lea RCX,QWORD PTR [RIP+.L_457d80]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457b88]
            mov EDX,739
            call __assert_fail@PLT
.L_404415:

            mov EDI,1
            jmp .L_4042eb
.L_40441f:

            nop
.L_404420:

            mov QWORD PTR [RDI+48],RSI
            and BYTE PTR [RDI+79],251
            ret 
.L_404429:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404430:

            mov QWORD PTR [RDI+48],RSI
            or BYTE PTR [RDI+79],4
            ret 
.L_404439:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404440:

            mov QWORD PTR [RDI],0
            ret 
.L_404448:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404450:

            movzx R8D,SIL
            movzx ESI,SIL
            lea RAX,QWORD PTR [RDX+RSI*8]
            cmp QWORD PTR [RAX+8],0
            jne .L_4044b4

            cmp QWORD PTR [RAX+24],0
            jne .L_4044b4

            mov R9,QWORD PTR [RDI]
            test R9,R9
            je .L_4044a8

            movsxd RSI,R8D
            cmp ECX,1
            mov R8,QWORD PTR [R9+RSI*8+8]
            mov QWORD PTR [RAX+8],R8
            mov R9,QWORD PTR [RDI]
            mov QWORD PTR [RAX+24],R9
            mov QWORD PTR [R8+RSI*8+24],RDX
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [RAX+RSI*8+8],RDX
            je .L_4044a0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4044a0:

            mov QWORD PTR [RDI],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4044a8:

            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RDI],RDX
            ret 
.L_4044b4:

            lea RCX,QWORD PTR [RIP+.L_457d20]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457bf0]
            sub RSP,8

            mov EDX,819
            call __assert_fail@PLT
.L_4044d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4044e0:

            movzx ECX,SIL
            movzx ESI,SIL
            lea RAX,QWORD PTR [RDX+RSI*8]
            mov R8,QWORD PTR [RAX+8]
            test R8,R8
            je .L_404549

            mov RSI,QWORD PTR [RAX+24]
            test RSI,RSI
            je .L_404549

            cmp RDX,QWORD PTR [RDI]
            je .L_404530
.L_404503:

            movsxd RDX,ECX
            mov QWORD PTR [RSI+RDX*8+8],R8
            mov RCX,QWORD PTR [RAX+8]
            mov RSI,QWORD PTR [RAX+24]
            mov QWORD PTR [RCX+RDX*8+24],RSI
            mov QWORD PTR [RAX+24],0
            mov QWORD PTR [RAX+8],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404530:

            cmp RSI,RDX
            mov QWORD PTR [RDI],RSI
            jne .L_40453f

            mov QWORD PTR [RDI],0
.L_40453f:

            mov RSI,QWORD PTR [RAX+24]
            mov R8,QWORD PTR [RAX+8]
            jmp .L_404503
.L_404549:

            lea RCX,QWORD PTR [RIP+.L_457ce0]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457c38]
            sub RSP,8

            mov EDX,847
            call __assert_fail@PLT
.L_40456c:

            nop
            nop
            nop
            nop
.L_404570:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_40457c

            mov RAX,QWORD PTR [RAX+16]
.L_40457c:

            ret 
.L_40457e:

            nop
            nop
.L_404580:

            cmp QWORD PTR [RSI+48],0
            je .L_404590

            mov EAX,24
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404590:

            push RBX
.L_404591:

            and BYTE PTR [RSI+79],251
            mov ECX,EDX
            mov RBX,RSI
            mov QWORD PTR [RSI+48],RDI
            mov RDX,RSI
            mov ESI,1
            call .L_404450

            movzx EDX,BYTE PTR [RBX+79]
            mov RCX,QWORD PTR [RBX+40]
            and EDX,3
            movzx EDI,DL
            mov ESI,EDX
.L_4045bb:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RCX+RAX*8+5136]
            test RAX,RAX
            jne .L_404618

            test SIL,SIL
            jne .L_4045f8

            cmp DL,3
            je .L_404600

            mov RAX,QWORD PTR [RCX+5160]
            test RAX,RAX
            jne .L_404618

            cmp DL,2
            je .L_404600

            mov RAX,QWORD PTR [RCX+5152]
            test RAX,RAX
            jne .L_404618

            mov ESI,2
.L_4045f8:

            sub ESI,1
            cmp DL,SIL
            jne .L_4045bb
.L_404600:

            mov QWORD PTR [RBX+8],RBX
            mov QWORD PTR [RBX+24],RBX
            xor EAX,EAX
            mov QWORD PTR [RCX+RDI*8+5136],RBX
            pop RBX
.L_404613:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404618:

            mov RDX,QWORD PTR [RAX+8]
            mov QWORD PTR [RBX+24],RAX
            mov QWORD PTR [RBX+8],RDX
            mov QWORD PTR [RDX+24],RBX
            mov QWORD PTR [RAX+8],RBX
            mov QWORD PTR [RCX+RDI*8+5136],RBX
            xor EAX,EAX
            pop RBX
            ret 
.L_404638:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404640:

            test BYTE PTR [RSI+79],4
            mov EAX,23
            je .L_404650
.L_40464b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404650:

            cmp RDI,QWORD PTR [RSI+48]
            jne .L_40464b

            push RBX
.L_404657:

            mov RDX,RSI
            mov RBX,RSI
            mov ESI,1
            call .L_4044e0

            movzx EAX,BYTE PTR [RBX+79]
            mov RDX,QWORD PTR [RBX+40]
            and EAX,3
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RCX*8]
            cmp RBX,QWORD PTR [RDX+5136]
            je .L_4046c0
.L_404682:

            mov RAX,QWORD PTR [RBX+8]
            mov RDX,QWORD PTR [RBX+24]
            mov QWORD PTR [RAX+24],RDX
            mov RAX,QWORD PTR [RBX+24]
            mov RDX,QWORD PTR [RBX+8]
            mov QWORD PTR [RAX+8],RDX
            and BYTE PTR [RBX+79],251
            xor EAX,EAX
            mov QWORD PTR [RBX+8],0
            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+48],0
            pop RBX
.L_4046b9:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4046c0:

            mov RCX,QWORD PTR [RBX+24]
            cmp RBX,RCX
            je .L_4046e8

            movzx ESI,BYTE PTR [RCX+79]
            and ESI,3
            cmp AL,SIL
            mov EAX,0
            cmovne RCX,RAX
.L_4046dc:

            mov QWORD PTR [RDX+5136],RCX
            jmp .L_404682
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4046e8:

            xor ECX,ECX
            jmp .L_4046dc
.L_4046ec:

            nop
            nop
            nop
            nop
.L_4046f0:

            xor EAX,EAX
            xor ECX,ECX
            mov WORD PTR [RSI],AX
            mov RAX,QWORD PTR [RDI]
            mov WORD PTR [RDX],CX
            test RAX,RAX
            je .L_404759

            mov RDI,QWORD PTR [RAX+16]
            test RDI,RDI
            je .L_404759

            nop
            nop
            nop
            nop
            nop
.L_404710:

            add WORD PTR [RSI],1
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_404790

            mov ECX,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404728:

            mov RAX,QWORD PTR [RAX]
            add ECX,1
            test RAX,RAX
            jne .L_404728

            movzx ECX,CL
.L_404736:

            add WORD PTR [RDX],CX
            test BYTE PTR [RDI+79],4
            jne .L_404760

            mov RAX,QWORD PTR [RDI+48]
            test RAX,RAX
            je .L_404759

            mov RAX,QWORD PTR [RAX]
.L_40474b:

            cmp RAX,RDI
            je .L_404759
.L_404750:

            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            jne .L_404710
.L_404759:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404760:

            mov RCX,QWORD PTR [RDI+48]
            test RCX,RCX
            je .L_404759

            mov RAX,QWORD PTR [RCX+24]
            test RAX,RAX
            jne .L_40474b

            mov RAX,QWORD PTR [RCX+16]
            test RAX,RAX
            jne .L_40474b

            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            jne .L_40474b

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            je .L_404750

            jmp .L_40474b
          .byte 0x66
          .byte 0x90
.L_404790:

            mov ECX,1
            jmp .L_404736
.L_404797:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4047a0:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+24],0
            ret 
.L_4047c0:

            mov EDX,ESI
.L_4047c2:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_404802

            test SIL,SIL
            jne .L_4047f5

            cmp DL,3
            je .L_404800

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404802

            cmp DL,2
            je .L_404802

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404808

            mov ESI,2
.L_4047f5:

            sub ESI,1
            cmp DL,SIL
            jne .L_4047c2

            nop
            nop
            nop
.L_404800:

            xor EAX,EAX
.L_404802:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404808:

            ret 
.L_40480a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_404810:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404838

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404838

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_404838

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            jne .L_404838

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404838:

            mov RAX,QWORD PTR [RAX+16]
            ret 
.L_40483d:

            nop
            nop
            nop
.L_404840:

            movzx EAX,SIL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            je .L_4048c0

            lea EDX,DWORD PTR [RSI-1]
            test SIL,SIL
            mov EAX,3
            cmove EDX,EAX
            mov ECX,EDX
.L_40485d:

            movzx EAX,CL
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_4048c8

            test CL,CL
            jne .L_40488e

            cmp DL,3
            je .L_404898

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_4048c8

            cmp DL,2
            je .L_404898

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_4048c8

            mov ECX,2
.L_40488e:

            sub ECX,1
            cmp DL,CL
            jne .L_40485d

            nop
            nop
            nop
.L_404898:

            lea RCX,QWORD PTR [RIP+.L_457c80]
            lea RSI,QWORD PTR [RIP+.L_4579c7]
            lea RDI,QWORD PTR [RIP+.L_457a20]
            sub RSP,8

            mov EDX,962
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4048c0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4048c8:

            mov RAX,QWORD PTR [RAX+16]
            ret 
.L_4048cd:

            nop
            nop
            nop
.L_4048d0:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_4048ee

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_4048ee

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_4048ee

            mov RAX,QWORD PTR [RDI]
.L_4048ee:

            ret 
.L_4048f0:

            movzx ECX,BYTE PTR [RDX+79]
            movzx R8D,SIL
            and ECX,3
            movzx R10D,CL
            mov R9D,ECX
.L_404902:

            movzx EAX,R9B
            mov RAX,QWORD PTR [RDI+RAX*8]
            test RAX,RAX
            jne .L_404950

            test R9B,R9B
            jne .L_404936

            cmp CL,3
            je .L_40493f

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            jne .L_404950

            cmp CL,2
            je .L_40493f

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404950

            mov R9D,2
.L_404936:

            sub R9D,1
            cmp CL,R9B
            jne .L_404902
.L_40493f:

            lea RAX,QWORD PTR [RDX+R8*8]
            mov QWORD PTR [RAX+8],RDX
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RDI+R10*8],RDX
            ret 
.L_404950:

            shl R8,3
            movzx ESI,SIL
            lea RCX,QWORD PTR [RAX+R8*1]
            add R8,RDX
            mov R9,QWORD PTR [RCX+8]
            mov QWORD PTR [R8+24],RAX
            mov QWORD PTR [R8+8],R9
            mov QWORD PTR [R9+RSI*8+24],RDX
            mov QWORD PTR [RCX+8],RDX
            mov QWORD PTR [RDI+R10*8],RDX
            ret 
.L_404979:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404980:

            movzx R8D,BYTE PTR [RDX+79]
            movzx ECX,SIL
            movzx ESI,SIL
            shl RSI,3
            and R8D,3
            movzx EAX,R8B
            lea R10,QWORD PTR [RDI+RAX*8]
            lea RAX,QWORD PTR [RDX+RSI*1]
            mov R9,QWORD PTR [R10]
            mov RDI,QWORD PTR [RAX+24]
            cmp RDX,R9
            je .L_4049e0
.L_4049ad:

            mov RSI,QWORD PTR [RAX+8]
            movsxd RDX,ECX
            mov QWORD PTR [RSI+RDX*8+24],RDI
            mov RCX,QWORD PTR [RAX+24]
            mov RSI,QWORD PTR [RAX+8]
            mov QWORD PTR [RCX+RDX*8+8],RSI
            mov QWORD PTR [RAX+8],0
            mov QWORD PTR [RAX+24],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4049e0:

            cmp R9,RDI
            je .L_404a08

            movzx EDX,BYTE PTR [RDI+79]
            and EDX,3
            cmp DL,R8B
            mov EDX,0
            cmovne RDI,RDX
.L_4049f8:

            mov QWORD PTR [R10],RDI
            mov RDI,QWORD PTR [R9+RSI*1+24]
            jmp .L_4049ad
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404a08:

            xor EDI,EDI
            jmp .L_4049f8
.L_404a0c:

            nop
            nop
            nop
            nop
.L_404a10:

            cmp QWORD PTR [RSI+48],0
            je .L_404a20

            mov EAX,24
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404a20:

            jmp .L_402de0
.L_404a25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404a30:

            test BYTE PTR [RSI+79],4
            je .L_404a48

            cmp RDI,QWORD PTR [RSI+48]
            jne .L_404a48

            jmp .L_402ef0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404a48:

            mov EAX,23
            ret 
.L_404a4e:

            nop
            nop
.L_404a50:

            xor EAX,EAX
            xor ECX,ECX
            mov WORD PTR [RSI],AX
            mov RAX,QWORD PTR [RDI+24]
            mov WORD PTR [RDX],CX
            test RAX,RAX
            jne .L_404a7f

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            jne .L_404a7f

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            jne .L_404a7f

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            jne .L_404a7f
.L_404a7d:

            ret 
.L_404a7f:

            mov RDI,QWORD PTR [RAX+16]
            test RDI,RDI
            je .L_404a7d

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404a90:

            add WORD PTR [RSI],1
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_404b10

            mov ECX,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404aa8:

            mov RAX,QWORD PTR [RAX]
            add ECX,1
            test RAX,RAX
            jne .L_404aa8

            movzx ECX,CL
.L_404ab6:

            add WORD PTR [RDX],CX
            test BYTE PTR [RDI+79],4
            jne .L_404ae0

            mov RAX,QWORD PTR [RDI+48]
            test RAX,RAX
            je .L_404a7d

            mov RAX,QWORD PTR [RAX]
.L_404acb:

            cmp RAX,RDI
            je .L_404a7d
.L_404ad0:

            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            jne .L_404a90

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404ae0:

            mov RCX,QWORD PTR [RDI+48]
            test RCX,RCX
            je .L_404a7d

            mov RAX,QWORD PTR [RCX+24]
            test RAX,RAX
            jne .L_404acb

            mov RAX,QWORD PTR [RCX+16]
            test RAX,RAX
            jne .L_404acb

            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            jne .L_404acb

            mov RAX,QWORD PTR [RCX]
            test RAX,RAX
            je .L_404ad0

            jmp .L_404acb
          .byte 0x66
          .byte 0x90
.L_404b10:

            mov ECX,1
            jmp .L_404ab6
.L_404b17:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404b20:

            mov QWORD PTR [RDI],RDX
            mov QWORD PTR [RDI+8],0
            ret 
.L_404b2c:

            nop
            nop
            nop
            nop
.L_404b30:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            ret 
.L_404b40:

            push R12
            push RBP
            mov R12D,24
            push RBX
            cmp QWORD PTR [RDI+8],RSI
            je .L_404b57

            cmp QWORD PTR [RSI+8],0
            je .L_404b60
.L_404b57:

            mov EAX,R12D
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_404b60:

            mov RBP,RDI
            mov RDI,RSI
            mov RBX,RSI
            call .L_430ac0

            mov RDI,RAX
            xor R12D,R12D
            call .L_4029f0

            cmp RBP,RAX
            jne .L_404b57

            mov RAX,QWORD PTR [RBP+8]
            test RAX,RAX
            je .L_404b98

            mov QWORD PTR [RAX+8],RBX
            mov QWORD PTR [RBP+8],RBX
            jmp .L_404b57
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404b98:

            mov RDI,RBX
            mov QWORD PTR [RBP],RBX
            mov QWORD PTR [RBP+8],RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_42d590

            jmp .L_404b57
.L_404bb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404bc0:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+80]
            pop RBX
            jmp .L_404b40
.L_404bd6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404be0:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_404bfc

            mov RDX,QWORD PTR [RAX+8]
            test RDX,RDX
            mov QWORD PTR [RDI],RDX
            je .L_404c00
.L_404bf4:

            mov QWORD PTR [RAX+8],0
.L_404bfc:

            ret 
          .byte 0x66
          .byte 0x90
.L_404c00:

            mov QWORD PTR [RDI+8],0
            jmp .L_404bf4
.L_404c0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_404c10:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R12,QWORD PTR [RDI+8]
            jmp .L_404c3f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404c20:

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            mov QWORD PTR [RBP],RAX
            je .L_404c50
.L_404c2d:

            mov QWORD PTR [RBX+8],0
            mov RDI,RBX
            call QWORD PTR [RBX]

            cmp R12,RBX
            je .L_404c60
.L_404c3f:

            mov RBX,QWORD PTR [RBP]
            test RBX,RBX
            jne .L_404c20
.L_404c48:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404c50:

            mov QWORD PTR [RBP+8],0
            jmp .L_404c2d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404c60:

            mov RDI,QWORD PTR [RBP]
            test RDI,RDI
            je .L_404c48

            call .L_430ac0

            pop RBX
            pop RBP
            pop R12
            mov RDI,RAX
            jmp .L_42d590
.L_404c7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_404c80:

            mov EAX,4
            mov EDX,12268
            mov ECX,4294967295
            mov ESI,14
            mov R8D,12286
            mov WORD PTR [RDI+6],AX
            mov WORD PTR [RDI+14],DX
            mov WORD PTR [RDI+12286],CX
            mov WORD PTR [RDI+12],SI
            mov WORD PTR [RDI+12284],R8W
            ret 
.L_404cb6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404cc0:

            movzx EAX,WORD PTR [RSI]
            movzx R9D,WORD PTR [RDX]
            movzx R10D,WORD PTR [RSI+RAX*1+2]
            mov EAX,R10D
            shr AX,1
            movzx ECX,AX
            and EAX,32767
            lea R8,QWORD PTR [RDI+RCX*2]
            movzx ECX,WORD PTR [RDI+RAX*2]
            cmp R9W,CX
            ja .L_404cf3

            jmp .L_404d38
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404cf0:

            mov R8,RAX
.L_404cf3:

            movzx EAX,WORD PTR [R8+RCX*1+2]
            shr AX,1
            mov RCX,RAX
            movzx EAX,AX
            and ECX,32767
            lea RAX,QWORD PTR [RDI+RAX*2]
            movzx ECX,WORD PTR [RDI+RCX*2]
            cmp CX,R9W
            jb .L_404cf0

            movzx EAX,WORD PTR [R8]
            movzx R10D,WORD PTR [R8+RAX*1+2]
.L_404d20:

            mov WORD PTR [RDX+R9*1+2],R10W
            movzx EAX,WORD PTR [R8]
            sub RDX,RDI
            mov WORD PTR [R8+RAX*1+2],DX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404d38:

            mov R8,RSI
            jmp .L_404d20
.L_404d3d:

            nop
            nop
            nop
.L_404d40:

            imul EDX,ESI
            test DX,DX
            je .L_404e40

            movzx EAX,WORD PTR [RDI+6]
            lea RSI,QWORD PTR [RDI+6]
            add EDX,3
            and EDX,4294967288
            lea R9D,DWORD PTR [RDX+4]
            movzx ECX,WORD PTR [RSI+RAX*1+2]
            shr CX,1
            movzx EAX,CX
            and ECX,32767
            movzx ECX,WORD PTR [RDI+RCX*2]
            lea RAX,QWORD PTR [RDI+RAX*2]
            cmp R9W,CX
            ja .L_404d8b

            jmp .L_404e60
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404d88:

            mov RAX,R11
.L_404d8b:

            movzx ECX,WORD PTR [RAX+RCX*1+2]
            shr CX,1
            movzx R8D,CX
            and ECX,32767
            movzx ECX,WORD PTR [RDI+RCX*2]
            lea R11,QWORD PTR [RDI+R8*2]
            cmp R9W,CX
            ja .L_404d88
.L_404dab:

            cmp CX,-1
            je .L_404e40

            movzx ECX,WORD PTR [R11+RCX*1+2]
            test CX,CX
            je .L_404e40

            push RBX
.L_404dc5:

            movzx R8D,WORD PTR [RAX]
            movzx EBX,R9W
            lea R10,QWORD PTR [RBX+4]
            mov WORD PTR [RAX+R8*1+2],CX
            movzx R8D,WORD PTR [R11]
            cmp R8,R10
            mov RCX,R8
            jbe .L_404e23

            mov R8,R11
            sub ECX,R9D
            mov WORD PTR [R11],R9W
            sub R8,RDI
            sub ECX,4
            xor R9D,R9D
            lea EDX,DWORD PTR [RDX+R8*1+8]
            movzx R8D,CX
            shr DX,1
            movzx EDX,DX
            lea RDX,QWORD PTR [RDI+RDX*2]
            mov WORD PTR [RDX],CX
            mov WORD PTR [RDX+R8*1+2],R9W
            cmp CX,WORD PTR [RAX]
            jbe .L_404e50

            mov RSI,RAX
            call .L_404cc0

            movzx R8D,WORD PTR [R11]
.L_404e23:

            xor EAX,EAX
            add R11,2
            mov RDX,RBX
            mov WORD PTR [R11+R8*1],AX
            xor ESI,ESI
            mov RDI,R11
            call memset@PLT

            pop RBX
.L_404e3c:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_404e40:

            xor R11D,R11D
            mov RAX,R11
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_404e50:

            call .L_404cc0

            movzx R8D,WORD PTR [R11]
            jmp .L_404e23
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_404e60:

            mov R11,RAX
            mov RAX,RSI
            jmp .L_404dab
.L_404e6b:

            nop
            nop
            nop
            nop
            nop
.L_404e70:

            movzx EDX,WORD PTR [RDI+6]
            lea RAX,QWORD PTR [RDI+6]
            sub RSI,RDI
            mov ECX,ESI
            movzx EDX,WORD PTR [RAX+RDX*1+2]
            cmp DX,SI
            je .L_404ea7

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404e90:

            shr DX,1
            movzx EDX,DX
            lea RAX,QWORD PTR [RDI+RDX*2]
            movzx EDX,WORD PTR [RAX]
            movzx EDX,WORD PTR [RAX+RDX*1+2]
            cmp DX,CX
            jne .L_404e90
.L_404ea7:

            ret 
.L_404ea9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_404eb0:

            test RSI,RSI
            je .L_405070

            sub RSI,RDI
            lea RDX,QWORD PTR [RSI+65534]
            lea RSI,QWORD PTR [RDI+6]
            and EDX,65534
            add RDX,RDI
            movzx EAX,WORD PTR [RDX]
            mov RCX,RDX
            sub RCX,RDI
            lea EAX,DWORD PTR [RAX+RCX*1+4]
            shr AX,1
            cmp CX,14
            movzx R10D,AX
            movzx EAX,AX
            lea R9,QWORD PTR [RDI+RAX*2]
            je .L_405000

            movzx R11D,WORD PTR [RDX-2]
            test R11W,R11W
            je .L_405000

            movzx EAX,WORD PTR [RDI+6]
            push R12
.L_404f0a:

            push RBP
            push RBX
.L_404f0c:

            lea RBX,QWORD PTR [RSI+RAX*1+2]
            movzx R8D,WORD PTR [RBX]
            and R8D,65534
            add R8,RDI
            movzx EAX,WORD PTR [R8]
            movzx EAX,WORD PTR [R8+RAX*1+2]
            cmp R11W,AX
            jne .L_404f3b

            jmp .L_4050d8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_404f38:

            mov R8,RCX
.L_404f3b:

            shr AX,1
            movzx EAX,AX
            lea RCX,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [RCX]
            movzx EAX,WORD PTR [RCX+RAX*1+2]
            cmp R11W,AX
            jne .L_404f38

            movzx EAX,WORD PTR [R8]
            lea RBX,QWORD PTR [R8+RAX*1+2]
.L_404f5c:

            mov WORD PTR [RBX],R11W
            movzx EAX,WORD PTR [RCX]
            xor R11D,R11D
            mov WORD PTR [RCX+RAX*1+2],R11W
            movzx EBP,WORD PTR [R9]
            cmp BP,-1
            je .L_405078

            movzx EAX,BP
            movzx EBX,WORD PTR [R9+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            test BX,BX
            je .L_40507b

            mov R12,R9
            sub R12,RDI
            cmp BP,AX
            mov R11D,R12D
            jbe .L_405098

            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R12W
            je .L_404fd5

            nop
            nop
            nop
            nop
.L_404fb8:

            shr AX,1
            movzx EAX,AX
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R11W
            jne .L_404fb8
.L_404fd5:

            mov WORD PTR [RBP],BX
            movzx EAX,WORD PTR [R9]
            xor ESI,ESI
            mov WORD PTR [R9+RAX*1+2],SI
            movzx EAX,WORD PTR [RDI+R10*2]
            movzx ESI,WORD PTR [RCX]
            lea EAX,DWORD PTR [RAX+RSI*1+4]
            mov WORD PTR [RCX],AX
            jmp .L_40507b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405000:

            movzx EAX,WORD PTR [R9]
            cmp AX,-1
            je .L_405068

            movzx R11D,WORD PTR [R9+RAX*1+2]
            test R11W,R11W
            je .L_405068

            movzx EAX,WORD PTR [RDI+6]
            sub R9,RDI
            mov R8D,R9D
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            cmp AX,R9W
            je .L_40504b

            nop
            nop
.L_405030:

            shr AX,1
            movzx EAX,AX
            lea RSI,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [RSI]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RCX]
            cmp AX,R8W
            jne .L_405030
.L_40504b:

            mov WORD PTR [RCX],R11W
            movzx EAX,WORD PTR [RDX]
            movzx ECX,WORD PTR [RDI+R10*2]
            lea EAX,DWORD PTR [RAX+RCX*1+4]
            mov WORD PTR [RDX],AX
            jmp .L_404cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405068:

            jmp .L_404cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405070:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405078:

            movzx EAX,WORD PTR [RCX]
.L_40507b:

            movzx EDX,WORD PTR [RDX]
            mov RSI,R8
            lea EAX,DWORD PTR [RAX+RDX*1+4]
            mov RDX,RCX
            mov WORD PTR [RCX],AX
            pop RBX
            pop RBP
            pop R12
            jmp .L_404cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405098:

            movzx EAX,WORD PTR [RDI+6]
            lea RBP,QWORD PTR [RSI+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R12W
            je .L_4050e3

            nop
            nop
            nop
            nop
            nop
.L_4050b0:

            shr AX,1
            movzx EAX,AX
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8]
            lea RBP,QWORD PTR [R8+RAX*1+2]
            movzx EAX,WORD PTR [RBP]
            cmp AX,R11W
            jne .L_4050b0

            jmp .L_404fd5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4050d8:

            mov RCX,R8
            mov R8,RSI
            jmp .L_404f5c
.L_4050e3:

            mov R8,RSI
            jmp .L_404fd5
.L_4050eb:

            nop
            nop
            nop
            nop
            nop
.L_4050f0:

            push RBX
            mov RBX,RDI
            call .L_402840

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+112]
            pop RBX
            jmp .L_404eb0
.L_405106:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405110:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_402840

            add RSP,8
            mov RDX,RBP
            mov RSI,RBX
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+112]
            jmp .L_404d40
.L_405136:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405140:

            lea RSI,QWORD PTR [RIP+.L_4050f0]
            lea RDI,QWORD PTR [RIP+.L_405110]
            jmp .L_4408d0
.L_405153:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405160:

            movzx EAX,BYTE PTR [RSI]
            cmp AL,255
            je .L_4051b8

            add EAX,1
            cmp AL,26
            mov BYTE PTR [RSI],AL
            ja .L_4051a1
.L_405170:

            mov EDX,DWORD PTR [RDI]
            bt EDX,EAX
            jb .L_4051b0

            lea ECX,DWORD PTR [RAX+1]
            mov EDX,26
            sub EDX,EAX
            movzx ECX,CL
            movzx EDX,DL
            add EDX,ECX
            jmp .L_40519b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405190:

            mov EAX,DWORD PTR [RDI]
            shr EAX,CL
            add ECX,1
            test AL,1
            jne .L_4051b0
.L_40519b:

            cmp ECX,EDX
            mov BYTE PTR [RSI],CL
            jne .L_405190
.L_4051a1:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4051b0:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4051b8:

            mov BYTE PTR [RSI],11
            mov EAX,11
            jmp .L_405170
.L_4051c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4051d0:

            push R15
            push R14
            xor EAX,EAX
            push R13
            push R12
            movzx R12D,DX
            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_458066]
            mov RBX,RSI
            mov R13,RDI
            sub RSP,24
.L_4051f1:

            mov RDI,RBX
            mov QWORD PTR [RSP+8],RSI
            mov RSI,R12
            call snprintf@PLT

            cmp R12,1
            jbe .L_40537d

            mov EDX,DWORD PTR [R13]
            mov EAX,11
            sub R12,1
            lea R10,QWORD PTR [RBX+1]
            mov R15D,EAX
            bt EDX,EAX
            jb .L_40523c

            nop
            nop
            nop
            nop
.L_405228:

            add EAX,1
            cmp EAX,27
            je .L_405369

            bt EDX,EAX
            mov R15D,EAX
            jae .L_405228
.L_40523c:

            xor ESI,ESI
            mov R14,R10
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405248:

            movzx EBP,R15B
            cmp BPL,255
            je .L_4053b0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405260:

            lea EBX,DWORD PTR [RBP+1]
            cmp BL,26
            ja .L_405294

            mov ECX,DWORD PTR [R13]
            movzx EDX,BL
            bt ECX,EBX
            jb .L_405398
.L_405278:

            lea EAX,DWORD PTR [RBX+1]
            movzx EAX,AL
            jmp .L_40528e
.L_405280:

            mov EDX,EAX
            add EAX,1
            bt ECX,EDX
            jb .L_405398
.L_40528e:

            cmp AL,27
            mov EBX,EAX
            jne .L_405280
.L_405294:

            mov R10D,23
.L_40529a:

            lea RAX,QWORD PTR [RIP+.L_458063]
            lea R9,QWORD PTR [RIP+.L_45d18b]
            test SIL,SIL
            mov DWORD PTR [RSP],R10D
            movzx R11D,R15B
            lea R8,QWORD PTR [RIP+.L_45806b]
            cmovne R9,RAX
            sub RSP,8
.L_4052c2:

            mov RSI,R12
            push R11
            mov RDI,R14
            xor EAX,EAX
            mov RCX,-1
            mov EDX,1
            mov DWORD PTR [RSP+20],R11D
            call __snprintf_chk@PLT

            cdqe 
            cmp RAX,R12
            pop RSI
            pop RDI
.L_4052e9:

            jae .L_40537d

            add R14,RAX
            sub R12,RAX
            cmp BPL,R15B
            mov R10D,DWORD PTR [RSP]
            jbe .L_405354

            mov R11D,DWORD PTR [RSP+4]
            lea RAX,QWORD PTR [RIP+.L_458063]
            lea R9,QWORD PTR [RIP+.L_459d79]
            lea R8,QWORD PTR [RIP+.L_45806b]
            mov RCX,-1
            mov EDX,1
            mov RSI,R12
            mov RDI,R14
            add R11D,1
            cmp EBP,R11D
            cmove R9,RAX
            sub RSP,8
.L_405339:

            xor EAX,EAX
            push RBP
            call __snprintf_chk@PLT

            cdqe 
            cmp RAX,R12
            pop RDX
            pop RCX
            jae .L_40537d

            mov R10D,DWORD PTR [RSP]
            add R14,RAX
            sub R12,RAX
.L_405354:

            test R10D,R10D
            mov ESI,1
            jne .L_405366

            mov R15D,EBX
            jmp .L_405248
.L_405366:

            mov R10,R14
.L_405369:

            lea RDX,QWORD PTR [RIP+.L_458068]
            mov RSI,R12
            mov RDI,R10
            xor EAX,EAX
            call snprintf@PLT
.L_40537d:

            mov RAX,QWORD PTR [RSP+8]
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405398:

            movzx EAX,BPL
            add EAX,1
            cmp EAX,EDX
            jne .L_4053c2

            movzx EBP,BL
            cmp BPL,255
            jne .L_405260
.L_4053b0:

            mov ECX,DWORD PTR [R13]
            mov EBX,11
            test CH,8
            je .L_405278
.L_4053c2:

            xor R10D,R10D
            jmp .L_40529a
.L_4053ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4053d0:

            cmp DWORD PTR [RDI],1
            mov EAX,1
            je .L_4053e1

            movzx EAX,BYTE PTR [RDI+4]
            and EAX,1
.L_4053e1:

            ret 
.L_4053e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4053f0:

            cmp DWORD PTR [RDI],2
            mov EAX,1
            je .L_405403

            movzx EAX,BYTE PTR [RDI+4]
            shr AL,1
            and EAX,1
.L_405403:

            ret 
.L_405405:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405410:

            mov EDX,DWORD PTR [RDI]
            lea EAX,DWORD PTR [RDX-3]
            cmp EAX,1
            setbe AL
            cmp EDX,6
            sete DL
            or EAX,EDX
            ret 
.L_405424:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405430:

            push R13
            push R12
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,40
.L_40543e:

            mov QWORD PTR [RDX+48],0
            mov DWORD PTR [RDX+56],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RSI,RSI
            mov DWORD PTR [RSP+20],0
            movups XMMWORD PTR [RDX],XMM0
            movups XMMWORD PTR [RDX+16],XMM0
            movups XMMWORD PTR [RDX+32],XMM0
            je .L_405588

            mov RBP,RSI
            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],7
            jne .L_4054a2

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBP
            mov RBX,RDX
            call .L_408800

            test EAX,EAX
            mov R12D,EAX
            jne .L_4054a8

            cmp DWORD PTR [RSP+20],2
            je .L_4054d0
.L_4054a2:

            mov R12D,6
.L_4054a8:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_405593

            add RSP,40
.L_4054c3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4054d0:

            mov RAX,QWORD PTR [RSP+12]
            lea RSI,QWORD PTR [RBX+50]
            mov RDI,RBP
            mov QWORD PTR [RBX],RAX
            call .L_408760

            movzx EAX,BYTE PTR [RBP+9]
            mov RDI,RBP
            mov BYTE PTR [RBX+54],AL
            movzx EAX,BYTE PTR [RBP+10]
            mov BYTE PTR [RBX+55],AL
            movzx EAX,BYTE PTR [RBP+11]
            mov BYTE PTR [RBX+56],AL
            call .L_409160

            mov RDI,RBP
            mov R13D,EAX
            call .L_4091e0

            cmp R13B,29
            jbe .L_4054a8

            cmp WORD PTR [RAX],4095
            jne .L_4054a8

            cmp BYTE PTR [RAX+2],0
            jne .L_4054a8

            cmp BYTE PTR [RAX+3],0
            jne .L_4054a8

            cmp BYTE PTR [RAX+4],3
            jne .L_4054a8

            movzx EDX,BYTE PTR [RAX+5]
            mov ECX,EDX
            movzx EDX,BYTE PTR [RBX+57]
            sar ECX,4
            and EDX,4294967280
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movzx ECX,BYTE PTR [RAX+5]
            and EDX,4294967263
            and ECX,1
            shl ECX,5
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movzx EDI,BYTE PTR [RAX+5]
            and EDX,4294967279
            lea ECX,DWORD PTR [RDI+RDI*1]
            and ECX,16
            or EDX,ECX
            mov BYTE PTR [RBX+57],DL
            movdqu XMM0,XMMWORD PTR [RAX+6]
            movups XMMWORD PTR [RBX+8],XMM0
            movzx EDX,BYTE PTR [RAX+22]
            mov BYTE PTR [RBX+24],DL
            mov RAX,QWORD PTR [RAX+22]
            mov QWORD PTR [RBX+25],RAX
            jmp .L_4054a8
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405588:

            mov R12D,7
            jmp .L_4054a8
.L_405593:

            call __stack_chk_fail@PLT
.L_405598:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4055a0:

            movzx EDX,BYTE PTR [RDI+178]
            cmp DL,255
            je .L_405610

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_4055f9
.L_4055ba:

            mov ESI,DWORD PTR [RDI+172]
            bt ESI,EDX
            jb .L_405606

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_4055ec
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4055e0:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_4055ff
.L_4055ec:

            cmp ECX,EAX
            mov R8D,ECX
            jne .L_4055e0

            mov BYTE PTR [RDI+178],CL
.L_4055f9:

            mov EAX,23
            ret 
.L_4055ff:

            mov BYTE PTR [RDI+178],R8B
.L_405606:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405610:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_4055ba
.L_40561e:

            nop
            nop
.L_405620:

            sub RSP,24
.L_405624:

            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RCX
            xor ECX,ECX
            cmp SIL,127
            je .L_40565f

            movzx EDX,BYTE PTR [RDI+178]
            mov RAX,RDI
            mov BYTE PTR [RSP+7],SIL
            mov RDI,QWORD PTR [RDI+184]
            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],DL
            call QWORD PTR [RAX+192]
.L_40565f:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_405674

            add RSP,24
.L_405673:

            ret 
.L_405674:

            call __stack_chk_fail@PLT
.L_405679:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405680:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            je .L_4056ab

            movzx EDX,BYTE PTR [RBX+179]
            cmp DL,127
            je .L_4056a5

            cmp DL,AL
            jge .L_4056ab
.L_4056a5:

            mov BYTE PTR [RBX+179],AL
.L_4056ab:

            pop RBX
            ret 
.L_4056ad:

            nop
            nop
            nop
.L_4056b0:

            mov RAX,QWORD PTR [RDI+160]
            cmp RAX,RSI
            je .L_4056f1

            cmp QWORD PTR [RSI+16],0
            jne .L_4056f1

            test RAX,RAX
            je .L_4056e0

            mov QWORD PTR [RAX+16],RSI
            mov QWORD PTR [RDI+160],RSI
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4056e0:

            mov QWORD PTR [RDI+152],RSI
            mov QWORD PTR [RDI+160],RSI
            xor EAX,EAX
            ret 
.L_4056f1:

            lea RCX,QWORD PTR [RIP+.L_458320]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_4580e8]
            sub RSP,8

            mov EDX,431
            call __assert_fail@PLT
.L_405714:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405720:

            push R12
            push RBP
            lea RBP,QWORD PTR [RSI+8]
            push RBX
            mov R12,RSI
            mov RBX,RSI
            nop
            nop
.L_405730:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_405730

            movzx EAX,BYTE PTR [R12]
            pop RBX
            pop RBP
            and EAX,4294967294
            or EAX,2
            mov BYTE PTR [R12],AL
            pop R12
            ret 
.L_405755:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405760:

            push R12
            push RBP
            lea RDX,QWORD PTR [RSI+7]
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,16
.L_405772:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RBX,RSP
            nop
            nop
            nop
.L_405788:

            movzx ECX,BYTE PTR [RDX]
            sub RDX,1
            mov BYTE PTR [RBX+RAX*1],CL
            add RAX,1
            cmp RAX,8
            jne .L_405788

            mov RDI,RBP
            call .L_430ac0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4012f0

            mov RAX,QWORD PTR [R12]
            mov QWORD PTR [RBP+96],RAX
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4057d0

            add RSP,16
.L_4057cb:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4057d0:

            call __stack_chk_fail@PLT
.L_4057d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4057e0:

            push RBX
            mov EBX,ESI
            mov WORD PTR [RDI+104],SI
            call .L_430ac0

            movzx ESI,BX
            mov RDI,RAX
            call .L_401300

            xor EAX,EAX
            pop RBX
            ret 
.L_4057fb:

            nop
            nop
            nop
            nop
            nop
.L_405800:

            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            mov RBP,RSI
            sub RSP,8
            call strlen@PLT

            cmp RAX,16
            mov EDX,7
            ja .L_405832

            lea RDI,QWORD PTR [RBX+109]
            mov EDX,17
            mov RSI,RBP
            call .L_42cad0

            xor EDX,EDX
.L_405832:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_40583b:

            nop
            nop
            nop
            nop
            nop
.L_405840:

            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_407bf0]
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RBX
            mov RBP,RSI
            sub RSP,8
.L_40585e:

            mov DWORD PTR [RDI-8],0
            mov BYTE PTR [RDI-4],0
            call .L_404b20

            lea RAX,QWORD PTR [RIP+.L_407d30]
            mov DWORD PTR [RBX+32],0
            mov DWORD PTR [RBX+56],0
            mov DWORD PTR [RBX+80],0
            mov DWORD PTR [RBX+104],4294967294
            lea R13,QWORD PTR [RBX+96]
            mov QWORD PTR [RBX+24],RAX
            lea RAX,QWORD PTR [RBX+24]
            mov BYTE PTR [RBX+108],11
            mov QWORD PTR [RBX+136],0
            mov QWORD PTR [RBX+144],0
            lea R12,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+40],RAX
            lea RAX,QWORD PTR [RIP+.L_407c50]
            mov QWORD PTR [RBX+152],0
            mov QWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+48],RAX
            lea RAX,QWORD PTR [RBX+48]
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RIP+.L_407650]
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RBX+72]
            mov QWORD PTR [RBX+88],RAX
            call .L_401460

            mov BYTE PTR [RBX+168],AL
            call .L_401460

            lea RDI,QWORD PTR [RBX+216]
            mov BYTE PTR [RBX+169],AL
            mov EAX,32523
            mov WORD PTR [RBX+178],AX
            mov QWORD PTR [RBX+170],0
            mov QWORD PTR [RBX+184],0
            mov QWORD PTR [RBX+192],0
            mov QWORD PTR [RBX+200],0
            mov QWORD PTR [RBX+208],0
            call .L_407ed0

            mov RDI,RBP
            mov RBP,R13
            call .L_401380

            mov QWORD PTR [RBX+552],0
            mov QWORD PTR [RBX+544],RAX
            mov QWORD PTR [RBX+688],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405990:

            add RBP,1
            call .L_401460

            cmp RBP,R12
            mov BYTE PTR [RBP-1],AL
            jne .L_405990

            movzx EAX,BYTE PTR [RBX+96]
            lea RDI,QWORD PTR [RBX+568]
            mov QWORD PTR [RBX+560],0
            mov QWORD PTR [RBX+680],0
            and RDI,-8
            and EAX,4294967294
            or EAX,2
            mov BYTE PTR [RBX+96],AL
            mov EAX,EBX
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+688]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_401330

            mov RAX,QWORD PTR [RIP+.L_458370]
            lea RSI,QWORD PTR [RIP+.L_458360]
            mov RDI,RBX
            mov QWORD PTR [RBX+126],RAX
            call .L_405800

            movzx EBP,WORD PTR [RBX+106]
            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4012e0

            mov RSI,R13
            mov RDI,RBX
            call .L_405760

            movzx EBP,WORD PTR [RBX+104]
            mov RDI,RBX
            call .L_430ac0

            add RSP,8
.L_405a3c:

            mov RDI,RAX
            pop RBX
            mov ESI,EBP
            pop RBP
            pop R12
            pop R13
            jmp .L_401300
.L_405a4c:

            nop
            nop
            nop
            nop
.L_405a50:

            push RBX
            mov EBX,ESI
            mov WORD PTR [RDI+106],SI
            call .L_430ac0

            movzx ESI,BX
            mov RDI,RAX
            call .L_4012e0

            xor EAX,EAX
            pop RBX
            ret 
.L_405a6b:

            nop
            nop
            nop
            nop
            nop
.L_405a70:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+126],RAX
            xor EAX,EAX
            ret 
.L_405a7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_405a80:

            push RBX
            mov RAX,QWORD PTR [RDI+144]
            mov EBX,24
            cmp RAX,RSI
            je .L_405a99

            cmp QWORD PTR [RSI+16],0
            je .L_405aa0
.L_405a99:

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405aa0:

            cmp QWORD PTR [RDI+136],0
            je .L_405ad0

            mov QWORD PTR [RAX+16],RSI
            mov QWORD PTR [RDI+144],RSI
.L_405ab5:

            mov EAX,DWORD PTR [RDI]
            or BYTE PTR [RDI+4],8
            xor EBX,EBX
            test EAX,EAX
            jne .L_405a99

            add RDI,8
            call .L_404bc0

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_405ad0:

            mov QWORD PTR [RDI+136],RSI
            mov QWORD PTR [RDI+144],RSI
            jmp .L_405ab5
.L_405ae0:

            push RBX
            cmp QWORD PTR [RDI+552],0
            mov EBX,24
            je .L_405af8
.L_405af0:

            mov EAX,EBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405af8:

            mov EAX,DWORD PTR [RDI]
            or BYTE PTR [RDI+4],16
            xor EBX,EBX
            mov QWORD PTR [RDI+552],RSI
            test EAX,EAX
            jne .L_405af0

            add RDI,8
            call .L_404bc0

            mov EAX,EBX
            pop RBX
            ret 
.L_405b18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405b20:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_405b60

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            test BYTE PTR [RDI+4],64
            jne .L_405b3f

            lea RAX,QWORD PTR [RDI+72]
            cmp QWORD PTR [RDI+88],RAX
            je .L_405b68
.L_405b3f:

            movzx EBP,BYTE PTR [RBX+108]
            mov RDI,RBX
            call .L_430ac0

            add RSP,8
            mov RDI,RAX
            pop RBX
            mov ESI,EBP
            pop RBP
            jmp .L_401360
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405b60:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405b68:

            call .L_430ac0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            jne .L_405b3f

            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_401350

            cmp EAX,13
            je .L_405b3f

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_405b95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405ba0:

            lea EDX,DWORD PTR [RSI-11]
            cmp DL,15
            ja .L_405bc0

            sub RSP,8
            mov BYTE PTR [RDI+108],SIL
            call .L_405b20

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_405bc0:

            mov EAX,7
            ret 
.L_405bc6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405bd0:

            cmp ESI,6
            ja .L_405bf8

            lea RDX,QWORD PTR [RIP+.L_458120]
            mov ESI,ESI
            movsxd RAX,DWORD PTR [RDX+RSI*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405bf0:

            or BYTE PTR [RDI+4],16
            nop
            nop
            nop
            nop
.L_405bf8:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_405c00

            ret 
.L_405c00:

            add RDI,8
            jmp .L_404bc0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405c10:

            or BYTE PTR [RDI+4],32
            jmp .L_405bf8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405c20:

            or BYTE PTR [RDI+4],1
            jmp .L_405bf8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405c30:

            or BYTE PTR [RDI+4],2
            jmp .L_405bf8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405c40:

            or BYTE PTR [RDI+4],4
            jmp .L_405bf8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405c50:

            or BYTE PTR [RDI+4],8
            jmp .L_405bf8
.L_405c56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405c60:

            test EDX,EDX
            mov EAX,4294967295
            mov QWORD PTR [RDI+184],R8
            cmove EDX,EAX
            mov WORD PTR [RDI+176],CX
            mov BYTE PTR [RDI+178],255
            mov DWORD PTR [RDI+172],EDX
            jmp .L_405bd0
.L_405c8a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_405c90:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_405d08

            movzx R9D,BYTE PTR [RDI+4]
            test R9B,1
            jne .L_405d08

            cmp EAX,2
            je .L_405d08

            and R9D,2
            mov EAX,5
            jne .L_405d10

            sub RSP,8
.L_405cb6:

            mov R10D,EDX
            test DX,DX
            mov EAX,300
            mov QWORD PTR [RDI+192],RCX
            mov QWORD PTR [RDI+184],R8
            cmove R10D,EAX
            test ESI,ESI
            mov EAX,4294967295
            cmove ESI,EAX
            mov WORD PTR [RDI+176],R10W
            mov BYTE PTR [RDI+178],255
            mov DWORD PTR [RDI+172],ESI
            mov ESI,1
            call .L_405bd0

            xor EAX,EAX
            add RSP,8
.L_405d02:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405d08:

            mov EAX,5
            ret 
          .byte 0x66
          .byte 0x90
.L_405d10:

            ret 
.L_405d12:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405d20:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_405d88

            movzx R9D,BYTE PTR [RDI+4]
            test R9B,1
            jne .L_405d88

            cmp EAX,2
            je .L_405d88

            and R9D,2
            mov EAX,5
            jne .L_405d90

            sub RSP,8
            mov EAX,4294967295
            test ESI,ESI
            cmove ESI,EAX
            mov QWORD PTR [RDI+192],RCX
            mov QWORD PTR [RDI+184],R8
            mov DWORD PTR [RDI+172],ESI
            mov WORD PTR [RDI+176],DX
            mov ESI,2
            mov BYTE PTR [RDI+178],255
            call .L_405bd0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_405d88:

            mov EAX,5
            ret 
          .byte 0x66
          .byte 0x90
.L_405d90:

            ret 
.L_405d92:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_405da0:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_405da8:

            movzx EDI,BYTE PTR [RSI+RAX*1]
            mov BYTE PTR [R8+RAX*1],DIL
            add RAX,1
            cmp RAX,8
            jne .L_405da8

            mov EAX,EDX
            mov BYTE PTR [R8+11],DL
            mov BYTE PTR [R8+12],CL
            shr EAX,24
            mov BYTE PTR [R8+8],AL
            mov EAX,EDX
            shr EAX,16
            mov BYTE PTR [R8+9],AL
            movzx EAX,DH
            mov BYTE PTR [R8+10],AL
            ret 
.L_405ddc:

            nop
            nop
            nop
            nop
.L_405de0:

            push RBX
            mov RBX,RSI
            xor EDX,EDX
            mov RDI,RBX
            mov ESI,2051
            call .L_408de0

            mov RDI,RBX
            mov ESI,65535
            call .L_408550

            mov RDI,RBX
            mov ESI,65535
            call .L_408620

            mov RDI,RBX
            mov ESI,7
            pop RBX
            jmp .L_4090e0
.L_405e1b:

            nop
            nop
            nop
            nop
            nop
.L_405e20:

            push R13
            push R12
            xor EDX,EDX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov ESI,49152
            mov RDI,RBX
            sub RSP,24
.L_405e3a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_408de0

            movzx ESI,WORD PTR [RBP+106]
            mov RDI,RBX
            call .L_408790

            lea RSI,QWORD PTR [RBP+96]
            mov RDI,RBX
            call .L_408940

            mov RDI,RBX
            call .L_4091e0

            mov RDI,RBP
            mov DWORD PTR [RAX],4095
            mov R12,RAX
            call .L_430af0

            test BYTE PTR [RAX+1548],8
            mov ESI,4
            jne .L_405eb8
.L_405e8e:

            mov RDI,RBX
            call .L_4091a0

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_405f38

            add RSP,24
.L_405eae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_405eb8:

            mov EAX,8195
            mov RDI,RBP
            mov WORD PTR [R12+4],AX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+1360]
            call .L_40f650

            cmp BYTE PTR [RSP+7],0
            jne .L_405f30

            and BYTE PTR [R12+5],254
.L_405ee9:

            lea R13,QWORD PTR [RBP+109]
            mov ESI,16
            mov RDI,R13
            call strnlen@PLT

            pxor XMM0,XMM0
            lea RDI,QWORD PTR [R12+6]
            mov RSI,R13
            mov RDX,RAX
            movups XMMWORD PTR [R12+6],XMM0
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP+126]
            mov ESI,30
            mov QWORD PTR [R12+22],RAX
            jmp .L_405e8e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405f30:

            or BYTE PTR [R12+5],1
            jmp .L_405ee9
.L_405f38:

            call __stack_chk_fail@PLT
.L_405f3d:

            nop
            nop
            nop
.L_405f40:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            sub RSP,416
.L_405f55:

            lea R13,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+408],RAX
            xor EAX,EAX
.L_405f6d:

            call .L_430af0

            mov RDI,R13
            mov R12,RAX
            mov DWORD PTR [RSP+12],0
            call .L_431ad0
.L_405f85:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX],8
            je .L_40615a

            lea RSI,QWORD PTR [RSP+10]
            mov RDI,RBX
.L_405f99:

            call .L_408ae0

            movzx EAX,BYTE PTR [RSP+10]
            cmp AL,8
            je .L_406190

            cmp AL,16
            je .L_405fe0

            test AL,AL
            je .L_4061e8

            lea RCX,QWORD PTR [RIP+.L_4582e0]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,874
            call __assert_fail@PLT
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_405fe0:

            mov EAX,DWORD PTR [RBP+688]
            mov RDI,RBX
            mov DWORD PTR [RSP+395],4294967295
            lea ESI,DWORD PTR [RAX+1]
            mov DWORD PTR [RBP+688],ESI
            call .L_408b40

            lea R12,QWORD PTR [RSP+395]
            mov RDI,RBX
            mov RSI,R12
            call .L_408c00

            mov ESI,255
            mov RDI,RBX
            call .L_408d30

            lea RBP,QWORD PTR [RIP+.L_458378]
            lea R14,QWORD PTR [RIP+.L_458380]
.L_406030:

            lea RSI,QWORD PTR [RSP+9]
            mov RDI,RBX
            call .L_408ab0

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBX
            call .L_408b10

            movzx ESI,BYTE PTR [RSP+9]
            mov ECX,DWORD PTR [RSP+12]
            lea R12,QWORD PTR [RSP+395]
            xor EAX,EAX
            nop
            nop
            nop
.L_406060:

            movzx EDX,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [R12+RAX*1],DL
            add RAX,1
            cmp RAX,8
            jne .L_406060

            mov EAX,ECX
            mov BYTE PTR [RSP+407],SIL
            mov EDX,16
            shr EAX,24
            mov RSI,R14
            mov RDI,R13
            mov BYTE PTR [RSP+403],AL
            mov EAX,ECX
            mov BYTE PTR [RSP+405],CH
            shr EAX,16
            mov BYTE PTR [RSP+406],CL
            mov BYTE PTR [RSP+404],AL
            call .L_4313e0

            mov RDI,RBX
            call .L_408d90

            sub EAX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+11],AL
            movzx EBP,AL
            call .L_409160

            mov RDI,RBX
            movzx R14D,AL
            call .L_409110

            movzx ESI,AL
            mov R9D,13
            mov R8,R12
            mov ECX,EBP
            mov EDX,R14D
            mov RDI,R13
            call .L_431400

            test EAX,EAX
            jne .L_406221

            mov RDI,RBX
            call .L_409110

            mov RSI,QWORD PTR [RBX]
            movzx EDX,AL
            mov RDI,R13
            call .L_4316d0

            mov RDI,RBX
            call .L_409160

            mov RDI,RBX
            movzx EBP,AL
            call .L_4091e0

            mov RDI,RBX
            mov R12,RAX
            call .L_4091e0

            mov R8D,1
            mov ECX,EBP
            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_4317e0

            mov RDI,RBX
            call .L_409210

            lea RDX,QWORD PTR [RSP+11]
            mov RSI,RAX
            mov RDI,R13
            call .L_431a20
.L_40615a:

            mov RDI,R13
.L_40615d:

            call .L_431b00
.L_406162:

            mov RAX,QWORD PTR [RSP+408]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40621c

            add RSP,416
.L_406180:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406190:

            add RBP,96
            test BYTE PTR [RBX+13],4
            lea R14,QWORD PTR [R12+1404]
            jne .L_406030

            mov ESI,DWORD PTR [R12+1452]
            mov RDI,RBX
.L_4061b1:

            call .L_408b40

            lea RDI,QWORD PTR [R12+1368]
            call .L_412c60

            mov ESI,DWORD PTR [R12+1384]
            mov RDI,RBX
            and ESI,127
            add ESI,1
            movzx ESI,SIL
            call .L_408d30

            jmp .L_406030
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4061e8:

            add RBP,96
            test BYTE PTR [RBX+13],4
            lea R14,QWORD PTR [R12+1528]
            jne .L_406030

            mov ESI,DWORD PTR [R12+1544]
            mov RDI,RBX
            call .L_408b40
.L_40620e:

            add DWORD PTR [R12+1544],1
            jmp .L_406030
.L_40621c:

            call __stack_chk_fail@PLT
.L_406221:

            lea RCX,QWORD PTR [RIP+.L_4582e0]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,887
            call __assert_fail@PLT
.L_406240:

            mov RBX,RAX
            mov RDI,R13
            call .L_431b00

            mov RDI,RBX
.L_40624e:

            call _Unwind_Resume@PLT
.L_406253:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406260:

            cmp DWORD PTR [RDI],6
            jne .L_406278

            mov RAX,QWORD PTR [RDI+552]
.L_40626c:

            test RAX,RAX
            je .L_406281

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406278:

            mov RAX,QWORD PTR [RDI+544]
            jmp .L_40626c
.L_406281:

            sub RSP,8
            call .L_400f24
.L_40628a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_406290:

            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],32
            jne .L_4062a0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4062a0:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RDI,RAX
            call .L_4013a0

            test AL,1
            je .L_4062c0

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4062c0:

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,16
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_4062d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4062e0:

            cmp BYTE PTR [RDI+29792],0
            jne .L_4062f0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4062f0:

            add RDI,14280
            jmp .L_406290
.L_4062f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406300:

            push RBX
            mov RBX,RSI
            call .L_430ac0

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_401370
.L_406315:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406320:

            push RBX
            mov EBX,ESI
            call .L_430ac0

            movzx ESI,BL
            mov RDI,RAX
            pop RBX
            jmp .L_401360
.L_406334:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406340:

            sub RSP,8
            call .L_430ac0

            add RSP,8
            mov RDI,RAX
            jmp .L_401350
.L_406355:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406360:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,472
.L_40637a:

            lea RBP,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+456],RAX
            xor EAX,EAX
.L_406392:

            call .L_430af0

            mov RDI,RBP
            mov R13,RAX
            call .L_431ad0
.L_4063a2:

            mov RAX,QWORD PTR [RBX]
            and BYTE PTR [RBX+13],254
            test BYTE PTR [RAX],8
            je .L_406440

            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
.L_4063ba:

            call .L_408ab0

            lea RSI,QWORD PTR [RSP+44]
            mov RDI,RBX
            call .L_408b10

            lea RSI,QWORD PTR [RSP+41]
            mov RDI,RBX
            call .L_408ae0
.L_4063d9:

            lea RAX,QWORD PTR [R13+1368]
            mov QWORD PTR [RSP+24],RAX
            movzx EAX,BYTE PTR [RSP+41]
            cmp AL,8
            je .L_406448

            cmp AL,16
            je .L_406668

            test AL,AL
            je .L_4064e0
.L_4063fe:

            mov R12D,8
.L_406404:

            mov RDI,RBP
.L_406407:

            call .L_431b00
.L_40640c:

            mov RCX,QWORD PTR [RSP+456]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_40674e

            add RSP,472
.L_40642d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406440:

            xor R12D,R12D
            jmp .L_406404
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406448:

            test R14,R14
            je .L_4063fe

            lea RSI,QWORD PTR [RSP+43]
            mov RDI,RBX
.L_406455:

            call .L_408cf0

            movzx EAX,BYTE PTR [RSP+43]
            mov ECX,DWORD PTR [R13+1384]
            mov EDX,ECX
            mov DWORD PTR [RSP+20],ECX
            sub EAX,1
            and EDX,127
            mov BYTE PTR [RSP+43],AL
            movzx EAX,AL
            cmp EAX,EDX
            je .L_4066e8

            mov ECX,DWORD PTR [RSP+20]
            lea R15D,DWORD PTR [RCX-1]
            mov EDX,R15D
            and EDX,127
            cmp EAX,EDX
            je .L_406730

            add DWORD PTR [RSP+20],1
            mov ECX,DWORD PTR [RSP+20]
            mov EDX,ECX
            and EDX,127
            cmp EAX,EDX
            jne .L_4063fe

            lea RDI,QWORD PTR [R13+1368]
            mov ESI,ECX
            call .L_412c20

            mov QWORD PTR [RSP+8],RAX
.L_4064c0:

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,7
            je .L_4066f9

            mov ECX,DWORD PTR [RSP+44]
.L_4064d4:

            movzx EDX,BYTE PTR [R12]
            jmp .L_406505
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4064e0:

            mov RAX,R13
            add RAX,1528
            mov QWORD PTR [RSP+8],RAX
            je .L_4063fe

            movzx EDX,BYTE PTR [R12]
            mov ECX,DWORD PTR [RSP+44]
            mov DWORD PTR [RSP+20],0
.L_406505:

            movzx ESI,BYTE PTR [RSP+40]
            xor EAX,EAX
            lea R15,QWORD PTR [RSP+419]
            jmp .L_406525
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406520:

            movzx EDX,BYTE PTR [R12+RAX*1]
.L_406525:

            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp RAX,8
            jne .L_406520

            mov EAX,ECX
            mov RDI,RBX
            mov BYTE PTR [RSP+429],CH
            shr EAX,24
            mov BYTE PTR [RSP+430],CL
            mov BYTE PTR [RSP+431],SIL
            mov BYTE PTR [RSP+427],AL
            mov EAX,ECX
            shr EAX,16
            mov BYTE PTR [RSP+428],AL
            call .L_408d90

            mov RSI,QWORD PTR [RSP+8]
            sub EAX,2
            mov EDX,16
            mov RDI,RBP
            mov BYTE PTR [RSP+42],AL
            call .L_4313e0

            mov RDI,RBX
            movzx R12D,BYTE PTR [RSP+42]
            call .L_409160

            movzx EAX,AL
            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_409110

            mov EDX,DWORD PTR [RSP+8]
            movzx ESI,AL
            mov R9D,13
            mov R8,R15
            mov ECX,R12D
            mov RDI,RBP
            call .L_431400

            test EAX,EAX
            mov R12D,EAX
            jne .L_4063fe

            mov RDI,RBX
            call .L_409110

            mov RSI,QWORD PTR [RBX]
            movzx EDX,AL
            mov RDI,RBP
            call .L_4316d0

            mov RDI,RBX
            call .L_409160

            mov RDI,RBX
            movzx R15D,AL
            call .L_4091e0

            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_4091e0

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            mov ECX,R15D
            mov RSI,RAX
            mov RDI,RBP
            call .L_4317e0

            lea R15,QWORD PTR [RSP+432]
            lea RDX,QWORD PTR [RSP+42]
            mov RDI,RBP
            mov RSI,R15
            call .L_431a20

            movzx EAX,BYTE PTR [RSP+42]
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_409210

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RAX
            mov RDI,R15
            call memcmp@PLT

            test EAX,EAX
            jne .L_4063fe

            cmp BYTE PTR [RSP+41],8
            je .L_406698
.L_40665b:

            or BYTE PTR [RBX+13],1
            jmp .L_406404
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_406668:

            lea RAX,QWORD PTR [RIP+.L_458380]
            mov ECX,DWORD PTR [RSP+44]
            mov EDX,53
            lea R12,QWORD PTR [RIP+.L_458378]
            mov DWORD PTR [RSP+20],0
            mov QWORD PTR [RSP+8],RAX
            jmp .L_406505
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406698:

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,7
            jne .L_40665b

            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R14+20]
            je .L_4066ba

            mov DWORD PTR [R14+20],EAX
            mov DWORD PTR [R14+16],0
.L_4066ba:

            mov EAX,DWORD PTR [RSP+44]
            add EAX,1
            mov DWORD PTR [R14+12],EAX
            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R13+1384]
            jbe .L_40665b

            mov RDI,QWORD PTR [RSP+24]
            mov ESI,EAX
            call .L_412d70

            jmp .L_40665b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4066e8:

            lea RAX,QWORD PTR [R13+1404]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_4064c0
.L_4066f9:

            mov EAX,DWORD PTR [RSP+20]
            cmp EAX,DWORD PTR [R14+20]
            jb .L_4063fe

            mov ECX,DWORD PTR [RSP+44]
            jne .L_4064d4

            lea EAX,DWORD PTR [RCX+1]
            cmp EAX,DWORD PTR [R14+12]
            jb .L_4063fe

            jne .L_4064d4

            mov R12D,29
            jmp .L_406404
          .byte 0x90
.L_406730:

            lea RDI,QWORD PTR [R13+1368]
            mov ESI,R15D
            call .L_412c20
.L_40673f:

            mov QWORD PTR [RSP+8],RAX
            mov DWORD PTR [RSP+20],R15D
            jmp .L_4064c0
.L_40674e:

            call __stack_chk_fail@PLT
.L_406753:

            mov RBX,RAX
            mov RDI,RBP
            call .L_431b00

            mov RDI,RBX
.L_406761:

            call _Unwind_Resume@PLT
.L_406766:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406770:

            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,16
.L_40677b:

            lea RSI,QWORD PTR [RSP+7]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_409070

            movzx EAX,BYTE PTR [RSP+7]
            cmp AL,4
            je .L_4067f0

            cmp AL,7
            je .L_4067c8

            add DWORD PTR [RBX+648],1
            xor EAX,EAX
.L_4067ab:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40680b

            add RSP,16
.L_4067bf:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4067c8:

            movzx EAX,BYTE PTR [RBX+4]
            add DWORD PTR [RBX+644],1
            test AL,AL
            jns .L_4067e3

            or EAX,4
            mov BYTE PTR [RBX+4],AL
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_406800
.L_4067e3:

            mov EAX,2
            jmp .L_4067ab
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4067f0:

            add DWORD PTR [RBX+636],1
            xor EAX,EAX
            jmp .L_4067ab
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406800:

            lea RDI,QWORD PTR [RBX+8]
            call .L_404bc0

            jmp .L_4067e3
.L_40680b:

            call __stack_chk_fail@PLT
.L_406810:

            mov QWORD PTR [RDI+200],RSI
            mov QWORD PTR [RDI+208],RDX
            ret 
.L_40681f:

            nop
.L_406820:

            sub RSP,8
            call .L_430ac0

            add RSP,8
            mov RDI,RAX
            jmp .L_4013b0
.L_406835:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406840:

            push RBP
            push RBX
            mov EBX,ESI
            mov RBP,RDI
            sub RSP,8
            call .L_430ac0

            movzx ESI,BL
            mov RDI,RAX
            call .L_401310

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_405b20
.L_406869:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406870:

            sub RSP,8
            call .L_430ac0

            mov RDI,RAX
            call .L_4013a0

            test AL,12
            setne AL
            add RSP,8
            ret 
.L_40688b:

            nop
            nop
            nop
            nop
            nop
.L_406890:

            sub RSP,8
            call .L_430ac0

            mov RDI,RAX
            call .L_4013a0

            shr EAX,2
            add RSP,8
            and EAX,1
            ret 
.L_4068ac:

            nop
            nop
            nop
            nop
.L_4068b0:

            push R15
            push R14
            lea R14,QWORD PTR [RDI+24]
            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R14
            mov R13,RSI
            mov R15,RDX
            sub RSP,56
.L_4068d1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+36],0
            call .L_430c70

            cmp R12D,11
            je .L_406ae0

            jbe .L_406aa0

            cmp R12D,14
            je .L_406aa9

            cmp R12D,15
            jne .L_406d11

            xor ESI,ESI
.L_406914:

            movzx EDX,WORD PTR [RBX+694]
            cmp DX,511
            ja .L_40692c

            add EDX,1
            mov WORD PTR [RBX+694],DX
.L_40692c:

            lea RDI,QWORD PTR [RBX+692]
            movzx EDX,DX
            call .L_412ed0

            cmp R12D,15
            jne .L_406af0

            add DWORD PTR [RBX+608],1
            mov RDI,RBX
            call .L_406870

            test AL,AL
            je .L_406c78
.L_40695c:

            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R13
            mov BYTE PTR [RBX+170],0
            mov RSI,RBP
            call .L_4085a0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41d020

            mov RCX,RAX
            mov RAX,QWORD PTR [R13]
            movzx EBP,BYTE PTR [RAX]
            shr BPL,5
            and EBP,1
            test RCX,RCX
            setne AL
            and EAX,EBP
.L_4069a3:

            add BYTE PTR [RBX+171],1
            test R12D,R12D
            jne .L_406b8a

            test BPL,BPL
            mov BYTE PTR [RBX+171],0
            je .L_406ce0
.L_4069c3:

            xor R8D,R8D
            test R15,R15
            mov QWORD PTR [RSP],RCX
            je .L_406a14

            mov RDX,QWORD PTR [R15]
            movzx EDX,BYTE PTR [RDX]
            shr DL,4
            and EDX,1
            test AL,AL
            mov R8D,EDX
            je .L_406a14

            mov RDI,RBX
            mov BYTE PTR [RSP+15],DL
            movsx R15D,BYTE PTR [R15+10]
            call .L_430ac0

            mov RDI,RAX
            call .L_401450

            mov RCX,QWORD PTR [RSP]
            movsx ESI,AL
            mov EDX,R15D
            lea RDI,QWORD PTR [RCX+28]
            call .L_413080

            movzx R8D,BYTE PTR [RSP+15]
.L_406a14:

            add DWORD PTR [RBX+560],1
.L_406a1b:

            cmp DWORD PTR [RSP+36],1
            je .L_406bc3
.L_406a26:

            add DWORD PTR [RBX+564],1
.L_406a2d:

            test BPL,BPL
            je .L_406ab8

            add DWORD PTR [RBX+572],1
            test R12D,R12D
            jne .L_406a49

            add DWORD PTR [RBX+576],1
.L_406a49:

            mov EAX,DWORD PTR [RBX]
            cmp EAX,3
            je .L_406ac6
.L_406a50:

            jbe .L_406be0

            cmp EAX,4
            je .L_406c10

            cmp EAX,6
            jne .L_406d61

            mov QWORD PTR [RBX+552],0
            mov RDI,RBX
            call .L_407180
.L_406a7b:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_406d80

            add RSP,56
.L_406a93:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_406aa0:

            test R12D,R12D
            jne .L_406d11
.L_406aa9:

            mov ESI,1
            jmp .L_406914
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406ab8:

            mov EAX,DWORD PTR [RBX]
            add DWORD PTR [RBX+580],1
            cmp EAX,3
            jne .L_406a50
.L_406ac6:

            add DWORD PTR [RBX+592],1
            mov RDI,RBX
            call .L_407180

            jmp .L_406a7b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406ae0:

            add DWORD PTR [RBX+612],1
            jmp .L_40695c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_406af0:

            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R13
            mov BYTE PTR [RBX+170],0
            mov RSI,RBP
            call .L_4085a0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41d020

            mov RCX,RAX
            mov RAX,QWORD PTR [R13]
            movzx EBP,BYTE PTR [RAX]
            shr BPL,5
            and EBP,1
            test RCX,RCX
            setne AL
            and AL,BPL
            je .L_4069a3

            test R12D,R12D
            jne .L_406d00

            mov ESI,1
.L_406b4c:

            lea RDI,QWORD PTR [RCX+32]
            mov EDX,128
            mov BYTE PTR [RSP+15],AL
            mov QWORD PTR [RSP],RCX
            call .L_412ed0

            movzx EAX,BYTE PTR [RSP+15]
            mov RCX,QWORD PTR [RSP]
.L_406b6b:

            add BYTE PTR [RBX+171],1
            test R12D,R12D
            jne .L_406b88

            mov BYTE PTR [RBX+171],0
            mov EBP,EAX
            jmp .L_4069c3
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406b88:

            mov EBP,EAX
.L_406b8a:

            mov RDI,RBX
            call .L_406890

            test AL,AL
            je .L_406ca0
.L_406b9a:

            add DWORD PTR [RBX+560],1
            cmp R12D,15
            mov BYTE PTR [RBX+171],0
            jne .L_406bb5

            add DWORD PTR [RBX+616],1
.L_406bb5:

            xor R8D,R8D
            cmp DWORD PTR [RSP+36],1
            jne .L_406a26
.L_406bc3:

            cmp WORD PTR [RSP+28],-1
            jne .L_406a26

            add DWORD PTR [RBX+568],1
            jmp .L_406a2d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_406be0:

            cmp EAX,1
            jne .L_406d61

            add DWORD PTR [RBX+596],1
            movzx EBX,WORD PTR [RBX+176]
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R14
            call .L_430d50

            jmp .L_406a7b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406c10:

            mov RDI,R13
            mov BYTE PTR [RSP],R8B
            call .L_4090a0

            test AL,AL
            jne .L_406cc8

            add DWORD PTR [RBX+584],1
.L_406c2b:

            mov RAX,QWORD PTR [RBX+136]
            mov RDX,QWORD PTR [RAX+16]
            test RDX,RDX
            mov QWORD PTR [RBX+136],RDX
            je .L_406cf0
.L_406c46:

            test BYTE PTR [R13+13],4
            mov QWORD PTR [RAX+16],0
            jne .L_406c5c

            add BYTE PTR [RBX+169],1
.L_406c5c:

            mov RDI,RAX
            mov EDX,R12D
            mov RSI,R13
            call QWORD PTR [RAX+8]

            mov RDI,RBX
            call .L_407180

            jmp .L_406a7b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406c78:

            movzx EAX,BYTE PTR [RBX+170]
            cmp AL,3
            ja .L_40695c

            add EAX,1
            mov RDI,RBX
            mov BYTE PTR [RBX+170],AL
            call .L_406fa0

            jmp .L_406a7b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406ca0:

            movzx EAX,BYTE PTR [R13+12]
            cmp BYTE PTR [RBX+171],AL
            jae .L_406b9a

            add DWORD PTR [RBX+604],1
            mov RDI,RBX
            call .L_406fa0

            jmp .L_406a7b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_406cc8:

            movzx R8D,BYTE PTR [RSP]
            test R8B,R8B
            jne .L_406d30
.L_406cd2:

            add DWORD PTR [RBX+588],1
            jmp .L_406c2b
          .byte 0x66
          .byte 0x90
.L_406ce0:

            add DWORD PTR [RBX+560],1
            xor R8D,R8D
            jmp .L_406a1b
          .byte 0x90
.L_406cf0:

            mov QWORD PTR [RBX+144],0
            jmp .L_406c46
.L_406d00:

            cmp R12D,14
            jne .L_406b6b

            xor ESI,ESI
            jmp .L_406b4c
.L_406d11:

            lea RCX,QWORD PTR [RIP+.L_458200]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1170
            call __assert_fail@PLT
.L_406d30:

            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov ESI,EAX
            mov EDX,100
            call .L_430d50

            mov EAX,DWORD PTR [RBX]
            or BYTE PTR [RBX+4],32
            test EAX,EAX
            jne .L_406cd2

            lea RDI,QWORD PTR [RBX+8]
            call .L_404bc0

            jmp .L_406cd2
.L_406d61:

            lea RCX,QWORD PTR [RIP+.L_458200]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1355
            call __assert_fail@PLT
.L_406d80:

            call __stack_chk_fail@PLT
.L_406d85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406d90:

            push R12
            push RBP
            push RBX
.L_406d94:

            cmp DWORD PTR [RDI],6
            mov RBX,RDI
            jne .L_406e50

            mov RBP,QWORD PTR [RDI+552]
.L_406da7:

            test RBP,RBP
            je .L_406f70

            or BYTE PTR [RBP+13],8
            cmp WORD PTR [RBX+170],0
            jne .L_406de8

            mov EAX,DWORD PTR [RBX]
            cmp EAX,3
            je .L_406f00

            jbe .L_406e60

            cmp EAX,4
            je .L_406eb0

            cmp EAX,6
            jne .L_406f32

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406de8:

            movzx R12D,BYTE PTR [RBP+9]
            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            mov ESI,R12D
            call .L_401360

            test EAX,EAX
            jne .L_406f51

            mov RDI,RBX
            call .L_430ac0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401370

            test EAX,EAX
            jne .L_406f75

            cmp QWORD PTR [RBX+200],0
            je .L_406f94

            or BYTE PTR [RBP+13],2
            mov RDI,RBP
            mov RSI,QWORD PTR [RBX+208]
            mov RAX,QWORD PTR [RBX+200]
            pop RBX
.L_406e47:

            pop RBP
            pop R12
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_406e50:

            mov RBP,QWORD PTR [RDI+544]
            jmp .L_406da7

            nop
            nop
            nop
            nop
.L_406e60:

            cmp EAX,1
            jne .L_406f32

            mov RDI,RBX
            call .L_430ac0

            mov ESI,65535
            mov RDI,RAX
            call .L_4012e0

            movzx EAX,BYTE PTR [RBX+178]
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RBP+9],AL
            call .L_405de0

            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],0
            mov BYTE PTR [RBP+12],4
.L_406e9f:

            mov RSI,RBP
            mov RDI,RBX
            call .L_405f40

            jmp .L_406de8
          .byte 0x90
.L_406eb0:

            movzx EAX,BYTE PTR [RBX+108]
            mov RSI,RBP
            mov BYTE PTR [RBP+9],AL
            mov RAX,QWORD PTR [RBX+136]
            mov RDI,RAX
            call QWORD PTR [RAX]

            test EAX,EAX
            jne .L_406ee0

            test BYTE PTR [RBP+13],4
            jne .L_406e9f

            movzx EDX,BYTE PTR [RBX+169]
            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],DL
            jmp .L_406e9f
.L_406ee0:

            mov RSI,RBP
            mov RDI,RBX
            mov ECX,11
            pop RBX
.L_406eec:

            pop RBP
            pop R12
            xor EDX,EDX
            jmp .L_4068b0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_406f00:

            movzx EAX,BYTE PTR [RBX+108]
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RBP+9],AL
            call .L_405e20

            movzx EAX,BYTE PTR [RBX+168]
            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RBX+168],DL
            mov RDX,QWORD PTR [RBP]
            mov BYTE PTR [RDX+2],AL
            mov BYTE PTR [RBP+12],4
            jmp .L_406e9f
.L_406f32:

            lea RCX,QWORD PTR [RIP+.L_458260]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1057
            call __assert_fail@PLT
.L_406f51:

            lea RCX,QWORD PTR [RIP+.L_458260]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,1069
            call __assert_fail@PLT
.L_406f70:

            call .L_400f24
.L_406f75:

            lea RCX,QWORD PTR [RIP+.L_458260]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,1072
            call __assert_fail@PLT
.L_406f94:

            pop RBX
.L_406f95:

            pop RBP
            pop R12
            ret 
.L_406f99:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_406fa0:

            push R12
            push RBP
            push RBX
.L_406fa4:

            mov RBX,RDI
            call .L_406870

            test AL,AL
            jne .L_407070

            movzx EDX,BYTE PTR [RBX+171]
            movzx EAX,BYTE PTR [RBX+170]
            lea EBP,DWORD PTR [RDX+RAX*1+3]
            call .L_401460

            cmp EBP,5
            mov ECX,5
            mov EDX,4294967295
            cmovbe ECX,EBP
            shl EDX,CL
            not EDX
            and EAX,EDX
            lea EBP,DWORD PTR [RAX+RAX*4]
            shl EBP,6
            test BYTE PTR [RBX+4],64
            je .L_407040
.L_406fed:

            mov EAX,DWORD PTR [RBX]
            sub EAX,1
            cmp EAX,1
            ja .L_407080

            movzx R12D,BYTE PTR [RBX+178]
.L_407003:

            mov RDI,RBX
            call .L_430ac0

            mov ESI,R12D
            mov RDI,RAX
            call .L_401360
.L_407016:

            call .L_401240

            mov EDX,274877907
            mov ESI,EAX
            mov EAX,EBP
            mul EDX
            lea RDI,QWORD PTR [RBX+48]
            pop RBX
.L_40702b:

            pop RBP
            pop R12
            shr EDX,6
            jmp .L_430d50
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407040:

            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            jne .L_406fed

            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_401350

            cmp EAX,13
            jne .L_407016

            jmp .L_406fed
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407070:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_406d90
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407080:

            movzx R12D,BYTE PTR [RBX+108]
            jmp .L_407003
.L_40708a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407090:

            movzx EAX,BYTE PTR [RDI+4]
            test AL,32
            jne .L_4070e8

            test AL,16
            jne .L_4070d0

            test AL,1
            jne .L_407128

            test AL,2
            jne .L_407140

            test AL,4
            jne .L_407110

            test AL,8
            je .L_407158

            and EAX,4294967287
            mov DWORD PTR [RDI],4
            mov BYTE PTR [RDI+4],AL
            jmp .L_406fa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4070d0:

            and EAX,4294967279
            mov DWORD PTR [RDI],6
            mov BYTE PTR [RDI+4],AL
            jmp .L_406fa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4070e8:

            push RBX
.L_4070e9:

            movzx EBX,BYTE PTR [RDI+108]
            and EAX,4294967263
            mov BYTE PTR [RDI+4],AL
            mov DWORD PTR [RDI],5
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBX
            pop RBX
            jmp .L_401360
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407110:

            and EAX,4294967291
            mov DWORD PTR [RDI],3
            mov BYTE PTR [RDI+4],AL
            jmp .L_406fa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407128:

            and EAX,4294967294
            mov DWORD PTR [RDI],1
            mov BYTE PTR [RDI+4],AL
            jmp .L_407190
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407140:

            and EAX,4294967293
            mov DWORD PTR [RDI],2
            mov BYTE PTR [RDI+4],AL
            jmp .L_407250
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407158:

            jmp .L_405b20
.L_40715d:

            nop
            nop
            nop
.L_407160:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_407170

            jmp .L_407090
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407170:

            ret 
.L_407172:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407180:

            mov DWORD PTR [RDI],0
            jmp .L_407090
.L_40718b:

            nop
            nop
            nop
            nop
            nop
.L_407190:

            movzx EDX,BYTE PTR [RDI+178]
            cmp DL,255
            je .L_407230

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_4071e9
.L_4071ae:

            mov ESI,DWORD PTR [RDI+172]
            bt ESI,EDX
            jb .L_407229

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_4071dc
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4071d0:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_407222
.L_4071dc:

            cmp ECX,EAX
            mov R8D,ECX
            jne .L_4071d0

            mov BYTE PTR [RDI+178],CL
.L_4071e9:

            push RBP
.L_4071ea:

            push RBX
            mov RBX,RDI
            sub RSP,8
            movzx EBP,WORD PTR [RDI+106]
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4012e0

            mov RDI,QWORD PTR [RBX+184]
            xor ESI,ESI
            call QWORD PTR [RBX+192]

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_407180
.L_407222:

            mov BYTE PTR [RDI+178],R8B
.L_407229:

            jmp .L_406fa0
          .byte 0x66
          .byte 0x90
.L_407230:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_4071ae
.L_407241:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407250:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_40725b:

            movzx EDX,BYTE PTR [RDI+178]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp DL,255
            je .L_407400

            add EDX,1
            cmp DL,26
            mov BYTE PTR [RDI+178],DL
            ja .L_4072d0
.L_407289:

            mov ESI,DWORD PTR [R12+172]
            bt ESI,EDX
            jb .L_407317

            lea ECX,DWORD PTR [RDX+1]
            mov EAX,26
            sub EAX,EDX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_4072bc
          .byte 0x66
          .byte 0x90
.L_4072b0:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_40730f
.L_4072bc:

            cmp ECX,EAX
            mov EDI,ECX
            jne .L_4072b0

            mov BYTE PTR [R12+178],CL
            nop
            nop
            nop
            nop
            nop
            nop
.L_4072d0:

            mov RDI,QWORD PTR [R12+184]
            xor ESI,ESI
            call QWORD PTR [R12+192]

            mov DWORD PTR [R12],0
            mov RDI,R12
            call .L_407090
.L_4072f2:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4074cf

            add RSP,16
.L_40730a:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_40730f:

            mov BYTE PTR [R12+178],DIL
.L_407317:

            cmp WORD PTR [R12+176],0
            jne .L_407418

            movzx EBX,BYTE PTR [R12+178]
            lea RBP,QWORD PTR [RSP+6]
.L_407335:

            mov RDI,R12
            call .L_430ac0

            movzx ESI,BL
            mov RDI,RAX
            call .L_401360

            mov RDI,R12
            call .L_430ac0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            je .L_407380

            movzx EDX,BYTE PTR [R12+178]
            mov BYTE PTR [RSP+7],AL
            mov RSI,RBP
            mov RDI,QWORD PTR [R12+184]
            mov BYTE PTR [RSP+6],DL
            call QWORD PTR [R12+192]
.L_407380:

            movzx EBX,BYTE PTR [R12+178]
            cmp BL,255
            je .L_4073f0

            add EBX,1
            cmp BL,26
            mov BYTE PTR [R12+178],BL
            ja .L_4072d0
.L_4073a2:

            mov ESI,DWORD PTR [R12+172]
            bt ESI,EBX
            jb .L_407335

            lea ECX,DWORD PTR [RBX+1]
            mov EAX,26
            sub EAX,EBX
            movzx ECX,CL
            movzx EAX,AL
            add EAX,ECX
            jmp .L_4073d8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4073c8:

            mov EDX,ESI
            shr EDX,CL
            add ECX,1
            and EDX,1
            jne .L_4074c2
.L_4073d8:

            cmp EAX,ECX
            mov EBX,ECX
            jne .L_4073c8

            mov BYTE PTR [R12+178],AL
            jmp .L_4072d0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4073f0:

            mov BYTE PTR [R12+178],11
            mov EBX,11
            jmp .L_4073a2
.L_407400:

            mov BYTE PTR [RDI+178],11
            mov EDX,11
            jmp .L_407289
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407418:

            mov RDI,R12
            call .L_430ac0

            mov RDI,RAX
            call .L_4013a0

            test AL,2
            jne .L_40748f

            movzx EBX,BYTE PTR [R12+178]
            mov RDI,R12
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBX
            call .L_401360

            movzx EBX,WORD PTR [R12+176]
            mov BYTE PTR [R12+179],127
            call .L_401240

            lea RDI,QWORD PTR [R12+24]
            mov ESI,EAX
            mov EDX,EBX
            call .L_430d50

            call .L_401240

            lea RDI,QWORD PTR [R12+48]
            mov EDX,1
            mov ESI,EAX
            call .L_430d50

            mov RDI,R12
            call .L_405680

            jmp .L_4072f2
.L_40748f:

            movzx EBP,WORD PTR [R12+176]
            movzx EBX,BYTE PTR [R12+178]
            mov RDI,R12
            call .L_430ac0

            mov RDI,RAX
            mov EDX,EBP
            mov ESI,EBX
            call .L_401430

            test EAX,EAX
            jne .L_4072d0

            jmp .L_4072f2
.L_4074c2:

            mov BYTE PTR [R12+178],BL
            jmp .L_407335
.L_4074cf:

            call __stack_chk_fail@PLT
.L_4074d4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4074e0:

            push RBX
            mov RBX,RDI
            sub RSP,16
.L_4074e8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp SIL,127
            je .L_407520

            movzx EAX,BYTE PTR [RDI+178]
            mov BYTE PTR [RSP+7],SIL
            lea RSI,QWORD PTR [RSP+6]
            mov RDI,QWORD PTR [RDI+184]
            mov BYTE PTR [RSP+6],AL
            call QWORD PTR [RBX+192]
.L_407520:

            mov RDI,RBX
            call .L_407250

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40753e

            add RSP,16
.L_40753c:

            pop RBX
            ret 
.L_40753e:

            call __stack_chk_fail@PLT
.L_407543:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407550:

            cmp BYTE PTR [RDI+29792],0
            je .L_407588

            cmp BYTE PTR [RDI+24336],0
            movsx ESI,SIL
            jne .L_407578

            add RDI,14280
            jmp .L_4074e0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407578:

            add RDI,24328
            jmp .L_42d450
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407588:

            ret 
.L_40758a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407590:

            movzx EAX,BYTE PTR [RDI+4]
            mov EDX,EAX
            shr DL,6
            and EDX,1
            cmp DL,SIL
            je .L_4075d0

            mov EDX,ESI
            and EAX,4294967231
            push RBX
            and EDX,1
            mov RBX,RDI
            shl EDX,6
            or EAX,EDX
            test SIL,SIL
            mov BYTE PTR [RDI+4],AL
            je .L_4075c5

            and EAX,4294967263
            cmp DWORD PTR [RDI],5
            mov BYTE PTR [RDI+4],AL
            je .L_4075d8
.L_4075c5:

            mov RDI,RBX
            pop RBX
            jmp .L_405b20
          .byte 0x66
          .byte 0x90
.L_4075d0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4075d8:

            lea RDI,QWORD PTR [RDI+72]
            call .L_430c70

            mov DWORD PTR [RBX],0
            mov RDI,RBX
            call .L_407090

            jmp .L_4075c5
.L_4075f1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407600:

            cmp DWORD PTR [RDI],5
            je .L_407610

            jmp .L_405b20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407610:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            call .L_407090

            mov RBX,QWORD PTR [RBX+152]
            test RBX,RBX
            je .L_407647

            nop
            nop
            nop
            nop
            nop
.L_407630:

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            je .L_40763e

            mov RDI,RBX
            call RAX
.L_40763e:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            jne .L_407630
.L_407647:

            pop RBX
            ret 
.L_407649:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407650:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_407600
.L_40766a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407670:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,EDX
            mov RBX,RDI
            sub RSP,56
.L_407683:

            add DWORD PTR [RDI+620],1
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test EDX,EDX
            mov DWORD PTR [RSP+24],0
            mov DWORD PTR [RSP+36],0
            mov BYTE PTR [RSP+13],127
            je .L_4076d0
.L_4076b3:

            sub EBP,8
            cmp EBP,21
            ja .L_407950

            lea RDX,QWORD PTR [RIP+.L_45813c]
            movsxd RAX,DWORD PTR [RDX+RBP*4]
            add RAX,RDX
            jmp RAX
          .byte 0x90
.L_4076d0:

            test RSI,RSI
            mov R12,RSI
            je .L_4078a8

            movzx EAX,BYTE PTR [RSI+13]
            mov EDX,EAX
            and EDX,4294967294
            mov BYTE PTR [RSI+13],DL
            cmp QWORD PTR [RDI+200],0
            je .L_407708

            and EAX,4294967292
            mov BYTE PTR [RSI+13],AL
            mov RSI,QWORD PTR [RDI+208]
            mov RDI,R12
            call QWORD PTR [RBX+200]
.L_407708:

            mov RDI,R12
            call .L_409030

            test EAX,EAX
            mov EBP,EAX
            jne .L_4076b3

            lea R13,QWORD PTR [RSP+16]
            lea RBP,QWORD PTR [RSP+28]
            mov RDI,R12
            mov RSI,R13
            call .L_408800

            mov RSI,RBP
            mov RDI,R12
            call .L_4085a0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41d020

            mov R14,RAX
            mov EAX,DWORD PTR [RSP+36]
            cmp EAX,1
            je .L_4079a0

            cmp EAX,2
            je .L_407960
.L_407766:

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_407920
.L_407773:

            cmp EAX,2
            je .L_407a00
.L_40777c:

            cmp DWORD PTR [RSP+36],1
            je .L_407a66
.L_407787:

            add DWORD PTR [RBX+624],1
.L_40778e:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_406360

            test EAX,EAX
            mov EBP,EAX
            je .L_407a7e

            cmp EAX,29
            jne .L_4076b3

            cmp DWORD PTR [RBX],5
            jne .L_407910

            test R14,R14
            je .L_407901
.L_4077c4:

            cmp BYTE PTR [RSP+13],127
            lea R13,QWORD PTR [R14+28]
            je .L_4077d7

            mov RDI,R13
            call .L_413070
.L_4077d7:

            movsx R15D,BYTE PTR [R12+10]
            mov RDI,RBX
            call .L_430ac0

            mov RDI,RAX
            call .L_401450

            mov EDX,R15D
            movsx ESI,AL
            mov RDI,R13
            call .L_413080

            mov RAX,QWORD PTR [R12]
            test BYTE PTR [RAX],8
            je .L_40782a

            movzx EAX,BYTE PTR [R14+26]
            and EAX,7
            cmp AL,6
            je .L_40781a

            ja .L_40782a

            cmp AL,1
            jne .L_407930
.L_40781a:

            mov RDI,R12
            call .L_4090a0

            test AL,AL
            je .L_407950
.L_40782a:

            mov EAX,DWORD PTR [RBX]
            cmp EAX,2
            je .L_407a8c

            cmp EAX,5
            je .L_407af6

            cmp EAX,1
            je .L_407ad1
.L_407847:

            mov RAX,QWORD PTR [R12]
            movzx EAX,BYTE PTR [RAX]
            and EAX,7
            cmp AL,1
            je .L_407b17

            jb .L_407b0b

            cmp AL,3
            jne .L_407a9c

            mov RSI,R12
            mov RDI,RBX
            call .L_406770

            cmp EAX,2
            je .L_4078b0
.L_407877:

            mov R13,QWORD PTR [RBX+152]
            test R13,R13
            je .L_40789b

            nop
            nop
            nop
            nop
            nop
.L_407888:

            mov RDI,R13
            mov RSI,R12
            call QWORD PTR [R13]

            mov R13,QWORD PTR [R13+16]
            test R13,R13
            jne .L_407888
.L_40789b:

            test EBP,EBP
            je .L_4078b0

            jmp .L_4076b3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4078a8:

            add DWORD PTR [RBX+664],1
            nop
.L_4078b0:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_407b3c

            add RSP,56
.L_4078c8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4078d8:

            add DWORD PTR [RBX+652],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4078e8:

            add DWORD PTR [RBX+680],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4078f8:

            add DWORD PTR [RBX+676],1
            jmp .L_4078b0
.L_407901:

            cmp DWORD PTR [RSP+36],0
            jne .L_407b23

            nop
            nop
            nop
            nop
.L_407910:

            add DWORD PTR [RBX+660],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407920:

            test R14,R14
            jne .L_4079f0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407930:

            add DWORD PTR [RBX+668],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407940:

            add DWORD PTR [RBX+672],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407950:

            add DWORD PTR [RBX+684],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407960:

            lea RSI,QWORD PTR [RSP+14]
            mov RDI,R12
            call .L_408520

            movzx EAX,WORD PTR [RSP+14]
            cmp WORD PTR [RBX+106],AX
            jne .L_407990

            lea RSI,QWORD PTR [RBX+96]
            mov RDI,RBP
            call .L_408380

            test AL,AL
            jne .L_407766

            nop
            nop
            nop
            nop
.L_407990:

            add DWORD PTR [RBX+656],1
            jmp .L_4078b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4079a0:

            lea RSI,QWORD PTR [RSP+14]
            mov RDI,R12
            call .L_408520

            movzx EAX,WORD PTR [RSP+14]
            cmp AX,-1
            je .L_4079be

            cmp AX,WORD PTR [RBX+106]
            jne .L_407990
.L_4079be:

            test BYTE PTR [RBX+4],64
            movzx EAX,WORD PTR [RSP+28]
            je .L_4079d0

            cmp DWORD PTR [RSP+36],1
            je .L_407a49
.L_4079d0:

            cmp WORD PTR [RBX+104],AX
            jne .L_407990

            test R14,R14
            je .L_407aa8

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            jne .L_407773

            nop
            nop
            nop
            nop
.L_4079f0:

            mov RAX,QWORD PTR [R14]
            mov DWORD PTR [RSP+24],2
            mov QWORD PTR [RSP+16],RAX
.L_407a00:

            lea RSI,QWORD PTR [RBX+96]
            mov RDI,R13
            call .L_408380

            test AL,AL
            jne .L_407940

            lea RDX,QWORD PTR [RSP+13]
            lea RDI,QWORD PTR [RBX+216]
            mov RSI,R13
            call .L_408300

            test EAX,EAX
            mov EBP,EAX
            jne .L_4076b3

            movzx EAX,BYTE PTR [RSP+13]
            cmp AL,127
            je .L_40777c

            mov BYTE PTR [R12+10],AL
            jmp .L_40777c
.L_407a49:

            cmp AX,-1
            jne .L_4079d0

            test R14,R14
            je .L_407b62

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_4079f0

            cmp EAX,2
            je .L_407a00
.L_407a66:

            cmp WORD PTR [RSP+28],-1
            jne .L_407787

            add DWORD PTR [RBX+628],1
            jmp .L_40778e
.L_407a7e:

            test R14,R14
            jne .L_4077c4

            jmp .L_40782a
.L_407a8c:

            movzx EAX,BYTE PTR [RBX+108]
            cmp BYTE PTR [RBX+178],AL
            je .L_407847
.L_407a9c:

            add DWORD PTR [RBX+648],1
            jmp .L_40789b
.L_407aa8:

            cmp DWORD PTR [RSP+36],1
            je .L_407b41

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_407930

            cmp EAX,2
            jne .L_407787
.L_407ac9:

            xor R14D,R14D
            jmp .L_407a00
.L_407ad1:

            mov RAX,QWORD PTR [R12]
            test BYTE PTR [RAX],7
            jne .L_407a8c

            add DWORD PTR [RBX+640],1
            mov RDI,QWORD PTR [RBX+184]
            mov RSI,R12
            call QWORD PTR [RBX+192]

            jmp .L_40789b
.L_407af6:

            mov EAX,DWORD PTR [RSP+36]
            test EAX,EAX
            jne .L_407b23
.L_407afe:

            test EBP,EBP
            je .L_407847

            jmp .L_4076b3
.L_407b0b:

            add DWORD PTR [RBX+640],1
            jmp .L_407877
.L_407b17:

            add DWORD PTR [RBX+632],1
            jmp .L_407877
.L_407b23:

            lea RDI,QWORD PTR [RBX+72]
            call .L_430c70

            mov DWORD PTR [RBX],0
            mov RDI,RBX
            call .L_407090

            jmp .L_407afe
.L_407b3c:

            call __stack_chk_fail@PLT
.L_407b41:

            add AX,1
            je .L_407b62

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_407930

            cmp EAX,2
            je .L_407ac9

            jmp .L_407a66
.L_407b62:

            mov RDI,RBX
            call .L_430af0

            test BYTE PTR [RAX+2624],2
            jne .L_407b91

            mov EAX,DWORD PTR [RSP+24]
            cmp EAX,1
            je .L_407930

            cmp EAX,2
            je .L_407ac9

            xor R14D,R14D
            jmp .L_40777c
.L_407b91:

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41d750

            mov R14,RAX
            jmp .L_407766
.L_407bb0:

            cmp BYTE PTR [RDI+29792],0
            je .L_407be0

            cmp BYTE PTR [RDI+24336],0
            jne .L_407bd0

            add RDI,14280
            jmp .L_407670
          .byte 0x66
          .byte 0x90
.L_407bd0:

            add RDI,24328
            jmp .L_42d380
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407be0:

            ret 
.L_407be2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407bf0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a50

            mov EDX,DWORD PTR [RAX]
            test EDX,EDX
            je .L_407c10

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407c10:

            mov RDI,RAX
            add RSP,8
            jmp .L_407090
.L_407c1c:

            nop
            nop
            nop
            nop
.L_407c20:

            cmp DWORD PTR [RDI],2
            je .L_407c30

            jmp .L_406d90
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407c30:

            push RBX
            mov RBX,RDI
            call .L_405680

            mov ESI,DWORD PTR [RBX+56]
            lea RDI,QWORD PTR [RBX+48]
            mov EDX,1
            pop RBX
            jmp .L_430d50
.L_407c4b:

            nop
            nop
            nop
            nop
            nop
.L_407c50:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_407c20
.L_407c6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407c70:

            cmp BYTE PTR [RDI+29792],0
            je .L_407ca0

            cmp BYTE PTR [RDI+24336],0
            jne .L_407c90

            add RDI,14280
            jmp .L_4068b0
          .byte 0x66
          .byte 0x90
.L_407c90:

            add RDI,24328
            jmp .L_42d3d0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407ca0:

            ret 
.L_407ca2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407cb0:

            push RBX
            mov EAX,DWORD PTR [RDI]
            mov RBX,RDI
            cmp EAX,2
            je .L_407d10

            cmp EAX,4
            je .L_407ce8

            cmp EAX,1
            je .L_407d00

            lea RCX,QWORD PTR [RIP+.L_4581c0]
            lea RSI,QWORD PTR [RIP+.L_458049]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1473
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407ce8:

            pop RBX
            mov RSI,QWORD PTR [RDI+544]
            mov ECX,14
            xor EDX,EDX
            jmp .L_4068b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_407d00:

            pop RBX
            jmp .L_407190
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407d10:

            lea RDI,QWORD PTR [RDI+48]
            call .L_430c70

            movsx ESI,BYTE PTR [RBX+179]
            mov RDI,RBX
            pop RBX
            jmp .L_4074e0
.L_407d29:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407d30:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a50

            add RSP,8
            mov RDI,RAX
            jmp .L_407cb0
.L_407d4d:

            nop
            nop
            nop
.L_407d50:

            mov EAX,DWORD PTR [RDI+648]
            bswap EAX
            mov DWORD PTR [RSI+2],EAX
            mov EAX,DWORD PTR [RDI+668]
            add EAX,DWORD PTR [RDI+664]
            add EAX,DWORD PTR [RDI+672]
            add EAX,DWORD PTR [RDI+676]
            add EAX,DWORD PTR [RDI+680]
            add EAX,DWORD PTR [RDI+684]
            bswap EAX
            mov DWORD PTR [RSI+6],EAX
            mov EAX,DWORD PTR [RDI+608]
            bswap EAX
            mov DWORD PTR [RSI+10],EAX
            mov EAX,DWORD PTR [RDI+624]
            bswap EAX
            mov DWORD PTR [RSI+14],EAX
            mov EAX,DWORD PTR [RDI+628]
            bswap EAX
            mov DWORD PTR [RSI+18],EAX
            mov EAX,DWORD PTR [RDI+656]
            add EAX,DWORD PTR [RDI+652]
            add EAX,DWORD PTR [RDI+660]
            bswap EAX
            mov DWORD PTR [RSI+22],EAX
            mov EAX,DWORD PTR [RDI+564]
            bswap EAX
            mov DWORD PTR [RSI+26],EAX
            mov EAX,DWORD PTR [RDI+568]
            bswap EAX
            mov DWORD PTR [RSI+30],EAX
            mov EAX,DWORD PTR [RDI+616]
            bswap EAX
            mov DWORD PTR [RSI+34],EAX
            ret 
.L_407dde:

            nop
            nop
.L_407de0:

            lea RDX,QWORD PTR [RDI+568]
            mov QWORD PTR [RDI+560],0
            mov QWORD PTR [RDI+680],0
            xor EAX,EAX
            and RDX,-8
            sub EDI,EDX
            lea ECX,DWORD PTR [RDI+688]
            mov RDI,RDX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_407e15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407e20:

            sub RSP,8
            call .L_430ac0

            add RSP,8
            mov RDI,RAX
            jmp .L_401450
.L_407e35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407e40:

            cmp EDI,6
            ja .L_407ec8

            lea RDX,QWORD PTR [RIP+.L_458194]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_407e60:

            lea RAX,QWORD PTR [RIP+.L_4580c4]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407e70:

            lea RAX,QWORD PTR [RIP+.L_4580d3]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407e80:

            lea RAX,QWORD PTR [RIP+.L_45808d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407e90:

            lea RAX,QWORD PTR [RIP+.L_458092]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407ea0:

            lea RAX,QWORD PTR [RIP+.L_45809d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407eb0:

            lea RAX,QWORD PTR [RIP+.L_4580a8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407ec0:

            lea RAX,QWORD PTR [RIP+.L_4580b7]
            ret 
.L_407ec8:

            lea RAX,QWORD PTR [RIP+.L_45d17b]
            ret 
.L_407ed0:

            lea RAX,QWORD PTR [RDI+320]
            mov DWORD PTR [RDI+320],0
            mov BYTE PTR [RDI+324],127
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407ef0:

            mov QWORD PTR [RDI],0
            mov BYTE PTR [RDI+9],0
            add RDI,10
            mov BYTE PTR [RDI-2],127
            cmp RDI,RAX
            jne .L_407ef0

            ret 
.L_407f0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_407f10:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea R12,QWORD PTR [RDI+320]
            mov RBX,RDI
            sub RSP,8
            jmp .L_407f39
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407f30:

            add RBX,10
            cmp RBX,R12
            je .L_407f68
.L_407f39:

            cmp BYTE PTR [RBX+9],0
            mov RBP,RBX
            jne .L_407f48

            cmp BYTE PTR [RBX+8],127
            je .L_407f30
.L_407f48:

            mov RSI,RBX
            mov RDI,R13
            call .L_408380

            test AL,AL
            je .L_407f30

            add RSP,8
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407f68:

            add RSP,8
            xor EBP,EBP
            pop RBX
            mov RAX,RBP
            pop RBP
            pop R12
            pop R13
            ret 
.L_407f78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407f80:

            lea RDX,QWORD PTR [RDI+8]
            xor EAX,EAX
            jmp .L_407f9e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_407f90:

            add RAX,1
            add RDX,10
            cmp RAX,32
            je .L_407fb8
.L_407f9e:

            cmp BYTE PTR [RDX+1],0
            movsxd RCX,EAX
            jne .L_407f90

            cmp BYTE PTR [RDX],127
            jne .L_407f90

            lea RAX,QWORD PTR [RCX+RCX*4]
            lea RAX,QWORD PTR [RDI+RAX*2]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_407fb8:

            xor EAX,EAX
            ret 
.L_407fbb:

            nop
            nop
            nop
            nop
            nop
.L_407fc0:

            cmp ESI,2
            mov EAX,7
            ja .L_407fd2

            mov DWORD PTR [RDI+320],ESI
            xor EAX,EAX
.L_407fd2:

            ret 
.L_407fd4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_407fe0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_407f10

            test RAX,RAX
            mov RDX,RAX
            je .L_408018
.L_407ff9:

            cmp BYTE PTR [RDX+9],0
            mov EAX,24
            jne .L_40800a

            mov BYTE PTR [RDX+9],1
            xor EAX,EAX
.L_40800a:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408018:

            lea RDX,QWORD PTR [RBX+8]
            xor EAX,EAX
            jmp .L_40802e
.L_408020:

            add RAX,1
            add RDX,10
            cmp RAX,32
            je .L_408050
.L_40802e:

            cmp BYTE PTR [RDX+1],0
            movsxd RCX,EAX
            jne .L_408020

            cmp BYTE PTR [RDX],127
            jne .L_408020

            lea RAX,QWORD PTR [RCX+RCX*4]
            lea RDX,QWORD PTR [RBX+RAX*2]
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RDX],RAX
            jmp .L_407ff9
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408050:

            add RSP,8
            mov EAX,3
            pop RBX
            pop RBP
            ret 
.L_40805c:

            nop
            nop
            nop
            nop
.L_408060:

            sub RSP,8
            call .L_407f10

            test RAX,RAX
            je .L_408090

            mov RDX,RAX
            mov EAX,23
            cmp BYTE PTR [RDX+9],0
            je .L_408082

            mov BYTE PTR [RDX+9],0
            xor EAX,EAX
.L_408082:

            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408090:

            mov EAX,23
            add RSP,8
            ret 
.L_40809a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4080a0:

            lea RAX,QWORD PTR [RDI+9]
            add RDI,329
            nop
            nop
            nop
            nop
            nop
.L_4080b0:

            mov BYTE PTR [RAX],0
            add RAX,10
            cmp RAX,RDI
            jne .L_4080b0

            ret 
.L_4080be:

            nop
            nop
.L_4080c0:

            movzx R8D,BYTE PTR [RSI]
            cmp R8B,31
            ja .L_40811b

            movzx R11D,R8B
            lea RAX,QWORD PTR [R11+R11*4]
            cmp BYTE PTR [RDI+RAX*2+9],0
            jne .L_408128

            lea ECX,DWORD PTR [R8+1]
            mov R9D,31
            sub R9D,R8D
            movzx EAX,CL
            movzx ECX,CL
            movzx R9D,R9B
            lea RCX,QWORD PTR [RCX+RCX*4]
            add R9D,EAX
            lea RCX,QWORD PTR [RDI+RCX*2+9]
            jmp .L_408113
          .byte 0x66
          .byte 0x90
.L_408100:

            movzx R10D,BYTE PTR [RCX]
            movsxd R11,EAX
            add RCX,10
            add EAX,1
            test R10B,R10B
            jne .L_408128
.L_408113:

            cmp EAX,R9D
            mov R8D,EAX
            jne .L_408100
.L_40811b:

            mov EAX,23
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408128:

            lea RAX,QWORD PTR [R11+R11*4]
            add R8D,1
            lea RAX,QWORD PTR [RDI+RAX*2]
            mov RCX,QWORD PTR [RAX]
            mov QWORD PTR [RDX],RCX
            movzx EAX,WORD PTR [RAX+8]
            mov WORD PTR [RDX+8],AX
            mov BYTE PTR [RSI],R8B
            xor EAX,EAX
            ret 
.L_408148:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408150:

            test RSI,RSI
            je .L_408180

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov EBP,EDX
            mov RBX,RSI
            call .L_407f10

            test RAX,RAX
            je .L_408190
.L_40816b:

            mov BYTE PTR [RAX+8],BPL
            xor EAX,EAX
.L_408171:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408180:

            mov BYTE PTR [RDI+324],DL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408190:

            lea RCX,QWORD PTR [R12+8]
            jmp .L_4081ae
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4081a0:

            add RAX,1
            add RCX,10
            cmp RAX,32
            je .L_4081d0
.L_4081ae:

            cmp BYTE PTR [RCX+1],0
            movsxd RDX,EAX
            jne .L_4081a0

            cmp BYTE PTR [RCX],127
            jne .L_4081a0

            lea RAX,QWORD PTR [RDX+RDX*4]
            mov RDX,QWORD PTR [RBX]
            lea RAX,QWORD PTR [R12+RAX*2]
            mov QWORD PTR [RAX],RDX
            jmp .L_40816b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4081d0:

            mov EAX,3
            jmp .L_408171
.L_4081d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4081e0:

            test RSI,RSI
            je .L_408200

            sub RSP,8
            call .L_407f10

            test RAX,RAX
            je .L_408210

            mov BYTE PTR [RAX+8],127
            xor EAX,EAX
.L_4081f9:

            add RSP,8
            ret 
          .byte 0x66
          .byte 0x90
.L_408200:

            mov BYTE PTR [RDI+324],127
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408210:

            mov EAX,23
            jmp .L_4081f9
.L_408217:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408220:

            mov BYTE PTR [RDI+324],127
            lea RAX,QWORD PTR [RDI+8]
            add RDI,328
            nop
            nop
            nop
            nop
            nop
            nop
.L_408238:

            mov BYTE PTR [RAX],127
            add RAX,10
            cmp RAX,RDI
            jne .L_408238

            ret 
.L_408246:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408250:

            movzx R8D,BYTE PTR [RSI]
            cmp R8B,31
            ja .L_4082ac

            movzx R11D,R8B
            lea RAX,QWORD PTR [R11+R11*4]
            cmp BYTE PTR [RDI+RAX*2+8],127
            jne .L_4082e0

            lea ECX,DWORD PTR [R8+1]
            mov R9D,31
            sub R9D,R8D
            movzx EAX,CL
            movzx ECX,CL
            movzx R9D,R9B
            lea RCX,QWORD PTR [RCX+RCX*4]
            add R9D,EAX
            lea RCX,QWORD PTR [RDI+RCX*2+8]
            jmp .L_4082a4
          .byte 0x66
          .byte 0x90
.L_408290:

            movzx R10D,BYTE PTR [RCX]
            movsxd R11,EAX
            add RCX,10
            add EAX,1
            cmp R10B,127
            jne .L_4082e0
.L_4082a4:

            cmp EAX,R9D
            mov R8D,EAX
            jne .L_408290
.L_4082ac:

            cmp R8B,32
            mov EAX,23
            jne .L_4082d6

            cmp BYTE PTR [RDI+324],127
            je .L_4082d6

            mov QWORD PTR [RDX],-1
            movzx EAX,BYTE PTR [RDI+324]
            mov BYTE PTR [RDX+8],AL
            mov BYTE PTR [RSI],33
            xor EAX,EAX
.L_4082d6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4082e0:

            lea RAX,QWORD PTR [R11+R11*4]
            add R8D,1
            lea RAX,QWORD PTR [RDI+RAX*2]
            mov RCX,QWORD PTR [RAX]
            mov QWORD PTR [RDX],RCX
            movzx EAX,WORD PTR [RAX+8]
            mov WORD PTR [RDX+8],AX
            mov BYTE PTR [RSI],R8B
            xor EAX,EAX
            ret 
.L_408300:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
            call .L_407f10

            mov RCX,RAX
            movzx EAX,BYTE PTR [RBX+324]
            mov BYTE PTR [RBP],AL
            mov EAX,DWORD PTR [RBX+320]
            cmp EAX,1
            je .L_408368

            cmp EAX,2
            mov EAX,0
            je .L_408350

            test RCX,RCX
            je .L_408346
.L_408338:

            movzx EDX,BYTE PTR [RCX+8]
            xor EAX,EAX
            cmp DL,127
            je .L_408346

            mov BYTE PTR [RBP],DL
.L_408346:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408350:

            test RCX,RCX
            je .L_408346

            cmp BYTE PTR [RCX+9],0
            mov EAX,21
            je .L_408338

            jmp .L_408346
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408368:

            test RCX,RCX
            je .L_408373

            cmp BYTE PTR [RCX+9],0
            jne .L_408338
.L_408373:

            add RSP,8
            mov EAX,21
            pop RBX
            pop RBP
            ret 
.L_40837f:

            nop
.L_408380:

            mov RAX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI],RAX
            sete AL
            ret 
.L_40838a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408390:

            mov RAX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI],RAX
            setne AL
            ret 
.L_40839a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4083a0:

            test DL,DL
            mov DWORD PTR [RDI+8],2
            je .L_4083d0

            lea RAX,QWORD PTR [RSI+7]
            sub RSI,1
            nop
            nop
            nop
            nop
            nop
.L_4083b8:

            movzx EDX,BYTE PTR [RAX]
            sub RAX,1
            add RDI,1
            mov BYTE PTR [RDI-1],DL
            cmp RAX,RSI
            jne .L_4083b8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4083d0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI],RAX
            ret 
.L_4083d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4083e0:

            push RBX
            mov EAX,DWORD PTR [RDI+8]
            mov RBX,RSI
            cmp EAX,1
            je .L_408470

            jb .L_408450

            cmp EAX,2
            jne .L_408446

            movzx EAX,BYTE PTR [RDI+7]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_4583f0]
            movzx ESI,DX
            mov RCX,-1
            mov EDX,1
            push RAX
            movzx EAX,BYTE PTR [RDI+6]
            push RAX
            movzx EAX,BYTE PTR [RDI+5]
            push RAX
            movzx EAX,BYTE PTR [RDI+4]
            push RAX
            movzx EAX,BYTE PTR [RDI+3]
            push RAX
            movzx EAX,BYTE PTR [RDI+2]
            push RAX
            movzx EAX,BYTE PTR [RDI+1]
            push RAX
            movzx R9D,BYTE PTR [RDI]
            xor EAX,EAX
            mov RDI,RBX
            call __snprintf_chk@PLT

            add RSP,64
.L_408446:

            mov RAX,RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408450:

            movzx ESI,DX
            lea RDX,QWORD PTR [RIP+.L_458390]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408470:

            movzx R9D,WORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_458395]
            movzx ESI,DX
            mov RDI,RBX
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,RBX
            pop RBX
            ret 
.L_408499:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4084a0:

            mov RCX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RCX+1]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX]
            or EAX,EDX
            ret 
.L_4084b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4084c0:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX]
            mov ECX,EAX
            or EAX,32
            and ECX,4294967263
            test SIL,SIL
            cmove EAX,ECX
            mov BYTE PTR [RDX],AL
            ret 
.L_4084d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4084e0:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX]
            mov ECX,EAX
            or EAX,16
            and ECX,4294967279
            test SIL,SIL
            cmove EAX,ECX
            mov BYTE PTR [RDX],AL
            ret 
.L_4084f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408500:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+1]
            shl EAX,8
            and AX,3072
            cmp AX,1
            sbb EAX,EAX
            or EAX,3
            ret 
.L_408518:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408520:

            mov RCX,QWORD PTR [RDI]
            mov EAX,6
            movzx EDX,BYTE PTR [RCX+1]
            shl EDX,8
            and DH,12
            je .L_408548

            movzx EAX,BYTE PTR [RCX+4]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+3]
            or EAX,EDX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
.L_408548:

            ret 
.L_40854a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_408550:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            test AH,12
            je .L_40856b

            mov EAX,ESI
            mov BYTE PTR [RDX+3],SIL
            mov BYTE PTR [RDX+4],AH
            xor EAX,EAX
            ret 
.L_40856b:

            lea RCX,QWORD PTR [RIP+.L_458840]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4583ae]
            sub RSP,8
            mov EDX,264
            call __assert_fail@PLT
.L_40858e:

            nop
            nop
.L_408590:

            mov EAX,5
            ret 
.L_408596:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4085a0:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,2048
            je .L_408600

            cmp AX,3072
            jne .L_4085f0

            lea RAX,QWORD PTR [RDX+12]
            mov DWORD PTR [RSI+8],2
            add RDX,4
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4085d0:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RSI,1
            mov BYTE PTR [RSI-1],CL
            cmp RAX,RDX
            jne .L_4085d0

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4085f0:

            mov DWORD PTR [RSI+8],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408600:

            movzx EAX,BYTE PTR [RDX+6]
            shl EAX,8
            mov ECX,EAX
            movzx EAX,BYTE PTR [RDX+5]
            mov DWORD PTR [RSI+8],1
            or EAX,ECX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 
.L_40861c:

            nop
            nop
            nop
            nop
.L_408620:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,2048
            jne .L_408640

            mov EAX,ESI
            mov BYTE PTR [RDX+5],SIL
            mov BYTE PTR [RDX+6],AH
            xor EAX,EAX
            ret 
.L_408640:

            lea RCX,QWORD PTR [RIP+.L_458800]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458418]
            sub RSP,8
            mov EDX,303
            call __assert_fail@PLT
.L_408663:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408670:

            mov RDX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            and AX,3072
            cmp AX,3072
            jne .L_4086a6

            lea RAX,QWORD PTR [RSI+7]
            add RDX,5
            sub RSI,1
.L_408690:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,RSI
            jne .L_408690

            xor EAX,EAX
            ret 
.L_4086a6:

            lea RCX,QWORD PTR [RIP+.L_4587c0]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458458]
            sub RSP,8

            mov EDX,314
            call __assert_fail@PLT
.L_4086c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4086d0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_4086e0

            cmp EAX,2
            jne .L_4086e8

            jmp .L_408670
          .byte 0x90
.L_4086e0:

            movzx ESI,WORD PTR [RSI]
            jmp .L_408620
.L_4086e8:

            lea RCX,QWORD PTR [RIP+.L_458780]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458070]
            sub RSP,8
            mov EDX,340
            call __assert_fail@PLT
.L_40870b:

            nop
            nop
            nop
            nop
            nop
.L_408710:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,4294967295
            test DX,52224
            je .L_40875a

            test DL,64
            mov EAX,3
            jne .L_40875a

            and DX,3072
            mov EAX,7
            cmp DX,2048
            je .L_40875a

            cmp DX,3072
            mov EAX,13
            mov EDX,3
            cmovne EAX,EDX
.L_40875a:

            ret 
.L_40875c:

            nop
            nop
            nop
            nop
.L_408760:

            call .L_408710

            cmp AL,255
            je .L_408788

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RAX+1]
            movzx EAX,BYTE PTR [RAX]
            shl EDX,8
            or EAX,EDX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408788:

            mov EAX,6
            ret 
.L_40878e:

            nop
            nop
.L_408790:

            call .L_408710

            cmp AL,255
            je .L_4087b0

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov ECX,ESI
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],CH
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4087b0:

            mov EAX,6
            ret 
.L_4087b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4087c0:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,7
            mov ECX,EDX
            and CX,3072
            cmp CX,2048
            je .L_4087f6

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_4087f6:

            lea ECX,DWORD PTR [RAX+2]
            and EDX,64
            cmove EAX,ECX
            ret 
.L_408800:

            mov RCX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RCX+1]
            shl EAX,8
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX]
            or EAX,EDX
            mov EDX,7
            mov EDI,EAX
            and DI,3072
            cmp DI,2048
            je .L_408836

            cmp DI,3072
            mov EDX,13
            mov EDI,3
            cmovne EDX,EDI
.L_408836:

            lea EDI,DWORD PTR [RDX+2]
            test AL,64
            cmove EDX,EDI
            and AX,49152
            cmp AX,32768
            je .L_408890

            cmp AX,49152
            jne .L_408880

            movzx EDX,DL
            mov DWORD PTR [RSI+8],2
            lea RAX,QWORD PTR [RCX+RDX*1+7]
            lea RCX,QWORD PTR [RSI+8]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408868:

            movzx EDX,BYTE PTR [RAX]
            add RSI,1
            sub RAX,1
            mov BYTE PTR [RSI-1],DL
            cmp RSI,RCX
            jne .L_408868

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x90
.L_408880:

            mov DWORD PTR [RSI+8],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408890:

            movzx EDX,DL
            add RDX,RCX
            movzx EAX,BYTE PTR [RDX+1]
            shl EAX,8
            mov ECX,EAX
            movzx EAX,BYTE PTR [RDX]
            mov DWORD PTR [RSI+8],1
            or EAX,ECX
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            ret 
.L_4088b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4088c0:

            mov RDI,QWORD PTR [RDI]
            movzx ECX,BYTE PTR [RDI+1]
            mov EAX,ECX
            movzx ECX,BYTE PTR [RDI]
            shl EAX,8
            or ECX,EAX
            mov EAX,7
            mov EDX,ECX
            and DX,3072
            cmp DX,2048
            je .L_4088f6

            cmp DX,3072
            mov EAX,3
            mov EDX,13
            cmove EAX,EDX
.L_4088f6:

            lea EDX,DWORD PTR [RAX+2]
            test CL,64
            cmove EAX,EDX
            and CX,49152
            cmp CX,32768
            jne .L_40891c

            movzx EAX,AL
            mov EDX,ESI
            add RAX,RDI
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],DH
            xor EAX,EAX
            ret 
.L_40891c:

            lea RCX,QWORD PTR [RIP+.L_458740]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458498]
            sub RSP,8

            mov EDX,461
            call __assert_fail@PLT
.L_40893f:

            nop
.L_408940:

            mov RDX,QWORD PTR [RDI]
            movzx EDI,BYTE PTR [RDX+1]
            mov EAX,EDI
            movzx EDI,BYTE PTR [RDX]
            shl EAX,8
            or EDI,EAX
            mov EAX,7
            mov ECX,EDI
            and CX,3072
            cmp CX,2048
            je .L_408976

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_408976:

            lea ECX,DWORD PTR [RAX+2]
            test DIL,64
            cmove EAX,ECX
            and DI,49152
            cmp DI,49152
            movzx ECX,AL
            jne .L_4089b6

            lea RAX,QWORD PTR [RSI+7]
            add RDX,RCX
            sub RSI,1
            nop
            nop
            nop
            nop
            nop
            nop
.L_4089a0:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,RSI
            jne .L_4089a0

            xor EAX,EAX
            ret 
.L_4089b6:

            lea RCX,QWORD PTR [RIP+.L_458700]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4584d8]
            sub RSP,8

            mov EDX,474
            call __assert_fail@PLT
.L_4089d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4089e0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_4089f8

            cmp EAX,2
            jne .L_408a00

            jmp .L_408940
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4089f8:

            movzx ESI,WORD PTR [RSI]
            jmp .L_4088c0
.L_408a00:

            lea RCX,QWORD PTR [RIP+.L_4586c0]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458070]
            sub RSP,8
            mov EDX,500
            call __assert_fail@PLT
.L_408a23:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408a30:

            mov RCX,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RCX+1]
            mov EAX,EDX
            movzx EDX,BYTE PTR [RCX]
            shl EAX,8
            or EDX,EAX
            mov EAX,4294967295
            test DL,8
            je .L_408a9c

            mov ECX,EDX
            mov EAX,7
            and CX,3072
            cmp CX,2048
            je .L_408a70

            cmp CX,3072
            mov EAX,13
            mov ECX,3
            cmovne EAX,ECX
.L_408a70:

            mov ECX,EDX
            and CX,49152
            cmp CX,32768
            je .L_408aa0

            cmp CX,49152
            je .L_408a90

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408a90:

            lea ECX,DWORD PTR [RAX+2]
            and EDX,64
            cmove EAX,ECX
            add EAX,8
.L_408a9c:

            ret 
          .byte 0x66
          .byte 0x90
.L_408aa0:

            lea ECX,DWORD PTR [RAX+2]
            add EAX,4
            and EDX,64
            cmovne EAX,ECX
            ret 
.L_408aad:

            nop
            nop
            nop
.L_408ab0:

            call .L_408a30

            cmp AL,255
            je .L_408ad0

            mov RDX,QWORD PTR [RDI]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1]
            and EAX,7
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408ad0:

            mov EAX,6
            ret 
.L_408ad6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ae0:

            call .L_408a30

            cmp AL,255
            je .L_408b00

            mov RDX,QWORD PTR [RDI]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1]
            and EAX,24
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408b00:

            mov EAX,6
            ret 
.L_408b06:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408b10:

            call .L_408a30

            cmp AL,255
            je .L_408b30

            mov RDX,QWORD PTR [RDI]
            add EAX,1
            movzx EAX,AL
            mov EAX,DWORD PTR [RDX+RAX*1]
            mov DWORD PTR [RSI],EAX
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408b30:

            mov EAX,6
            ret 
.L_408b36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408b40:

            sub RSP,8
            call .L_408a30

            cmp AL,255
            je .L_408b72

            add EAX,1
            mov EDX,ESI
            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov BYTE PTR [RAX],SIL
            mov BYTE PTR [RAX+1],DH
            shr ESI,24
            shr EDX,16
            mov BYTE PTR [RAX+3],SIL
            mov BYTE PTR [RAX+2],DL
            xor EAX,EAX
            add RSP,8
            ret 
.L_408b72:

            lea RCX,QWORD PTR [RIP+.L_458680]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4583ae]
            mov EDX,601
            call __assert_fail@PLT
.L_408b91:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ba0:

            sub RSP,8
            call .L_408a30

            cmp AL,255
            mov RCX,QWORD PTR [RDI]
            je .L_408bbd

            movzx EDX,AL
            add RSP,8
            lea RAX,QWORD PTR [RCX+RDX*1+5]
            ret 
.L_408bbd:

            lea RCX,QWORD PTR [RIP+.L_458640]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4583ae]
            mov EDX,616
            call __assert_fail@PLT
.L_408bdc:

            nop
            nop
            nop
            nop
.L_408be0:

            cmp DIL,16
            mov EAX,4
            je .L_408bf5

            cmp DIL,24
            sete AL
            shl EAX,3
.L_408bf5:

            ret 
.L_408bf7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408c00:

            sub RSP,8
.L_408c04:

            call .L_408a30

            movzx EDX,AL
            add RDX,QWORD PTR [RDI]
            cmp AL,255
            je .L_408cce

            movzx ECX,BYTE PTR [RDX]
            mov EAX,4
            and ECX,24
            cmp CL,16
            je .L_408c33

            xor EAX,EAX
            cmp CL,24
            sete AL
            shl RAX,3
.L_408c33:

            cmp EAX,8
            lea RDI,QWORD PTR [RDX+5]
            mov ECX,EAX
            jae .L_408c60

            test AL,4
            jne .L_408ca8

            test EAX,EAX
            je .L_408c51

            movzx EAX,BYTE PTR [RSI]
            test CL,2
            mov BYTE PTR [RDX+5],AL
            jne .L_408cc0
.L_408c51:

            add RSP,8
.L_408c55:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408c60:

            mov RCX,QWORD PTR [RSI]
            add RDX,13
            mov QWORD PTR [RDX-8],RCX
            mov ECX,EAX
            and RDX,-8
            mov R8,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RDI+RCX*1-8],R8
            sub RDI,RDX
            lea ECX,DWORD PTR [RAX+RDI*1]
            sub RSI,RDI
            and ECX,4294967288
            cmp ECX,8
            jb .L_408c51

            and ECX,4294967288
            xor EAX,EAX
.L_408c91:

            mov EDI,EAX
            add EAX,8
            mov R8,QWORD PTR [RSI+RDI*1]
            cmp EAX,ECX
            mov QWORD PTR [RDX+RDI*1],R8
            jb .L_408c91

            jmp .L_408c51
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_408ca8:

            mov EAX,DWORD PTR [RSI]
            mov DWORD PTR [RDX+5],EAX
            mov EAX,ECX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RDI+RAX*1-4],EDX
            jmp .L_408c51
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408cc0:

            mov EAX,ECX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RDI+RAX*1-2],DX
            jmp .L_408c51
.L_408cce:

            lea RCX,QWORD PTR [RIP+.L_458600]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4583ae]
            mov EDX,656
            call __assert_fail@PLT
.L_408ced:

            nop
            nop
            nop
.L_408cf0:

            call .L_408a30

            cmp AL,255
            je .L_408d25

            movzx EAX,AL
            add RAX,QWORD PTR [RDI]
            mov ECX,9
            movzx EDX,BYTE PTR [RAX]
            and EDX,24
            cmp DL,16
            je .L_408d1f

            xor ECX,ECX
            cmp DL,24
            sete CL
            lea RCX,QWORD PTR [RCX*8+5]
.L_408d1f:

            movzx EAX,BYTE PTR [RAX+RCX*1]
            mov BYTE PTR [RSI],AL
.L_408d25:

            xor EAX,EAX
            ret 
.L_408d28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408d30:

            sub RSP,8
            call .L_408a30

            movzx EDX,AL
            add RDX,QWORD PTR [RDI]
            cmp AL,255
            je .L_408d6c

            movzx EAX,BYTE PTR [RDX]
            mov ECX,9
            and EAX,24
            cmp AL,16
            je .L_408d61

            xor ECX,ECX
            cmp AL,24
            sete CL
            lea RCX,QWORD PTR [RCX*8+5]
.L_408d61:

            mov BYTE PTR [RDX+RCX*1],SIL
            xor EAX,EAX
            add RSP,8
            ret 
.L_408d6c:

            lea RCX,QWORD PTR [RIP+.L_4585c0]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_4583ae]
            mov EDX,690
            call __assert_fail@PLT
.L_408d8b:

            nop
            nop
            nop
            nop
            nop
.L_408d90:

            call .L_408a30

            movzx EDX,AL
            mov EAX,2
            cmp DL,255
            je .L_408dd7

            mov RAX,QWORD PTR [RDI]
            movzx ECX,BYTE PTR [RAX+RDX*1]
            mov EDX,1
            mov EAX,18
            and ECX,7
            shl RDX,CL
            test DL,136
            jne .L_408dd7

            test DL,68
            mov EAX,10
            jne .L_408dd7

            and EDX,34
            cmp RDX,1
            sbb EAX,EAX
            and EAX,4294967292
            add EAX,6
.L_408dd7:

            ret 
.L_408dd9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408de0:

            sub RSP,8
.L_408de4:

            mov RCX,QWORD PTR [RDI]
            mov EAX,ESI
            mov R9,RDI
            mov BYTE PTR [RCX+1],AH
            and AX,3072
            mov BYTE PTR [RCX],SIL
            cmp AX,2048
            je .L_408ee8

            cmp AX,3072
            je .L_408e30

            test AX,AX
            je .L_408ed8

            lea RCX,QWORD PTR [RIP+.L_458880]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,122
            call __assert_fail@PLT
          .byte 0x66
          .byte 0x90
.L_408e30:

            mov R8D,13
.L_408e36:

            mov EAX,ESI
            and AX,49152
            cmp AX,32768
            je .L_408e70

            cmp AX,49152
            je .L_408ef8

            test AX,AX
            je .L_408e80

            lea RCX,QWORD PTR [RIP+.L_458880]
            lea RSI,QWORD PTR [RIP+.L_45839c]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,150
            call __assert_fail@PLT
.L_408e70:

            lea EDI,DWORD PTR [R8+2]
            add R8D,4
            test SIL,64
            cmovne R8D,EDI
.L_408e80:

            test SIL,8
            je .L_408eb2

            movzx EAX,R8B
            test DL,7
            mov BYTE PTR [RCX+RAX*1],DL
            lea EAX,DWORD PTR [R8+5]
            cmovne R8D,EAX
            and EDX,24
            cmp DL,16
            je .L_408f20

            cmp DL,24
            je .L_408f10

            cmp DL,8
            sete AL
            add R8D,EAX
.L_408eb2:

            and ESI,7
            mov RDI,R9
            cmp SI,3
            sete AL
            add R8D,EAX
            call .L_408d90

            add R8D,EAX
            xor EAX,EAX
            mov BYTE PTR [R9+8],R8B
            add RSP,8
.L_408ed4:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408ed8:

            mov R8D,3
            jmp .L_408e36
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408ee8:

            mov R8D,7
            jmp .L_408e36
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_408ef8:

            lea EAX,DWORD PTR [R8+2]
            test SIL,64
            cmove R8D,EAX
            add R8D,8
            jmp .L_408e80
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408f10:

            add R8D,9
            jmp .L_408eb2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_408f20:

            add R8D,5
            jmp .L_408eb2
.L_408f26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408f30:

            movzx ECX,BYTE PTR [RDI+8]
            mov EAX,4294967295
            cmp CL,4
            jbe .L_408f6b

            mov RDI,QWORD PTR [RDI]
            movzx EDX,BYTE PTR [RDI+1]
            movzx ESI,BYTE PTR [RDI]
            shl EDX,8
            or EDX,ESI
            mov ESI,EDX
            and SI,3072
            cmp SI,2048
            je .L_408ff8

            cmp SI,3072
            je .L_408f70

            test SI,SI
            je .L_408f98
.L_408f6b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408f70:

            mov EAX,13
.L_408f75:

            mov ESI,EDX
            and SI,49152
            cmp SI,32768
            je .L_408fab
.L_408f83:

            cmp SI,49152
            je .L_409008

            test SI,SI
            je .L_408fb7
.L_408f8f:

            mov EAX,4294967295
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_408f98:

            mov ESI,EDX
            mov EAX,3
            and SI,49152
            cmp SI,32768
            jne .L_408f83
.L_408fab:

            lea ESI,DWORD PTR [RAX+2]
            add EAX,4
            test DL,64
            cmovne EAX,ESI
.L_408fb7:

            movzx ESI,AL
            add ESI,1
            cmp ECX,ESI
            jle .L_408f8f

            test DL,8
            je .L_408fe4

            movzx ECX,AL
            movzx ECX,BYTE PTR [RDI+RCX*1]
            and ECX,24
            cmp CL,16
            je .L_409020

            cmp CL,24
            je .L_409028

            cmp CL,8
            sete CL
            lea EAX,DWORD PTR [RAX+RCX*1+5]
.L_408fe4:

            and EDX,7
            cmp DX,3
            sete DL
            add EAX,EDX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_408ff8:

            mov EAX,7
            jmp .L_408f75
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409008:

            lea ESI,DWORD PTR [RAX+2]
            test DL,64
            cmove EAX,ESI
            add EAX,8
            jmp .L_408fb7
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409020:

            add EAX,10
            jmp .L_408fe4
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409028:

            add EAX,14
            jmp .L_408fe4
.L_40902d:

            nop
            nop
            nop
.L_409030:

            mov R8,RDI
            call .L_408f30

            movzx ESI,AL
            cmp SIL,255
            je .L_409068

            mov RDI,R8
            call .L_408d90

            movzx EAX,AL
            mov EDX,0
            add ESI,EAX
            movzx EAX,BYTE PTR [R8+8]
            cmp ESI,EAX
            mov EAX,6
            cmovle EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409068:

            mov EAX,6
            ret 
.L_40906e:

            nop
            nop
.L_409070:

            mov R8,RDI
            mov R9,RSI
            call .L_408f30

            cmp AL,255
            je .L_409090

            mov RDX,QWORD PTR [R8]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDX+RAX*1-1]
            mov BYTE PTR [R9],AL
            xor EAX,EAX
            ret 
.L_409090:

            mov EAX,6
            ret 
.L_409096:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4090a0:

            mov R9,QWORD PTR [RDI]
            xor R8D,R8D
            movzx EAX,BYTE PTR [R9]
            and EAX,7
            cmp AL,3
            je .L_4090b8
.L_4090b1:

            mov EAX,R8D
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4090b8:

            call .L_408f30

            cmp AL,255
            je .L_4090b1

            movzx EAX,AL
            cmp BYTE PTR [R9+RAX*1-1],4
            sete R8B
            mov EAX,R8D
            ret 
.L_4090d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4090e0:

            mov R8,RDI
            mov R9D,ESI
            call .L_408f30

            cmp AL,255
            je .L_409100

            mov RDX,QWORD PTR [R8]
            movzx EAX,AL
            mov BYTE PTR [RDX+RAX*1-1],R9B
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409100:

            mov EAX,6
            ret 
.L_409106:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409110:

            mov R8,RDI
            call .L_408f30

            xor EDX,EDX
            cmp AL,255
            mov RCX,QWORD PTR [R8]
            je .L_409128

            movzx EAX,AL
            lea RDX,QWORD PTR [RCX+RAX*1]
.L_409128:

            mov RAX,RDX
            sub RAX,RCX
            ret 
.L_40912f:

            nop
.L_409130:

            mov R8,RDI
            call .L_408f30

            xor ESI,ESI
            cmp AL,255
            mov R9,QWORD PTR [R8]
            je .L_409148

            movzx EAX,AL
            lea RSI,QWORD PTR [R9+RAX*1]
.L_409148:

            mov RDI,R8
            call .L_408d90

            mov EDX,EAX
            mov EAX,127
            sub RSI,R9
            sub EAX,EDX
            sub EAX,ESI
            ret 
.L_40915f:

            nop
.L_409160:

            mov R9,RDI
            movzx R8D,BYTE PTR [RDI+8]
            call .L_408f30

            xor ESI,ESI
            cmp AL,255
            mov R10,QWORD PTR [R9]
            je .L_40917d

            movzx EAX,AL
            lea RSI,QWORD PTR [R10+RAX*1]
.L_40917d:

            mov RDI,R9
            call .L_408d90

            sub R8D,EAX
            sub RSI,R10
            mov EAX,R8D
            sub EAX,ESI
            ret 
.L_409191:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4091a0:

            mov R8,RDI
            mov R10D,ESI
            call .L_408f30

            xor ESI,ESI
            cmp AL,255
            mov R9,QWORD PTR [R8]
            je .L_4091bb

            movzx EAX,AL
            lea RSI,QWORD PTR [R9+RAX*1]
.L_4091bb:

            mov RDI,R8
            call .L_408d90

            sub RSI,R9
            add EAX,R10D
            add EAX,ESI
            mov BYTE PTR [R8+8],AL
            xor EAX,EAX
            ret 
.L_4091d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4091e0:

            mov R8,RDI
            call .L_408f30

            movzx EDX,AL
            add RDX,QWORD PTR [R8]
            cmp AL,255
            mov EAX,0
            cmove RDX,RAX
            mov RAX,RDX
            ret 
.L_4091fd:

            nop
            nop
            nop
.L_409200:

            jmp .L_4091e0
.L_409202:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409210:

            call .L_408d90

            movzx EDX,AL
            movzx EAX,BYTE PTR [RDI+8]
            sub RAX,RDX
            add RAX,QWORD PTR [RDI]
            ret 
.L_409223:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409230:

            jmp .L_409210
.L_409232:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409240:

            push R15
            push R14
            lea R14,QWORD PTR [RIP+.L_4580ce]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,136
.L_40925e:

            mov R8,QWORD PTR [RDI]
            mov DWORD PTR [RSP+36],0
            mov DWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            movzx R9D,BYTE PTR [R8]
            mov WORD PTR [RSP+6],DX
            and R9D,7
            cmp R9B,1
            je .L_409329

            lea R14,QWORD PTR [RIP+.L_4580b0]
            jb .L_409329

            cmp R9B,2
            lea R14,QWORD PTR [RIP+.L_459df1]
            je .L_409329

            cmp R9B,3
            jne .L_409300

            call .L_408f30

            cmp AL,255
            je .L_409408

            movzx EAX,AL
            lea R14,QWORD PTR [RIP+.L_4583d4]
            movzx R9D,BYTE PTR [R8+RAX*1-1]
            cmp R9B,4
            je .L_409329

            cmp R9B,7
            lea R14,QWORD PTR [RIP+.L_4583c5]
            je .L_409329
.L_4092e8:

            lea R14,QWORD PTR [RSP+54]
            lea R8,QWORD PTR [RIP+.L_4583e8]
            jmp .L_409310
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409300:

            lea R14,QWORD PTR [RSP+54]
            lea R8,QWORD PTR [RIP+.L_45d353]
            and R9D,7
.L_409310:

            mov ECX,10
            mov EDX,1
            mov ESI,10
            mov RDI,R14
            xor EAX,EAX
            call __snprintf_chk@PLT
.L_409329:

            lea R15,QWORD PTR [RSP+28]
            mov RDI,RBX
            mov RSI,R15
            call .L_408800

            lea R8,QWORD PTR [RSP+40]
            mov RDI,RBX
            mov RSI,R8
            call .L_4085a0

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_4583e5]
            mov RDI,R8
            movzx ESI,BYTE PTR [RAX]
            lea RAX,QWORD PTR [RIP+.L_4583e1]
            mov RCX,RAX
            test SIL,32
            cmove RCX,RDX
            and ESI,8
            lea RSI,QWORD PTR [RSP+96]
            cmove RAX,RDX
            mov EDX,18
            mov QWORD PTR [RSP+8],RCX
            mov R13,RAX
            call .L_4083e0

            lea RSI,QWORD PTR [RSP+64]
            mov EDX,18
            mov RDI,R15
            mov RBP,RAX
            call .L_4083e0

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,WORD PTR [RSP+6]
            lea R8,QWORD PTR [RIP+.L_458518]
            mov EDX,1
            mov RDI,R12
            push RCX
.L_4093b8:

            push R13
            mov RCX,-1
            push RBP
            push RAX
            mov RAX,QWORD PTR [RBX]
            push R14
            movzx EAX,BYTE PTR [RAX+2]
            push RAX
            movzx R9D,BYTE PTR [RBX+8]
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,48
            mov RAX,R12
            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            jne .L_409413

            add RSP,136
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409408:

            mov R9D,255
            jmp .L_4092e8
.L_409413:

            call __stack_chk_fail@PLT
.L_409418:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409420:

            push RBX
            movzx EAX,BYTE PTR [RDI+1]
            lea R8,QWORD PTR [RIP+.L_4583e5]
            lea RCX,QWORD PTR [RIP+.L_4583e1]
            mov RBX,RSI
            movzx ESI,DX
            mov R9,R8
            mov EDX,1
            test AL,8
            cmovne R9,RCX
            test AL,1
            cmove RCX,R8
            sar EAX,4
            push R9
            push RCX
            push RAX
            lea R9,QWORD PTR [RDI+2]
            movzx EAX,BYTE PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_458558]
            mov RCX,-1
            push RAX
            movzx EAX,BYTE PTR [RDI+25]
            push RAX
            movzx EAX,BYTE PTR [RDI+24]
            push RAX
            movzx EAX,BYTE PTR [RDI+23]
            push RAX
            movzx EAX,BYTE PTR [RDI+22]
            push RAX
            movzx EAX,BYTE PTR [RDI+21]
            push RAX
            movzx EAX,BYTE PTR [RDI+20]
            push RAX
            movzx EAX,BYTE PTR [RDI+19]
            push RAX
            movzx EAX,BYTE PTR [RDI+18]
            mov RDI,RBX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,96
            mov RAX,RBX
            pop RBX
            ret 
.L_4094a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4094b0:

            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+4]
            mov R12,RCX
            mov RBP,R8
            sub RSP,8
            call .L_4348a0

            lea RAX,QWORD PTR [RBX+24]
            xor EDX,EDX
            mov QWORD PTR [RBX+24],R13
            mov QWORD PTR [RBX+48],R12
            mov QWORD PTR [RBX+56],RBP
            mov QWORD PTR [RBX+40],RAX
            xor EAX,EAX
            and BYTE PTR [RBX+20],254
            mov DWORD PTR [RBX+32],0
            mov DWORD PTR [RBX+12],0
            mov WORD PTR [RBX+16],AX
            mov WORD PTR [RBX+18],DX
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_40950c:

            nop
            nop
            nop
            nop
.L_409510:

            test BYTE PTR [RDI+20],1
            lea RAX,QWORD PTR [RDI+12]
            mov EDX,0
            cmove RAX,RDX
            ret 
.L_409522:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409530:

            test BYTE PTR [RDI+20],1
            jne .L_409540

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_409540:

            add RDI,12
            jmp .L_40d0d0
.L_409549:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409550:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_409561:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_4348e0

            mov RSI,R12
            mov RDI,RBP
            call .L_433d90

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4095b8

            add RSP,288
.L_4095b3:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4095b8:

            call __stack_chk_fail@PLT
.L_4095bd:

            nop
            nop
            nop
.L_4095c0:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_4095d1:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_4348e0

            mov ESI,R12D
            mov RDI,RBP
            call .L_433930

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_409628

            add RSP,288
.L_409623:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_409628:

            call __stack_chk_fail@PLT
.L_40962d:

            nop
            nop
            nop
.L_409630:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,288
.L_40963e:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+24]
            call .L_430c70

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_4348e0

            test EAX,EAX
            mov R12D,EAX
            je .L_4096a0
.L_40967b:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_4096d3

            add RSP,288
.L_409698:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4096a0:

            mov RDI,RBP
            call .L_433ce0

            test RAX,RAX
            je .L_40967b

            mov RAX,QWORD PTR [RAX]
            or BYTE PTR [RBX+20],1
            cmp DWORD PTR [RBX+8],14
            mov QWORD PTR [RBX+12],RAX
            jne .L_40967b

            mov RDI,RBX
            call .L_430ac0

            mov RDI,RBP
            mov RSI,RAX
            call .L_434600

            jmp .L_40967b
.L_4096d3:

            call __stack_chk_fail@PLT
.L_4096d8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4096e0:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,296
.L_4096ec:

            mov ESI,DWORD PTR [RDI+8]
            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBP+4]
            mov RSI,RBX
            call .L_4348e0

            test EAX,EAX
            jne .L_409730

            mov RDI,RBP
            call .L_430ac0

            mov RDI,RBX
            mov RSI,RAX
            call .L_434600
.L_409730:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40974d

            add RSP,296
.L_40974a:

            pop RBX
            pop RBP
            ret 
.L_40974d:

            call __stack_chk_fail@PLT
.L_409752:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409760:

            push RBX
            and BYTE PTR [RDI+20],254
            xor EAX,EAX
            xor EDX,EDX
            mov RBX,RDI
            mov DWORD PTR [RDI+12],0
            mov WORD PTR [RDI+16],AX
            mov WORD PTR [RDI+18],DX
            lea RDI,QWORD PTR [RDI+4]
            call .L_4348b0

            lea RDI,QWORD PTR [RBX+24]
            pop RBX
            jmp .L_430c70
.L_40978e:

            nop
            nop
.L_409790:

            jmp .L_409630
.L_409795:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4097a0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,8
            call .L_433ce0

            test RAX,RAX
            mov RBP,RAX
            je .L_4097d5

            mov RAX,QWORD PTR [RAX]
            or BYTE PTR [RBX+20],1
            cmp DWORD PTR [RBX+8],14
            mov QWORD PTR [RBX+12],RAX
            je .L_409860
.L_4097d5:

            lea R13,QWORD PTR [RBX+4]
            mov RSI,RBP
            mov RDI,R13
            call .L_435310

            cmp EAX,0
            jg .L_409800

            jne .L_409840
.L_4097eb:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_409800:

            mov RDI,RBX
            call .L_430af0

            mov RSI,R12
            mov RBX,RAX
            mov RDI,R13
            call .L_4351e0

            cmp DWORD PTR [RBX+2580],4
            jne .L_4097eb

            add RBX,7520
            mov RDI,RBX
            call .L_427610

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_427650
.L_409840:

            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+24]
            mov EDX,1000
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov ESI,EAX
            jmp .L_430d50
          .byte 0x90
.L_409860:

            mov RDI,RBX
            call .L_430ac0

            mov RDI,R12
            mov RSI,RAX
            call .L_434600

            jmp .L_4097d5
.L_409878:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409880:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,520
.L_409894:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+504],RAX
            xor EAX,EAX
            lea RBP,QWORD PTR [RSP+224]
            lea R12,QWORD PTR [RSP+64]
            call .L_430af0

            pxor XMM0,XMM0
            mov ESI,DWORD PTR [RBX+8]
            mov RDI,RBP
            mov R13,RAX
            lea R14,QWORD PTR [R13+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_4338d0

            mov EDX,2
            xor ESI,ESI
            mov RDI,R12
            call .L_42f0e0

            mov RDI,R12
            mov ESI,2
            call .L_42f900

            mov RSI,QWORD PTR [RBX+56]
            mov RDI,R12
            call .L_42f620

            mov RDI,R12
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,R12
            mov RDI,R14
            call .L_42d7b0

            mov R12,RAX
            mov EAX,3
            test R12,R12
            je .L_40995e

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_4348e0

            movzx EDX,WORD PTR [RSP+484]
            mov RSI,RBP
            mov RDI,R12
            call .L_403d30

            test EAX,EAX
            je .L_409988
.L_40994e:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_40995e:

            mov RCX,QWORD PTR [RSP+504]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4099d7

            add RSP,520
.L_409978:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409988:

            add R13,2568
            lea R15,QWORD PTR [RSP+16]
            mov RDI,R13
            call .L_415f60

            lea RSI,QWORD PTR [R15+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_415fe0

            mov EAX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov RSI,R12
            mov RDI,R14
            mov WORD PTR [RSP+50],AX
            call .L_42e6e0

            test EAX,EAX
            je .L_40995e

            jmp .L_40994e
.L_4099d7:

            call __stack_chk_fail@PLT
.L_4099dc:

            nop
            nop
            nop
            nop
.L_4099e0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RBP,RAX
            call .L_415260

            test AL,AL
            je .L_409a20

            test BYTE PTR [RBX+20],1
            lea R12,QWORD PTR [RBX+4]
            lea RSI,QWORD PTR [RBX+12]
            mov EAX,0
            mov RDI,R12
            cmove RSI,RAX
            call .L_435310

            test EAX,EAX
            js .L_409a28
.L_409a20:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409a28:

            cmp DWORD PTR [RBX+8],14
            je .L_409a50
.L_409a2e:

            mov RDI,RBX
            call .L_409880

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            pop RBP
            pop R12
            jmp .L_430d50
          .byte 0x90
.L_409a50:

            lea RDI,QWORD PTR [RBP+1208]
            mov ESI,14
            call .L_4095c0

            test RAX,RAX
            je .L_409a2e

            lea RSI,QWORD PTR [RAX+2]
            mov RDI,R12
            call .L_435310

            test EAX,EAX
            jns .L_409a20

            jmp .L_409a2e
.L_409a78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409a80:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b10

            add RSP,8
            mov RDI,RAX
            jmp .L_4099e0
.L_409a9d:

            nop
            nop
            nop
.L_409aa0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b20

            add RSP,8
            mov RDI,RAX
            jmp .L_4099e0
.L_409abd:

            nop
            nop
            nop
.L_409ac0:

            push R15
            push R14
            mov R15D,R8D
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R13,RSI
            sub RSP,472
.L_409add:

            mov QWORD PTR [RSP+8],RDX
            lea RBX,QWORD PTR [RSP+176]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+456],RAX
            xor EAX,EAX
            call .L_430af0

            mov ESI,DWORD PTR [RBP+8]
            mov RDI,RBX
            mov R12,RAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBP+4]
            lea RBP,QWORD PTR [RSP+16]
            mov RSI,RBX
            call .L_4348e0

            mov RSI,R13
            mov RDI,RBP
            lea R13,QWORD PTR [R12+216]
            call .L_42fa70

            mov RDI,RBP
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            je .L_409be4

            test R15B,R15B
            mov RBP,RAX
            je .L_409c10

            sub R15D,1
            movzx R15D,R15B
            lea R15,QWORD PTR [R14+R15*1+1]
            nop
            nop
            nop
            nop
            nop
.L_409b70:

            movzx ESI,BYTE PTR [R14]
            cmp SIL,5
            jne .L_409b85

            cmp BYTE PTR [R12+1548],0
            jns .L_409bac
.L_409b85:

            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_409bac

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            mov RDI,RBP
            add EDX,2
            call .L_403d30

            test EAX,EAX
            jne .L_409c60
.L_409bac:

            add R14,1
            cmp R14,R15
            jne .L_409b70
.L_409bb5:

            movzx EAX,BYTE PTR [RSP+144]
            cmp AX,WORD PTR [RBP+58]
            je .L_409c70
.L_409bc7:

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBP
            mov RDI,R13
            call .L_42e6e0

            test EAX,EAX
            jne .L_409c60
.L_409be4:

            mov RAX,QWORD PTR [RSP+456]
            xor RAX,QWORD PTR FS:[40]
            jne .L_409c83

            add RSP,472
.L_409c02:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409c10:

            movzx R15D,WORD PTR [RSP+436]
            add R15,RBX
            cmp R15,RBX
            ja .L_409c45

            jmp .L_409bb5
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409c28:

            cmp BYTE PTR [R12+1548],0
            js .L_409c4a
.L_409c33:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBX,R15
            jae .L_409bb5
.L_409c45:

            cmp BYTE PTR [RBX],5
            je .L_409c28
.L_409c4a:

            movzx EAX,BYTE PTR [RBX+1]
            mov RSI,RBX
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            test EAX,EAX
            je .L_409c33
.L_409c60:

            mov RDI,RBP
            call .L_4033b0

            jmp .L_409be4
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_409c70:

            sub EAX,1
            mov RDI,RBP
            movzx ESI,AX
            call .L_403420

            jmp .L_409bc7
.L_409c83:

            call __stack_chk_fail@PLT
.L_409c88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409c90:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,312
.L_409cad:

            movzx EBX,WORD PTR [RDX+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp WORD PTR [RDX+58],BX
            lea R14,QWORD PTR [RSP+30]
            mov WORD PTR [RSP+30],AX
            ja .L_409cf4

            jmp .L_409db0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409ce0:

            movzx EAX,BYTE PTR [RSP+31]
            lea EBX,DWORD PTR [RBX+RAX*1+2]
            cmp BX,WORD PTR [R15+58]
            jae .L_409db0
.L_409cf4:

            movzx ESI,BX
            mov RCX,R14
            mov EDX,2
            mov RDI,R15
            call .L_403860

            cmp BYTE PTR [RSP+30],13
            jne .L_409ce0

            movzx R8D,BYTE PTR [RSP+31]
            lea R14,QWORD PTR [RSP+32]
            lea ESI,DWORD PTR [RBX+2]
            mov RDI,R15
            movzx ESI,SI
            mov RCX,R14
            mov EDX,R8D
            mov BYTE PTR [RSP+15],R8B
            mov DWORD PTR [RSP+8],R8D
            call .L_403860

            movzx R9D,BYTE PTR [RSP+15]
            movsxd R8,DWORD PTR [RSP+8]
            test R9B,R9B
            je .L_409db5

            mov RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RIP+.L_4588b9]
            mov ECX,5

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta AL
            sbb AL,0
            test AL,AL
            jne .L_409db8

            cmp BYTE PTR [RSP+32],52
            movzx EDI,R9B
            je .L_409db8

            lea EDX,DWORD PTR [RDI-1]
            mov EAX,1
            lea RSI,QWORD PTR [RSP+31]
            movzx EDX,DX
            add RDX,1
            jmp .L_409d92
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_409d88:

            add RAX,1
            cmp BYTE PTR [RSI+RAX*1],52
            je .L_409db8
.L_409d92:

            cmp RAX,RDX
            jne .L_409d88

            cmp AX,DI
            jne .L_409db8

            mov BYTE PTR [RSP+R8*1+32],52
            lea R8D,DWORD PTR [R9+1]
            movzx R8D,R8B
            jmp .L_409db8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_409db0:

            lea R14,QWORD PTR [RSP+32]
.L_409db5:

            xor R8D,R8D
.L_409db8:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_409ac0

            mov RAX,QWORD PTR [RSP+296]
            xor RAX,QWORD PTR FS:[40]
            jne .L_409dee

            add RSP,312
.L_409de3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_409dee:

            call __stack_chk_fail@PLT
.L_409df3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409e00:

            jmp .L_409c90
.L_409e05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409e10:

            jmp .L_409c90
.L_409e15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409e20:

            push RBX

            lea R9,QWORD PTR [RIP+.L_409a80]
            lea R8,QWORD PTR [RIP+.L_4588be]
            lea RCX,QWORD PTR [RIP+.L_4588c3]
            mov EDX,14
            mov RBX,RDI
            call .L_4094b0

            lea RAX,QWORD PTR [RIP+.L_4588c3]
            mov RDI,RBX
            mov QWORD PTR [RBX+80],RBX
            mov QWORD PTR [RBX+88],0
            mov QWORD PTR [RBX+112],RBX
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RIP+.L_409e00]
            mov QWORD PTR [RBX+120],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_4588be]
            mov QWORD PTR [RBX+96],RAX
            mov RAX,OFFSET .L_40b8e0
            mov QWORD PTR [RBX+104],RAX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+64]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_409ea0:

            jmp .L_409760
.L_409ea5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409eb0:

            jmp .L_4097a0
.L_409eb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409ec0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBP,R8D
            mov EBX,ECX
            mov R15,RDI
            sub RSP,312
.L_409edf:

            mov ESI,DWORD PTR [RDI+8]
            lea R12,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_4338d0

            movzx ECX,BPL
            movzx EDX,BX
            mov RSI,R13
            mov RDI,R12
            call .L_433d40

            test EAX,EAX
            jne .L_409f36

            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_4344b0

            mov RSI,R12
            mov RDI,R15
            call .L_4097a0

            mov EAX,DWORD PTR [RSP+12]
.L_409f36:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_409f5b

            add RSP,312
.L_409f50:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_409f5b:

            call __stack_chk_fail@PLT
.L_409f60:

            jmp .L_409c90
.L_409f65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_409f70:

            push RBX

            lea R9,QWORD PTR [RIP+.L_409aa0]
            lea R8,QWORD PTR [RIP+.L_4588c8]
            lea RCX,QWORD PTR [RIP+.L_4588b9]
            mov EDX,51
            mov RBX,RDI
            call .L_4094b0

            lea RAX,QWORD PTR [RIP+.L_40a270]
            mov RDI,RBX
            mov DWORD PTR [RBX+72],0
            mov QWORD PTR [RBX+104],RBX
            mov QWORD PTR [RBX+112],0
            mov QWORD PTR [RBX+64],RAX
            lea RAX,QWORD PTR [RBX+64]
            mov QWORD PTR [RBX+136],RBX
            mov QWORD PTR [RBX+144],0
            mov QWORD PTR [RBX+80],RAX
            lea RAX,QWORD PTR [RIP+.L_4588b9]
            mov QWORD PTR [RBX+88],RAX
            lea RAX,QWORD PTR [RIP+.L_409e10]
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RIP+.L_4588c8]
            mov QWORD PTR [RBX+120],RAX
            mov RAX,OFFSET .L_40b910
            mov QWORD PTR [RBX+128],RAX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+88]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_40a013:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a020:

            push RBX
            mov RBX,RDI
            call .L_409760

            lea RDI,QWORD PTR [RBX+64]
            pop RBX
            jmp .L_430c70
.L_40a033:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a040:

            jmp .L_409630
.L_40a045:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a050:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,296
.L_40a05c:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            add RBX,64
            call .L_4348e0

            mov RDI,RBX
            call .L_430c70

            mov ESI,52
            mov RDI,RBP
            call .L_433930

            test RAX,RAX
            je .L_40a0c5

            mov EDX,DWORD PTR [RAX+2]
            mov ESI,DWORD PTR [RSP+256]
            mov EAX,2147483647
            mov RDI,RBX
            bswap EDX
            test EDX,EDX
            cmovs EDX,EAX
            call .L_430d50
.L_40a0c5:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40a0e2

            add RSP,296
.L_40a0df:

            pop RBX
            pop RBP
            ret 
.L_40a0e2:

            call __stack_chk_fail@PLT
.L_40a0e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a0f0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBP,R8D
            mov EBX,ECX
            mov R15,RDI
            sub RSP,312
.L_40a10f:

            mov ESI,DWORD PTR [RDI+8]
            lea R12,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_4338d0

            movzx ECX,BPL
            movzx EDX,BX
            mov RSI,R13
            mov RDI,R12
            call .L_433d40

            test EAX,EAX
            jne .L_40a16e

            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_4344b0

            mov RSI,R12
            mov RDI,R15
            call .L_4097a0

            mov RDI,R15
            call .L_40a050

            mov EAX,DWORD PTR [RSP+12]
.L_40a16e:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40a193

            add RSP,312
.L_40a188:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40a193:

            call __stack_chk_fail@PLT
.L_40a198:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a1a0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+64]
            sub RSP,288
.L_40a1b2:

            mov ESI,DWORD PTR [RDI+8]
            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            call .L_4348e0

            mov ESI,52
            mov RDI,RBP
            call .L_433930

            test RAX,RAX
            je .L_40a206

            mov ESI,DWORD PTR [RBX+72]
            mov EDX,DWORD PTR [RAX+2]
            mov ECX,ESI
            sub ECX,DWORD PTR [RSP+256]
            bswap EDX
            cmp ECX,EDX
            jb .L_40a258
.L_40a206:

            mov RDI,RBP
            call .L_434870

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,RBP
            call .L_4097a0

            mov RDI,RBX
            call .L_409760

            mov RDI,R12
            call .L_430c70
.L_40a235:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40a264

            add RSP,288
.L_40a24f:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40a258:

            sub EDX,ECX
            mov RDI,R12
            call .L_430d50

            jmp .L_40a235
.L_40a264:

            call __stack_chk_fail@PLT
.L_40a269:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a270:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b20

            add RSP,8
            mov RDI,RAX
            jmp .L_40a1a0
.L_40a28d:

            nop
            nop
            nop
.L_40a290:

            jmp .L_409c90
.L_40a295:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a2a0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RBX+4]
            mov RSI,RBP
            mov R12,RAX
            call .L_434d70

            test EAX,EAX
            mov EBP,EAX
            jne .L_40a2e2

            mov EAX,DWORD PTR [R12+2580]
            cmp EAX,3
            ja .L_40a2f0

            cmp EAX,2
            jae .L_40a320

            test EAX,EAX
            jne .L_40a2e2

            mov RDI,RBX
            call .L_409630
.L_40a2e2:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a2f0:

            cmp EAX,4
            jne .L_40a2e2

            mov RDI,RBX
            add R12,7520
            call .L_409630

            mov RDI,R12
            call .L_427610

            mov RDI,R12
            call .L_427650

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40a320:

            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,EAX
            mov EDX,1000
            call .L_430d50

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_40a33c:

            nop
            nop
            nop
            nop
.L_40a340:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBP,RSI
            mov R14,RDX
            sub RSP,296
.L_40a35d:

            mov BYTE PTR [RSP+8],CL
            lea RBX,QWORD PTR [RSP+128]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov R12,RAX
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            mov RSI,QWORD PTR [R15+56]
            mov RDI,RBX
            lea R15,QWORD PTR [R12+216]
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R15
            call .L_42d7b0

            test RAX,RAX
            je .L_40a700

            cmp DWORD PTR [R12+8128],2
            mov RBX,RAX
            je .L_40a568
.L_40a3f7:

            movzx EAX,BYTE PTR [RBP+100]
            test AL,1
            jne .L_40a5e0
.L_40a403:

            test AL,2
            jne .L_40a4f8

            test AL,4
            jne .L_40a648
.L_40a413:

            test AL,8
            jne .L_40a710
.L_40a41b:

            test AL,16
            jne .L_40a790
.L_40a423:

            test AL,32
            jne .L_40a7d0
.L_40a42b:

            test AL,64
            jne .L_40a688
.L_40a433:

            test AL,AL
            js .L_40a6c0
.L_40a43b:

            movzx EAX,BYTE PTR [RBP+101]
            test AL,1
            jne .L_40a810
.L_40a447:

            test AL,8
            jne .L_40a850
.L_40a44f:

            test R13B,R13B
            jne .L_40a8e8
.L_40a458:

            movzx EAX,BYTE PTR [RSP+256]
            cmp AX,WORD PTR [RBX+58]
            je .L_40a908
.L_40a46a:

            add R12,2568
            lea RBP,QWORD PTR [RSP+80]
            mov RDI,R12
            call .L_415f60

            lea RSI,QWORD PTR [RSP+96]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R12
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_415fe0

            mov EDX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R15
            mov WORD PTR [RSP+114],DX
            mov RDX,RBP
            call .L_42e6e0

            test EAX,EAX
            je .L_40a4c8

            nop
            nop
            nop
.L_40a4b8:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
.L_40a4c8:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40a91b

            add RSP,296
.L_40a4e6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a4f8:

            mov EAX,2099
            lea RSI,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RBP+8]
            mov WORD PTR [RSP+48],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+50],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+56],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a530:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_40a530

            mov EDX,10
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            test AL,4
            je .L_40a413

            jmp .L_40a648
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40a568:

            movzx EDX,BYTE PTR [RSP+8]
            add RDX,R14
            cmp R14,RDX
            jae .L_40a59f

            cmp BYTE PTR [R14],11
            je .L_40a3f7

            mov RAX,R14
            jmp .L_40a591
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40a588:

            cmp BYTE PTR [RAX],11
            je .L_40a3f7
.L_40a591:

            movzx ECX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RCX*1+2]
            cmp RDX,RAX
            ja .L_40a588
.L_40a59f:

            lea RDI,QWORD PTR [R12+8128]
            mov EAX,523
            mov WORD PTR [RSP+40],AX
            call .L_431ec0

            lea RSI,QWORD PTR [RSP+40]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+42],AX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            jmp .L_40a3f7

            nop
            nop
.L_40a5e0:

            mov EAX,2062
            lea RSI,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RBP]
            mov WORD PTR [RSP+48],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+50],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+56],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a618:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_40a618

            mov EDX,10
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a403
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40a648:

            movdqu XMM0,XMMWORD PTR [RBP+16]
            lea RSI,QWORD PTR [RSP+48]
            mov R11D,4101
            mov EDX,18
            mov RDI,RBX
            mov WORD PTR [RSP+48],R11W
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a413
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a688:

            mov EAX,DWORD PTR [RBP+68]
            mov EDI,1076
            lea RSI,QWORD PTR [RSP+40]
            mov WORD PTR [RSP+40],DI
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+42],EAX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a433
          .byte 0x66
          .byte 0x90
.L_40a6c0:

            movzx EAX,WORD PTR [RBP+72]
            mov ESI,513
            mov EDX,4
            mov WORD PTR [RSP+40],SI
            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+42],AX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            jmp .L_40a43b

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40a700:

            mov EAX,3
            jmp .L_40a4c8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40a710:

            mov R10D,4099
            mov ESI,16
            mov WORD PTR [RSP+48],R10W
            lea R10,QWORD PTR [RBP+32]
            mov RDI,R10
            mov QWORD PTR [RSP+24],R10
            call strnlen@PLT

            mov R10,QWORD PTR [RSP+24]
            lea R9,QWORD PTR [RSP+48]
            lea RDI,QWORD PTR [RSP+50]
            mov ECX,16
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            mov QWORD PTR [RSP+16],R9
            mov RSI,R10
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP+8]
            mov R9,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+49],R8B
            movzx R8D,R8B
            mov RSI,R9
            lea EDX,DWORD PTR [R8+2]
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a41b
          .byte 0x66
          .byte 0x90
.L_40a790:

            mov RAX,QWORD PTR [RBP+49]
            lea RSI,QWORD PTR [RSP+48]
            mov R9D,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+48],R9W
            mov QWORD PTR [RSP+50],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a423
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a7d0:

            mov RAX,QWORD PTR [RBP+57]
            lea RSI,QWORD PTR [RSP+48]
            mov R8D,2055
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+48],R8W
            mov QWORD PTR [RSP+50],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+100]
            jmp .L_40a42b
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a810:

            movzx EAX,WORD PTR [RBP+74]
            lea RSI,QWORD PTR [RSP+40]
            mov ECX,768
            mov EDX,5
            mov RDI,RBX
            mov WORD PTR [RSP+40],CX
            mov BYTE PTR [RSP+42],0
            rol AX,8
            mov WORD PTR [RSP+43],AX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            movzx EAX,BYTE PTR [RBP+101]
            jmp .L_40a447
          .byte 0x90
.L_40a850:

            mov EDX,DWORD PTR [RBP+96]
            lea RSI,QWORD PTR [RSP+40]
            mov RDI,RBX
            mov DWORD PTR [RSP+40],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            jmp .L_40a44f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40a8e8:

            movzx EDX,R13B
            mov RSI,R14
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_40a4b8

            jmp .L_40a458
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40a908:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403420

            jmp .L_40a46a
.L_40a91b:

            call __stack_chk_fail@PLT
.L_40a920:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov R13D,EDX
            sub RSP,248
.L_40a93d:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+30],DX
            mov RDI,RBX
            mov EDX,2
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            mov RSI,QWORD PTR [R12+48]
            mov RDI,RBX
            call .L_42f620

            test R13B,R13B
            jne .L_40aa48

            lea R12,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_40aac0
.L_40a9c9:

            add RBP,2568
            test R14,R14
            je .L_40aad0

            movdqu XMM0,XMMWORD PTR [R14]
            lea R13,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+48],XMM0
.L_40a9e8:

            mov RDI,RBP
            call .L_415f60

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RSI,RBX
            mov EAX,4294963391
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+66],AX
            call .L_42e6e0

            test EAX,EAX
            jne .L_40aa8c
.L_40aa1a:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40aae7

            add RSP,248
.L_40aa38:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40aa48:

            lea R12,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_40aac0

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],13
            mov BYTE PTR [RSP+31],R13B
            call .L_403d30

            test EAX,EAX
            je .L_40aaa8
.L_40aa8c:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_40aa1a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40aaa8:

            movzx EDX,R13B
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_40aa8c

            jmp .L_40a9c9
.L_40aac0:

            mov EAX,3
            jmp .L_40aa1a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40aad0:

            lea RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            lea R13,QWORD PTR [RSP+32]
            call .L_415fe0

            jmp .L_40a9e8
.L_40aae7:

            call __stack_chk_fail@PLT
.L_40aaec:

            nop
            nop
            nop
            nop
.L_40aaf0:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov R13,RDX
            sub RSP,176
.L_40ab08:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R12
            mov RDI,RBP
            mov WORD PTR [RSP+13],DX
            add RBX,216
            call .L_42fa70

            mov RDI,RBP
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42d7b0

            test RAX,RAX
            je .L_40ab8b

            mov RBP,RAX
            lea RSI,QWORD PTR [RSP+13]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+13],AX
            mov BYTE PTR [RSP+15],R14B
            call .L_403d30

            test EAX,EAX
            je .L_40abb0
.L_40ab83:

            mov RDI,RBP
            call .L_4033b0
.L_40ab8b:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40abc9

            add RSP,176
.L_40aba5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_40abb0:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_42e6e0

            test EAX,EAX
            je .L_40ab8b

            jmp .L_40ab83
.L_40abc9:

            call __stack_chk_fail@PLT
.L_40abce:

            nop
            nop
.L_40abd0:

            jmp .L_40a2a0
.L_40abd5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40abe0:

            push R15
            push R14
            push R13
            push R12
            mov R12D,13
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,360
.L_40abfa:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+64]
            call .L_430af0

            mov ESI,DWORD PTR [RBP+8]
            mov R13,RAX
            mov RDI,RBX
            lea R14,QWORD PTR [R13+2568]
            call .L_4338d0

            mov RDI,R14
            call .L_415260

            test AL,AL
            je .L_40ad36

            lea R12,QWORD PTR [RBP+4]
            mov RSI,RBX
            mov RDI,R12
            call .L_4348e0

            mov ESI,14
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40ad78
.L_40ac61:

            xor ESI,ESI
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40adb0
.L_40ac74:

            mov ESI,53
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40ade8
.L_40ac8a:

            mov ESI,2
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40ae10
.L_40aca0:

            mov ESI,7
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40ae40
.L_40acb6:

            mov ESI,5
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40ae70
.L_40accc:

            mov ESI,3
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40aea8
.L_40ace2:

            mov ESI,1
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40af08
.L_40acf8:

            mov ESI,4
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40af38
.L_40ad0e:

            mov ESI,12
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            je .L_40af70
.L_40ad24:

            mov RDI,R12
            mov RSI,RBX
            call .L_4351e0

            test EAX,EAX
            mov R12D,EAX
            je .L_40ad68
.L_40ad36:

            mov RDX,QWORD PTR [RSP+344]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_40afa9

            add RSP,360
.L_40ad57:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ad68:

            mov RDI,RBP
            call .L_409630

            jmp .L_40ad36
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ad78:

            lea RSI,QWORD PTR [RSP+32]
            mov R11D,2062
            xor R15D,R15D
            mov WORD PTR [RSP+32],R11W
            mov DWORD PTR [RSP+34],0
            xor EAX,EAX
            mov WORD PTR [RSI+6],R15W
            mov RDI,RBX
            mov WORD PTR [RSP+40],AX
            call .L_433f30

            jmp .L_40ac61
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40adb0:

            mov R10D,768
            mov BYTE PTR [RSP+26],0
            lea RSI,QWORD PTR [RSP+24]
            mov WORD PTR [RSP+24],R10W
            movzx EAX,BYTE PTR [R13+1668]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+27],AX
            call .L_433f30

            jmp .L_40ac74
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ade8:

            lea RSI,QWORD PTR [RSP+24]
            movabs RAX,-2234032805224905163
            mov RDI,RBX
            mov QWORD PTR [RSP+24],RAX
            call .L_433f30

            jmp .L_40ac8a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ae10:

            mov R9D,2050
            lea RSI,QWORD PTR [RSP+32]
            mov RDI,RBX
            mov WORD PTR [RSP+32],R9W
            mov RAX,QWORD PTR [R13+1686]
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            jmp .L_40aca0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ae40:

            mov R8D,2055
            mov RDI,R14
            mov WORD PTR [RSP+32],R8W
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            lea RSI,QWORD PTR [RSP+32]
            mov RDI,RBX
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            jmp .L_40acb6
          .byte 0x66
          .byte 0x90
.L_40ae70:

            mov EDI,4101
            mov WORD PTR [RSP+32],DI
            lea RDI,QWORD PTR [R13+1368]
            call .L_4129e0

            lea RSI,QWORD PTR [RSP+32]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            jmp .L_40accc
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40aea8:

            lea R8,QWORD PTR [R13+1669]
            mov ESI,4099
            lea R14,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R8
            mov QWORD PTR [RSP+8],R8
            call strnlen@PLT

            mov R8,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+2]
            mov ECX,16
            mov RDX,RAX
            mov R15,RAX
            mov RSI,R8
            call __memcpy_chk@PLT

            mov RSI,R14
            mov RDI,RBX
            mov BYTE PTR [RSP+33],R15B
            call .L_433f30

            jmp .L_40ace2
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40af08:

            mov ECX,513
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,RBX
            mov WORD PTR [RSP+24],CX
            movzx EAX,WORD PTR [R13+1666]
            rol AX,8
            mov WORD PTR [RSP+26],AX
            call .L_433f30

            jmp .L_40acf8

            nop
            nop
            nop
.L_40af38:

            lea RDI,QWORD PTR [R13+1368]
            mov EDX,4100
            mov WORD PTR [RSP+32],DX
            call .L_412980

            lea RSI,QWORD PTR [RSP+32]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            jmp .L_40ad0e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40af70:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,RBX
            mov WORD PTR [RSP+24],AX
            movzx EAX,WORD PTR [R13+1472]
            rol AX,8
            mov WORD PTR [RSP+26],AX
            movzx EAX,BYTE PTR [R13+1548]
            mov BYTE PTR [RSP+28],AL
            call .L_433f30

            jmp .L_40ad24
.L_40afa9:

            call __stack_chk_fail@PLT
.L_40afae:

            nop
            nop
.L_40afb0:

            push RBX
            mov RBX,RDI
            call .L_40abe0

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d6f0
.L_40afd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40afe0:

            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d730
.L_40affa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40b000:

            push RBX
            mov RBX,RDI
            sub RSP,16
            call .L_40a2a0

            test EAX,EAX
            jne .L_40b021

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_40a050

            mov EAX,DWORD PTR [RSP+12]
.L_40b021:

            add RSP,16
            pop RBX
            ret 
.L_40b027:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b030:

            push RBX
            mov RBX,RDI
            call .L_40a050

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d6f0
.L_40b052:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b060:

            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d730
.L_40b07a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40b080:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RDX
            sub RSP,360
.L_40b097:

            mov QWORD PTR [RSP+8],RSI
            lea R12,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            call .L_430af0

            mov ESI,DWORD PTR [R13+8]
            mov R15,RAX
            mov RDI,R12
            mov QWORD PTR [RSP],RAX
            movzx R14D,WORD PTR [RBX+60]
            call .L_4338d0

            lea RDI,QWORD PTR [R15+2568]
            xor ECX,ECX
            mov WORD PTR [RSP+26],CX
            call .L_415260

            test AL,AL
            je .L_40b19b

            cmp R14W,WORD PTR [RBX+58]
            jae .L_40b14e

            lea RBP,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RBP+2]
            nop
            nop
            nop
            nop
.L_40b100:

            xor EDX,EDX
            movzx ESI,R14W
            mov RCX,RBP
            mov WORD PTR [RSP+32],DX
            mov RDI,RBX
            mov EDX,2
            call .L_403860

            movzx EDX,BYTE PTR [RSP+33]
            lea ESI,DWORD PTR [R14+2]
            mov RCX,R15
            mov RDI,RBX
            movzx ESI,SI
            call .L_403860

            mov RSI,RBP
            mov RDI,R12
            call .L_433f30

            movzx EAX,BYTE PTR [RSP+33]
            lea R14D,DWORD PTR [R14+RAX*1+2]
            cmp R14W,WORD PTR [RBX+58]
            jb .L_40b100
.L_40b14e:

            mov RDI,QWORD PTR [RSP]
            mov EAX,1076
            mov WORD PTR [RSP+26],AX
            add RDI,10528
            call .L_40cce0

            lea RSI,QWORD PTR [RSP+26]
            bswap EAX
            mov RDI,R12
            mov DWORD PTR [RSP+28],EAX
            call .L_433f30

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_4344b0

            mov RDI,R13
            mov RSI,R12
            call .L_4097a0

            mov RDI,R13
            call .L_40a050
.L_40b19b:

            mov RAX,QWORD PTR [RSP+344]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40b1c0

            add RSP,360
.L_40b1b5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40b1c0:

            call __stack_chk_fail@PLT
.L_40b1c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b1d0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RDX
            sub RSP,456
.L_40b1e7:

            mov QWORD PTR [RSP+8],RCX
            mov QWORD PTR [RSP],RSI
            lea R12,QWORD PTR [RSP+160]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+440],RAX
            xor EAX,EAX
            call .L_430af0

            mov ESI,DWORD PTR [RBP+8]
            xor EDX,EDX
            mov RDI,R12
            mov R14,RAX
            mov WORD PTR [RSP+51],DX
            movzx R15D,WORD PTR [RBX+60]
            call .L_4338d0

            lea RAX,QWORD PTR [RBP+4]
            xor ESI,ESI
            xor EDI,EDI
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov WORD PTR [RSP+76],SI
            mov WORD PTR [RSP+61],DI
            mov RSI,R12
            mov RDI,RAX
            mov WORD PTR [RSP+66],CX
            mov WORD PTR [RSP+53],R8W
            mov WORD PTR [RSP+86],R9W
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+57],R11W
            mov QWORD PTR [RSP+16],RAX
            call .L_4348e0

            cmp DWORD PTR [R14+2580],4
            mov BYTE PTR [RSP+67],0
            mov BYTE PTR [RSP+77],0
            mov BYTE PTR [RSP+62],0
            mov BYTE PTR [RSP+97],0
            mov BYTE PTR [RSP+87],0
            mov BYTE PTR [RSP+58],0
            mov BYTE PTR [RSP+54],0
            je .L_40b2e0
.L_40b2a8:

            mov EAX,2
.L_40b2ad:

            mov RDX,QWORD PTR [RSP+440]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40b595

            add RSP,456
.L_40b2cb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b2e0:

            cmp R15W,WORD PTR [RBX+58]
            jae .L_40b570

            lea R13,QWORD PTR [RSP+51]
            jmp .L_40b304
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b2f8:

            lea R15D,DWORD PTR [R15+RAX*1+2]
            cmp R15W,WORD PTR [RBX+58]
            jae .L_40b350
.L_40b304:

            movzx ESI,R15W
            mov RCX,R13
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+52]
            cmp AL,16
            jbe .L_40b2f8
.L_40b321:

            cmp DWORD PTR [R14+2580],4
            jne .L_40b2a8
.L_40b32f:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP]
            mov ECX,4294967295
            mov RDI,RBP
            call .L_40aaf0

            jmp .L_40b2a8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40b350:

            movzx EAX,WORD PTR [RBX+60]
            movzx R8D,R15W
            sub R8D,EAX
            cmp R8D,256
            jg .L_40b321
.L_40b364:

            mov RSI,QWORD PTR [RBP+56]
            lea RDI,QWORD PTR [RIP+.L_4588be]
            mov ECX,5
            mov EDX,10

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            mov ESI,14
            mov RDI,RBX
            seta AL
            sbb AL,0
            movsx EAX,AL
            cmp EAX,1
            lea RAX,QWORD PTR [RSP+66]
            sbb R13D,R13D
            and R13D,4294967259
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            add R13D,51
            call .L_430f70

            test EAX,EAX
            jne .L_40b321

            cmp BYTE PTR [RSP+67],8
            jne .L_40b321

            lea R15,QWORD PTR [RSP+76]
            mov EDX,10
            mov ESI,51
            mov RDI,RBX
            mov RCX,R15
            call .L_430f70

            test EAX,EAX
            jne .L_40b3e7

            cmp BYTE PTR [RSP+77],8
            jne .L_40b321
.L_40b3e7:

            mov RAX,QWORD PTR [RSP+24]
            lea RSI,QWORD PTR [R15+2]
            mov RDI,QWORD PTR [RSP+16]
            add RAX,2
            cmp R13D,14
            cmove RSI,RAX
            call .L_435310

            test EAX,EAX
            jle .L_40b321

            lea RCX,QWORD PTR [RSP+61]
            xor ESI,ESI
            mov EDX,5
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40b58d

            cmp BYTE PTR [RSP+62],3
            jne .L_40b321

            movzx EAX,WORD PTR [RSP+64]
            rol AX,8
            lea EDX,DWORD PTR [RAX-11]
            cmp DX,15
            ja .L_40b321

            movzx EDX,BYTE PTR [R14+1668]
            cmp DX,AX
            setne R15B
.L_40b45a:

            lea RCX,QWORD PTR [RSP+57]
            mov EDX,4
            mov ESI,1
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40b496

            cmp BYTE PTR [RSP+58],2
            jne .L_40b496

            movzx EAX,WORD PTR [RSP+59]
            rol AX,8
            cmp AX,WORD PTR [R14+1666]
            mov EAX,1
            cmovne R15D,EAX
.L_40b496:

            lea RCX,QWORD PTR [RSP+86]
            mov EDX,10
            mov ESI,7
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40b4bc

            cmp BYTE PTR [RSP+87],8
            je .L_40b892
.L_40b4bc:

            lea RAX,QWORD PTR [RSP+96]
            mov EDX,18
            mov ESI,5
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_430f70

            test EAX,EAX
            mov BYTE PTR [RSP+43],0
            jne .L_40b4ef

            cmp BYTE PTR [RSP+97],16
            je .L_40b854
.L_40b4ef:

            cmp R13D,51
            je .L_40b59a

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            mov BYTE PTR [RSP+42],0
            je .L_40b740
.L_40b51d:

            cmp R13D,51
            je .L_40b843

            sub R15B,1
            jne .L_40b843

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R14+1208]
            mov RDX,RBX
            add RSI,2
            call .L_40b080
.L_40b549:

            cmp BYTE PTR [RSP+42],0
            je .L_40b7bd
.L_40b554:

            cmp DWORD PTR [R14+2580],4
            je .L_40b826

            xor EAX,EAX
            jmp .L_40b2ad
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40b570:

            movzx EAX,WORD PTR [RBX+60]
            movzx R8D,R15W
            sub R8D,EAX
            cmp R8D,256
            jg .L_40b32f

            jmp .L_40b364
.L_40b58d:

            xor R15D,R15D
            jmp .L_40b45a
.L_40b595:

            call __stack_chk_fail@PLT
.L_40b59a:

            cmp BYTE PTR [RSP+97],0
            je .L_40b5c7

            lea RDI,QWORD PTR [R14+1368]
            call .L_4129e0

            mov RDI,QWORD PTR [RSP+16]
            mov EDX,16
            mov RSI,RAX
            add RDI,2
            call memcmp@PLT

            test EAX,EAX
            jne .L_40b5f1
.L_40b5c7:

            lea RDI,QWORD PTR [R14+1080]
            call .L_409510

            test RAX,RAX
            je .L_40b5f1

            mov RCX,QWORD PTR [RSP+24]
            mov RDI,RAX
            lea RSI,QWORD PTR [RCX+2]
            call .L_40d0d0

            test EAX,EAX
            jle .L_40b321
.L_40b5f1:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            je .L_40b740

            lea RAX,QWORD PTR [R14+7520]
            mov BYTE PTR [RSP+42],0
            mov QWORD PTR [RSP+16],RAX
.L_40b621:

            movzx R13D,WORD PTR [RBX+60]
            cmp R13W,WORD PTR [RBX+58]
            jae .L_40b71b

            lea R15,QWORD PTR [RSP+128]
            lea RAX,QWORD PTR [R15+2]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_40b67e
.L_40b644:

            cmp EDX,299999
            ja .L_40b6dc

            mov DWORD PTR [RSP+130],3767731200
.L_40b65b:

            mov RSI,R15
            mov RDI,R12
            call .L_433f30
.L_40b666:

            movzx EAX,BYTE PTR [RSP+129]
            lea R13D,DWORD PTR [R13+RAX*1+2]
            cmp R13W,WORD PTR [RBX+58]
            jae .L_40b71b
.L_40b67e:

            xor EAX,EAX
            movzx ESI,R13W
            mov RCX,R15
            mov EDX,2
            mov RDI,RBX
            mov WORD PTR [RSP+128],AX
            call .L_403860

            movzx EDX,BYTE PTR [RSP+129]
            lea ESI,DWORD PTR [R13+2]
            mov RCX,QWORD PTR [RSP+24]
            mov RDI,RBX
            movzx ESI,SI
            call .L_403860

            movzx EAX,BYTE PTR [RSP+128]
            cmp AL,11
            je .L_40b666

            cmp AL,52
            jne .L_40b65b

            cmp BYTE PTR [RSP+43],0
            mov EDX,DWORD PTR [RSP+130]
            bswap EDX
            jne .L_40b644
.L_40b6dc:

            lea RCX,QWORD PTR [R14+10528]
            mov DWORD PTR [RSP+44],EDX
            mov RDI,RCX
            mov QWORD PTR [RSP+32],RCX
            call .L_40cce0

            mov EDX,DWORD PTR [RSP+44]
            mov RCX,QWORD PTR [RSP+32]
            cmp EAX,EDX
            jbe .L_40b65b

            mov RDI,RCX
            call .L_40cce0

            bswap EAX
            mov DWORD PTR [RSP+130],EAX
            jmp .L_40b65b
.L_40b71b:

            mov RSI,R12
            mov RDI,RBP
            call .L_4097a0

            mov RBX,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_427610

            mov RDI,RBX
            call .L_427650

            jmp .L_40b549
.L_40b740:

            lea RAX,QWORD PTR [R14+7520]
            mov ESI,11
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_426c80

            cmp BYTE PTR [RSP+54],2
            jne .L_40b321

            test RAX,RAX
            je .L_40b321

            movzx ECX,WORD PTR [RSP+55]
            cmp WORD PTR [RAX+2],CX
            jne .L_40b321

            cmp R13D,51
            je .L_40b78b

            test R15B,R15B
            jne .L_40b321
.L_40b78b:

            cmp R13D,51
            mov BYTE PTR [RSP+42],1
            jne .L_40b51d

            cmp WORD PTR [RSP+420],0
            jne .L_40b621

            lea RDI,QWORD PTR [R14+1084]
            mov RSI,R12
            call .L_4348e0

            jmp .L_40b621
.L_40b7bd:

            lea RDI,QWORD PTR [R14+7520]
            mov ESI,9
            call .L_426c80

            test RAX,RAX
            mov RBX,RAX
            je .L_40b554

            pxor XMM0,XMM0
            lea RDI,QWORD PTR [R14+2568]
            lea R12,QWORD PTR [RSP+128]
            movaps XMMWORD PTR [RSP+128],XMM0
            call .L_415f60

            lea RDI,QWORD PTR [R14+10528]
            mov RSI,R12
            movdqu XMM0,XMMWORD PTR [RAX]
            movaps XMMWORD PTR [RSP+128],XMM0
            movzx EAX,WORD PTR [RBX+2]
            mov WORD PTR [RSP+142],AX
            call .L_40cbb0

            jmp .L_40b554
.L_40b826:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP]
            mov ECX,1
            mov RDI,RBP
            call .L_40aaf0

            xor EAX,EAX
            jmp .L_40b2ad
.L_40b843:

            lea RAX,QWORD PTR [R14+7520]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_40b621
.L_40b854:

            lea RDI,QWORD PTR [R14+1368]
            call .L_4129e0

            mov RCX,QWORD PTR [RSP+16]
            mov EDX,16
            mov RSI,RAX
            lea RDI,QWORD PTR [RCX+2]
            call memcmp@PLT

            cmp EAX,1
            sbb ECX,ECX
            add ECX,1
            test EAX,EAX
            mov EAX,1
            mov BYTE PTR [RSP+43],CL
            cmovne R15D,EAX
            jmp .L_40b4ef
.L_40b892:

            lea RDI,QWORD PTR [R14+2568]
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [RSP+88],RAX
            mov EAX,1
            cmovne R15D,EAX
            jmp .L_40b4bc
.L_40b8b4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b8c0:

            push RBX
            mov RBX,RDI
            call .L_40b1d0

            test EAX,EAX
            je .L_40b8d0

            pop RBX
            ret 
          .byte 0x90
.L_40b8d0:

            mov RDI,RBX
            pop RBX
            jmp .L_4096e0
.L_40b8d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b8e0:

            jmp .L_40b8c0
.L_40b8e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b8f0:

            push RBX
            mov RBX,RDI
            call .L_40b1d0

            test EAX,EAX
            je .L_40b900

            pop RBX
            ret 
          .byte 0x90
.L_40b900:

            mov RDI,RBX
            pop RBX
            jmp .L_40a050
.L_40b909:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b910:

            jmp .L_40b8f0
.L_40b912:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40b920:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+7520]
            mov ESI,18
            call .L_426c80

            test RAX,RAX
            je .L_40b950

            movzx EAX,WORD PTR [RAX+2]
            add RSP,8
            rol AX,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40b950:

            mov EAX,1000
            add RSP,8
            ret 
.L_40b95a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40b960:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_40b967:

            mov RBX,RDI
            lea RDI,QWORD PTR [RSI+12720]
            lea R12,QWORD PTR [RBX+136]
            call .L_430ad0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_4108b0

            lea RAX,QWORD PTR [RIP+.L_4588cd]
            lea RDI,QWORD PTR [RBX+128]
            mov QWORD PTR [RBX+88],RBX
            mov QWORD PTR [RBX+96],0
            mov DWORD PTR [RBX+112],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_40c570]
            mov QWORD PTR [RBX+80],RAX
            lea RAX,QWORD PTR [RIP+.L_40c7f0]
            mov QWORD PTR [RBX+104],RAX
            lea RAX,QWORD PTR [RBX+104]
            mov QWORD PTR [RBX+120],RAX
            call .L_404440

            lea RSI,QWORD PTR [RIP+.L_40bb30]
            mov RDX,RBX
            mov RDI,R12
            call .L_402bf0

            and BYTE PTR [RBX+154],252
            mov EDX,1000
            xor EAX,EAX
            mov WORD PTR [RBX+16],DX
            mov RDI,RBX
            mov WORD PTR [RBX+152],AX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+72]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42d6f0

            pop RBX
.L_40ba15:

            lea RDI,QWORD PTR [RBP+32]
            mov RSI,R12
            pop RBP
            pop R12
            jmp .L_402c40
.L_40ba24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ba30:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            sub RSP,32
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            test BYTE PTR [RAX+2624],2
            je .L_40ba65

            and R12D,512
            jne .L_40ba88
.L_40ba65:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40bb2a

            add RSP,32
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ba88:

            movzx ESI,WORD PTR [RBP+16]
            lea R12,QWORD PTR [RAX+1360]
            mov RBX,RAX
            mov RDI,R12
            call .L_40f620

            lea RDI,QWORD PTR [RBX+7520]
            call .L_426d00

            test AL,AL
            je .L_40bb10

            xor EAX,EAX
            test BYTE PTR [RBP+154],1
            mov BYTE PTR [RSP+18],0
            pxor XMM0,XMM0
            mov WORD PTR [RSP+16],AX
            movaps XMMWORD PTR [RSP],XMM0
            je .L_40bb20

            movzx EAX,WORD PTR [RBP+152]
.L_40bad2:

            lea RSI,QWORD PTR [RIP+.L_40be90]
            mov RDX,RBP
            mov RDI,RBP
            mov WORD PTR [RSP+16],AX
            call .L_4108e0

            mov RSI,RSP
            mov RDI,RBP
            call .L_410940

            movzx ESI,WORD PTR [RSP+16]
            mov RDI,R12
            call .L_40f5d0

            jmp .L_40ba65
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bb10:

            mov RDI,RBP
            call .L_4109a0

            jmp .L_40ba65
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40bb20:

            mov RDI,RBP
            call .L_40b920

            jmp .L_40bad2
.L_40bb2a:

            call __stack_chk_fail@PLT
.L_40bb2f:

            nop
.L_40bb30:

            push RBX
            mov EBX,ESI
            call .L_402840

            mov RDI,RAX
            call .L_402a90

            mov ESI,EBX
            mov RDI,RAX
            pop RBX
            jmp .L_40ba30
.L_40bb4b:

            nop
            nop
            nop
            nop
            nop
.L_40bb50:

            push RBX
            mov RBX,RSI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+7520]
            mov ESI,9
            call .L_426c80

            test RAX,RAX
            je .L_40bb80

            movzx EAX,WORD PTR [RAX+2]
            rol AX,8
            mov WORD PTR [RBX],AX
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_40bb80:

            mov EAX,23
            pop RBX
            ret 
.L_40bb87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bb90:

            test BYTE PTR [RDI+154],1
            je .L_40bba8

            movzx EAX,WORD PTR [RDI+152]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bba8:

            jmp .L_40b920
.L_40bbad:

            nop
            nop
            nop
.L_40bbb0:

            sub RSP,8
            or BYTE PTR [RDI+154],1
            mov WORD PTR [RDI+152],SI
            mov ESI,512
            call .L_40ba30

            xor EAX,EAX
            add RSP,8
            ret 
.L_40bbd3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bbe0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RDI
            sub RSP,280
.L_40bbfa:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov RDI,RBX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+10],R8W
            mov WORD PTR [RSP+22],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            mov WORD PTR [RSP+14],R10W
            mov WORD PTR [RSP+18],R11W
            call .L_40bb50

            test EAX,EAX
            je .L_40bc90
.L_40bc5d:

            mov RAX,QWORD PTR [RSP+264]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40be88

            add RSP,280
.L_40bc7b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bc90:

            lea RBX,QWORD PTR [RSP+80]
            mov EDX,2
            mov ESI,16
            lea R14,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4588d2]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R14
            call .L_42d7b0

            test RAX,RAX
            mov R15,RAX
            je .L_40bc5d

            movzx EAX,WORD PTR [R12+34]
            mov EDI,530
            lea RSI,QWORD PTR [RSP+10]
            mov WORD PTR [RSP+10],DI
            mov EDX,4
            mov RDI,R15
            rol AX,8
            mov WORD PTR [RSP+12],AX
            call .L_403d30

            test EAX,EAX
            je .L_40bd30
.L_40bd1a:

            mov RDI,R15
            call .L_4033b0

            jmp .L_40bc5d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40bd30:

            mov ESI,2067
            mov RAX,QWORD PTR [R12+24]
            mov EDX,10
            mov WORD PTR [RSP+22],SI
            lea RSI,QWORD PTR [RSP+22]
            mov RDI,R15
            mov QWORD PTR [RSP+24],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_40bd1a

            add RBP,2568
            mov ECX,532
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            call .L_415a90

            lea RSI,QWORD PTR [RSP+14]
            rol AX,8
            mov EDX,4
            mov RDI,R15
            mov WORD PTR [RSP+16],AX
            call .L_403d30

            test EAX,EAX
            jne .L_40bd1a

            movzx EAX,WORD PTR [R13+58]
            mov EDX,4294967057
            lea RSI,QWORD PTR [RSP+18]
            sub AX,WORD PTR [R13+60]
            mov WORD PTR [RSP+18],DX
            mov RDI,R15
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+20],AX
            call .L_403d30

            test EAX,EAX
            jne .L_40bd1a

            movzx ESI,WORD PTR [R13+60]
            movzx EBX,WORD PTR [R13+58]
            cmp BX,SI
            jbe .L_40be2c

            lea R12,QWORD PTR [RSP+240]
.L_40bde0:

            sub EBX,ESI
            mov EAX,16
            mov RCX,R12
            cmp BX,16
            mov RDI,R13
            cmova EBX,EAX
            movzx EBX,BX
            mov EDX,EBX
            call .L_403860

            mov ESI,EBX
            mov RDI,R13
            call .L_4034e0

            mov EDX,EBX
            mov RSI,R12
            mov RDI,R15
            call .L_403d30

            test EAX,EAX
            jne .L_40bd1a

            movzx ESI,WORD PTR [R13+60]
            movzx EBX,WORD PTR [R13+58]
            cmp BX,SI
            ja .L_40bde0
.L_40be2c:

            mov RDI,RBP
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_415f60

            lea RDX,QWORD PTR [RSP+32]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R15
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RAX]
            movzx EAX,WORD PTR [RSP+8]
            movaps XMMWORD PTR [RSP+48],XMM0
            rol AX,8
            mov WORD PTR [RSP+62],AX
            mov EAX,4294963391
            mov WORD PTR [RSP+66],AX
            call .L_42e6e0

            test EAX,EAX
            jne .L_40bd1a

            jmp .L_40bc5d
.L_40be88:

            call __stack_chk_fail@PLT
.L_40be8d:

            nop
            nop
            nop
.L_40be90:

            jmp .L_40bbe0
.L_40be95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40bea0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            xor EBX,EBX
            mov R12,RDI
            xor R15D,R15D
            sub RSP,488
.L_40bebf:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+472],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov RBP,RAX
            mov WORD PTR [RSP+48],BX
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+320]
            mov WORD PTR [RSP+38],AX
            xor EAX,EAX
            mov EDX,2
            xor ESI,ESI
            mov WORD PTR [RSP+80],AX
            mov RDI,RBX
            xor EAX,EAX
            mov WORD PTR [RSP+28],R15W
            mov QWORD PTR [RSP+224],0
            movaps XMMWORD PTR [RSP+112],XMM0
            mov WORD PTR [RSP+22],AX
            mov R15D,3
            movaps XMMWORD PTR [RSP+128],XMM0
            movaps XMMWORD PTR [RSP+144],XMM0
            movaps XMMWORD PTR [RSP+160],XMM0
            movaps XMMWORD PTR [RSP+176],XMM0
            movaps XMMWORD PTR [RSP+192],XMM0
            movaps XMMWORD PTR [RSP+208],XMM0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_4588d7]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            lea RDI,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            call .L_42d7b0

            test RAX,RAX
            je .L_40bfdb

            mov RBX,RAX
            movzx EAX,BYTE PTR [RAX+78]
            lea RDI,QWORD PTR [RBP+1368]
            mov R11D,4101
            mov WORD PTR [RSP+48],R11W
            and EAX,4294967235
            or EAX,16
            mov BYTE PTR [RBX+78],AL
            call .L_4129e0

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EDX,18
            mov RDI,RBX
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            je .L_40c010
.L_40bfd3:

            mov RDI,RBX
            call .L_4033b0
.L_40bfdb:

            mov RCX,QWORD PTR [RSP+472]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_40c32f

            add RSP,488
.L_40bffc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c010:

            lea RDI,QWORD PTR [RBP+2568]
            mov R10D,2055
            mov WORD PTR [RSP+28],R10W
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,10
            mov RDI,RBX
            mov QWORD PTR [RSP+30],RAX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            mov RAX,QWORD PTR [RBP+1686]
            lea RSI,QWORD PTR [RSP+38]
            mov R9D,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+38],R9W
            mov QWORD PTR [RSP+40],RAX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            lea R9,QWORD PTR [RBP+1669]
            mov R8D,4099
            mov ESI,16
            mov WORD PTR [RSP+80],R8W
            mov RDI,R9
            mov QWORD PTR [RSP+8],R9
            call strnlen@PLT

            mov R9,QWORD PTR [RSP+8]
            lea R8,QWORD PTR [RSP+80]
            lea RDI,QWORD PTR [RSP+82]
            mov ECX,16
            mov RDX,RAX
            mov R15,RAX
            mov QWORD PTR [RSP],R8
            mov RSI,R9
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP]
            mov BYTE PTR [RSP+81],R15B
            movzx R15D,R15B
            lea EDX,DWORD PTR [R15+2]
            mov RDI,RBX
            mov RSI,R8
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            lea RAX,QWORD PTR [RBP+1080]
            mov ESI,14
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_4095c0

            test RAX,RAX
            je .L_40c2c0

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40c11b:

            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            mov RDI,QWORD PTR [RSP]
            mov ESI,53
            call .L_4095c0

            test RAX,RAX
            je .L_40c2fa

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40c14f:

            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            mov RDI,QWORD PTR [RSP]
            mov ESI,4
            call .L_4095c0

            test RAX,RAX
            je .L_40c313

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40c183:

            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            mov RDI,QWORD PTR [RSP]
            mov ESI,12
            call .L_4095c0

            test RAX,RAX
            je .L_40c334

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            add EDX,2
.L_40c1b7:

            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            mov EAX,DWORD PTR [RBP+1384]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,6
            mov RDI,RBX
            mov WORD PTR [RSP+22],1030
            bswap EAX
            mov DWORD PTR [RSP+24],EAX
            call .L_403d30

            test EAX,EAX
            mov R15D,EAX
            jne .L_40bfd3

            lea RDI,QWORD PTR [RSP+112]
            mov ECX,12
            mov RSI,R13

            rep movsd 

            mov WORD PTR [RSP+146],61631
            call .L_401240

            lea RDI,QWORD PTR [RSP+240]
            lea RSI,QWORD PTR [RSP+112]
            mov ECX,12
            movdqu XMM0,XMMWORD PTR [R14+2]
            add EAX,50
            mov DWORD PTR [RSP+288],EAX
            mov EDX,72

            rep movsd 

            movups XMMWORD PTR [RSP+292],XMM0
            lea RDI,QWORD PTR [RSP+160]
            lea RSI,QWORD PTR [RSP+240]
            mov ECX,17

            rep movsd 

            lea RSI,QWORD PTR [RSP+160]
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_40bfdb

            lea RDI,QWORD PTR [R12+128]
            mov RSI,RBX
            mov EDX,1
            lea RBX,QWORD PTR [R12+104]
            call .L_404580

            cmp RBX,QWORD PTR [R12+120]
            jne .L_40bfdb

            call .L_401240

            mov EDX,50
            mov ESI,EAX
            mov RDI,RBX
            call .L_430d50

            jmp .L_40bfdb
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c2c0:

            lea RSI,QWORD PTR [RSP+240]
            mov EDX,2062
            xor ECX,ECX
            xor EDI,EDI
            mov WORD PTR [RSP+240],DX
            mov DWORD PTR [RSP+242],0
            mov EDX,10
            mov WORD PTR [RSI+6],CX
            mov WORD PTR [RSP+248],DI
            jmp .L_40c11b
.L_40c2fa:

            mov EAX,53
            lea RSI,QWORD PTR [RSP+17]
            mov EDX,2
            mov WORD PTR [RSP+17],AX
            jmp .L_40c14f
.L_40c313:

            mov WORD PTR [RSP+240],4100
            lea RSI,QWORD PTR [RSP+240]
            mov EDX,18
            jmp .L_40c183
.L_40c32f:

            call __stack_chk_fail@PLT
.L_40c334:

            mov WORD PTR [RSP+17],780
            lea RSI,QWORD PTR [RSP+17]
            mov EDX,5
            jmp .L_40c1b7
.L_40c34a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40c350:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,152
.L_40c36a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+22],CX
            mov WORD PTR [RSP+32],R8W
            mov WORD PTR [RSP+18],AX
            movzx EAX,BYTE PTR [RSI]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            and EAX,48
            cmp AL,16
            movaps XMMWORD PTR [RSP+96],XMM0
            je .L_40c3d8
.L_40c3a8:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40c4d5

            add RSP,152
.L_40c3c6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c3d8:

            cmp BYTE PTR [RSI+1],2
            jne .L_40c3a8

            mov RBX,RDX
            lea RCX,QWORD PTR [RSP+18]
            mov RBP,RDI
            mov EDX,4
            mov ESI,18
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40c3a8

            cmp BYTE PTR [RSP+19],2
            jne .L_40c3a8

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,10
            mov ESI,19
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40c3a8

            cmp BYTE PTR [RSP+23],8
            jne .L_40c3a8

            lea RCX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RSP+14]
            mov ESI,17
            mov RDI,RBX
            call .L_431010

            test EAX,EAX
            jne .L_40c3a8

            xor ESI,ESI
            mov RDI,RBP
            call .L_4108c0

            test RAX,RAX
            mov R12,RAX
            je .L_40c3a8

            xor ESI,ESI
            mov RDI,RAX
            lea R14,QWORD PTR [RSP+112]
            call .L_403590

            and BYTE PTR [R12+78],127
.L_40c472:

            movzx R13D,WORD PTR [RSP+16]
            movzx ESI,WORD PTR [RSP+14]
            test R13W,R13W
            je .L_40c4da

            cmp R13W,16
            mov EAX,16
            mov RCX,R14
            cmova R13D,EAX
            mov RDI,RBX
            movzx R15D,R13W
            mov EDX,R15D
            call .L_403860

            mov EDX,R15D
            mov RSI,R14
            mov RDI,R12
            call .L_403d30

            test EAX,EAX
            jne .L_40c4c8

            add WORD PTR [RSP+14],R13W
            sub WORD PTR [RSP+16],R13W
            jmp .L_40c472
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c4c8:

            mov RDI,R12
            call .L_4033b0

            jmp .L_40c3a8
.L_40c4d5:

            call __stack_chk_fail@PLT
.L_40c4da:

            xor ECX,ECX
            xor EDX,EDX
            mov R8,R12
            mov RDI,RBX
            lea R13,QWORD PTR [RSP+64]
            call .L_403f50

            mov RAX,QWORD PTR [RSP+24]
            mov RDI,RBP
            mov WORD PTR [RSP+80],33022
            mov QWORD PTR [RSP+88],RAX
            movzx EAX,WORD PTR [RSP+20]
            rol AX,8
            mov WORD PTR [RSP+98],AX
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+24]
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            mov BYTE PTR [RSP+100],AL
            call .L_410a20

            test EAX,EAX
            jne .L_40c4c8

            lea R12,QWORD PTR [RSP+32]
            mov EDX,18
            mov ESI,21
            mov RDI,RBX
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            jne .L_40c3a8

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBP
            call .L_40bea0

            jmp .L_40c3a8
.L_40c564:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c570:

            jmp .L_40c350
.L_40c575:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c580:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,8
.L_40c593:

            call .L_430af0

            lea RBX,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RIP+.L_40c890]
            mov RDX,RBP
            mov RDI,RBX
            call .L_42da70

            lea RCX,QWORD PTR [RIP+.L_40c890]
            mov RDI,RBX
            mov R8,RBP
            mov RDX,R13
            mov RSI,R12
            call .L_42e6e0

            test EAX,EAX
            mov EBX,EAX
            jne .L_40c605

            mov EDI,10
            call .L_430740

            xor EDI,EDI
            mov R12,RAX
            call .L_4306d0

            lea RDX,QWORD PTR [RIP+.L_4588e0]
            mov RCX,RAX
            mov R8,R12
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            call .L_4012c0

            or BYTE PTR [RBP+154],2
.L_40c605:

            add RSP,8
.L_40c609:

            mov EAX,EBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_40c612:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c620:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+128]
            sub RSP,152
.L_40c63b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov RDI,R12
            mov R15,RAX
            mov QWORD PTR [RSP+128],0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            movaps XMMWORD PTR [RSP],XMM0
            call .L_404570

            mov RBP,RAX
            call .L_401240

            movdqa XMM0,XMMWORD PTR [RSP]
            test RBP,RBP
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_40c6b1

            lea R13,QWORD PTR [RBX+104]
            cmp R13,QWORD PTR [RBX+120]
            je .L_40c6e0
.L_40c6b1:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40c7db

            add RSP,152
.L_40c6cf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c6e0:

            mov DWORD PTR [RSP],EAX
            movzx EAX,WORD PTR [RBP+58]
            lea R14,QWORD PTR [RSP+64]
            mov EDX,72
            mov RDI,RBP
            mov RCX,R14
            lea ESI,DWORD PTR [RAX-72]
            movzx ESI,SI
            call .L_403860

            test BYTE PTR [RBX+154],2
            mov R8D,DWORD PTR [RSP]
            je .L_40c72a

            mov RAX,QWORD PTR [R15+1528]
            mov RDX,QWORD PTR [R15+1536]
            xor RAX,QWORD PTR [R14+52]
            xor RDX,QWORD PTR [R14+60]
            or RDX,RAX
            jne .L_40c6b1
.L_40c72a:

            mov EDX,DWORD PTR [RSP+112]
            cmp R8D,EDX
            js .L_40c7c0

            mov RSI,RBP
            mov RDI,R12
            call .L_404640

            movzx EAX,WORD PTR [RBP+58]
            mov RDI,RBP
            lea ESI,DWORD PTR [RAX-72]
            movzx ESI,SI
            call .L_403420

            lea RSI,QWORD PTR [R14+52]
            lea RDI,QWORD PTR [R15+1368]
            call .L_412cc0

            movdqa XMM0,XMMWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+80]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+96]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40c580

            test EAX,EAX
            je .L_40c6b1

            mov RDI,RBP
            call .L_4033b0

            call .L_401240

            xor EDX,EDX
            mov ESI,EAX
            mov RDI,R13
            call .L_430d50

            jmp .L_40c6b1
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40c7c0:

            sub EDX,R8D
            mov EBX,EDX
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R13
            call .L_430d50

            jmp .L_40c6b1
.L_40c7db:

            call __stack_chk_fail@PLT
.L_40c7e0:

            jmp .L_40c620
.L_40c7e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c7f0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a90

            add RSP,8
            mov RDI,RAX
            jmp .L_40c620
.L_40c80d:

            nop
            nop
            nop
.L_40c810:

            push R12
            push RBP
            mov R12D,R8D
            push RBX
            and BYTE PTR [RDI+154],253
            mov RBX,RSI
            mov RBP,RDX
            call .L_40c620

            test RBX,RBX
            sete CL
            test RBP,RBP
            sete AL
            or CL,AL
            jne .L_40c844

            test R12D,R12D
            jne .L_40c844

            cmp BYTE PTR [RBX+1],68
            je .L_40c850
.L_40c844:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40c850:

            mov EDI,10
            call .L_430740

            xor EDI,EDI
            mov RBX,RAX
            call .L_4306d0

            mov R8,RBX
            lea RDX,QWORD PTR [RIP+.L_458918]
            mov RCX,RAX
            pop RBX
            pop RBP
            pop R12
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            jmp .L_4012c0
.L_40c883:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c890:

            jmp .L_40c810
.L_40c895:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c8a0:

            lea RAX,QWORD PTR [RIP+.L_45894a]
            push RBX

            mov RBX,RDI
            mov EDX,4294967295
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_40cf30]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_45894f]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_40d050]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_40d090]
            mov QWORD PTR [RBX+48],RDI
            mov WORD PTR [RDI+158],DX
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RDI+64]
            mov DWORD PTR [RDI+72],0
            mov DWORD PTR [RDI+88],30000
            mov QWORD PTR [RDI+80],RAX
            xor EAX,EAX
            mov WORD PTR [RDI+92],AX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_40c947:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40c950:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            mov R12,RDI
            mov R13D,ECX
            sub RSP,200
.L_40c96d:

            lea RBP,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_430af0

            xor ESI,ESI
            xor ECX,ECX
            mov RBX,RAX
            mov RDI,RBP
            mov WORD PTR [RSP+28],SI
            mov RSI,R15
            mov WORD PTR [RSP+25],CX
            add RBX,216
            call .L_42fa70

            mov RDI,RBP
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42d7b0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40ca04

            mov EDX,272
            lea RSI,QWORD PTR [RSP+25]
            mov RDI,RBP
            mov WORD PTR [RSP+25],DX
            mov EDX,3
            mov BYTE PTR [RSP+27],R13B
            call .L_403d30

            test EAX,EAX
            je .L_40ca30
.L_40c9f4:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_40ca04:

            mov RCX,QWORD PTR [RSP+184]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40cab7

            add RSP,200
.L_40ca22:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40ca30:

            lea RAX,QWORD PTR [R12+64]
            cmp QWORD PTR [R12+80],RAX
            je .L_40ca56

            movzx EAX,BYTE PTR [R12+93]
            lea RSI,QWORD PTR [R12+92]
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            test EAX,EAX
            jne .L_40c9f4
.L_40ca56:

            cmp R13D,1
            je .L_40ca80
.L_40ca5c:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBX
            call .L_42e6e0

            test EAX,EAX
            je .L_40ca04

            jmp .L_40c9f4
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ca80:

            mov EAX,523
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov WORD PTR [RSP+28],AX
            movzx EAX,WORD PTR [R12+158]
            mov RDI,RBP
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            je .L_40ca5c

            jmp .L_40c9f4
.L_40cab7:

            call __stack_chk_fail@PLT
.L_40cabc:

            nop
            nop
            nop
            nop
.L_40cac0:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R13D,ECX
            push RBX
            mov R12,RDX
            sub RSP,192
.L_40cad8:

            lea RBP,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R14
            mov RDI,RBP
            mov WORD PTR [RSP+29],DX
            add RBX,216
            call .L_42fa70

            mov RDI,RBP
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42d7b0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40cb68

            lea RSI,QWORD PTR [RSP+29]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+29],AX
            mov BYTE PTR [RSP+31],R13B
            call .L_403d30

            test EAX,EAX
            je .L_40cb90
.L_40cb58:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_40cb68:

            mov RCX,QWORD PTR [RSP+184]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40cba9

            add RSP,192
.L_40cb82:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40cb90:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_42e6e0

            test EAX,EAX
            je .L_40cb68

            jmp .L_40cb58
.L_40cba9:

            call __stack_chk_fail@PLT
.L_40cbae:

            nop
            nop
.L_40cbb0:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            push RBX
            sub RSP,224
.L_40cbc2:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov RBP,RAX
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42f0e0

            mov RDI,RBX
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_458954]
            mov RDI,RBX
            call .L_42f620

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_40cc96

            lea RDI,QWORD PTR [RBP+2568]
            lea R13,QWORD PTR [RSP+16]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RSI,RBX
            mov RDI,R12
            mov WORD PTR [RSP+50],AX
            movdqu XMM0,XMMWORD PTR [R14]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_42e6e0

            test EAX,EAX
            je .L_40cc96

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_40cc96:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40ccb9

            add RSP,224
.L_40ccb0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_40ccb9:

            call __stack_chk_fail@PLT
.L_40ccbe:

            nop
            nop
.L_40ccc0:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp EDX,299998
            ja .L_40ccd5

            mov DWORD PTR [RDI+88],ESI
            xor EAX,EAX
.L_40ccd5:

            ret 
.L_40ccd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40cce0:

            mov EAX,DWORD PTR [RDI+88]
            ret 
.L_40cce4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ccf0:

            sub RSP,24
.L_40ccf4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,523
            mov WORD PTR [RSP+4],AX
            movzx EAX,WORD PTR [RDI+158]
            add EAX,1
            mov WORD PTR [RDI+158],AX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_430af0

            movzx ECX,BYTE PTR [RSP+5]
            lea RSI,QWORD PTR [RSP+4]
            lea RDI,QWORD PTR [RAX+7520]
            lea EDX,DWORD PTR [RCX+2]
            movzx EDX,DL
            call .L_426dd0

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40cd5e

            add RSP,24
.L_40cd5d:

            ret 
.L_40cd5e:

            call __stack_chk_fail@PLT
.L_40cd63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40cd70:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            xor ESI,ESI
            push RBX
            mov R12,RCX
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            mov RBX,RDI
            sub RSP,112
.L_40cd8f:

            mov RDI,RDX
            mov EDX,66
            lea RBP,QWORD PTR [RSP+32]
            mov WORD PTR [RSP],CX
            mov WORD PTR [RSP+4],SI
            mov ESI,10
            mov WORD PTR [RSP+8],R8W
            mov WORD PTR [RSP+32],R9W
            mov RCX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_430f70

            test EAX,EAX
            jne .L_40ce00

            cmp BYTE PTR [RSP+33],64
            ja .L_40ce00

            lea R14,QWORD PTR [RBX+64]
            cmp R14,QWORD PTR [RBX+80]
            je .L_40ce48

            lea RSI,QWORD PTR [RBX+94]
            lea RDI,QWORD PTR [RBP+2]
            mov EDX,66
            call strncmp@PLT

            test EAX,EAX
            je .L_40ce38

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ce00:

            mov ECX,4294967295
.L_40ce05:

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_40c950

            mov RAX,QWORD PTR [RSP+104]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40cf1f

            add RSP,112
.L_40ce2b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ce38:

            mov RDI,R14
            call .L_430c70

            mov RDI,RBX
            call .L_40ccf0
.L_40ce48:

            mov EAX,521
            pxor XMM0,XMM0
            mov WORD PTR [RSP],AX
            movzx EAX,WORD PTR [R12+30]
            mov EDX,523
            mov RDI,RBX
            mov WORD PTR [RSP+4],DX
            mov BYTE PTR [RSP+8],8
            movups XMMWORD PTR [RSP+10],XMM0
            mov BYTE PTR [RSP+9],1
            mov RBP,RSP
            mov WORD PTR [RSP+2],AX
            movzx EAX,WORD PTR [RBX+158]
            add EAX,1
            mov WORD PTR [RBX+158],AX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_430af0

            movzx EDX,BYTE PTR [RSP+5]
            movzx ECX,BYTE PTR [RSP+9]
            lea RDI,QWORD PTR [RAX+7520]
            add DL,BYTE PTR [RSP+1]
            mov RSI,RBP
            lea EDX,DWORD PTR [RDX+RCX*1+6]
            movzx EDX,DL
            call .L_426dd0

            test EAX,EAX
            jne .L_40ce00

            movdqa XMM0,XMMWORD PTR [RSP+32]
            movzx EAX,WORD PTR [RSP+96]
            movups XMMWORD PTR [RBX+92],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+48]
            mov WORD PTR [RBX+156],AX
            movups XMMWORD PTR [RBX+108],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+64]
            movups XMMWORD PTR [RBX+124],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+80]
            movups XMMWORD PTR [RBX+140],XMM0
            call .L_401240

            mov EDX,50000
            mov ESI,EAX
            mov RDI,R14
            call .L_430d50

            mov ECX,1
            jmp .L_40ce05
.L_40cf1f:

            call __stack_chk_fail@PLT
.L_40cf24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40cf30:

            jmp .L_40cd70
.L_40cf35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40cf40:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RDX
            xor EDX,EDX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,40
.L_40cf58:

            mov ESI,16
            mov RDI,RBX
            lea RCX,QWORD PTR [RSP+17]
            mov WORD PTR [RSP+20],DX
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+17],AX
            call .L_430f70

            test EAX,EAX
            jne .L_40cf96

            cmp BYTE PTR [RSP+18],1
            je .L_40cfb8
.L_40cf96:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40d045

            add RSP,40
.L_40cfae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40cfb8:

            lea RCX,QWORD PTR [RSP+20]
            mov EDX,4
            mov ESI,11
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_40cf96

            cmp BYTE PTR [RSP+21],2
            jne .L_40cf96

            movzx EAX,WORD PTR [RSP+22]
            mov ECX,4294967295
            rol AX,8
            cmp WORD PTR [RBP+158],AX
            je .L_40d001
.L_40cff1:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_40cac0

            jmp .L_40cf96
.L_40d001:

            cmp BYTE PTR [RSP+19],1
            mov DWORD PTR [RSP+8],ECX
            lea RDI,QWORD PTR [RBP+64]
            je .L_40d023

            call .L_430c70

            mov RDI,RBP
            call .L_40ccf0

            mov ECX,DWORD PTR [RSP+8]
            jmp .L_40cff1
.L_40d023:

            mov QWORD PTR [RSP+8],RDI
            call .L_401240

            mov RDI,QWORD PTR [RSP+8]
            mov EDX,50000
            mov ESI,EAX
            call .L_430d50

            mov ECX,1
            jmp .L_40cff1
.L_40d045:

            call __stack_chk_fail@PLT
.L_40d04a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40d050:

            jmp .L_40cf40
.L_40d055:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d060:

            push RBX
            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RAX+2580],4
            je .L_40d078

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d078:

            lea RDI,QWORD PTR [RBX+64]
            call .L_430c70

            mov RDI,RBX
            pop RBX
            jmp .L_40ccf0
.L_40d08a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40d090:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a80

            add RSP,8
            mov RDI,RAX
            jmp .L_40d060
.L_40d0aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40d0b0:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+64]
            call .L_430c70

            mov RDI,RBX
            pop RBX
            jmp .L_40ccf0
.L_40d0c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d0d0:

            lea R8,QWORD PTR [RDI+6]
            mov RAX,RDI
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d0e0:

            movzx ECX,BYTE PTR [RAX]
            shl RDX,8
            add RAX,1
            or RDX,RCX
            cmp RAX,R8
            jne .L_40d0e0

            lea R9,QWORD PTR [RSI+6]
            mov RAX,RSI
            xor ECX,ECX
            nop
            nop
            nop
            nop
.L_40d100:

            movzx R8D,BYTE PTR [RAX]
            shl RCX,8
            add RAX,1
            or RCX,R8
            cmp RAX,R9
            jne .L_40d100

            cmp RCX,RDX
            movzx EDI,WORD PTR [RDI+6]
            movzx ESI,WORD PTR [RSI+6]
            mov EAX,1
            ja .L_40d14b

            jb .L_40d146

            rol DI,8
            rol SI,8
            mov EDX,EDI
            mov ECX,ESI
            shr DX,1
            shr CX,1
            cmp CX,DX
            sbb ESI,ESI
            cmp CX,DX
            cmovbe EAX,ESI
            ret 
.L_40d146:

            mov EAX,4294967295
.L_40d14b:

            ret 
.L_40d14d:

            nop
            nop
            nop
.L_40d150:

            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+32]
            mov RBP,RSI
            sub RSP,8
.L_40d160:

            mov BYTE PTR [RDI-32],0
            mov BYTE PTR [RDI-31],0
            mov QWORD PTR [RDI-24],0
            mov QWORD PTR [RDI-16],0
            mov QWORD PTR [RDI-8],0
            call .L_4047a0

            lea RDX,QWORD PTR [RIP+.L_40ebd0]
            lea RDI,QWORD PTR [RBX+64]
            mov RCX,RBX
            mov RSI,RBP
            call .L_404b20

            lea RDI,QWORD PTR [RBX+80]
            mov RSI,RBP
            call .L_40ff30

            lea RDI,QWORD PTR [RBX+88]
            mov RSI,RBP
            call .L_43aa70

            lea RDI,QWORD PTR [RBX+104]
            mov RSI,RBP
            call .L_410b90

            add RSP,8
.L_40d1c3:

            lea RDI,QWORD PTR [RBX+120]
            mov RSI,RBP
            pop RBX
            pop RBP
            jmp .L_40f730
.L_40d1d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d1e0:

            push RBX
            mov EBX,ESI
            call .L_430ac0

            lea EDX,DWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RAX+24624]
            xor ESI,ESI
            pop RBX
            movzx EDX,DX
            jmp .L_403740
.L_40d1fd:

            nop
            nop
            nop
.L_40d200:

            movzx EDI,DI
            mov EDX,16
            jmp .L_404220
.L_40d20d:

            nop
            nop
            nop
.L_40d210:

            push R12
            push RBP
            mov R12D,ECX
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            xor EDI,EDI
            movzx ESI,DX
            call .L_404200

            movzx ESI,R12W
            movzx EDI,AX
            call .L_404200

            mov RSI,RBP
            movzx EDI,AX
            mov EDX,16
            call .L_404220

            mov RSI,RBX
            movzx EDI,AX
            mov EDX,16
            pop RBX
            pop RBP
            pop R12
            jmp .L_404220
.L_40d257:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d260:

            mov QWORD PTR [RDI+8],RSI
            mov QWORD PTR [RDI+16],RDX
            ret 
.L_40d269:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d270:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            xor ESI,ESI
            xor ECX,ECX
            add RDI,120
            mov RBX,RDX
            add RDX,8
            sub RSP,32
.L_40d28a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDX-2]
            lea RBP,QWORD PTR [RSP+11]
            mov WORD PTR [RSP+17],SI
            mov WORD PTR [RSP+11],CX
            mov BYTE PTR [RSP+10],0
            mov RSI,RBP
            mov BYTE PTR [RSP+9],AL
            call .L_40f7c0

            movzx EAX,BYTE PTR [RSP+12]
            lea EDX,DWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RDX+2]
            test AL,7
            je .L_40d2f6

            lea RSI,QWORD PTR [RSP+17]
            mov EAX,1
            mov EDX,2
            mov RDI,R12
            mov WORD PTR [RSP+17],AX
            call .L_403da0

            test EAX,EAX
            jne .L_40d308

            movzx EAX,BYTE PTR [RSP+12]
            lea EDX,DWORD PTR [RAX+2]
.L_40d2f6:

            movzx EDX,DL
            mov RSI,RBP
            mov RDI,R12
            call .L_403da0

            test EAX,EAX
            je .L_40d328
.L_40d308:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40d357

            add RSP,32
.L_40d31c:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d328:

            lea RSI,QWORD PTR [RSP+9]
            mov EDX,2
            mov RDI,R12
            call .L_403da0

            test EAX,EAX
            jne .L_40d308

            movzx EDX,WORD PTR [RBX+4]
            mov BYTE PTR [RBX+6],0
            rol DX,8
            add EDX,8
            rol DX,8
            mov WORD PTR [RBX+4],DX
            jmp .L_40d308
.L_40d357:

            call __stack_chk_fail@PLT
.L_40d35c:

            nop
            nop
            nop
            nop
.L_40d360:

            push R15
            push R14
            mov EDX,40
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            mov RDI,RBX
            xor ESI,ESI
            sub RSP,120
            lea R13,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov RCX,R13
            call .L_403860

            cmp BYTE PTR [RSP+54],0
            je .L_40d3c8
.L_40d39f:

            xor EAX,EAX
.L_40d3a1:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40d639

            add RSP,120
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d3c8:

            lea RAX,QWORD PTR [RSP+37]
            mov EDX,2
            mov ESI,40
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+38]
            lea EAX,DWORD PTR [RAX*8+8]
            lea R12D,DWORD PTR [RAX+40]
            cmp R12W,WORD PTR [RBX+58]
            mov WORD PTR [RSP+22],AX
            ja .L_40d598

            lea RAX,QWORD PTR [RSP+39]
            mov R14D,42
            xor EDX,EDX
            movzx EDI,R12W
            mov QWORD PTR [RSP+8],R13
            xor R15D,R15D
            mov R13D,R14D
            mov BYTE PTR [RSP+7],0
            mov WORD PTR [RSP+20],DX
            mov DWORD PTR [RSP+16],EDI
            mov R14,RAX
            jmp .L_40d488
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d440:

            jb .L_40d588

            cmp AL,109
            jne .L_40d570

            movzx EAX,BYTE PTR [RSP+40]
            cmp R13W,42
            mov BYTE PTR [RSP+7],AL
            je .L_40d5a8
.L_40d462:

            add EBP,8
            cmp EBP,DWORD PTR [RSP+16]
            mov EAX,1
            cmove R15D,EAX
.L_40d472:

            movzx EAX,BYTE PTR [RSP+7]
            mov WORD PTR [RSP+20],R13W
            lea R13D,DWORD PTR [R13+RAX*1+2]
.L_40d482:

            cmp R13W,R12W
            jae .L_40d4be
.L_40d488:

            movzx EBP,R13W
            xor EAX,EAX
            mov RCX,R14
            mov EDX,2
            mov ESI,EBP
            mov RDI,RBX
            mov WORD PTR [RSP+39],AX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+39]
            cmp AL,1
            jne .L_40d440

            movzx EAX,BYTE PTR [RSP+40]
            lea R13D,DWORD PTR [R13+RAX*1+2]
            cmp R13W,R12W
            jb .L_40d488
.L_40d4be:

            mov R13,QWORD PTR [RSP+8]
            jne .L_40d598

            test R15B,R15B
            je .L_40d5c0

            movzx R14D,WORD PTR [RSP+22]
            lea RBP,QWORD PTR [RSP+96]
            xor R12D,R12D
            add R14D,32
            nop
            nop
            nop
            nop
.L_40d4e8:

            lea R15D,DWORD PTR [R14-8]
            mov RCX,RBP
            mov EDX,8
            mov RDI,RBX
            movzx ESI,R15W
            call .L_403860

            movzx ESI,R14W
            mov RCX,RBP
            mov EDX,8
            mov RDI,RBX
            mov R14D,R15D
            call .L_403ac0

            cmp R15W,R12W
            jne .L_40d4e8

            mov ESI,8
            mov RDI,RBX
            call .L_403810

            cmp WORD PTR [RSP+20],42
            jne .L_40d618

            movzx EAX,BYTE PTR [RSP+37]
            mov BYTE PTR [RSP+54],AL
.L_40d53f:

            movzx EAX,WORD PTR [RSP+52]
            mov RCX,R13
            mov EDX,40
            xor ESI,ESI
            mov RDI,RBX
            rol AX,8
            sub EAX,8
            rol AX,8
            mov WORD PTR [RSP+52],AX
            call .L_403ac0

            xor EAX,EAX
            jmp .L_40d3a1
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40d570:

            movzx EAX,BYTE PTR [RSP+40]
            xor R15D,R15D
            lea R13D,DWORD PTR [R13+RAX*1+2]
            jmp .L_40d482
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d588:

            add R13D,1
            jmp .L_40d482
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d598:

            mov EAX,6
            jmp .L_40d3a1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d5a8:

            cmp BYTE PTR [RSP+38],0
            jne .L_40d462

            mov R15D,1
            jmp .L_40d472
          .byte 0x66
          .byte 0x90
.L_40d5c0:

            cmp WORD PTR [RSP+20],0
            je .L_40d39f

            movzx EAX,BYTE PTR [RSP+7]
            lea R12,QWORD PTR [RSP+41]
            xor ESI,ESI
            mov ECX,5
            mov BYTE PTR [RSP+41],1
            lea RDI,QWORD PTR [R12+2]
            lea EBP,DWORD PTR [RAX+2]
            mov BYTE PTR [RSP+42],AL
            movzx EDX,BPL
            sub RDX,2
            call __memset_chk@PLT

            movzx ESI,WORD PTR [RSP+20]
            movzx EDX,BPL
            mov RCX,R12
            mov RDI,RBX
            call .L_403ac0

            jmp .L_40d39f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d618:

            mov RCX,QWORD PTR [RSP+24]
            mov EDX,2
            mov ESI,40
            mov RDI,RBX
            sub BYTE PTR [RSP+38],1
            call .L_403ac0

            jmp .L_40d53f
.L_40d639:

            call __stack_chk_fail@PLT
.L_40d63e:

            nop
            nop
.L_40d640:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,40
.L_40d650:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+1],0
            je .L_40d6a8

            mov RDI,RDX
            mov R12,RDX
            mov R13D,ECX
            call .L_40ef50

            test AL,AL
            jne .L_40d750

            mov RDI,R12
            call .L_40ef90

            test AL,AL
            jne .L_40d750

            cmp R13B,17
            je .L_40d700

            cmp R13B,58
            jne .L_40d6a8

            cmp BYTE PTR [RBX+98],0
            jne .L_40d780

            nop
            nop
            nop
            nop
            nop
            nop
.L_40d6a8:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            call .L_404020

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_40d6d8

            mov RSI,RBP
            mov RDI,RBX
            call .L_40d360

            mov RSI,QWORD PTR [RBX+16]
            mov RDI,RBP
            call QWORD PTR [RBX+8]

            xor EAX,EAX
.L_40d6d8:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40d7a3

            add RSP,40
.L_40d6f0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d700:

            movzx ESI,WORD PTR [RBP+60]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+10]
            rol AX,8
            cmp AX,19788
            je .L_40d760

            cmp AX,61631
            jne .L_40d6a8

            mov RDI,RBX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+12720]
            mov RSI,R12
            call .L_42b910

            test AL,AL
            je .L_40d6a8

            nop
            nop
.L_40d750:

            mov EAX,4
            jmp .L_40d6d8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d760:

            mov RDI,R12
            call .L_40ee30

            test AL,AL
            jne .L_40d750

            mov RDI,R12
            call .L_40f150

            test AL,AL
            je .L_40d6a8

            jmp .L_40d750
          .byte 0x66
          .byte 0x90
.L_40d780:

            movzx ESI,WORD PTR [RBP+60]
            lea RCX,QWORD PTR [RSP+16]
            mov EDX,8
            mov RDI,RBP
            call .L_403860

            cmp BYTE PTR [RSP+16],128
            jne .L_40d6a8

            jmp .L_40d750
.L_40d7a3:

            call __stack_chk_fail@PLT
.L_40d7a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d7b0:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+32]
            call .L_404a10

            lea RDI,QWORD PTR [RBX+64]
            pop RBX
            jmp .L_404bc0
.L_40d7c7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d7d0:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            mov R14,RDX
            mov RDI,RBX
            mov EDX,2
            sub RSP,24
.L_40d7f2:

            movzx ESI,WORD PTR [RSI+60]
            lea RCX,QWORD PTR [RSP+4]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+6],AX
            call .L_403860

            cmp AX,2
            jne .L_40d8c0

            movzx EBP,BYTE PTR [RSP+5]
            movzx EAX,WORD PTR [RBX+60]
            lea EBP,DWORD PTR [RAX+RBP*8+8]
            cmp BP,WORD PTR [RBX+58]
            ja .L_40d8c0

            lea R12,QWORD PTR [RSP+6]
            mov ESI,2
            mov RDI,RBX
            call .L_4034e0
.L_40d84a:

            movzx ESI,WORD PTR [RBX+60]
            cmp BP,SI
            jbe .L_40d8b6
.L_40d853:

            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            cmp AX,2
            jne .L_40d8c0

            movzx EAX,BYTE PTR [RSP+6]
            test AL,AL
            je .L_40d910

            movzx EDX,BYTE PTR [RSP+7]
            movzx ECX,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RCX+RDX*1+2]
            mov RSI,RDX
            movzx EDX,BP
            cmp RCX,RDX
            ja .L_40d8c0

            cmp AL,109
            je .L_40d8e8

            and EAX,4294967232
            cmp AL,128
            je .L_40d8c0

            cmp AL,192
            je .L_40d8c0

            cmp AL,64
            je .L_40d8c0
.L_40d8a2:

            add ESI,2
            mov RDI,RBX
            call .L_4034e0

            movzx ESI,WORD PTR [RBX+60]
            cmp BP,SI
            ja .L_40d853
.L_40d8b6:

            xor EAX,EAX
            jmp .L_40d8c5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40d8c0:

            mov EAX,2
.L_40d8c5:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_40d922

            add RSP,24
.L_40d8d9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40d8e8:

            movzx ECX,BYTE PTR [R15]
            lea RDX,QWORD PTR [R14+8]
            lea RDI,QWORD PTR [R13+120]
            mov RSI,RBX
            call .L_40fb70

            test EAX,EAX
            jne .L_40d8c5

            movzx ESI,BYTE PTR [RSP+7]
            jmp .L_40d8a2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40d910:

            mov ESI,1
            mov RDI,RBX
            call .L_4034e0

            jmp .L_40d84a
.L_40d922:

            call __stack_chk_fail@PLT
.L_40d927:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40d930:

            push RBX
            mov RBX,RSI
            mov EDX,8
            mov RDI,RBX
            sub RSP,16
.L_40d940:

            movzx ESI,WORD PTR [RSI+60]
            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,8
            mov ECX,2
            jne .L_40d990

            movzx EDX,WORD PTR [RSP+2]
            rol DX,8
            test DX,65528
            jne .L_40d990

            and EDX,1
            jne .L_40d990

            mov ESI,8
            mov RDI,RBX
            call .L_4034e0

            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
.L_40d990:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_40d9a8

            add RSP,16
.L_40d9a6:

            pop RBX
            ret 
.L_40d9a8:

            call __stack_chk_fail@PLT
.L_40d9ad:

            nop
            nop
            nop
.L_40d9b0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RSI
            mov R12D,R9D
            sub RSP,40
.L_40d9cd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+12]
            lea R13,QWORD PTR [RSP+22]
            mov BYTE PTR [RSP+12],R8B
            mov QWORD PTR [RSP],RAX
.L_40d9f0:

            test R12B,R12B
            jne .L_40d9fb

            cmp BYTE PTR [RBP],0
            jne .L_40da78
.L_40d9fb:

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R13
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            cmp AX,2
            jne .L_40da4c

            movzx EAX,BYTE PTR [RBP]
            cmp AL,44
            je .L_40da80

            ja .L_40da70

            test AL,AL
            jne .L_40da48
.L_40da23:

            mov RCX,QWORD PTR [RSP]
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R14
            call .L_40d7d0

            test EAX,EAX
            jne .L_40da51
.L_40da39:

            movzx EAX,BYTE PTR [RSP+22]
            mov BYTE PTR [RBP],AL
            jmp .L_40d9f0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40da48:

            cmp AL,43
            jne .L_40da78
.L_40da4c:

            mov EAX,2
.L_40da51:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_40da91

            add RSP,40
.L_40da65:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40da70:

            cmp AL,59
            je .L_40da4c

            cmp AL,60
            je .L_40da23
.L_40da78:

            xor EAX,EAX
            jmp .L_40da51
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40da80:

            mov RSI,RBX
            mov RDI,R14
            call .L_40d930

            test EAX,EAX
            je .L_40da39

            jmp .L_40da51
.L_40da91:

            call __stack_chk_fail@PLT
.L_40da96:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40daa0:

            cmp CL,17
            je .L_40dac0

            cmp CL,58
            jne .L_40dab8

            add RDI,88
            jmp .L_43ae30
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40dab8:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40dac0:

            add RDI,104
            jmp .L_410ce0
.L_40dac9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dad0:

            test R8B,R8B
            jne .L_40dae8

            cmp QWORD PTR [RDI+8],0
            je .L_40daf0

            movzx ECX,CL
            jmp .L_40d640
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40dae8:

            mov EAX,2
            ret 
          .byte 0x66
          .byte 0x90
.L_40daf0:

            mov EAX,4
            ret 
.L_40daf6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40db00:

            mov RAX,QWORD PTR [RDI+24]
            test RAX,RAX
            je .L_40db30

            cmp RAX,RSI
            je .L_40db40

            movzx EDX,BYTE PTR [RAX+24]
            cmp BYTE PTR [RSI+24],DL
            je .L_40db40

            cmp QWORD PTR [RAX+32],0
            je .L_40db20
.L_40db1e:

            jmp .L_40db1e
.L_40db20:

            mov QWORD PTR [RAX+32],RSI
            mov QWORD PTR [RSI+32],0
            xor EAX,EAX
            ret 
          .byte 0x90
.L_40db30:

            mov QWORD PTR [RDI+24],RSI
            xor EAX,EAX
            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x90
.L_40db40:

            mov EAX,24
            ret 
.L_40db46:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40db50:

            mov RDX,QWORD PTR [RDI+24]
            test RDX,RDX
            je .L_40dbb8

            cmp RDX,RSI
            mov RAX,QWORD PTR [RDX+32]
            je .L_40dba0

            test RAX,RAX
            je .L_40db7b
.L_40db67:

            cmp RSI,RAX
            mov RCX,QWORD PTR [RAX+32]
            je .L_40db88

            mov RDX,RAX
            mov RAX,RCX
            test RAX,RAX
            jne .L_40db67
.L_40db7b:

            mov EAX,23
            jmp .L_40db8e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40db88:

            mov QWORD PTR [RDX+32],RCX
            xor EAX,EAX
.L_40db8e:

            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dba0:

            mov QWORD PTR [RDI+24],RAX
            mov EAX,23
            mov QWORD PTR [RSI+32],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40dbb8:

            mov EAX,23
            ret 
.L_40dbbe:

            nop
            nop
.L_40dbc0:

            mov RAX,QWORD PTR [RDI+24]
            mov EDX,ESI
            test RAX,RAX
            je .L_40dbe6

            cmp SIL,BYTE PTR [RAX+24]
            jne .L_40dbdd

            jmp .L_40dbf0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40dbd8:

            cmp DL,BYTE PTR [RAX+24]
            je .L_40dbe6
.L_40dbdd:

            mov RAX,QWORD PTR [RAX+32]
            test RAX,RAX
            jne .L_40dbd8
.L_40dbe6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dbf0:

            ret 
.L_40dbf2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dc00:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+24]
            test RBX,RBX
            je .L_40dc40

            mov RBP,RSI
            jmp .L_40dc21
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40dc18:

            mov RBX,QWORD PTR [RBX+32]
            test RBX,RBX
            je .L_40dc40
.L_40dc21:

            mov RSI,RBP
            mov RDI,RBX
            call .L_410860

            test AL,AL
            je .L_40dc18

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dc40:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_40dc49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dc50:

            push R15
            push R14
            push R13
            push R12
            lea R13,QWORD PTR [RSI+16]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R13
            sub RSP,40
.L_40dc68:

            movzx EAX,BYTE PTR [RSI+36]
            mov QWORD PTR [RSP+24],RSI
            mov BYTE PTR [RSP+14],AL
            call .L_40f0f0

            mov R15,QWORD PTR [RBX+24]
            mov BYTE PTR [RSP+12],AL
            test R15,R15
            je .L_40dfc5

            xor EBX,EBX
            mov BYTE PTR [RSP+13],0
            xor R12D,R12D
            jmp .L_40dcb8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dca0:

            movzx EDX,BYTE PTR [RSP+11]
            cmp BYTE PTR [RSP+14],DL
            je .L_40dcd9
.L_40dcab:

            mov R15,QWORD PTR [R15+32]
            test R15,R15
            je .L_40dde5
.L_40dcb8:

            movzx EAX,BYTE PTR [R15+24]
            mov RDI,R13
            mov BYTE PTR [RSP+11],AL
            call .L_40ee30

            test AL,AL
            jne .L_40dca0

            mov RDI,R13
            call .L_40ee50

            test AL,AL
            jne .L_40dca0
.L_40dcd9:

            mov R14,QWORD PTR [R15+8]
            test R14,R14
            je .L_40dcab

            mov QWORD PTR [RSP+16],R15
            mov R15D,EBX
            jmp .L_40dd77
          .byte 0x90
.L_40dcf0:

            mov RSI,R13
            mov RDI,R14
            call .L_40f290

            test AL,AL
            jne .L_40ddf1

            movzx ESI,BYTE PTR [R14+17]
            test SIL,4
            je .L_40dea0

            shr SIL,3
            and ESI,15
.L_40dd19:

            movzx EAX,BYTE PTR [R12+17]
            test AL,4
            je .L_40de80

            shr AL,3
            and EAX,15
.L_40dd2d:

            movzx ECX,BYTE PTR [R14+17]
            mov EDI,ECX
            shr DIL,2
            and EDI,1
            cmp AL,SIL
            jbe .L_40de10

            test DIL,DIL
            je .L_40df20

            shr CL,3
            and ECX,15
.L_40dd53:

            movzx EAX,BYTE PTR [RSP+13]
            movzx EDX,BYTE PTR [RSP+11]
            cmp BL,CL
            cmovbe R15D,EBP
            cmovbe R12,R14
            cmovbe EAX,EDX
            mov BYTE PTR [RSP+13],AL
.L_40dd6e:

            mov R14,QWORD PTR [R14+24]
            test R14,R14
            je .L_40ddd0
.L_40dd77:

            mov RSI,R14
            mov RDI,R13
            call .L_40f240

            cmp BYTE PTR [R14+16],AL
            mov EBP,EAX
            movzx EBX,BYTE PTR [RSP+12]
            ja .L_40dda3

            movzx EBX,BYTE PTR [R14+17]
            test BL,4
            je .L_40de68

            shr BL,3
            and EBX,15
.L_40dda3:

            mov RDI,R14
            call .L_40ef90

            test AL,AL
            jne .L_40dd6e

            test R12,R12
            jne .L_40dcf0
.L_40ddb8:

            movzx EAX,BYTE PTR [RSP+11]
            mov R15D,EBP
            mov R12,R14
            mov BYTE PTR [RSP+13],AL
.L_40ddc7:

            mov R14,QWORD PTR [R14+24]
            test R14,R14
            jne .L_40dd77
.L_40ddd0:

            mov EBX,R15D
            mov R15,QWORD PTR [RSP+16]
            mov R15,QWORD PTR [R15+32]
            test R15,R15
            jne .L_40dcb8
.L_40dde5:

            movzx EAX,BYTE PTR [RSP+13]
            mov R14,R12
            mov BYTE PTR [RSP+11],AL
.L_40ddf1:

            movzx EDX,BYTE PTR [RSP+11]
            mov RAX,QWORD PTR [RSP+24]
            mov BYTE PTR [RAX+36],DL
            add RSP,40
.L_40de02:

            mov RAX,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40de10:

            test DIL,DIL
            je .L_40df98

            shr CL,3
            and ECX,15
.L_40de1f:

            movzx EAX,BYTE PTR [R12+17]
            test AL,4
            je .L_40df30

            mov ESI,EAX
            shr SIL,3
            and ESI,15
            cmp SIL,CL
            jae .L_40deb0
.L_40de3b:

            shr AL,3
            and EAX,15
.L_40de41:

            movzx EDX,BYTE PTR [RSP+13]
            movzx ECX,BYTE PTR [RSP+11]
            cmp BL,AL
            cmova R15D,EBP
            cmova R12,R14
            cmova EDX,ECX
            mov BYTE PTR [RSP+13],DL
            jmp .L_40dd6e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40de68:

            mov RDI,R14
            call .L_40f0f0

            mov EBX,EAX
            jmp .L_40dda3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40de80:

            mov RDI,R12
            mov BYTE PTR [RSP+15],SIL
            call .L_40f0f0

            movzx ESI,BYTE PTR [RSP+15]
            jmp .L_40dd2d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dea0:

            mov RDI,R14
            call .L_40f0f0

            mov ESI,EAX
            jmp .L_40dd19
          .byte 0x90
.L_40deb0:

            shr AL,3
            and EAX,15
            cmp AL,3
            je .L_40df63
.L_40debe:

            test BYTE PTR [R14+17],1
            je .L_40ded1

            test BYTE PTR [R12+17],1
            je .L_40ddb8
.L_40ded1:

            mov RAX,QWORD PTR [RSP+24]
            movzx EDX,BYTE PTR [RSP+11]
            movzx EAX,BYTE PTR [RAX+36]
            test AL,AL
            setne CL
            cmp AL,DL
            sete AL
            test CL,AL
            je .L_40defa

            movzx EAX,BYTE PTR [RSP+13]
            cmp DL,AL
            jne .L_40ddb8
.L_40defa:

            cmp BPL,R15B
            jbe .L_40dd6e

            movzx EAX,BYTE PTR [RSP+11]
            mov R15D,EBP
            mov R12,R14
            mov BYTE PTR [RSP+13],AL
            jmp .L_40ddc7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40df20:

            mov RDI,R14
            call .L_40f0f0

            mov ECX,EAX
            jmp .L_40dd53
          .byte 0x90
.L_40df30:

            mov RDI,R12
            mov BYTE PTR [RSP+15],CL
            call .L_40f0f0

            movzx ECX,BYTE PTR [RSP+15]
            cmp AL,CL
            movzx EAX,BYTE PTR [R12+17]
            jb .L_40dfb0

            test AL,4
            jne .L_40deb0

            mov RDI,R12
            call .L_40f0f0

            cmp AL,3
            jne .L_40debe
.L_40df63:

            cmp BL,3
            mov RDI,R12
            ja .L_40df6e

            mov RDI,R14
.L_40df6e:

            call .L_40ef50

            movzx EDX,BYTE PTR [RSP+13]
            movzx ECX,BYTE PTR [RSP+11]
            test AL,AL
            cmovne R15D,EBP
            cmovne R12,R14
            cmovne EDX,ECX
            mov BYTE PTR [RSP+13],DL
            jmp .L_40dd6e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40df98:

            mov RDI,R14
            call .L_40f0f0

            mov ECX,EAX
            jmp .L_40de1f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40dfb0:

            test AL,4
            jne .L_40de3b

            mov RDI,R12
            call .L_40f0f0

            jmp .L_40de41
.L_40dfc5:

            mov BYTE PTR [RSP+11],0
            xor R14D,R14D
            jmp .L_40ddf1
.L_40dfd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40dfe0:

            push R12
            push RBP
            mov R8D,16425
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,112
.L_40dff4:

            movdqu XMM0,XMMWORD PTR [RCX]
            lea RSI,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov EAX,1023
            mov QWORD PTR [RSP+66],0
            mov DWORD PTR [RSP],96
            movdqu XMM0,XMMWORD PTR [RCX+32]
            mov ECX,4294966272
            mov WORD PTR [RSP+6],R8W
            movaps XMMWORD PTR [RSP+80],XMM0
            mov DWORD PTR [RSI+26],0
            mov WORD PTR [RSP+64],AX
            movzx EAX,WORD PTR [RDX+4]
            mov WORD PTR [RSP+78],CX
            movdqa XMM0,XMMWORD PTR [RSP+64]
            movups XMMWORD PTR [RSP+24],XMM0
            rol AX,8
            add EAX,40
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_40dc50

            mov RDX,RAX
            mov EAX,20
            test RDX,RDX
            je .L_40e09c

            movdqu XMM0,XMMWORD PTR [RDX]
            mov R12,RSP
            mov RSI,RBX
            mov RDX,R12
            mov RDI,RBP
            movups XMMWORD PTR [RSP+8],XMM0
            call .L_40d270

            test EAX,EAX
            je .L_40e0b8
.L_40e09c:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40e0ca

            add RSP,112
.L_40e0b0:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40e0b8:

            mov EDX,40
            mov RSI,R12
            mov RDI,RBX
            call .L_403da0

            jmp .L_40e09c
.L_40e0ca:

            call __stack_chk_fail@PLT
.L_40e0cf:

            nop
.L_40e0d0:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RDX
            mov RDI,RBX
            mov RBP,RSI
            sub RSP,72
.L_40e0ed:

            movzx R14D,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+16],96
            mov BYTE PTR [RSP+22],CL
            mov EAX,R14D
            rol AX,8
            mov WORD PTR [RSP+20],AX
            movzx EAX,BYTE PTR [RDX+37]
            mov EDX,64
            test AL,AL
            cmove EAX,EDX
            mov BYTE PTR [RSP+23],AL
            call .L_40ede0

            test AL,AL
            jne .L_40e145

            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            je .L_40e258
.L_40e145:

            mov RSI,RBX
            mov RDI,R12
            call .L_40dc50

            test RAX,RAX
            je .L_40e290

            movdqu XMM0,XMMWORD PTR [RAX]
            movups XMMWORD PTR [RSP+24],XMM0
.L_40e162:

            lea R13,QWORD PTR [RSP+16]
            lea RAX,QWORD PTR [R13+24]
            movdqu XMM0,XMMWORD PTR [RBX+16]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            movups XMMWORD PTR [RSP+40],XMM0
            call .L_40ee30

            test AL,AL
            je .L_40e270
.L_40e189:

            cmp BYTE PTR [RBX+36],0
            mov R8D,2
            je .L_40e1c0
.L_40e195:

            lea RAX,QWORD PTR [RBX+16]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_40f170

            test AL,AL
            je .L_40e1f0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            call .L_40d270

            test EAX,EAX
            mov R8D,EAX
            je .L_40e1f0

            nop
            nop
.L_40e1c0:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R8D
            jne .L_40e3a5

            add RSP,72
.L_40e1db:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e1f0:

            mov EDX,40
            mov RSI,R13
            mov RDI,RBP
            call .L_403da0

            test EAX,EAX
            mov R8D,EAX
            jne .L_40e1c0

            lea RSI,QWORD PTR [R13+24]
            lea RDI,QWORD PTR [R13+8]
            movzx EDX,R14W
            mov ECX,R15D
            mov DWORD PTR [RSP+12],EAX
            call .L_40d210

            cmp R15D,17
            mov R8D,DWORD PTR [RSP+12]
            je .L_40e2f0

            cmp R15D,58
            jne .L_40e2aa

            lea RDI,QWORD PTR [R12+88]
            movzx EDX,AX
            mov RSI,RBP
            mov DWORD PTR [RSP+12],R8D
            call .L_43af40

            test EAX,EAX
            je .L_40e2a0
.L_40e24d:

            mov R8D,EAX
            jmp .L_40e1c0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40e258:

            movdqu XMM0,XMMWORD PTR [RBX]
            movups XMMWORD PTR [RSP+24],XMM0
            jmp .L_40e162
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e270:

            mov RDI,QWORD PTR [RSP]
            call .L_40f150

            test AL,AL
            jne .L_40e189

            jmp .L_40e195
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e290:

            mov R8D,20
            jmp .L_40e1c0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40e2a0:

            mov R8D,DWORD PTR [RSP+12]
.L_40e2a5:

            mov DWORD PTR [RSP+12],R8D
.L_40e2aa:

            mov RDI,QWORD PTR [RSP]
            call .L_40f190

            test AL,AL
            mov R8D,DWORD PTR [RSP+12]
            jne .L_40e318
.L_40e2bc:

            movzx EAX,BYTE PTR [RBX+36]
            lea RDI,QWORD PTR [R12+32]
            mov RSI,RBP
            mov DWORD PTR [RSP],R8D
            mov BYTE PTR [RBP+75],AL
            call .L_404a10

            lea RDI,QWORD PTR [R12+64]
            call .L_404bc0

            mov R8D,DWORD PTR [RSP]
            jmp .L_40e1c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e2f0:

            lea RDI,QWORD PTR [R12+104]
            movzx EDX,AX
            mov RSI,RBP
            mov DWORD PTR [RSP+12],R8D
            call .L_410e90

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+12]
            jne .L_40e24d

            jmp .L_40e2a5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e318:

            mov RDI,R12
            mov DWORD PTR [RSP],R8D
            call .L_430ac0

            lea RSI,QWORD PTR [R13+24]
            lea RDI,QWORD PTR [RAX+15288]
            call .L_4243e0

            test AL,AL
            mov R8D,DWORD PTR [RSP]
            jne .L_40e368
.L_40e33c:

            mov RCX,RBX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [RSP],R8D
            call .L_40dfe0

            test EAX,EAX
            mov R8D,DWORD PTR [RSP]
            je .L_40e2bc

            jmp .L_40e24d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40e368:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            mov DWORD PTR [RSP],R8D
            call .L_404020

            test RAX,RAX
            mov R8D,DWORD PTR [RSP]
            je .L_40e33c

            movzx EDX,BYTE PTR [RBX+36]
            lea RDI,QWORD PTR [R12+32]
            mov RSI,RAX
            mov BYTE PTR [RAX+75],DL
            call .L_404a10

            lea RDI,QWORD PTR [R12+64]
            call .L_404bc0

            mov R8D,DWORD PTR [RSP]
            jmp .L_40e33c
.L_40e3a5:

            call __stack_chk_fail@PLT
.L_40e3aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40e3b0:

            push R12
            push RBP
            push RBX
            mov R12,QWORD PTR [RDI+24]
            test R12,R12
            je .L_40e402

            mov RBP,RSI
.L_40e3c0:

            mov RBX,QWORD PTR [R12+8]
            test RBX,RBX
            jne .L_40e3d9

            jmp .L_40e3f8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e3d0:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_40e3f8
.L_40e3d9:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f240

            cmp BYTE PTR [RBX+16],AL
            ja .L_40e3d0

            movzx EAX,BYTE PTR [R12+24]
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e3f8:

            mov R12,QWORD PTR [R12+32]
            test R12,R12
            jne .L_40e3c0
.L_40e402:

            pop RBX
            mov EAX,4294967295
            pop RBP
            pop R12
            ret 
.L_40e40c:

            nop
            nop
            nop
            nop
.L_40e410:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov RBX,RSI
            call .L_40ee50

            test AL,AL
            je .L_40e430
.L_40e426:

            movzx EAX,BYTE PTR [RBX+36]
.L_40e42a:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_40e430:

            mov RDI,RBX
            call .L_40ee30

            test AL,AL
            mov R12D,EAX
            jne .L_40e426

            mov RSI,RBX
            mov RDI,RBP
            call .L_40e3b0

            test AL,AL
            jg .L_40e42a

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RBP+80]
            mov RDX,RBX
            call .L_410000

            test AL,AL
            cmovs EAX,R12D
            jmp .L_40e42a
.L_40e466:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e470:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13D,ECX
            pxor XMM0,XMM0
            mov RBX,RSI
            sub RSP,168
.L_40e491:

            lea RBP,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP],R8
            mov DWORD PTR [RSP+20],R9D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            movaps XMMWORD PTR [RSP+128],XMM0
            call .L_40f680

            test EAX,EAX
            mov R11D,EAX
            je .L_40e510
.L_40e4d3:

            mov RDI,RBX
            mov DWORD PTR [RSP],R11D
            call .L_4033b0

            mov R11D,DWORD PTR [RSP]
.L_40e4e3:

            mov RDX,QWORD PTR [RSP+152]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R11D
            jne .L_40e8ef

            add RSP,168
.L_40e504:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_40e510:

            movzx EAX,BYTE PTR [RSP+55]
            lea RSI,QWORD PTR [RBP+24]
            mov BYTE PTR [RSP+132],R13B
            movdqu XMM0,XMMWORD PTR [RSP+56]
            mov RDI,RSI
            mov QWORD PTR [RSP+8],RSI
            movaps XMMWORD PTR [RSP+112],XMM0
            mov BYTE PTR [RSP+133],AL
            mov RAX,QWORD PTR [RSP]
            movdqu XMM0,XMMWORD PTR [RSP+72]
            mov QWORD PTR [RSP+136],RAX
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_40ee50

            test AL,AL
            mov BYTE PTR [RSP+29],AL
            mov RSI,QWORD PTR [RSP+8]
            jne .L_40e690

            mov R15,QWORD PTR [R12+24]
            test R15,R15
            je .L_40e720

            mov QWORD PTR [RSP+8],RSI
            jmp .L_40e58d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40e580:

            mov R15,QWORD PTR [R15+32]
            test R15,R15
            je .L_40e720
.L_40e58d:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_410860

            test AL,AL
            mov R10D,EAX
            je .L_40e580

            mov BYTE PTR [RSP+31],0
            xor R8D,R8D
            mov R9D,1
.L_40e5af:

            mov ESI,40
            mov RDI,RBX
            mov BYTE PTR [RBX+75],R13B
            mov DWORD PTR [RSP+24],R8D
            mov DWORD PTR [RSP+8],R9D
            mov BYTE PTR [RSP+30],R10B
            call .L_403550

            movzx EAX,BYTE PTR [RSP+54]
            mov R9D,DWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RSP+46]
            mov R8D,DWORD PTR [RSP+24]
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+46],AL
            call .L_40d9b0

            test EAX,EAX
            mov R11D,EAX
            jne .L_40e4d3

            cmp BYTE PTR [R12],1
            movzx R10D,BYTE PTR [RSP+30]
            je .L_40e621

            movzx ECX,BYTE PTR [RSP+29]
            test R14,R14
            mov EAX,0
            cmovne ECX,EAX
            mov BYTE PTR [RSP+29],CL
.L_40e621:

            test R10B,R10B
            je .L_40e750

            movzx ECX,BYTE PTR [RSP+46]
            cmp CL,41
            je .L_40e8ae

            cmp BYTE PTR [RSP+20],0
            lea RBP,QWORD PTR [RSP+96]
            jne .L_40e667

            cmp QWORD PTR [R12+8],0
            je .L_40e667

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40d640

            movzx ECX,BYTE PTR [RSP+46]
            mov R11D,DWORD PTR [RSP]
.L_40e667:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40daa0

            test EAX,EAX
            je .L_40e77f

            mov R11D,EAX
            jmp .L_40e4d3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e690:

            test R14,R14
            je .L_40e7e0

            mov RDI,R14
            call .L_410170

            test AL,AL
            mov R10D,EAX
            jne .L_40e800

            movzx EAX,BYTE PTR [R14+25]
            xor R9D,R9D
            mov BYTE PTR [RSP+31],AL
.L_40e6b8:

            lea R15,QWORD PTR [RBP+24]
            mov DWORD PTR [RSP+24],R9D
            mov BYTE PTR [RSP+8],R10B
            mov RDI,R15
            call .L_40f190

            xor R8D,R8D
            test AL,AL
            mov BYTE PTR [RSP+29],AL
            movzx R10D,BYTE PTR [RSP+8]
            mov R9D,DWORD PTR [RSP+24]
            je .L_40e5af

            mov RDI,R12
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+15288]
            mov RSI,R15
            call .L_4243e0

            movzx R10D,BYTE PTR [RSP+8]
            mov BYTE PTR [RSP+29],AL
            movzx R8D,AL
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_40e5af
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e720:

            lea RDI,QWORD PTR [RBP+24]
            call .L_40ee30

            test R14,R14
            mov BYTE PTR [RSP+31],0
            sete DL
            xor EAX,1
            xor R10D,R10D
            or EAX,EDX
            xor R9D,R9D
            movzx R8D,AL
            mov BYTE PTR [RSP+29],AL
            jmp .L_40e5af
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e750:

            cmp BYTE PTR [RSP+31],0
            je .L_40e783

            cmp BYTE PTR [RSP+20],0
            jne .L_40e783

            cmp QWORD PTR [R12+8],0
            je .L_40e783

            movzx ECX,BYTE PTR [RSP+46]
            lea RDX,QWORD PTR [RSP+96]
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [RSP],R11D
            call .L_40d640
.L_40e77f:

            mov R11D,DWORD PTR [RSP]
.L_40e783:

            cmp BYTE PTR [RSP+29],0
            je .L_40e4d3

            lea R13,QWORD PTR [RSP+96]
            mov RDI,R12
            mov RSI,R13
            call .L_40e410

            test AL,AL
            mov EBP,EAX
            jne .L_40e810

            cmp BYTE PTR [RSP+20],0
            jne .L_40e898

            cmp QWORD PTR [R12+8],0
            je .L_40e8a3

            movzx ECX,BYTE PTR [RSP+46]
            mov RDX,R13
            mov RSI,RBX
            mov RDI,R12
            call .L_40d640

            mov R11D,EAX
            jmp .L_40e4d3
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e7e0:

            mov R8D,1
            xor R9D,R9D
            mov BYTE PTR [RSP+31],0
            xor R10D,R10D
            jmp .L_40e5af
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e800:

            mov R9D,1
            mov BYTE PTR [RSP+31],0
            jmp .L_40e6b8
.L_40e810:

            test R14,R14
            movzx EAX,BYTE PTR [RSP+55]
            je .L_40e821

            sub EAX,1
            mov BYTE PTR [RSP+55],AL
.L_40e821:

            test AL,AL
            je .L_40e898

            lea RCX,QWORD PTR [RSP+47]
            mov RDI,RBX
            mov EDX,1
            mov ESI,7
            mov BYTE PTR [RSP+47],AL
            call .L_403ac0

            mov RDI,QWORD PTR [R12+24]
            test RDI,RDI
            jne .L_40e859

            jmp .L_40e8a3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40e850:

            mov RDI,QWORD PTR [RDI+32]
            test RDI,RDI
            je .L_40e8a3
.L_40e859:

            cmp BPL,BYTE PTR [RDI+24]
            jne .L_40e850

            mov RAX,QWORD PTR [RDI]
            lea RDX,QWORD PTR [RIP+.L_40edc0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_40e8e5

            add RDI,2256
            mov RSI,RBX
            call .L_4133e0

            mov R11D,EAX
.L_40e883:

            test R11D,R11D
            je .L_40e4e3

            jmp .L_40e4d3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40e898:

            mov R11D,2
            jmp .L_40e4d3
.L_40e8a3:

            mov R11D,4
            jmp .L_40e4d3
.L_40e8ae:

            movzx ESI,WORD PTR [RBX+60]
            mov RDI,RBX
            mov DWORD PTR [RSP+8],R11D
            call .L_403810

            movzx R9D,BYTE PTR [RSP+20]
            mov R8,QWORD PTR [RSP]
            movsx ECX,R13B
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R12
            call .L_40e470

            mov R11D,DWORD PTR [RSP+8]
            jmp .L_40e4e3
.L_40e8e5:

            mov RSI,RBX
            call RAX

            mov R11D,EAX
            jmp .L_40e883
.L_40e8ef:

            call __stack_chk_fail@PLT
.L_40e8f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40e900:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+24]
            mov R12,RSI
            mov RBP,RDX
            sub RSP,40
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_40ee50

            test AL,AL
            jne .L_40e960
.L_40e93a:

            xor EAX,EAX
.L_40e93c:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40eb6e

            add RSP,40
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_40e960:

            mov RDI,RBX
            call .L_40f0f0

            cmp AL,2
            jbe .L_40e93a

            mov RDI,RBX
            call .L_40f170

            test AL,AL
            je .L_40eac8

            mov ESI,40
            mov RDI,R12
            call .L_403810

            cmp BYTE PTR [RBP+6],0
            jne .L_40eaf0

            lea R14,QWORD PTR [RSP+9]
            xor EAX,EAX
            mov EDX,2
            xor ESI,ESI
            mov RDI,R12
            mov WORD PTR [RSP+11],AX
            mov RCX,R14
            call .L_403860

            movzx EBX,BYTE PTR [RSP+10]
            movzx EDX,WORD PTR [RBP+4]
            mov EAX,6
            mov ECX,EBX
            lea EBX,DWORD PTR [RBX*8+8]
            rol DX,8
            cmp BX,DX
            ja .L_40e93c

            add ECX,1
            xor ESI,ESI
            mov EDX,2
            mov BYTE PTR [RSP+10],CL
            mov RDI,R12
            mov RCX,R14
            call .L_403ac0

            xor ESI,ESI
            mov EDX,8
            mov RDI,R12
            call .L_403da0

            test EAX,EAX
            jne .L_40e93c

            movzx R14D,BX
            mov R8,R12
            xor EDX,EDX
            mov ECX,R14D
            mov ESI,8
            mov RDI,R12
            lea R15,QWORD PTR [RSP+11]
            call .L_403f50

            lea RDI,QWORD PTR [R13+120]
            lea RDX,QWORD PTR [RBP+8]
            mov RSI,R15
            call .L_40f7c0

            movzx EAX,BYTE PTR [RSP+12]
            mov RCX,R15
            mov ESI,R14D
            mov RDI,R12
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_403ac0

            movzx EAX,BYTE PTR [RSP+12]
            lea R13D,DWORD PTR [RAX+2]
            mov EAX,R13D
            and EAX,7
            je .L_40eaac

            mov R14D,8
            mov EDX,6
            lea RDI,QWORD PTR [RSP+19]
            sub R14D,EAX
            sub EDX,EAX
            mov ECX,5
            mov BYTE PTR [RSP+18],DL
            movzx EDX,R14B
            xor ESI,ESI
            sub RDX,2
            mov BYTE PTR [RSP+17],1
            lea R15,QWORD PTR [RSP+17]
            call __memset_chk@PLT

            movzx ESI,R13B
            movzx EDX,R14B
            mov RCX,R15
            add ESI,EBX
            mov RDI,R12
            movzx ESI,SI
            call .L_403ac0
.L_40eaac:

            movzx EAX,WORD PTR [RBP+4]
            rol AX,8
            add EAX,8
            rol AX,8
            mov WORD PTR [RBP+4],AX
            jmp .L_40eb06
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40eac8:

            mov RDI,RBX
            call .L_40f190

            test AL,AL
            jne .L_40eb20
.L_40ead4:

            mov RCX,R14
            mov RDX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_40dfe0

            jmp .L_40e93c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eaf0:

            mov RDX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_40d270

            test EAX,EAX
            jne .L_40e93c
.L_40eb06:

            mov EDX,40
            mov RSI,RBP
            mov RDI,R12
            call .L_403da0

            jmp .L_40e93c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eb20:

            mov RDI,R13
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+15288]
            mov RSI,RBX
            call .L_4243e0

            test AL,AL
            je .L_40ead4

            movzx ESI,WORD PTR [R12+58]
            mov RDI,R12
            call .L_404020

            test RAX,RAX
            je .L_40ead4

            movsx ECX,BYTE PTR [R14+36]
            mov R9D,1
            xor R8D,R8D
            xor EDX,EDX
            mov RSI,RAX
            mov RDI,R13
            call .L_40e470

            jmp .L_40ead4
.L_40eb6e:

            call __stack_chk_fail@PLT
.L_40eb73:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eb80:

            push R12
            mov R12,RDI
            push RBP
            lea RBP,QWORD PTR [RDI+32]
            push RBX
            jmp .L_40ebb2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40eb90:

            mov RSI,RAX
            mov RDI,RBP
            call .L_404a30

            movsx ECX,BYTE PTR [RBX+75]
            xor R9D,R9D
            xor R8D,R8D
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_40e470
.L_40ebb2:

            mov RDI,RBP
            call .L_404810

            test RAX,RAX
            mov RBX,RAX
            jne .L_40eb90

            pop RBX
            pop RBP
            pop R12
            ret 
.L_40ebc7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ebd0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a40

            add RSP,8
            mov RDI,RAX
            jmp .L_40eb80
.L_40ebea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40ebf0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            pxor XMM0,XMM0
            sub RSP,136
.L_40ec0e:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_40f680

            test EAX,EAX
            je .L_40ec78
.L_40ec3e:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_40ec4e:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            jne .L_40ecf2

            add RSP,136
.L_40ec69:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ec78:

            movdqu XMM0,XMMWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RBP+24]
            movzx EAX,BYTE PTR [RSP+23]
            mov BYTE PTR [RSP+100],R15B
            movsx R14D,R15B
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+104],0
            movdqu XMM0,XMMWORD PTR [RSP+40]
            mov BYTE PTR [RSP+101],AL
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_40ee50

            test AL,AL
            je .L_40ecd4

            lea R13,QWORD PTR [RSP+64]
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            mov RCX,R13
            call .L_40e900

            test EAX,EAX
            jne .L_40ec3e
.L_40ecd4:

            mov R9D,1
            xor R8D,R8D
            mov ECX,R14D
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_40e470

            jmp .L_40ec4e
.L_40ecf2:

            call __stack_chk_fail@PLT
.L_40ecf7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ed00:

            cmp EDI,60
            ja .L_40edb0

            lea RDX,QWORD PTR [RIP+.L_458990]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ed20:

            lea RAX,QWORD PTR [RIP+.L_458959]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed30:

            lea RAX,QWORD PTR [RIP+.L_458961]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed40:

            lea RAX,QWORD PTR [RIP+.L_458965]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed50:

            lea RAX,QWORD PTR [RIP+.L_458969]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed60:

            lea RAX,QWORD PTR [RIP+.L_45896d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed70:

            lea RAX,QWORD PTR [RIP+.L_458975]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed80:

            lea RAX,QWORD PTR [RIP+.L_45897a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ed90:

            lea RAX,QWORD PTR [RIP+.L_458390]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40eda0:

            lea RAX,QWORD PTR [RIP+.L_458980]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40edb0:

            lea RAX,QWORD PTR [RIP+.L_458988]
            ret 
.L_40edb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40edc0:

            add RDI,2256
            jmp .L_4133e0
.L_40edcc:

            nop
            nop
            nop
            nop
.L_40edd0:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            ret 
.L_40edd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ede0:

            mov ESI,DWORD PTR [RDI]
            xor EAX,EAX
            test ESI,ESI
            jne .L_40edfe

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40edfe

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40edfe

            mov EAX,DWORD PTR [RDI+12]
            test EAX,EAX
            sete AL
.L_40edfe:

            ret 
.L_40ee00:

            mov ESI,DWORD PTR [RDI]
            xor EAX,EAX
            test ESI,ESI
            jne .L_40ee20

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ee20

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ee20

            cmp DWORD PTR [RDI+12],16777216
            sete AL
.L_40ee20:

            ret 
.L_40ee22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ee30:

            xor EAX,EAX
            cmp BYTE PTR [RDI],254
            je .L_40ee40

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ee40:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,4294967232
            cmp AL,128
            sete AL
            ret 
.L_40ee4d:

            nop
            nop
            nop
.L_40ee50:

            cmp BYTE PTR [RDI],255
            sete AL
            ret 
.L_40ee57:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ee60:

            xor EAX,EAX
            cmp DWORD PTR [RDI],767
            je .L_40ee70
.L_40ee6a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ee70:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ee6a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ee6a

            cmp DWORD PTR [RDI+12],16777216
            sete AL
            ret 
.L_40ee89:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ee90:

            xor EAX,EAX
            cmp DWORD PTR [RDI],767
            je .L_40eea0
.L_40ee9a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40eea0:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ee9a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ee9a

            cmp DWORD PTR [RDI+12],33554432
            sete AL
            ret 
.L_40eeb9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eec0:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_40eed0
.L_40eeca:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40eed0:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40eeca

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40eeca

            cmp DWORD PTR [RDI+12],16777216
            sete AL
            ret 
.L_40eee9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40eef0:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_40ef00
.L_40eefa:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ef00:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40eefa

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40eefa

            cmp DWORD PTR [RDI+12],33554432
            sete AL
            ret 
.L_40ef19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ef20:

            xor EAX,EAX
            cmp DWORD PTR [RDI],1023
            je .L_40ef30
.L_40ef2a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ef30:

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40ef2a

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40ef2a

            cmp DWORD PTR [RDI+12],4227858432
            sete AL
            ret 
.L_40ef49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ef50:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_40ef61

            cmp WORD PTR [RDI+10],65280
            je .L_40ef68
.L_40ef61:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ef68:

            cmp WORD PTR [RDI+12],254
            jne .L_40ef61

            movzx EDX,BYTE PTR [RDI+14]
            cmp DL,251
            ja .L_40ef61

            mov EAX,EDX
            shr AL,1
            xor EAX,1
            and EAX,1
            ret 
.L_40ef84:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ef90:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_40efa1

            cmp WORD PTR [RDI+10],65280
            je .L_40efa8
.L_40efa1:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40efa8:

            cmp WORD PTR [RDI+12],254
            jne .L_40efa1

            cmp BYTE PTR [RDI+14],252
            sete AL
            ret 
.L_40efb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40efc0:

            mov EDX,DWORD PTR [RDI+8]
            xor EAX,EAX
            test EDX,EDX
            jne .L_40efd1

            mov EAX,DWORD PTR [RDI+12]
            test EAX,EAX
            sete AL
.L_40efd1:

            ret 
.L_40efd3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40efe0:

            xor EAX,EAX
            cmp DWORD PTR [RDI+8],-3
            je .L_40eff0
.L_40efe8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40eff0:

            cmp WORD PTR [RDI+12],-1
            jne .L_40efe8

            cmp BYTE PTR [RDI+14],255
            jne .L_40efe8

            movzx EAX,BYTE PTR [RDI+15]
            shr AL,7
            ret 
.L_40f005:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f010:

            mov EAX,DWORD PTR [RDI+8]
            test EAX,EAX
            jne .L_40f040

            mov EDX,DWORD PTR [RDI+12]
            mov EAX,1
            test EDX,EDX
            je .L_40f060
.L_40f023:

            xor EAX,EAX
            cmp WORD PTR [RDI+8],0
            jne .L_40f034

            cmp WORD PTR [RDI+10],65280
            je .L_40f068
.L_40f034:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f040:

            cmp EAX,-3
            jne .L_40f023

            cmp WORD PTR [RDI+12],-1
            jne .L_40f023

            cmp BYTE PTR [RDI+14],255
            jne .L_40f023

            cmp BYTE PTR [RDI+15],0
            mov EAX,1
            jns .L_40f023

            jmp .L_40f034
          .byte 0x90
.L_40f060:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f068:

            cmp WORD PTR [RDI+12],254
            jne .L_40f034

            cmp BYTE PTR [RDI+14],252
            sete AL
            ret 
.L_40f078:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f080:

            lea RAX,QWORD PTR [RDI+8]
            ret 
.L_40f085:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f090:

            lea RAX,QWORD PTR [RDI+8]
            ret 
.L_40f095:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f0a0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+8],RAX
            ret 
.L_40f0a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f0b0:

            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+8],RAX
            xor BYTE PTR [RDI+8],2
            ret 
.L_40f0bc:

            nop
            nop
            nop
            nop
.L_40f0c0:

            mov RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RSI],RAX
            xor BYTE PTR [RSI],2
            ret 
.L_40f0cb:

            nop
            nop
            nop
            nop
            nop
.L_40f0d0:

            push RBX
            mov RBX,RSI
            lea RSI,QWORD PTR [RDI+8]
            xor EDX,EDX
            mov RDI,RBX
            call .L_4083a0

            xor BYTE PTR [RBX],2
            pop RBX
            ret 
.L_40f0e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f0f0:

            movzx EAX,BYTE PTR [RDI]
            cmp AL,255
            je .L_40f140

            cmp AL,254
            je .L_40f128
.L_40f0fb:

            mov ESI,DWORD PTR [RDI]
            mov EAX,14
            test ESI,ESI
            jne .L_40f138

            mov ECX,DWORD PTR [RDI+4]
            test ECX,ECX
            jne .L_40f138

            mov EDX,DWORD PTR [RDI+8]
            test EDX,EDX
            jne .L_40f138

            cmp DWORD PTR [RDI+12],16777216
            mov EDX,0
            cmove EAX,EDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f128:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,4294967232
            cmp AL,128
            jne .L_40f0fb

            mov EAX,2
.L_40f138:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f140:

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,15
            ret 
.L_40f148:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f150:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_40f160

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f160:

            call .L_40f0f0

            cmp AL,2
            sete AL
            ret 
.L_40f16b:

            nop
            nop
            nop
            nop
            nop
.L_40f170:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_40f180

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f180:

            call .L_40f0f0

            cmp AL,3
            sete AL
            ret 
.L_40f18b:

            nop
            nop
            nop
            nop
            nop
.L_40f190:

            xor EAX,EAX
            cmp BYTE PTR [RDI],255
            je .L_40f1a0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f1a0:

            call .L_40f0f0

            cmp AL,3
            seta AL
            ret 
.L_40f1ab:

            nop
            nop
            nop
            nop
            nop
.L_40f1b0:

            cmp DL,16
            mov R9D,16
            cmovbe R9D,EDX
            test DL,DL
            je .L_40f220

            movzx ECX,BYTE PTR [RDI]
            movzx EAX,BYTE PTR [RSI]
            mov EDX,1
            cmp CL,AL
            je .L_40f1eb

            jmp .L_40f230
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f1d8:

            movzx ECX,BYTE PTR [RDI+RDX*1]
            add RDX,1
            movzx R8D,BYTE PTR [RSI+RDX*1-1]
            cmp CL,R8B
            jne .L_40f200
.L_40f1eb:

            cmp DL,R9B
            lea EAX,DWORD PTR [RDX*8]
            jb .L_40f1d8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f200:

            xor ECX,R8D
.L_40f203:

            test CL,CL
            js .L_40f228

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f210:

            add EAX,1
            add CL,CL
            jns .L_40f210

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f220:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f228:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f230:

            xor ECX,EAX
            xor EAX,EAX
            jmp .L_40f203
.L_40f236:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f240:

            xor EDX,EDX
            xor EAX,EAX
            jmp .L_40f25b
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f250:

            add EAX,8
            add RDX,1
            cmp AL,128
            je .L_40f280
.L_40f25b:

            movzx ECX,BYTE PTR [RDI+RDX*1]
            movzx R8D,BYTE PTR [RSI+RDX*1]
            cmp CL,R8B
            je .L_40f250

            xor CL,R8B
            js .L_40f277

            nop
            nop
.L_40f270:

            add EAX,1
            add CL,CL
            jns .L_40f270
.L_40f277:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f280:

            ret 
.L_40f282:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f290:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RDI+8]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            sete AL
            ret 
.L_40f2a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f2b0:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RDI+8]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            setne AL
            ret 
.L_40f2c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f2d0:

            pxor XMM0,XMM0
            push RBP
            lea RAX,QWORD PTR [RDI+15]
            push RBX
.L_40f2da:

            sub RDI,1
            mov EBP,1
            xor R8D,R8D
            xor EBX,EBX
            movups XMMWORD PTR [RDI+1],XMM0
            xor R11D,R11D
.L_40f2ef:

            movzx EDX,BYTE PTR [RSI]
            mov R9D,EDX
            mov ECX,EDX
            and R9D,4294967263
            and ECX,15
            lea R10D,DWORD PTR [R9-65]
            cmp R10B,5
            ja .L_40f328

            add ECX,9
.L_40f30b:

            shl EBX,4
            movzx EDX,CL
            add R8D,1
            or EBX,EDX
            cmp R8B,4
            ja .L_40f33a

            xor EBP,EBP
.L_40f31f:

            add RSI,1
            jmp .L_40f2ef
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40f328:

            cmp DL,58
            je .L_40f348

            test R9B,R9B
            je .L_40f348

            sub EDX,48
            cmp DL,9
            jbe .L_40f30b
.L_40f33a:

            mov EAX,6
            pop RBX
.L_40f340:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f348:

            test R8B,R8B
            je .L_40f3a8

            lea RDX,QWORD PTR [RDI+2]
            cmp RDX,RAX
            ja .L_40f33a

            movzx ECX,BH
            test R9B,R9B
            mov BYTE PTR [RDI+2],BL
            mov BYTE PTR [RDI+1],CL
            mov RDI,RDX
            jne .L_40f3c0
.L_40f367:

            test R11,R11
            jne .L_40f37f

            jmp .L_40f384
          .byte 0x66
          .byte 0x90
.L_40f370:

            sub RDI,1
            movzx EDX,BYTE PTR [RDI+1]
            sub RAX,1
            mov BYTE PTR [RAX+1],DL
.L_40f37f:

            cmp R11,RDI
            jb .L_40f370
.L_40f384:

            cmp RAX,RDI
            jbe .L_40f39d

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f390:

            sub RAX,1
            mov BYTE PTR [RAX+1],0
            cmp RAX,RDI
            jne .L_40f390
.L_40f39d:

            xor EAX,EAX
            pop RBX
.L_40f3a0:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f3a8:

            cmp DL,58
            jne .L_40f367

            test R11,R11
            je .L_40f3b7

            test BPL,BPL
            je .L_40f33a
.L_40f3b7:

            mov R11,RDI
            jmp .L_40f31f
          .byte 0x90
.L_40f3c0:

            xor R8D,R8D
            xor EBX,EBX
            jmp .L_40f31f
.L_40f3ca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40f3d0:

            push RBX
            movzx EAX,WORD PTR [RDI+14]
            mov RBX,RSI
            movzx R9D,WORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_458a84]
            movzx ESI,DX
            sub RSP,8
            mov RCX,-1
            mov EDX,1
            rol AX,8
            movzx EAX,AX
            rol R9W,8
            push RAX
            movzx EAX,WORD PTR [RDI+12]
            movzx R9D,R9W
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+10]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+8]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+6]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+4]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,WORD PTR [RDI+2]
            mov RDI,RBX
            rol AX,8
            movzx EAX,AX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            add RSP,64
            mov RAX,RBX
            pop RBX
            ret 
.L_40f462:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f470:

            mov DWORD PTR [RDI],0
            ret 
.L_40f477:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f480:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
            movzx EBX,BYTE PTR [RSI+78]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            shr BL,7
            test BL,BL
            je .L_40f4d0
.L_40f4a5:

            mov EBX,1
.L_40f4aa:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_40f5bd

            add RSP,104
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f4d0:

            lea R13,QWORD PTR [RSP+48]
            mov RBP,RSI
            mov R12,RDI
            xor ESI,ESI
            mov EDX,40
            mov RDI,RBP
            mov RCX,R13
            call .L_403860

            cmp AX,40
            jne .L_40f4aa

            add R13,24
            mov RDI,R13
            call .L_40ee30

            test AL,AL
            je .L_40f5a8
.L_40f507:

            movzx EAX,BYTE PTR [RSP+54]
            cmp AL,6
            je .L_40f578

            cmp AL,17
            jne .L_40f4aa

            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,40
            mov RDI,RBP
            call .L_403860

            cmp AX,8
            jne .L_40f4aa

            movzx EAX,WORD PTR [RSP+10]
            rol AX,8
            cmp AX,19788
            je .L_40f4a5
.L_40f548:

            movzx EDX,WORD PTR [R12]
            cmp AX,DX
            jne .L_40f55b

            test DX,DX
            jne .L_40f4a5
.L_40f55b:

            movzx EDX,WORD PTR [R12+2]
            cmp AX,DX
            sete BL
            test DX,DX
            setne AL
            and EBX,EAX
            jmp .L_40f4aa
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f578:

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,20
            mov ESI,40
            mov RDI,RBP
            call .L_403860

            cmp AX,20
            jne .L_40f4aa

            movzx EAX,WORD PTR [RSP+18]
            rol AX,8
            jmp .L_40f548
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f5a8:

            mov RDI,R13
            call .L_40f150

            test AL,AL
            jne .L_40f507

            jmp .L_40f4aa
.L_40f5bd:

            call __stack_chk_fail@PLT
.L_40f5c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f5d0:

            movzx EAX,WORD PTR [RDI]
            cmp SI,AX
            je .L_40f608

            movzx EDX,WORD PTR [RDI+2]
            cmp SI,DX
            je .L_40f608

            test AX,AX
            je .L_40f610

            test DX,DX
            mov EAX,3
            je .L_40f5f8

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f5f8:

            mov EAX,1
.L_40f5fd:

            mov WORD PTR [RDI+RAX*2],SI
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f608:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f610:

            xor EAX,EAX
            jmp .L_40f5fd
.L_40f614:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f620:

            cmp SI,WORD PTR [RDI]
            movzx EAX,WORD PTR [RDI+2]
            je .L_40f638

            cmp AX,SI
            je .L_40f63b

            mov EAX,23
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40f638:

            mov WORD PTR [RDI],AX
.L_40f63b:

            xor EAX,EAX
            mov WORD PTR [RDI+2],AX
            xor EAX,EAX
            ret 
.L_40f644:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f650:

            mov BYTE PTR [RSI],0
            cmp WORD PTR [RDI],0
            mov RAX,RDI
            je .L_40f678

            mov BYTE PTR [RSI],1
            cmp WORD PTR [RDI+2],0
            je .L_40f670

            mov BYTE PTR [RSI],2
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f670:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f678:

            ret 
.L_40f67a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40f680:

            push RBP
            push RBX
            mov RBP,RSI
            mov RCX,RDI
            mov EDX,40
            xor ESI,ESI
            sub RSP,8
.L_40f693:

            mov RBX,RDI
            mov RDI,RBP
            call .L_403860

            cmp AX,40
            mov EDX,6
            jne .L_40f6d1

            movzx EAX,BYTE PTR [RBX]
            and EAX,4294967280
            cmp AL,96
            jne .L_40f6d1

            movzx EAX,WORD PTR [RBX+4]
            rol AX,8
            add EAX,40
            cmp WORD PTR [RBP+58],AX
            jne .L_40f6cc

            xor EDX,EDX
            cmp AX,1280
            jbe .L_40f6d1
.L_40f6cc:

            mov EDX,6
.L_40f6d1:

            add RSP,8
.L_40f6d5:

            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_40f6da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40f6e0:

            push RBX
            mov EBX,EDX
            mov EAX,EDX
            xor EDX,EDX
            sub RSP,16
            test BL,BL
            je .L_40f711

            mov DWORD PTR [RSP+12],ESI
            mov QWORD PTR [RSP],RDI
            call .L_401460

            movzx EAX,AL
            movzx ECX,BL
            mov ESI,DWORD PTR [RSP+12]
            cdq 
            mov RDI,QWORD PTR [RSP]
            idiv ECX
            mov EAX,EBX
            sub EAX,EDX
.L_40f711:

            movzx ECX,BYTE PTR [RDI+8]
            mov BYTE PTR [RDI+8],AL
            add ESI,ECX
            add EDX,ESI
            mov DWORD PTR [RDI+4],EDX
            add RSP,16
            pop RBX
            ret 
.L_40f725:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f730:

            lea RAX,QWORD PTR [RIP+.L_40ff10]
            push RBX

            mov RBX,RDI
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov DWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_40fe90]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RDI+32]
            lea RDI,QWORD PTR [RDI+192]
            mov QWORD PTR [RDI-144],RAX
            call .L_404440

            lea RDI,QWORD PTR [RBX+72]
            mov QWORD PTR [RBX+64],0
            mov QWORD PTR [RBX+184],0
            xor EAX,EAX
            and RDI,-8
            sub EBX,EDI
            lea ECX,DWORD PTR [RBX+192]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            pop RBX

            ret 
.L_40f7b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f7c0:

            push RBP
            push RBX
            mov EAX,1133
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,8
.L_40f7d1:

            mov WORD PTR [RSI],AX
            mov BYTE PTR [RSI+2],0
            movzx EAX,BYTE PTR [RDI+1]
            lea ECX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+1],CL
            mov BYTE PTR [RSI+3],AL
            mov RSI,QWORD PTR [RDI+56]
            test RSI,RSI
            je .L_40f830

            mov RDI,RDX
            call .L_40f290

            test AL,AL
            jne .L_40f820

            movzx EAX,BYTE PTR [RBX+2]
            and EAX,63
            or EAX,64
.L_40f804:

            mov BYTE PTR [RBX+2],AL
            movzx EAX,WORD PTR [RBP+2]
            rol AX,8
            mov WORD PTR [RBX+4],AX
            add RSP,8
.L_40f817:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f820:

            and BYTE PTR [RBX+2],63
            sub BYTE PTR [RBX+1],2
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_40f830:

            mov EAX,64
            jmp .L_40f804
.L_40f837:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f840:

            push RBX
.L_40f841:

            mov R10D,ESI
            lea RAX,QWORD PTR [RDI+64]
            lea R9,QWORD PTR [RDI+192]
            xor ECX,ECX
            jmp .L_40f868
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40f858:

            test RCX,RCX
            cmove RCX,RAX
.L_40f85f:

            add RAX,4
            cmp RAX,R9
            je .L_40f8b0
.L_40f868:

            cmp BYTE PTR [RAX+3],0
            mov R8,RAX
            je .L_40f858

            cmp R10W,WORD PTR [RAX]
            jne .L_40f85f

            mov EBX,EDX
            sub BL,BYTE PTR [RAX+2]
            test BL,BL
            jle .L_40f8bf
.L_40f880:

            mov WORD PTR [R8],SI
            mov BYTE PTR [R8+2],DL
            mov RBX,RDI
            mov BYTE PTR [R8+3],5
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            mov ESI,EAX
            mov EDX,1000
            call .L_430d50

            xor EAX,EAX
.L_40f8a7:

            pop RBX
.L_40f8a8:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f8b0:

            test RCX,RCX
            mov EAX,2
            je .L_40f8a7

            mov R8,RCX
            jmp .L_40f880
.L_40f8bf:

            mov EAX,2
            pop RBX
            ret 
.L_40f8c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40f8d0:

            push R15
            push R14
            mov R14D,EDX
            push R13
            lea R13,QWORD PTR [RDI+192]
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R13
            mov EBP,ESI
            sub RSP,40
.L_40f8f0:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+15],0
            mov BYTE PTR [RSP+23],0
            call .L_404570

            cmp BYTE PTR [RBX],0
            je .L_40f988

            test RAX,RAX
            mov R15,RAX
            je .L_40f988

            lea R12,QWORD PTR [RSP+15]
            jmp .L_40f938
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40f930:

            test RBX,RBX
            mov R15,RBX
            je .L_40f988
.L_40f938:

            mov RDI,R15
            call .L_4033c0

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R12
            mov EDX,9
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403860

            cmp BP,WORD PTR [RSP+15]
            jne .L_40f930

            sub R14B,BYTE PTR [RSP+17]
            test R14B,R14B
            jle .L_40f988

            mov RDI,R13
            mov RSI,R15
            call .L_404640

            mov RDI,R15
            call .L_4033b0

            nop
            nop
            nop
            nop
            nop
            nop
.L_40f988:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40f9a7

            add RSP,40
.L_40f99c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_40f9a7:

            call __stack_chk_fail@PLT
.L_40f9ac:

            nop
            nop
            nop
            nop
.L_40f9b0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R14D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            mov R12D,R8D
            sub RSP,56
.L_40f9cd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_401240

            cmp BYTE PTR [RBX],0
            mov QWORD PTR [RSP+31],0
            mov BYTE PTR [RSP+39],0
            mov BYTE PTR [RSP+30],0
            jne .L_40fa20
.L_40f9fa:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40fb66

            add RSP,56
.L_40fa12:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_40fa20:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            mov R13D,EAX
            call .L_404020

            test RAX,RAX
            mov R8,RAX
            je .L_40f9fa

            test R12B,R12B
            je .L_40faa8

            mov WORD PTR [RSP+31],R15W
            mov BYTE PTR [RSP+33],R14B
            mov EAX,1
.L_40fa4c:

            mov QWORD PTR [RSP+8],R8
            mov BYTE PTR [RSP+34],AL
            call .L_401460

            movzx EDX,BYTE PTR [RSP+39]
            and EAX,63
            mov R8,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RSP+31]
            mov RDI,R8
            add EDX,R13D
            add EDX,EAX
            mov DWORD PTR [RSP+35],EDX
            mov EDX,64
            sub EDX,EAX
            mov BYTE PTR [RSP+39],DL
            mov EDX,9
            call .L_403d30

            test EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            je .L_40fb10
.L_40fa96:

            mov RDI,R8
            call .L_4033b0

            jmp .L_40f9fa
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40faa8:

            lea R12,QWORD PTR [RSP+30]
            mov EDX,1
            mov ESI,7
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            mov RCX,R12
            call .L_403860

            movzx EAX,BYTE PTR [RSP+30]
            mov R8,QWORD PTR [RSP+8]
            lea EDX,DWORD PTR [RAX-1]
            cmp AL,1
            mov BYTE PTR [RSP+30],DL
            jbe .L_40fa96

            mov RDI,R8
            mov RCX,R12
            mov EDX,1
            mov ESI,7
            call .L_403ac0

            mov WORD PTR [RSP+31],R15W
            mov BYTE PTR [RSP+33],R14B
            xor EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            jmp .L_40fa4c
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fb10:

            lea RDI,QWORD PTR [RBX+192]
            mov EDX,1
            mov RSI,R8
            lea RBP,QWORD PTR [RBX+32]
            call .L_404580

            cmp RBP,QWORD PTR [RBX+48]
            je .L_40fb60

            mov EDX,DWORD PTR [RSP+35]
            mov EAX,DWORD PTR [RBX+40]
            sub EAX,EDX
            mov EBX,EDX
            test EAX,EAX
            jle .L_40f9fa
.L_40fb41:

            sub EBX,R13D
            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,RBP
            call .L_430d50

            jmp .L_40f9fa
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40fb60:

            mov EBX,DWORD PTR [RSP+35]
            jmp .L_40fb41
.L_40fb66:

            call __stack_chk_fail@PLT
.L_40fb6b:

            nop
            nop
            nop
            nop
            nop
.L_40fb70:

            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov R13,RDX
            mov RDI,RBX
            sub RSP,40
.L_40fb89:

            movzx ESI,WORD PTR [RSI+60]
            mov EDX,6
            lea RCX,QWORD PTR [RSP+18]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+18],AX
            call .L_403860

            cmp AX,1
            jbe .L_40fc40

            movzx EDX,BYTE PTR [RSP+20]
            mov EAX,2
            mov ECX,EDX
            and ECX,4294967232
            test DL,DL
            js .L_40fc15

            test CL,CL
            je .L_40fc30

            movzx ESI,WORD PTR [RSP+22]
.L_40fbd9:

            movzx EDX,BYTE PTR [RSP+21]
            rol SI,8
            mov RDI,RBP
            movzx ESI,SI
            call .L_40f8d0

            movzx ESI,WORD PTR [RSP+22]
            movzx EDX,BYTE PTR [RSP+21]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_40f840

            test EAX,EAX
            je .L_40fc50

            test R12B,R12B
            mov EDX,0
            cmovne EAX,EDX
.L_40fc15:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_40fc7a

            add RSP,40
.L_40fc29:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_40fc30:

            movzx ESI,WORD PTR [R13+14]
            mov WORD PTR [RSP+22],SI
            jmp .L_40fbd9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40fc40:

            mov EAX,2
            jmp .L_40fc15
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fc50:

            movzx EDX,WORD PTR [RSP+22]
            movzx ECX,BYTE PTR [RSP+21]
            movzx R8D,R12B
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            rol DX,8
            movzx EDX,DX
            call .L_40f9b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_40fc15
.L_40fc7a:

            call __stack_chk_fail@PLT
.L_40fc7f:

            nop
.L_40fc80:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,56
.L_40fc96:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_401240

            mov EBP,EAX
            lea RAX,QWORD PTR [R13+192]
            mov QWORD PTR [RSP+31],0
            mov BYTE PTR [RSP+39],0
            lea R14,QWORD PTR [RSP+31]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_404570

            test RAX,RAX
            mov R15,RAX
            jne .L_40fd83

            jmp .L_40fe47
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40fce8:

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_404020

            test RAX,RAX
            mov RSI,RAX
            je .L_40fd31

            cmp BYTE PTR [RSP+34],1
            jbe .L_40fd17

            movzx EAX,BYTE PTR [RAX+78]
            and EAX,4294967235
            or EAX,20
            mov BYTE PTR [RSI+78],AL
.L_40fd17:

            mov RDI,R13
            mov QWORD PTR [RSP+8],RSI
            call .L_430ad0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RAX
            call .L_40d7b0
.L_40fd31:

            call .L_401460

            movzx EDX,BYTE PTR [RSP+39]
            and EAX,63
            mov ECX,64
            sub ECX,EAX
            mov RDI,R15
            mov BYTE PTR [RSP+39],CL
            mov RCX,R14
            add EDX,EBP
            add EDX,EAX
            movzx EAX,WORD PTR [R15+58]
            mov DWORD PTR [RSP+35],EDX
            mov EDX,9
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403ac0

            mov EAX,DWORD PTR [RSP+35]
.L_40fd70:

            sub EAX,EBP
            cmp EBX,EAX
            cmova EBX,EAX
.L_40fd77:

            test R12,R12
            mov R15,R12
            je .L_40fe30
.L_40fd83:

            mov RDI,R15
            call .L_4033c0

            mov R12,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R14
            mov EDX,9
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403860

            mov EAX,DWORD PTR [RSP+35]
            cmp EBP,EAX
            js .L_40fd70

            movzx EAX,BYTE PTR [RSP+34]
            add EAX,1
            cmp AL,BYTE PTR [R13]
            mov BYTE PTR [RSP+34],AL
            jb .L_40fce8

            mov RDI,QWORD PTR [RSP]
            mov RSI,R15
            call .L_404640

            movzx EAX,BYTE PTR [RSP+34]
            cmp AL,BYTE PTR [R13]
            jne .L_40fe70

            cmp AL,1
            jbe .L_40fdf5

            movzx EAX,BYTE PTR [R15+78]
            and EAX,4294967235
            or EAX,20
            mov BYTE PTR [R15+78],AL
.L_40fdf5:

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-9]
            movzx ESI,SI
            call .L_403420

            mov RDI,R13
            call .L_430ad0

            mov RSI,R15
            mov RDI,RAX
            mov R15,R12
            call .L_40d7b0

            test R12,R12
            jne .L_40fd83

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fe30:

            cmp EBX,-1
            je .L_40fe47

            call .L_401240

            lea RDI,QWORD PTR [R13+32]
            mov EDX,EBX
            mov ESI,EAX
            call .L_430d50
.L_40fe47:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_40fe7d

            add RSP,56
.L_40fe5b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fe70:

            mov RDI,R15
            call .L_4033b0

            jmp .L_40fd77
.L_40fe7d:

            call __stack_chk_fail@PLT
.L_40fe82:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40fe90:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402af0

            add RSP,8
            mov RDI,RAX
            jmp .L_40fc80
.L_40fead:

            nop
            nop
            nop
.L_40feb0:

            lea RAX,QWORD PTR [RDI+67]
            lea RCX,QWORD PTR [RDI+195]
            xor ESI,ESI
            nop
            nop
            nop
.L_40fec0:

            movzx EDX,BYTE PTR [RAX]
            test DL,DL
            je .L_40fed1

            sub EDX,1
            mov ESI,1
            mov BYTE PTR [RAX],DL
.L_40fed1:

            add RAX,4
            cmp RAX,RCX
            jne .L_40fec0

            test SIL,SIL
            jne .L_40fee8

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40fee8:

            push RBX
            mov RBX,RDI
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_40ff02:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff10:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402af0

            add RSP,8
            mov RDI,RAX
            jmp .L_40feb0
.L_40ff2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff30:

            mov QWORD PTR [RDI],0
            ret 
.L_40ff38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff40:

            mov RDX,QWORD PTR [RDI]
            test RDX,RDX
            je .L_40ff66

            cmp RDX,RSI
            je .L_40ff70

            mov RAX,RDX
            jmp .L_40ff5d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_40ff58:

            cmp RSI,RAX
            je .L_40ff70
.L_40ff5d:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_40ff58
.L_40ff66:

            mov QWORD PTR [RSI+24],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI],RSI
            ret 
.L_40ff70:

            mov EAX,24
            ret 
.L_40ff76:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_40ff80:

            mov RDX,QWORD PTR [RDI]
            cmp RDX,RSI
            je .L_40ffe0

            test RDX,RDX
            je .L_40ffb1

            mov RAX,QWORD PTR [RDX+24]
            cmp RSI,RAX
            jne .L_40ffac

            jmp .L_40ffc0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ffa0:

            mov RDX,QWORD PTR [RAX+24]
            cmp RDX,RSI
            je .L_40ffc3

            mov RAX,RDX
.L_40ffac:

            test RAX,RAX
            jne .L_40ffa0
.L_40ffb1:

            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_40ffc0:

            mov RAX,RDX
.L_40ffc3:

            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_40ffe0:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI],RAX
            mov QWORD PTR [RSI+24],0
            xor EAX,EAX
            ret 
.L_40fff2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410000:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13D,4294967295
            push RBP
            push RBX
            mov R14,RSI
            mov RBP,RDX
            mov R12D,R13D
            sub RSP,24
.L_410020:

            mov RBX,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_410075

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410040:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f240

            movzx EDX,BYTE PTR [RBX+16]
            mov BYTE PTR [RSP+7],AL
            cmp DL,AL
            ja .L_41006c

            jae .L_41005f

            mov BYTE PTR [RSP+7],DL
            mov EAX,EDX
.L_41005f:

            cmp AL,R12B
            jl .L_41006c

            movzx R13D,BYTE PTR [RBX+17]
            mov R12D,EAX
.L_41006c:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            jne .L_410040
.L_410075:

            mov RDI,R15
            call .L_430ad0

            mov RBX,QWORD PTR [RAX+24]
            test RBX,RBX
            je .L_4100c1

            lea R15,QWORD PTR [RSP+7]
            nop
            nop
            nop
            nop
            nop
.L_410090:

            mov RAX,QWORD PTR [RBX]
            mov RCX,R15
            mov RDX,RBP
            mov RSI,R14
            mov RDI,RBX
            call QWORD PTR [RAX+16]

            test EAX,EAX
            jne .L_4100b8

            movzx EAX,BYTE PTR [RSP+7]
            cmp AL,R12B
            jle .L_4100b8

            movzx R13D,BYTE PTR [RBX+24]
            mov R12D,EAX
.L_4100b8:

            mov RBX,QWORD PTR [RBX+32]
            test RBX,RBX
            jne .L_410090
.L_4100c1:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_4100e3

            add RSP,24
.L_4100d8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4100e3:

            call __stack_chk_fail@PLT
.L_4100e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4100f0:

            lea RAX,QWORD PTR [RIP+.L_676d38]
            mov QWORD PTR [RDI+8],0
            mov BYTE PTR [RDI+24],DL
            mov BYTE PTR [RDI+25],0
            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RDI+40]
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RDI+72]
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+104]
            mov QWORD PTR [RDI+128],RAX
            lea RAX,QWORD PTR [RDI+136]
            mov QWORD PTR [RDI+160],RAX
            lea RAX,QWORD PTR [RDI+168]
            mov QWORD PTR [RDI+184],RAX
            lea RAX,QWORD PTR [RDI+192]
            mov QWORD PTR [RDI+208],RAX
            lea RAX,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RDI+16],RAX
            ret 
.L_410162:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410170:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+16]
            test RBX,RBX
            je .L_4101b0

            mov RBP,RSI
            jmp .L_410191
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410188:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            je .L_4101b0
.L_410191:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410188

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4101b0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_4101b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4101c0:

            mov RDX,QWORD PTR [RDI+16]
            lea RCX,QWORD PTR [RIP+.L_676800]
            cmp RDX,RCX
            je .L_410228

            test RDX,RDX
            je .L_410206

            lea RSI,QWORD PTR [RIP+.L_6767c0]
            cmp RDX,RSI
            je .L_410238

            mov RAX,QWORD PTR [RDX+16]
            cmp RAX,RCX
            jne .L_410201

            jmp .L_41023e
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4101f0:

            cmp RAX,RSI
            je .L_410238

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RCX
            je .L_410248

            mov RAX,RDX
.L_410201:

            test RAX,RAX
            jne .L_4101f0
.L_410206:

            sub RSP,8

            call .L_430b10

            mov ESI,4096
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410228:

            lea RAX,QWORD PTR [RIP+.L_6767c0]
            mov QWORD PTR [RDI+16],RAX
            jmp .L_410206
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410238:

            mov EAX,24
            ret 
.L_41023e:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410248:

            mov QWORD PTR [RAX+16],RSI
            jmp .L_410206
.L_41024e:

            nop
            nop
.L_410250:

            mov RDX,QWORD PTR [RDI+16]
            lea RCX,QWORD PTR [RIP+.L_6767c0]
            cmp RDX,RCX
            je .L_4102c0

            test RDX,RDX
            je .L_410281

            mov RAX,QWORD PTR [RDX+16]
            cmp RAX,RCX
            jne .L_41027c

            jmp .L_410290
.L_410270:

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RCX
            je .L_410298

            mov RAX,RDX
.L_41027c:

            test RAX,RAX
            jne .L_410270
.L_410281:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410290:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
.L_410298:

            lea RSI,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RAX+16],RSI
.L_4102a3:

            sub RSP,8

            call .L_430b10

            mov ESI,8192
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
            add RSP,8
            ret 
.L_4102c0:

            lea RAX,QWORD PTR [RIP+.L_676800]
            mov QWORD PTR [RDI+16],RAX
            jmp .L_4102a3
.L_4102cd:

            nop
            nop
            nop
.L_4102d0:

            mov RDX,QWORD PTR [RDI+16]
            test RDX,RDX
            je .L_4102f6

            cmp RDX,RSI
            je .L_410320

            mov RAX,RDX
            jmp .L_4102ed
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4102e8:

            cmp RSI,RAX
            je .L_410320
.L_4102ed:

            mov RAX,QWORD PTR [RAX+16]
            test RAX,RAX
            jne .L_4102e8
.L_4102f6:

            sub RSP,8
            mov QWORD PTR [RSI+16],RDX
            mov QWORD PTR [RDI+16],RSI
            call .L_430b10

            mov ESI,4096
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410320:

            mov EAX,24
            ret 
.L_410326:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410330:

            mov RDX,QWORD PTR [RDI+16]
            cmp RDX,RSI
            je .L_410360

            test RDX,RDX
            jne .L_410348

            jmp .L_410351
.L_410340:

            cmp RSI,RAX
            je .L_410388

            mov RDX,RAX
.L_410348:

            mov RAX,QWORD PTR [RDX+16]
            test RAX,RAX
            jne .L_410340
.L_410351:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410360:

            mov RAX,QWORD PTR [RDX+16]
            mov QWORD PTR [RDI+16],RAX
.L_410368:

            sub RSP,8
            call .L_430b10

            mov ESI,8192
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410388:

            mov RAX,QWORD PTR [RSI+16]
            mov QWORD PTR [RDX+16],RAX
            jmp .L_410368
.L_410392:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4103a0:

            movzx ECX,BYTE PTR [RSI]
            mov EAX,23
            cmp CL,1
            ja .L_4103dd

            movzx EAX,CL
            lea RAX,QWORD PTR [RAX+RAX*2]
            lea RAX,QWORD PTR [RDI+RAX*8+168]
            nop
            nop
            nop
            nop
.L_4103c0:

            cmp QWORD PTR [RAX+16],RAX
            lea EDI,DWORD PTR [RCX+1]
            jne .L_4103e0

            add RAX,24
            cmp DIL,2
            mov ECX,1
            jne .L_4103c0

            mov EAX,23
.L_4103dd:

            ret 
          .byte 0x90
.L_4103e0:

            movdqu XMM0,XMMWORD PTR [RAX]
            xor EAX,EAX
            movups XMMWORD PTR [RDX],XMM0
            mov BYTE PTR [RSI],DIL
            ret 
.L_4103ed:

            nop
            nop
            nop
.L_4103f0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,QWORD PTR [RDI+16]
            mov RBP,RSI
            test RBX,RBX
            jne .L_410411

            jmp .L_410430
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410408:

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            je .L_410430
.L_410411:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410408

            pop RBX
            mov EAX,24
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410430:

            mov RDX,QWORD PTR [R12+184]
            lea RAX,QWORD PTR [R12+168]
            cmp RDX,RAX
            je .L_410468

            mov RDX,QWORD PTR [R12+208]
            lea RCX,QWORD PTR [R12+192]
            mov EAX,3
            cmp RDX,RCX
            je .L_410468

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410468:

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RDI,R12
            movups XMMWORD PTR [RDX],XMM0
            mov RAX,QWORD PTR [R12+16]
            mov QWORD PTR [RDX+16],RAX
            mov QWORD PTR [R12+16],RDX
            call .L_430b10

            mov ESI,4096
            mov RDI,RAX
            call .L_402d30

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_41049a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4104a0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_4104aa:

            mov RBX,QWORD PTR [RDI+16]
            test RBX,RBX
            je .L_410530

            mov RBP,RSI
            mov R13,RDI
            xor R12D,R12D
            jmp .L_4104cf
          .byte 0x66
          .byte 0x90
.L_4104c0:

            mov RAX,QWORD PTR [RBX+16]
            mov R12,RBX
            test RAX,RAX
            je .L_410530

            mov RBX,RAX
.L_4104cf:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_4104c0

            lea RDX,QWORD PTR [R13+168]
            mov EAX,7
            cmp RBX,RDX
            jb .L_410535

            lea RDX,QWORD PTR [R13+216]
            cmp RBX,RDX
            jae .L_410535

            test R12,R12
            mov RAX,QWORD PTR [RBX+16]
            je .L_410540

            mov QWORD PTR [R12+16],RAX
.L_410509:

            mov RDI,R13
            mov QWORD PTR [RBX+16],RBX
            call .L_430b10

            mov ESI,8192
            mov RDI,RAX
            call .L_402d30

            add RSP,8
.L_410526:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_410530:

            mov EAX,23
.L_410535:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_410540:

            mov QWORD PTR [R13+16],RAX
            jmp .L_410509
.L_410546:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410550:

            push RBX
            lea RSI,QWORD PTR [RDI+168]
            cmp RSI,QWORD PTR [RDI+184]
            mov RBX,RDI
            je .L_410569

            call .L_4104a0
.L_410569:

            lea RSI,QWORD PTR [RBX+192]
            cmp RSI,QWORD PTR [RBX+208]
            je .L_410588

            mov RDI,RBX
            pop RBX
            jmp .L_4104a0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410588:

            pop RBX
            ret 
.L_41058a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_410590:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_4105b6

            cmp RDX,RSI
            je .L_4105e8

            mov RAX,RDX
            jmp .L_4105ad
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4105a8:

            cmp RSI,RAX
            je .L_4105e8
.L_4105ad:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_4105a8
.L_4105b6:

            push RBX
            mov RBX,RSI
            mov QWORD PTR [RSI+24],RDX
            mov QWORD PTR [RDI+8],RSI
            call .L_430b10

            movzx EDX,BYTE PTR [RBX+17]
            mov RDI,RAX
            shr DL,7
            cmp DL,1
            sbb ESI,ESI
            and ESI,4294967265
            add ESI,32
            call .L_402d30

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4105e8:

            mov EAX,24
            ret 
.L_4105ee:

            nop
            nop
.L_4105f0:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            je .L_410620

            test RDX,RDX
            jne .L_410608

            jmp .L_410611
.L_410600:

            cmp RSI,RAX
            je .L_410650

            mov RDX,RAX
.L_410608:

            mov RAX,QWORD PTR [RDX+24]
            test RAX,RAX
            jne .L_410600
.L_410611:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410620:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI+8],RAX
.L_410628:

            push RBX
            mov RBX,RSI
            call .L_430b10

            movzx EDX,BYTE PTR [RBX+17]
            mov RDI,RAX
            shr DL,7
            cmp DL,1
            sbb ESI,ESI
            and ESI,4294967234
            add ESI,64
            call .L_402d30

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x90
.L_410650:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDX+24],RAX
            jmp .L_410628
.L_41065a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_410660:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_410667:

            mov RDI,RSI
            mov RBP,RSI
            call .L_40ee30

            test AL,AL
            jne .L_4106f0

            mov RBX,QWORD PTR [R12+8]
            test RBX,RBX
            jne .L_410691

            jmp .L_410700
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410688:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_410700
.L_410691:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410688

            lea RAX,QWORD PTR [R12+40]
            cmp RBX,RAX
            jb .L_4106f0

            add R12,168
            cmp RBX,R12
            jae .L_4106f0

            movzx EAX,BYTE PTR [RBP+16]
            mov BYTE PTR [RBX+16],AL
            movzx EAX,BYTE PTR [RBX+17]
            movzx EDX,BYTE PTR [RBP+17]
            and EAX,4294967294
            and EDX,1
            or EAX,EDX
            mov BYTE PTR [RBX+17],AL
            movzx EDX,BYTE PTR [RBP+17]
            and EAX,4294967293
            and EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+17],AL
            xor EAX,EAX
            pop RBX
.L_4106e2:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4106f0:

            pop RBX
            mov EAX,7
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410700:

            lea RAX,QWORD PTR [R12+40]
            lea RDX,QWORD PTR [R12+168]
.L_41070d:

            cmp QWORD PTR [RAX+24],RAX
            je .L_410730

            add RAX,32
            cmp RAX,RDX
            jne .L_41070d

            pop RBX
            mov EAX,3
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410730:

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RDI,R12
            movups XMMWORD PTR [RAX],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movups XMMWORD PTR [RAX+16],XMM0
            mov RDX,QWORD PTR [R12+8]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [R12+8],RAX
            call .L_430b10

            mov ESI,1
            mov RDI,RAX
            call .L_402d30

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_41076b:

            nop
            nop
            nop
            nop
            nop
.L_410770:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_41077a:

            mov RBX,QWORD PTR [RDI+8]
            test RBX,RBX
            je .L_410800

            mov RBP,RSI
            mov R13,RDI
            xor R12D,R12D
            jmp .L_41079f
          .byte 0x66
          .byte 0x90
.L_410790:

            mov RAX,QWORD PTR [RBX+24]
            mov R12,RBX
            test RAX,RAX
            je .L_410800

            mov RBX,RAX
.L_41079f:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410790

            lea RDX,QWORD PTR [R13+40]
            mov EAX,7
            cmp RBX,RDX
            jb .L_410805

            lea RDX,QWORD PTR [R13+168]
            cmp RBX,RDX
            jae .L_410805

            test R12,R12
            mov RAX,QWORD PTR [RBX+24]
            je .L_410810

            mov QWORD PTR [R12+24],RAX
.L_4107d6:

            mov RDI,R13
            mov QWORD PTR [RBX+24],RBX
            call .L_430b10

            mov ESI,2
            mov RDI,RAX
            call .L_402d30

            add RSP,8
.L_4107f3:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410800:

            mov EAX,23
.L_410805:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_410810:

            mov QWORD PTR [R13+8],RAX
            jmp .L_4107d6
.L_410816:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410820:

            push R12
            lea R12,QWORD PTR [RDI+168]
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+40]
            mov RBP,RDI
.L_410832:

            cmp QWORD PTR [RBX+24],RBX
            je .L_410843

            mov RSI,RBX
            mov RDI,RBP
            call .L_410770
.L_410843:

            add RBX,32
            cmp RBX,R12
            jne .L_410832

            pop RBX
            pop RBP
            pop R12
            ret 
.L_410851:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410860:

            push RBP
            push RBX
            sub RSP,8
            mov RBX,QWORD PTR [RDI+8]
            test RBX,RBX
            je .L_4108a0

            mov RBP,RSI
            jmp .L_410881
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410878:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_4108a0
.L_410881:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410878

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4108a0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_4108a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4108b0:

            mov QWORD PTR [RDI+56],RSI
            ret 
.L_4108b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4108c0:

            push RBX
            mov RDI,QWORD PTR [RDI+56]
            mov EBX,ESI
            call .L_430ad0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40d1e0
.L_4108db:

            nop
            nop
            nop
            nop
            nop
.L_4108e0:

            pxor XMM0,XMM0
            mov RCX,QWORD PTR [RDI+56]
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+36],0
            mov QWORD PTR [RDI+40],RSI
            mov QWORD PTR [RDI+48],RDX
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            mov RDX,QWORD PTR [RCX+8]
            test RDX,RDX
            je .L_41092e

            cmp RDI,RDX
            je .L_410936

            mov RAX,RDX
            jmp .L_410925
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410920:

            cmp RDI,RAX
            je .L_410936
.L_410925:

            mov RAX,QWORD PTR [RAX+64]
            test RAX,RAX
            jne .L_410920
.L_41092e:

            mov QWORD PTR [RDI+64],RDX
            mov QWORD PTR [RCX+8],RDI
.L_410936:

            xor EAX,EAX
            ret 
.L_410939:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410940:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            mov EAX,DWORD PTR [RSI+16]
            test AX,AX
            mov DWORD PTR [RDI+16],EAX
            jne .L_41096f

            mov RCX,QWORD PTR [RDI+56]
            mov ESI,4294950912
            movzx EAX,WORD PTR [RCX]
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ESI
            mov WORD PTR [RCX],DX
            mov WORD PTR [RDI+16],AX
.L_41096f:

            xor EAX,EAX
            ret 
.L_410972:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410980:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+20],XMM0
            mov EAX,DWORD PTR [RSI+16]
            mov DWORD PTR [RDI+36],EAX
            xor EAX,EAX
            ret 
.L_410991:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4109a0:

            mov RAX,QWORD PTR [RDI+56]
            mov RDX,QWORD PTR [RAX+8]
            cmp RDI,RDX
            je .L_410a10

            test RDX,RDX
            je .L_4109d1

            mov RAX,QWORD PTR [RDX+64]
            cmp RDI,RAX
            jne .L_4109cc

            jmp .L_4109f8
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4109c0:

            mov RDX,QWORD PTR [RAX+64]
            cmp RDI,RDX
            je .L_410a00

            mov RAX,RDX
.L_4109cc:

            test RAX,RAX
            jne .L_4109c0
.L_4109d1:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+64],0
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+36],0
            xor EAX,EAX
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4109f8:

            mov RAX,RDX
            nop
            nop
            nop
            nop
            nop
.L_410a00:

            mov RDX,QWORD PTR [RDI+64]
            mov QWORD PTR [RAX+64],RDX
            jmp .L_4109d1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410a10:

            mov RDX,QWORD PTR [RDI+64]
            mov QWORD PTR [RAX+8],RDX
            jmp .L_4109d1
.L_410a1a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_410a20:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,80
.L_410a2e:

            movdqu XMM0,XMMWORD PTR [RDX]
            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40ede0

            test AL,AL
            je .L_410a75

            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+16],XMM0
.L_410a75:

            cmp WORD PTR [RBX+16],0
            jne .L_410a99

            mov RCX,QWORD PTR [RBX+56]
            mov ESI,4294950912
            movzx EAX,WORD PTR [RCX]
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ESI
            mov WORD PTR [RCX],DX
            mov WORD PTR [RBX+16],AX
.L_410a99:

            lea RDI,QWORD PTR [RBP+16]
            call .L_40ede0

            test AL,AL
            jne .L_410b60
.L_410aaa:

            movzx EAX,WORD PTR [RSP+50]
            test AX,AX
            jne .L_410ac6

            movzx EAX,WORD PTR [RBX+36]
            test AX,AX
            je .L_410b50

            mov WORD PTR [RSP+50],AX
.L_410ac6:

            rol AX,8
            movzx EDX,WORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+8]
            mov WORD PTR [RSP+10],AX
            movzx EAX,WORD PTR [R12+58]
            mov RDI,R12
            rol DX,8
            add EAX,8
            mov WORD PTR [RSP+8],DX
            mov EDX,8
            rol AX,8
            mov WORD PTR [RSP+12],AX
            xor EAX,EAX
            mov WORD PTR [RSP+14],AX
            call .L_403da0

            test EAX,EAX
            je .L_410b28
.L_410b0b:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_410b7c

            add RSP,80
.L_410b1f:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410b28:

            xor ESI,ESI
            mov RDI,R12
            call .L_403550

            mov RDI,QWORD PTR [RBX+56]
            call .L_430ad0

            mov ECX,17
            mov RDX,RBP
            mov RSI,R12
            mov RDI,RAX
            call .L_40e0d0

            jmp .L_410b0b
.L_410b50:

            mov EAX,7
            jmp .L_410b0b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410b60:

            lea RDI,QWORD PTR [RBX+20]
            call .L_40ede0

            test AL,AL
            jne .L_410b50

            movdqu XMM0,XMMWORD PTR [RBX+20]
            movaps XMMWORD PTR [RSP+32],XMM0
            jmp .L_410aaa
.L_410b7c:

            call __stack_chk_fail@PLT
.L_410b81:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410b90:

            mov EAX,4294950912
            mov QWORD PTR [RDI+8],0
            mov WORD PTR [RDI],AX
            ret 
.L_410ba1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410bb0:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_410bd6

            cmp RDX,RSI
            je .L_410bde

            mov RAX,RDX
            jmp .L_410bcd
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410bc8:

            cmp RSI,RAX
            je .L_410bde
.L_410bcd:

            mov RAX,QWORD PTR [RAX+64]
            test RAX,RAX
            jne .L_410bc8
.L_410bd6:

            mov QWORD PTR [RSI+64],RDX
            mov QWORD PTR [RDI+8],RSI
.L_410bde:

            xor EAX,EAX
            ret 
.L_410be1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410bf0:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            je .L_410c50

            test RDX,RDX
            je .L_410c21

            mov RAX,QWORD PTR [RDX+64]
            cmp RSI,RAX
            jne .L_410c1c

            jmp .L_410c30
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410c10:

            mov RDX,QWORD PTR [RAX+64]
            cmp RSI,RDX
            je .L_410c33

            mov RAX,RDX
.L_410c1c:

            test RAX,RAX
            jne .L_410c10
.L_410c21:

            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410c30:

            mov RAX,RDX
.L_410c33:

            mov RDX,QWORD PTR [RSI+64]
            mov QWORD PTR [RAX+64],RDX
            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410c50:

            mov RAX,QWORD PTR [RSI+64]
            mov QWORD PTR [RDI+8],RAX
            mov QWORD PTR [RSI+64],0
            xor EAX,EAX
            ret 
.L_410c63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410c70:

            movzx EAX,WORD PTR [RDI]
            mov ECX,4294950912
            lea EDX,DWORD PTR [RAX+1]
            cmp AX,-1
            cmove EDX,ECX
            mov WORD PTR [RDI],DX
            ret 
.L_410c86:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410c90:

            push RBX
            mov EBX,ESI
            call .L_430ad0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40d1e0
.L_410ca7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410cb0:

            push R12
            push RBP
            mov R12D,ECX
            push RBX
            mov RBP,RDX
            mov RBX,RSI
            call .L_430ad0

            mov ECX,R12D
            mov RDX,RBP
            mov RSI,RBX
            pop RBX
            pop RBP
            pop R12
            mov RDI,RAX
            jmp .L_40e0d0
.L_410cd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410ce0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,16
.L_410cec:

            movzx ECX,WORD PTR [RSI+58]
            sub CX,WORD PTR [RSI+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp CX,7
            jbe .L_410d70

            lea R14,QWORD PTR [RDX+16]
            movzx EBX,CX
            mov R12,RDX
            mov RBP,RSI
            mov ECX,17
            mov EDX,EBX
            mov RSI,R12
            mov R13,RDI
            mov RDI,R14
            call .L_40d210

            movzx EDX,WORD PTR [RBP+60]
            movzx ESI,AX
            mov ECX,EBX
            mov RDI,RBP
            call .L_404270

            mov EDX,EAX
            mov EAX,2
            cmp DX,-1
            je .L_410d80
.L_410d4a:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_410e7e

            add RSP,16
.L_410d62:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_410d70:

            mov EAX,6
            jmp .L_410d4a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410d80:

            movzx ESI,WORD PTR [RBP+60]
            mov RCX,RSP
            mov EDX,8
            mov RDI,RBP
            call .L_403860

            cmp AX,8
            jne .L_410d70

            mov ESI,8
            mov RDI,RBP
            call .L_4034e0

            movzx EAX,WORD PTR [RSP]
            rol AX,8
            mov WORD PTR [R12+34],AX
            movzx EAX,WORD PTR [RSP+2]
            mov EDX,EAX
            rol DX,8
            mov WORD PTR [R12+32],DX
            mov RBX,QWORD PTR [R13+8]
            test RBX,RBX
            jne .L_410ddd

            jmp .L_410e21
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410dd8:

            movzx EAX,WORD PTR [RSP+2]
.L_410ddd:

            rol AX,8
            cmp WORD PTR [RBX+16],AX
            jne .L_410e18

            movzx EAX,BYTE PTR [RBX+18]
            test AL,AL
            je .L_410df6

            cmp AL,BYTE PTR [R12+36]
            jne .L_410e18
.L_410df6:

            mov RDI,R12
            call .L_40ee50

            test AL,AL
            je .L_410e30
.L_410e02:

            movzx EAX,WORD PTR [RBX+36]
            test AX,AX
            jne .L_410e50
.L_410e0b:

            mov RDI,QWORD PTR [RBX+48]
            mov RDX,R12
            mov RSI,RBP
            call QWORD PTR [RBX+40]
.L_410e18:

            mov RBX,QWORD PTR [RBX+64]
            test RBX,RBX
            jne .L_410dd8
.L_410e21:

            xor EAX,EAX
            jmp .L_410d4a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410e30:

            mov RDI,RBX
            call .L_40ede0

            test AL,AL
            jne .L_410e02

            mov RSI,R12
            mov RDI,RBX
            call .L_40f2b0

            test AL,AL
            je .L_410e02

            jmp .L_410e18
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_410e50:

            movzx EDX,WORD PTR [RSP]
            rol DX,8
            cmp AX,DX
            jne .L_410e18

            lea R13,QWORD PTR [RBX+20]
            mov RDI,R13
            call .L_40ede0

            test AL,AL
            jne .L_410e0b

            mov RSI,R14
            mov RDI,R13
            call .L_40f2b0

            test AL,AL
            je .L_410e0b

            jmp .L_410e18
.L_410e7e:

            call __stack_chk_fail@PLT
.L_410e83:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_410e90:

            push RBX
            mov RBX,RSI
            mov ESI,EDX
            mov RDI,RBX
            movzx ESI,SI
            sub RSP,16

            movzx ECX,WORD PTR [RBX+58]
            mov WORD PTR [RSP+12],DX
            movzx EDX,WORD PTR [RBX+60]
            sub ECX,EDX
            movzx ECX,CX
            call .L_404270

            mov EDX,EAX
            cmp AX,-1
            lea RCX,QWORD PTR [RSP+12]
            not EDX
            mov RDI,RBX
            cmovne EAX,EDX
            mov EDX,2
            rol AX,8
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBX+60]
            lea ESI,DWORD PTR [RAX+6]
            movzx ESI,SI
            call .L_403ac0

            add RSP,16

            xor EAX,EAX
            pop RBX
            ret 
.L_410eef:

            nop
.L_410ef0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RSI
            mov EDX,40
            sub RSP,56
            movzx ESI,WORD PTR [RSI+60]
            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,40
            je .L_410f50
.L_410f2a:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_410fd9

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410f50:

            lea RBX,QWORD PTR [R13+96]
            xor EBP,EBP
            add R12,24
            jmp .L_410f6c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_410f60:

            add EBP,1
            add RBX,40
            cmp EBP,10
            je .L_410f2a
.L_410f6c:

            mov EAX,DWORD PTR [RBX+36]
            test EAX,EAX
            je .L_410f60

            mov RSI,R12
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_410f60

            movsxd RBP,EBP
            lea RAX,QWORD PTR [R13+130]
            lea RSI,QWORD PTR [R13+530]
            lea RDX,QWORD PTR [RBP+RBP*4]
            lea RCX,QWORD PTR [R13+RDX*8]
            nop
            nop
            nop
.L_410fa0:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+130]
            jbe .L_410fb0

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_410fb0:

            add RAX,40
            cmp RAX,RSI
            jne .L_410fa0

            lea RAX,QWORD PTR [RBP+RBP*4]
            lea RAX,QWORD PTR [R13+RAX*8]
            mov BYTE PTR [RAX+130],9
            mov DWORD PTR [RAX+132],0
            jmp .L_410f2a
.L_410fd9:

            call __stack_chk_fail@PLT
.L_410fde:

            nop
            nop
.L_410fe0:

            cmp BYTE PTR [RCX],1
            je .L_410ff0
.L_410fe5:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_410ff0:

            cmp BYTE PTR [RCX+1],0
            jne .L_410fe5

            jmp .L_410ef0
.L_410ffb:

            nop
            nop
            nop
            nop
            nop
.L_411000:

            push R13
            lea RAX,QWORD PTR [RIP+.L_458ae8]
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R13,QWORD PTR [RDI+32]
            lea R12,QWORD PTR [RDI+64]
            lea RBP,QWORD PTR [RDI+496]
            sub RSP,8
.L_411023:

            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_411e90]
            lea RDX,QWORD PTR [RBX+130]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_458aed]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_412210]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_458af2]
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_411c40]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RIP+.L_410fe0]
            mov QWORD PTR [RBX+80],RDI
            mov QWORD PTR [RDI+88],0
            mov QWORD PTR [RDI+496],RAX
            lea RAX,QWORD PTR [RIP+.L_412300]
            mov QWORD PTR [RBX+504],RDI
            mov QWORD PTR [RDI+512],0
            mov DWORD PTR [RDI+528],0
            mov QWORD PTR [RDI+520],RAX
            lea RAX,QWORD PTR [RDI+520]
            mov QWORD PTR [RDI+96],0
            mov QWORD PTR [RDI+488],0
            lea RDI,QWORD PTR [RDI+104]
            mov QWORD PTR [RDI+432],RAX
            mov EAX,EBX
            and RDI,-8
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+496]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            nop
            nop
            nop
            nop
            nop
.L_411100:

            mov BYTE PTR [RDX],AL
            add EAX,1
            add RDX,40
            cmp AL,10
            jne .L_411100

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,R13
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,R12
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            mov RDI,RAX
            call .L_430ad0

            add RSP,8
.L_411166:

            mov RSI,RBP
            lea RDI,QWORD PTR [RAX+88]
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_43aab0
.L_411178:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411180:

            mov RDX,RDI
            mov QWORD PTR [RDI+96],0
            mov QWORD PTR [RDI+488],0
            lea RDI,QWORD PTR [RDI+104]
            mov EAX,EDX
            and RDI,-8
            sub EAX,EDI
            lea ECX,DWORD PTR [RAX+496]
            xor EAX,EAX
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [RDX+130]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4111c0:

            mov BYTE PTR [RDI],AL
            add EAX,1
            add RDI,40
            cmp AL,10
            jne .L_4111c0

            ret 
.L_4111cf:

            nop
.L_4111d0:

            cmp SIL,9
            mov EAX,7
            ja .L_411210

            movzx EAX,SIL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movdqu XMM0,XMMWORD PTR [RDI+RAX*8+96]
            lea RAX,QWORD PTR [RDI+RAX*8]
            movups XMMWORD PTR [RDX],XMM0
            movzx ECX,WORD PTR [RAX+124]
            mov WORD PTR [RDX+16],CX
            cmp DWORD PTR [RAX+132],2
            movzx EAX,BYTE PTR [RDX+18]
            sete CL
            and EAX,4294967294
            or EAX,ECX
            mov BYTE PTR [RDX+18],AL
            xor EAX,EAX
.L_411210:

            ret 
.L_411212:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411220:

            lea RCX,QWORD PTR [RDI+124]
            lea R9,QWORD PTR [RDI+524]
            lea R8,QWORD PTR [RDI+530]
            jmp .L_411241
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411238:

            add RCX,40
            cmp RCX,R9
            je .L_411282
.L_411241:

            movzx EAX,WORD PTR [RCX]
            sar EAX,10
            cmp SIL,AL
            jne .L_411238

            lea RAX,QWORD PTR [RDI+130]
            nop
            nop
            nop
            nop
            nop
.L_411258:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+6]
            jbe .L_411265

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_411265:

            add RAX,40
            cmp RAX,R8
            jne .L_411258

            mov BYTE PTR [RCX+6],9
            mov DWORD PTR [RCX+8],0
            add RCX,40
            cmp RCX,R9
            jne .L_411241
.L_411282:

            ret 
.L_411284:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411290:

            lea RCX,QWORD PTR [RDI+124]
            lea R9,QWORD PTR [RDI+524]
            lea R8,QWORD PTR [RDI+530]
            jmp .L_4112b1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4112a8:

            add RCX,40
            cmp RCX,R9
            je .L_4112ea
.L_4112b1:

            cmp WORD PTR [RCX],SI
            jne .L_4112a8

            lea RAX,QWORD PTR [RDI+130]
            nop
            nop
            nop
.L_4112c0:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RCX+6]
            jbe .L_4112cd

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_4112cd:

            add RAX,40
            cmp R8,RAX
            jne .L_4112c0

            mov BYTE PTR [RCX+6],9
            mov DWORD PTR [RCX+8],0
            add RCX,40
            cmp RCX,R9
            jne .L_4112b1
.L_4112ea:

            ret 
.L_4112ec:

            nop
            nop
            nop
            nop
.L_4112f0:

            lea RDX,QWORD PTR [RDI+96]
            lea RCX,QWORD PTR [RDI+496]
            xor EAX,EAX
            jmp .L_41131a
          .byte 0x90
.L_411300:

            test RAX,RAX
            je .L_41132b
.L_411305:

            movzx ESI,BYTE PTR [RDX+34]
            cmp BYTE PTR [RAX+34],SIL
            cmovb RAX,RDX
.L_411311:

            add RDX,40
            cmp RDX,RCX
            je .L_411337
.L_41131a:

            cmp DWORD PTR [RDX+36],1
            jne .L_411300

            cmp BYTE PTR [RDX+33],0
            je .L_411311

            test RAX,RAX
            jne .L_411305
.L_41132b:

            mov RAX,RDX
            add RDX,40
            cmp RDX,RCX
            jne .L_41131a
.L_411337:

            test RAX,RAX
            je .L_411371

            lea RDX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
            nop
            nop
            nop
            nop
.L_411350:

            movzx ECX,BYTE PTR [RDX]
            cmp CL,BYTE PTR [RAX+34]
            jbe .L_41135d

            sub ECX,1
            mov BYTE PTR [RDX],CL
.L_41135d:

            add RDX,40
            cmp RDI,RDX
            jne .L_411350

            mov BYTE PTR [RAX+34],9
            mov DWORD PTR [RAX+36],0
.L_411371:

            ret 
.L_411373:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411380:

            lea RAX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
.L_411390:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RSI+34]
            jae .L_41139d

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_41139d:

            add RAX,40
            cmp RAX,RDI
            jne .L_411390

            mov BYTE PTR [RSI+34],0
            ret 
.L_4113ab:

            nop
            nop
            nop
            nop
            nop
.L_4113b0:

            cmp EDI,1
            lea RAX,QWORD PTR [RIP+.L_458b0a]
            je .L_4113e6

            lea RAX,QWORD PTR [RIP+.L_458af7]
            jb .L_4113e6

            cmp EDI,2
            lea RAX,QWORD PTR [RIP+.L_458b1a]
            je .L_4113e6

            lea RAX,QWORD PTR [RIP+.L_458b31]
            lea RDX,QWORD PTR [RIP+.L_45d17b]
            cmp EDI,3
            cmovne RAX,RDX
.L_4113e6:

            ret 
.L_4113e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4113f0:

            lea RAX,QWORD PTR [RDI+130]
            add RDI,530
            nop
            nop
.L_411400:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RSI+34]
            jbe .L_41140d

            sub EDX,1
            mov BYTE PTR [RAX],DL
.L_41140d:

            add RAX,40
            cmp RAX,RDI
            jne .L_411400

            mov BYTE PTR [RSI+34],9
            mov DWORD PTR [RSI+36],0
            ret 
.L_411422:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411430:

            push R14
            push R13
            mov R14D,EDX
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+96]
            push RBX
.L_41143f:

            mov R12,RDI
            mov R13,RSI
            xor EBX,EBX
.L_411447:

            mov ESI,DWORD PTR [RBP+36]
            test ESI,ESI
            je .L_4114c0

            mov RSI,R13
            mov RDI,RBP
            call .L_40f2b0

            test AL,AL
            jne .L_4114c0

            movsxd RBX,EBX
            lea RAX,QWORD PTR [RBX+RBX*4]
            lea RAX,QWORD PTR [R12+RAX*8]
            cmp WORD PTR [RAX+124],R14W
            je .L_4114d0

            cmp DWORD PTR [RAX+132],2
            mov WORD PTR [RAX+124],R14W
            je .L_4114d0

            xor EDX,EDX
            xor ECX,ECX
            mov RDI,R12
            mov WORD PTR [RAX+126],DX
            mov DWORD PTR [RAX+120],4294967295
            mov WORD PTR [RAX+128],CX
            mov DWORD PTR [RAX+132],2
            call .L_430af0

            pop RBX
.L_4114a6:

            mov RSI,R13
            lea RDI,QWORD PTR [RAX+2256]
            xor EDX,EDX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_4136b0
          .byte 0x66
          .byte 0x90
.L_4114c0:

            add EBX,1
            add RBP,40
            cmp EBX,10
            jne .L_411447
.L_4114d0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_4114d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4114e0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            lea R15,QWORD PTR [RBP+520]
            sub RSP,264
.L_4114fe:

            lea RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor EDI,EDI
            mov R12,RAX
            lea RAX,QWORD PTR [RSP+48]
            mov EDX,2
            mov WORD PTR [RSP+16],DI
            mov ESI,16
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov QWORD PTR [RSP+8],RAX
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_458aed]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_411688

            mov ESI,4096
            movdqu XMM0,XMMWORD PTR [R14]
            mov WORD PTR [RSP+16],SI
            lea RSI,QWORD PTR [RSP+16]
            mov EDX,18
            mov RDI,RAX
            movups XMMWORD PTR [RSP+18],XMM0
            call .L_403d30

            test EAX,EAX
            mov ECX,EAX
            je .L_411608

            cmp QWORD PTR [RBP+536],R15
            je .L_4116a0
.L_4115c8:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],ECX
            call .L_4033b0

            mov ECX,DWORD PTR [RSP+8]
.L_4115d8:

            mov RDX,QWORD PTR [RSP+248]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_4116dc

            add RSP,264
.L_4115f8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411608:

            lea RDI,QWORD PTR [R12+2568]
            mov EDX,512
            mov EAX,1023
            mov WORD PTR [RSP+78],DX
            mov WORD PTR [RSP+64],AX
            call .L_415f60

            mov ECX,4294963391
            movdqu XMM0,XMMWORD PTR [RAX]
            mov WORD PTR [RSP+82],CX
            movzx EAX,BYTE PTR [R12+24]
            xor ECX,ECX
            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,R13
            movaps XMMWORD PTR [RSP+48],XMM0
            mov BYTE PTR [RSP+84],AL
            call .L_42e6e0

            mov ECX,EAX
            cmp R15,QWORD PTR [RBP+536]
            je .L_4116d4

            test EAX,EAX
            setne BPL
.L_41166c:

            test RBX,RBX
            je .L_4115d8

            test BPL,BPL
            je .L_4115d8

            jmp .L_4115c8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411688:

            cmp R15,QWORD PTR [RBP+536]
            je .L_4116c8

            mov ECX,3
            jmp .L_4115d8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4116a0:

            mov EBP,1
.L_4116a5:

            mov DWORD PTR [RSP+8],ECX
            call .L_401240

            mov EDX,1000
            mov ESI,EAX
            mov RDI,R15
            call .L_430d50

            mov ECX,DWORD PTR [RSP+8]
            jmp .L_41166c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4116c8:

            mov EBP,1
            mov ECX,3
            jmp .L_4116a5
.L_4116d4:

            test EAX,EAX
            setne BPL
            jmp .L_4116a5
.L_4116dc:

            call __stack_chk_fail@PLT
.L_4116e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4116f0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            lea RBX,QWORD PTR [RDI+96]
            lea R12,QWORD PTR [RDI+496]
            sub RSP,8
.L_411712:

            jmp .L_411721
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411718:

            add RBX,40
            cmp RBX,R12
            je .L_4117a0
.L_411721:

            mov EDX,DWORD PTR [RBX+36]
            mov RBP,RBX
            test EDX,EDX
            je .L_411718

            mov RSI,R14
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            je .L_411718
.L_41173a:

            mov EAX,DWORD PTR [RBP+36]
            cmp EAX,1
            je .L_411818

            jb .L_4117c8

            cmp EAX,2
            jne .L_411800

            movzx EAX,WORD PTR [RBP+28]
            mov WORD PTR [R15],AX
            lea RAX,QWORD PTR [R13+130]
            add R13,530
            nop
            nop
            nop
            nop
            nop
.L_411770:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [RBP+34]
            jae .L_41177d

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_41177d:

            add RAX,40
            cmp R13,RAX
            jne .L_411770

            mov BYTE PTR [RBP+34],0
            add RSP,8
.L_41178e:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4117a0:

            mov RDI,R13
            call .L_4112f0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            jne .L_41173a
.L_4117b5:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4117c8:

            mov RSI,R14
            mov RDI,R13
            call .L_4114e0

            test EAX,EAX
            jne .L_4117b5

            movdqu XMM0,XMMWORD PTR [R14]
            mov EAX,3
            mov WORD PTR [RBP+32],AX
            mov DWORD PTR [RBP+28],1048574
            mov EAX,9
            movups XMMWORD PTR [RBP],XMM0
            mov DWORD PTR [RBP+36],1
            jmp .L_4117b5
          .byte 0x66
          .byte 0x90
.L_411800:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411818:

            cmp BYTE PTR [RBP+32],0
            mov EAX,9
            jne .L_4117b5

            cmp WORD PTR [RBP+30],0
            mov EAX,2
            jne .L_4117b5

            mov RSI,R14
            mov RDI,R13
            call .L_4114e0

            test EAX,EAX
            jne .L_4117b5

            mov BYTE PTR [RBP+32],3
            mov EAX,9
            jmp .L_4117b5
.L_411850:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov R14,RSI
            sub RSP,232
.L_41186a:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ESI,ESI
            test R12,R12
            mov EDX,2
            mov RDI,RBX
            sete SIL
            mov RBP,RAX
            shl ESI,4
            lea R13,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_458ae8]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_411915

            mov EDX,18
            mov RSI,R14
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            je .L_411940
.L_411905:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_411915:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4119c6

            add RSP,232
.L_411933:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_411940:

            mov EDX,10
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_411905

            test R12,R12
            je .L_4119b0

            movdqu XMM0,XMMWORD PTR [R12]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_411964:

            lea RDI,QWORD PTR [RBP+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+50],AX
            movzx EAX,BYTE PTR [RBP+24]
            lea RDX,QWORD PTR [RSP+16]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            mov BYTE PTR [RSP+52],AL
            call .L_42e6e0

            test EAX,EAX
            je .L_411915

            jmp .L_411905
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4119b0:

            mov EDX,1023
            mov ECX,512
            mov WORD PTR [RSP+32],DX
            mov WORD PTR [RSP+46],CX
            jmp .L_411964
.L_4119c6:

            call __stack_chk_fail@PLT
.L_4119cb:

            nop
            nop
            nop
            nop
            nop
.L_4119d0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDI
            sub RSP,104
.L_4119ea:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            test BYTE PTR [R13],48
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+54],CX
            mov WORD PTR [RSP+44],SI
            mov WORD PTR [RSP+48],DI
            jne .L_411a29

            cmp BYTE PTR [R13+1],2
            je .L_411a50
.L_411a29:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_411c1d

            add RSP,104
.L_411a41:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_411a50:

            lea R12,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R14
            mov R15,RAX
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            jne .L_411a29

            cmp BYTE PTR [RSP+65],16
            jne .L_411a29

            lea RAX,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,3
            mov RDI,R14
            mov RCX,RAX
            mov QWORD PTR [RSP],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_411a29

            cmp BYTE PTR [RSP+55],8
            jne .L_411a29

            lea RCX,QWORD PTR [RSP+44]
            mov EDX,4
            mov ESI,2
            mov RDI,R14
            call .L_430f70

            test EAX,EAX
            jne .L_411a29

            cmp BYTE PTR [RSP+45],2
            jne .L_411a29

            lea RCX,QWORD PTR [RSP+48]
            mov EDX,6
            mov ESI,6
            mov RDI,R14
            call .L_430f70

            test EAX,EAX
            jne .L_411c22

            cmp BYTE PTR [RSP+49],4
            jne .L_411a29

            mov R14D,DWORD PTR [RSP+50]
            bswap R14D
.L_411afa:

            lea RAX,QWORD PTR [RBX+496]
            lea R8,QWORD PTR [RBX+96]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R12+2]
            mov QWORD PTR [RSP+8],RAX
.L_411b14:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R8
            mov QWORD PTR [RSP+24],R8
            call .L_40f2b0

            test AL,AL
            mov R8,QWORD PTR [RSP+24]
            jne .L_411c09

            mov EAX,DWORD PTR [R8+36]
            cmp EAX,1
            je .L_411b66

            cmp EAX,2
            jne .L_411c09

            mov EAX,DWORD PTR [R8+24]
            cmp EAX,-1
            je .L_411b66

            mov RSI,QWORD PTR [R8+16]
            cmp QWORD PTR [RSP+56],RSI
            jne .L_411c2a

            cmp EAX,R14D
            jbe .L_411a29
.L_411b66:

            mov RAX,QWORD PTR [RSP+56]
            lea RCX,QWORD PTR [RBX+530]
            mov WORD PTR [R8+30],0
            mov DWORD PTR [R8+24],R14D
            mov BYTE PTR [R8+32],0
            mov BYTE PTR [R8+33],0
            mov DWORD PTR [R8+36],2
            mov QWORD PTR [R8+16],RAX
            movzx EAX,WORD PTR [RSP+46]
            rol AX,8
            mov WORD PTR [R8+28],AX
            lea RAX,QWORD PTR [RBX+130]
.L_411ba8:

            movzx EDX,BYTE PTR [RAX]
            cmp DL,BYTE PTR [R8+34]
            jae .L_411bb6

            add EDX,1
            mov BYTE PTR [RAX],DL
.L_411bb6:

            add RAX,40
            cmp RAX,RCX
            jne .L_411ba8

            mov BYTE PTR [R8+34],0
            test BYTE PTR [R13],48
            jne .L_411bec

            lea RDI,QWORD PTR [R15+216]
            mov RCX,RBP
            mov RDX,R13
            mov ESI,68
            mov QWORD PTR [RSP+24],R8
            call .L_42e970

            mov R8,QWORD PTR [RSP+24]
.L_411bec:

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R15+2256]
            xor EDX,EDX
            mov QWORD PTR [RSP+24],R8
            call .L_4136b0

            mov R8,QWORD PTR [RSP+24]
.L_411c09:

            add R8,40
            cmp QWORD PTR [RSP+16],R8
            jne .L_411b14

            jmp .L_411a29
.L_411c1d:

            call __stack_chk_fail@PLT
.L_411c22:

            xor R14D,R14D
            jmp .L_411afa
.L_411c2a:

            mov RDX,QWORD PTR [RSP]
            xor ECX,ECX
            mov RSI,R12
            mov RDI,RBX
            call .L_411850

            jmp .L_411a29
.L_411c40:

            jmp .L_4119d0
.L_411c45:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411c50:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov R12,RDX
            mov RBP,RDI
            sub RSP,104
.L_411c6a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBX],48
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+38],CX
            jne .L_411c98

            cmp BYTE PTR [RBX+1],2
            je .L_411cc0
.L_411c98:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_411e86

            add RSP,104
.L_411cb0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411cc0:

            mov RDI,R13
            mov R14,RAX
            call .L_40ee50

            test AL,AL
            jne .L_411cf0

            test BYTE PTR [RBX],48
            jne .L_411cf0

            lea RDI,QWORD PTR [R14+216]
            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            call .L_42e970

            nop
            nop
            nop
            nop
            nop
.L_411cf0:

            lea RBX,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R12
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_411c98

            cmp BYTE PTR [RSP+65],16
            jne .L_411c98

            lea R13,QWORD PTR [RSP+38]
            mov EDX,10
            mov ESI,3
            mov RDI,R12
            mov RCX,R13
            call .L_430f70

            test EAX,EAX
            jne .L_411c98

            cmp BYTE PTR [RSP+39],8
            jne .L_411c98

            mov R15,QWORD PTR [R14+8]
            lea RAX,QWORD PTR [R14+2568]
            mov QWORD PTR [RSP+8],RAX
            test R15,R15
            je .L_411da4

            lea R12,QWORD PTR [RBX+2]
            jmp .L_411d69
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411d60:

            mov R15,QWORD PTR [R15+24]
            test R15,R15
            je .L_411da4
.L_411d69:

            mov RSI,R12
            mov RDI,R15
            call .L_40f290

            test AL,AL
            je .L_411d60

            mov RDI,QWORD PTR [RSP+8]
            call .L_415f70

            mov RDI,RAX
            call .L_40f080

            mov RCX,QWORD PTR [RSP+40]
            cmp QWORD PTR [RAX],RCX
            je .L_411d60

            mov RSI,R15
            mov RDI,R14
            call .L_4105f0

            jmp .L_411c98
.L_411da4:

            mov RDI,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RSP+29]
            call .L_41cd80

            mov RDX,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+30],RDX
            xor EDX,2
            cmp BYTE PTR [RSP+29],0
            mov BYTE PTR [RSP+30],DL
            je .L_411c98

            mov R15,RAX
            lea RAX,QWORD PTR [RSP+30]
            xor R12D,R12D
            mov QWORD PTR [RSP+8],RAX
            jmp .L_411e01
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_411de8:

            movzx EAX,BYTE PTR [RSP+29]
            add R12D,1
            add R15,136
            cmp EAX,R12D
            jle .L_411c98
.L_411e01:

            movzx EAX,BYTE PTR [R15+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_411de8

            shr AL,3
            and EAX,2
            mov R14D,EAX
            jne .L_411de8

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_408390

            test AL,AL
            je .L_411de8

            mov RDI,RBP
            call .L_430ac0

            lea RDX,QWORD PTR [RBX+2]
            mov RSI,RAX
            mov RDI,R15
            call .L_42be60

            test EAX,EAX
            jne .L_411de8

            lea RDX,QWORD PTR [RSP+50]
            mov EAX,R14D
            mov ECX,14
            lea R12,QWORD PTR [RSP+48]
            mov RSI,R15
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,R12
            mov WORD PTR [RSP+48],33022
            call .L_40f0b0

            mov RCX,R12
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_411850

            jmp .L_411c98
.L_411e86:

            call __stack_chk_fail@PLT
.L_411e8b:

            nop
            nop
            nop
            nop
            nop
.L_411e90:

            jmp .L_411c50
.L_411e95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_411ea0:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R14,RDX
            sub RSP,248
.L_411eba:

            mov QWORD PTR [RSP+8],R8
            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ECX,ECX
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+28],CX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_458af2]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            mov EDX,2
            mov RSI,RBX
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            je .L_411f5a

            mov EDX,18
            mov RSI,R13
            mov RDI,RAX
            mov RBX,RAX
            call .L_403d30

            test EAX,EAX
            je .L_411f88
.L_411f52:

            mov RDI,RBX
            call .L_4033b0
.L_411f5a:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_412040

            add RSP,248
.L_411f78:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_411f88:

            mov EDX,10
            mov RSI,R14
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_411f52

            add RBP,2568
            mov EDX,514
            mov RDI,RBP
            mov WORD PTR [RSP+28],DX
            call .L_415a90

            lea RSI,QWORD PTR [RSP+28]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            jne .L_411f52

            test R15,R15
            je .L_411ff5

            mov EDX,6
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_411f52
.L_411ff5:

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [RAX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_415f60

            lea RDX,QWORD PTR [RSP+32]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,R12
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+66],AX
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_42e6e0

            test EAX,EAX
            je .L_411f5a

            jmp .L_411f52
.L_412040:

            call __stack_chk_fail@PLT
.L_412045:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412050:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,72
.L_41206a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            mov R13,RAX
            movzx EAX,BYTE PTR [RBX]
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+32],CX
            mov WORD PTR [RSP+22],SI
            mov WORD PTR [RSP+16],DI
            and EAX,48
            cmp AL,16
            je .L_4120c8
.L_4120a1:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4121fd

            add RSP,72
.L_4120b9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4120c8:

            cmp BYTE PTR [RBX+1],2
            jne .L_4120a1

            lea RBX,QWORD PTR [RSP+32]
            xor ESI,ESI
            mov EDX,18
            mov RDI,R12
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_4120a1

            cmp BYTE PTR [RSP+33],16
            jne .L_4120a1

            lea R12,QWORD PTR [RBX+2]
            mov EAX,2051
            mov EDX,1030
            mov RDI,R13
            mov WORD PTR [RSP+22],AX
            mov WORD PTR [RSP+16],DX
            mov RSI,R12
            call .L_410860

            test AL,AL
            lea RDI,QWORD PTR [R13+2568]
            jne .L_4121cd

            lea RSI,QWORD PTR [RSP+15]
            call .L_41cd80

            cmp BYTE PTR [RSP+15],0
            je .L_4120a1

            mov R13,RAX
            xor R15D,R15D
            jmp .L_412159
          .byte 0x90
.L_412140:

            movzx EAX,BYTE PTR [RSP+15]
            add R15D,1
            add R13,136
            cmp EAX,R15D
            jle .L_4120a1
.L_412159:

            movzx EAX,BYTE PTR [R13+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_412140

            shr AL,3
            test AL,2
            jne .L_412140

            cmp BYTE PTR [R13+27],3
            ja .L_412140

            mov RDI,RBP
            call .L_430ac0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_42bf60

            test AL,AL
            je .L_412140

            mov RAX,QWORD PTR [R13]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,2
            mov BYTE PTR [RSP+24],AL
            call .L_401240

            sub EAX,DWORD PTR [R13+8]
            lea RCX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RSP+22]
            lea R8,QWORD PTR [R14+16]
            mov RSI,RBX
            mov RDI,RBP
            bswap EAX
            mov DWORD PTR [RSP+18],EAX
            call .L_411ea0

            jmp .L_4120a1
.L_4121cd:

            call .L_415f70

            mov RDI,RAX
            call .L_40f080

            mov RAX,QWORD PTR [RAX]
            lea RDX,QWORD PTR [RSP+22]
            lea R8,QWORD PTR [R14+16]
            xor ECX,ECX
            mov RSI,RBX
            mov RDI,RBP
            mov QWORD PTR [RSP+24],RAX
            call .L_411ea0

            jmp .L_4120a1
.L_4121fd:

            call __stack_chk_fail@PLT
.L_412202:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412210:

            jmp .L_412050
.L_412215:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412220:

            push R12
            xor EAX,EAX
            push RBP
            mov R12,RDI
            push RBX
.L_412229:

            lea RBP,QWORD PTR [RDI+526]
            lea RBX,QWORD PTR [RDI+126]
            jmp .L_41228f
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412240:

            sub EAX,1
            test AL,AL
            mov BYTE PTR [RBX+2],AL
            jne .L_4122ab

            movzx ECX,BYTE PTR [RBX+3]
            mov EAX,15
            shl EAX,CL
            cmp AX,28799
            mov WORD PTR [RBX],AX
            ja .L_4122c8

            add ECX,1
            mov BYTE PTR [RBX+3],CL
.L_412264:

            mov RDI,R12
            call .L_430af0

            lea RSI,QWORD PTR [RBX-30]
            lea RDI,QWORD PTR [RAX+2256]
            mov EDX,2
            call .L_4136b0

            mov EAX,1
.L_412286:

            add RBX,40
            cmp RBX,RBP
            je .L_4122b9
.L_41228f:

            cmp DWORD PTR [RBX+6],1
            jne .L_412286

            movzx EAX,BYTE PTR [RBX+2]
            test AL,AL
            jne .L_412240

            movzx EAX,WORD PTR [RBX]
            test AX,AX
            je .L_4122ab

            sub EAX,1
            mov WORD PTR [RBX],AX
.L_4122ab:

            add RBX,40
            mov EAX,1
            cmp RBX,RBP
            jne .L_41228f
.L_4122b9:

            test AL,AL
            jne .L_4122d8

            pop RBX
.L_4122be:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4122c8:

            mov EAX,28800
            mov WORD PTR [RBX],AX
            jmp .L_412264
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4122d8:

            call .L_401240

            pop RBX
            lea RDI,QWORD PTR [R12+520]
            mov EDX,1000
            mov ESI,EAX
            pop RBP
            pop R12
            jmp .L_430d50
.L_4122f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412300:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a70

            add RSP,8
            mov RDI,RAX
            jmp .L_412220
.L_41231d:

            nop
            nop
            nop
.L_412320:

            cmp BYTE PTR [RCX],1
            je .L_412330
.L_412325:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412330:

            cmp BYTE PTR [RCX+1],0
            jne .L_412325

            jmp .L_410ef0
.L_41233b:

            nop
            nop
            nop
            nop
            nop
.L_412340:

            lea RAX,QWORD PTR [RIP+.L_412760]
            mov QWORD PTR [RDI],0
            mov DWORD PTR [RDI+8],0
            mov DWORD PTR [RDI+24],0
            mov BYTE PTR [RDI+40],0
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RDI+16]
            mov BYTE PTR [RDI+41],0
            mov QWORD PTR [RDI+32],RAX
            ret 
.L_412371:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412380:

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+16]
            call .L_430c70

            mov BYTE PTR [RBX+41],0
            mov BYTE PTR [RBX+40],0
            pop RBX
            ret 
.L_412397:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4123a0:

            mov EAX,DWORD PTR [RDI+4]
            test EAX,EAX
            je .L_4123b0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4123b0:

            sub RSP,8
            call .L_430af0

            imul EAX,DWORD PTR [RAX+2888],1000
            add RSP,8
            sub EAX,5000
            ret 
.L_4123cd:

            nop
            nop
            nop
.L_4123d0:

            movzx EDX,BYTE PTR [RDI+41]
            movzx ECX,BYTE PTR [RDI+40]
            mov EAX,DWORD PTR [RDI+4]
            and EDX,4294967280
            test CL,2
            je .L_4123f8

            test EAX,EAX
            je .L_412430

            mov EDX,100
.L_4123ec:

            cmp EAX,EDX
            cmova EAX,EDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4123f8:

            mov ESI,ECX
            shr SIL,3
            and ESI,1
            and ECX,4
            je .L_412420

            test SIL,SIL
            jne .L_412440

            test DL,DL
            jne .L_412450

            test EAX,EAX
            je .L_4124a8

            mov EDX,1000
            jmp .L_4123ec
          .byte 0x66
          .byte 0x90
.L_412420:

            test SIL,SIL
            jne .L_412440

            test DL,DL
            jne .L_412450

            test EAX,EAX
            je .L_412480

            ret 
          .byte 0x90
.L_412430:

            mov EAX,100
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412440:

            test DL,DL
            jne .L_412450

            test EAX,EAX
            jne .L_412470

            mov EAX,200
            ret 
          .byte 0x66
          .byte 0x90
.L_412450:

            test EAX,EAX
            je .L_412460

            mov EDX,188
            cmp EAX,EDX
            cmova EAX,EDX
            ret 
          .byte 0x90
.L_412460:

            mov EAX,188
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412470:

            mov EDX,200
            jmp .L_4123ec
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412480:

            sub RSP,8

            call .L_430af0

            imul EAX,DWORD PTR [RAX+2888],1000
            mov EDX,10
            sub EAX,5000
            cmove EAX,EDX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4124a8:

            mov EAX,1000
            ret 
.L_4124ae:

            nop
            nop
.L_4124b0:

            push RBX
            mov RBX,RDI
            sub RSP,16
            cmp ESI,1
            je .L_412500
.L_4124bd:

            lea RDI,QWORD PTR [RBX+16]
            cmp RDI,QWORD PTR [RBX+32]
            je .L_4124e0

            mov EDX,DWORD PTR [RBX+8]
            mov ESI,DWORD PTR [RBX]
            add RSP,16
            pop RBX
            jmp .L_430d50
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4124e0:

            mov QWORD PTR [RSP+8],RDI
            call .L_401240

            mov EDX,DWORD PTR [RBX+8]
            mov DWORD PTR [RBX],EAX
            mov ESI,EAX
            mov RDI,QWORD PTR [RSP+8]
            add RSP,16
            pop RBX
            jmp .L_430d50
.L_412500:

            call .L_4123d0

            mov DWORD PTR [RBX+8],EAX
            jmp .L_4124bd
.L_41250a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_412510:

            test BYTE PTR [RDI+40],1
            mov EAX,24
            jne .L_412550

            push RBX
            mov RBX,RDI
            call .L_430af0

            mov RDX,RAX
            mov EAX,13
            test BYTE PTR [RDX+2624],2
            jne .L_412548

            or BYTE PTR [RBX+40],1
            mov ESI,1
            mov RDI,RBX
            call .L_4124b0

            xor EAX,EAX
.L_412548:

            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412550:

            ret 
.L_412552:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412560:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+16]
            sub RSP,24
            call .L_430af0

            test BYTE PTR [RBX+40],1
            je .L_412588

            test BYTE PTR [RAX+1564],64
            mov RBP,RAX
            je .L_4125b0
.L_412588:

            mov RDI,R12
            call .L_430c70

            mov BYTE PTR [RBX+41],0
            mov BYTE PTR [RBX+40],0
            mov EAX,13
.L_41259d:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4125b0:

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41ad90

            test RAX,RAX
            je .L_412588

            movzx EAX,BYTE PTR [RAX+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_4125d4

            cmp AL,1
            jne .L_412588
.L_4125d4:

            mov RDI,R12
            call .L_430c70

            lea RDI,QWORD PTR [RBP+2352]
            call .L_404810

            test RAX,RAX
            jne .L_4125fd

            jmp .L_412620
          .byte 0x90
.L_4125f0:

            mov RDI,RAX
            call .L_4033c0

            test RAX,RAX
            je .L_412620
.L_4125fd:

            movzx EDX,BYTE PTR [RAX+78]
            and EDX,3
            cmp DL,2
            jne .L_4125f0
.L_412609:

            xor ESI,ESI
            mov RDI,RBX
            call .L_4124b0

            mov EAX,24
            jmp .L_41259d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412620:

            mov RDI,RBX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            mov ESI,2
            call .L_403740

            test RAX,RAX
            mov R13,RAX
            je .L_412680

            lea RDI,QWORD PTR [RBP+2256]
            mov RSI,RAX
            call .L_4133e0

            test EAX,EAX
            jne .L_4126c0

            movzx EDX,BYTE PTR [RBX+40]
            mov DWORD PTR [RSP+12],EAX
            test DL,8
            je .L_4126a8

            and EDX,4294967287
            mov ESI,1
            mov RDI,RBX
            mov BYTE PTR [RBX+40],DL
            call .L_4124b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41259d
          .byte 0x90
.L_412680:

            mov EAX,3
.L_412685:

            or BYTE PTR [RBX+40],8
            mov ESI,1
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4124b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41259d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4126a8:

            xor ESI,ESI
            mov RDI,RBX
            call .L_4124b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41259d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4126c0:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            cmp EAX,13
            je .L_412588

            cmp EAX,24
            jne .L_412685

            jmp .L_412609
.L_4126e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4126f0:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_41271b

            mov EDX,EAX
            and EAX,15
            shr DL,4
            add EDX,1
            and EDX,15
            mov ECX,EDX
            shl ECX,4
            or EAX,ECX
            cmp DL,4
            mov BYTE PTR [RDI+40],AL
            jbe .L_412720

            and EAX,15
            mov BYTE PTR [RDI+40],AL
.L_41271b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_412720:

            jmp .L_412560
.L_412725:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412730:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_412746

            and EAX,15
            mov BYTE PTR [RDI+40],AL
            mov RAX,QWORD PTR [RSI]
            test BYTE PTR [RAX],16
            jne .L_412750
.L_412746:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412750:

            jmp .L_412560
.L_412755:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412760:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402ab0

            add RSP,8
            mov RDI,RAX
            jmp .L_412560
.L_41277d:

            nop
            nop
            nop
.L_412780:

            cmp DWORD PTR [RDI+4],ESI
            je .L_41278e

            test BYTE PTR [RDI+40],1
            mov DWORD PTR [RDI+4],ESI
            jne .L_412790
.L_41278e:

            ret 
.L_412790:

            mov ESI,1
            jmp .L_4124b0
.L_41279a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4127a0:

            movzx EAX,BYTE PTR [RDI+40]
            test AL,1
            je .L_4127c6

            test ESI,ESI
            jne .L_4127d0

            shr AL,2
            and EAX,1
            test BYTE PTR [RDI+41],240
            je .L_4127f8

            sub BYTE PTR [RDI+41],16
            test AL,AL
            jne .L_4127fc

            test BYTE PTR [RDI+41],240
            je .L_412804
.L_4127c6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4127d0:

            movzx EDX,BYTE PTR [RDI+41]
            lea ECX,DWORD PTR [RDX+1]
            and EDX,4294967280
            and ECX,15
            or EDX,ECX
            cmp CL,4
            mov BYTE PTR [RDI+41],DL
            ja .L_4127fc

            test AL,4
            jne .L_4127c6

            or EAX,4
            mov BYTE PTR [RDI+40],AL
            jmp .L_412804
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4127f8:

            test AL,AL
            je .L_4127c6
.L_4127fc:

            and BYTE PTR [RDI+40],251
            and BYTE PTR [RDI+41],240
.L_412804:

            mov ESI,1
            jmp .L_4124b0
.L_41280e:

            nop
            nop
.L_412810:

            test BYTE PTR [RDI+40],1
            jne .L_412820

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412820:

            mov ESI,1
            jmp .L_4124b0
.L_41282a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_412830:

            movzx EAX,BYTE PTR [RDI+40]
            mov EDX,EAX
            shr DL,1
            and EDX,1
            cmp DL,SIL
            je .L_412851

            and ESI,1
            and EAX,4294967293
            add ESI,ESI
            or EAX,ESI
            test AL,1
            mov BYTE PTR [RDI+40],AL
            jne .L_412858
.L_412851:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412858:

            mov ESI,1
            jmp .L_4124b0
.L_412862:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412870:

            movzx EAX,BYTE PTR [RDI+41]
            mov R8D,EAX
            and R8D,4294967280
            test SIL,SIL
            je .L_4128b8

            cmp SIL,15
            mov EDX,15
            cmova ESI,EDX
            movzx ECX,SIL
.L_412890:

            mov EDX,EAX
            shr DL,4
            movzx EDX,DL
            cmp EDX,ECX
            jge .L_4128a8

            shl ESI,4
            and EAX,15
            or ESI,EAX
            mov BYTE PTR [RDI+41],SIL
.L_4128a8:

            test BYTE PTR [RDI+40],1
            je .L_4128b3

            test R8B,R8B
            je .L_4128c8
.L_4128b3:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4128b8:

            mov ECX,8
            mov ESI,8
            jmp .L_412890
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4128c8:

            mov ESI,1
            jmp .L_4124b0
.L_4128d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4128e0:

            sub RSP,8
            call .L_430af0

            imul EAX,DWORD PTR [RAX+2888],1000
            add RSP,8
            sub EAX,5000
            ret 
.L_4128fd:

            nop
            nop
            nop
.L_412900:

            movabs RAX,2886218022912
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+84],0
            mov QWORD PTR [RDI+100],RAX
            lea RAX,QWORD PTR [RIP+.L_412e60]
            mov QWORD PTR [RDI+92],0
            mov DWORD PTR [RDI+108],624
            mov BYTE PTR [RDI+112],0
            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RDI+120]
            mov DWORD PTR [RDI+128],0
            mov DWORD PTR [RDI+176],0
            mov BYTE PTR [RDI+180],255
            mov QWORD PTR [RDI+136],RAX
            ret 
.L_412962:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412970:

            add RDI,120
            jmp .L_430c70
.L_412979:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412980:

            lea RAX,QWORD PTR [RDI+144]
            ret 
.L_412988:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412990:

            mov RAX,QWORD PTR [RDI+144]
            mov RDX,QWORD PTR [RDI+152]
            xor RAX,QWORD PTR [RSI]
            xor RDX,QWORD PTR [RSI+8]
            or RDX,RAX
            je .L_4129d0

            sub RSP,8
            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+144],XMM0
            call .L_430b10

            mov ESI,2097152
            mov RDI,RAX
            add RSP,8
            jmp .L_402d30
          .byte 0x90
.L_4129d0:

            ret 
.L_4129d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4129e0:

            mov RAX,RDI
            ret 
.L_4129e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4129f0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov EBP,ESI
            mov R12,RDX
            sub RSP,56
.L_412a02:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
.L_412a18:

            call .L_431b10
.L_412a1d:

            mov EDX,16
            mov RSI,R13
            mov RDI,RBX
.L_412a28:

            call .L_431b50

            mov EAX,EBP
            lea RSI,QWORD PTR [RSP+36]
            mov EDX,4
            shr EAX,24
            mov RDI,RBX
            mov BYTE PTR [RSP+39],BPL
            mov BYTE PTR [RSP+36],AL
            mov EAX,EBP
            shr EAX,16
            mov BYTE PTR [RSP+37],AL
            mov EAX,EBP
            mov BYTE PTR [RSP+38],AH
            call .L_431b60

            lea RSI,QWORD PTR [RIP+.L_458b48]
            mov EDX,6
            mov RDI,RBX
            call .L_431b60

            mov RSI,R12
            mov RDI,RBX
            call .L_431b70
.L_412a7b:

            mov RDI,RBX
.L_412a7e:

            call .L_431b40
.L_412a83:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_412aa0

            add RSP,56
.L_412a99:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_412aa0:

            call __stack_chk_fail@PLT
.L_412aa5:

            mov RBP,RAX
            mov RDI,RBX
            call .L_431b40

            mov RDI,RBP
.L_412ab3:

            call _Unwind_Resume@PLT
.L_412ab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412ac0:

            push RBP
            push RBX
            sub RSP,24
.L_412ac6:

            mov RDX,QWORD PTR [RDI+8]
            xor RDX,QWORD PTR [RSI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            xor RAX,QWORD PTR [RSI]
            or RDX,RAX
            je .L_412c00

            movdqu XMM0,XMMWORD PTR [RSI]
            lea RDX,QWORD PTR [RDI+20]
            xor ESI,ESI
            mov RBX,RDI
            mov DWORD PTR [RDI+16],0
            lea RBP,QWORD PTR [RSP+7]
            movups XMMWORD PTR [RDI],XMM0
            call .L_4129f0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41ad80

            mov RDI,RBX
            mov QWORD PTR [RAX+12],0
            mov DWORD PTR [RAX+20],0
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41db40

            movzx ECX,BYTE PTR [RSP+7]
            test CL,CL
            je .L_412b85

            sub ECX,1
            lea RDX,QWORD PTR [RAX+12]
            movzx ECX,CL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RAX,QWORD PTR [RAX+RCX*8+52]
            nop
            nop
            nop
            nop
.L_412b68:

            mov DWORD PTR [RDX+8],0
            mov DWORD PTR [RDX],0
            add RDX,40
            mov DWORD PTR [RDX-36],0
            cmp RDX,RAX
            jne .L_412b68
.L_412b85:

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBP
            call .L_41cd80

            movzx ECX,BYTE PTR [RSP+7]
            test CL,CL
            je .L_412beb

            sub ECX,1
            lea RDX,QWORD PTR [RAX+12]
            movzx ECX,CL
            mov RSI,RCX
            shl RSI,4
            add RCX,RSI
            lea RAX,QWORD PTR [RAX+RCX*8+148]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412bc8:

            mov DWORD PTR [RDX+8],0
            mov DWORD PTR [RDX],0
            add RDX,136
            mov DWORD PTR [RDX-132],0
            cmp RAX,RDX
            jne .L_412bc8
.L_412beb:

            mov RDI,RBX
            call .L_430b10

            mov ESI,1048832
            mov RDI,RAX
            call .L_402d30
.L_412c00:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_412c19

            add RSP,24
.L_412c16:

            pop RBX
            pop RBP
            ret 
.L_412c19:

            call __stack_chk_fail@PLT
.L_412c1e:

            nop
            nop
.L_412c20:

            push RBX
            lea RDX,QWORD PTR [RDI+52]
            mov RBX,RDI
            call .L_4129f0

            lea RAX,QWORD PTR [RBX+68]
            pop RBX
            ret 
.L_412c33:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412c40:

            push RBX
            lea RBX,QWORD PTR [RDI+52]
            mov RDX,RBX
            call .L_4129f0

            mov RAX,RBX
            pop RBX
            ret 
.L_412c52:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412c60:

            mov EAX,DWORD PTR [RDI+84]
            add EAX,1
            cmp EAX,DWORD PTR [RDI+92]
            mov DWORD PTR [RDI+84],EAX
            jae .L_412c70

            ret 
.L_412c70:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            add RSP,8
            jmp .L_414fc0
.L_412c89:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412c90:

            mov EAX,DWORD PTR [RDI+88]
            add EAX,1
            cmp EAX,DWORD PTR [RDI+96]
            mov DWORD PTR [RDI+88],EAX
            jae .L_412ca0

            ret 
.L_412ca0:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            add RSP,8
            jmp .L_414fc0
.L_412cb9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412cc0:

            movdqu XMM0,XMMWORD PTR [RSI]
            mov DWORD PTR [RDI+176],0
            movups XMMWORD PTR [RDI+160],XMM0
            ret 
.L_412cd6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412ce0:

            test ESI,ESI
            mov EAX,7
            je .L_412cee

            mov DWORD PTR [RDI+104],ESI
            xor EAX,EAX
.L_412cee:

            ret 
.L_412cf0:

            cmp BYTE PTR [RDI+180],SIL
            je .L_412d20

            sub RSP,8
            mov BYTE PTR [RDI+180],SIL
            call .L_430b10

            mov ESI,4194304
            mov RDI,RAX
            add RSP,8
            jmp .L_402d30
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_412d20:

            ret 
.L_412d22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412d30:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI+100],0
            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov EDX,3600000
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_412d51:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412d60:

            mov BYTE PTR [RDI+112],0
            jmp .L_412d30
.L_412d66:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412d70:

            mov EAX,DWORD PTR [RDI+16]
            cmp EAX,ESI
            je .L_412e10

            push RBP
            push RBX
            add EAX,1
            lea RBP,QWORD PTR [RDI+120]
            sub RSP,8
.L_412d88:

            cmp EAX,ESI
            jne .L_412db0

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            je .L_412db0

            cmp QWORD PTR [RDI+136],RBP
            je .L_412db0

            cmp BYTE PTR [RDI+112],0
            je .L_412db0

            cmp EAX,DWORD PTR [RDI+100]
            ja .L_412e00

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412db0:

            lea RDX,QWORD PTR [RDI+20]
            mov RBX,RDI
            mov DWORD PTR [RDI+16],ESI
            call .L_4129f0

            cmp QWORD PTR [RBX+136],RBP
            mov QWORD PTR [RBX+84],0
            je .L_412ddc

            mov BYTE PTR [RBX+112],1
            mov RDI,RBX
            call .L_412d30
.L_412ddc:

            mov RDI,RBX
            call .L_430b10

            add RSP,8
.L_412de8:

            mov ESI,256
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_402d30
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412e00:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412e10:

            ret 
.L_412e12:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412e20:

            push RBX
            add DWORD PTR [RDI+100],1
            mov RBX,RDI
            mov ESI,DWORD PTR [RDI+128]
            mov EDX,3600000
            add RDI,120
            call .L_430d50

            mov EAX,DWORD PTR [RBX+104]
            cmp DWORD PTR [RBX+100],EAX
            jae .L_412e50

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412e50:

            mov EAX,DWORD PTR [RBX+16]
            mov RDI,RBX
            pop RBX
            lea ESI,DWORD PTR [RAX+1]
            jmp .L_412d70
.L_412e5f:

            nop
.L_412e60:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a60

            add RSP,8
            mov RDI,RAX
            jmp .L_412e20
.L_412e7a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_412e80:

            sub RSP,16
            movzx EAX,WORD PTR [RDI]
            mov R10,RSI
            movzx ESI,DX
            lea RDX,QWORD PTR [RIP+.L_676840]
            lea R8,QWORD PTR [RIP+.L_458b4e]
            mov RCX,-1
            mov RDI,R10
            mov R9D,EAX
            and EAX,7
            and R9D,2047
            push QWORD PTR [RDX+RAX*8]
            mov EDX,1
            sar R9D,3
            xor EAX,EAX
            neg R9D
            call __snprintf_chk@PLT

            add RSP,24
            ret 
.L_412ecd:

            nop
            nop
            nop
.L_412ed0:

            movzx R8D,WORD PTR [RDI]
            movzx ECX,DX
            cmp SIL,1
            lea EAX,DWORD PTR [RCX-1]
            sbb ESI,ESI
            mov EDX,ECX
            shr EDX,1
            movzx ESI,SI
            imul EAX,R8D
            add EAX,EDX
            xor EDX,EDX
            add EAX,ESI
            div ECX
            mov WORD PTR [RDI],AX
            ret 
.L_412ef7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412f00:

            xor EAX,EAX
            mov WORD PTR [RDI],AX
            ret 
.L_412f06:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412f10:

            cmp SIL,127
            je .L_412fe0

            movzx ECX,BYTE PTR [RDI+1]
            test SIL,SIL
            mov EAX,0
            cmovg ESI,EAX
            movsx SI,SIL
            neg ESI
            mov R8D,ECX
            shl ESI,3
            shr R8B,3
            test CL,248
            je .L_412f78

            movzx R9D,WORD PTR [RDI]
            movzx ESI,SI
            mov EDX,R9D
            and EDX,2047
            cmp R8B,6
            jbe .L_412fa0

            lea EAX,DWORD PTR [RSI+RDX*8]
            and R9W,63488
            sub EAX,EDX
            sar EAX,3
            and AX,2047
            or R9D,EAX
            xor EAX,EAX
            mov WORD PTR [RDI],R9W
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_412f78:

            lea R8D,DWORD PTR [R8*8+8]
            and ECX,7
            and SI,2047
            or ECX,R8D
            mov BYTE PTR [RDI+1],CL
            movzx EAX,WORD PTR [RDI]
            and AX,63488
            or ESI,EAX
            xor EAX,EAX
            mov WORD PTR [RDI],SI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_412fa0:

            add R8D,1
            and ECX,7
            and R8D,31
            lea EAX,DWORD PTR [R8*8]
            movzx R8D,R8B
            or ECX,EAX
            lea EAX,DWORD PTR [R8-1]
            mov BYTE PTR [RDI+1],CL
            imul EAX,EDX
            add EAX,ESI
            movzx ESI,WORD PTR [RDI]
            cdq 
            idiv R8D
            and SI,63488
            and AX,2047
            or EAX,ESI
            mov WORD PTR [RDI],AX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_412fe0:

            mov EAX,7
            ret 
.L_412fe6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_412ff0:

            test BYTE PTR [RDI+1],248
            mov EAX,127
            je .L_413018

            movzx EDX,WORD PTR [RDI]
            mov EAX,EDX
            and EDX,7
            and EAX,2047
            sar EAX,3
            mov ECX,EAX
            not EAX
            neg ECX
            cmp DX,3
            cmovbe EAX,ECX
.L_413018:

            ret 
.L_41301a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_413020:

            test BYTE PTR [RDI+1],248
            mov RAX,RSI
            jne .L_413038

            test DX,DX
            jne .L_413030

            ret 
.L_413030:

            mov BYTE PTR [RSI],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_413038:

            sub RSP,24
            movzx EDX,DX
            mov QWORD PTR [RSP+8],RSI
            call .L_412e80

            mov RAX,QWORD PTR [RSP+8]
            add RSP,24
            ret 
.L_413053:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413060:

            mov QWORD PTR [RDI],2130706432
            ret 
.L_413068:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413070:

            mov DWORD PTR [RDI],2130706432
            ret 
.L_413077:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413080:

            cmp DL,127
            je .L_413130

            push RBX
.L_41308a:

            test BYTE PTR [RDI+1],248
            mov EBX,255
            mov BYTE PTR [RDI+3],DL
            je .L_41309c

            movzx EBX,BYTE PTR [RDI+2]
.L_41309c:

            mov R11D,ESI
            movsx ESI,DL
            mov R10,RDI
            call .L_412f10

            test EAX,EAX
            jne .L_413124

            movzx EAX,BYTE PTR [RDI+1]
            and EAX,248
            je .L_413110

            movzx EAX,WORD PTR [RDI]
            mov EDX,EAX
            and EAX,7
            and EDX,2047
            sar EDX,3
            mov ECX,EDX
            not EDX
            neg ECX
            cmp AX,3
            cmovbe EDX,ECX
            mov EAX,EDX
            sub AL,R11B
            js .L_413138

            cmp DL,127
            je .L_413138

            cmp BL,2
            jbe .L_413148

            mov ECX,20
            mov EDI,10
            mov ESI,2
.L_4130f7:

            cmp CL,AL
            mov EDX,3
            jb .L_413120

            cmp DIL,AL
            jae .L_41311a

            mov EDX,2
            jmp .L_413120
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_413110:

            cmp BL,2
            mov ESI,2
            jbe .L_413148
.L_41311a:

            cmp AL,SIL
            seta DL
.L_413120:

            mov BYTE PTR [R10+2],DL
.L_413124:

            pop RBX
.L_413125:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413130:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413138:

            xor EDX,EDX
            cmp BL,2
            ja .L_413120

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413148:

            lea RDX,QWORD PTR [RIP+.L_458b91]
            mov ECX,22
            movzx ESI,BYTE PTR [RDX+RBX*1]
            lea RDX,QWORD PTR [RIP+.L_458b8e]
            movzx EDI,BYTE PTR [RDX+RBX*1]
            jmp .L_4130f7
.L_413165:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413170:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,56
            movzx R13D,BYTE PTR [RDI+2]
            movsx R12D,BYTE PTR [RDI+3]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test BYTE PTR [RDI+1],248
            jne .L_4131f0

            lea R9,QWORD PTR [RSP+30]
            mov BYTE PTR [RSP+30],0
.L_4131a9:

            push R13
            lea R8,QWORD PTR [RIP+.L_458b68]
            push R12
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            movzx ESI,BX
            mov RDI,RBP
            call __snprintf_chk@PLT

            pop RAX
            pop RDX
            mov RAX,RBP
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41320e

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4131f0:

            lea R9,QWORD PTR [RSP+30]
            mov EDX,10
            mov RSI,R9
            mov QWORD PTR [RSP+8],R9
            call .L_412e80

            mov R9,QWORD PTR [RSP+8]
            jmp .L_4131a9
.L_41320e:

            call __stack_chk_fail@PLT
.L_413213:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413220:

            mov EAX,ESI
            sub AL,DIL
            js .L_413230

            cmp SIL,127
            je .L_413230

            ret 
          .byte 0x90
.L_413230:

            xor EAX,EAX
            ret 
.L_413233:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413240:

            cmp DIL,20
            mov EAX,3
            ja .L_41325d

            cmp DIL,10
            mov EAX,2
            ja .L_41325d

            cmp DIL,2
            seta AL
.L_41325d:

            ret 
.L_41325f:

            nop
.L_413260:

            mov EDX,ESI
            sub DL,DIL
            js .L_413280

            cmp SIL,127
            je .L_413280

            cmp DL,20
            mov EAX,3
            jle .L_413288
.L_413277:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413280:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413288:

            cmp DL,10
            mov EAX,2
            ja .L_413277

            cmp DL,2
            seta AL
            ret 
.L_413299:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4132a0:

            sub ESI,1
            mov EAX,EDI
            cmp SIL,2
            ja .L_4132be

            lea RAX,QWORD PTR [RIP+.L_458b94]
            movzx ESI,SIL
            movzx EDX,BYTE PTR [RAX+RSI*1]
            add EDX,EDI
            mov EAX,EDX
.L_4132be:

            ret 
.L_4132c0:

            cmp SIL,2
            movzx EAX,SIL
            ja .L_413308

            lea RDX,QWORD PTR [RIP+.L_458b91]
            movzx ESI,BYTE PTR [RDX+RAX*1]
            lea RDX,QWORD PTR [RIP+.L_458b8e]
            movzx ECX,BYTE PTR [RDX+RAX*1]
            mov EDX,22
.L_4132e5:

            cmp DL,DIL
            mov EAX,3
            jb .L_4132ff

            cmp CL,DIL
            mov EAX,2
            jb .L_4132ff

            cmp SIL,DIL
            setb AL
.L_4132ff:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_413308:

            mov EDX,20
            mov ECX,10
            mov ESI,2
            jmp .L_4132e5
.L_413319:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413320:

            push R14
            lea R14,QWORD PTR [RDI+96]
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_41332f:

            mov RDI,R14
            mov R13,RSI
            call .L_404810

            test RAX,RAX
            mov RBX,RAX
            je .L_4133ab

            nop
            nop
            nop
            nop
            nop
            nop
.L_413348:

            mov RDI,RBX
            call .L_4033c0

            mov RDI,RBP
            mov R12,RAX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R13
            call .L_41cd60

            mov RDI,RBX
            movzx ESI,AL
            call .L_404130

            mov RDI,RBX
            call .L_4041d0

            test AL,AL
            jne .L_4133a3

            test BYTE PTR [RBX+78],64
            jne .L_4133a3

            cmp QWORD PTR [RBP+144],RBX
            je .L_4133d0
.L_413390:

            mov RDI,R14
            mov RSI,RBX
            call .L_404a30

            mov RDI,RBX
            call .L_4033b0
.L_4133a3:

            test R12,R12
            mov RBX,R12
            jne .L_413348
.L_4133ab:

            pop RBX
.L_4133ac:

            mov QWORD PTR [R13+112],0
            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R13
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_42b470
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4133d0:

            mov QWORD PTR [RBP+144],0
            jmp .L_413390
.L_4133dd:

            nop
            nop
            nop
.L_4133e0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,72
.L_4133f4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            mov R13,RAX
            movzx EAX,BYTE PTR [RBX+78]
            mov EDX,EAX
            and EDX,3
            je .L_4134d8

            cmp DL,3
            je .L_413480

            or EAX,64
            mov BYTE PTR [RBX+78],AL
.L_413426:

            xor ESI,ESI
            mov RDI,RBX
            call .L_403550

            xor EAX,EAX
            lea RDI,QWORD PTR [RBP+96]
            mov RSI,RBX
            mov WORD PTR [RBX+62],AX
            call .L_404a10

            test EAX,EAX
            mov R12D,EAX
            jne .L_413455

            lea RDI,QWORD PTR [RBP+192]
            call .L_404bc0
.L_413455:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_4136a5

            add RSP,72
.L_413470:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413480:

            lea RDI,QWORD PTR [R13+11232]
            mov RSI,RBX
            mov R12D,2
            call .L_42c330

            test RAX,RAX
            mov R14,RAX
            je .L_413455

            test BYTE PTR [RAX+26],64
            jne .L_413455

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,RAX
            call .L_41cd60

            mov RDI,RBX
            movzx ESI,AL
            call .L_404180

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R14
            call .L_42b300

            jmp .L_413426
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4134d8:

            lea R14,QWORD PTR [RSP+16]
            xor ESI,ESI
            mov EDX,40
            mov RDI,RBX
            lea R12,QWORD PTR [R14+24]
            mov RCX,R14
            call .L_403860

            mov RDI,R12
            call .L_40ee50

            test AL,AL
            je .L_4135d0

            mov RDI,R12
            call .L_40f190

            test AL,AL
            jne .L_413513

            or BYTE PTR [RBX+78],64
.L_413513:

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,5
            je .L_413426

            add R13,2568
            lea RSI,QWORD PTR [RSP+15]
            add R14,24
            mov RDI,R13
            call .L_41cd80

            mov RDI,R13
            mov R12,RAX
            call .L_415a70

            mov RDI,R14
            mov RSI,RAX
            call .L_40f290

            test AL,AL
            je .L_413630
.L_41355b:

            cmp BYTE PTR [RSP+15],0
            je .L_413426

            xor R14D,R14D
            lea R13,QWORD PTR [RBP+248]
            jmp .L_413593
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413578:

            cmp DL,1
            je .L_4135a6
.L_41357d:

            add R14D,1
            add R12,136
            cmp BYTE PTR [RSP+15],R14B
            jbe .L_413426
.L_413593:

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            and EDX,7
            lea ECX,DWORD PTR [RDX-6]
            cmp CL,1
            ja .L_413578
.L_4135a6:

            shr AL,3
            test AL,8
            jne .L_41357d

            movzx ESI,R14B
            mov RDI,RBX
            call .L_404180

            mov RSI,R12
            mov RDI,R13
            call .L_42b300

            jmp .L_41357d
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4135d0:

            add R13,2568
            mov RSI,R12
            mov RDI,R13
            call .L_41d050

            test RAX,RAX
            mov R12,RAX
            je .L_4135f6

            test BYTE PTR [RAX+26],64
            jne .L_4135f6

            test BYTE PTR [RBX+78],64
            je .L_413600
.L_4135f6:

            or BYTE PTR [RBX+78],64
            jmp .L_413426
          .byte 0x90
.L_413600:

            mov RDI,R13
            mov RSI,RAX
            call .L_41cd60

            mov RDI,RBX
            movzx ESI,AL
            call .L_404180

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42b300

            jmp .L_413426
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413630:

            mov RDI,R13
            call .L_415a80

            mov RDI,R14
            mov RSI,RAX
            call .L_40f290

            test AL,AL
            jne .L_41355b

            cmp BYTE PTR [RSP+15],0
            je .L_413426

            xor R15D,R15D
            jmp .L_413676
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413660:

            add R15D,1
            add R12,136
            cmp BYTE PTR [RSP+15],R15B
            jbe .L_413426
.L_413676:

            mov RDX,R12
            mov RSI,R14
            mov RDI,R13
            call .L_424380

            test AL,AL
            je .L_413660

            movzx ESI,R15B
            mov RDI,RBX
            call .L_404180

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42b300

            jmp .L_413660
.L_4136a5:

            call __stack_chk_fail@PLT
.L_4136aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4136b0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_4136c4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RDI+240]
            mov DWORD PTR [RSP],EDX
            lea RBX,QWORD PTR [RSP+16]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_404570

            test RAX,RAX
            mov BYTE PTR [RSP+7],0
            mov R14,RAX
            jne .L_413708

            jmp .L_413777
          .byte 0x90
.L_413700:

            test R15,R15
            mov R14,R15
            je .L_413770
.L_413708:

            mov RDI,R14
            call .L_4033c0

            test BYTE PTR [R14+78],3
            mov R15,RAX
            jne .L_413700

            mov RCX,RBX
            mov EDX,16
            mov ESI,24
            mov RDI,R14
            call .L_403860

            mov RSI,R12
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            mov R13D,EAX
            je .L_413700

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_404640

            mov EAX,DWORD PTR [RSP]
            test EAX,EAX
            jne .L_4137a0

            lea RDI,QWORD PTR [RBP+96]
            mov RSI,R14
            mov R14,R15
            call .L_404a10

            test R15,R15
            mov BYTE PTR [RSP+7],R13B
            jne .L_413708

            nop
            nop
.L_413770:

            cmp BYTE PTR [RSP+7],0
            jne .L_4137c8
.L_413777:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4137d6

            add RSP,56
.L_41378b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4137a0:

            mov R8D,DWORD PTR [RSP]
            mov RDI,RBP
            xor ECX,ECX
            mov RDX,R14
            mov ESI,3
            call .L_43f670

            mov RDI,R14
            call .L_4033b0

            jmp .L_413700
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4137c8:

            lea RDI,QWORD PTR [RBP+192]
            call .L_404bc0

            jmp .L_413777
.L_4137d6:

            call __stack_chk_fail@PLT
.L_4137db:

            nop
            nop
            nop
            nop
            nop
.L_4137e0:

            test WORD PTR [RSI+126],8191
            jne .L_4137f0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4137f0:

            jmp .L_413320
.L_4137f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413800:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,16
.L_41380b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            cmp BYTE PTR [RSP+7],0
            je .L_413881

            mov R12,RAX
            xor EBX,EBX
            nop
            nop
            nop
.L_413840:

            movzx ECX,BL
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            lea RSI,QWORD PTR [R12+RDX*8]
            movzx EDX,BYTE PTR [RSI+26]
            and EDX,7
            lea ECX,DWORD PTR [RDX-6]
            cmp CL,1
            jbe .L_413878

            cmp DL,1
            je .L_413878

            test WORD PTR [RSI+126],8191
            je .L_413878

            mov RDI,RBP
            call .L_413320

            nop
            nop
            nop
.L_413878:

            add EBX,1
            cmp BYTE PTR [RSP+7],BL
            ja .L_413840
.L_413881:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41389a

            add RSP,16
.L_413895:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_41389a:

            call __stack_chk_fail@PLT
.L_41389f:

            nop
.L_4138a0:

            push RBP
            push RBX
            mov RBP,RDI
            add RDI,96
            sub RSP,8
            call .L_404810

            test RAX,RAX
            mov RBX,RAX
            je .L_4138f0
.L_4138ba:

            mov RDI,RBX
            call .L_4041d0

            test AL,AL
            je .L_4138e0

            mov RSI,RBX
            mov RDI,RBP
            call .L_43d7b0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4138e0:

            mov RDI,RBX
            call .L_4033c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_4138ba
.L_4138f0:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_4138fc:

            nop
            nop
            nop
            nop
.L_413900:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RDI
            sub RSP,8
.L_413913:

            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R12
            call .L_41cd60

            movzx EBX,AL
            mov RDI,R13
            mov ESI,EBX
            call .L_4040e0

            test AL,AL
            mov EDX,23
            je .L_41395f

            mov ESI,EBX
            mov RDI,R13
            call .L_404130

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,R12
            call .L_42b430

            xor EDX,EDX
            cmp R13,QWORD PTR [R12+112]
            je .L_413970
.L_41395f:

            add RSP,8
.L_413963:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_413970:

            mov QWORD PTR [R12+112],0
            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_413986:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413990:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RSI
            mov EBX,EDX
            sub RSP,104
.L_4139a6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            mov RBP,RAX
            lea RAX,QWORD PTR [R12+96]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_404810

            test RAX,RAX
            je .L_413acc

            mov R14,RAX
            lea RAX,QWORD PTR [RSP+48]
            lea R15,QWORD PTR [RSP+42]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+72]
            mov QWORD PTR [RSP+24],RAX
            lea RAX,QWORD PTR [RBP+2568]
            mov QWORD PTR [RSP],RAX
.L_413a00:

            mov RDI,R14
            call .L_4033c0

            test BL,BL
            mov RBP,RAX
            je .L_413a22

            movzx EAX,BYTE PTR [R14+78]
            shr AL,2
            and EAX,15
            cmp BL,AL
            jne .L_413ac0
.L_413a22:

            mov RDX,R13
            mov RSI,R14
            mov RDI,R12
            call .L_413900

            test EAX,EAX
            je .L_413a80

            movzx EAX,BYTE PTR [R14+78]
            and EAX,3
            je .L_413af0

            cmp AL,1
            jne .L_413a80

            xor EAX,EAX
            mov RSI,R14
            mov RDI,R15
            mov DWORD PTR [R15],0
            mov WORD PTR [R15+4],AX
            call .L_43d3d0

            movzx ESI,WORD PTR [RSP+46]
            mov RDI,QWORD PTR [RSP]
            rol SI,8
            movzx ESI,SI
            call .L_41cdd0

            cmp R13,RAX
            je .L_413b1b

            nop
            nop
            nop
.L_413a80:

            mov RDI,R14
            call .L_4041d0

            test AL,AL
            jne .L_413ac0

            test BYTE PTR [R14+78],64
            jne .L_413ac0

            cmp QWORD PTR [R12+144],R14
            je .L_413b28
.L_413aa1:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_404a30

            mov RDI,R14
            call .L_4033b0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413ac0:

            test RBP,RBP
            mov R14,RBP
            jne .L_413a00
.L_413acc:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_413b39

            add RSP,104
.L_413ae0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413af0:

            mov RCX,QWORD PTR [RSP+16]
            xor ESI,ESI
            mov EDX,40
            mov RDI,R14
            call .L_403860

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP]
            call .L_41d050

            cmp R13,RAX
            jne .L_413a80
.L_413b1b:

            and BYTE PTR [R14+78],191
            jmp .L_413a80
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_413b28:

            mov QWORD PTR [R12+144],0
            jmp .L_413aa1
.L_413b39:

            call __stack_chk_fail@PLT
.L_413b3e:

            nop
            nop
.L_413b40:

            push R15
            push R14
            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+96]
            push RBX
            mov RBX,RDI
            sub RSP,88
.L_413b55:

            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_404810

            test RAX,RAX
            je .L_413c17

            lea R12,QWORD PTR [RSP+32]
            mov R15,RAX
            lea RAX,QWORD PTR [R12+24]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+31]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_413ba8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413b98:

            mov RDI,R15
            call .L_4033c0

            test RAX,RAX
            mov R15,RAX
            je .L_413c17
.L_413ba8:

            movzx EAX,BYTE PTR [R15+78]
            shr AL,2
            and EAX,15
            cmp AL,9
            jne .L_413b98

            xor ESI,ESI
            mov RCX,R12
            mov EDX,40
            mov RDI,R15
            call .L_403860

            mov RDI,QWORD PTR [RSP]
            call .L_40ee50

            test AL,AL
            je .L_413c50
.L_413bd6:

            cmp QWORD PTR [RBX+144],R15
            je .L_413c40
.L_413bdf:

            mov RSI,R15
            mov RDI,RBP
            call .L_404a30

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov ESI,3
            mov RDI,RBX
            call .L_43f670

            mov RDI,R15
            call .L_4033b0

            mov RDI,R15
            call .L_4033c0

            test RAX,RAX
            mov R15,RAX
            jne .L_413ba8
.L_413c17:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_413cad

            add RSP,88
.L_413c2f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413c40:

            mov QWORD PTR [RBX+144],0
            jmp .L_413bdf
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_413c50:

            mov RDI,RBX
            call .L_430af0

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            cmp BYTE PTR [RSP+31],0
            mov R14,RAX
            je .L_413bd6

            xor R13D,R13D
            nop
            nop
            nop
            nop
            nop
            nop
.L_413c80:

            movzx EDX,R13B
            mov RSI,R15
            mov RDI,RBX
            mov RAX,RDX
            add R13D,1
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [R14+RAX*8]
            call .L_413900

            cmp BYTE PTR [RSP+31],R13B
            ja .L_413c80

            jmp .L_413bd6
.L_413cad:

            call __stack_chk_fail@PLT
.L_413cb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413cc0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R14,QWORD PTR [R12+96]
            sub RSP,56
.L_413cd9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R15
            call .L_41cd60

            mov RDI,R14
            movzx EBP,AL
            call .L_404810

            test RAX,RAX
            je .L_413dfe

            mov RBX,RAX
            lea RAX,QWORD PTR [R12+248]
            mov QWORD PTR [RSP+8],RAX
.L_413d21:

            mov RDI,RBX
            call .L_4033c0

            mov ESI,EBP
            mov RDI,RBX
            mov R13,RAX
            call .L_4040e0

            test AL,AL
            je .L_413df2

            movzx EAX,BYTE PTR [RBX+78]
            and EAX,3
            cmp AL,3
            jne .L_413d58

            movzx EAX,WORD PTR [R15+126]
            and AX,8191
            cmp AX,1
            ja .L_413dc8
.L_413d58:

            movzx EAX,WORD PTR [R15+120]
            lea RSI,QWORD PTR [RSP+28]
            mov RDI,R15
            mov QWORD PTR [R15+112],RBX
            mov BYTE PTR [R15+123],0
            mov DWORD PTR [RSP+36],0
            and AX,32768
            mov WORD PTR [R15+120],AX
            mov BYTE PTR [R15+121],128
            call .L_42c030

            xor R8D,R8D
            mov RCX,RAX
            mov RDX,RBX
            mov ESI,2
            mov RDI,R12
            call .L_43f670
.L_413d9f:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov RAX,RBX
            jne .L_413e25

            add RSP,56
.L_413db6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_413dc8:

            mov ESI,EBP
            mov RDI,RBX
            call .L_404130

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_42b430

            mov RDI,R14
            mov RSI,RBX
            call .L_404a30

            mov RDI,RBX
            call .L_4033b0
.L_413df2:

            test R13,R13
            mov RBX,R13
            jne .L_413d21
.L_413dfe:

            movzx EAX,WORD PTR [R15+120]
            mov QWORD PTR [R15+112],0
            xor EBX,EBX
            mov BYTE PTR [R15+123],0
            and AX,32768
            mov WORD PTR [R15+120],AX
            mov BYTE PTR [R15+121],128
            jmp .L_413d9f
.L_413e25:

            call __stack_chk_fail@PLT
.L_413e2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_413e30:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            sub RSP,56
.L_413e43:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDX+123],0
            je .L_413e7d

            mov BYTE PTR [RDI+152],1
            mov EAX,DWORD PTR [RDX+104]
            mov DWORD PTR [RDI+252],EAX
            movzx EAX,BYTE PTR [RDX+122]
            mov BYTE PTR [RDI+256],AL
            movzx EAX,BYTE PTR [RDX+124]
            mov BYTE PTR [RDI+257],AL
.L_413e7d:

            movzx ESI,WORD PTR [RBP+120]
            mov RDI,R12
            and ESI,32767
            call .L_403550

            movzx EAX,BYTE PTR [R12+78]
            and EAX,3
            je .L_413ed0

            cmp AL,3
            jne .L_413f38

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RBP
            call .L_42c030
.L_413eb1:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_413f57

            add RSP,56
.L_413ec9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_413ed0:

            mov R13,RSP
            xor ESI,ESI
            mov EDX,40
            mov RCX,R13
            mov RDI,R12
            call .L_403860

            lea RDX,QWORD PTR [RBX+156]
            lea RSI,QWORD PTR [R13+8]
            mov RDI,RBX
            add R13,24
            mov BYTE PTR [RBX+184],0
            call .L_43da70

            mov RDI,R13
            call .L_40ee30

            test AL,AL
            lea RDX,QWORD PTR [RBX+168]
            je .L_413f28

            mov RSI,R13
            mov RDI,RBX
            call .L_43dac0

            jmp .L_413eb1
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_413f28:

            mov RSI,RDX
            mov RDI,RBP
            call .L_42c030

            jmp .L_413eb1
.L_413f38:

            lea RCX,QWORD PTR [RIP+.L_458c60]
            lea RSI,QWORD PTR [RIP+.L_458b97]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,531
            call __assert_fail@PLT
.L_413f57:

            call __stack_chk_fail@PLT
.L_413f5c:

            nop
            nop
            nop
            nop
.L_413f60:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,32
.L_413f6b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            mov RDI,RBX
            mov R12,RAX
            call .L_413800

            lea RSI,QWORD PTR [RSP+23]
            lea RDI,QWORD PTR [R12+2568]
            call .L_41cd80

            movzx EBP,BYTE PTR [RBX+258]
            movzx ESI,BYTE PTR [RSP+23]
            cmp BPL,SIL
            jb .L_413fb7

            mov BYTE PTR [RBX+258],0
            xor EBP,EBP
.L_413fb7:

            test SIL,SIL
            je .L_414001

            mov R10D,ESI
            xor R11D,R11D
.L_413fc2:

            movzx ECX,BPL
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            lea ECX,DWORD PTR [RBP+1]
            lea RDX,QWORD PTR [RAX+RDX*8]
            cmp SIL,CL
            movzx EDI,BYTE PTR [RDX+26]
            cmove ECX,R11D
            mov R8D,EDI
            and R8D,7
            lea R9D,DWORD PTR [R8-6]
            cmp R9B,1
            jbe .L_414010

            cmp R8B,1
            je .L_414010
.L_413ff9:

            sub R10B,1
            mov EBP,ECX
            jne .L_413fc2
.L_414001:

            mov EAX,23
            jmp .L_41404e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414010:

            test DIL,DIL
            jns .L_413ff9

            mov RSI,QWORD PTR [RDX+112]
            mov BYTE PTR [RBX+153],1
            test RSI,RSI
            mov QWORD PTR [RBX+144],RSI
            je .L_414070
.L_41402c:

            mov RDI,RBX
            call .L_413e30
.L_414034:

            lea RSI,QWORD PTR [RBX+24]
            lea RDI,QWORD PTR [R12+1560]
            mov BYTE PTR [RBX+258],BPL
            call .L_405a80

            xor EAX,EAX
.L_41404e:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4140eb

            add RSP,32
.L_414066:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414070:

            mov RSI,RDX
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RDX
            call .L_413cc0

            test RAX,RAX
            mov RSI,RAX
            mov QWORD PTR [RBX+144],RAX
            mov RDX,QWORD PTR [RSP+8]
            jne .L_41402c

            test BYTE PTR [RDX+127],32
            je .L_4140d0

            movzx EAX,WORD PTR [R12+1664]
            mov DWORD PTR [RBX+164],1
            mov WORD PTR [RBX+156],AX
.L_4140b4:

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RDX
            call .L_42c030

            jmp .L_414034
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4140d0:

            mov RAX,QWORD PTR [R12+1656]
            mov DWORD PTR [RBX+164],2
            mov QWORD PTR [RBX+156],RAX
            jmp .L_4140b4
.L_4140eb:

            call __stack_chk_fail@PLT
.L_4140f0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,8
.L_414103:

            call .L_430af0

            mov EDX,13
            mov R13,RAX
            mov ESI,39017
            mov RDI,RBX
            call .L_408de0

            movzx ESI,WORD PTR [R13+1666]
            mov RDI,RBX
            call .L_408550

            movzx ESI,WORD PTR [R12+168]
            mov RDI,RBX
            call .L_408620

            movzx ESI,WORD PTR [R12+156]
            mov RDI,RBX
            call .L_4088c0

            movzx R13D,WORD PTR [RBP+58]
            mov RDI,RBX
            call .L_409130

            movzx EAX,AL
            cmp AX,R13W
            jb .L_4141a4

            mov RDI,RBX
            call .L_4091e0

            movzx EDX,WORD PTR [RBP+58]
            mov RDI,RBP
            mov RCX,RAX
            xor ESI,ESI
            call .L_403860

            movzx ESI,BYTE PTR [RBP+58]
            mov RDI,RBX
            call .L_4091a0

            movzx EAX,WORD PTR [RBP+58]
            mov WORD PTR [R12+138],AX
            add RSP,8
.L_41419b:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4141a4:

            lea RCX,QWORD PTR [RIP+.L_458c00]
            lea RSI,QWORD PTR [RIP+.L_458b97]
            lea RDI,QWORD PTR [RIP+.L_458bb8]
            mov EDX,552
            call __assert_fail@PLT
.L_4141c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4141d0:

            push R12
            push RBP
            mov RBP,RDX
            push RBX
.L_4141d7:

            mov R12,RSI
            mov RBX,RDI
            call .L_430af0

            cmp BYTE PTR [RBP+5],0
            je .L_414240

            cmp DWORD PTR [RAX+2580],1
            je .L_414240

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,R12
            call .L_41cce0

            test RAX,RAX
            mov RBP,RAX
            je .L_414240

            call .L_401240

            test WORD PTR [RBP+126],8191
            mov DWORD PTR [RBP+8],EAX
            mov BYTE PTR [RBP+27],0
            jne .L_414225

            cmp BYTE PTR [RBX+248],1
            je .L_414229
.L_414225:

            or BYTE PTR [RBP+26],128
.L_414229:

            lea RDI,QWORD PTR [RBX+192]
            pop RBX
.L_414231:

            pop RBP
            pop R12
            jmp .L_404bc0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414240:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_414245:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414250:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,EDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RCX
            sub RSP,24
.L_41426a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea R13,QWORD PTR [RAX+2568]
            mov RSI,RBX
            mov R12,RAX
            mov RDI,R13
            call .L_41cce0

            test RAX,RAX
            je .L_4142ea

            and BYTE PTR [RAX+26],127
            mov RBX,RAX
            mov RAX,QWORD PTR [RBP+144]
            test RAX,RAX
            je .L_4142ea

            cmp RAX,QWORD PTR [RBX+112]
            je .L_414328

            movzx EAX,WORD PTR [RAX+58]
            cmp WORD PTR [RBP+138],AX
            jb .L_4142e5
.L_4142bf:

            mov RDI,R13
            mov RSI,RBX
            call .L_41cd60

            mov RDI,QWORD PTR [RBP+144]
            movzx R13D,AL
            mov ESI,R13D
            call .L_4040e0

            test AL,AL
            jne .L_414378
.L_4142e5:

            test R14D,R14D
            je .L_414310
.L_4142ea:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41446d

            add RSP,24
.L_414302:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414310:

            lea RDI,QWORD PTR [R12+11232]
            mov RSI,RBX
            call .L_42c5b0

            jmp .L_4142ea
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414328:

            add BYTE PTR [RBP+258],1
            test R14D,R14D
            jne .L_4143a0

            mov BYTE PTR [RBX+123],0
            movzx EAX,WORD PTR [RBP+138]
            mov RDX,QWORD PTR [RBP+144]
.L_414346:

            cmp WORD PTR [RDX+58],AX
            mov RCX,QWORD PTR [RBX+112]
            jbe .L_414420

            cmp RDX,RCX
            jne .L_4142e5

            movzx EDX,WORD PTR [RBX+120]
            and AX,32767
            and DX,32768
            or EAX,EDX
            mov WORD PTR [RBX+120],AX
            jmp .L_4142e5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414378:

            mov RDI,QWORD PTR [RBP+144]
            mov ESI,R13D
            call .L_404130

            lea RDI,QWORD PTR [RBP+248]
            mov RSI,RBX
            call .L_42b430

            jmp .L_4142e5
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4143a0:

            movzx EAX,BYTE PTR [RBX+123]
            add EAX,1
            cmp AL,3
            mov BYTE PTR [RBX+123],AL
            ja .L_4143f8

            mov RAX,QWORD PTR [R15]
            movzx EAX,BYTE PTR [RAX+2]
            mov BYTE PTR [RBX+124],AL
            mov RAX,QWORD PTR [R15]
            test BYTE PTR [RAX],8
            je .L_4142ea

            lea RSI,QWORD PTR [RSP+4]
            mov RDI,R15
            call .L_408b10

            mov EAX,DWORD PTR [RSP+4]
            lea RSI,QWORD PTR [RSP+3]
            mov RDI,R15
            mov DWORD PTR [RBX+104],EAX
            call .L_408cf0

            movzx EAX,BYTE PTR [RSP+3]
            mov BYTE PTR [RBX+122],AL
            jmp .L_4142ea
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4143f8:

            and BYTE PTR [RBX+121],127
            mov BYTE PTR [RBX+123],0
            mov RDX,QWORD PTR [RBP+144]
            movzx EAX,WORD PTR [RDX+58]
            mov WORD PTR [RBP+138],AX
            jmp .L_414346
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414420:

            cmp RDX,RCX
            jne .L_4142bf

            movzx EAX,WORD PTR [RBX+120]
            lea RDI,QWORD PTR [RBX+34]
            mov QWORD PTR [RBX+112],0
            mov EDX,128
            and AX,32768
            mov WORD PTR [RBX+120],AX
            movzx EAX,AH
            shr AL,7
            movzx ESI,AL
            call .L_412ed0

            lea RDI,QWORD PTR [RBP+248]
            mov EDX,1
            mov RSI,RBX
            call .L_42b480

            jmp .L_4142bf
.L_41446d:

            call __stack_chk_fail@PLT
.L_414472:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414480:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            sub RSP,16
.L_41448e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RSP+2]
            mov RSI,R12
            mov RBP,RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],0
            lea R12,QWORD PTR [RBP+2568]
            mov WORD PTR [RSP+6],AX
            call .L_43d3d0

            movzx ESI,WORD PTR [RSP+6]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_41d830

            cmp AX,-2
            je .L_414570

            movzx ESI,AX
            mov RDI,R12
            call .L_41cdd0

            test RAX,RAX
            je .L_41458d
.L_4144fb:

            movzx EAX,WORD PTR [RAX+24]
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            movzx EAX,WORD PTR [RBP+1664]
            mov DWORD PTR [RBX+164],1
            mov BYTE PTR [RBX+184],1
            mov WORD PTR [RBX+156],AX
            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            mov WORD PTR [RBX+182],AX
            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            mov WORD PTR [RBX+180],AX
            xor EAX,EAX
.L_414551:

            mov RDX,QWORD PTR [RSP+8]
            xor RDX,QWORD PTR FS:[40]
            jne .L_414594

            add RSP,16
.L_414565:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414570:

            movzx ESI,WORD PTR [RSP+6]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_41cdd0

            test RAX,RAX
            jne .L_4144fb
.L_41458d:

            mov EAX,2
            jmp .L_414551
.L_414594:

            call __stack_chk_fail@PLT
.L_414599:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4145a0:

            push R14
            push R13
            mov R14,R8
            push R12
            push RBP
            mov R13,RCX
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,64
.L_4145b7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RSP+10]
            mov R12,RAX
            movzx EDX,BL
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+10],0
            mov WORD PTR [RSP+14],AX
            call .L_43d380

            test EAX,EAX
            jne .L_414660

            movzx EDX,BYTE PTR [RSP+10]
            and EDX,15
            cmp DL,15
            sete DL
            xor ECX,ECX
            movzx R8D,DL
            add EDX,5
            add R8,5
            sub BL,DL
            je .L_41463b

            add R8,RBP
            movzx EDX,WORD PTR [R8]
            rol DX,8
            mov ECX,EDX
            and CX,55296
            cmp CX,49152
            je .L_4146b0
.L_41462e:

            movzx EAX,BYTE PTR [R8]
            xor ECX,ECX
            and EAX,4294967264
            cmp AL,96
            je .L_414670
.L_41463b:

            mov RSI,QWORD PTR [RSP+56]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_4146fb

            add RSP,64
.L_414655:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_414660:

            mov ECX,2
            jmp .L_41463b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414670:

            lea RBP,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R12+1552]
            movzx R9D,BL
            mov RCX,R14
            mov RDX,R13
            mov RSI,RBP
            call .L_43c6f0

            test EAX,EAX
            jle .L_414660

            movzx EDX,WORD PTR [R14]
            movzx ESI,WORD PTR [R13]
            lea RDI,QWORD PTR [R12+2568]
            mov RCX,RBP
            call .L_41e550

            mov ECX,EAX
            jmp .L_41463b
.L_4146b0:

            cmp BL,4
            jbe .L_414660

            and DH,32
            jne .L_4146e8

            mov EAX,4
.L_4146bf:

            add R8,RAX
            movzx EAX,WORD PTR [R8]
            rol AX,8
            test AH,32
            setne AL
            add EAX,4
            sub BL,AL
            jne .L_41462e

            xor ECX,ECX
            jmp .L_41463b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4146e8:

            cmp BYTE PTR [R8+4],0
            mov ECX,EAX
            mov EAX,5
            je .L_4146bf

            jmp .L_41463b
.L_4146fb:

            call __stack_chk_fail@PLT
.L_414700:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,72
.L_41471c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RSP+10]
            mov R13,RAX
            movzx EDX,BL
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+10],0
            mov WORD PTR [RSP+14],AX
            call .L_43d380

            test EAX,EAX
            jne .L_414773

            movzx EAX,BYTE PTR [RSP+10]
            and EAX,15
            cmp AL,15
            sete AL
            movzx R8D,AL
            add EAX,5
            add R8,5
            sub BL,AL
            jne .L_4147a0
.L_414773:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4148b7

            add RSP,72
.L_41478b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4147a0:

            add R8,RBP
            movzx EAX,WORD PTR [R8]
            rol AX,8
            mov EDX,EAX
            and DX,55296
            cmp DX,49152
            je .L_414870
.L_4147bd:

            movzx EAX,BYTE PTR [R8]
            and EAX,4294967264
            cmp AL,96
            jne .L_414773

            lea RBP,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+1552]
            movzx R9D,BL
            mov RCX,R15
            mov RDX,R14
            mov RSI,RBP
            call .L_43c6f0

            test EAX,EAX
            jle .L_414773

            lea R14,QWORD PTR [R13+2568]
            add RBP,8
            mov RSI,RBP
            mov RDI,R14
            call .L_41d050

            test RAX,RAX
            mov RBX,RAX
            je .L_414773

            test BYTE PTR [RAX+26],16
            jne .L_414773

            movzx EDX,WORD PTR [RSP+12]
            lea RDI,QWORD PTR [R13+10688]
            mov RSI,RBP
            rol DX,8
            movzx EDX,DX
            call .L_411430

            movzx EBP,WORD PTR [RSP+12]
            mov RDI,R12
            call .L_430af0

            movzx EAX,WORD PTR [RAX+1664]
            rol BP,8
            movzx EBP,BP
            sar EBP,10
            sar EAX,10
            cmp BPL,AL
            je .L_414773

            mov RSI,RBX
            mov RDI,R14
            call .L_420c20

            jmp .L_414773
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414870:

            cmp BL,4
            jbe .L_414773

            test AH,32
            je .L_4148b0

            cmp BYTE PTR [R8+4],0
            mov EAX,5
            jne .L_414773
.L_41488e:

            add R8,RAX
            movzx EAX,WORD PTR [R8]
            rol AX,8
            test AH,32
            setne AL
            add EAX,4
            sub BL,AL
            jne .L_4147bd

            jmp .L_414773
          .byte 0x90
.L_4148b0:

            mov EAX,4
            jmp .L_41488e
.L_4148b7:

            call __stack_chk_fail@PLT
.L_4148bc:

            nop
            nop
            nop
            nop
.L_4148c0:

            push R15
            push R14
            mov R14,R8
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov EBX,EDX
            mov RBP,RSI
            movzx R13D,BL
            sub RSP,88
.L_4148dd:

            mov QWORD PTR [RSP+8],RCX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RSP+42]
            mov R15,RAX
            mov EDX,R13D
            xor EAX,EAX
            mov RSI,RBP
            mov DWORD PTR [RSP+56],0
            mov DWORD PTR [RSP+68],0
            mov DWORD PTR [RSP+42],0
            mov WORD PTR [RSP+46],AX
            call .L_43d380

            test EAX,EAX
            jne .L_414938

            cmp BYTE PTR [R14+5],0
            jne .L_414960

            nop
            nop
            nop
            nop
.L_414938:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_414b9e

            add RSP,88
.L_414950:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414960:

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,48
            cmp AL,48
            jne .L_414938

            movzx EAX,WORD PTR [RSP+44]
            lea R8,QWORD PTR [RSP+48]
            mov RSI,RBP
            mov EDX,R13D
            mov RDI,R12
            mov DWORD PTR [RSP+68],1
            mov DWORD PTR [RSP+56],1
            mov QWORD PTR [RSP+16],R8
            rol AX,8
            mov WORD PTR [RSP+60],AX
            movzx EAX,WORD PTR [RSP+46]
            rol AX,8
            mov WORD PTR [RSP+48],AX
            lea RAX,QWORD PTR [RSP+60]
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_414700

            movzx ESI,WORD PTR [RSP+48]
            cmp SI,WORD PTR [R15+1664]
            jne .L_414a30
.L_4149cc:

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,15
            cmp AL,15
            sete AL
            movzx EDX,AL
            add EAX,5
            lea RSI,QWORD PTR [RBP+RDX*1+5]
            sub EBX,EAX
            movzx EAX,WORD PTR [RSI]
            rol AX,8
            and AX,55296
            cmp AX,49152
            je .L_414b18

            movzx EAX,BYTE PTR [RSI]
            and EAX,4294967264
            cmp AL,96
            jne .L_414938

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            movzx EDX,BL
            mov R9,R14
            mov RDI,R12
            call .L_43f310

            jmp .L_414938
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414a30:

            add R15,2568
            mov RDI,R15
            call .L_41ceb0

            test AL,AL
            jne .L_4149cc

            movzx EAX,BYTE PTR [RSP+42]
            and EAX,15
            cmp AL,15
            jne .L_414a54

            movzx EAX,BYTE PTR [RSP+43]
.L_414a54:

            test AL,AL
            je .L_414938

            mov RAX,QWORD PTR [RSP+8]
            movzx EDX,WORD PTR [RSP+48]
            mov RDI,R15
            movzx ESI,WORD PTR [RAX]
            call .L_41e500

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_4145a0

            test EAX,EAX
            jne .L_414938

            movzx EAX,BYTE PTR [RSP+42]
            mov EDX,EAX
            and EDX,15
            cmp DL,15
            je .L_414b55

            sub EDX,1
            cmp DL,14
            jbe .L_414b35

            mov EDX,4294967295
.L_414ab5:

            or EAX,15
            mov BYTE PTR [RSP+43],DL
            mov BYTE PTR [RSP+42],AL
            mov BYTE PTR [RBP],AL
.L_414ac3:

            movzx EDX,BYTE PTR [RSP+43]
            lea RAX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP+1],DL
.L_414acf:

            mov EDX,DWORD PTR [RSP+44]
            mov RDI,R12
            mov DWORD PTR [RAX],EDX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            mov ESI,1
            call .L_403740

            test RAX,RAX
            mov RBX,RAX
            je .L_414938

            mov ESI,R13D
            mov RDI,RAX
            call .L_403420

            test EAX,EAX
            je .L_414b62

            mov RDI,RBX
            call .L_4033b0

            jmp .L_414938
.L_414b18:

            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            movzx EDX,BL
            mov R9,R14
            mov RDI,R12
            call .L_43ef90

            jmp .L_414938
.L_414b35:

            and EAX,4294967280
            or EAX,EDX
            mov BYTE PTR [RSP+42],AL
            mov BYTE PTR [RBP],AL
            and EAX,15
            cmp AL,15
            je .L_414ac3

            lea RAX,QWORD PTR [RBP+1]
            jmp .L_414acf
.L_414b55:

            movzx ECX,BYTE PTR [RSP+43]
            lea EDX,DWORD PTR [RCX-1]
            jmp .L_414ab5
.L_414b62:

            mov EDX,R13D
            xor ESI,ESI
            mov RDI,RBX
            mov RCX,RBP
            call .L_403ac0

            movzx EDX,BYTE PTR [R14+5]
            movzx EAX,BYTE PTR [RBX+78]
            mov RSI,RBX
            mov RDI,R12
            shl EDX,7
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [RBX+78],AL
            movzx EAX,WORD PTR [R14]
            mov WORD PTR [RBX+76],AX
            call .L_4133e0

            jmp .L_414938
.L_414b9e:

            call __stack_chk_fail@PLT
.L_414ba3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414bb0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov EBX,ESI
            sub RSP,8
.L_414bc3:

            call .L_430af0

            lea ESI,DWORD PTR [RBX-16]
            lea RDI,QWORD PTR [RAX+7520]
            mov RBP,RAX
            movzx ESI,SIL
            call .L_428480

            test RAX,RAX
            je .L_414cb8

            cmp BYTE PTR [RAX+2],0
            lea RBX,QWORD PTR [RAX+3]
            js .L_414ca8

            lea RDX,QWORD PTR [RAX+7]
            mov ECX,5
.L_414bfe:

            movzx EDX,BYTE PTR [RDX]
            add RDX,RCX
            add RBX,RDX
            movzx EDX,BYTE PTR [RAX+1]
            lea R14,QWORD PTR [RAX+RDX*1+2]
            cmp R14,RBX
            jbe .L_414cb8

            add RBP,2568
            mov R15D,4294967294
            mov R12D,16
            jmp .L_414c3e
          .byte 0x66
          .byte 0x90
.L_414c30:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RBX
            jbe .L_414c88
.L_414c3e:

            movzx EDX,BYTE PTR [RBX]
            sar EDX,1
            cmp EDX,6
            jne .L_414c30

            movzx ESI,WORD PTR [RBX+2]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_41d9c0

            cmp R15W,-2
            je .L_414c67

            cmp AL,R12B
            jae .L_414c30
.L_414c67:

            mov R12D,EAX
            movzx EAX,BYTE PTR [RBX+1]
            movzx R15D,WORD PTR [RBX+2]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            rol R15W,8
            cmp R14,RBX
            ja .L_414c3e

            nop
            nop
            nop
            nop
            nop
            nop
.L_414c88:

            cmp R15W,-2
            je .L_414cb8

            mov WORD PTR [R13],R15W
            add RSP,8
.L_414c98:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414ca8:

            mov RDX,RBX
            mov ECX,1
            jmp .L_414bfe
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_414cb8:

            add RSP,8
            mov EAX,2
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_414ccc:

            nop
            nop
            nop
            nop
.L_414cd0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [R12+24]
            sub RSP,40
.L_414ce9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            lea R13,QWORD PTR [RAX+2568]
            mov RSI,RBX
            mov R14,RAX
            mov RDI,R13
            call .L_4193e0

            test AL,AL
            je .L_414e08

            movzx EDX,WORD PTR [R12+38]
            rol DX,8
            movzx EAX,DX
            sar EAX,10
            cmp EAX,63
            je .L_414dd8
.L_414d34:

            mov WORD PTR [RBP+182],DX
.L_414d3b:

            cmp DX,-2
            je .L_414dd8

            movzx ESI,WORD PTR [R14+1664]
            movzx EDX,DX
            mov RCX,R12
            mov RDI,R13
            mov WORD PTR [RBP+180],SI
            call .L_41e550

            test EAX,EAX
            mov EBX,EAX
            jne .L_414ddd

            movzx ESI,WORD PTR [RBP+182]
            mov RDI,R13
            call .L_41d830

            cmp WORD PTR [RBP+182],AX
            mov WORD PTR [RBP+168],AX
            mov DWORD PTR [RBP+176],1
            je .L_414ddd

            movzx EAX,WORD PTR [RBP+180]
            mov DWORD PTR [RBP+164],1
            mov BYTE PTR [RBP+184],1
            mov WORD PTR [RBP+156],AX
            jmp .L_414ddd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414db8:

            lea RDX,QWORD PTR [RSP+22]
            lea RDI,QWORD PTR [R14+7520]
            and ESI,15
            call .L_4264a0

            test EAX,EAX
            je .L_414e98

            nop
            nop
            nop
            nop
.L_414dd8:

            mov EBX,2
.L_414ddd:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_414f2d

            add RSP,40
.L_414df7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414e08:

            mov RSI,RBX
            mov RDI,R13
            call .L_41ad30

            test AL,AL
            je .L_414e60

            movzx ESI,WORD PTR [R12+38]
            rol SI,8
            cmp SI,64512
            je .L_414e80

            cmp SI,64527
            jbe .L_414db8

            lea EAX,DWORD PTR [RSI+1008]
            cmp AX,31
            ja .L_414dd8

            lea RDX,QWORD PTR [RBP+182]
            movzx ESI,SI
            mov RDI,RBP
            call .L_414bb0

            test EAX,EAX
            mov EBX,EAX
            jne .L_414ddd
.L_414e53:

            movzx EDX,WORD PTR [RBP+182]
            jmp .L_414d3b
          .byte 0x90
.L_414e60:

            mov RSI,RBX
            mov RDI,R13
            call .L_41d050

            test RAX,RAX
            je .L_414ed8

            movzx EDX,WORD PTR [RAX+24]
            jmp .L_414d34
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_414e80:

            mov RDI,R13
            call .L_415eb0

            mov EDX,EAX
            shl EDX,10
            jmp .L_414d34
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_414e98:

            movzx EDX,WORD PTR [RSP+22]
            test DX,511
            je .L_414d34

            and DX,64512
            mov RDI,R13
            mov DWORD PTR [RSP+12],EDX
            mov DWORD PTR [RSP+8],EDX
            call .L_415a90

            mov EDX,DWORD PTR [RSP+12]
            cmp AX,DX
            jne .L_414d34

            movzx EDX,WORD PTR [RSP+22]
            jmp .L_414d34
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_414ed8:

            lea R15,QWORD PTR [R14+7520]
            mov RSI,RBX
            mov RDI,R15
            call .L_426560

            test AL,AL
            lea R8,QWORD PTR [RBP+182]
            je .L_414f16

            lea RDI,QWORD PTR [R14+10688]
            mov RSI,RBX
            mov RDX,R8
            call .L_4116f0

            test EAX,EAX
            mov EBX,EAX
            je .L_414e53

            jmp .L_414ddd
.L_414f16:

            lea RSI,QWORD PTR [R12+8]
            xor ECX,ECX
            mov RDX,RBX
            mov RDI,R15
            call .L_426a70

            jmp .L_414e53
.L_414f2d:

            call __stack_chk_fail@PLT
.L_414f32:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414f40:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+248]
            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RIP+.L_41ad20]
            sub RSP,40
.L_414f58:

            mov RDX,RDI
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,19788
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_4108e0

            test EAX,EAX
            jne .L_414f98

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_410940
.L_414f98:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_414faf

            add RSP,40
.L_414fac:

            pop RBX
            pop RBP
            ret 
.L_414faf:

            call __stack_chk_fail@PLT
.L_414fb4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_414fc0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,64
.L_414fcb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            mov RBX,RAX
            mov EAX,DWORD PTR [RBP+12]
            lea R12,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            mov DWORD PTR [RSP+48],0
            lea EDX,DWORD PTR [RAX-2]
            movaps XMMWORD PTR [RSP+16],XMM0
            cmp EDX,2
            movaps XMMWORD PTR [RSP+32],XMM0
            ja .L_4150d0

            mov RDI,RBP
            movzx EDX,BYTE PTR [RBP+56]
            mov BYTE PTR [RSP+16],AL
            mov BYTE PTR [RSP+17],DL
            call .L_430af0

            movzx EAX,WORD PTR [RAX+1664]
            cmp DWORD PTR [RBP+12],2
            mov WORD PTR [RSP+18],AX
            mov EAX,DWORD PTR [RBP+2]
            bswap EAX
            mov DWORD PTR [RSP+32],EAX
            mov RAX,QWORD PTR [RBX+1656]
            mov QWORD PTR [RSP+36],RAX
            mov RAX,QWORD PTR [RBP+472]
            mov QWORD PTR [RSP+44],RAX
            je .L_415100
.L_415058:

            mov EAX,DWORD PTR [RBX+1384]
            mov RDI,RBX
            mov DWORD PTR [RSP+20],EAX
            mov EAX,DWORD PTR [RBX+1456]
            add EAX,1000
            mov DWORD PTR [RSP+24],EAX
            mov EAX,DWORD PTR [RBX+1452]
            add EAX,1000
            mov DWORD PTR [RSP+28],EAX
            call .L_430ac0

            mov ECX,36
            mov RDX,R12
            mov ESI,3
            mov RDI,RAX
            call .L_401540

            test EAX,EAX
            jne .L_4150b5

            mov EDX,DWORD PTR [RSP+24]
            mov DWORD PTR [RBX+1464],EDX
            mov EDX,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+1460],EDX
.L_4150b5:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_415132

            add RSP,64
.L_4150c9:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_4150d0:

            mov RDI,RBX
            mov EAX,36
            mov WORD PTR [RSP+6],AX
            call .L_430ac0

            lea R8,QWORD PTR [RSP+6]
            mov RCX,R12
            xor EDX,EDX
            mov ESI,3
            mov RDI,RAX
            call .L_401530

            jmp .L_415058
          .byte 0x66
          .byte 0x90
.L_415100:

            mov RAX,QWORD PTR [RBP+16]
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_430ac0

            lea RDX,QWORD PTR [RSP+8]
            mov ECX,8
            mov ESI,4
            mov RDI,RAX
            call .L_401540

            test EAX,EAX
            je .L_415058

            jmp .L_4150b5
.L_415132:

            call __stack_chk_fail@PLT
.L_415137:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415140:

            movzx EAX,BYTE PTR [RDI+360]
            ret 
.L_415148:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415150:

            mov BYTE PTR [RDI+360],0
            mov BYTE PTR [RDI+361],0
            mov RSI,QWORD PTR [RDI+352]
            mov RAX,QWORD PTR [RDI+344]
            xor EDI,EDI
            jmp RAX
.L_415170:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_415177:

            mov RBX,RDI
            call .L_430af0

            mov ECX,DWORD PTR [RBX+12]
            mov RBP,RAX
            mov EAX,13
            test ECX,ECX
            je .L_41522b

            mov EDX,DWORD PTR [RBX+60]
            mov EAX,5
            test EDX,EDX
            jne .L_41522b

            cmp DWORD PTR [RBX+64],1
            je .L_415240
.L_4151ac:

            pxor XMM0,XMM0
            mov QWORD PTR [RBX+236],0
            mov DWORD PTR [RBX+60],2
            mov DWORD PTR [RBX+180],R12D
            movups XMMWORD PTR [RBX+220],XMM0
            and BYTE PTR [RBX+230],248
            cmp R12D,3
            movups XMMWORD PTR [RBX+204],XMM0
            je .L_4151ea

            test BYTE PTR [RBX+56],2
            jne .L_415230
.L_4151ea:

            lea RDI,QWORD PTR [RBP+2256]
            mov ESI,1
            call .L_43da10

            call .L_401460

            mov EBP,EAX
            call .L_401240

            mov EDX,91625969
            mov ESI,EAX
            mov EAX,EBP
            mul EDX
            lea RDI,QWORD PTR [RBX+72]
            shr EDX,4
            imul EDX,EDX,750
            sub EBP,EDX
            lea EDX,DWORD PTR [RBP+1]
            call .L_430d50

            xor EAX,EAX
.L_41522b:

            pop RBX
.L_41522c:

            pop RBP
            pop R12
            ret 
.L_415230:

            lea RDI,QWORD PTR [RBP+2568]
            call .L_41b5a0

            jmp .L_4151ea
          .byte 0x66
          .byte 0x90
.L_415240:

            lea RDI,QWORD PTR [RBP+1080]
            call .L_409630

            test EAX,EAX
            sete AL
            movzx EAX,AL
            add EAX,EAX
            mov DWORD PTR [RBX+64],EAX
            jmp .L_4151ac
.L_41525e:

            nop
            nop
.L_415260:

            mov EAX,DWORD PTR [RDI+12]
            sub EAX,2
            cmp EAX,2
            setbe AL
            ret 
.L_41526d:

            nop
            nop
            nop
.L_415270:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_415279:

            call .L_430af0

            cmp DWORD PTR [RBX+12],1
            mov RBP,RAX
            jne .L_4152f0
.L_415287:

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],1
            mov DWORD PTR [RBX+60],0
            call .L_430c70

            lea RDI,QWORD PTR [RBX+120]
            call .L_430c70

            lea RDI,QWORD PTR [RBP+2256]
            mov ESI,1
            call .L_43da10

            and BYTE PTR [RBP+1564],127
            lea RDI,QWORD PTR [RBP+2568]
            call .L_41b560

            mov RDI,RBP
            call .L_430ad0

            mov RDI,RBP
            mov BYTE PTR [RAX],0
            call .L_430ad0

            mov BYTE PTR [RAX+120],0
            add RSP,8
.L_4152e6:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4152f0:

            mov RDI,RBX
            call .L_430b10

            mov ESI,4
            mov RDI,RAX
            call .L_402d30

            cmp DWORD PTR [RBX+12],4
            jne .L_415287

            lea RSI,QWORD PTR [RBX+368]
            mov RDI,RBP
            call .L_4105f0

            jmp .L_415287
.L_415323:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415330:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_415337:

            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1368]
            mov RBP,RAX
            call .L_412970

            mov RDI,RBX
            call .L_415270

            lea RSI,QWORD PTR [RBX+496]
            mov RDI,RBP
            call .L_4105f0

            test R12B,R12B
            je .L_415382

            lea RDI,QWORD PTR [RBP+1080]
            call .L_409790

            lea RDI,QWORD PTR [RBP+1208]
            call .L_409790
.L_415382:

            mov DWORD PTR [RBX+12],0
            xor EAX,EAX
            pop RBX
.L_41538c:

            pop RBP
            pop R12
            ret 
.L_415390:

            push RBX
            xor ESI,ESI
            mov RBX,RDI
            call .L_415330

            test EAX,EAX
            je .L_4153a8

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4153a8:

            lea RDI,QWORD PTR [RBX+248]
            pop RBX
            jmp .L_4109a0
.L_4153b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4153c0:

            cmp WORD PTR [RDI+364],-1
            je .L_4153d5

            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-2]
            cmp EDX,1
            jbe .L_4153e0
.L_4153d5:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4153e0:

            push RBX
.L_4153e1:

            test BYTE PTR [RDI+56],2
            mov RBX,RDI
            je .L_4153fd

            cmp EAX,3
            je .L_4153fd

            call .L_430af0

            cmp BYTE PTR [RAX+7245],0
            jne .L_415430
.L_4153fd:

            mov EAX,4294967295
            mov RDI,RBX
            mov WORD PTR [RBX+364],AX
            call .L_430af0

            movzx ECX,BYTE PTR [RBX+363]
            mov ESI,1
            lea RDI,QWORD PTR [RAX+11296]
            pop RBX
.L_415425:

            shl ESI,CL
            jmp .L_43b070
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_415430:

            pop RBX
            ret 
.L_415432:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415440:

            lea RAX,QWORD PTR [RDI+432]
            ret 
.L_415448:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415450:

            push R12
            push RBP
            push RBX
.L_415454:

            mov RBX,RDI
            lea R12,QWORD PTR [RBX+432]
            call .L_430af0

            mov RSI,R12
            mov RBP,RAX
            mov RDI,RAX
            call .L_4105f0

            lea RSI,QWORD PTR [RBP+1656]
            mov RDI,R12
            call .L_40f0b0

            mov RSI,R12
            mov RDI,RBP
            call .L_410590

            mov RDI,RBX
            call .L_430b10

            mov ESI,8
            mov RDI,RAX
            call .L_402d30

            pop RBX
.L_4154a1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_4154a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4154b0:

            lea RAX,QWORD PTR [RDI+496]
            ret 
.L_4154b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4154c0:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,24
            call .L_430af0

            mov RBX,RAX
            mov RAX,QWORD PTR [R15+464]
            cmp QWORD PTR [RBP],RAX
            jne .L_415500
.L_4154e9:

            add RSP,24
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415500:

            lea R12,QWORD PTR [R15+464]
            mov RDI,RBX
            lea R14,QWORD PTR [R15+528]
            lea R13,QWORD PTR [R15+552]
            mov RSI,R12
            call .L_4105f0

            lea RAX,QWORD PTR [R15+496]
            mov RDI,RBX
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_4105f0

            mov RSI,R14
            mov RDI,RBX
            call .L_410330

            mov RSI,R13
            mov RDI,RBX
            call .L_410330

            cmp WORD PTR [R15+414],65279
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [R15+464],RAX
            mov QWORD PTR [R15+496],RAX
            je .L_41559d

            lea RBP,QWORD PTR [R15+400]
            mov RDI,RBX
            mov RSI,RBP
            call .L_4105f0

            mov RAX,QWORD PTR [R15+464]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [R15+400],RAX
            call .L_410590

            mov RAX,QWORD PTR [R15+464]
.L_41559d:

            mov RSI,R12
            mov RDI,RBX
            mov BYTE PTR [R15+531],64
            mov QWORD PTR [R15+532],RAX
            mov BYTE PTR [R15+555],64
            mov QWORD PTR [R15+556],RAX
            call .L_410590

            mov RSI,R14
            mov RDI,RBX
            call .L_4102d0

            mov RSI,R13
            mov RDI,RBX
            call .L_4102d0

            cmp DWORD PTR [R15+12],1
            jg .L_415600
.L_4155e3:

            mov RDI,R15
            call .L_430b10

            mov ESI,16
            mov RDI,RAX
            call .L_402d30

            jmp .L_4154e9
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415600:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_410590

            cmp DWORD PTR [R15+12],4
            jne .L_4155e3

            lea RBP,QWORD PTR [R15+368]
            mov RDI,RBX
            mov RSI,RBP
            call .L_4105f0

            mov RAX,QWORD PTR [R15+464]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [R15+368],RAX
            call .L_410590

            jmp .L_4155e3
.L_415641:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415650:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+44]
            xor R13D,R13D
            sub RSP,56
.L_41566d:

            mov WORD PTR [RDI-44],SI
            mov BYTE PTR [RDI-34],0
            mov DWORD PTR [RDI-32],0
            lea R15,QWORD PTR [RBX+496]
            lea RBP,QWORD PTR [RBX+432]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_413060

            lea RAX,QWORD PTR [RIP+.L_41a280]
            xor EDI,EDI
            mov BYTE PTR [RBX+56],12
            mov WORD PTR [RBX+148],DI
            lea RDI,QWORD PTR [RBX+152]
            mov DWORD PTR [RBX+60],0
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+64],0
            mov DWORD PTR [RBX+80],0
            mov DWORD PTR [RBX+104],0
            lea R14,QWORD PTR [RSP+32]
            mov QWORD PTR [RBX+88],RAX
            lea RAX,QWORD PTR [RIP+.L_417600]
            mov DWORD PTR [RBX+128],0
            mov DWORD PTR [RBX+144],0
            mov BYTE PTR [RBX+150],0
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RBX+96]
            mov QWORD PTR [RBX+112],RAX
            lea RAX,QWORD PTR [RIP+.L_41a300]
            mov QWORD PTR [RBX+120],RAX
            lea RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+136],RAX
            call .L_404440

            xor R8D,R8D
            lea RDI,QWORD PTR [RBX+232]
            mov DWORD PTR [RBX+180],0
            mov WORD PTR [RBX+188],R8W
            mov DWORD PTR [RBX+184],0
            mov BYTE PTR [RBX+190],0
            mov BYTE PTR [RBX+199],0
            mov BYTE PTR [RBX+200],0
            mov BYTE PTR [RBX+201],0
            call .L_413060

            lea RDI,QWORD PTR [R12+12720]
            call .L_430ad0

            lea RDI,QWORD PTR [RBX+248]
            lea RSI,QWORD PTR [RAX+104]
            call .L_4108b0

            lea RDI,QWORD PTR [RBX+328]
            lea RDX,QWORD PTR [RIP+.L_41a2d0]
            mov RCX,RBX
            mov RSI,R12
            mov DWORD PTR [RBX+320],240
            call .L_404b20

            lea RAX,QWORD PTR [RBX+576]
            lea RSI,QWORD PTR [RIP+.L_416cb0]
            mov RDX,RBX
            mov QWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+352],0
            mov RDI,RAX
            mov BYTE PTR [RBX+360],0
            mov BYTE PTR [RBX+361],0
            mov DWORD PTR [RBX+362],4294901771
            mov QWORD PTR [RSP+8],RAX
            call .L_402bf0

            pxor XMM0,XMM0
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RBX+8],R9W
            mov QWORD PTR [RBX],0
            mov WORD PTR [RBX+197],R10W
            mov QWORD PTR [RBX+189],0
            mov R11D,4294934782
            movups XMMWORD PTR [RBX+432],XMM0
            mov QWORD PTR [RBX+48],0
            mov QWORD PTR [RBX+160],0
            mov RDI,RBX
            movups XMMWORD PTR [RBX+16],XMM0
            movups XMMWORD PTR [RBX+32],XMM0
            movups XMMWORD PTR [RBX+448],XMM0
            movups XMMWORD PTR [RBX+464],XMM0
            movups XMMWORD PTR [RBX+480],XMM0
            movups XMMWORD PTR [RBX+496],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            mov BYTE PTR [RBX+168],0
            movups XMMWORD PTR [R15+16],XMM0
            mov WORD PTR [RBX+432],R11W
            mov QWORD PTR [RBX+544],0
            movups XMMWORD PTR [RBX+528],XMM0
            movups XMMWORD PTR [RBX+552],XMM0
            movups XMMWORD PTR [RBX+368],XMM0
            movups XMMWORD PTR [RBX+384],XMM0
            movups XMMWORD PTR [RBX+204],XMM0
            movups XMMWORD PTR [RBX+220],XMM0
            mov QWORD PTR [RBX+568],0
            mov QWORD PTR [RBX+236],0
            call .L_430af0

            lea RSI,QWORD PTR [RAX+1656]
            mov RDI,RBP
            call .L_40f0b0

            or BYTE PTR [RBX+449],3
            mov RDI,RBX
            mov BYTE PTR [RBX+448],64
            call .L_430af0

            mov RSI,RBP
            mov RDI,RAX
            mov EBP,4294967039
            call .L_410590

            movzx EAX,BYTE PTR [RBX+385]
            mov BYTE PTR [RBX+384],128
            mov RDI,RBX
            movdqa XMM0,XMMWORD PTR [RSP+16]
            mov BYTE PTR [RSP+32],253
            movups XMMWORD PTR [RBX+416],XMM0
            and EAX,4294967168
            mov BYTE PTR [RBX+416],128
            mov BYTE PTR [RBX+417],31
            movups XMMWORD PTR [RBX+400],XMM0
            or EAX,31
            mov WORD PTR [RBX+414],BP
            mov BYTE PTR [RBX+385],AL
            lea RBP,QWORD PTR [RBX+480]
            call .L_430af0

            mov EDX,DWORD PTR [RAX+1686]
            movzx EAX,BYTE PTR [RAX+1690]
            mov DWORD PTR [RSP+33],EDX
            mov BYTE PTR [R14+5],AL
            mov WORD PTR [RSP+38],R13W
            lea R13,QWORD PTR [RBX+472]
            nop
            nop
            nop
            nop
            nop
            nop
.L_415990:

            add R13,1
            call .L_401460

            cmp R13,RBP
            mov BYTE PTR [R13-1],AL
            jne .L_415990

            movzx EAX,BYTE PTR [RBX+481]
            mov RDI,RBX
            mov BYTE PTR [RBX+480],64
            mov DWORD PTR [RBX+504],4278190080
            mov BYTE PTR [RBX+512],64
            mov BYTE PTR [RBX+513],159
            and EAX,4294967168
            or EAX,31
            mov BYTE PTR [RBX+481],AL
            mov EAX,254
            mov WORD PTR [RBX+508],AX
            call .L_430af0

            mov RDI,RAX
            call .L_430ad0

            mov EDX,13055
            mov ECX,13311
            mov QWORD PTR [RAX+176],R15
            mov RSI,R14
            mov WORD PTR [RBX+528],DX
            mov WORD PTR [RBX+552],CX
            mov RDI,RBX
            mov DWORD PTR [RBX+540],16777216
            mov DWORD PTR [RBX+564],16777216
            call .L_4154c0

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R12+32]
            call .L_402c40

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_415a5c

            add RSP,56
.L_415a51:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_415a5c:

            call __stack_chk_fail@PLT
.L_415a61:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415a70:

            lea RAX,QWORD PTR [RDI+528]
            ret 
.L_415a78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415a80:

            lea RAX,QWORD PTR [RDI+552]
            ret 
.L_415a88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415a90:

            sub RSP,8
            call .L_430af0

            movzx EAX,WORD PTR [RAX+1664]
            add RSP,8
            ret 
.L_415aa5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415ab0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R13,QWORD PTR [R12+496]
            mov EBX,ESI
            sub RSP,8
.L_415ac7:

            call .L_430af0

            mov RSI,R13
            mov RDI,RAX
            mov RBP,RAX
            call .L_4105f0

            cmp BX,-2
            je .L_415afa

            mov EAX,EBX
            mov RSI,R13
            mov RDI,RBP
            rol AX,8
            mov WORD PTR [R12+510],AX
            call .L_410590
.L_415afa:

            lea RDI,QWORD PTR [RBP+1560]
            movzx ESI,BX
            call .L_4057e0

            mov RDI,RBP
            call .L_430ad0

            mov WORD PTR [RAX+122],BX
            add RSP,8
.L_415b19:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_415b22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415b30:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,64
.L_415b3f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            mov RBX,RAX
            lea R14,QWORD PTR [RSP+6]
            lea R13,QWORD PTR [RSP+16]
            call .L_409630

            lea RDI,QWORD PTR [RBX+1208]
            call .L_409630

            mov EDX,36
            mov RDI,RBX
            mov WORD PTR [RSP+6],DX
            call .L_430ac0

            xor EDX,EDX
            mov R8,R14
            mov RCX,R13
            mov ESI,3
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            jne .L_415cc0

            cmp WORD PTR [RSP+6],35
            jbe .L_415ce0

            mov ESI,DWORD PTR [RSP+20]
            lea RDI,QWORD PTR [RBX+1368]
            call .L_412d70

            mov EAX,DWORD PTR [RSP+24]
            cmp BYTE PTR [RSP+16],1
            mov DWORD PTR [RBX+1456],EAX
            mov EAX,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+1452],EAX
            jbe .L_415cc0

            movzx EAX,BYTE PTR [RSP+17]
            movzx ESI,WORD PTR [RSP+18]
            mov RDI,R12
            mov BYTE PTR [R12+56],AL
            call .L_415ab0

            lea RSI,QWORD PTR [R13+20]
            lea RDI,QWORD PTR [RBX+1560]
            call .L_405760

            mov RDI,R12
            call .L_415450

            mov RAX,QWORD PTR [RSP+44]
            mov QWORD PTR [R12+472],RAX
            movzx EAX,WORD PTR [RSP+18]
            cmp AX,-2
            je .L_415cc0

            test AX,511
            je .L_415cf0

            mov EAX,8
            mov RDI,RBX
            mov WORD PTR [RSP+6],AX
            call .L_430ac0

            lea RCX,QWORD PTR [RSP+8]
            xor EDX,EDX
            mov R8,R14
            mov ESI,4
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            jne .L_415cc0

            cmp WORD PTR [RSP+6],7
            jbe .L_415d28

            pxor XMM0,XMM0
            mov RAX,QWORD PTR [RSP+8]
            mov QWORD PTR [R12+48],0
            movups XMMWORD PTR [R12+16],XMM0
            mov QWORD PTR [R12+16],RAX
            movzx EAX,WORD PTR [RSP+18]
            movups XMMWORD PTR [R12+32],XMM0
            sar EAX,10
            shl EAX,10
            mov WORD PTR [R12+40],AX
            movzx EAX,BYTE PTR [R12+42]
            and EAX,4294967168
            or EAX,121
            mov BYTE PTR [R12+42],AL
            nop
            nop
            nop
            nop
            nop
            nop
.L_415cc0:

            mov RDX,QWORD PTR [RSP+56]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_415d2f

            add RSP,64
.L_415cd6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_415ce0:

            mov EBP,23
            jmp .L_415cc0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_415cf0:

            mov RDI,R12
            lea R13,QWORD PTR [RBX+2568]
            call .L_430af0

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,R13
            sar ESI,10
            call .L_41db30

            mov EAX,DWORD PTR [RSP+32]
            mov RDI,R13
            mov DWORD PTR [RBX+7240],EAX
            call .L_41de70

            jmp .L_415cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415d28:

            mov EBP,6
            jmp .L_415cc0
.L_415d2f:

            call __stack_chk_fail@PLT
.L_415d34:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415d40:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_415d47:

            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RBX+12],2
            mov RBP,RAX
            jne .L_415de0
.L_415d5c:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_415ab0

            mov DWORD PTR [RBX+12],2
            mov DWORD PTR [RBX+60],0
            mov DWORD PTR [RBX+64],0
            mov BYTE PTR [RBX+188],0
            and BYTE PTR [RBP+1564],127
            movzx EAX,BYTE PTR [RBX+56]
            test AL,8
            jne .L_415e18
.L_415d97:

            test AL,2
            je .L_415dad

            mov ESI,DWORD PTR [RBX+180]
            lea RDI,QWORD PTR [RBP+2568]
            call .L_422be0
.L_415dad:

            lea RDI,QWORD PTR [RBP+7248]
            call .L_4261c0

            mov RDI,RBP
            call .L_430ad0

            mov RDI,RBP
            mov BYTE PTR [RAX],0
            call .L_430ad0

            mov RDI,RBX
            mov BYTE PTR [RAX+120],0
            call .L_4153c0

            pop RBX
.L_415dd9:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_415de0:

            mov RDI,RBX
            call .L_430b10

            mov ESI,4
            mov RDI,RAX
            call .L_402d30

            cmp DWORD PTR [RBX+12],4
            jne .L_415d5c

            lea RSI,QWORD PTR [RBX+368]
            mov RDI,RBP
            call .L_4105f0

            jmp .L_415d5c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_415e18:

            imul R12D,DWORD PTR [RBX+320],1000
            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov ESI,EAX
            sub R12D,4000
            mov EDX,R12D
            call .L_430d50

            movzx EAX,BYTE PTR [RBX+56]
            jmp .L_415d97
.L_415e46:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415e50:

            push RBX
.L_415e51:

            mov RBX,RDI
            call .L_430af0

            mov ECX,DWORD PTR [RBX+12]
            mov EDX,13
            test ECX,ECX
            je .L_415e91

            mov EDX,DWORD PTR [RBX+64]
            test EDX,EDX
            je .L_415e98
.L_415e6c:

            mov RDI,RBX
            call .L_415270

            and BYTE PTR [RBX+42],248
            mov ESI,65534
            mov RDI,RBX
            call .L_415ab0

            xor ESI,ESI
            mov RDI,RBX
            call .L_415170

            xor EDX,EDX
.L_415e91:

            mov EAX,EDX
            pop RBX
.L_415e94:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_415e98:

            lea RDI,QWORD PTR [RAX+1208]
            call .L_409790

            jmp .L_415e6c
.L_415ea6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415eb0:

            movzx EAX,BYTE PTR [RDI+9]
            ret 
.L_415eb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415ec0:

            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            mov R12D,ECX
            sub RSP,8
.L_415ed5:

            mov EAX,DWORD PTR [RDI+2]
            bswap EAX
            cmp ESI,EAX
            je .L_415f39

            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41b1a0

            mov EAX,DWORD PTR [RBX+2]
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RBX+144],EAX
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+3312]
            mov RDI,RBX
            mov BYTE PTR [RBX+148],AL
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+7228]
            mov RDI,RBX
            mov BYTE PTR [RBX+149],AL
            call .L_430b10

            mov ESI,128
            mov RDI,RAX
            call .L_402d30
.L_415f39:

            bswap EBP
            mov BYTE PTR [RBX+6],R13B
            mov BYTE PTR [RBX+9],R12B
            mov DWORD PTR [RBX+2],EBP
            add RSP,8
.L_415f4a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_415f51:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415f60:

            lea RAX,QWORD PTR [RDI+496]
            ret 
.L_415f68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415f70:

            lea RAX,QWORD PTR [RDI+464]
            ret 
.L_415f78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415f80:

            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,8
.L_415f8c:

            call .L_430af0

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_415fcb

            mov RAX,QWORD PTR [RBP+496]
            mov DWORD PTR [RBX+8],4278190080
            xor EDX,EDX
            mov QWORD PTR [RBX],RAX
            mov EAX,254
            mov WORD PTR [RBX+12],AX
            movzx EAX,BYTE PTR [RBP+9]
            shl EAX,10
            rol AX,8
            mov WORD PTR [RBX+14],AX
.L_415fcb:

            add RSP,8
.L_415fcf:

            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_415fd4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_415fe0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_430af0

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_41601b

            mov RAX,QWORD PTR [RBX+496]
            xor EDX,EDX
            mov QWORD PTR [RBP],RAX
            movabs RAX,70932789330968576
            mov QWORD PTR [RBP+8],RAX
.L_41601b:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
.L_416024:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416030:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_416037:

            mov RBP,RDX
            mov EBX,ESI
            call .L_430af0

            cmp WORD PTR [RAX+1664],-2
            mov EDX,16
            je .L_41607e

            mov RAX,QWORD PTR [R12+496]
            movzx EBX,BL
            mov DWORD PTR [RBP+8],4278190080
            sub BX,1008
            xor EDX,EDX
            rol BX,8
            mov QWORD PTR [RBP],RAX
            mov EAX,254
            mov WORD PTR [RBP+14],BX
            mov WORD PTR [RBP+12],AX
.L_41607e:

            pop RBX
.L_41607f:

            mov EAX,EDX
            pop RBP
            pop R12
            ret 
.L_416085:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416090:

            cmp DWORD PTR [RDI+12],4
            je .L_4160a0

            mov EAX,13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4160a0:

            push RBP
            lea RBP,QWORD PTR [RDI+368]
            push RBX
            mov RBX,RDI
            sub RSP,8
            mov RSI,RBP
            call .L_415fe0

            test EAX,EAX
            je .L_4160c8

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4160c8:

            mov RDI,RBX
            call .L_430af0

            add RSP,8
            mov RSI,RBP
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_410590
.L_4160e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4160f0:

            push RBX
            mov RBX,RDI
            call .L_430af0

            movzx EDX,BYTE PTR [RAX+7785]
            mov BYTE PTR [RBX+7],DL
            movzx EAX,BYTE PTR [RAX+7784]
            mov BYTE PTR [RBX+8],AL
            mov RAX,RBX
            pop RBX
            ret 
.L_416112:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416120:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_41612c:

            call .L_430af0

            movzx EDX,BYTE PTR [RAX+7785]
            cmp DWORD PTR [RBX+12],1
            mov BYTE PTR [RBX+7],DL
            movzx EAX,BYTE PTR [RAX+7784]
            mov BYTE PTR [RBX+8],AL
            jbe .L_416180

            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBP],EAX
            movzx EAX,BYTE PTR [RBX+6]
            mov BYTE PTR [RBP+4],AL
            movzx EAX,BYTE PTR [RBX+7]
            mov BYTE PTR [RBP+5],AL
            movzx EAX,BYTE PTR [RBX+8]
            mov BYTE PTR [RBP+6],AL
            movzx EAX,BYTE PTR [RBX+9]
            mov BYTE PTR [RBP+7],AL
            add RSP,8
.L_416173:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416180:

            add RSP,8
            mov EAX,16
            pop RBX
            pop RBP
            ret 
.L_41618c:

            nop
            nop
            nop
            nop
.L_416190:

            mov RAX,QWORD PTR [RSI]
            mov BYTE PTR [R8+11],DL
            mov BYTE PTR [R8+12],CL
            mov QWORD PTR [R8],RAX
            mov EAX,EDX
            shr EAX,24
            mov BYTE PTR [R8+8],AL
            mov EAX,EDX
            shr EAX,16
            mov BYTE PTR [R8+9],AL
            movzx EAX,DH
            mov BYTE PTR [R8+10],AL
            ret 
.L_4161b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4161c0:

            push RBX
            add RDI,248
            xor ESI,ESI
            call .L_4108c0

            test RAX,RAX
            mov RBX,RAX
            je .L_4161ee

            movzx EAX,BYTE PTR [RAX+78]
            xor ESI,ESI
            mov RDI,RBX
            and EAX,67
            or EAX,24
            mov BYTE PTR [RBX+78],AL
            call .L_403590
.L_4161ee:

            mov RAX,RBX
            pop RBX
            ret 
.L_4161f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416200:

            sub RSP,40
.L_416204:

            mov RDI,RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,1280
            mov WORD PTR [RSP+12],AX
            lea EAX,DWORD PTR [RDX-16]
            cmp EAX,1
            jbe .L_416260

            mov BYTE PTR [RSP+23],DL
            mov BYTE PTR [RSP+13],21
            mov EDX,12
.L_416237:

            lea RSI,QWORD PTR [RSP+12]
            call .L_403d30

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416270

            add RSP,40
.L_416255:

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416260:

            mov BYTE PTR [RSP+13],DL
            mov BYTE PTR [RSP+12],255
            mov EDX,2
            jmp .L_416237
.L_416270:

            call __stack_chk_fail@PLT
.L_416275:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416280:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_416288:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,512
            mov WORD PTR [RSP+4],AX
            call .L_430af0

            movzx EAX,WORD PTR [RAX+1664]
            lea RSI,QWORD PTR [RSP+4]
            mov EDX,4
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+6],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4162df

            add RSP,16
.L_4162dd:

            pop RBX
            ret 
.L_4162df:

            call __stack_chk_fail@PLT
.L_4162e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4162f0:

            sub RSP,24
.L_4162f4:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,273
            mov WORD PTR [RSP+5],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416339

            add RSP,24
.L_416338:

            ret 
.L_416339:

            call __stack_chk_fail@PLT
.L_41633e:

            nop
            nop
.L_416340:

            sub RSP,24
.L_416344:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,257
            mov WORD PTR [RSP+5],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416389

            add RSP,24
.L_416388:

            ret 
.L_416389:

            call __stack_chk_fail@PLT
.L_41638e:

            nop
            nop
.L_416390:

            sub RSP,24
.L_416394:

            mov RDI,RSI
            bswap EDX
            lea RSI,QWORD PTR [RSP+2]
            mov DWORD PTR [RSP+4],EDX
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1026
            mov WORD PTR [RSP+2],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4163db

            add RSP,24
.L_4163da:

            ret 
.L_4163db:

            call __stack_chk_fail@PLT
.L_4163e0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_4163f8:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],3
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            test EAX,EAX
            jne .L_41642d

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d30
.L_41642d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416446

            add RSP,16
.L_416441:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_416446:

            call __stack_chk_fail@PLT
.L_41644b:

            nop
            nop
            nop
            nop
            nop
.L_416450:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_416468:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],4
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            test EAX,EAX
            jne .L_41649d

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d30
.L_41649d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4164b6

            add RSP,16
.L_4164b1:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4164b6:

            call __stack_chk_fail@PLT
.L_4164bb:

            nop
            nop
            nop
            nop
            nop
.L_4164c0:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_4164c8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1029
            mov WORD PTR [RSP+2],AX
            call .L_430af0

            mov EAX,DWORD PTR [RAX+1452]
            lea RSI,QWORD PTR [RSP+2]
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+4],EAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41651b

            add RSP,16
.L_416519:

            pop RBX
            ret 
.L_41651b:

            call __stack_chk_fail@PLT
.L_416520:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_416528:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,1032
            mov WORD PTR [RSP+2],AX
            call .L_430af0

            mov EAX,DWORD PTR [RAX+1456]
            lea RSI,QWORD PTR [RSP+2]
            mov EDX,6
            mov RDI,RBX
            bswap EAX
            mov DWORD PTR [RSP+4],EAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41657b

            add RSP,16
.L_416579:

            pop RBX
            ret 
.L_41657b:

            call __stack_chk_fail@PLT
.L_416580:

            sub RSP,24
.L_416584:

            rol DX,8
            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+4]
            mov WORD PTR [RSP+6],DX
            mov EDX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,522
            mov WORD PTR [RSP+4],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4165ce

            add RSP,24
.L_4165cd:

            ret 
.L_4165ce:

            call __stack_chk_fail@PLT
.L_4165d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4165e0:

            push RBP
            push RBX
            mov EAX,2059
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
            mov WORD PTR [RDI],AX
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+7785]
            mov RDI,RBX
            mov BYTE PTR [RBX+7],AL
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+7784]
            mov RSI,RBX
            mov RDI,RBP
            mov EDX,10
            mov BYTE PTR [RBX+8],AL
            add RSP,8
            pop RBX
            pop RBP
            jmp .L_403d30
.L_41662b:

            nop
            nop
            nop
            nop
            nop
.L_416630:

            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,24
.L_41663b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],255
            call .L_430af0

            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RBP+2]
            lea RDI,QWORD PTR [RAX+7520]
            movzx ESI,BL
            call .L_425b20

            movzx EAX,BYTE PTR [RSP+7]
            mov BYTE PTR [RBP+1],AL
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41668c

            add RSP,24
.L_416689:

            pop RBX
            pop RBP
            ret 
.L_41668c:

            call __stack_chk_fail@PLT
.L_416691:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4166a0:

            push RBP
            push RBX
            mov RBP,RSI
            movzx EDX,DL
            sub RSP,280
.L_4166af:

            mov RBX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,4294967052
            mov WORD PTR [RSP],AX
            call .L_416630

            movzx EAX,BYTE PTR [RSP+1]
            mov RSI,RBX
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416706

            add RSP,280
.L_416703:

            pop RBX
            pop RBP
            ret 
.L_416706:

            call __stack_chk_fail@PLT
.L_41670b:

            nop
            nop
            nop
            nop
            nop
.L_416710:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R12,RDX
            mov RDI,RBP
            mov EDX,2
            mov EBX,ECX
            sub RSP,16
.L_416728:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],13
            mov BYTE PTR [RSP+7],CL
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            test EAX,EAX
            jne .L_41675d

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            call .L_403d30
.L_41675d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416776

            add RSP,16
.L_416771:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_416776:

            call __stack_chk_fail@PLT
.L_41677b:

            nop
            nop
            nop
            nop
            nop
.L_416780:

            sub RSP,24
.L_416784:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,270
            mov WORD PTR [RSP+5],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4167c9

            add RSP,24
.L_4167c8:

            ret 
.L_4167c9:

            call __stack_chk_fail@PLT
.L_4167ce:

            nop
            nop
.L_4167d0:

            sub RSP,24
.L_4167d4:

            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+5]
            mov BYTE PTR [RSP+7],DL
            mov EDX,3
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,272
            mov WORD PTR [RSP+5],AX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416819

            add RSP,24
.L_416818:

            ret 
.L_416819:

            call __stack_chk_fail@PLT
.L_41681e:

            nop
            nop
.L_416820:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],33554962
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_416863

            add RSP,24
            ret 
.L_416863:

            call __stack_chk_fail@PLT
.L_416868:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416870:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_416878:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            xor R8D,R8D
            mov WORD PTR [RSP+14],R8W
            call .L_409510

            xor EDX,EDX
            test RAX,RAX
            je .L_4168e4

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2070
            xor ECX,ECX
            xor EDI,EDI
            mov DWORD PTR [RSP+16],0
            mov WORD PTR [RSP+14],DX
            mov WORD PTR [RSI+6],CX
            mov WORD PTR [RSP+22],DI
            mov EDX,10
            mov RAX,QWORD PTR [RAX]
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RAX
            call .L_403d30

            mov EDX,EAX
.L_4168e4:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_4168fc

            add RSP,32
.L_4168fa:

            pop RBX
            ret 
.L_4168fc:

            call __stack_chk_fail@PLT
.L_416901:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416910:

            push RBX
            mov RBX,RSI
            xor ESI,ESI
            sub RSP,32
.L_41691a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+14],SI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1208]
            call .L_409510

            mov R8,RAX
            xor EAX,EAX
            test R8,R8
            je .L_416972

            lea RDI,QWORD PTR [R8+6]
            mov RCX,R8
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
.L_416958:

            movzx ESI,BYTE PTR [RCX]
            shl RDX,8
            add RCX,1
            or RDX,RSI
            cmp RCX,RDI
            jne .L_416958

            xor EAX,EAX
            test RDX,RDX
            jne .L_416990
.L_416972:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4169cb

            add RSP,32
.L_416986:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416990:

            lea RSI,QWORD PTR [RSP+14]
            xor EDX,EDX
            mov EAX,2071
            xor ECX,ECX
            mov DWORD PTR [RSP+16],0
            mov WORD PTR [RSP+14],AX
            mov WORD PTR [RSI+6],DX
            mov WORD PTR [RSP+22],CX
            mov EDX,10
            mov RAX,QWORD PTR [R8]
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RAX
            call .L_403d30

            jmp .L_416972
.L_4169cb:

            call __stack_chk_fail@PLT
.L_4169d0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,40
.L_4169e1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            mov RDI,RBP
            mov R15,RAX
            call .L_430af0

            mov EDX,DWORD PTR [RBP+12]
            movzx EBX,WORD PTR [RAX+1664]
            mov BYTE PTR [RSP+19],0
            mov DWORD PTR [RSP+20],0
            test EDX,EDX
            je .L_416ab0

            movzx ESI,WORD PTR [RBP+414]
            lea RAX,QWORD PTR [RBP+400]
            lea R12,QWORD PTR [R15+7520]
            mov QWORD PTR [RSP+8],RAX
            rol SI,8
            cmp SI,-2
            je .L_416a59

            sub ESI,16
            mov EDX,EBX
            mov RDI,R12
            movzx ESI,SIL
            call .L_4253a0

            test AL,AL
            je .L_416ad0
.L_416a59:

            lea R14,QWORD PTR [RSP+19]
            lea R13,QWORD PTR [RSP+20]
            nop
            nop
            nop
            nop
            nop
.L_416a68:

            mov RCX,R14
            mov EDX,EBX
            mov RSI,R13
            mov RDI,R12
            call .L_424ec0

            test EAX,EAX
            jne .L_416ab0

            cmp WORD PTR [RBP+414],65279
            movzx ESI,BYTE PTR [RSP+19]
            jne .L_416a68

            mov RDX,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_416030

            test EAX,EAX
            jne .L_416ab0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R15
            call .L_410590

            jmp .L_416a68
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416ab0:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_416af0

            add RSP,40
.L_416ac4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_416ad0:

            lea RSI,QWORD PTR [RBP+400]
            mov RDI,R15
            call .L_4105f0

            mov EAX,4294967039
            mov WORD PTR [RBP+414],AX
            jmp .L_416a59
.L_416af0:

            call __stack_chk_fail@PLT
.L_416af5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416b00:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,24
.L_416b13:

            call .L_430af0

            mov EDX,DWORD PTR [RBX+12]
            test EDX,EDX
            je .L_416b89

            mov R13D,EBP
            mov R12,RAX
            and R13D,12288
            test BPL,3
            jne .L_416bc0
.L_416b36:

            test R13D,R13D
            je .L_416b50

            cmp DWORD PTR [RBX+12],2
            jne .L_416b50

            movzx EAX,BYTE PTR [RBX+56]
.L_416b45:

            test AL,10
            je .L_416c78

            nop
            nop
            nop
.L_416b50:

            test EBP,512
            je .L_416b81

            test BYTE PTR [RBX+56],2
            jne .L_416c48

            test BPL,4
            je .L_416c60
.L_416b6c:

            lea RDI,QWORD PTR [R12+7248]
            call .L_429fa0

            mov RDI,RBX
            call .L_4169d0
.L_416b81:

            and EBP,260
            jne .L_416ba0
.L_416b89:

            add RSP,24
.L_416b8d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416ba0:

            add RSP,24
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_414fc0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416bc0:

            lea RAX,QWORD PTR [RBX+464]
            mov RDI,R12
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_410860

            test AL,AL
            jne .L_416c24

            lea R15,QWORD PTR [RBX+472]
            lea R14,QWORD PTR [RBX+480]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416bf0:

            add R15,1
            call .L_401460

            cmp R14,R15
            mov BYTE PTR [R15-1],AL
            jne .L_416bf0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_410590

            mov RDI,RBX
            call .L_430b10

            mov ESI,16
            mov RDI,RAX
            call .L_402d30
.L_416c24:

            cmp DWORD PTR [RBX+12],2
            jne .L_416b50

            movzx EAX,BYTE PTR [RBX+56]
            test AL,2
            je .L_416c90

            test R13D,R13D
            jne .L_416b45

            jmp .L_416b50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416c48:

            lea RDI,QWORD PTR [R12+2568]
            call .L_41d680

            jmp .L_416b6c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_416c60:

            lea RDI,QWORD PTR [RBX+328]
            call .L_404bc0

            jmp .L_416b6c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416c78:

            lea RDI,QWORD PTR [RBX+328]
            call .L_404bc0

            jmp .L_416b50
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416c90:

            lea RDI,QWORD PTR [RBX+328]
            call .L_404bc0

            jmp .L_416b36
.L_416ca1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416cb0:

            push RBX
            mov EBX,ESI
            call .L_402840

            mov RDI,RAX
            call .L_402a10

            mov ESI,EBX
            mov RDI,RAX
            pop RBX
            jmp .L_416b00
.L_416ccb:

            nop
            nop
            nop
            nop
            nop
.L_416cd0:

            push R12
            lea R12,QWORD PTR [RDI+152]
            push RBP
            push RBX
            mov RDI,R12
            sub RSP,32
.L_416ce2:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_404570

            pxor XMM0,XMM0
            test RAX,RAX
            mov DWORD PTR [RSP+16],0
            movaps XMMWORD PTR [RSP],XMM0
            je .L_416d63

            mov RBX,RAX
            mov RBP,RSP
            jmp .L_416d28
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416d18:

            mov RDI,RBX
            call .L_4033c0

            test RAX,RAX
            mov RBX,RAX
            je .L_416d63
.L_416d28:

            movzx EAX,WORD PTR [RBX+58]
            mov RCX,RBP
            mov EDX,20
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_403860

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,9
            jne .L_416d18

            mov RDI,R12
            mov RSI,RBX
            call .L_404640

            mov RDI,RBX
            call .L_4033b0
.L_416d63:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_416d7c

            add RSP,32
.L_416d77:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_416d7c:

            call __stack_chk_fail@PLT
.L_416d81:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_416d90:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,568
.L_416da7:

            lea R13,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+8],RDX
            lea RBP,QWORD PTR [RSP+20]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
.L_416dc9:

            call .L_430af0

            mov RDI,R13
            mov R14,RAX
            call .L_431ad0
.L_416dd9:

            pxor XMM0,XMM0
            mov RCX,RBP
            mov EDX,12
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
.L_416df9:

            call .L_403860

            cmp BYTE PTR [RSP+20],0
            jne .L_416ff4

            mov EAX,DWORD PTR [R14+1456]
            mov RCX,RBP
            xor ESI,ESI
            mov RDI,RBX
            mov DWORD PTR [RSP+22],EAX
            mov EAX,DWORD PTR [R14+1384]
            mov EDX,EAX
            and EAX,127
            bswap EDX
            add EAX,1
            mov DWORD PTR [RSP+26],EDX
            mov EDX,12
            mov BYTE PTR [RSP+30],AL
            call .L_403ac0

            mov EAX,DWORD PTR [R14+1456]
            mov RDX,QWORD PTR [R14+1656]
            lea RSI,QWORD PTR [R14+1388]
            mov RDI,R13
            mov BYTE PTR [RSP+479],5
            mov QWORD PTR [RSP+467],RDX
            mov EDX,EAX
            mov BYTE PTR [RSP+477],AH
            shr EDX,24
            mov BYTE PTR [RSP+478],AL
            mov BYTE PTR [RSP+475],DL
            mov EDX,EAX
            shr EDX,16
            mov BYTE PTR [RSP+476],DL
            mov EDX,16
            call .L_4313e0

            cmp BYTE PTR [RSP+20],1
            movzx EDX,WORD PTR [RBX+58]
            lea R8,QWORD PTR [RSP+467]
            mov R9D,13
            mov ECX,4
            mov ESI,42
            mov RDI,R13
            sbb EAX,EAX
            and EAX,10
            add EAX,1
            sub EDX,EAX
            call .L_431400

            test EAX,EAX
            jne .L_417043

            lea RSI,QWORD PTR [R15+432]
            mov EDX,16
            mov RDI,R13
            call .L_4316d0

            mov RSI,QWORD PTR [RSP+8]
            mov EDX,16
            mov RDI,R13
            call .L_4316d0

            lea RSI,QWORD PTR [RBP+1]
            mov EDX,10
            mov RDI,R13
            call .L_4316d0

            cmp BYTE PTR [RSP+20],1
            mov RDI,RBX
            sbb ESI,ESI
            and ESI,10
            add ESI,1
            call .L_403550

            lea R12,QWORD PTR [RSP+480]
            jmp .L_416f74
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_416f30:

            mov RCX,R12
            mov EDX,64
            mov RDI,RBX
            call .L_403860

            movzx EBP,AX
            mov R8D,1
            mov RDX,R12
            mov ECX,EBP
            mov RSI,R12
            mov RDI,R13
            call .L_4317e0

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R12
            mov EDX,EBP
            mov RDI,RBX
            call .L_403ac0

            mov ESI,EBP
            mov RDI,RBX
            call .L_4034e0
.L_416f74:

            movzx ESI,WORD PTR [RBX+60]
            cmp WORD PTR [RBX+58],SI
            ja .L_416f30

            lea RBP,QWORD PTR [RSP+463]
            lea RDX,QWORD PTR [RSP+19]
            mov RDI,R13
            mov BYTE PTR [RSP+19],4
            mov RSI,RBP
            call .L_431a20

            movzx EDX,BYTE PTR [RSP+19]
            mov RSI,RBP
            mov RDI,RBX
            call .L_403d30
.L_416fab:

            test EAX,EAX
            mov EBP,EAX
            je .L_416fe8
.L_416fb1:

            mov RDI,R13
.L_416fb4:

            call .L_431b00
.L_416fb9:

            mov RCX,QWORD PTR [RSP+552]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_417062

            add RSP,568
.L_416fd9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_416fe8:

            lea RDI,QWORD PTR [R14+1368]
.L_416fef:

            call .L_412c90
.L_416ff4:

            mov RAX,QWORD PTR [RSP+8]
            lea RDX,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R15+248]
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,19788
            mov WORD PTR [RSP+66],AX
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+69],255
            movdqu XMM0,XMMWORD PTR [R15+432]
            mov BYTE PTR [RSP+68],AL
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_410a20
.L_41703c:

            mov EBP,EAX
            jmp .L_416fb1
.L_417043:

            lea RCX,QWORD PTR [RIP+.L_458e20]
            lea RSI,QWORD PTR [RIP+.L_458cb4]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,2120
            call __assert_fail@PLT
.L_417062:

            call __stack_chk_fail@PLT
.L_417067:

            mov RBX,RAX
            mov RDI,R13
            call .L_431b00

            mov RDI,RBX
.L_417075:

            call _Unwind_Resume@PLT
.L_41707a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_417080:

            push R14
            push R13
            mov R14D,ESI
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R13D,EDX
            xor EBX,EBX
            sub RSP,80
.L_417097:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_430af0

            xor R11D,R11D
            mov R12,RAX
            mov RDI,RBP
            xor EAX,EAX
            mov WORD PTR [RSP+29],BX
            mov WORD PTR [RSP+33],R11W
            mov WORD PTR [RSP+38],AX
            call .L_4161c0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41710e

            movzx EAX,BYTE PTR [RBX+78]
            mov BYTE PTR [RBX+76],R14B
            mov EDX,15
            mov RSI,RBX
            mov RDI,RBP
            and EAX,67
            or EAX,4294967172
            mov BYTE PTR [RBX+78],AL
            call .L_416200

            test EAX,EAX
            je .L_417130
.L_4170fe:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41710e:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417248

            add RSP,80
.L_417126:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_417130:

            movzx EAX,BYTE PTR [R12+1668]
            lea RSI,QWORD PTR [RSP+33]
            mov R10D,788
            mov EDX,5
            mov RDI,RBX
            mov WORD PTR [RSP+33],R10W
            mov BYTE PTR [RSP+35],0
            rol AX,8
            mov WORD PTR [RSP+36],AX
            call .L_403d30

            test EAX,EAX
            jne .L_4170fe

            test R13B,R13B
            je .L_417230

            lea RSI,QWORD PTR [RSP+38]
            xor R8D,R8D
            mov EDI,2070
            mov WORD PTR [RSP+38],DI
            mov DWORD PTR [RSP+40],0
            mov R9D,256
            mov WORD PTR [RSI+6],R8W
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+46],R9W
            call .L_403d30

            test EAX,EAX
            jne .L_4170fe
.L_4171b2:

            movzx EAX,WORD PTR [R12+1666]
            mov ESI,533
            mov EDX,4
            mov WORD PTR [RSP+29],SI
            lea RSI,QWORD PTR [RSP+29]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+31],AX
            call .L_403d30

            test EAX,EAX
            jne .L_4170fe

            lea RDX,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP+50],0
            mov EAX,767
            mov ECX,256
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+48],AX
            mov WORD PTR [RSP+62],CX
            call .L_416d90

            test EAX,EAX
            je .L_41710e

            jmp .L_4170fe
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417230:

            mov RSI,RBX
            mov RDI,RBP
            call .L_416870

            test EAX,EAX
            jne .L_4170fe

            jmp .L_4171b2
.L_417248:

            call __stack_chk_fail@PLT
.L_41724d:

            nop
            nop
            nop
.L_417250:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_417259:

            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            mov ESI,53
            call .L_4095c0

            test RAX,RAX
            je .L_4172d3

            movzx EDI,BYTE PTR [RAX+3]
            movzx R8D,BYTE PTR [RBP+362]
            add RAX,2
            mov R11D,128
            mov R9D,11
            shl EDI,3
            mov EBX,R8D
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4172a0:

            movzx ESI,BL
            cmp ESI,EDI
            jge .L_4172c4

            mov EDX,EBX
            mov ECX,EBX
            shr DL,3
            and ECX,7
            movzx EDX,DL
            movzx R10D,BYTE PTR [RAX+RDX*1+2]
            mov EDX,R11D
            sar EDX,CL
            test R10D,EDX
            jne .L_4172e0
.L_4172c4:

            add EBX,1
            cmp BL,27
            cmovae EBX,R9D
            cmp BL,R8B
            jne .L_4172a0
.L_4172d3:

            add RSP,8
.L_4172d7:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4172e0:

            mov RDI,RBP
            add EBX,1
            mov EDX,1
            call .L_417080

            cmp BL,26
            mov EAX,11
            cmova EBX,EAX
            mov BYTE PTR [RBP+362],BL
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_417308:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417310:

            push R14
            push R13
            xor R10D,R10D
            push R12
            push RBP
            xor R11D,R11D
            push RBX
            mov R13D,EDX
            sub RSP,64
.L_417325:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+360],0
            mov DWORD PTR [RSP+12],ESI
            mov EAX,5
            mov RDX,QWORD PTR [RSP+112]
            mov WORD PTR [RSP+26],R10W
            mov WORD PTR [RSP+28],R11W
            jne .L_4173d3

            mov BYTE PTR [RDI+361],R8B
            mov QWORD PTR [RDI+344],R9
            mov RBX,RDI
            mov QWORD PTR [RDI+352],RDX
            mov R12D,ECX
            call .L_430af0

            mov ESI,DWORD PTR [RSP+12]
            lea RDI,QWORD PTR [RAX+2256]
            call .L_43ece0

            mov RDI,RBX
            call .L_4161c0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_4173d3

            movzx EAX,BYTE PTR [RBP+78]
            mov WORD PTR [RBP+76],R13W
            mov EDX,16
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,8
            mov BYTE PTR [RBP+78],AL
            call .L_416200

            test EAX,EAX
            je .L_4173f8
.L_4173c3:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_4173d3:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4174be

            add RSP,64
.L_4173eb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4173f8:

            lea R13,QWORD PTR [RSP+26]
            mov EDX,2
            mov RDI,RBP
            mov BYTE PTR [RSP+26],26
            mov RSI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_4173c3

            cmp R12B,1
            mov ESI,640
            mov EDX,4
            sbb EAX,EAX
            mov WORD PTR [RSP+28],SI
            lea RSI,QWORD PTR [RSP+28]
            and EAX,4294967288
            mov RDI,RBP
            movzx R14D,WORD PTR [RBP+58]
            add EAX,40
            mov BYTE PTR [RSP+31],0
            mov BYTE PTR [RSP+30],AL
            call .L_403d30

            test EAX,EAX
            jne .L_4173c3

            movzx EAX,BYTE PTR [RBP+58]
            lea ESI,DWORD PTR [R14-2]
            mov EDX,2
            mov RCX,R13
            mov RDI,RBP
            movzx ESI,SI
            sub EAX,R14D
            mov BYTE PTR [RSP+27],AL
            call .L_403ac0

            lea RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+34],0
            mov EAX,767
            mov ECX,512
            mov RSI,RBP
            mov RDI,RBX
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+32],AX
            mov WORD PTR [RSP+46],CX
            call .L_416d90

            test EAX,EAX
            jne .L_4173c3

            mov BYTE PTR [RBX+360],1
            jmp .L_4173d3
.L_4174be:

            call __stack_chk_fail@PLT
.L_4174c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4174d0:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,56
.L_4174ea:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov DWORD PTR [RSP+32],0
            lea R13,QWORD PTR [RSP+16]
            call .L_401240

            mov R12D,EAX
            lea RAX,QWORD PTR [R14+152]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_404570

            test RAX,RAX
            mov R15,RAX
            jne .L_417548

            jmp .L_4175d7
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_417538:

            sub EAX,R12D
            cmp EBX,EAX
            cmova EBX,EAX
.L_417540:

            test RBP,RBP
            mov R15,RBP
            je .L_4175c0
.L_417548:

            mov RDI,R15
            call .L_4033c0

            mov RBP,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R13
            mov EDX,20
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_403860

            mov EAX,DWORD PTR [RSP+32]
            cmp R12D,EAX
            js .L_417538

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_404640

            movzx EAX,WORD PTR [R15+58]
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-20]
            movzx ESI,SI
            call .L_403420

            mov RDX,R13
            mov RSI,R15
            mov RDI,R14
            call .L_416d90

            test EAX,EAX
            je .L_417540

            mov RDI,R15
            mov R15,RBP
            call .L_4033b0

            test RBP,RBP
            jne .L_417548

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4175c0:

            cmp EBX,-1
            je .L_4175d7

            call .L_401240

            lea RDI,QWORD PTR [R14+96]
            mov EDX,EBX
            mov ESI,EAX
            call .L_430d50
.L_4175d7:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4175f6

            add RSP,56
.L_4175eb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4175f6:

            call __stack_chk_fail@PLT
.L_4175fb:

            nop
            nop
            nop
            nop
            nop
.L_417600:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a10

            add RSP,8
            mov RDI,RAX
            jmp .L_4174d0
.L_41761d:

            nop
            nop
            nop
.L_417620:

            push R15
            push R14
            push R13
            push R12
            lea R13,QWORD PTR [RDI+169]
            push RBP
            push RBX
            lea R12,QWORD PTR [RDI+177]
            mov RBP,RDI
            mov RBX,R13
            sub RSP,72
.L_417642:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_417658:

            add RBX,1
            call .L_401460

            cmp RBX,R12
            mov BYTE PTR [RBX-1],AL
            jne .L_417658

            mov EAX,DWORD PTR [RBP+60]
            cmp EAX,3
            je .L_4176f0

            cmp EAX,4
            jne .L_417859
.L_41767a:

            mov RDI,RBP
            call .L_4161c0

            test RAX,RAX
            mov RBX,RAX
            je .L_417750

            mov EDX,9
            mov RSI,RAX
            mov RDI,RBP
            call .L_416200

            test EAX,EAX
            jne .L_417750

            mov R15D,64
            mov BYTE PTR [RSP+15],192
.L_4176b1:

            movzx EAX,BYTE PTR [RBP+56]
            lea R14,QWORD PTR [RSP+28]
            mov EDI,257
            mov WORD PTR [RSP+28],DI
            mov EDX,3
            mov RDI,RBX
            mov RSI,R14
            mov R12D,1
            mov BYTE PTR [RSP+30],AL
            call .L_403d30

            test EAX,EAX
            je .L_4177a2
.L_4176e6:

            test R15B,R15B
            je .L_417730

            jmp .L_417756
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4176f0:

            mov EAX,DWORD PTR [RBP+180]
            sub EAX,1
            cmp EAX,1
            jbe .L_41767a

            mov RDI,RBP
            call .L_4161c0

            test RAX,RAX
            mov RBX,RAX
            je .L_41772a

            mov EDX,9
            mov RSI,RAX
            mov RDI,RBP
            call .L_416200

            test EAX,EAX
            je .L_417847
.L_41772a:

            mov R12D,1
.L_417730:

            call .L_401240

            lea RDI,QWORD PTR [RBP+72]
            mov EDX,750
            mov ESI,EAX
            call .L_430d50

            jmp .L_41776b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417750:

            mov R12D,1
.L_417756:

            call .L_401240

            lea RDI,QWORD PTR [RBP+72]
            mov EDX,1250
            mov ESI,EAX
            call .L_430d50
.L_41776b:

            test RBX,RBX
            je .L_41777d

            test R12B,R12B
            je .L_41777d

            mov RDI,RBX
            call .L_4033b0
.L_41777d:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_417854

            add RSP,72
.L_417797:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4177a2:

            mov ECX,8
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_4163e0

            test EAX,EAX
            jne .L_4176e6

            movzx EAX,BYTE PTR [RSP+15]
            mov ESI,270
            mov EDX,3
            mov WORD PTR [RSP+28],SI
            mov RDI,RBX
            mov RSI,R14
            mov BYTE PTR [RSP+30],AL
            call .L_403d30

            test EAX,EAX
            jne .L_4176e6

            mov EDX,4
            mov RSI,R14
            mov RDI,RBX
            mov DWORD PTR [RSP+28],33554962
            call .L_403d30

            test EAX,EAX
            jne .L_4176e6

            lea RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+34],0
            mov EAX,767
            mov ECX,512
            mov RSI,RBX
            mov RDI,RBP
            mov DWORD PTR [RDX+10],0
            mov WORD PTR [RSP+32],AX
            mov WORD PTR [RSP+46],CX
            call .L_416d90

            test EAX,EAX
            setne R12B
            jmp .L_4176e6
.L_417847:

            xor R15D,R15D
            mov BYTE PTR [RSP+15],128
            jmp .L_4176b1
.L_417854:

            call __stack_chk_fail@PLT
.L_417859:

            lea RCX,QWORD PTR [RIP+.L_458ec0]
            lea RSI,QWORD PTR [RIP+.L_458cb4]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1669
            call __assert_fail@PLT
.L_417878:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417880:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov EBX,ECX
            mov R12,RDI
            sub RSP,40
.L_417895:

            movzx EBX,BX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_401240

            movdqu XMM0,XMMWORD PTR [RBP]
            add EAX,EBX
            mov RSI,RSP
            mov EDX,20
            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            movaps XMMWORD PTR [RSP],XMM0
            call .L_403d30

            test EAX,EAX
            mov EBP,EAX
            je .L_4178f0
.L_4178d2:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_417931

            add RSP,40
.L_4178e8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_4178f0:

            lea RDI,QWORD PTR [R12+152]
            mov RSI,R13
            mov EDX,1
            lea R13,QWORD PTR [R12+96]
            call .L_404580

            cmp R13,QWORD PTR [R12+112]
            je .L_41791e

            mov EAX,DWORD PTR [R12+104]
            sub EAX,DWORD PTR [RSP+16]
            test EAX,EAX
            jle .L_4178d2
.L_41791e:

            call .L_401240

            mov EDX,EBX
            mov ESI,EAX
            mov RDI,R13
            call .L_430d50

            jmp .L_4178d2
.L_417931:

            call __stack_chk_fail@PLT
.L_417936:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417940:

            push R15
            push R14
            mov R14D,R8D
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,ECX
            mov EBX,3
            sub RSP,24
            mov QWORD PTR [RSP+8],RSI
            call .L_4161c0

            test RAX,RAX
            je .L_41798f

            mov EDX,7
            mov RSI,RAX
            mov RDI,RBP
            mov R15,RAX
            call .L_416200

            test EAX,EAX
            mov EBX,EAX
            je .L_4179a0
.L_417987:

            mov RDI,R15
            call .L_4033b0
.L_41798f:

            add RSP,24
            mov EAX,EBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4179a0:

            movzx ECX,R12B
            mov RDX,R13
            mov RSI,R15
            mov RDI,RBP
            call .L_416710

            test EAX,EAX
            mov EBX,EAX
            jne .L_417987

            mov RSI,R15
            mov RDI,RBP
            call .L_416870

            test EAX,EAX
            mov EBX,EAX
            jne .L_417987

            mov RSI,R15
            mov RDI,RBP
            call .L_416910

            test EAX,EAX
            mov EBX,EAX
            jne .L_417987

            test R14W,R14W
            je .L_417a00

            mov RDX,QWORD PTR [RSP+8]
            movzx ECX,R14W
            mov RSI,R15
            mov RDI,RBP
            call .L_417880

            test EAX,EAX
            mov EBX,EAX
            je .L_41798f

            jmp .L_417987
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_417a00:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R15
            mov RDI,RBP
            call .L_416d90

            test EAX,EAX
            mov EBX,EAX
            jne .L_417987

            test BYTE PTR [RBP+56],8
            jne .L_41798f

            mov RDI,RBP
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2520]
            mov ESI,8
            call .L_412870

            jmp .L_41798f
.L_417a42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417a50:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,344
.L_417a6a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+44],CX
            lea RCX,QWORD PTR [RSP+34]
            xor R8D,R8D
            xor R9D,R9D
            mov WORD PTR [RSP+64],DX
            mov WORD PTR [RSP+54],SI
            mov WORD PTR [RSP+28],DI
            mov R13,RAX
            mov EDX,10
            xor EAX,EAX
            mov ESI,11
            mov RDI,RBP
            mov WORD PTR [RSP+34],AX
            mov WORD PTR [RSP+30],R8W
            mov WORD PTR [RSP+32],R9W
            call .L_430f70

            test EAX,EAX
            mov R15D,EAX
            jne .L_417b00

            cmp BYTE PTR [RSP+35],8
            jne .L_417b70

            mov EAX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RBX+2],EAX
            mov ESI,EAX
            bswap ESI
            je .L_417b80
.L_417af4:

            cmp DWORD PTR [RBX+12],2
            je .L_417b30

            mov R15D,2
.L_417b00:

            mov RDX,QWORD PTR [RSP+328]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_417e07

            add RSP,344
.L_417b21:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_417b30:

            movzx ECX,BYTE PTR [RSP+43]
            movzx EDX,BYTE PTR [RSP+40]
            mov RDI,RBX
            call .L_415ec0

            mov BYTE PTR [RBX+10],1
.L_417b46:

            lea R14,QWORD PTR [RSP+44]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_417bc8

            cmp BYTE PTR [RSP+45],8
            je .L_417d90

            nop
.L_417b70:

            mov R15D,6
            jmp .L_417b00
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417b80:

            movzx EAX,BYTE PTR [RBX+6]
            cmp BYTE PTR [RSP+40],AL
            jne .L_417af4

            movzx EAX,BYTE PTR [RSP+43]
            cmp BYTE PTR [RBX+9],AL
            jne .L_417af4

            cmp BYTE PTR [RBX+10],0
            jne .L_417b46

            test BYTE PTR [RBX+56],1
            je .L_417df6

            movzx EAX,BYTE PTR [RSP+41]
            sub AL,BYTE PTR [R13+7785]
.L_417bb8:

            test AL,AL
            jg .L_417b46

            jmp .L_417b00
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417bc8:

            mov BYTE PTR [RSP+45],0
.L_417bcd:

            lea RAX,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,23
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP],RAX
            call .L_430f70

            test EAX,EAX
            je .L_417d08

            mov BYTE PTR [RSP+55],0
.L_417bf8:

            lea R8,QWORD PTR [RSP+64]
            mov EDX,257
            mov ESI,12
            mov RDI,RBP
            mov RCX,R8
            mov QWORD PTR [RSP+8],R8
            call .L_430f70

            test EAX,EAX
            jne .L_417d60

            movzx R9D,BYTE PTR [RSP+65]
            cmp R9B,255
            je .L_417b70

            movzx ECX,BYTE PTR [RBX+56]
            mov R8,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R13+7520]
            movzx EDX,BYTE PTR [RSP+42]
            movzx ESI,BYTE PTR [RSP+41]
            add R8,2
            not ECX
            and ECX,1
            call .L_426b60

            cmp BYTE PTR [RSP+45],0
            je .L_417ca8

            movzx EAX,WORD PTR [RSP+28]
            test AX,AX
            je .L_417ca8

            lea RCX,QWORD PTR [RSP+32]
            movzx ESI,AX
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+28]
            movzx R8D,BYTE PTR [RSP+33]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R13+1080]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_409ec0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417ca8:

            cmp BYTE PTR [RSP+55],0
            je .L_417cf6

            movzx EAX,WORD PTR [RSP+30]
            test AX,AX
            je .L_417cf6

            lea RCX,QWORD PTR [RSP+32]
            movzx ESI,AX
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+30]
            mov RSI,QWORD PTR [RSP]
            lea RDI,QWORD PTR [R13+1208]
            movzx R8D,BYTE PTR [RSP+33]
            mov RDX,RBP
            add RSI,2
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40a0f0
.L_417cf6:

            mov BYTE PTR [RBX+10],0
            xor R15D,R15D
            jmp .L_417b00
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417d08:

            cmp BYTE PTR [RSP+55],8
            jne .L_417b70

            lea RDI,QWORD PTR [R13+1208]
            call .L_409510

            test RAX,RAX
            je .L_417d3c

            mov RDI,QWORD PTR [RSP]
            lea RSI,QWORD PTR [RDI+2]
            mov RDI,RAX
            call .L_40d0d0

            test EAX,EAX
            je .L_417bf8
.L_417d3c:

            lea RDX,QWORD PTR [RSP+30]
            mov ESI,25
            mov RDI,RBP
            call .L_430e40

            test EAX,EAX
            je .L_417bf8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417d60:

            mov RDI,R12
            call .L_40ee50

            test AL,AL
            mov R8D,10
            jne .L_417dd0
.L_417d72:

            lea RSI,QWORD PTR [R12+16]
            lea RDX,QWORD PTR [RIP+.L_458f2e]
            mov ECX,1
            mov RDI,RBX
            call .L_417940

            jmp .L_417b00
.L_417d90:

            lea RDI,QWORD PTR [R13+1080]
            call .L_409510

            test RAX,RAX
            je .L_417db5

            lea RSI,QWORD PTR [R14+2]
            mov RDI,RAX
            call .L_40d0d0

            test EAX,EAX
            je .L_417bcd
.L_417db5:

            lea RDX,QWORD PTR [RSP+28]
            mov ESI,24
            mov RDI,RBP
            call .L_430e40

            test EAX,EAX
            jne .L_417d60

            jmp .L_417bcd
.L_417dd0:

            call .L_401460

            movzx ECX,AX
            mov EDX,274877907
            mov EAX,ECX
            mul EDX
            shr EDX,6
            imul R8D,EDX,1000
            sub ECX,R8D
            mov R8D,ECX
            jmp .L_417d72
.L_417df6:

            movzx EAX,BYTE PTR [RSP+42]
            sub AL,BYTE PTR [R13+7784]
            jmp .L_417bb8
.L_417e07:

            call __stack_chk_fail@PLT
.L_417e0c:

            nop
            nop
            nop
            nop
.L_417e10:

            jmp .L_417a50
.L_417e15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417e20:

            movzx EAX,BYTE PTR [RDI+241]
            movzx R9D,BYTE PTR [RDI+234]
            and EAX,3
            cmp AL,R9B
            cmova EAX,R9D
            cmp AL,DL
            je .L_417e48
.L_417e3d:

            setb AL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_417e48:

            and ESI,511
            sete AL
            test WORD PTR [RDI+228],511
            sete DL
            cmp AL,DL
            je .L_417e68

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417e68:

            movzx EAX,BYTE PTR [R8+2]
            shl EAX,24
            sar EAX,30
            cmp BYTE PTR [RDI+184],AL
            je .L_417e80

            setl AL
            ret 
          .byte 0x90
.L_417e80:

            movzx EAX,BYTE PTR [R8+3]
            cmp BYTE PTR [RDI+185],AL
            jne .L_417e3d

            movzx EAX,BYTE PTR [R8+4]
            cmp BYTE PTR [RDI+186],AL
            jne .L_417e3d

            movzx EAX,BYTE PTR [RDI+187]
            cmp BYTE PTR [R8+5],AL
            jne .L_417ead

            cmp CL,BYTE PTR [RDI+199]
.L_417ead:

            seta AL
            ret 
.L_417eb1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417ec0:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+236],0
            movups XMMWORD PTR [RDI+220],XMM0
            and BYTE PTR [RDI+230],248
            movups XMMWORD PTR [RDI+204],XMM0
            ret 
.L_417ee5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_417ef0:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,120
.L_417f0a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+54],CX
            lea RCX,QWORD PTR [RSP+38]
            xor R9D,R9D
            xor R8D,R8D
            xor R10D,R10D
            mov WORD PTR [RSP+38],DX
            mov WORD PTR [RSP+35],SI
            mov R13,RAX
            mov WORD PTR [RSP+64],DI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+48],R9W
            mov R14,QWORD PTR [R12+40]
            mov WORD PTR [RSP+84],AX
            mov WORD PTR [RSP+42],R8W
            mov WORD PTR [RSP+94],R10W
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_417f8d

            cmp BYTE PTR [RSP+39],2
            je .L_417fb8
.L_417f87:

            mov R9D,6
.L_417f8d:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_4183c9

            add RSP,120
.L_417fa8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_417fb8:

            lea RCX,QWORD PTR [RSP+84]
            mov EDX,10
            mov ESI,4
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_417f8d

            cmp BYTE PTR [RSP+85],8
            jne .L_417f87

            mov RAX,QWORD PTR [RBP+169]
            cmp QWORD PTR [RSP+86],RAX
            jne .L_417f87

            lea RSI,QWORD PTR [RSP+76]
            lea RDI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP],RSI
            call .L_40f0c0

            cmp DWORD PTR [RBP+12],2
            je .L_4183a0
.L_418008:

            lea R12,QWORD PTR [RSP+54]
            mov EDX,10
            mov ESI,11
            mov RDI,RBX
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_417f8d

            cmp BYTE PTR [RSP+55],8
            jne .L_417f87

            lea RCX,QWORD PTR [RSP+35]
            mov EDX,3
            mov ESI,16
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_417f8d

            cmp BYTE PTR [RSP+36],1
            jne .L_417f87

            movsx ESI,BYTE PTR [R14+3]
            mov DWORD PTR [RSP+16],EAX
            lea RAX,QWORD PTR [R13+1560]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            mov DWORD PTR [RSP],ESI
            call .L_407e20

            mov ESI,DWORD PTR [RSP]
            movsx EDI,AL
            call .L_413220

            movzx EDX,BYTE PTR [RSP+37]
            cmp BYTE PTR [RSP+37],AL
            cmovbe EAX,EDX
            mov BYTE PTR [RSP+27],AL
            movzx EAX,AL
            mov EDI,EAX
            mov DWORD PTR [RSP],EAX
            call .L_413240

            cmp DWORD PTR [RBP+60],3
            mov BYTE PTR [RSP+26],AL
            mov R9D,DWORD PTR [RSP+16]
            jne .L_4180c4

            cmp AL,3
            jne .L_417f8d
.L_4180c4:

            lea RAX,QWORD PTR [RSP+64]
            mov EDX,12
            mov ESI,15
            mov RDI,RBX
            mov DWORD PTR [RSP+28],R9D
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_4183c1

            movzx EAX,BYTE PTR [RSP+65]
            mov R9D,DWORD PTR [RSP+28]
            cmp AL,7
            je .L_418106

            cmp AL,10
            jne .L_417f87
.L_418106:

            test BYTE PTR [RBP+56],2
            je .L_4183ce

            cmp DWORD PTR [RBP+12],1
            je .L_418151

            mov EDX,DWORD PTR [RBP+180]
            movzx EAX,BYTE PTR [RSP+71]
            sub AL,BYTE PTR [R13+3312]
            cmp EDX,2
            ja .L_418454

            cmp EDX,1
            jae .L_4183f2

            mov EDX,DWORD PTR [RSP+56]
            mov ECX,DWORD PTR [RBP+2]
            test AL,AL
            bswap EDX
            bswap ECX
            jg .L_418151

            cmp ECX,EDX
            je .L_417f8d
.L_418151:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_4181c7
.L_41815f:

            xor EDI,EDI
            cmp BYTE PTR [RSP+72],1
            movzx EDX,BYTE PTR [RBP+200]
            lea RCX,QWORD PTR [RBP+189]
            mov RSI,R12
            mov DWORD PTR [RSP+28],R9D
            setbe DIL
            call .L_41bbc0

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+28]
            js .L_417f8d

            jne .L_4181c7
.L_418194:

            movzx ESI,WORD PTR [RSP+40]
            movzx EDX,BYTE PTR [RSP+26]
            mov RDI,RBP
            mov R8,QWORD PTR [RSP+16]
            mov ECX,DWORD PTR [RSP]
            mov DWORD PTR [RSP+28],R9D
            rol SI,8
            movzx ESI,SI
            call .L_417e20

            test AL,AL
            mov R9D,DWORD PTR [RSP+28]
            je .L_417f8d
.L_4181c7:

            lea RCX,QWORD PTR [RSP+42]
            mov EDX,6
            mov ESI,5
            mov RDI,RBX
            mov DWORD PTR [RSP],R9D
            call .L_430f70

            test EAX,EAX
            mov R9D,DWORD PTR [RSP]
            jne .L_4183c1

            cmp BYTE PTR [RSP+43],4
            jne .L_417f87

            lea RCX,QWORD PTR [RSP+48]
            mov EDX,6
            mov ESI,8
            mov RDI,RBX
            mov DWORD PTR [RSP],R9D
            call .L_430f70

            test EAX,EAX
            jne .L_4183e5

            cmp BYTE PTR [RSP+49],4
            mov R9D,DWORD PTR [RSP]
            jne .L_417f8d
.L_41822b:

            lea R12,QWORD PTR [RSP+94]
            mov EDX,10
            mov ESI,3
            mov RDI,RBX
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_417f8d

            movzx EAX,BYTE PTR [RSP+95]
            lea EDX,DWORD PTR [RAX-4]
            cmp DL,4
            ja .L_417f87

            lea RDX,QWORD PTR [RBP+160]
            lea RSI,QWORD PTR [R12+2]
            movzx ECX,AL
            lea R12,QWORD PTR [RBP+232]
            mov DWORD PTR [RSP],R9D
            mov RDI,RDX

            rep movsb 

            mov BYTE PTR [RBP+168],AL
            mov RAX,QWORD PTR [RSP+76]
            mov RDI,R12
            or BYTE PTR [RBP+230],120
            mov QWORD PTR [RBP+204],RAX
            movzx EAX,WORD PTR [RSP+40]
            rol AX,8
            mov WORD PTR [RBP+228],AX
            mov EAX,DWORD PTR [RSP+44]
            bswap EAX
            mov DWORD PTR [RBP+216],EAX
            mov EAX,DWORD PTR [RSP+50]
            bswap EAX
            mov DWORD PTR [RBP+220],EAX
            call .L_413070

            movsx EBX,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            call .L_407e20

            mov EDX,EBX
            movsx ESI,AL
            mov RDI,R12
            call .L_413080

            movzx EDI,BYTE PTR [RSP+37]
            mov BYTE PTR [RBP+231],0
            call .L_413240

            and EAX,3
            mov DWORD PTR [RBP+224],R15D
            mov R9D,DWORD PTR [RSP]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBP+241]
            and EAX,4294967292
            or EAX,EDX
            mov BYTE PTR [RBP+241],AL
            movzx EAX,BYTE PTR [RBP+230]
            and EAX,4294967288
            or EAX,3
            mov BYTE PTR [RBP+230],AL
            movzx EAX,BYTE PTR [RSP+66]
            shl EAX,24
            sar EAX,30
            cmp BYTE PTR [RSP+72],1
            mov BYTE PTR [RBP+184],AL
            movzx EAX,BYTE PTR [RSP+67]
            setbe BYTE PTR [RBP+200]
            mov BYTE PTR [RBP+185],AL
            movzx EAX,BYTE PTR [RSP+68]
            mov BYTE PTR [RBP+186],AL
            movzx EAX,BYTE PTR [RSP+69]
            mov BYTE PTR [RBP+187],AL
            movzx EAX,BYTE PTR [RSP+70]
            mov BYTE PTR [RBP+150],AL
            mov RAX,QWORD PTR [RSP+54]
            mov QWORD PTR [RBP+189],RAX
            movzx EAX,WORD PTR [RSP+62]
            mov WORD PTR [RBP+197],AX
            movzx EAX,BYTE PTR [RSP+27]
            mov BYTE PTR [RBP+199],AL
            jmp .L_417f8d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4183a0:

            mov RSI,QWORD PTR [RSP]
            lea RDI,QWORD PTR [RBP+16]
            call .L_408380

            test AL,AL
            je .L_418008

            mov BYTE PTR [RBP+201],1
            jmp .L_418008
.L_4183c1:

            mov R9D,EAX
            jmp .L_417f8d
.L_4183c9:

            call __stack_chk_fail@PLT
.L_4183ce:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_4181c7

            jmp .L_418194
.L_4183e5:

            mov EAX,DWORD PTR [RSP+44]
            mov DWORD PTR [RSP+50],EAX
            jmp .L_41822b
.L_4183f2:

            mov EDX,DWORD PTR [RSP+56]
            cmp DWORD PTR [RBP+2],EDX
            jne .L_417f8d

            cmp AL,0
            jg .L_418151

            jne .L_417f8d

            lea RDI,QWORD PTR [R13+2568]
            mov DWORD PTR [RSP+28],R9D
            call .L_41b4c0

            movzx EDX,BYTE PTR [R13+7228]
            mov R9D,DWORD PTR [RSP+28]
            cmp EDX,EAX
            jbe .L_417f8d
.L_418433:

            movzx EAX,BYTE PTR [RBP+230]
            and EAX,7
            cmp AL,3
            jne .L_4181c7

            test BYTE PTR [RBP+56],2
            jne .L_41815f

            jmp .L_418194
.L_418454:

            cmp EDX,3
            jne .L_418433

            mov EAX,DWORD PTR [RSP+56]
            cmp DWORD PTR [RBP+2],EAX
            je .L_417f8d

            lea RDI,QWORD PTR [R13+2568]
            mov DWORD PTR [RSP+28],R9D
            call .L_41bb70

            xor EDI,EDI
            cmp BYTE PTR [RSP+72],1
            movzx EDX,AL
            mov RCX,RBP
            mov RSI,R12
            setbe DIL
            call .L_41bbc0

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+28]
            jg .L_418433

            jmp .L_417f8d
.L_41849e:

            nop
            nop
.L_4184a0:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            sub RSP,400
.L_4184b5:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+14],CX
            lea RCX,QWORD PTR [RSP+10]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RSP+10],DX
            mov WORD PTR [RSP+128],SI
            mov R12,RAX
            mov WORD PTR [RSP+48],DI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBP
            mov WORD PTR [RSP+18],AX
            mov WORD PTR [RSP+28],R8W
            mov WORD PTR [RSP+38],R9W
            mov WORD PTR [RSP+8],R10W
            call .L_430f70

            test EAX,EAX
            jne .L_418536

            cmp BYTE PTR [RSP+11],2
            jne .L_418560

            cmp DWORD PTR [RBX+60],5
            je .L_418570
.L_418536:

            mov RDX,QWORD PTR [RSP+392]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4187e5

            add RSP,400
.L_418554:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_418560:

            mov EAX,6
            jmp .L_418536
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418570:

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_418536

            cmp BYTE PTR [RSP+19],8
            jne .L_418560

            lea RCX,QWORD PTR [RSP+14]
            mov EDX,4
            mov ESI,10
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_418536

            cmp BYTE PTR [RSP+15],2
            jne .L_418560

            lea R13,QWORD PTR [RSP+128]
            mov EDX,257
            mov ESI,12
            mov RDI,RBP
            mov RCX,R13
            call .L_430f70

            test EAX,EAX
            jne .L_418536

            lea R14,QWORD PTR [RSP+28]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_418654

            cmp BYTE PTR [RSP+29],8
            jne .L_418560

            lea RDX,QWORD PTR [RSP+6]
            mov ESI,24
            mov RDI,RBP
            call .L_430e40

            test EAX,EAX
            jne .L_418654

            movzx ESI,WORD PTR [RSP+6]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+6]
            movzx R8D,BYTE PTR [RSP+9]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R12+1080]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_409ec0
.L_418654:

            cmp DWORD PTR [RBX+64],3
            je .L_41880e
.L_41865e:

            lea R14,QWORD PTR [RSP+38]
            mov EDX,10
            mov ESI,23
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_4187fc

            cmp BYTE PTR [RSP+39],8
            jne .L_418560

            lea RDX,QWORD PTR [RSP+6]
            mov ESI,25
            mov RDI,RBP
            call .L_430e40

            test EAX,EAX
            jne .L_4186dd

            movzx ESI,WORD PTR [RSP+6]
            lea RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+6]
            movzx R8D,BYTE PTR [RSP+9]
            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [R12+1208]
            mov RDX,RBP
            lea ECX,DWORD PTR [RAX+2]
            movzx ECX,CX
            call .L_40a0f0
.L_4186dd:

            lea RDI,QWORD PTR [RBX+72]
            lea R14,QWORD PTR [R12+2256]
            call .L_430c70

            mov RDI,RBX
            call .L_415270

            mov ESI,DWORD PTR [RSP+20]
            movzx ECX,BYTE PTR [RSP+27]
            mov RDI,RBX
            movzx EDX,BYTE PTR [RSP+24]
            bswap ESI
            call .L_415ec0

            test BYTE PTR [RBX+56],8
            jne .L_4187ea

            lea RDI,QWORD PTR [R12+2520]
            xor ESI,ESI
            call .L_412830

            xor ESI,ESI
            mov RDI,R14
            call .L_43da10
.L_418731:

            lea R14,QWORD PTR [RSP+48]
            mov EDX,74
            mov ESI,9
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_418759

            test BYTE PTR [RBX+56],2
            jne .L_418820
.L_418759:

            lea RDX,QWORD PTR [RBX+204]
            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RBX+204]
            mov ECX,38
            movzx R9D,BYTE PTR [RSP+129]

            rep movsb 

            mov RDI,RDX
            mov ECX,10
            movzx ESI,BYTE PTR [RSP+25]
            movzx EDX,BYTE PTR [RSP+26]
            lea R8,QWORD PTR [R13+2]

            rep stosd DWORD PTR [RDI]

            movzx EAX,WORD PTR [RSP+12]
            lea RDI,QWORD PTR [R12+7520]
            mov BYTE PTR [RBX+230],0
            movzx ECX,BYTE PTR [RBX+56]
            rol AX,8
            mov WORD PTR [RBX+40],AX
            not ECX
            and ECX,1
            call .L_426b60

            lea RDI,QWORD PTR [R12+1080]
            call .L_4096e0

            movzx ESI,WORD PTR [RSP+16]
            mov RDI,RBX
            rol SI,8
            movzx ESI,SI
            call .L_415d40

            jmp .L_418536
.L_4187e5:

            call __stack_chk_fail@PLT
.L_4187ea:

            mov ESI,1
            mov RDI,R14
            call .L_43da10

            jmp .L_418731
.L_4187fc:

            lea RDI,QWORD PTR [R12+1208]
            call .L_40a040

            jmp .L_4186dd
.L_41880e:

            lea RDI,QWORD PTR [R12+1208]
            call .L_40a020

            jmp .L_41865e
.L_418820:

            lea RDI,QWORD PTR [R12+2568]
            mov RSI,R14
            call .L_41ba80

            test EAX,EAX
            je .L_418759

            jmp .L_418536
.L_41883d:

            nop
            nop
            nop
.L_418840:

            push R14
            push R13
            mov R14,RDX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,48
.L_418855:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            xor EDI,EDI
            mov WORD PTR [RSP+30],CX
            lea RCX,QWORD PTR [RSP+2]
            xor R8D,R8D
            xor R9D,R9D
            mov WORD PTR [RSP+5],DX
            mov WORD PTR [RSP+12],SI
            mov WORD PTR [RSP+18],DI
            mov R13,RAX
            mov EDX,3
            xor EAX,EAX
            mov ESI,17
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov WORD PTR [RSP+8],R8W
            mov WORD PTR [RSP+24],R9W
            call .L_430f70

            test EAX,EAX
            je .L_418a10

            lea RCX,QWORD PTR [RSP+5]
            mov EDX,3
            mov ESI,1
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_4189e8

            cmp BYTE PTR [RSP+6],1
            jne .L_418a20

            movzx EAX,BYTE PTR [RSP+7]
            cmp BYTE PTR [RBP+56],AL
            jne .L_418a30

            mov EAX,DWORD PTR [RBP+12]
            cmp EAX,1
            je .L_418a40

            cmp EAX,2
            jne .L_418b37
.L_418910:

            lea RCX,QWORD PTR [RSP+8]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_4189e8

            cmp BYTE PTR [RSP+9],2
            jne .L_418a20

            movzx EBX,WORD PTR [RSP+10]
            mov RDI,RBP
            call .L_430af0

            movzx EAX,WORD PTR [RAX+1664]
            rol BX,8
            movzx EBX,BX
            sar EBX,10
            sar EAX,10
            cmp BL,AL
            jne .L_418a10

            mov RDX,R14
            mov RSI,R12
            mov RDI,RBP
            call .L_417a50

            test EAX,EAX
            mov EBX,EAX
            jne .L_4189e8

            lea RCX,QWORD PTR [RSP+24]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_4189a8

            cmp BYTE PTR [RSP+25],4
            jne .L_418a20

            mov EAX,DWORD PTR [RSP+26]
            bswap EAX
            mov DWORD PTR [RBP+320],EAX
.L_4189a8:

            test BYTE PTR [RBP+56],8
            lea R14,QWORD PTR [RBP+120]
            lea R12,QWORD PTR [R13+2256]
            jne .L_418b01

            lea RDI,QWORD PTR [R13+2520]
            xor ESI,ESI
            call .L_412830

            mov RDI,R12
            xor ESI,ESI
            call .L_43da10

            mov RDI,R14
            call .L_430c70
.L_4189dd:

            mov BYTE PTR [RBP+188],0
            nop
            nop
            nop
            nop
.L_4189e8:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_418afc

            add RSP,48
.L_418a02:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_418a10:

            mov RDI,RBP
            xor EBX,EBX
            call .L_415e50

            jmp .L_4189e8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_418a20:

            mov EBX,6
            jmp .L_4189e8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418a30:

            mov EBX,2
            jmp .L_4189e8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418a40:

            lea RCX,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_4189e8

            cmp BYTE PTR [RSP+31],8
            jne .L_418a20

            mov RAX,QWORD PTR [RBP+169]
            cmp QWORD PTR [RSP+32],RAX
            jne .L_418a30

            lea RCX,QWORD PTR [RSP+12]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_4189e8

            cmp BYTE PTR [RSP+13],4
            jne .L_418a20

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_418af2

            cmp BYTE PTR [RSP+19],4
            jne .L_418a20

            mov EAX,DWORD PTR [RSP+14]
.L_418ac4:

            bswap EAX
            or BYTE PTR [RBP+42],7
            mov RDI,RBP
            mov DWORD PTR [RBP+28],EAX
            mov EAX,DWORD PTR [RSP+20]
            bswap EAX
            mov DWORD PTR [RBP+32],EAX
            call .L_430af0

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,RBP
            call .L_415d40

            jmp .L_418910
.L_418af2:

            mov EAX,DWORD PTR [RSP+14]
            mov DWORD PTR [RSP+20],EAX
            jmp .L_418ac4
.L_418afc:

            call __stack_chk_fail@PLT
.L_418b01:

            imul R13D,DWORD PTR [RBP+320],1000
            call .L_401240

            mov RDI,R14
            mov ESI,EAX
            sub R13D,4000
            mov EDX,R13D
            call .L_430d50

            mov ESI,1
            mov RDI,R12
            call .L_43da10

            jmp .L_4189dd
.L_418b37:

            lea RCX,QWORD PTR [RIP+.L_458da0]
            lea RSI,QWORD PTR [RIP+.L_458cb4]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,3185
            call __assert_fail@PLT
.L_418b56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418b60:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            xor EBX,EBX
            sub RSP,248
.L_418b81:

            mov R14,QWORD PTR [RDX+40]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+360],0
            mov WORD PTR [RSP+60],CX
            mov WORD PTR [RSP+58],AX
            mov WORD PTR [RSP+70],R8W
            mov EAX,2
            mov WORD PTR [RSP+86],R9W
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+128],R11W
            mov WORD PTR [RSP+74],BX
            je .L_418df8

            mov RBX,RSI
            mov R12,RDX
            lea RDX,QWORD PTR [RSP+56]
            mov R13,RDI
            mov ESI,26
            mov RDI,RBX
            call .L_430e40

            test EAX,EAX
            jne .L_418e28

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+58]
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            movzx EAX,WORD PTR [RSP+56]
            movzx EBP,BYTE PTR [RSP+59]
            lea RSI,QWORD PTR [RSP+160]
            pxor XMM0,XMM0
            mov QWORD PTR [RSP+208],0
            mov DWORD PTR [RSP+216],0
            lea RDI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+16],RSI
            add EAX,2
            movaps XMMWORD PTR [RSP+160],XMM0
            mov WORD PTR [RSP+56],AX
            add EBP,EAX
            movaps XMMWORD PTR [RSP+176],XMM0
            movaps XMMWORD PTR [RSP+192],XMM0
            movzx EAX,WORD PTR [R14]
            mov WORD PTR [RSP+210],AX
            movzx EAX,BYTE PTR [R14+2]
            mov BYTE PTR [RSP+214],AL
            movzx EAX,BYTE PTR [R14+3]
            mov BYTE PTR [RSP+215],AL
            movzx EAX,BYTE PTR [R14+4]
            mov BYTE PTR [RSP+216],AL
            call .L_40f0c0

            movzx ESI,WORD PTR [RSP+56]
            cmp BP,SI
            jbe .L_418de0

            lea RAX,QWORD PTR [RSP+128]
            lea R12,QWORD PTR [RSP+60]
            mov QWORD PTR [RSP+24],RAX
            lea RAX,QWORD PTR [RSP+62]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RSP+98]
            mov QWORD PTR [RSP+40],RAX
            jmp .L_418d5c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_418ce0:

            cmp AL,2
            je .L_418e30

            cmp AL,3
            jne .L_418d40

            movzx ESI,WORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+32]
            mov EDX,18
            mov RDI,RBX
            call .L_403860

            movzx R14D,BYTE PTR [RSP+97]
            cmp R14B,16
            ja .L_418e28

            mov RAX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+40]
            movzx EDX,R14B
            mov ECX,52
            lea RDI,QWORD PTR [RAX+8]
            call __memcpy_chk@PLT

            mov BYTE PTR [RSP+R14*1+168],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418d40:

            movzx ESI,WORD PTR [RSP+56]
            movzx EAX,BYTE PTR [RSP+61]
            lea ESI,DWORD PTR [RSI+RAX*1+2]
            cmp SI,BP
            mov WORD PTR [RSP+56],SI
            jae .L_418de0
.L_418d5c:

            movzx ESI,SI
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+60]
            cmp AL,8
            je .L_418e60

            jbe .L_418ce0

            cmp AL,18
            je .L_418ec0

            cmp AL,129
            jne .L_418d40

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+70]
            mov EDX,4
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+71],2
            jne .L_418e28

            movzx EDX,BYTE PTR [RSP+72]
            mov EAX,EDX
            add EDX,EDX
            shr EAX,4
            and EDX,16
            and EAX,15
            mov ECX,EAX
            movzx EAX,BYTE PTR [RSP+217]
            and EAX,4294967264
            or EAX,ECX
            or EAX,EDX
            mov BYTE PTR [RSP+217],AL
            jmp .L_418d40
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_418de0:

            mov RSI,QWORD PTR [R13+352]
            mov RDI,QWORD PTR [RSP+16]
            call QWORD PTR [R13+344]
.L_418df3:

            xor EAX,EAX
            nop
            nop
            nop
.L_418df8:

            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_418fe4

            add RSP,248
.L_418e16:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418e28:

            mov EAX,6
            jmp .L_418df8
          .byte 0x90
.L_418e30:

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+86]
            mov EDX,10
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+87],8
            jne .L_418e28

            mov RAX,QWORD PTR [RSP+88]
            mov QWORD PTR [RSP+185],RAX
            jmp .L_418d40
.L_418e60:

            movzx ESI,WORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+24]
            mov EDX,18
            mov RDI,RBX
            call .L_403860

            movzx ECX,BYTE PTR [RSP+129]
            lea EAX,DWORD PTR [RCX-1]
            cmp AL,15
            ja .L_418e28

            cmp BYTE PTR [R13+361],0
            jne .L_418f00
.L_418e90:

            mov RAX,QWORD PTR [RSP+24]
            mov BYTE PTR [RSP+193],CL
            movzx EDX,CL
            mov ECX,26
            lea RSI,QWORD PTR [RAX+2]
            mov RAX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+34]
            call __memcpy_chk@PLT

            jmp .L_418d40
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_418ec0:

            movzx ESI,WORD PTR [RSP+56]
            lea RCX,QWORD PTR [RSP+74]
            mov EDX,4
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+75],2
            jne .L_418e28

            movzx EAX,WORD PTR [RSP+76]
            rol AX,8
            mov WORD PTR [RSP+212],AX
            jmp .L_418d40
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_418f00:

            mov RDI,QWORD PTR [RSP]
            lea R14,QWORD PTR [RSP+66]
            mov ESI,4129
            lea R15,QWORD PTR [RSP+78]
            call .L_430270

            mov ESI,32773
            mov RDI,R14
            call .L_430270

            mov RDI,R13
            call .L_430ac0

            mov RSI,R15
            mov RDI,RAX
            call .L_4012d0

            mov RSI,R15
            mov RDI,R15
            call .L_437710

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
            nop
.L_418f50:

            movzx ESI,BYTE PTR [R15]
            mov RDI,QWORD PTR [RSP]
            add R15,1
            call .L_430280

            movzx ESI,BYTE PTR [R15-1]
            mov RDI,R14
            call .L_430280

            cmp QWORD PTR [RSP+8],R15
            jne .L_418f50

            movzx ESI,BYTE PTR [RSP+129]
            movzx EAX,WORD PTR [RSP+64]
            lea EDI,DWORD PTR [RSI*8]
            cdq 
            mov ECX,ESI
            sub ESI,1
            movzx EDI,DIL
            mov R8D,ESI
            idiv EDI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub R8D,EAX
            movsxd RAX,R8D
            movzx EAX,BYTE PTR [RSP+RAX*1+130]
            bt EAX,EDX
            jae .L_418df3

            movzx EAX,WORD PTR [RSP+68]
            cdq 
            idiv EDI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub ESI,EAX
            movsxd RSI,ESI
            movzx EAX,BYTE PTR [RSP+RSI*1+130]
            bt EAX,EDX
            jb .L_418e90

            xor EAX,EAX
            jmp .L_418df8
.L_418fe4:

            call __stack_chk_fail@PLT
.L_418fe9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_418ff0:

            movzx EAX,BYTE PTR [RDI+42]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_419028

            cmp AL,1
            je .L_419028
.L_419003:

            movzx EAX,BYTE PTR [RDI+230]
            and EAX,7
            cmp AL,7
            jne .L_419038

            cmp SI,WORD PTR [RDI+228]
            jne .L_419038

            lea RAX,QWORD PTR [RDI+204]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419028:

            cmp SI,WORD PTR [RDI+40]
            lea RAX,QWORD PTR [RDI+16]
            jne .L_419003

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_419038:

            xor EAX,EAX
            ret 
.L_41903b:

            nop
            nop
            nop
            nop
            nop
.L_419040:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            movzx EAX,BYTE PTR [RDI+42]
            mov RBX,RDI
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_419090

            cmp AL,1
            je .L_419090

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,7
            jne .L_4190b1
.L_41906b:

            lea RBP,QWORD PTR [RBX+204]
            mov RSI,R12
            mov RDI,RBP
            call .L_408380

            test AL,AL
            je .L_4190b1
.L_419081:

            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419090:

            lea RBP,QWORD PTR [RBX+16]
            mov RSI,R12
            mov RDI,RBP
            call .L_408380

            test AL,AL
            jne .L_419081

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,7
            je .L_41906b
.L_4190b1:

            xor EBP,EBP
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_4190bb:

            nop
            nop
            nop
            nop
            nop
.L_4190c0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,152
.L_4190da:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+48],CX
            lea RCX,QWORD PTR [RSP+26]
            mov WORD PTR [RSP+30],DX
            mov R13,RAX
            mov EDX,4
            xor EAX,EAX
            mov RDI,RBX
            mov WORD PTR [RSP+26],AX
            mov BYTE PTR [RSP+135],12
            call .L_430f70

            test EAX,EAX
            mov R15D,EAX
            jne .L_41913a

            cmp BYTE PTR [RSP+27],2
            je .L_419170
.L_419134:

            mov R15D,6
.L_41913a:

            mov RBX,QWORD PTR [RSP+136]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_419356

            add RSP,152
.L_41915b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419170:

            lea RCX,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,11
            mov RDI,RBX
            call .L_430f70

            test EAX,EAX
            mov R15D,EAX
            jne .L_41913a

            cmp BYTE PTR [RSP+31],8
            jne .L_419134

            lea RAX,QWORD PTR [R12+16]
            lea R14,QWORD PTR [RSP+40]
            mov RDI,RAX
            mov RSI,R14
            mov QWORD PTR [RSP+8],RAX
            call .L_40f0c0

            cmp DWORD PTR [RBP+12],1
            je .L_41913a

            test BYTE PTR [RBP+56],2
            je .L_419278

            lea RDI,QWORD PTR [R13+2568]
            mov RDX,R12
            mov RSI,RBX
            call .L_421e70

            test EAX,EAX
            jne .L_4192e0
.L_4191d9:

            mov EAX,DWORD PTR [RBP+12]
            cmp EAX,2
            je .L_4192b0

            jb .L_41913a

            cmp EAX,4
            ja .L_41913a

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,R14
            call .L_41cf00

            test RAX,RAX
            je .L_41913a

            movzx EAX,BYTE PTR [RAX+26]
            and EAX,7
            cmp AL,7
            jne .L_41913a
.L_41921b:

            cmp BYTE PTR [RBP+10],0
            jne .L_419235

            movzx EAX,BYTE PTR [RSP+37]
            sub AL,BYTE PTR [R13+7785]
            test AL,AL
            jle .L_41913a
.L_419235:

            call .L_401460

            movzx R8D,AX
            mov EDX,274877907
            mov RSI,QWORD PTR [RSP+8]
            mov EAX,R8D
            mov ECX,1
            mov RDI,RBP
            mul EDX
            shr EDX,6
            imul EAX,EDX,1000
            lea RDX,QWORD PTR [RSP+135]
            sub R8D,EAX
            call .L_417940

            jmp .L_41913a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419278:

            mov RSI,R14
            mov RDI,RBP
            call .L_419040

            lea RDX,QWORD PTR [RBP+16]
            cmp RAX,RDX
            jne .L_4191d9

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,WORD PTR [RBP+40]
            je .L_4191d9

            mov RDI,RBP
            call .L_415e50

            jmp .L_4191d9
.L_4192b0:

            lea RDI,QWORD PTR [RBP+16]
            mov RSI,R14
            call .L_408390

            test AL,AL
            jne .L_41913a

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,WORD PTR [RBP+40]
            je .L_4192e8
.L_4192d3:

            call .L_401240

            mov DWORD PTR [RBP+24],EAX
            jmp .L_41921b
.L_4192e0:

            mov R15D,EAX
            jmp .L_41913a
.L_4192e8:

            mov EDX,DWORD PTR [RSP+32]
            cmp DWORD PTR [RBP+2],EDX
            movzx EAX,BYTE PTR [RSP+39]
            mov ESI,EDX
            bswap ESI
            jne .L_4192ff

            cmp AL,BYTE PTR [RBP+9]
            je .L_4192d3
.L_4192ff:

            movzx EDX,BYTE PTR [RSP+36]
            movzx ECX,AL
            mov RDI,RBP
            call .L_415ec0

            test BYTE PTR [RBP+56],2
            jne .L_41931b
.L_419315:

            mov BYTE PTR [RBP+10],1
            jmp .L_4192d3
.L_41931b:

            lea R12,QWORD PTR [RSP+48]
            mov EDX,74
            mov ESI,9
            mov RDI,RBX
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            jne .L_419315

            movzx EAX,BYTE PTR [RSP+49]
            sub EAX,9
            cmp AL,63
            ja .L_419315

            lea RDI,QWORD PTR [R13+2568]
            mov RSI,R12
            call .L_41ba80

            jmp .L_419315
.L_419356:

            call __stack_chk_fail@PLT
.L_41935b:

            nop
            nop
            nop
            nop
            nop
.L_419360:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_419378

            cmp EAX,2
            jne .L_4193b0

            jmp .L_419040
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419378:

            movzx EAX,BYTE PTR [RDI+42]
            movzx EDX,WORD PTR [RSI]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_41938e

            cmp AL,1
            jne .L_419398
.L_41938e:

            cmp DX,WORD PTR [RDI+40]
            lea RAX,QWORD PTR [RDI+16]
            je .L_4193b2
.L_419398:

            movzx EAX,BYTE PTR [RDI+230]
            and EAX,7
            cmp AL,7
            jne .L_4193b0

            cmp DX,WORD PTR [RDI+228]
            je .L_4193b8

            nop
.L_4193b0:

            xor EAX,EAX
.L_4193b2:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4193b8:

            lea RAX,QWORD PTR [RDI+204]
            ret 
.L_4193c0:

            movzx EDX,BYTE PTR [RDI+42]
            mov EAX,4294967294
            and EDX,7
            cmp DL,7
            jne .L_4193d5

            movzx EAX,WORD PTR [RDI+40]
.L_4193d5:

            ret 
.L_4193d7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4193e0:

            mov RCX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+496],RCX
            je .L_4193f0
.L_4193ec:

            xor EAX,EAX
            ret 
          .byte 0x90
.L_4193f0:

            mov EDX,DWORD PTR [RSI+8]
            cmp DWORD PTR [RDI+504],EDX
            jne .L_4193ec

            movzx EDX,WORD PTR [RSI+12]
            cmp WORD PTR [RDI+508],DX
            jne .L_4193ec

            movzx EDX,BYTE PTR [RSI+14]
            xor EAX,EAX
            cmp DL,251
            ja .L_41941d

            mov EAX,EDX
            shr AL,1
            xor EAX,1
            and EAX,1
.L_41941d:

            ret 
.L_41941f:

            nop
.L_419420:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,136
.L_419437:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_430af0

            mov QWORD PTR [RSP+24],RAX
            mov R15,RAX
            movzx EAX,WORD PTR [R13+58]
            lea RCX,QWORD PTR [RSP+62]
            mov EDX,2
            mov RDI,R13
            mov RSI,RCX
            mov QWORD PTR [RSP+40],RCX
            mov WORD PTR [RSP+38],AX
            mov EAX,19
            mov WORD PTR [RSP+62],AX
            call .L_403d30

            test EAX,EAX
            mov R14D,EAX
            jne .L_4195b8

            mov RAX,R15
            mov R15,QWORD PTR [R15+8]
            test R15,R15
            je .L_4196cd

            add RAX,7520
            lea RCX,QWORD PTR [RSP+64]
            xor EBP,EBP
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+96]
            xor R12D,R12D
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+16],RAX
            jmp .L_419534
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4194c8:

            mov RDX,QWORD PTR [RSP]
            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R15
            call .L_426230

            test EAX,EAX
            je .L_4195e8

            mov BYTE PTR [RSP+96],0
            mov EDX,17
            movdqu XMM0,XMMWORD PTR [R15]
            movups XMMWORD PTR [RSP+97],XMM0
.L_4194f5:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_4196b0

            movzx EAX,BYTE PTR [RSP+96]
            add EBP,1
            sar AL,7
            and EAX,4294967288
            cmp BPL,3
            lea R12D,DWORD PTR [R12+RAX*1+17]
            ja .L_4196c0
.L_419527:

            mov R15,QWORD PTR [R15+24]
            test R15,R15
            je .L_419620
.L_419534:

            mov RDI,R15
            call .L_40ee30

            test AL,AL
            jne .L_419527

            mov RSI,R15
            mov RDI,RBX
            call .L_4193e0

            test AL,AL
            jne .L_419527

            mov RCX,QWORD PTR [R15]
            cmp QWORD PTR [RBX+496],RCX
            jne .L_4194c8

            mov ECX,DWORD PTR [R15+8]
            cmp DWORD PTR [RBX+504],ECX
            jne .L_4194c8

            movzx ESI,WORD PTR [R15+12]
            cmp WORD PTR [RBX+508],SI
            jne .L_4194c8

            cmp BYTE PTR [R15+14],252
            jne .L_4194c8

            jmp .L_419527
.L_41958e:

            xor EDX,EDX
.L_419590:

            mov R14D,EAX
.L_419593:

            test R12B,R12B
            je .L_4195b8

            test DL,DL
            je .L_4195b8

            movzx ESI,WORD PTR [RSP+38]
            mov RCX,QWORD PTR [RSP+40]
            mov EDX,2
            mov RDI,R13
            mov BYTE PTR [RSP+63],R12B
            call .L_403ac0
.L_4195b8:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_4196eb

            add RSP,136
.L_4195d6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4195e8:

            movzx EAX,BYTE PTR [RSP+73]
            mov RDI,R15
            or EAX,4294967168
            mov BYTE PTR [RSP+96],AL
            call .L_40f080

            movsx EDX,BYTE PTR [RSP+96]
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RSP+97],RAX
            sar EDX,31
            and EDX,4294967288
            add EDX,17
            jmp .L_4194f5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419620:

            test BYTE PTR [RBX+56],8
            mov EDX,1
            jne .L_419593
.L_41962f:

            lea RAX,QWORD PTR [RSP+61]
            mov BYTE PTR [RSP+61],0
            lea RBX,QWORD PTR [RSP+80]
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP],RAX
            jmp .L_419692
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_419650:

            mov RSI,QWORD PTR [RSP]
            mov EDX,17
            mov RDI,R13
            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov BYTE PTR [RSP+96],0
            movups XMMWORD PTR [RSP+97],XMM0
            call .L_403d30

            test EAX,EAX
            jne .L_41958e

            movzx EDX,BYTE PTR [RSP+96]
            add EBP,1
            sar DL,7
            and EDX,4294967288
            cmp BPL,3
            lea R12D,DWORD PTR [R12+RDX*1+17]
            ja .L_4196e1
.L_419692:

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,RBX
            mov RSI,R15
            call .L_4103a0

            test EAX,EAX
            je .L_419650

            mov EDX,1
            jmp .L_419593
.L_4196b0:

            mov R14D,EAX
            jmp .L_4195b8
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4196c0:

            xor R14D,R14D
            mov EDX,1
            jmp .L_419593
.L_4196cd:

            test BYTE PTR [RBX+56],8
            jne .L_4195b8

            xor EBP,EBP
            xor R12D,R12D
            jmp .L_41962f
.L_4196e1:

            mov EDX,1
            jmp .L_419590
.L_4196eb:

            call __stack_chk_fail@PLT
.L_4196f0:

            push R14
            push R13
            lea R13,QWORD PTR [RDI+204]
            push R12
            push RBP
            mov ECX,3082
            push RBX
            mov RSI,R13
            mov RBX,RDI
            add RDI,16
            sub RSP,48
.L_419712:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+37],CX
            mov BYTE PTR [RSP+39],9
            call .L_408380

            test AL,AL
            je .L_419743

            cmp DWORD PTR [RBX+12],2
            je .L_419940

            and BYTE PTR [RBX+42],248
.L_419743:

            mov RDI,RBX
            mov EBP,3
            call .L_4161c0

            test RAX,RAX
            mov R12,RAX
            je .L_419776

            mov EDX,11
            mov RSI,RAX
            mov RDI,RBX
            call .L_416200

            test EAX,EAX
            mov EBP,EAX
            je .L_4197a0
.L_41976e:

            mov RDI,R12
            call .L_4033b0
.L_419776:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_41994a

            add RSP,48
.L_419790:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4197a0:

            movzx ECX,BYTE PTR [RBX+168]
            lea RDX,QWORD PTR [RBX+160]
            mov RSI,R12
            mov RDI,RBX
            call .L_416450

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov RSI,R12
            mov RDI,RBX
            call .L_4164c0

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov RSI,R12
            mov RDI,RBX
            call .L_416520

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            movzx EAX,BYTE PTR [RBX+56]
            lea R14,QWORD PTR [RSP+12]
            mov EDX,257
            mov WORD PTR [RSP+12],DX
            mov RDI,R12
            mov EDX,3
            mov RSI,R14
            mov BYTE PTR [RSP+14],AL
            call .L_403d30

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov EDX,DWORD PTR [RBX+320]
            mov RSI,R12
            mov RDI,RBX
            call .L_416390

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov EDX,4
            mov RSI,R14
            mov RDI,R12
            mov DWORD PTR [RSP+12],33554962
            call .L_403d30

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            test BYTE PTR [RBX+56],2
            jne .L_41994f

            mov RSI,R12
            mov RDI,RBX
            call .L_419420

            mov EBP,EAX
            mov EAX,2
            test EBP,EBP
            jne .L_41976e
.L_419873:

            lea RDX,QWORD PTR [RSP+37]
            movzx ECX,AL
            mov RSI,R12
            mov RDI,RBX
            call .L_416710

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov RSI,R12
            mov RDI,RBX
            call .L_416870

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            mov RSI,R12
            mov RDI,RBX
            call .L_416910

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            lea RDX,QWORD PTR [RSP+18]
            xor EAX,EAX
            mov ECX,14
            or BYTE PTR [RBX+230],7
            lea RBP,QWORD PTR [RSP+16]
            mov RSI,R13
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,RBP
            mov WORD PTR [RSP+16],33022
            call .L_40f0b0

            mov RDX,RBP
            mov RSI,R12
            mov RDI,RBX
            call .L_416d90

            test EAX,EAX
            mov EBP,EAX
            jne .L_41976e

            test BYTE PTR [RBX+56],8
            jne .L_419776

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2520]
            mov ESI,1
            call .L_412830

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2256]
            xor ESI,ESI
            call .L_43da10

            jmp .L_419776
          .byte 0x90
.L_419940:

            mov EBP,24
            jmp .L_419776
.L_41994a:

            call __stack_chk_fail@PLT
.L_41994f:

            mov EAX,3
            jmp .L_419873
.L_419959:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419960:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,72
.L_419971:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBX+188],3
            ja .L_419a40

            mov R12,RAX
            movzx EAX,BYTE PTR [RBX+42]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_4199b8

            cmp AL,1
            je .L_4199b8

            mov RDI,RBX
            call .L_415e50

            xor EAX,EAX
            jmp .L_419a15
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4199b8:

            call .L_401240

            lea RDI,QWORD PTR [RBX+120]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            add BYTE PTR [RBX+188],1
            mov RDI,RBX
            call .L_4161c0

            test RAX,RAX
            mov RBP,RAX
            je .L_419a58

            movzx EAX,BYTE PTR [RAX+78]
            mov EDX,13
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,32
            mov BYTE PTR [RBP+78],AL
            call .L_416200

            test EAX,EAX
            je .L_419a60
.L_419a05:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_419a15:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_419be6

            add RSP,72
.L_419a2d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419a40:

            mov BYTE PTR [RBX+188],0
            mov RDI,RBX
            call .L_415e50

            xor EAX,EAX
            jmp .L_419a15
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419a58:

            mov EAX,3
            jmp .L_419a15
          .byte 0x90
.L_419a60:

            movzx EAX,BYTE PTR [RBX+56]
            lea RSI,QWORD PTR [RSP+29]
            mov ECX,257
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+29],CX
            mov BYTE PTR [RSP+31],AL
            call .L_403d30

            test EAX,EAX
            jne .L_419a05

            test BYTE PTR [RBX+56],2
            je .L_419ab0
.L_419a92:

            cmp DWORD PTR [RBX+12],4
            ja .L_419b50

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_458ce0]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0x90
.L_419ab0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_419420

            test EAX,EAX
            jne .L_419a05

            jmp .L_419a92
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_419ac8:

            lea R15,QWORD PTR [RBX+169]
            lea R14,QWORD PTR [RBX+177]
            mov R13,R15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419ae0:

            add R13,1
            call .L_401460

            cmp R13,R14
            mov BYTE PTR [R13-1],AL
            jne .L_419ae0

            mov ECX,8
            mov RDX,R15
            mov RSI,RBP
            mov RDI,RBX
            call .L_4163e0

            test EAX,EAX
            jne .L_419a05

            jmp .L_419b50
          .byte 0x90
.L_419b10:

            mov RSI,RBP
            mov RDI,RBX
            call .L_416280

            test EAX,EAX
            jne .L_419a05

            mov RSI,RBP
            mov RDI,RBX
            call .L_4165e0

            test EAX,EAX
            jne .L_419a05

            mov EDX,DWORD PTR [RBX+320]
            mov RSI,RBP
            mov RDI,RBX
            call .L_416390

            test EAX,EAX
            jne .L_419a05

            nop
.L_419b50:

            lea R13,QWORD PTR [RSP+32]
            lea RSI,QWORD PTR [RBX+16]
            xor EAX,EAX
            mov EDX,4294934782
            mov WORD PTR [RSP+46],AX
            mov QWORD PTR [RSP+34],0
            mov RDI,R13
            mov WORD PTR [RSP+32],DX
            mov DWORD PTR [RSP+42],0
            call .L_40f0b0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_416d90

            test EAX,EAX
            jne .L_419a05

            test BYTE PTR [RBX+56],8
            lea RBP,QWORD PTR [R12+2256]
            mov DWORD PTR [RSP+12],EAX
            jne .L_419bd0

            lea RDI,QWORD PTR [R12+2520]
            mov ESI,1
            call .L_412830

            xor ESI,ESI
            mov RDI,RBP
            call .L_43da10

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_419a15
.L_419bd0:

            mov ESI,1
            mov RDI,RBP
            call .L_43da10

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_419a15
.L_419be6:

            call __stack_chk_fail@PLT
.L_419beb:

            lea RCX,QWORD PTR [RIP+.L_458e80]
            lea RSI,QWORD PTR [RIP+.L_458cb4]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1904
            call __assert_fail@PLT
.L_419c0a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_419c10:

            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov R12D,EDX
            mov RBX,RDI
            sub RSP,8
.L_419c23:

            call .L_430af0

            mov RDI,RAX
            mov RBP,RAX
            call .L_430ac0

            mov RDI,RAX
            call .L_4013b0

            test AL,AL
            mov EDX,13
            jne .L_419cce

            cmp BYTE PTR [RBP+8120],0
            je .L_419cce

            mov RDI,RBX
            mov DWORD PTR [RBX+12],1
            call .L_430b10

            mov ESI,4
            mov RDI,RAX
            call .L_402d30

            mov RDI,RBX
            call .L_415270

            lea RDI,QWORD PTR [RBP+1368]
            call .L_412d60

            test R13B,R13B
            je .L_419c8d

            mov DWORD PTR [RBX+64],1
.L_419c8d:

            test R12B,R12B
            jne .L_419ce0

            mov RDI,RBX
            call .L_430af0

            cmp WORD PTR [RAX+1664],-2
            je .L_419ce0

            mov RDI,RBX
            call .L_430af0

            test WORD PTR [RAX+1664],511
            jne .L_419d00

            lea RDI,QWORD PTR [RBP+2568]
            mov ESI,2
            call .L_41e920

            test EAX,EAX
            jne .L_419ce0

            xor EDX,EDX
.L_419cce:

            add RSP,8
.L_419cd2:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419ce0:

            mov RDI,RBX
            xor ESI,ESI
            call .L_415170

            add RSP,8
            xor EDX,EDX
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419d00:

            mov DWORD PTR [RBX+60],1
            mov BYTE PTR [RBX+188],0
            mov RDI,RBX
            call .L_419960

            xor EDX,EDX
            jmp .L_419cce
.L_419d1a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_419d20:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBP,RSI
            sub RSP,32
.L_419d32:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            xor ECX,ECX
            xor EDX,EDX
            mov R13,RAX
            mov WORD PTR [RSP+5],CX
            lea RCX,QWORD PTR [RSP+9]
            xor EAX,EAX
            mov WORD PTR [RSP+14],DX
            mov ESI,20
            mov EDX,5
            mov RDI,RBP
            mov WORD PTR [RSP+9],AX
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d88

            cmp BYTE PTR [RSP+10],3
            je .L_419db0
.L_419d83:

            mov EBX,6
.L_419d88:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_419eba

            add RSP,32
.L_419da2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419db0:

            lea R14,QWORD PTR [RSP+14]
            mov EDX,10
            mov ESI,22
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d88

            cmp BYTE PTR [RSP+15],8
            jne .L_419d83

            lea RCX,QWORD PTR [RSP+5]
            mov EDX,4
            mov ESI,21
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_419d88

            cmp BYTE PTR [RSP+6],2
            jne .L_419d83

            lea RDI,QWORD PTR [R13+1080]
            call .L_409510

            test RAX,RAX
            mov RBP,RAX
            je .L_419e22

            add R14,2
            mov RDI,RAX
            mov RSI,R14
            call .L_40d0d0

            test EAX,EAX
            jle .L_419e8b
.L_419e22:

            xor ESI,ESI
            mov RDI,R12
            add R13,1560
            call .L_415330

            movzx EAX,BYTE PTR [R13+108]
            movzx ESI,WORD PTR [RSP+12]
            mov BYTE PTR [R12+363],AL
            movzx EAX,WORD PTR [R13+106]
            rol SI,8
            mov RDI,R13
            movzx ESI,SIL
            mov WORD PTR [R12+364],AX
            call .L_405ba0

            movzx ESI,WORD PTR [RSP+7]
            mov RDI,R13
            rol SI,8
            movzx ESI,SI
            call .L_405a50

            mov EDX,1
            xor ESI,ESI
            mov RDI,R12
            call .L_419c10

            jmp .L_419d88
.L_419e8b:

            mov RSI,R14
            mov RDI,RBP
            call .L_40d0d0

            test EAX,EAX
            jns .L_419d88

            movzx ESI,WORD PTR [RSP+12]
            xor EDX,EDX
            mov RDI,R12
            rol SI,8
            movzx ESI,SIL
            call .L_417080

            jmp .L_419d88
.L_419eba:

            call __stack_chk_fail@PLT
.L_419ebf:

            nop
.L_419ec0:

            cmp DWORD PTR [RDI+320],ESI
            je .L_419f00

            cmp ESI,5
            mov EAX,5
            push RBX
            cmovb ESI,EAX
            mov RBX,RDI
            mov DWORD PTR [RDI+320],ESI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2520]
            call .L_412810

            cmp DWORD PTR [RBX+12],2
            je .L_419f08

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419f00:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419f08:

            mov RDI,RBX
            call .L_419960

            xor EAX,EAX
            pop RBX
            ret 
.L_419f14:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419f20:

            mov EAX,ESI
            and EAX,10
            cmp AL,2
            je .L_419f80

            movzx EAX,BYTE PTR [RDI+56]
            cmp AL,SIL
            je .L_419f90

            push RBX
            mov EDX,DWORD PTR [RDI+12]
            mov RBX,RDI
            mov BYTE PTR [RDI+56],SIL
            cmp EDX,2
            je .L_419f60

            jb .L_419f52

            cmp EDX,4
            ja .L_419f52

            test AL,2
            je .L_419f52

            and ESI,2
            je .L_419f98
.L_419f52:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419f60:

            call .L_430af0

            movzx ESI,WORD PTR [RAX+1664]
            mov RDI,RBX
            call .L_415d40

            mov RDI,RBX
            call .L_419960

            xor EAX,EAX
            pop RBX
            ret 
.L_419f80:

            mov EAX,7
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419f90:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_419f98:

            call .L_415e50

            xor EAX,EAX
            pop RBX
            ret 
.L_419fa1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_419fb0:

            push R12
            push RBP
            push RBX
.L_419fb4:

            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RBX+60],5
            ja .L_41a032

            mov RBP,RAX
            mov EAX,DWORD PTR [RBX+60]
            lea RDX,QWORD PTR [RIP+.L_458cf4]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_419fe0:

            movzx EAX,BYTE PTR [RBX+230]
            and EAX,7
            cmp AL,3
            je .L_41a0a9
.L_419ff2:

            pxor XMM0,XMM0
            mov EAX,DWORD PTR [RBX+64]
            mov DWORD PTR [RBX+60],0
            mov QWORD PTR [RBX+236],0
            movups XMMWORD PTR [RBX+220],XMM0
            and BYTE PTR [RBX+230],248
            cmp EAX,2
            movups XMMWORD PTR [RBX+204],XMM0
            je .L_41a040

            cmp EAX,3
            je .L_41a148
.L_41a02e:

            test EAX,EAX
            je .L_41a05e
.L_41a032:

            pop RBX
.L_41a033:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a040:

            lea R12,QWORD PTR [RBP+1208]
            mov RDI,R12
            call .L_409630

            test EAX,EAX
            je .L_41a200

            mov DWORD PTR [RBX+64],0
.L_41a05e:

            mov EAX,DWORD PTR [RBX+180]
            cmp EAX,1
            je .L_41a138

            jb .L_41a168

            cmp EAX,2
            jne .L_41a032

            xor ESI,ESI
.L_41a07a:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_415170
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a090:

            movzx EAX,BYTE PTR [RBX+230]
            mov DWORD PTR [RBX+60],4
            and EAX,7
            cmp AL,3
            jne .L_41a125
.L_41a0a9:

            cmp DWORD PTR [RBX+12],2
            jne .L_41a0c8

            cmp BYTE PTR [RBX+201],0
            jne .L_41a0c8

            cmp DWORD PTR [RBX+180],3
            jne .L_419ff2

            nop
            nop
            nop
.L_41a0c8:

            mov RDI,RBX
            call .L_4196f0

            test EAX,EAX
            jne .L_419ff2

            mov DWORD PTR [RBX+60],5
            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov EDX,1250
            mov ESI,EAX
            pop RBX
.L_41a0f0:

            pop RBP
            pop R12
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a100:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_419960
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a110:

            and BYTE PTR [RBX+230],248
            mov DWORD PTR [RBX+60],3
            mov BYTE PTR [RBX+201],0
.L_41a125:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_417620
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a138:

            mov ESI,2
            jmp .L_41a07a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a148:

            lea RDI,QWORD PTR [RBP+1080]
            mov DWORD PTR [RBX+64],0
            call .L_409630

            mov EAX,DWORD PTR [RBX+64]
            jmp .L_41a02e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a168:

            cmp DWORD PTR [RBX+12],2
            je .L_41a1b0

            cmp WORD PTR [RBX+364],-1
            jne .L_41a238

            test BYTE PTR [RBX+56],2
            je .L_41a26e

            lea RDI,QWORD PTR [RBP+2568]
            call .L_4211a0

            test EAX,EAX
            je .L_41a032
.L_41a19a:

            mov RDI,RBX
            pop RBX
.L_41a19e:

            pop RBP
            pop R12
            jmp .L_415e50
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a1b0:

            test BYTE PTR [RBX+56],8
            jne .L_41a032

            lea RBX,QWORD PTR [RBP+2256]
            lea RDI,QWORD PTR [RBP+2520]
            xor ESI,ESI
            call .L_412830

            mov RDI,RBX
            xor ESI,ESI
            pop RBX
            pop RBP
            pop R12
            jmp .L_43da10
.L_41a1dd:

            lea RCX,QWORD PTR [RIP+.L_458f00]
            lea RSI,QWORD PTR [RIP+.L_458cb4]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1456
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a200:

            mov RDI,R12
            call .L_4096e0

            mov DWORD PTR [RBX+64],3
            mov DWORD PTR [RBX+60],2
            call .L_401240

            lea RDI,QWORD PTR [RBX+72]
            mov ESI,EAX
            mov EDX,750
            call .L_430d50

            mov EAX,DWORD PTR [RBX+64]
            jmp .L_41a02e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a238:

            movzx ESI,BYTE PTR [RBX+363]
            add RBP,1560
            mov RDI,RBP
            call .L_405ba0

            movzx ESI,WORD PTR [RBX+364]
            mov RDI,RBP
            call .L_405a50

            mov EAX,4294967295
            mov WORD PTR [RBX+364],AX
            jmp .L_41a19a
.L_41a26e:

            mov RDI,RBX
            call .L_417250

            jmp .L_41a19a
.L_41a27b:

            nop
            nop
            nop
            nop
            nop
.L_41a280:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a10

            add RSP,8
            mov RDI,RAX
            jmp .L_419fb0
.L_41a29d:

            nop
            nop
            nop
.L_41a2a0:

            push RBX
            mov RBX,RDI
            call .L_430b10

            mov EAX,DWORD PTR [RAX]
            test EAX,EAX
            jne .L_41a2c0

            mov RDI,RBX
            pop RBX
            jmp .L_419960
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a2c0:

            lea RDI,QWORD PTR [RBX+328]
            pop RBX
            jmp .L_404bc0
.L_41a2cd:

            nop
            nop
            nop
.L_41a2d0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a10

            add RSP,8
            mov RDI,RAX
            jmp .L_41a2a0
.L_41a2ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41a2f0:

            jmp .L_419960
.L_41a2f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a300:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a10

            add RSP,8
            mov RDI,RAX
            jmp .L_419960
.L_41a31d:

            nop
            nop
            nop
.L_41a320:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RSI
            sub RSP,56
.L_41a33a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_4161c0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_41a380

            mov EDX,14
            mov RSI,RBP
            mov RDI,R12
            call .L_416200

            test EAX,EAX
            je .L_41a3a8
.L_41a370:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41a380:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41a500

            add RSP,56
.L_41a398:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a3a8:

            mov RSI,RBP
            mov RDI,R12
            call .L_416280

            test EAX,EAX
            jne .L_41a370

            mov RSI,RBP
            mov RDI,R12
            call .L_4165e0

            test EAX,EAX
            jne .L_41a370

            test R14B,R14B
            je .L_41a411

            movzx R14D,R14B
            lea R15,QWORD PTR [RIP+.L_458d0c]
            lea EAX,DWORD PTR [R14-1]
            lea R14,QWORD PTR [RBX+RAX*1+1]
            nop
.L_41a3e0:

            cmp BYTE PTR [RBX],19
            ja .L_41a408

            movzx EAX,BYTE PTR [RBX]
            movsxd RAX,DWORD PTR [R15+RAX*4]
            add RAX,R15
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a3f8:

            test BYTE PTR [R12+56],2
            je .L_41a4e8

            nop
            nop
            nop
            nop
.L_41a408:

            add RBX,1
            cmp RBX,R14
            jne .L_41a3e0
.L_41a411:

            lea RBX,QWORD PTR [RSP+16]
            xor EAX,EAX
            lea RSI,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+18],0
            mov EDX,4294934782
            mov WORD PTR [RBX+14],AX
            mov DWORD PTR [RBX+10],0
            mov RDI,RBX
            mov WORD PTR [RSP+16],DX
            call .L_40f0b0

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_416d90

            test EAX,EAX
            je .L_41a380

            jmp .L_41a370
          .byte 0x66
          .byte 0x90
.L_41a460:

            mov EDX,DWORD PTR [R12+320]
            mov RSI,RBP
            mov RDI,R12
            call .L_416390

            test EAX,EAX
            je .L_41a408

            jmp .L_41a370
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41a480:

            mov RSI,RBP
            mov RDI,R12
            call .L_416520

            test EAX,EAX
            je .L_41a408

            jmp .L_41a370
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a4a0:

            mov RSI,RBP
            mov RDI,R12
            call .L_4164c0

            test EAX,EAX
            je .L_41a408

            jmp .L_41a370
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a4c0:

            movzx ECX,BYTE PTR [R13+1]
            lea RDX,QWORD PTR [R13+2]
            mov RSI,RBP
            mov RDI,R12
            call .L_416450

            test EAX,EAX
            je .L_41a408

            jmp .L_41a370
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a4e8:

            mov RSI,RBP
            mov RDI,R12
            call .L_419420

            test EAX,EAX
            je .L_41a408

            jmp .L_41a370
.L_41a500:

            call __stack_chk_fail@PLT
.L_41a505:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a510:

            push R14
            push R13
            xor ECX,ECX
            push R12
            push RBP
            mov R13,RDX
            push RBX
            xor EDX,EDX
            mov RBP,RSI
            xor ESI,ESI
            mov R12,RDI
            mov RDI,RBP
            sub RSP,48
.L_41a52e:

            mov WORD PTR [RSP],CX
            lea RCX,QWORD PTR [RSP+3]
            mov WORD PTR [RSP+15],DX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+25],SI
            xor EAX,EAX
            xor ESI,ESI
            mov EDX,4
            mov WORD PTR [RSP+3],AX
            mov DWORD PTR [RSP+35],0
            mov BYTE PTR [RSP+39],0
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_41a598

            cmp BYTE PTR [RSP+4],2
            jne .L_41a5c0

            movzx EAX,WORD PTR [RSP+5]
            rol AX,8
            cmp AX,WORD PTR [R12+40]
            je .L_41a5d0
.L_41a58f:

            mov EBX,2
            nop
            nop
            nop
            nop
.L_41a598:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_41a712

            add RSP,48
.L_41a5b2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41a5c0:

            mov EBX,6
            jmp .L_41a598
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41a5d0:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R12
            call .L_417a50

            test EAX,EAX
            mov EBX,EAX
            jne .L_41a598

            mov RCX,RSP
            mov EDX,3
            mov ESI,17
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov EBX,EAX
            jne .L_41a637

            cmp BYTE PTR [RSP+1],1
            jne .L_41a5c0

            lea R14,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [R13+16]
            mov RSI,R14
            call .L_40f0c0

            lea RDI,QWORD PTR [R12+16]
            mov RSI,R14
            call .L_408380

            test AL,AL
            je .L_41a58f

            cmp BYTE PTR [RSP+2],1
            je .L_41a705
.L_41a637:

            lea RBX,QWORD PTR [RSP+25]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_41a6fd

            movzx R13D,BYTE PTR [RSP+26]
            cmp R13B,5
            ja .L_41a5c0

            lea RSI,QWORD PTR [RBX+2]
            lea RDI,QWORD PTR [RSP+35]
            movzx EDX,R13B
            mov ECX,5
            call __memcpy_chk@PLT
.L_41a680:

            lea R14,QWORD PTR [RSP+15]
            mov EDX,10
            mov ESI,3
            mov RDI,RBP
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_41a6e2

            movzx EAX,BYTE PTR [RSP+16]
            sub EAX,4
            cmp AL,4
            ja .L_41a5c0

            cmp R13B,2
            movzx EAX,R13B
            mov EBX,3
            ja .L_41a598

            mov BYTE PTR [RSP+RAX*1+35],4
            lea EDX,DWORD PTR [R13+1]
            lea EAX,DWORD PTR [R13+2]
            add R13D,3
            movzx EDX,DL
            movzx EAX,AL
            mov BYTE PTR [RSP+RDX*1+35],8
            mov BYTE PTR [RSP+RAX*1+35],5
.L_41a6e2:

            lea RSI,QWORD PTR [RSP+35]
            movzx EDX,R13B
            mov RCX,R14
            mov RDI,R12
            call .L_41a320

            mov EBX,EAX
            jmp .L_41a598
.L_41a6fd:

            xor R13D,R13D
            jmp .L_41a680
.L_41a705:

            mov RDI,R12
            call .L_415e50

            jmp .L_41a598
.L_41a712:

            call __stack_chk_fail@PLT
.L_41a717:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41a720:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R12,RDI
            sub RSP,568
.L_41a73a:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
.L_41a752:

            call .L_430af0

            mov RDI,RBX
            mov R14,RAX
            call .L_431ad0

            cmp QWORD PTR [RBP+40],0
            je .L_41a76f

            cmp BYTE PTR [RBP+37],255
            je .L_41a7a0
.L_41a76f:

            mov RDI,RBX
            call .L_431b00
.L_41a777:

            mov RAX,QWORD PTR [RSP+552]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41ab4f

            add RSP,568
.L_41a795:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_41a7a0:

            movzx ESI,WORD PTR [R13+60]
            lea R15,QWORD PTR [RSP+60]
            mov EDX,12
            mov RDI,R13
            mov RCX,R15
.L_41a7b5:

            call .L_403860

            movzx EDX,BYTE PTR [RSP+60]
            cmp DL,255
            je .L_41aac0

            test DL,DL
            jne .L_41a76f

            cmp BYTE PTR [RSP+61],21
            jne .L_41a76f

            cmp AX,11
            jbe .L_41a76f

            lea RAX,QWORD PTR [R14+2568]
            mov QWORD PTR [RSP+8],RAX
            mov EAX,DWORD PTR [R12+12]
            test EAX,EAX
            je .L_41a76f

            mov EAX,DWORD PTR [RSP+66]
            bswap EAX
            cmp EAX,DWORD PTR [R14+1384]
            mov DWORD PTR [RSP+32],EAX
            jne .L_41ab10

            lea RAX,QWORD PTR [R14+1388]
            mov EDX,12
            mov QWORD PTR [RSP+16],RAX
            movzx EAX,WORD PTR [R13+60]
.L_41a81b:

            movzx ECX,WORD PTR [R13+58]
            add EAX,EDX
            cdqe 
            add RAX,4
            cmp RAX,RCX
            ja .L_41a76f

            lea ESI,DWORD PTR [RDX-1]
            mov RDI,R13
            call .L_4034e0

            movzx EAX,WORD PTR [R13+58]
            lea RCX,QWORD PTR [RSP+459]
            mov EDX,4
            mov RDI,R13
            lea ESI,DWORD PTR [RAX-4]
            movzx ESI,SI
            call .L_403860

            movzx EAX,WORD PTR [R13+58]
            mov RDI,R13
            lea ESI,DWORD PTR [RAX-4]
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            jne .L_41a76f

            lea RAX,QWORD PTR [RSP+72]
            lea RDI,QWORD PTR [RBP+16]
            mov RSI,RAX
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP+24],RAX
            call .L_40f0c0

            mov ECX,DWORD PTR [RSP+62]
            mov RAX,QWORD PTR [RSP+72]
            mov EDX,16
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+479],5
            mov QWORD PTR [RSP+467],RAX
            mov EAX,ECX
            mov DWORD PTR [RSP+36],ECX
            shr EAX,24
            mov BYTE PTR [RSP+477],CH
            mov BYTE PTR [RSP+478],CL
            mov BYTE PTR [RSP+475],AL
            mov EAX,ECX
            shr EAX,16
            mov BYTE PTR [RSP+476],AL
            call .L_4313e0

            movzx EDX,WORD PTR [R13+58]
            movzx EAX,WORD PTR [R13+60]
            lea R8,QWORD PTR [RSP+467]
            mov R9D,13
            mov ECX,4
            mov ESI,42
            mov RDI,RBX
            sub EDX,EAX
            call .L_431400

            test EAX,EAX
            jne .L_41a76f

            mov RSI,QWORD PTR [RSP+40]
            mov EDX,16
            mov RDI,RBX
            call .L_4316d0

            mov EDX,16
            mov RSI,RBP
            mov RDI,RBX
            call .L_4316d0

            lea RSI,QWORD PTR [R15+1]
            mov EDX,10
            mov RDI,RBX
            call .L_4316d0

            movzx EAX,WORD PTR [R13+60]
            lea R15,QWORD PTR [RSP+480]
            mov WORD PTR [RSP+40],AX
            jmp .L_41a9b4
.L_41a962:

            movzx ESI,AX
            mov RCX,R15
            mov EDX,64
            mov RDI,R13
            call .L_403860

            movzx EAX,AX
            xor R8D,R8D
            mov RDX,R15
            mov ECX,EAX
            mov RSI,R15
            mov RDI,RBX
            mov DWORD PTR [RSP+16],EAX
            call .L_4317e0

            movzx ESI,WORD PTR [R13+60]
            mov EDX,DWORD PTR [RSP+16]
            mov RCX,R15
            mov RDI,R13
            call .L_403ac0

            mov ESI,DWORD PTR [RSP+16]
            mov RDI,R13
            call .L_4034e0

            movzx EAX,WORD PTR [R13+60]
.L_41a9b4:

            cmp WORD PTR [R13+58],AX
            ja .L_41a962

            lea RDX,QWORD PTR [RSP+58]
            lea RSI,QWORD PTR [RSP+463]
            mov RDI,RBX
            mov BYTE PTR [RSP+58],4
            call .L_431a20

            mov EAX,DWORD PTR [RSP+459]
            cmp DWORD PTR [RSP+463],EAX
            jne .L_41a76f

            mov EAX,DWORD PTR [RSP+32]
            cmp EAX,DWORD PTR [R14+1384]
            jbe .L_41aa06

            mov ESI,DWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R14+1368]
            call .L_412d70
.L_41aa06:

            movzx ESI,WORD PTR [RSP+40]
            mov RDI,R13
            call .L_403550

            movzx ESI,WORD PTR [R13+60]
            lea RCX,QWORD PTR [RSP+59]
            mov EDX,1
            mov RDI,R13
            call .L_403860

            mov ESI,1
            mov RDI,R13
            call .L_4034e0

            mov EAX,DWORD PTR [R12+12]
            cmp EAX,1
            jb .L_41aa7e

            cmp EAX,2
            jbe .L_41ab54

            cmp EAX,4
            ja .L_41aa7e

            cmp BYTE PTR [RSP+59],12
            mov RSI,QWORD PTR [RSP+24]
            je .L_41ab79

            mov RDI,QWORD PTR [RSP+8]
            call .L_41cf00
.L_41aa69:

            test RAX,RAX
            je .L_41aa7e

            movzx EDX,BYTE PTR [RAX+26]
            and EDX,7
            cmp DL,7
            je .L_41ab86
.L_41aa7e:

            movzx EAX,BYTE PTR [RSP+59]
            cmp AL,15
            ja .L_41a76f

            mov EDX,60951
            bt RDX,RAX
            jae .L_41a76f
.L_41aa9a:

            cmp BYTE PTR [RSP+59],15
            ja .L_41a76f

            movzx EAX,BYTE PTR [RSP+59]
            lea RDX,QWORD PTR [RIP+.L_458d5c]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41aac0:

            cmp AX,1
            jbe .L_41a76f

            mov ESI,2
            mov RDI,R13
            add R14,2568
            call .L_4034e0

            cmp BYTE PTR [RSP+60],255
            movzx EAX,BYTE PTR [RSP+61]
            je .L_41aaef

            movzx EAX,BYTE PTR [RSP+71]
.L_41aaef:

            cmp EAX,16
            je .L_41ab3c

            cmp EAX,17
            jne .L_41a76f

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_418b60

            jmp .L_41a76f
.L_41ab10:

            mov ESI,DWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R14+1368]
            call .L_412c40

            cmp BYTE PTR [RSP+60],1
            mov QWORD PTR [RSP+16],RAX
            movzx EAX,WORD PTR [R13+60]
            sbb EDX,EDX
            and EDX,10
            add EDX,2
            jmp .L_41a81b
.L_41ab3c:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R14
            call .L_41c6b0

            jmp .L_41a76f
.L_41ab4f:

            call __stack_chk_fail@PLT
.L_41ab54:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,R12
            call .L_419040
.L_41ab61:

            jmp .L_41aa69
.L_41ab66:

            mov RBP,RAX
            mov RDI,RBX
            call .L_431b00

            mov RDI,RBP
.L_41ab74:

            call _Unwind_Resume@PLT
.L_41ab79:

            mov RDI,R12
.L_41ab7c:

            call .L_419040

            jmp .L_41aa69
.L_41ab86:

            mov ECX,DWORD PTR [RSP+32]
            cmp ECX,DWORD PTR [RAX+20]
            je .L_41abc5

            jbe .L_41a76f

            mov ECX,DWORD PTR [RSP+32]
            mov DWORD PTR [RAX+12],0
            mov DWORD PTR [RAX+20],ECX
.L_41aba3:

            mov EDX,DWORD PTR [RSP+36]
            add EDX,1
            mov DWORD PTR [RAX+16],EDX
            jmp .L_41aa9a
.L_41abb2:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_419d20

            jmp .L_41a76f
.L_41abc5:

            mov ECX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RAX+16],ECX
            jbe .L_41aba3

            jmp .L_41a76f
.L_41abd3:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41ac13

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_418840

            jmp .L_41a76f
.L_41abf3:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41ac2c

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_41a510

            jmp .L_41a76f
.L_41ac13:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_4232d0

            jmp .L_41a76f
.L_41ac2c:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_422f80

            jmp .L_41a76f
.L_41ac45:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_4184a0

            jmp .L_41a76f
.L_41ac58:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_423940

            jmp .L_41a76f
.L_41ac71:

            mov ECX,DWORD PTR [RSP+32]
            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_417ef0

            jmp .L_41a76f
.L_41ac88:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_41f7f0

            jmp .L_41a76f
.L_41ac9d:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_417a50

            jmp .L_41a76f
.L_41acb0:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_41d4b0

            jmp .L_41a76f
.L_41acc5:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_4190c0

            jmp .L_41a76f
.L_41acd8:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_421e60

            jmp .L_41a76f
.L_41acf1:

            mov ECX,DWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_421e50

            jmp .L_41a76f
.L_41ad0a:

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,RBP
            mov RSI,R13
            call .L_421340
.L_41ad1a:

            jmp .L_41a76f
.L_41ad1f:

            nop
.L_41ad20:

            jmp .L_41a720
.L_41ad25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ad30:

            mov RDX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+496],RDX
            je .L_41ad40
.L_41ad3c:

            xor EAX,EAX
            ret 
          .byte 0x90
.L_41ad40:

            mov ECX,DWORD PTR [RSI+8]
            cmp DWORD PTR [RDI+504],ECX
            jne .L_41ad3c

            movzx ECX,WORD PTR [RSI+12]
            cmp WORD PTR [RDI+508],CX
            jne .L_41ad3c

            cmp BYTE PTR [RSI+14],252
            sete AL
            ret 
.L_41ad60:

            mov RAX,RSI
            lea RSI,QWORD PTR [RDI+496]
            sub RSP,8
            mov RDI,RAX
            call .L_40f240

            cmp AL,63
            seta AL
            add RSP,8
            ret 
.L_41ad80:

            lea RAX,QWORD PTR [RDI+16]
            ret 
.L_41ad85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ad90:

            movzx EDX,BYTE PTR [RDI+230]
            lea RAX,QWORD PTR [RDI+204]
            add RDI,16
            and EDX,7
            cmp DL,7
            cmovne RAX,RDI
            ret 
.L_41adad:

            nop
            nop
            nop
.L_41adb0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov R12,RCX
            mov RBX,RDI
            sub RSP,72
.L_41adca:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov RDI,RBX
            mov RBP,RAX
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_430af0

            cmp R15W,WORD PTR [RAX+1664]
            je .L_41ae30
.L_41ae06:

            xor EAX,EAX
.L_41ae08:

            mov RDX,QWORD PTR [RSP+56]
            xor RDX,QWORD PTR FS:[40]
            jne .L_41ae8c

            add RSP,72
.L_41ae1c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ae30:

            lea RSI,QWORD PTR [R12+24]
            mov RDI,RBP
            call .L_410860

            test AL,AL
            jne .L_41ae06

            movdqu XMM0,XMMWORD PTR [RBX+496]
            rol R13W,8
            mov RDI,RBP
            mov R14,RSP
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+30],R13W
            movzx EAX,BYTE PTR [RBP+24]
            mov BYTE PTR [RSP+36],AL
            call .L_430ad0

            lea RDI,QWORD PTR [RAX+88]
            mov R8,R12
            mov RCX,R14
            xor EDX,EDX
            mov ESI,1
            call .L_43abb0

            mov EAX,2
            jmp .L_41ae08
.L_41ae8c:

            call __stack_chk_fail@PLT
.L_41ae91:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41aea0:

            ret 
.L_41aea2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41aeb0:

            ret 
.L_41aeb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41aec0:

            push RBX
            lea RBX,QWORD PTR [RDI+592]
            mov RDI,RBX
            call .L_4311a0

            test AL,AL
            je .L_41aee0

            mov RDI,RBX
            pop RBX
            jmp .L_4312c0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41aee0:

            mov RDI,RBX
            xor ECX,ECX
            mov EDX,32000
            mov ESI,1000
            call .L_431240

            mov RDI,RBX
            pop RBX
            jmp .L_4312c0
.L_41aefd:

            nop
            nop
            nop
.L_41af00:

            mov EDX,DWORD PTR [RDI+2]
            mov ECX,DWORD PTR [RSI+2]
            xor EAX,EAX
            bswap EDX
            bswap ECX
            cmp EDX,ECX
            je .L_41af1a

            cmp ECX,EDX
            sbb EAX,EAX
            and EAX,2
            sub EAX,1
.L_41af1a:

            ret 
.L_41af1c:

            nop
            nop
            nop
            nop
.L_41af20:

            xor R9D,R9D
            xor EAX,EAX
            mov R8D,128
            jmp .L_41af3d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41af30:

            mov R9D,1
.L_41af36:

            add EAX,1
            cmp AL,63
            je .L_41af68
.L_41af3d:

            mov EDX,EAX
            mov ECX,EAX
            shr DL,3
            and ECX,7
            and EDX,31
            movzx ESI,BYTE PTR [RDI+RDX*1+3]
            mov EDX,R8D
            sar EDX,CL
            test ESI,EDX
            je .L_41af36

            cmp R9B,1
            jne .L_41af30

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41af68:

            mov EAX,1
            ret 
.L_41af6e:

            nop
            nop
.L_41af70:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_41af7b:

            mov RBX,RSI
            lea R13,QWORD PTR [R12+752]
            lea RBP,QWORD PTR [R12+3300]
            call .L_415650

            lea RDI,QWORD PTR [R12+592]
            lea RDX,QWORD PTR [RIP+.L_420470]
            mov RSI,RBX
            mov R8,R12
            xor ECX,ECX
            lea RBX,QWORD PTR [R12+780]
            call .L_431160

            lea RAX,QWORD PTR [RIP+.L_422b00]
            mov DWORD PTR [R12+664],0
            mov QWORD PTR [R12+696],R12
            mov QWORD PTR [R12+704],0
            mov QWORD PTR [R12+728],R12
            mov QWORD PTR [R12+656],RAX
            lea RAX,QWORD PTR [R12+656]
            mov QWORD PTR [R12+736],0
            mov BYTE PTR [R12+744],0
            mov DWORD PTR [R12+748],0
            mov QWORD PTR [R12+672],RAX
            lea RAX,QWORD PTR [RIP+.L_458f2f]
            mov QWORD PTR [R12+680],RAX
            lea RAX,QWORD PTR [RIP+.L_41f030]
            mov QWORD PTR [R12+688],RAX
            lea RAX,QWORD PTR [RIP+.L_458f34]
            mov QWORD PTR [R12+712],RAX
            lea RAX,QWORD PTR [RIP+.L_41f1a0]
            mov QWORD PTR [R12+720],RAX
            nop
            nop
            nop
            nop
            nop
.L_41b060:

            mov RDI,RBX
            add RBX,40
            call .L_413060

            cmp RBX,RBP
            jne .L_41b060

            lea RBP,QWORD PTR [R12+3280]
            lea RBX,QWORD PTR [R12+3308]
            lea R14,QWORD PTR [R12+4668]
            mov BYTE PTR [R12+3272],10
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b098:

            mov RDI,RBX
            add RBX,136
            call .L_413060

            cmp RBX,R14
            jne .L_41b098

            movabs RAX,70467804725759
            lea RDI,QWORD PTR [RBP+8]
            mov EDX,120
            mov QWORD PTR [R12+4658],RAX
            xor EAX,EAX
            mov QWORD PTR [R12+4640],0
            mov WORD PTR [R12+4666],AX
            movzx EAX,BYTE PTR [R12+4668]
            and RDI,-8
            mov BYTE PTR [R12+4648],0
            mov DWORD PTR [R12+4672],0
            mov WORD PTR [R12+4676],DX
            mov BYTE PTR [R12+4678],254
            or BYTE PTR [R12+56],3
            mov QWORD PTR [R12+3280],0
            or EAX,1
            and EAX,4294967293
            mov BYTE PTR [R12+4668],AL
            xor EAX,EAX
            mov QWORD PTR [RBP+1352],0
            sub RBP,RDI
            lea ECX,DWORD PTR [RBP+1360]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [R13+8]
            mov QWORD PTR [R12+752],0
            mov QWORD PTR [R13+2512],0
            and RDI,-8
            sub R13,RDI
            lea ECX,DWORD PTR [R13+2520]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,16191
            mov WORD PTR [R12+4669],CX
            pop RBX
.L_41b18c:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41b194:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b1a0:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+10688]
            mov RBX,RAX
            call .L_411180

            add RSP,8
            lea RDI,QWORD PTR [RBX+216]
            mov RDX,RBP
            pop RBX
            pop RBP
            lea RSI,QWORD PTR [RIP+.L_424370]
            jmp .L_42da70
.L_41b1d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b1e0:

            movzx EAX,BYTE PTR [RDI+4668]
            and EAX,1
            je .L_41b1f5

            movzx EAX,BYTE PTR [RDI+56]
            shr AL,1
            and EAX,1
.L_41b1f5:

            ret 
.L_41b1f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b200:

            movzx EAX,BYTE PTR [RDI+4668]
            mov EDX,ESI
            and EDX,1
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RDI+4668],AL
            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,2
            je .L_41b230

            jb .L_41b22b

            cmp EAX,4
            ja .L_41b260

            test SIL,SIL
            je .L_41b268
.L_41b22b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41b230:

            push RBX
            mov RBX,RDI
            call .L_430af0

            movzx EDX,BYTE PTR [RBX+4668]
            mov ECX,EDX
            movzx EDX,BYTE PTR [RAX+1564]
            shl ECX,7
            and EDX,127
            or EDX,ECX
            mov BYTE PTR [RAX+1564],DL
            pop RBX
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b260:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b268:

            jmp .L_415e50
.L_41b26d:

            nop
            nop
            nop
.L_41b270:

            cmp SIL,62
            push R12
            push RBP
            push RBX
.L_41b278:

            ja .L_41b2dd

            movzx EAX,SIL
            mov EBX,ESI
            mov RBP,RDI
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RSI,QWORD PTR [RDI+RAX*8+784]
            mov EAX,63
            movzx EDX,BYTE PTR [RSI+5]
            test DL,64
            jne .L_41b2d8

            movzx EAX,BL
            or EDX,64
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov BYTE PTR [RSI+5],DL
            lea R12,QWORD PTR [RDI+RAX*8+752]
            call .L_401240

            mov QWORD PTR [R12],0
            mov DWORD PTR [R12+8],EAX
            add BYTE PTR [RBP+744],1
            call .L_401240

            mov DWORD PTR [RBP+748],EAX
            mov EAX,EBX
.L_41b2d8:

            pop RBX
.L_41b2d9:

            pop RBP
            pop R12
            ret 
.L_41b2dd:

            lea RCX,QWORD PTR [RIP+.L_4595a0]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458f4f]
            mov EDX,184
            call __assert_fail@PLT
.L_41b2fc:

            nop
            nop
            nop
            nop
.L_41b300:

            push RBP
            push RBX
            xor EAX,EAX
            xor ECX,ECX
            xor EBP,EBP
            sub RSP,8
.L_41b30c:

            jmp .L_41b31b
          .byte 0x66
          .byte 0x90
.L_41b310:

            add EAX,1
            add ECX,1
            cmp EAX,63
            je .L_41b341
.L_41b31b:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            test DL,64
            jne .L_41b310

            shr DL,7
            cmp DL,1
            adc BPL,0
            add EAX,1
            cmp EAX,63
            jne .L_41b31b
.L_41b341:

            cmp CL,31
            ja .L_41b3a0

            test BPL,BPL
            je .L_41b3a0

            mov RBX,RDI
            movzx EBP,BPL
            call .L_401460

            movzx EAX,AL
            xor ESI,ESI
            cdq 
            idiv EBP
            jmp .L_41b373
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b368:

            sub EDX,1
.L_41b36b:

            add ESI,1
            cmp ESI,63
            je .L_41b3a0
.L_41b373:

            movsxd RAX,ESI
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            test AL,64
            jne .L_41b36b

            test AL,AL
            js .L_41b36b

            test DL,DL
            jne .L_41b368

            add RSP,8
.L_41b392:

            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_41b270
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b3a0:

            add RSP,8
            mov EAX,63
            pop RBX
            pop RBP
            ret 
.L_41b3ac:

            nop
            nop
            nop
            nop
.L_41b3b0:

            push R14
            push R13
            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            mov EBX,ESI
            sub RSP,16
.L_41b3c4:

            call .L_430af0

            cmp R12B,62
            mov R13,RAX
            mov EAX,7
            ja .L_41b496

            cmp DWORD PTR [RBP+12],4
            mov EAX,13
            jne .L_41b496

            movzx EAX,R12B
            mov R14,RAX
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RDX,QWORD PTR [RBP+RAX*8]
            movzx EAX,BYTE PTR [RDX+789]
            and EAX,4294967231
            or EAX,4294967168
            mov BYTE PTR [RDX+789],AL
            movzx EAX,R12B
            lea RAX,QWORD PTR [RAX+RAX*4]
            and BYTE PTR [RBP+RAX*8+778],248
            mov BYTE PTR [RDX+788],63
            lea RDX,QWORD PTR [RBP+788]
            xor EAX,EAX
            nop
            nop
            nop
.L_41b430:

            cmp BL,BYTE PTR [RDX]
            jne .L_41b446

            movsxd RCX,EAX
            mov BYTE PTR [RDX],63
            lea RCX,QWORD PTR [RCX+RCX*4]
            and BYTE PTR [RBP+RCX*8+789],195
.L_41b446:

            add RAX,1
            add RDX,40
            cmp RAX,63
            jne .L_41b430

            add BYTE PTR [RBP+744],1
            shl R12D,10
            call .L_401240

            lea RDI,QWORD PTR [R13+10688]
            mov DWORD PTR [RBP+748],EAX
            mov ESI,R14D
            call .L_411220

            lea RDI,QWORD PTR [R13+7520]
            movzx ESI,R12W
            call .L_429030

            mov EAX,DWORD PTR [RBP+12]
            lea EDX,DWORD PTR [RAX-3]
            xor EAX,EAX
            cmp EDX,1
            jbe .L_41b4a3
.L_41b496:

            add RSP,16
.L_41b49a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41b4a3:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41aec0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41b496
.L_41b4b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b4c0:

            push RBX
            mov RBX,RDI
            call .L_401240

            sub EAX,DWORD PTR [RBX+748]
            mov EDX,274877907
            pop RBX
            mul EDX
            mov EAX,EDX
            shr EAX,6
            ret 
.L_41b4dd:

            nop
            nop
            nop
.L_41b4e0:

            push R12
            push RBP
            push RBX
.L_41b4e4:

            mov RBX,RDI
            call .L_430af0

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+680]
            mov RBP,RAX
            mov RDI,R12
            call .L_42d730

            lea RSI,QWORD PTR [RBX+712]
            mov RDI,R12
            call .L_42d730

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40afe0

            lea RDI,QWORD PTR [RBP+1208]
            call .L_40b060

            lea RDI,QWORD PTR [RBX+592]
            call .L_4311b0

            lea RDI,QWORD PTR [RBP+7520]
            call .L_4275c0

            mov RDI,RBP
            call .L_410250

            mov RDI,RBX
            pop RBX
.L_41b550:

            pop RBP
            pop R12
            jmp .L_41b1a0
.L_41b558:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b560:

            push RBX
            xor EAX,EAX
            mov RBX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b570:

            movsxd RDX,EAX
            add EAX,1
            lea RDX,QWORD PTR [RDX+RDX*4]
            and BYTE PTR [RBX+RDX*8+778],248
            cmp EAX,63
            jne .L_41b570

            mov RDI,RBX
            call .L_41b4e0

            lea RDI,QWORD PTR [RBX+656]
            call .L_430c70

            xor EAX,EAX
            pop RBX
            ret 
.L_41b59f:

            nop
.L_41b5a0:

            add RDI,592
            jmp .L_4311b0
.L_41b5ac:

            nop
            nop
            nop
            nop
.L_41b5b0:

            mov EAX,DWORD PTR [RDI+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41b5c0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41b5c0:

            jmp .L_41aec0
.L_41b5c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b5d0:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_41b5e8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_4161c0

            test RAX,RAX
            je .L_41b680

            xor EDX,EDX
            mov RSI,RAX
            mov RDI,RBP
            mov RBX,RAX
            call .L_416200

            test EAX,EAX
            je .L_41b650
.L_41b61b:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41b62b:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41b850

            add RSP,56
.L_41b643:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41b650:

            mov RSI,RBX
            mov RDI,RBP
            call .L_416820

            test EAX,EAX
            jne .L_41b61b

            cmp DWORD PTR [RBP+12],4
            ja .L_41b6f0

            mov EAX,DWORD PTR [RBP+12]
            lea RDX,QWORD PTR [RIP+.L_459140]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b680:

            mov EAX,3
            jmp .L_41b62b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b690:

            test R12,R12
            je .L_41b6a6

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            cmp AL,7
            je .L_41b83f
.L_41b6a6:

            lea RDX,QWORD PTR [RIP+.L_4595dd]
            mov ECX,1
.L_41b6b2:

            mov RSI,RBX
            mov RDI,RBP
            call .L_416710

            test EAX,EAX
            jne .L_41b61b
.L_41b6c5:

            mov RSI,RBX
            mov RDI,RBP
            call .L_416280

            test EAX,EAX
            jne .L_41b61b

            mov RSI,RBX
            mov RDI,RBP
            call .L_4165e0

            test EAX,EAX
            jne .L_41b61b

            nop
            nop
            nop
            nop
            nop
.L_41b6f0:

            test R12,R12
            je .L_41b7a8

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            cmp AL,7
            je .L_41b810

            mov RDI,R12
            call .L_42bc00

            lea RDX,QWORD PTR [R12+12]
            mov ECX,8
.L_41b71c:

            mov RSI,RBX
            mov RDI,RBP
            call .L_4163e0

            test EAX,EAX
            jne .L_41b61b

            lea R13,QWORD PTR [RSP+16]
            mov EAX,4294934782
            mov RSI,R12
            mov WORD PTR [RSP+16],AX
            mov RDI,R13
            call .L_40f0b0
.L_41b749:

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_416d90

            test EAX,EAX
            jne .L_41b61b

            lea RSI,QWORD PTR [RIP+.L_458f5e]
            mov RDX,R13
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41b62b
          .byte 0x66
          .byte 0x90
.L_41b780:

            lea RDX,QWORD PTR [RIP+.L_4595de]
            mov ECX,2
            mov RSI,RBX
            mov RDI,RBP
            call .L_416710

            test EAX,EAX
            jne .L_41b61b

            jmp .L_41b6f0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b7a8:

            lea R14,QWORD PTR [RBP+4649]
            lea R13,QWORD PTR [RBP+4657]
            mov R12,R14
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b7c0:

            add R12,1
            call .L_401460

            cmp R12,R13
            mov BYTE PTR [R12-1],AL
            jne .L_41b7c0

            mov BYTE PTR [RBP+4648],2
            mov ECX,8
            mov RDX,R14
            mov RSI,RBX
            mov RDI,RBP
            call .L_4163e0

            test EAX,EAX
            jne .L_41b61b

            mov EDX,767
            mov BYTE PTR [RSP+31],2
            lea R13,QWORD PTR [RSP+16]
            mov WORD PTR [RSP+16],DX
            jmp .L_41b749
          .byte 0x66
          .byte 0x90
.L_41b810:

            lea R15,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [R15+8]
            mov R13,R15
            nop
            nop
            nop
            nop
.L_41b820:

            add R13,1
            call .L_401460

            cmp R13,R14
            mov BYTE PTR [R13-1],AL
            jne .L_41b820

            mov ECX,8
            mov RDX,R15
            jmp .L_41b71c
.L_41b83f:

            mov ECX,2
            lea RDX,QWORD PTR [RIP+.L_4595db]
            jmp .L_41b6b2
.L_41b850:

            call __stack_chk_fail@PLT
.L_41b855:

            lea RCX,QWORD PTR [RIP+.L_4594c0]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,625
            call __assert_fail@PLT
.L_41b874:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b880:

            movzx EAX,BYTE PTR [RDI+3272]
            test EAX,EAX
            je .L_41b8c2

            test BYTE PTR [RDI+3306],7
            je .L_41b8d8

            xor ECX,ECX
            jmp .L_41b8bb
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41b8a0:

            movsxd RSI,ECX
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            shl RDX,3
            test BYTE PTR [RDI+RDX*1+3306],7
            je .L_41b8c8
.L_41b8bb:

            add ECX,1
            cmp ECX,EAX
            jne .L_41b8a0
.L_41b8c2:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41b8c8:

            add RDX,3280
.L_41b8cf:

            lea RAX,QWORD PTR [RDI+RDX*1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b8d8:

            mov EDX,3280
            jmp .L_41b8cf
.L_41b8df:

            nop
.L_41b8e0:

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41b93a

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41b900:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            test BYTE PTR [RDI+RAX*8+3306],7
            je .L_41b92b

            movzx R8D,WORD PTR [RCX+24]
            mov RAX,RCX
            and R8W,511
            cmp SI,R8W
            je .L_41b93c
.L_41b92b:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            jne .L_41b900
.L_41b93a:

            xor EAX,EAX
.L_41b93c:

            ret 
.L_41b93e:

            nop
            nop
.L_41b940:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41b948:

            cmp BYTE PTR [RDI+3272],0
            je .L_41b9c0

            mov RBP,RSI
            mov R13,RDI
            xor EBX,EBX
            lea R12,QWORD PTR [RDI+3280]
            jmp .L_41b97b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41b968:

            movzx EDX,BYTE PTR [R13+3272]
            lea EAX,DWORD PTR [RBX+1]
            add RBX,1
            cmp EDX,EAX
            jle .L_41b9c0
.L_41b97b:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            test BYTE PTR [R13+RAX*8+3306],7
            je .L_41b968

            mov RAX,RBX
            mov RSI,RBP
            shl RAX,4
            add RAX,RBX
            lea R14,QWORD PTR [R12+RAX*8]
            mov RDI,R14
            call .L_408380

            test AL,AL
            je .L_41b968

            pop RBX
.L_41b9b1:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41b9c0:

            xor R14D,R14D
            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41b9cf:

            nop
.L_41b9d0:

            sub EDI,1
            mov EAX,16
            cmp DIL,2
            ja .L_41b9ed

            lea RAX,QWORD PTR [RIP+.L_459230]
            movzx EDI,DIL
            movzx EAX,BYTE PTR [RAX+RDI*1]
.L_41b9ed:

            ret 
.L_41b9ef:

            nop
.L_41b9f0:

            cmp SIL,62
            movzx EDX,SIL
            mov EAX,16
            ja .L_41ba59

            cmp BYTE PTR [RDI+4669],SIL
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx ECX,SIL
            lea R8,QWORD PTR [RDI+RDX*8+752]
            je .L_41ba59

            movzx EDX,BYTE PTR [R8+26]
            and EDX,7
            cmp DL,7
            jne .L_41ba59

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            mov ECX,EDX
            movzx EDX,BYTE PTR [R8+30]
            and ECX,3
            cmp DL,CL
            cmova EDX,ECX
            sub EDX,1
            cmp DL,2
            ja .L_41ba59

            lea RAX,QWORD PTR [RIP+.L_459230]
            movzx EDX,DL
            movzx EAX,BYTE PTR [RAX+RDX*1]
.L_41ba59:

            ret 
.L_41ba5b:

            nop
            nop
            nop
            nop
            nop
.L_41ba60:

            test SIL,SIL
            mov EAX,7
            je .L_41ba73

            mov BYTE PTR [RDI+4676],SIL
            xor EAX,EAX
.L_41ba73:

            ret 
.L_41ba75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ba80:

            push R13
            push R12
            mov R13D,128
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            xor EBX,EBX
            sub RSP,8
.L_41ba98:

            movzx EAX,BYTE PTR [RSI+2]
            mov BYTE PTR [RDI+744],AL
            call .L_401240

            mov DWORD PTR [RBP+748],EAX
            jmp .L_41baba
          .byte 0x90
.L_41bab0:

            add RBX,1
            cmp RBX,63
            je .L_41bb30
.L_41baba:

            movsxd RAX,EBX
            mov ECX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            and ECX,7
            lea RSI,QWORD PTR [RBP+RAX*8+784]
            mov EAX,EBX
            shr AL,3
            and EAX,31
            movzx EDX,BYTE PTR [RSI+5]
            movzx EDI,BYTE PTR [R12+RAX*1+3]
            mov EAX,R13D
            sar EAX,CL
            test EDI,EAX
            mov EAX,EDX
            setne CL
            and EAX,4294967231
            mov EDI,ECX
            shl EDI,6
            or EAX,EDI
            and EDX,64
            mov BYTE PTR [RSI+5],AL
            je .L_41bab0

            test CL,CL
            jne .L_41bab0

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RDI,RBP
            mov BYTE PTR [RBP+RAX*8+788],63
            call .L_430af0

            lea RDI,QWORD PTR [RAX+10688]
            mov ESI,EBX
            add RBX,1
            call .L_411220

            cmp RBX,63
            jne .L_41baba

            nop
            nop
.L_41bb30:

            xor EAX,EAX
            cmp DWORD PTR [RBP+12],3
            je .L_41bb43
.L_41bb38:

            add RSP,8
.L_41bb3c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_41bb43:

            movzx EDX,BYTE PTR [RBP+4669]
            lea RDX,QWORD PTR [RDX+RDX*4]
            test BYTE PTR [RBP+RDX*8+789],64
            jne .L_41bb38

            mov RDI,RBP
            call .L_415e50

            mov EAX,4
            jmp .L_41bb38
.L_41bb67:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41bb70:

            push RBX
            mov RBX,RDI
            call .L_415260

            test AL,AL
            je .L_41bbb8

            test BYTE PTR [RBX+56],2
            je .L_41bbaf

            movzx ESI,BYTE PTR [RBX+4669]
            xor EDX,EDX
            jmp .L_41bb98
          .byte 0x66
          .byte 0x90
.L_41bb90:

            add EDX,1
            cmp EDX,63
            je .L_41bbaf
.L_41bb98:

            cmp ESI,EDX
            je .L_41bb90

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            test BYTE PTR [RBX+RCX*8+789],64
            je .L_41bb90

            xor EAX,EAX
.L_41bbaf:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41bbb8:

            mov EAX,1
            pop RBX
            ret 
.L_41bbbf:

            nop
.L_41bbc0:

            cmp DIL,DL
            mov RAX,RSI
            je .L_41bbd8

            cmp DL,1
            sbb EAX,EAX
            or EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41bbd8:

            movzx EDX,BYTE PTR [RSI+6]
            movzx ESI,BYTE PTR [RCX+6]
            cmp DL,SIL
            je .L_41bbf8

            cmp SIL,DL
            sbb EAX,EAX
            and EAX,2
            sub EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41bbf8:

            mov RSI,RCX
            mov RDI,RAX
            jmp .L_41af00
.L_41bc03:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41bc10:

            xor ECX,ECX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_41bc18:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            shr DL,6
            and EDX,1
            cmp DL,1
            sbb AL,255
            add ECX,1
            cmp ECX,63
            jne .L_41bc18

            ret 
.L_41bc3c:

            nop
            nop
            nop
            nop
.L_41bc40:

            xor EDX,EDX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_41bc48:

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            movzx ECX,BYTE PTR [RDI+RCX*8+778]
            and ECX,7
            cmp CL,7
            sete CL
            add EDX,1
            add EAX,ECX
            cmp EDX,63
            jne .L_41bc48

            ret 
.L_41bc6c:

            nop
            nop
            nop
            nop
.L_41bc70:

            movzx EAX,BYTE PTR [RDI+1]
            sub EAX,9
            cmp AL,63
            jbe .L_41bc80

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x90
.L_41bc80:

            jmp .L_41af20
.L_41bc85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41bc90:

            movzx EAX,DL
            push R15
            push R14
            mov R11,RAX
            lea RAX,QWORD PTR [RAX+RAX*4]
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            mov R8,RSI
            sub RSP,40
.L_41bcb6:

            mov QWORD PTR [RSP+8],RAX
            movzx EAX,DL
            lea RAX,QWORD PTR [RAX+RAX*4]
            shl RAX,3
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_41bcd0:

            xor EBX,EBX
            xor ESI,ESI
            mov BYTE PTR [RSP+29],0
            jmp .L_41bddb
          .byte 0x66
          .byte 0x90
.L_41bce0:

            lea R13,QWORD PTR [RBX+RBX*4]
            shl R13,3
            movzx R15D,BYTE PTR [R12+R13*1+788]
            lea R9,QWORD PTR [R12+R13*1+752]
            cmp R15B,62
            seta R10B
            cmp R11B,R15B
            sete DIL
            or EDI,R10D
            cmp R11B,BL
            je .L_41beef

            movzx EBP,BYTE PTR [R8+RSI*1+11]
            mov ESI,16
            and EBP,15
            cmove EBP,ESI
            test DIL,DIL
            je .L_41bf00

            cmp R11B,62
            movzx EAX,BPL
            mov ESI,16
            ja .L_41bd5e

            cmp CL,R11B
            je .L_41bd5e

            mov RDI,QWORD PTR [RSP+8]
            movzx EDI,BYTE PTR [RDI+26]
            mov ECX,EDI
            mov BYTE PTR [RSP+30],DIL
            and ECX,7
            cmp CL,7
            je .L_41bf90
.L_41bd5e:

            add EAX,ESI
            cmp EAX,16
            jg .L_41be70

            cmp R15B,62
            jbe .L_41bd90

            movzx EAX,BYTE PTR [R9+26]
            and EAX,7
            cmp AL,7
            je .L_41c020
.L_41bd7f:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41c070
.L_41bd90:

            lea RAX,QWORD PTR [R14+R14*4]
            and EBP,15
            mov BYTE PTR [R12+R13*1+788],R11B
            lea RCX,QWORD PTR [R12+RAX*8+784]
            lea EAX,DWORD PTR [RBP*4]
            movzx EBP,BYTE PTR [RCX+5]
            and EBP,4294967235
            or EBP,EAX
            mov BYTE PTR [RCX+5],BPL
            cmp BYTE PTR [R12+R13*1+788],R15B
            setne AL
            or BYTE PTR [RSP+29],AL
.L_41bdca:

            movzx ESI,DL
.L_41bdcd:

            add RBX,1
            cmp RBX,63
            je .L_41c0a0
.L_41bddb:

            mov EDX,EBX
            mov ECX,EBX
            mov EAX,EBX
            shr DL,3
            and ECX,7
            and EDX,31
            movzx EDI,BYTE PTR [R8+RDX*1+3]
            mov EDX,128
            sar EDX,CL
            test EDI,EDX
            je .L_41bdcd

            movsxd RDX,EBX
            movsxd R14,EBX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDI,BYTE PTR [R12+RDX*8+789]
            lea EDX,DWORD PTR [RSI+1]
            shr DIL,6
            and EDI,1
            je .L_41bdca

            movzx ECX,BYTE PTR [R12+4669]
            cmp CL,BL
            jne .L_41bce0

            movzx EAX,BYTE PTR [R8+RSI*1+11]
            mov RSI,QWORD PTR [RSP]
            lea RSI,QWORD PTR [R12+RSI*1+784]
            sar EAX,4
            movzx ECX,BYTE PTR [RSI+5]
            and EAX,3
            mov R9D,ECX
            and R9D,3
            cmp AL,R9B
            je .L_41bdca

            and ECX,4294967292
            mov BYTE PTR [RSP+29],DIL
            or EAX,ECX
            mov BYTE PTR [RSI+5],AL
            jmp .L_41bdca
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41be70:

            cmp R11B,R15B
            jne .L_41bdca

            movzx EAX,BYTE PTR [R9+26]
            and EAX,7
            cmp AL,7
            je .L_41c110
.L_41be89:

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41c160
.L_41be9a:

            lea RAX,QWORD PTR [R14+R14*4]
            mov BYTE PTR [R12+R13*1+788],63
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            and BYTE PTR [R12+RAX*8+789],195
            call .L_401240

            cmp BYTE PTR [R12+R13*1+788],R15B
            mov DWORD PTR [R12+R13*1+760],EAX
            movzx EDX,BYTE PTR [RSP+30]
            mov R8,QWORD PTR [RSP+16]
            movzx R11D,BYTE PTR [RSP+31]
            setne AL
            or BYTE PTR [RSP+29],AL
            jmp .L_41bdca
.L_41beef:

            xor EBP,EBP
            test DIL,DIL
            jne .L_41bdca

            nop
            nop
            nop
            nop
            nop
            nop
.L_41bf00:

            lea RSI,QWORD PTR [R14+R14*4]
            movzx ESI,BYTE PTR [R12+RSI*8+789]
            mov BYTE PTR [RSP+30],16
            shr SIL,2
            and ESI,15
            cmp CL,R15B
            je .L_41bf44

            movzx EDI,R15B
            movzx R10D,R15B
            lea RDI,QWORD PTR [RDI+RDI*4]
            lea R9,QWORD PTR [R12+RDI*8+752]
            movzx EDI,BYTE PTR [R9+26]
            and EDI,7
            cmp DIL,7
            je .L_41bfd8
.L_41bf44:

            add SIL,BYTE PTR [RSP+30]
            cmp R11B,62
            mov EDI,16
            ja .L_41bf72

            cmp CL,R11B
            je .L_41bf72

            mov RCX,QWORD PTR [RSP+8]
            movzx ECX,BYTE PTR [RCX+26]
            mov BYTE PTR [RSP+30],CL
            and ECX,7
            cmp CL,7
            je .L_41c0c0
.L_41bf72:

            add EDI,EBP
            cmp SIL,DIL
            jbe .L_41bdca

            cmp R11B,AL
            jne .L_41bd90

            jmp .L_41bdca
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41bf90:

            mov RDI,QWORD PTR [RSP]
            mov R10,QWORD PTR [RSP+8]
            movzx EDI,BYTE PTR [R12+RDI*1+789]
            movzx ECX,BYTE PTR [R10+30]
            mov BYTE PTR [RSP+30],DIL
            and EDI,3
            cmp CL,DIL
            cmova ECX,EDI
            sub ECX,1
            cmp CL,2
            ja .L_41bd5e

            lea RSI,QWORD PTR [RIP+.L_459230]
            movzx ECX,CL
            movzx ESI,BYTE PTR [RSI+RCX*1]
            jmp .L_41bd5e
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41bfd8:

            lea RDI,QWORD PTR [R10+R10*4]
            movzx R10D,BYTE PTR [R12+RDI*8+789]
            movzx EDI,BYTE PTR [R9+30]
            and R10D,3
            cmp DIL,R10B
            cmova EDI,R10D
            sub EDI,1
            cmp DIL,2
            ja .L_41bf44

            lea R9,QWORD PTR [RIP+.L_459230]
            movzx EDI,DIL
            movzx EDI,BYTE PTR [R9+RDI*1]
            mov BYTE PTR [RSP+30],DIL
            jmp .L_41bf44
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41c020:

            lea RAX,QWORD PTR [R14+R14*4]
            movzx EAX,BYTE PTR [R12+RAX*8+789]
            and EAX,3
            mov ECX,EAX
            movzx EAX,BYTE PTR [R12+R13*1+782]
            cmp AL,CL
            cmova EAX,ECX
            sub EAX,1
            cmp AL,2
            ja .L_41bd7f

            lea RCX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            cmp BYTE PTR [RCX+RAX*1],15
            jbe .L_41bd90

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41bd90
.L_41c070:

            mov RDI,R12
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            call .L_41aec0

            movzx R11D,BYTE PTR [RSP+31]
            mov R8,QWORD PTR [RSP+16]
            movzx EDX,BYTE PTR [RSP+30]
            jmp .L_41bd90
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41c0a0:

            cmp BYTE PTR [RSP+29],0
            jne .L_41bcd0

            add RSP,40
.L_41c0af:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41c0c0:

            mov RCX,QWORD PTR [RSP]
            mov R10,QWORD PTR [RSP+8]
            movzx ECX,BYTE PTR [R12+RCX*1+789]
            mov R9D,ECX
            mov BYTE PTR [RSP+30],CL
            movzx ECX,BYTE PTR [R10+30]
            and R9D,3
            cmp CL,R9B
            cmova ECX,R9D
            sub ECX,1
            cmp CL,2
            ja .L_41bf72

            lea RDI,QWORD PTR [RIP+.L_459230]
            movzx ECX,CL
            movzx EDI,BYTE PTR [RDI+RCX*1]
            jmp .L_41bf72
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c110:

            lea RAX,QWORD PTR [R14+R14*4]
            movzx EAX,BYTE PTR [R12+RAX*8+789]
            and EAX,3
            mov ECX,EAX
            movzx EAX,BYTE PTR [R12+R13*1+782]
            cmp AL,CL
            cmova EAX,ECX
            sub EAX,1
            cmp AL,2
            ja .L_41be89

            lea RCX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            cmp BYTE PTR [RCX+RAX*1],15
            jbe .L_41be9a

            mov EAX,DWORD PTR [R12+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41be9a
.L_41c160:

            mov RDI,R12
            mov BYTE PTR [RSP+31],R11B
            mov QWORD PTR [RSP+16],R8
            mov BYTE PTR [RSP+30],DL
            call .L_41aec0

            movzx R11D,BYTE PTR [RSP+31]
            mov R8,QWORD PTR [RSP+16]
            movzx EDX,BYTE PTR [RSP+30]
            jmp .L_41be9a
.L_41c18b:

            nop
            nop
            nop
            nop
            nop
.L_41c190:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            movzx R12D,DX
            mov RBX,RDI
            mov EBP,EDX
            mov RDI,R14
            sub RSP,136
.L_41c1b3:

            mov EDX,2
            lea RCX,QWORD PTR [RSP+62]
            mov QWORD PTR [RSP+8],RSI
            mov ESI,R12D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+62],AX
            call .L_403860

            cmp AX,2
            jne .L_41c370

            movzx EAX,WORD PTR [R14+58]
            movzx ECX,BYTE PTR [RSP+63]
            sub EAX,R12D
            cdqe 
            sub RAX,2
            cmp RCX,RAX
            ja .L_41c370

            add EBP,2
            mov RDI,R13
            lea R15D,DWORD PTR [RCX+RBP*1]
            mov WORD PTR [RSP+30],R15W
            call .L_42bc30

            lea RAX,QWORD PTR [RSP+96]
            cmp BP,R15W
            mov QWORD PTR [RSP+16],RAX
            jae .L_41c369

            lea RCX,QWORD PTR [RSP+64]
            lea RAX,QWORD PTR [RSP+97]
            lea R12,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+32],RCX
            mov QWORD PTR [RSP+40],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c250:

            mov RCX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            movzx R15D,BP
            mov EDX,1
            mov ESI,R15D
            call .L_403860

            cmp AX,1
            jne .L_41c370

            movsx R8W,BYTE PTR [RSP+96]
            movsx EDX,BYTE PTR [RSP+96]
            mov ESI,R15D
            mov RCX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            sar R8W,15
            sar EDX,31
            mov R14D,R8D
            and EDX,4294967288
            and R14D,4294967288
            add EDX,17
            add R14D,17
            call .L_403860

            cmp AX,R14W
            jne .L_41c370

            add EBP,EAX
            cmp BYTE PTR [RSP+96],0
            js .L_41c3a0

            movdqu XMM0,XMMWORD PTR [RSP+97]
            movaps XMMWORD PTR [RSP+80],XMM0
.L_41c2ce:

            mov RDI,RBX
            call .L_430ac0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R13
            call .L_42bd60

            mov RDI,R12
            call .L_40ee50

            test AL,AL
            jne .L_41c35e

            cmp BYTE PTR [RBX+3272],0
            je .L_41c35e

            lea R14,QWORD PTR [RBX+3280]
            xor R15D,R15D
            nop
            nop
            nop
            nop
            nop
.L_41c308:

            movsxd RDX,R15D
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41c32c

            cmp AL,1
            jne .L_41c347
.L_41c32c:

            cmp R13,R14
            je .L_41c347

            mov RDI,RBX
            call .L_430ac0

            mov RDX,R12
            mov RSI,RAX
            mov RDI,R14
            call .L_42be60
.L_41c347:

            movzx EAX,BYTE PTR [RBX+3272]
            add R15D,1
            add R14,136
            cmp EAX,R15D
            jg .L_41c308
.L_41c35e:

            cmp WORD PTR [RSP+30],BP
            ja .L_41c250
.L_41c369:

            xor EAX,EAX
            jmp .L_41c375
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41c370:

            mov EAX,6
.L_41c375:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41c3f3

            add RSP,136
.L_41c38c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c3a0:

            mov RDI,RBX
            call .L_430af0

            movzx ESI,BYTE PTR [RSP+96]
            mov RDX,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [RAX+7520]
            and ESI,15
            call .L_426390

            movzx EDX,BYTE PTR [RSP+72]
            mov RSI,QWORD PTR [RSP+64]
            mov RDI,R12
            mov ECX,16
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            call __memcpy_chk@PLT

            mov RSI,QWORD PTR [RSP+40]
            mov RDI,R12
            call .L_40f0a0

            jmp .L_41c2ce
.L_41c3f3:

            call __stack_chk_fail@PLT
.L_41c3f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c400:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,104
.L_41c417:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDI,EDI
            xor ESI,ESI
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            mov WORD PTR [RSP+46],DI
            mov RDI,RBP
            mov R12,RAX
            mov WORD PTR [RSP+44],SI
            mov WORD PTR [RSP+54],R8W
            mov WORD PTR [RSP+64],R9W
            mov WORD PTR [RSP+50],R10W
            call .L_4161c0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41c4a3

            movzx EAX,BYTE PTR [RBX+78]
            mov WORD PTR [RBX+76],R14W
            mov EDX,17
            mov RSI,RBX
            mov RDI,RBP
            and EAX,4294967235
            or EAX,12
            mov BYTE PTR [RBX+78],AL
            call .L_416200

            test EAX,EAX
            je .L_41c4d0
.L_41c493:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
.L_41c4a3:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41c6a4

            add RSP,104
.L_41c4bb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c4d0:

            lea R14,QWORD PTR [RSP+44]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+44],26
            mov RSI,R14
            call .L_403d30

            test EAX,EAX
            jne .L_41c493

            test BYTE PTR [R12+1548],64
            movzx R15D,WORD PTR [RBX+58]
            mov DWORD PTR [RSP+46],2097793
            je .L_41c50b

            mov BYTE PTR [RSP+48],40
.L_41c50b:

            lea RSI,QWORD PTR [RSP+46]
            mov EDX,4
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_41c493

            mov RAX,QWORD PTR [R12+1686]
            lea RSI,QWORD PTR [RSP+54]
            mov ECX,2050
            mov EDX,10
            mov RDI,RBX
            mov WORD PTR [RSP+54],CX
            mov QWORD PTR [RSP+56],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_41c493

            lea R10,QWORD PTR [R12+1669]
            mov EDX,4099
            mov ESI,16
            mov WORD PTR [RSP+64],DX
            mov RDI,R10
            mov QWORD PTR [RSP+24],R10
            call strnlen@PLT

            mov R10,QWORD PTR [RSP+24]
            lea R9,QWORD PTR [RSP+64]
            lea RDI,QWORD PTR [RSP+66]
            mov ECX,16
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            mov QWORD PTR [RSP+16],R9
            mov RSI,R10
            call __memcpy_chk@PLT

            mov R8,QWORD PTR [RSP+8]
            mov R9,QWORD PTR [RSP+16]
            mov RDI,RBX
            mov BYTE PTR [RSP+65],R8B
            movzx R8D,R8B
            mov RSI,R9
            lea EDX,DWORD PTR [R8+2]
            call .L_403d30

            test EAX,EAX
            jne .L_41c493

            lea RDI,QWORD PTR [R12+7520]
            mov ESI,8
            call .L_426c80

            test RAX,RAX
            je .L_41c5fe

            movzx EDX,BYTE PTR [RAX+1]
            mov RSI,RAX
            mov RDI,RBX
            add EDX,2
            call .L_403d30

            test EAX,EAX
            jne .L_41c493
.L_41c5fe:

            lea RDI,QWORD PTR [R12+10368]
            mov EAX,530
            mov WORD PTR [RSP+50],AX
            call .L_40bb90

            rol AX,8
            lea RSI,QWORD PTR [RSP+50]
            mov RDI,RBX
            mov WORD PTR [RSP+52],AX
            movzx EAX,BYTE PTR [RSP+51]
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            test EAX,EAX
            jne .L_41c493

            movzx EAX,BYTE PTR [RBX+58]
            lea ESI,DWORD PTR [R15-2]
            mov RCX,R14
            mov EDX,2
            mov RDI,RBX
            movzx ESI,SI
            sub EAX,R15D
            mov BYTE PTR [RSP+45],AL
            call .L_403ac0

            call .L_401460

            movzx EAX,AX
            mov ESI,251
            mov RDI,RBP
            cdq 
            idiv ESI
            mov RSI,RBX
            mov ECX,EDX
            mov RDX,R13
            call .L_417880

            test EAX,EAX
            jne .L_41c493

            lea RSI,QWORD PTR [RIP+.L_458f70]
            mov RDX,R13
            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_41c4a3
.L_41c6a4:

            call __stack_chk_fail@PLT
.L_41c6a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c6b0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            add R14,16
            sub RSP,72
.L_41c6cb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            xor ESI,ESI
            xor EDX,EDX
            xor ECX,ECX
            mov WORD PTR [RSP+46],SI
            lea RSI,QWORD PTR [RIP+.L_458f89]
            mov WORD PTR [RSP+40],DX
            mov R15,RAX
            mov RDX,R14
            xor EAX,EAX
            mov RDI,R13
            mov WORD PTR [RSP+38],AX
            mov WORD PTR [RSP+42],CX
            call .L_41aea0

            test BYTE PTR [R13+56],2
            mov EAX,13
            je .L_41c840

            lea RDX,QWORD PTR [RSP+36]
            mov ESI,26
            mov RDI,RBX
            call .L_430e40

            test EAX,EAX
            jne .L_41c860

            movzx ESI,WORD PTR [RSP+36]
            lea RCX,QWORD PTR [RSP+38]
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            movzx EAX,WORD PTR [RSP+36]
            movzx EBP,BYTE PTR [RSP+39]
            lea ESI,DWORD PTR [RAX+2]
            lea EBP,DWORD PTR [RSI+RBP*1+2]
            mov WORD PTR [RSP+36],SI
            cmp SI,BP
            jae .L_41c888

            lea RAX,QWORD PTR [RSP+46]
            lea R12,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+42]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R15+7520]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_41c7ed
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c7a0:

            cmp AL,128
            jne .L_41c7d1

            movzx ESI,WORD PTR [RSP+36]
            mov RCX,QWORD PTR [RSP+16]
            mov EDX,4
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+43],2
            jne .L_41c860

            test BYTE PTR [RSP+44],8
            jne .L_41c870
.L_41c7d1:

            movzx ESI,WORD PTR [RSP+36]
            movzx EAX,BYTE PTR [RSP+41]
            lea ESI,DWORD PTR [RSI+RAX*1+2]
            cmp SI,BP
            mov WORD PTR [RSP+36],SI
            jae .L_41c888
.L_41c7ed:

            movzx ESI,SI
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+40]
            cmp AL,2
            jne .L_41c7a0

            movzx ESI,WORD PTR [RSP+36]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,10
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+47],8
            jne .L_41c860

            mov RAX,QWORD PTR [RSP+48]
            cmp QWORD PTR [R15+1686],RAX
            jne .L_41c7d1
.L_41c835:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c840:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41c899

            add RSP,72
.L_41c854:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_41c860:

            mov EAX,6
            jmp .L_41c840
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c870:

            mov RDI,QWORD PTR [RSP+24]
            call .L_426d00

            test AL,AL
            jne .L_41c7d1

            jmp .L_41c835
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41c888:

            movzx EDX,WORD PTR [RBX+76]
            mov RSI,R14
            mov RDI,R13
            call .L_41c400

            jmp .L_41c840
.L_41c899:

            call __stack_chk_fail@PLT
.L_41c89e:

            nop
            nop
.L_41c8a0:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,48
.L_41c8b2:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_430af0

            test BYTE PTR [R13+26],64
            jne .L_41c940

            mov R14,RAX
            lea RAX,QWORD PTR [RAX+5848]
            mov RBP,R13
            lea RDI,QWORD PTR [R14+2352]
            sub RBP,RAX
            movabs RAX,-1085102592571150095
            sar RBP,3
            imul RBP,RAX
            call .L_404810

            test RAX,RAX
            mov RBX,RAX
            je .L_41c940

            movzx EBP,BPL
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41c910:

            mov ESI,EBP
            mov RDI,RBX
            call .L_4040e0

            test AL,AL
            je .L_41c930

            movzx EAX,BYTE PTR [RBX+78]
            shr AL,2
            and EAX,15
            cmp AL,8
            je .L_41cae0
.L_41c930:

            mov RDI,RBX
            call .L_4033c0

            test RAX,RAX
            mov RBX,RAX
            jne .L_41c910
.L_41c940:

            mov RDI,R12
            call .L_4161c0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41c986

            movzx EAX,BYTE PTR [RBX+78]
            mov EDX,13
            mov RSI,RBX
            mov RDI,R12
            and EAX,4294967235
            or EAX,32
            mov BYTE PTR [RBX+78],AL
            call .L_416200

            test EAX,EAX
            je .L_41c9b0
.L_41c976:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41c986:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41cb17

            add RSP,48
.L_41c99e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41c9b0:

            mov RSI,RBX
            mov RDI,R12
            call .L_416280

            test EAX,EAX
            jne .L_41c976

            mov RSI,RBX
            mov RDI,R12
            call .L_4165e0

            test EAX,EAX
            jne .L_41c976

            movzx EDX,BYTE PTR [R13+26]
            mov RSI,RBX
            mov RDI,R12
            shr DL,3
            not EDX
            and EDX,1
            call .L_4166a0

            test EAX,EAX
            jne .L_41c976

            mov RSI,RBX
            mov RDI,R12
            call .L_416870

            test EAX,EAX
            jne .L_41c976

            mov RSI,RBX
            mov RDI,R12
            call .L_416910

            test EAX,EAX
            jne .L_41c976

            movzx EAX,BYTE PTR [R13+26]
            and EAX,7
            cmp AL,7
            je .L_41ca5f

            lea RDX,QWORD PTR [RIP+.L_4595d6]
            mov ECX,2
            mov RSI,RBX
            mov RDI,R12
            call .L_416710

            test EAX,EAX
            jne .L_41c976

            mov RDI,R13
            call .L_42c000

            lea RDX,QWORD PTR [R13+96]
            mov ECX,8
            mov RSI,RBX
            mov RDI,R12
            call .L_4163e0

            test EAX,EAX
            jne .L_41c976
.L_41ca5f:

            lea RBP,QWORD PTR [RSP+16]
            xor EAX,EAX
            mov ECX,14
            mov RSI,R13
            lea RDX,QWORD PTR [RBP+2]
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,RBP
            mov WORD PTR [RSP+16],33022
            call .L_40f0b0

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            call .L_416d90

            test EAX,EAX
            jne .L_41c976

            movzx EDX,BYTE PTR [R13+26]
            mov ECX,EDX
            shr CL,3
            and CL,8
            je .L_41cab5

            and EDX,4294967288
            or EDX,6
            mov BYTE PTR [R13+26],DL
.L_41cab5:

            movzx ECX,WORD PTR [R13+24]
            lea RSI,QWORD PTR [RIP+.L_4595e0]
            mov RDX,RBP
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_41aeb0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41c986
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41cae0:

            movzx EAX,BYTE PTR [R13+26]
            and EAX,7
            cmp AL,1
            je .L_41cb10

            cmp AL,6
            je .L_41cb10

            lea RDI,QWORD PTR [R14+2256]
            mov EDX,8
            mov RSI,R13
            call .L_413990

            jmp .L_41c940
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41cb10:

            xor EAX,EAX
            jmp .L_41c986
.L_41cb17:

            call __stack_chk_fail@PLT
.L_41cb1c:

            nop
            nop
            nop
            nop
.L_41cb20:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_430af0

            mov R12,RAX
            mov EAX,DWORD PTR [RBP+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_41cb40
.L_41cb3a:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_41cb40:

            cmp BYTE PTR [RBP+3272],0
            je .L_41cb3a

            xor EBX,EBX
            jmp .L_41cb8a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41cb50:

            movzx ECX,BYTE PTR [R12+7785]
.L_41cb59:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RSI,QWORD PTR [RBP+RAX*8+3280]
            cmp CL,BYTE PTR [RSI+125]
            je .L_41cb7f

            mov RDI,RBP
            call .L_41c8a0

            test EAX,EAX
            jne .L_41cb3a
.L_41cb7f:

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            jbe .L_41cb3a
.L_41cb8a:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_41cb7f

            shr AL,3
            and EAX,15
            test AL,8
            jne .L_41cb7f

            test AL,1
            jne .L_41cb50

            movzx ECX,BYTE PTR [R12+7784]
            jmp .L_41cb59
.L_41cbc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cbd0:

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41cc30

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41cc03
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41cbf0:

            cmp AL,1
            je .L_41cc25
.L_41cbf4:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            je .L_41cc30
.L_41cc03:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea R8D,DWORD PTR [RAX-6]
            cmp R8B,1
            ja .L_41cbf0
.L_41cc25:

            cmp SI,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41cbf4

            ret 
.L_41cc30:

            xor EAX,EAX
            ret 
.L_41cc33:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cc40:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41cc48:

            cmp BYTE PTR [RDI+3272],0
            je .L_41ccc8

            mov RBP,RSI
            mov R13,RDI
            lea R12,QWORD PTR [RDI+3280]
            xor EBX,EBX
            jmp .L_41cc82
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41cc68:

            cmp AL,1
            je .L_41cca3
.L_41cc6c:

            movzx EAX,BYTE PTR [R13+3272]
            add EBX,1
            add R12,136
            cmp EAX,EBX
            jle .L_41ccc8
.L_41cc82:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [R13+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_41cc68
.L_41cca3:

            mov RSI,RBP
            mov RDI,R12
            mov R14,R12
            call .L_408380

            test AL,AL
            je .L_41cc6c

            pop RBX
.L_41ccb6:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ccc8:

            xor R14D,R14D
            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41ccd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cce0:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41cd00

            cmp EAX,2
            jne .L_41ccf8

            jmp .L_41cc40
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ccf8:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41cd00:

            movzx R8D,BYTE PTR [RDI+3272]
            movzx R9D,WORD PTR [RSI]
            test R8D,R8D
            je .L_41ccf8

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41cd33
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41cd20:

            cmp AL,1
            je .L_41cd54
.L_41cd24:

            add EDX,1
            add RCX,136
            cmp EDX,R8D
            je .L_41ccf8
.L_41cd33:

            movsxd RSI,EDX
            mov RAX,RSI
            shl RAX,4
            add RAX,RSI
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea ESI,DWORD PTR [RAX-6]
            cmp SIL,1
            ja .L_41cd20
.L_41cd54:

            cmp R9W,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41cd24

            ret 
.L_41cd60:

            add RDI,3280
            mov RAX,RSI
            movabs RSI,-1085102592571150095
            sub RAX,RDI
            sar RAX,3
            imul RAX,RSI
            ret 
.L_41cd80:

            test RSI,RSI
            je .L_41cd8e

            movzx EAX,BYTE PTR [RDI+3272]
            mov BYTE PTR [RSI],AL
.L_41cd8e:

            lea RAX,QWORD PTR [RDI+3280]
            ret 
.L_41cd96:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cda0:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp DL,9
            ja .L_41cdc2

            mov EDX,DWORD PTR [RDI+12]
            mov EAX,13
            test EDX,EDX
            jne .L_41cdc2

            mov BYTE PTR [RDI+3272],SIL
            xor EAX,EAX
.L_41cdc2:

            ret 
.L_41cdc4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41cdd0:

            lea EAX,DWORD PTR [RSI+2]
            mov R10D,ESI
            cmp AX,1
            jbe .L_41ce60

            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,1
            jb .L_41ce60

            cmp EAX,2
            jbe .L_41ce58

            cmp EAX,4
            ja .L_41ce60

            movzx R9D,BYTE PTR [RDI+3272]
            test R9D,R9D
            je .L_41ce68

            lea RCX,QWORD PTR [RDI+3280]
            xor EDX,EDX
            jmp .L_41ce23
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ce10:

            cmp AL,1
            je .L_41ce45
.L_41ce14:

            add EDX,1
            add RCX,136
            cmp EDX,R9D
            je .L_41ce68
.L_41ce23:

            movsxd R8,EDX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            movzx EAX,BYTE PTR [RDI+RAX*8+3306]
            and EAX,7
            lea R8D,DWORD PTR [RAX-6]
            cmp R8B,1
            ja .L_41ce10
.L_41ce45:

            cmp R10W,WORD PTR [RCX+24]
            mov RAX,RCX
            jne .L_41ce14

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ce58:

            movzx ESI,SI
            jmp .L_418ff0
.L_41ce60:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ce68:

            test ESI,511
            movzx EAX,SI
            jne .L_41ce60

            sar EAX,10
            cdqe 
            lea RDX,QWORD PTR [RAX+RAX*4]
            shl RDX,3
            lea RAX,QWORD PTR [RDI+RDX*1+752]
            movzx EDX,BYTE PTR [RDI+RDX*1+778]
            and EDX,7
            cmp DL,7
            jne .L_41ce60

            cmp WORD PTR [RAX+24],SI
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_41cea6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ceb0:

            push RBX
            mov EBX,ESI
            call .L_430af0

            movzx EDX,WORD PTR [RAX+1664]
            movzx ESI,BX
            mov ECX,ESI
            sar ECX,10
            sar EDX,10
            cmp DL,CL
            je .L_41ced8
.L_41cece:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ced8:

            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cdd0

            test RAX,RAX
            je .L_41cece

            movzx EAX,BYTE PTR [RAX+26]
            pop RBX
            shr AL,3
            and EAX,15
            shr AL,1
            xor EAX,1
            and EAX,1
            ret 
.L_41cefd:

            nop
            nop
            nop
.L_41cf00:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41cf08:

            mov EAX,DWORD PTR [RDI+12]
            cmp EAX,1
            jb .L_41cf90

            cmp EAX,2
            jbe .L_41cfad

            cmp EAX,4
            ja .L_41cf90

            xor EBX,EBX
            cmp BYTE PTR [RDI+3272],0
            mov R12,RSI
            mov RBP,RDI
            lea R13,QWORD PTR [RDI+3280]
            jne .L_41cf59

            jmp .L_41cfc0
          .byte 0x90
.L_41cf40:

            cmp AL,1
            je .L_41cf79
.L_41cf44:

            movzx EAX,BYTE PTR [RBP+3272]
            add EBX,1
            add R13,136
            cmp EAX,EBX
            jle .L_41cfc0
.L_41cf59:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_41cf40
.L_41cf79:

            mov RSI,R12
            mov RDI,R13
            mov R14,R13
            call .L_408380

            test AL,AL
            je .L_41cf44

            jmp .L_41cf93
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41cf90:

            xor R14D,R14D
.L_41cf93:

            pop RBX
.L_41cf94:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_41cfa0:

            mov EAX,DWORD PTR [RBP+60]
            test EAX,EAX
            je .L_41cf90

            mov RSI,R12
            mov RDI,RBP
.L_41cfad:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_419040
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41cfc0:

            xor EBX,EBX
            lea R13,QWORD PTR [RBP+752]
            jmp .L_41cfda

            nop
            nop
            nop
            nop
            nop
.L_41cfd0:

            add RBX,1
            cmp RBX,63
            je .L_41cfa0
.L_41cfda:

            movzx EAX,BYTE PTR [RBP+4669]
            cmp EAX,EBX
            je .L_41cfd0

            movsxd RAX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBP+RAX*8+778]
            and EAX,7
            cmp AL,7
            jne .L_41cfd0

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RSI,R12
            lea R14,QWORD PTR [R13+RAX*8]
            mov RDI,R14
            call .L_408380

            test AL,AL
            je .L_41cfd0

            jmp .L_41cf93
.L_41d018:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d020:

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41d040

            cmp EAX,2
            jne .L_41d038

            jmp .L_41cf00
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d038:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d040:

            movzx ESI,WORD PTR [RSI]
            jmp .L_41cdd0
.L_41d048:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d050:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,48
.L_41d065:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+36],0
            call .L_40ee30

            test AL,AL
            je .L_41d0e0

            cmp WORD PTR [RBP+8],0
            jne .L_41d099

            cmp WORD PTR [RBP+10],65280
            je .L_41d1f0
.L_41d099:

            lea R12,QWORD PTR [RSP+28]
            mov RDI,RBP
            mov RSI,R12
            call .L_40f0d0
.L_41d0a9:

            mov RSI,R12
            mov RDI,RBX
            call .L_41d020

            mov R12,RAX
.L_41d0b7:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            mov RAX,R12
            jne .L_41d296

            add RSP,48
.L_41d0d2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d0e0:

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+7520]
            mov RDX,RSP
            mov RSI,RBP
            call .L_426230

            test EAX,EAX
            jne .L_41d1c0

            cmp BYTE PTR [RBX+3272],0
            movzx ECX,BYTE PTR [RSP+9]
            je .L_41d220
.L_41d114:

            lea R13,QWORD PTR [RBX+3280]
            xor R14D,R14D
            jmp .L_41d15e
.L_41d120:

            mov RDI,RBX
            call .L_430ac0

            mov RDX,RBP
            mov RSI,RAX
            mov RDI,R13
            call .L_42bf60

            test AL,AL
            jne .L_41d0b7

            movzx ECX,BYTE PTR [RSP+9]
.L_41d143:

            movzx EAX,BYTE PTR [RBX+3272]
            add R14D,1
            add R13,136
            cmp EAX,R14D
            jle .L_41d220
.L_41d15e:

            movsxd RDX,R14D
            mov R12,R13
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41d185

            cmp AL,1
            jne .L_41d143
.L_41d185:

            test CL,CL
            jne .L_41d120

            cmp WORD PTR [RBP+8],0
            jne .L_41d120

            cmp WORD PTR [RBP+10],65280
            jne .L_41d120

            cmp WORD PTR [RBP+12],254
            jne .L_41d120

            movzx EAX,WORD PTR [R13+24]
            rol AX,8
            cmp WORD PTR [RBP+14],AX
            jne .L_41d120

            jmp .L_41d0b7
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d1c0:

            cmp BYTE PTR [RBX+3272],0
            mov BYTE PTR [RSP+9],255
            mov ECX,4294967295
            jne .L_41d114

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d1e0:

            xor R12D,R12D
            jmp .L_41d0b7
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d1f0:

            cmp WORD PTR [RBP+12],254
            jne .L_41d099

            movzx EAX,WORD PTR [RBP+14]
            mov DWORD PTR [RSP+36],1
            lea R12,QWORD PTR [RSP+28]
            rol AX,8
            mov WORD PTR [RSP+28],AX
            jmp .L_41d0a9
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d220:

            test CL,CL
            jne .L_41d1e0

            xor EAX,EAX
            lea RCX,QWORD PTR [RBX+752]
            jmp .L_41d23a
          .byte 0x90
.L_41d230:

            add RAX,1
            cmp RAX,63
            je .L_41d1e0
.L_41d23a:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RBX+RDX*8+778]
            and EDX,7
            cmp DL,7
            jne .L_41d230

            movzx EDX,BYTE PTR [RBX+4669]
            cmp EDX,EAX
            je .L_41d230

            cmp WORD PTR [RBP+8],0
            jne .L_41d230

            cmp WORD PTR [RBP+10],65280
            jne .L_41d230

            cmp WORD PTR [RBP+12],254
            jne .L_41d230

            lea RDX,QWORD PTR [RAX+RAX*4]
            shl RDX,3
            lea R12,QWORD PTR [RCX+RDX*1]
            movzx EDX,WORD PTR [RBX+RDX*1+776]
            rol DX,8
            cmp WORD PTR [RBP+14],DX
            jne .L_41d230

            jmp .L_41d0b7
.L_41d296:

            call __stack_chk_fail@PLT
.L_41d29b:

            nop
            nop
            nop
            nop
            nop
.L_41d2a0:

            xor EAX,EAX
            cmp BYTE PTR [RDI+10],0
            je .L_41d2b0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d2b0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov R12D,R8D
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,24
.L_41d2cd:

            call .L_4161c0

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_41d312

            movzx EAX,BYTE PTR [R15+78]
            mov EDX,8
            mov RSI,R15
            mov RDI,R14
            and EAX,4294967235
            or EAX,36
            mov BYTE PTR [R15+78],AL
            call .L_416200

            test EAX,EAX
            je .L_41d328
.L_41d302:

            mov RDI,R15
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41d312:

            add RSP,24
.L_41d316:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d328:

            mov RSI,R15
            mov RDI,R14
            call .L_416280

            test EAX,EAX
            jne .L_41d302

            mov RSI,R15
            mov RDI,R14
            call .L_4165e0

            test EAX,EAX
            jne .L_41d302

            mov RSI,R15
            mov RDI,R14
            call .L_416870

            test EAX,EAX
            jne .L_41d302

            mov RSI,R15
            mov RDI,R14
            call .L_416910

            test EAX,EAX
            jne .L_41d302

            test R13B,R13B
            je .L_41d41c

            movzx R13D,R13B
            lea EAX,DWORD PTR [R13-1]
            lea R13,QWORD PTR [RBX+RAX*1+1]
            jmp .L_41d395
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d380:

            cmp AL,25
            je .L_41d3f8

            cmp AL,12
            je .L_41d3c0
.L_41d388:

            add RBX,1
            cmp R13,RBX
            je .L_41d41c
.L_41d395:

            movzx EAX,BYTE PTR [RBX]
            cmp AL,24
            jne .L_41d380

            mov RDI,R14
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,R15
            call .L_409550

            test EAX,EAX
            je .L_41d388

            jmp .L_41d302
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d3c0:

            mov RSI,RBP
            mov RDI,R14
            call .L_41d050

            xor EDX,EDX
            test RAX,RAX
            je .L_41d3de

            movzx EDX,BYTE PTR [RAX+26]
            shr DL,3
            not EDX
            and EDX,1
.L_41d3de:

            mov RSI,R15
            mov RDI,R14
            call .L_4166a0

            test EAX,EAX
            je .L_41d388

            jmp .L_41d302
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d3f8:

            mov RDI,R14
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1208]
            mov RSI,R15
            call .L_409550

            test EAX,EAX
            je .L_41d388

            jmp .L_41d302
.L_41d41c:

            test R12W,R12W
            je .L_41d477

            mov RDI,R14
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2256]
            call .L_413b40

            mov RDI,R14
            call .L_416cd0

            movzx ECX,R12W
            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_417880

            test EAX,EAX
            jne .L_41d302

            lea RSI,QWORD PTR [RIP+.L_458fa3]
            mov RDX,RBP
            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41d312
.L_41d477:

            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_416d90

            test EAX,EAX
            jne .L_41d302

            lea RSI,QWORD PTR [RIP+.L_458fb7]
            mov RDX,RBP
            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41d312
.L_41d4ac:

            nop
            nop
            nop
            nop
.L_41d4b0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            add RBX,16
            sub RSP,88
.L_41d4cb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            lea R13,QWORD PTR [RSP+38]
            call .L_430af0

            xor EDX,EDX
            lea RSI,QWORD PTR [RIP+.L_458fca]
            xor ECX,ECX
            mov WORD PTR [RSP+48],DX
            mov RDI,RBP
            mov RDX,RBX
            mov R14,RAX
            xor EAX,EAX
            mov WORD PTR [RSP+58],CX
            mov WORD PTR [RSP+38],AX
            call .L_41aea0

            mov RCX,R13
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov R15D,EAX
            jne .L_41d538

            cmp BYTE PTR [RSP+39],4
            jbe .L_41d560
.L_41d532:

            mov R15D,6
.L_41d538:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_41d66e

            add RSP,88
.L_41d553:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41d560:

            lea RAX,QWORD PTR [RSP+48]
            mov EDX,10
            mov ESI,22
            mov RDI,R12
            mov BYTE PTR [RSP+49],0
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_41d58f

            cmp BYTE PTR [RSP+49],8
            jne .L_41d532
.L_41d58f:

            lea RAX,QWORD PTR [RSP+58]
            mov EDX,10
            mov ESI,23
            mov RDI,R12
            mov BYTE PTR [RSP+59],0
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_41d5c2

            cmp BYTE PTR [RSP+59],8
            jne .L_41d532
.L_41d5c2:

            movzx EDX,BYTE PTR [RSP+39]
            lea RDI,QWORD PTR [RSP+68]
            lea RSI,QWORD PTR [R13+2]
            mov ECX,4
            mov DWORD PTR [RSP+68],4294967295
            mov QWORD PTR [RSP+16],RDI
            mov R12,RDX
            call __memcpy_chk@PLT

            cmp BYTE PTR [RSP+49],0
            jne .L_41d630
.L_41d5f1:

            movzx R8D,R12B
            lea R13D,DWORD PTR [R12+1]
            mov BYTE PTR [RSP+R8*1+68],24
.L_41d600:

            cmp BYTE PTR [RSP+59],0
            jne .L_41d650
.L_41d607:

            lea ECX,DWORD PTR [R13+1]
            movzx R13D,R13B
            mov BYTE PTR [RSP+R13*1+68],25
.L_41d615:

            mov RDX,QWORD PTR [RSP+16]
            movzx ECX,CL
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,RBP
            call .L_41d2a0

            jmp .L_41d538
.L_41d630:

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+1080]
            add RSI,2
            call .L_409530

            test EAX,EAX
            jne .L_41d5f1

            mov R13D,R12D
            jmp .L_41d600
          .byte 0x66
          .byte 0x90
.L_41d650:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R14+1208]
            add RSI,2
            call .L_409530

            test EAX,EAX
            jne .L_41d607

            mov ECX,R13D
            jmp .L_41d615
.L_41d66e:

            call __stack_chk_fail@PLT
.L_41d673:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d680:

            push RBP
            push RBX
            sub RSP,40
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-3]
            cmp EDX,1
            jbe .L_41d6c0
.L_41d6a1:

            xor EAX,EAX
            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            jne .L_41d741

            add RSP,40
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41d6c0:

            mov RBP,RSP
            mov EDX,767
            mov ECX,256
            xor R8D,R8D
            cmp EAX,4
            mov QWORD PTR [RSP+2],0
            mov RBX,RDI
            mov DWORD PTR [RBP+10],0
            mov WORD PTR [RSP],DX
            mov WORD PTR [RSP+14],CX
            jne .L_41d718
.L_41d6f1:

            lea RDX,QWORD PTR [RIP+.L_4595d8]
            mov RDI,RBX
            mov ECX,1
            mov RSI,RBP
            call .L_41d2a0

            mov RDI,RBX
            call .L_41cb20

            jmp .L_41d6a1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d718:

            call .L_401460

            movzx ECX,AX
            mov R8D,274877907
            mov EAX,ECX
            mul R8D
            mov R8D,EDX
            shr R8D,5
            imul R8D,R8D,500
            sub ECX,R8D
            mov R8D,ECX
            jmp .L_41d6f1
.L_41d741:

            call __stack_chk_fail@PLT
.L_41d746:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d750:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_41d758:

            cmp DWORD PTR [RDI+12],2
            jne .L_41d7d0

            mov EAX,DWORD PTR [RSI+8]
            cmp EAX,1
            je .L_41d7e0

            cmp EAX,2
            jne .L_41d7d0

            mov RBP,RSI
            mov R13,RDI
            xor EBX,EBX
            lea R12,QWORD PTR [RDI+752]
            jmp .L_41d78a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d780:

            add RBX,1
            cmp RBX,63
            je .L_41d7d0
.L_41d78a:

            movzx EAX,BYTE PTR [R13+4669]
            cmp EAX,EBX
            je .L_41d780

            movsxd RAX,EBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R13+RAX*8+778]
            and EAX,7
            cmp AL,7
            jne .L_41d780

            lea RAX,QWORD PTR [RBX+RBX*4]
            mov RSI,RBP
            lea R14,QWORD PTR [R12+RAX*8]
            mov RDI,R14
            call .L_408380

            test AL,AL
            jne .L_41d7d3

            add RBX,1
            cmp RBX,63
            jne .L_41d78a

            nop
            nop
.L_41d7d0:

            xor R14D,R14D
.L_41d7d3:

            pop RBX
.L_41d7d4:

            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_41d7e0:

            movzx EAX,WORD PTR [RSI]
            test AX,511
            mov EDX,EAX
            jne .L_41d7d0

            sar EAX,10
            cdqe 
            lea RAX,QWORD PTR [RAX+RAX*4]
            shl RAX,3
            lea R14,QWORD PTR [RDI+RAX*1+752]
            movzx EAX,BYTE PTR [RDI+RAX*1+778]
            and EAX,7
            cmp AL,7
            jne .L_41d7d0

            cmp DX,WORD PTR [R14+24]
            jne .L_41d7d0

            pop RBX
            mov RAX,R14
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_41d822:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d830:

            movzx EAX,SI
            mov EDX,EAX
            sar EDX,10
            cmp DWORD PTR [RDI+12],2
            je .L_41d900

            movzx ECX,BYTE PTR [RDI+4669]
            mov EAX,ESI
            cmp CL,DL
            je .L_41d8f8

            cmp DL,62
            mov EAX,4294967294
            ja .L_41d8f8

            movsxd R8,EDX
            lea RSI,QWORD PTR [R8+R8*4]
            shl RSI,3
            lea R11,QWORD PTR [RDI+RSI*1+752]
            movzx R9D,BYTE PTR [R11+26]
            movzx R10D,BYTE PTR [R11+36]
            and R9D,7
            cmp R9B,7
            je .L_41d960
.L_41d88c:

            cmp R10B,62
            mov EAX,4294967294
            ja .L_41d8f8

            mov R9D,16
            mov ESI,16
.L_41d8a2:

            lea RAX,QWORD PTR [R8+R8*4]
            movzx R8D,R10B
            movzx R11D,R10B
            lea R8,QWORD PTR [R8+R8*4]
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            lea R8,QWORD PTR [RDI+R8*8+752]
            shr AL,2
            and EAX,15
            cmp CL,R10B
            je .L_41d8da

            movzx ECX,BYTE PTR [R8+26]
            and ECX,7
            cmp CL,7
            je .L_41d910
.L_41d8da:

            add EAX,16
            cmp EAX,R9D
            jge .L_41d950

            test BYTE PTR [R8+26],7
            mov EAX,4294967294
            je .L_41d8f8
.L_41d8ee:

            mov EAX,R10D
            shl EAX,10
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41d8f8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41d900:

            mov ESI,EAX
            jmp .L_4193c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41d910:

            lea RCX,QWORD PTR [R11+R11*4]
            movzx ECX,BYTE PTR [RDI+RCX*8+789]
            and ECX,3
            mov EDI,ECX
            movzx ECX,BYTE PTR [R8+30]
            cmp CL,DIL
            cmova ECX,EDI
            mov EDI,16
            sub ECX,1
            cmp CL,2
            ja .L_41d947

            lea RDI,QWORD PTR [RIP+.L_459230]
            movzx ECX,CL
            movzx EDI,BYTE PTR [RDI+RCX*1]
.L_41d947:

            add EAX,EDI
            cmp R9D,EAX
            jg .L_41d8ee

            nop
            nop
.L_41d950:

            cmp SIL,15
            ja .L_41d9ae

            mov EAX,EDX
            shl EAX,10
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41d960:

            movzx ESI,BYTE PTR [RDI+RSI*1+789]
            and ESI,3
            mov R9D,ESI
            movzx ESI,BYTE PTR [R11+30]
            cmp SIL,R9B
            cmova ESI,R9D
            sub ESI,1
            cmp SIL,2
            ja .L_41d88c

            lea R9,QWORD PTR [RIP+.L_459230]
            movzx ESI,SIL
            cmp R10B,62
            movzx ESI,BYTE PTR [R9+RSI*1]
            jbe .L_41d9a5

            cmp SIL,32
            jbe .L_41d950

            ret 
.L_41d9a5:

            movzx R9D,SIL
            jmp .L_41d8a2
.L_41d9ae:

            mov EAX,4294967294
            ret 
.L_41d9b4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41d9c0:

            movzx ESI,SI
            mov EAX,16
            sar ESI,10
            cmp ESI,63
            je .L_41da78

            movzx R9D,BYTE PTR [RDI+4669]
            movsxd RCX,ESI
            lea RDX,QWORD PTR [RCX+RCX*4]
            shl RDX,3
            cmp R9B,SIL
            lea R8,QWORD PTR [RDI+RDX*1+752]
            je .L_41da02

            movzx ESI,BYTE PTR [R8+26]
            and ESI,7
            cmp SIL,7
            je .L_41da80
.L_41da02:

            movzx EDX,BYTE PTR [R8+36]
            cmp DL,62
            ja .L_41da78

            lea RCX,QWORD PTR [RCX+RCX*4]
            mov ESI,16
            movzx ECX,BYTE PTR [RDI+RCX*8+789]
            shr CL,2
            and ECX,15
            cmp R9B,DL
            je .L_41da69

            movzx R9D,DL
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea R8,QWORD PTR [RDI+RDX*8+752]
            movzx EDX,BYTE PTR [R8+26]
            and EDX,7
            cmp DL,7
            jne .L_41da69

            lea RDX,QWORD PTR [R9+R9*4]
            movzx EDX,BYTE PTR [RDI+RDX*8+789]
            mov EDI,EDX
            movzx EDX,BYTE PTR [R8+30]
            and EDI,3
            cmp DL,DIL
            cmova EDX,EDI
            sub EDX,1
            cmp DL,2
            jbe .L_41dac0
.L_41da69:

            add ECX,ESI
            cmp AL,CL
            cmova EAX,ECX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41da78:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41da80:

            movzx EDX,BYTE PTR [RDI+RDX*1+789]
            and EDX,3
            mov ESI,EDX
            movzx EDX,BYTE PTR [R8+30]
            cmp DL,SIL
            cmova EDX,ESI
            sub EDX,1
            cmp DL,2
            ja .L_41da02

            lea RAX,QWORD PTR [RIP+.L_459230]
            movzx EDX,DL
            movzx EAX,BYTE PTR [RAX+RDX*1]
            jmp .L_41da02
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dac0:

            lea RSI,QWORD PTR [RIP+.L_459230]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RSI+RDX*1]
            jmp .L_41da69
.L_41dad0:

            movzx ESI,SI
            mov EAX,16
            sar ESI,10
            cmp ESI,63
            je .L_41db01

            movsxd RSI,ESI
            lea RDX,QWORD PTR [RSI+RSI*4]
            lea RDX,QWORD PTR [RDI+RDX*8]
            cmp BYTE PTR [RDX+788],62
            ja .L_41db01

            movzx EAX,BYTE PTR [RDX+789]
            shr AL,2
            and EAX,15
.L_41db01:

            ret 
.L_41db03:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41db10:

            cmp DWORD PTR [RDI+12],1
            mov EAX,13
            ja .L_41db24

            mov BYTE PTR [RDI+4670],SIL
            xor EAX,EAX
.L_41db24:

            ret 
.L_41db26:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41db30:

            mov BYTE PTR [RDI+4669],SIL
            mov BYTE PTR [RDI+4670],SIL
            ret 
.L_41db3f:

            nop
.L_41db40:

            test RSI,RSI
            je .L_41db48

            mov BYTE PTR [RSI],63
.L_41db48:

            lea RAX,QWORD PTR [RDI+752]
            ret 
.L_41db50:

            cmp SIL,62
            movzx EAX,SIL
            ja .L_41db70

            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41db70:

            xor EAX,EAX
            ret 
.L_41db73:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41db80:

            cmp SIL,62
            movzx EAX,SIL
            ja .L_41dba0

            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RDI+RAX*8+752]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dba0:

            xor EAX,EAX
            ret 
.L_41dba3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41dbb0:

            cmp BYTE PTR [RDI+3272],SIL
            jbe .L_41dbe2

            mov R8D,ESI
            movzx ESI,SIL
            mov RAX,RSI
            shl RAX,4
            add RSI,RAX
            movzx EAX,BYTE PTR [RDI+RSI*8+3306]
            and EAX,7
            lea ESI,DWORD PTR [RAX-6]
            cmp SIL,1
            jbe .L_41dbf0

            cmp AL,1
            je .L_41dbf0
.L_41dbe2:

            mov EAX,7
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dbf0:

            movzx EAX,R8B
            push R12
.L_41dbf6:

            push RBP
            push RBX
            mov RBX,RDX
            mov RDX,RAX
            shl RDX,4
            mov RBP,RCX
            add RAX,RDX
            lea R12,QWORD PTR [RDI+RAX*8+3280]
            call .L_430ac0

            mov RCX,RBP
            mov RDX,RBX
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            mov RSI,RAX
            jmp .L_42bcb0
.L_41dc2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41dc30:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov EBP,ESI
            xor EBX,EBX
            sub RSP,48
.L_41dc43:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea R14,QWORD PTR [RSP+14]
            lea R13,QWORD PTR [RSP+16]
.L_41dc5d:

            mov EAX,16
            mov RDI,R12
            mov WORD PTR [RSP+14],AX
            call .L_430ac0

            mov R8,R14
            mov RCX,R13
            mov EDX,EBX
            mov ESI,5
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_41dc9f

            cmp WORD PTR [RSP+14],15
            jbe .L_41dcc0

            cmp WORD PTR [RSP+28],BP
            je .L_41dcd0

            add EBX,1
            cmp EBX,10
            jne .L_41dc5d
.L_41dc9f:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41dce9

            add RSP,48
.L_41dcb3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41dcc0:

            mov EAX,6
            jmp .L_41dc9f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dcd0:

            mov RDI,R12
            call .L_430ac0

            mov EDX,EBX
            mov ESI,5
            mov RDI,RAX
            call .L_401560

            jmp .L_41dc9f
.L_41dce9:

            call __stack_chk_fail@PLT
.L_41dcee:

            nop
            nop
.L_41dcf0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R8D,ESI
            and R8W,511
            sub RSP,40
.L_41dd06:

            movzx EDI,BYTE PTR [RDI+3272]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test EDI,EDI
            je .L_41dd67

            lea RBX,QWORD PTR [R12+3280]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
.L_41dd30:

            movsxd RCX,EDX
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            lea RBP,QWORD PTR [R12+RAX*8+3296]
            test BYTE PTR [RBP+10],7
            je .L_41dd59

            movzx EAX,WORD PTR [RBX+24]
            and AX,511
            cmp AX,R8W
            je .L_41dd90
.L_41dd59:

            add EDX,1
            add RBX,136
            cmp EDX,EDI
            jne .L_41dd30
.L_41dd67:

            mov EAX,23
.L_41dd6c:

            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            jne .L_41dde9

            add RSP,40
.L_41dd80:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41dd90:

            movzx ESI,SI
            mov RDI,R12
            mov R13,RSP
            call .L_41dc30

            xor EAX,EAX
            mov RDI,R12
            mov WORD PTR [RSP+14],AX
            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RSP],RAX
            mov EAX,DWORD PTR [RBX+92]
            mov DWORD PTR [RSP+8],EAX
            movzx EAX,WORD PTR [RBX+24]
            mov WORD PTR [RSP+12],AX
            movzx EAX,BYTE PTR [RBP+10]
            shr AL,3
            and EAX,15
            mov BYTE PTR [RSP+14],AL
            call .L_430ac0

            mov ECX,16
            mov RDX,R13
            mov ESI,5
            mov RDI,RAX
            call .L_401550

            jmp .L_41dd6c
.L_41dde9:

            call __stack_chk_fail@PLT
.L_41ddee:

            nop
            nop
.L_41ddf0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_41ddf7:

            call .L_430ac0

            mov EDX,4294967295
            mov ESI,5
            mov RDI,RAX
            call .L_401560

            test EAX,EAX
            mov R12D,EAX
            jne .L_41de62

            xor EBX,EBX
            jmp .L_41de2a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41de20:

            add RBX,1
            cmp RBX,10
            je .L_41de62
.L_41de2a:

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            test BYTE PTR [RBP+RAX*8+3306],7
            je .L_41de20

            mov RAX,RBX
            mov RDI,RBP
            shl RAX,4
            add RAX,RBX
            movzx ESI,WORD PTR [RBP+RAX*8+3304]
            call .L_41dcf0

            test EAX,EAX
            je .L_41de20

            mov R12D,EAX
.L_41de62:

            mov EAX,R12D
            pop RBX
.L_41de66:

            pop RBP
            pop R12
            ret 
.L_41de6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_41de70:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            xor R12D,R12D
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_41de87:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea R14,QWORD PTR [RSP+14]
            lea R13,QWORD PTR [RSP+16]
            jmp .L_41df42
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41deb0:

            mov R15D,1
.L_41deb6:

            lea RDI,QWORD PTR [RBX+8]
            mov RCX,RBX
            xor EAX,EAX
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+128],0
            add R12D,1
            and RDI,-8
            sub RCX,RDI
            add ECX,136
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RAX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBX],RAX
            movzx EAX,WORD PTR [RSP+28]
            mov WORD PTR [RBX+24],AX
            mov EAX,DWORD PTR [RSP+24]
            mov DWORD PTR [RBX+92],EAX
            movzx EAX,BYTE PTR [RSP+30]
            and EAX,15
            lea EDX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,4294967168
            or EAX,EDX
            or EAX,1
            mov BYTE PTR [RBX+26],AL
            call .L_401240

            mov RDI,RBP
            mov DWORD PTR [RBX+8],EAX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2504]
            mov EDX,1
            mov RSI,RBX
            call .L_42b480
.L_41df42:

            mov EAX,16
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            call .L_430ac0

            movzx EDX,R12B
            mov R8,R14
            mov RCX,R13
            mov ESI,5
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_41e010

            cmp WORD PTR [RSP+14],15
            jbe .L_41dfd2

            mov RSI,R13
            mov RDI,RBP
            call .L_41b940

            test RAX,RAX
            mov RBX,RAX
            jne .L_41deb0

            movzx ECX,BYTE PTR [RBP+3272]
            test ECX,ECX
            je .L_41dfd2

            test BYTE PTR [RBP+3306],7
            je .L_41e020

            xor EAX,EAX
            jmp .L_41dfcb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41dfb0:

            movsxd RDX,EAX
            mov RBX,RDX
            shl RBX,4
            add RBX,RDX
            shl RBX,3
            test BYTE PTR [RBP+RBX*1+3306],7
            je .L_41e000
.L_41dfcb:

            add EAX,1
            cmp EAX,ECX
            jne .L_41dfb0
.L_41dfd2:

            mov RDI,RBP
            call .L_41ddf0
.L_41dfda:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41e027

            add RSP,56
.L_41dfee:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e000:

            add RBX,3280
.L_41e007:

            add RBX,RBP
            jmp .L_41deb6
          .byte 0x90
.L_41e010:

            cmp R12B,10
            ja .L_41dfd2

            test R15B,R15B
            je .L_41dfda

            jmp .L_41dfd2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41e020:

            mov EBX,3280
            jmp .L_41e007
.L_41e027:

            call __stack_chk_fail@PLT
.L_41e02c:

            nop
            nop
            nop
            nop
.L_41e030:

            movzx ECX,BYTE PTR [RSI+26]
            and ECX,7
            lea EAX,DWORD PTR [RCX-6]
            cmp AL,1
            jbe .L_41e04c

            cmp CL,1
            mov EAX,23
            jne .L_41e150
.L_41e04c:

            pxor XMM0,XMM0
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDX
            sub RSP,8
.L_41e05c:

            movups XMMWORD PTR [RDX+16],XMM0
            movups XMMWORD PTR [RDX],XMM0
            mov RAX,QWORD PTR [RSI]
            mov QWORD PTR [RDX],RAX
            mov EAX,DWORD PTR [RSI+92]
            mov DWORD PTR [RDX+8],EAX
            movzx EAX,WORD PTR [RSI+24]
            mov WORD PTR [RDX+16],AX
            movzx EAX,WORD PTR [RSI+24]
            and AX,511
            mov WORD PTR [RDX+18],AX
            movzx EAX,BYTE PTR [RSI+125]
            mov BYTE PTR [RDX+20],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            lea RDI,QWORD PTR [RBP+28]
            mul EDX
            shr EDX,6
            mov DWORD PTR [RBX+12],EDX
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+21],AL
            call .L_412ff0

            mov BYTE PTR [RBX+22],AL
            movzx EAX,BYTE PTR [RBP+31]
            mov BYTE PTR [RBX+23],AL
            movzx EAX,WORD PTR [RBP+32]
            mov WORD PTR [RBX+24],AX
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+26],AX
            movzx EAX,BYTE PTR [RBP+26]
            shr AL,3
            and EAX,15
            shr AL,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+28]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967293
            shr DL,3
            shr DX,2
            and EDX,1
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967291
            shr DL,3
            shr DX,1
            and EDX,1
            shl EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967287
            and EDX,8
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            movzx ECX,BYTE PTR [RBP+26]
            and ECX,7
            cmp CL,6
            sete DL
            cmp CL,1
            sete CL
            and EAX,4294967279
            or EDX,ECX
            shl EDX,4
            or EAX,EDX
            mov BYTE PTR [RBX+28],AL
            add RSP,8
.L_41e147:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e150:

            ret 
.L_41e152:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e160:

            movzx R9D,BYTE PTR [RDI+3272]
            mov R10D,ESI
            and R10W,511
            test ESI,65024
            cmove R10D,ESI
            test R9D,R9D
            je .L_41e1c4

            lea RSI,QWORD PTR [RDI+3280]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e190:

            movsxd R8,ECX
            mov RAX,R8
            shl RAX,4
            add RAX,R8
            test BYTE PTR [RDI+RAX*8+3306],7
            je .L_41e1b5

            movzx EAX,WORD PTR [RSI+24]
            and AX,511
            cmp R10W,AX
            je .L_41e1d0
.L_41e1b5:

            add ECX,1
            add RSI,136
            cmp ECX,R9D
            jne .L_41e190
.L_41e1c4:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e1d0:

            jmp .L_41e030
.L_41e1d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e1e0:

            cmp BYTE PTR [RDI+3272],SIL
            movzx EAX,SIL
            jbe .L_41e208

            mov RCX,RAX
            shl RCX,4
            add RAX,RCX
            lea RSI,QWORD PTR [RDI+RAX*8+3280]
            jmp .L_41e030
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e208:

            mov EAX,7
            ret 
.L_41e20e:

            nop
            nop
.L_41e210:

            cmp SI,62
            jbe .L_41e222

            test ESI,511
            je .L_41e2e0
.L_41e222:

            cmp SIL,62
            mov EAX,23
            ja .L_41e2f5
.L_41e231:

            movzx EAX,SIL
            push RBP
            push RBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov RBX,RDX
            sub RSP,8
.L_41e242:

            lea RBP,QWORD PTR [RDI+RAX*8+752]
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RDX],RAX
            movzx EAX,SIL
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RCX,QWORD PTR [RDI+RAX*8+784]
            movzx EAX,BYTE PTR [RCX+5]
            mov BYTE PTR [RBX+10],SIL
            shl ESI,10
            mov WORD PTR [RBX+8],SI
            shr AL,6
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+16]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EDX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+11],DL
            movzx EDX,BYTE PTR [RBP+26]
            and EDX,7
            cmp DL,7
            sete DL
            and EAX,4294967293
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+16],AL
            movzx EAX,BYTE PTR [RCX+5]
            shr AL,2
            and EAX,15
            mov BYTE PTR [RBX+12],AL
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+13],AL
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,3
            mov BYTE PTR [RBX+14],AL
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            mul EDX
            xor EAX,EAX
            shr EDX,6
            mov BYTE PTR [RBX+15],DL
            add RSP,8
.L_41e2db:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41e2e0:

            shr ESI,10
            mov EAX,23
            and ESI,63
            cmp SIL,62
            jbe .L_41e231
.L_41e2f5:

            ret 
.L_41e2f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e300:

            pxor XMM0,XMM0
            push RBP
            push RBX
            sub RSP,8
.L_41e30a:

            mov DWORD PTR [RDX+32],0
            movups XMMWORD PTR [RDX],XMM0
            movups XMMWORD PTR [RDX+16],XMM0
            movzx ECX,WORD PTR [RSI]
            test CX,CX
            js .L_41e450

            movzx R9D,BYTE PTR [RDI+3272]
            movsx RAX,CX
            cmp EAX,R9D
            jl .L_41e350

            jmp .L_41e4e0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e340:

            add ECX,1
            movsx RAX,CX
            cmp EAX,R9D
            jge .L_41e4e0
.L_41e350:

            mov R8,RAX
            shl R8,4
            add R8,RAX
            movzx R8D,BYTE PTR [RDI+R8*8+3306]
            and R8D,7
            cmp R8B,7
            jne .L_41e340

            mov R8,RAX
            add ECX,1
            or BYTE PTR [RDX+32],16
            shl R8,4
            mov WORD PTR [RSI],CX
            add RAX,R8
            lea RBP,QWORD PTR [RDI+RAX*8+3280]
.L_41e389:

            mov RAX,QWORD PTR [RBP]
            mov RBX,RDX
            mov QWORD PTR [RDX],RAX
            call .L_401240

            sub EAX,DWORD PTR [RBP+8]
            mov EDX,274877907
            lea RDI,QWORD PTR [RBP+28]
            mul EDX
            shr EDX,6
            mov DWORD PTR [RBX+8],EDX
            movzx EAX,WORD PTR [RBP+24]
            mov WORD PTR [RBX+12],AX
            mov EAX,DWORD PTR [RBP+12]
            mov DWORD PTR [RBX+16],EAX
            mov EAX,DWORD PTR [RBP+16]
            mov DWORD PTR [RBX+20],EAX
            movzx EAX,BYTE PTR [RBP+30]
            mov BYTE PTR [RBX+24],AL
            call .L_412ff0

            mov BYTE PTR [RBX+25],AL
            movzx EAX,BYTE PTR [RBP+31]
            mov BYTE PTR [RBX+26],AL
            movzx EAX,WORD PTR [RBP+32]
            mov WORD PTR [RBX+28],AX
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+30],AX
            movzx EAX,BYTE PTR [RBP+26]
            shr AL,3
            and EAX,15
            shr AL,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RBX+32]
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967293
            shr DL,3
            shr DX,2
            and EDX,1
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967291
            shr DL,3
            shr DX,1
            and EDX,1
            shl EDX,2
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            movzx EDX,BYTE PTR [RBP+26]
            and EAX,4294967287
            and EDX,8
            or EAX,EDX
            mov BYTE PTR [RBX+32],AL
            add RSP,8
.L_41e444:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e450:

            neg ECX
            cmp CX,62
            mov R8D,ECX
            jg .L_41e4a8

            movsx RAX,CX
.L_41e45f:

            lea R9,QWORD PTR [RAX+RAX*4]
            add R8D,1
            movsx R8,R8W
            movzx R9D,BYTE PTR [RDI+R9*8+778]
            and R9D,7
            cmp R9B,7
            jne .L_41e49e

            jmp .L_41e4c0
.L_41e480:

            movsxd RAX,R8D
            add R8,1
            lea R9,QWORD PTR [RAX+RAX*4]
            movzx R9D,BYTE PTR [RDI+R9*8+778]
            and R9D,7
            cmp R9B,7
            je .L_41e4c0
.L_41e49e:

            cmp R8W,62
            mov ECX,R8D
            jle .L_41e480
.L_41e4a8:

            neg ECX
            mov EAX,23
            mov WORD PTR [RSI],CX
            add RSP,8
.L_41e4b6:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e4c0:

            lea RAX,QWORD PTR [RAX+RAX*4]
            not ECX
            and BYTE PTR [RDX+32],239
            mov WORD PTR [RSI],CX
            lea RBP,QWORD PTR [RDI+RAX*8+752]
            jmp .L_41e389
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e4e0:

            xor EAX,EAX
            xor ECX,ECX
            xor R8D,R8D
            mov WORD PTR [RSI],AX
            xor EAX,EAX
            jmp .L_41e45f
.L_41e4f1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e500:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            movzx EBX,DX
            mov RBP,RDI
            mov ESI,EBX
            call .L_41d830

            cmp AX,R12W
            je .L_41e520
.L_41e51a:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_41e520:

            sar EBX,10
            cmp EBX,63
            je .L_41e51a

            movsxd RBX,EBX
            lea RAX,QWORD PTR [RBX+RBX*4]
            mov BYTE PTR [RBP+RAX*8+788],63
            mov EAX,DWORD PTR [RBP+12]
            sub EAX,3
            cmp EAX,1
            ja .L_41e51a

            pop RBX
            mov RDI,RBP
            pop RBP
            pop R12
            jmp .L_41aec0
.L_41e54e:

            nop
            nop
.L_41e550:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13D,EDX
            mov EBX,ESI
            mov RBP,RCX
            sub RSP,72
.L_41e56c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            cmp DWORD PTR [R12+12],2
            pxor XMM0,XMM0
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            je .L_41e6a0

            mov R14,RAX
            cmp R13W,WORD PTR [RAX+1664]
            je .L_41e6c0

            movzx ESI,R13W
            mov EAX,ESI
            sar EAX,10
            cmp BYTE PTR [R12+4669],AL
            jne .L_41e640

            movzx EDI,BYTE PTR [R12+3272]
            test EDI,EDI
            je .L_41e64e

            lea RSI,QWORD PTR [R12+3304]
            xor EDX,EDX
            jmp .L_41e5f2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41e5e0:

            cmp AL,1
            je .L_41e613
.L_41e5e4:

            add EDX,1
            add RSI,136
            cmp EDX,EDI
            je .L_41e64e
.L_41e5f2:

            movsxd RCX,EDX
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [R12+RAX*8+3306]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            ja .L_41e5e0
.L_41e613:

            cmp R15W,WORD PTR [RSI]
            jne .L_41e5e4
.L_41e619:

            xor EAX,EAX
.L_41e61b:

            mov RBX,QWORD PTR [RSP+56]
            xor RBX,QWORD PTR FS:[40]
            jne .L_41e6f0

            add RSP,72
.L_41e633:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41e640:

            mov RDI,R12
            call .L_41d830

            cmp AX,-2
            jne .L_41e619
.L_41e64e:

            mov RDI,R12
            rol BX,8
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R14
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+30],BX
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+36],AL
            call .L_430ad0

            lea RDI,QWORD PTR [RAX+88]
            mov RCX,RSP
            mov R8,RBP
            xor EDX,EDX
            mov ESI,1
            call .L_43abb0

            mov EAX,2
            jmp .L_41e61b
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e6a0:

            movzx EDX,R13W
            movzx ESI,BX
            mov RCX,RBP
            mov RDI,R12
            call .L_41adb0

            jmp .L_41e61b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41e6c0:

            lea R13,QWORD PTR [RBP+24]
            mov RDI,RAX
            mov RSI,R13
            call .L_410860

            test AL,AL
            jne .L_41e619

            mov RSI,R13
            mov RDI,R12
            call .L_41d050

            test RAX,RAX
            jne .L_41e619

            jmp .L_41e64e
.L_41e6f0:

            call __stack_chk_fail@PLT
.L_41e6f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e700:

            push R14
            push R13
            mov R13D,ESI
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,256
.L_41e715:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDI,EDI
            xor R8D,R8D
            xor R9D,R9D
            mov R12,RAX
            xor EAX,EAX
            test BYTE PTR [RBX+4668],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+38],DI
            mov WORD PTR [RSP+34],R8W
            mov WORD PTR [RSP+31],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            je .L_41e790
.L_41e767:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41e90f

            add RSP,256
.L_41e785:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_41e790:

            lea RBP,QWORD PTR [RSP+96]
            mov EDX,2
            xor ESI,ESI
            lea R14,QWORD PTR [R12+216]
            mov RDI,RBP
            call .L_42f0e0

            mov RDI,RBP
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_458f2f]
            mov RDI,RBP
            call .L_42f620

            mov RDI,RBP
            call .L_42f8d0

            mov RSI,RBP
            mov EDX,2
            mov RDI,R14
            call .L_42d7b0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_41e767

            mov ESI,2049
            mov RAX,QWORD PTR [R12+1656]
            mov EDX,10
            mov WORD PTR [RSP+38],SI
            lea RSI,QWORD PTR [RSP+38]
            mov RDI,RBP
            mov QWORD PTR [RSP+40],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_41e858

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            ja .L_41e870

            mov EDX,514
            shl EAX,10
            lea RSI,QWORD PTR [RSP+34]
            rol AX,8
            mov WORD PTR [RSP+34],DX
            mov RDI,RBP
            mov EDX,4
            mov WORD PTR [RSP+36],AX
            call .L_403d30

            test EAX,EAX
            je .L_41e870

            nop
            nop
            nop
.L_41e858:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41e767
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41e870:

            lea RSI,QWORD PTR [RSP+31]
            mov ECX,260
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+31],CX
            mov BYTE PTR [RSP+33],R13B
            call .L_403d30

            test EAX,EAX
            jne .L_41e858

            lea R13,QWORD PTR [RSP+64]
            mov RDI,RBX
            lea R12,QWORD PTR [RSP+48]
            mov RSI,R13
            call .L_415f80

            test EAX,EAX
            jne .L_41e858

            mov RDI,RBX
            call .L_415f60

            lea RCX,QWORD PTR [RIP+.L_424370]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov R8,RBX
            mov EAX,4294963391
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R14
            mov WORD PTR [RSP+82],AX
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42e6e0

            test EAX,EAX
            jne .L_41e858

            or BYTE PTR [RBX+4668],2
            lea RSI,QWORD PTR [RIP+.L_458fdf]
            mov RDX,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41e767
.L_41e90f:

            call __stack_chk_fail@PLT
.L_41e914:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41e920:

            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,8
.L_41e92b:

            call .L_430af0

            mov EDX,DWORD PTR [RBX+12]
            test EDX,EDX
            je .L_41e9a0

            cmp EDX,3
            je .L_41e980

            test BYTE PTR [RBX+4668],1
            je .L_41e990

            test BYTE PTR [RBX+56],2
            je .L_41e990

            lea RDI,QWORD PTR [RAX+2256]
            mov ESI,1
            call .L_43da10

            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBX+4677],0
            cmp EAX,1
            je .L_41e9b0

            cmp EAX,2
            jne .L_41e9da

            add RSP,8
.L_41e974:

            mov ESI,EBP
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_41e700
.L_41e980:

            xor EBP,EBP
.L_41e982:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41e990:

            mov EBP,27
            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41e9a0:

            mov EBP,13
            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_41e9b0:

            xor ESI,ESI
            mov RDI,RBX
            call .L_41b5d0

            test EAX,EAX
            mov EBP,EAX
            jne .L_41e982

            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            jmp .L_41e982
.L_41e9da:

            lea RCX,QWORD PTR [RIP+.L_459540]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,269
            call __assert_fail@PLT
.L_41e9f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41ea00:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,240
.L_41ea12:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ESI,ESI
            xor EDI,EDI
            mov EDX,2
            mov WORD PTR [RSP+18],SI
            mov WORD PTR [RSP+22],DI
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov RDI,RBX
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_458f34]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            mov RSI,RBX
            mov EDX,2
            mov RDI,R13
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_41eaee

            movzx EAX,BYTE PTR [RBP+4669]
            lea RSI,QWORD PTR [RSP+18]
            mov ECX,514
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+18],CX
            shl EAX,10
            rol AX,8
            mov WORD PTR [RSP+20],AX
            call .L_403d30

            test EAX,EAX
            je .L_41eb18
.L_41eade:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_41eaee:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41ebb6

            add RSP,240
.L_41eb0c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41eb18:

            mov RAX,QWORD PTR [R12+1656]
            mov EDX,2049
            lea RSI,QWORD PTR [RSP+22]
            mov WORD PTR [RSP+22],DX
            mov RDI,RBX
            mov EDX,10
            mov QWORD PTR [RSP+24],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_41eade

            lea R14,QWORD PTR [RSP+32]
            mov RDI,RBP
            call .L_415f60

            lea R12,QWORD PTR [R14+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            mov RSI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_415f80

            test EAX,EAX
            jne .L_41eade

            mov EAX,4294963391
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_42e6e0

            test EAX,EAX
            jne .L_41eade

            lea RSI,QWORD PTR [RIP+.L_458ff4]
            mov RDX,R12
            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_41eaee
.L_41ebb6:

            call __stack_chk_fail@PLT
.L_41ebbb:

            nop
            nop
            nop
            nop
            nop
.L_41ebc0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,EDX
            push RBP
            push RBX
            mov RBP,RCX
            mov R12,RDI
            sub RSP,200
.L_41ebdd:

            lea R13,QWORD PTR [RSP+32]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+184],RAX
            xor EAX,EAX
            call .L_430af0

            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            mov RBX,RAX
            mov WORD PTR [RSP+14],SI
            mov WORD PTR [RSP+21],DI
            mov RSI,R15
            mov RDI,R13
            mov WORD PTR [RSP+17],R8W
            add RBX,216
            call .L_42fa70

            mov RDI,R13
            call .L_42f8d0

            mov EDX,2
            mov RSI,R13
            mov RDI,RBX
            call .L_42d7b0

            test RAX,RAX
            je .L_41ec7d

            mov ECX,260
            cmp R14B,62
            mov R13,RAX
            mov WORD PTR [RSP+14],CX
            jbe .L_41ecb0

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,3
            mov RDI,RAX
            mov BYTE PTR [RSP+16],1
            call .L_403d30

            test EAX,EAX
            je .L_41ed78
.L_41ec75:

            mov RDI,R13
            call .L_4033b0
.L_41ec7d:

            mov RAX,QWORD PTR [RSP+184]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41edab

            add RSP,200
.L_41ec9b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ecb0:

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,3
            mov RDI,RAX
            mov BYTE PTR [RSP+16],0
            call .L_403d30

            test EAX,EAX
            jne .L_41ec75

            mov EDX,514
            shl R14D,10
            lea RSI,QWORD PTR [RSP+17]
            mov WORD PTR [RSP+17],DX
            rol R14W,8
            mov EDX,4
            mov RDI,R13
            mov WORD PTR [RSP+19],R14W
            call .L_403d30

            test EAX,EAX
            jne .L_41ec75

            mov EAX,2311
            mov QWORD PTR [RSP+24],0
            xor ESI,ESI
            mov WORD PTR [RSP+21],AX
            movzx EAX,BYTE PTR [R12+744]
            mov EDX,128
            mov BYTE PTR [RSP+23],AL
            nop
            nop
            nop
.L_41ed28:

            movsxd RCX,ESI
            lea RAX,QWORD PTR [RCX+RCX*4]
            test BYTE PTR [R12+RAX*8+789],64
            je .L_41ed50

            mov EDI,ESI
            mov ECX,ESI
            mov EAX,EDX
            shr DIL,3
            and ECX,7
            and EDI,31
            sar EAX,CL
            or BYTE PTR [RSP+RDI*1+24],AL
.L_41ed50:

            add ESI,1
            cmp ESI,63
            jne .L_41ed28

            lea RSI,QWORD PTR [RSP+21]
            mov EDX,11
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_41ec75

            nop
            nop
            nop
            nop
            nop
            nop
.L_41ed78:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R13
            mov RDI,RBX
            call .L_42e6e0

            test EAX,EAX
            jne .L_41ec75

            lea RDX,QWORD PTR [RBP+16]
            lea RSI,QWORD PTR [RIP+.L_459009]
            mov RDI,R12
            call .L_41aea0

            jmp .L_41ec7d
.L_41edab:

            call __stack_chk_fail@PLT
.L_41edb0:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            xor R9D,R9D
            push RBP
            push RBX
            sub RSP,56
.L_41edc4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI],48
            mov WORD PTR [RSP+26],R8W
            mov WORD PTR [RSP+30],AX
            mov WORD PTR [RSP+23],R9W
            jne .L_41edf5

            cmp BYTE PTR [RSI+1],2
            mov RBX,RSI
            je .L_41ee20
.L_41edf5:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41efa6

            add RSP,56
.L_41ee0d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ee20:

            mov R13,RDX
            lea RSI,QWORD PTR [RIP+.L_45901c]
            lea RDX,QWORD PTR [RCX+16]
            lea R14,QWORD PTR [RSP+30]
            mov RBP,RDI
            mov R12,RCX
            call .L_41aea0

            mov RCX,R14
            mov EDX,10
            mov ESI,1
            mov RDI,R13
            call .L_430f70

            test EAX,EAX
            jne .L_41edf5

            cmp BYTE PTR [RSP+31],8
            jne .L_41edf5

            lea RCX,QWORD PTR [RSP+23]
            mov EDX,3
            mov ESI,4
            mov RDI,R13
            call .L_430f70

            test EAX,EAX
            jne .L_41edf5

            cmp BYTE PTR [RSP+24],1
            jne .L_41edf5

            lea RAX,QWORD PTR [R14+2]
            xor R15D,R15D
            mov QWORD PTR [RSP+8],RAX
            jmp .L_41eeaa
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41eea0:

            add R15,1
            cmp R15,63
            je .L_41eeef
.L_41eeaa:

            movsxd RAX,R15D
            lea RAX,QWORD PTR [RAX+RAX*4]
            test BYTE PTR [RBP+RAX*8+789],64
            je .L_41eea0

            lea RAX,QWORD PTR [R15+R15*4]
            mov RSI,QWORD PTR [RSP+8]
            mov DWORD PTR [RSP],R15D
            lea RDI,QWORD PTR [RBP+RAX*8+752]
            call .L_408380

            test AL,AL
            mov EDX,DWORD PTR [RSP]
            je .L_41eea0
.L_41eedc:

            mov RCX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_41ebc0

            jmp .L_41edf5
.L_41eeef:

            movzx EAX,BYTE PTR [RSP+25]
            cmp AL,2
            je .L_41efab

            jb .L_41edf5

            cmp AL,4
            ja .L_41edf5
.L_41ef0a:

            lea RCX,QWORD PTR [RSP+26]
            mov EDX,4
            mov ESI,2
            mov RDI,R13
            call .L_430f70

            test EAX,EAX
            jne .L_41efe3

            cmp BYTE PTR [RSP+27],2
            jne .L_41edf5

            movzx R13D,WORD PTR [RSP+28]
            rol R13W,8
            movzx R13D,R13W
            sar R13D,10
            cmp R13D,63
            je .L_41efe3

            movsxd R15,R13D
            imul RAX,R15,40
            lea RDX,QWORD PTR [RBP+RAX*1+784]
            test BYTE PTR [RDX+5],64
            jne .L_41effa
.L_41ef6a:

            imul R15,R15,40
            cmp BYTE PTR [RBP+R15*1+789],0
            js .L_41efe3
.L_41ef79:

            mov ESI,R13D
            mov RDI,RBP
            call .L_41b270

            cmp AL,62
            movzx ECX,AL
            ja .L_41efe3
.L_41ef8b:

            movsxd RAX,ECX
            mov RDX,QWORD PTR [RSP+32]
            imul RAX,RAX,40
            mov QWORD PTR [RBP+RAX*1+752],RDX
            mov EDX,ECX
            jmp .L_41eedc
.L_41efa6:

            call __stack_chk_fail@PLT
.L_41efab:

            xor ECX,ECX
            xor EDX,EDX
            nop
.L_41efb0:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBP+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_41efb0

            cmp BYTE PTR [RBP+4661],CL
            jbe .L_41eedc

            jmp .L_41ef0a
.L_41efe3:

            mov RDI,RBP
            call .L_41b300

            movzx ECX,AL
            cmp AL,62
            mov EDX,ECX
            ja .L_41eedc

            jmp .L_41ef8b
.L_41effa:

            lea RSI,QWORD PTR [R14+2]
            lea RDI,QWORD PTR [RBP+RAX*1+752]
            mov QWORD PTR [RSP],RDX
            call .L_408390

            test AL,AL
            jne .L_41efe3

            mov RDX,QWORD PTR [RSP]
            test BYTE PTR [RDX+5],64
            je .L_41ef6a

            jmp .L_41ef79
.L_41f026:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f030:

            jmp .L_41edb0
.L_41f035:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f040:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_41f051:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI],48
            mov WORD PTR [RSP+14],R8W
            mov WORD PTR [RSP+10],AX
            jne .L_41f07c

            cmp BYTE PTR [RSI+1],2
            mov RBX,RSI
            je .L_41f0a0
.L_41f07c:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_41f190

            add RSP,40
.L_41f094:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_41f0a0:

            lea R14,QWORD PTR [RCX+16]
            lea RSI,QWORD PTR [RIP+.L_459034]
            mov RBP,RDX
            mov R12,RDI
            mov R13,RCX
            mov RDX,R14
            call .L_41aea0

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,4
            mov ESI,2
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_41f07c

            cmp BYTE PTR [RSP+11],2
            jne .L_41f07c

            lea R15,QWORD PTR [RSP+14]
            mov EDX,10
            mov ESI,1
            mov RDI,RBP
            mov RCX,R15
            call .L_430f70

            test EAX,EAX
            jne .L_41f07c

            cmp BYTE PTR [RSP+15],8
            jne .L_41f07c

            movzx EBP,WORD PTR [RSP+12]
            rol BP,8
            movzx EBP,BP
            sar EBP,10
            cmp EBP,63
            je .L_41f07c

            movsxd RAX,EBP
            lea RSI,QWORD PTR [R15+2]
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RDI,QWORD PTR [R12+RAX*8+752]
            call .L_408380

            test AL,AL
            je .L_41f07c

            mov ESI,EBP
            mov RDI,R12
            call .L_41b3b0

            mov RDI,R12
            call .L_430af0

            test BYTE PTR [RBX],48
            jne .L_41f07c

            lea RDI,QWORD PTR [RAX+216]
            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            call .L_42e970

            test EAX,EAX
            jne .L_41f07c

            lea RSI,QWORD PTR [RIP+.L_45904c]
            mov RDX,R14
            mov RDI,R12
            call .L_41aea0

            jmp .L_41f07c
.L_41f190:

            call __stack_chk_fail@PLT
.L_41f195:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f1a0:

            jmp .L_41f040
.L_41f1a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f1b0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_41f1c0:

            movzx EAX,BYTE PTR [RDI+4678]
            cmp AL,254
            je .L_41f430
.L_41f1cf:

            movsx EAX,AL
            xor EDX,EDX
            mov BYTE PTR [RBP+5],0
            shl EAX,6
            mov WORD PTR [RBP+3],DX
            mov RDI,RBX
            mov BYTE PTR [RBP+2],AL
            call .L_415eb0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx R12D,BYTE PTR [RBX+RAX*8+789]
            shr R12B,2
            and R12D,15
            cmp DWORD PTR [RBX+12],4
            ja .L_41f265

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_459154]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_41f21b:

            movzx EAX,BYTE PTR [RBX+46]
            cmp AL,2
            je .L_41f4e9

            cmp AL,3
            je .L_41f4f6

            cmp AL,1
            jne .L_41f23b

            add BYTE PTR [RBP+5],1
            movzx EAX,BYTE PTR [RBX+46]
.L_41f23b:

            sub EAX,1
            mov EDX,16
            cmp AL,2
            ja .L_41f255

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            movzx EDX,BYTE PTR [RDX+RAX*1]
.L_41f255:

            add R12D,EDX
            mov EAX,16
            cmp R12B,16
            cmova R12D,EAX
.L_41f265:

            mov BYTE PTR [RBP+8],0
            xor EAX,EAX
            jmp .L_41f292
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41f270:

            cmp DL,3
            je .L_41f330

            cmp DL,1
            jne .L_41f288

            add BYTE PTR [RBP+5],1
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f288:

            add RAX,1
            cmp RAX,63
            je .L_41f306
.L_41f292:

            movsxd RDX,EAX
            mov ECX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            test BYTE PTR [RBX+RDX*8+789],64
            je .L_41f2a9

            add BYTE PTR [RBP+8],1
.L_41f2a9:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDI,QWORD PTR [RBX+RDX*8]
            movzx EDX,BYTE PTR [RDI+778]
            and EDX,7
            cmp DL,7
            jne .L_41f288

            movzx EDX,BYTE PTR [RBX+4669]
            cmp EDX,ECX
            je .L_41f288

            movzx EDX,BYTE PTR [RDI+789]
            lea RSI,QWORD PTR [RAX+RAX*4]
            shl RSI,3
            mov ECX,EDX
            movzx EDX,BYTE PTR [RBX+RSI*1+782]
            and ECX,3
            cmp DL,CL
            cmova EDX,ECX
            cmp DL,2
            jne .L_41f270

            add RAX,1
            add BYTE PTR [RBP+4],1
            cmp RAX,63
            jne .L_41f292
.L_41f306:

            mov BYTE PTR [RBP+6],R12B
            movzx EAX,BYTE PTR [RBX+744]
            mov BYTE PTR [RBP+11],1
            mov BYTE PTR [RBP+7],AL
            mov EAX,5
            mov WORD PTR [RBP+9],AX
            add RSP,8
.L_41f325:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41f330:

            add BYTE PTR [RBP+3],1
            jmp .L_41f288
.L_41f339:

            mov RDI,RBX
            mov R13D,16
            call .L_415eb0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+788]
            cmp AL,62
            ja .L_41f383

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_41f383

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_41f503
.L_41f383:

            mov RDI,RBX
            call .L_415eb0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            cmp BYTE PTR [RBX+RAX*8+788],62
            jbe .L_41f495
.L_41f3a0:

            mov RDI,RBX
            mov R12D,16
            call .L_415eb0

            cmp AL,62
            ja .L_41f265

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_41f265

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            jne .L_41f265

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_41f265

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            movzx ECX,BYTE PTR [RDX+RAX*1]
            cmp CL,16
            cmovbe R12D,ECX
            jmp .L_41f265
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_41f428:

            xor R12D,R12D
            jmp .L_41f265
.L_41f430:

            movzx EDI,BYTE PTR [RDI+3272]
            test EDI,EDI
            mov R8D,EDI
            je .L_41f475

            xor EAX,EAX
            xor ESI,ESI
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f448:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            movzx EDX,BYTE PTR [RBX+RDX*8+3306]
            and EDX,7
            cmp DL,7
            sete DL
            add EAX,1
            add ESI,EDX
            cmp EDI,EAX
            jne .L_41f448

            movzx ESI,SIL
            sub EDI,ESI
.L_41f475:

            movzx EDX,R8B
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            movzx EAX,AL
            cmp EAX,EDI
            setg AL
            neg EAX
            jmp .L_41f1cf
.L_41f495:

            mov RDI,RBX
            call .L_415eb0

            cmp AL,62
            mov ESI,16
            ja .L_41f4cb

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx EDX,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_41f4cb

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_41f53f
.L_41f4cb:

            add R12D,R13D
            cmp R12B,SIL
            ja .L_41f3a0

            cmp R12B,16
            mov EAX,16
            cmova R12D,EAX
            jmp .L_41f265
.L_41f4e9:

            add BYTE PTR [RBP+4],1
            movzx EAX,BYTE PTR [RBX+46]
            jmp .L_41f23b
.L_41f4f6:

            add BYTE PTR [RBP+3],1
            movzx EAX,BYTE PTR [RBX+46]
            jmp .L_41f23b
.L_41f503:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_41f383

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            movzx R13D,BYTE PTR [RDX+RAX*1]
            jmp .L_41f383
.L_41f53f:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_41f4cb

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            movzx ESI,BYTE PTR [RDX+RAX*1]
            jmp .L_41f4cb
.L_41f57a:

            lea RCX,QWORD PTR [RIP+.L_4592a0]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,4589
            call __assert_fail@PLT
.L_41f599:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41f5a0:

            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,40
.L_41f5a9:

            lea RBX,QWORD PTR [RSP+12]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,2575
            mov WORD PTR [RSP+12],AX
            call .L_41f1b0

            mov EDX,12
            mov RSI,RBX
            mov RDI,RBP
            call .L_403d30

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41f5f7

            add RSP,40
.L_41f5f4:

            pop RBX
            pop RBP
            ret 
.L_41f5f7:

            call __stack_chk_fail@PLT
.L_41f5fc:

            nop
            nop
            nop
            nop
.L_41f600:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R13,RSI
            push RBX
            mov RBP,RDI
            mov R12,RDX
            sub RSP,32
.L_41f618:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_4161c0

            test RAX,RAX
            je .L_41f655

            or BYTE PTR [RAX+78],64
            mov EDX,10
            mov RSI,RAX
            mov RDI,RBP
            mov RBX,RAX
            call .L_416200

            test EAX,EAX
            je .L_41f680
.L_41f64d:

            mov RDI,RBX
            call .L_4033b0
.L_41f655:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_41f7d1

            add RSP,32
.L_41f66f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41f680:

            mov RSI,RBX
            mov RDI,RBP
            call .L_416280

            test EAX,EAX
            jne .L_41f64d

            mov RSI,RBX
            mov RDI,RBP
            call .L_4165e0

            test EAX,EAX
            jne .L_41f64d

            mov RSI,RBX
            mov RDI,RBP
            call .L_4164c0

            test EAX,EAX
            jne .L_41f64d

            mov RSI,RBX
            mov RDI,RBP
            call .L_416520

            test EAX,EAX
            jne .L_41f64d

            movzx ECX,BYTE PTR [R12+1]
            lea RDX,QWORD PTR [R12+2]
            mov RSI,RBX
            mov RDI,RBP
            call .L_416450

            test EAX,EAX
            jne .L_41f64d

            mov RDI,R13
            call .L_42c000

            lea RDX,QWORD PTR [R13+96]
            mov ECX,8
            mov RSI,RBX
            mov RDI,RBP
            call .L_4163e0

            test EAX,EAX
            jne .L_41f64d

            mov RDI,RBP
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            lea RDI,QWORD PTR [R13+28]
            mov R12D,EAX
            call .L_412ff0

            movsx EDI,R12B
            movsx ESI,AL
            call .L_413220

            mov RSI,RBX
            movzx EDX,AL
            mov RDI,RBP
            call .L_4167d0

            test EAX,EAX
            jne .L_41f64d

            mov RSI,RBX
            mov RDI,RBP
            call .L_41f5a0

            test EAX,EAX
            jne .L_41f64d

            mov RSI,RBX
            mov RDI,RBP
            call .L_416820

            test EAX,EAX
            jne .L_41f64d

            mov R12,RSP
            mov ECX,14
            mov RSI,R13
            lea RDX,QWORD PTR [R12+2]
            mov RDI,RDX

            rep stosb BYTE PTR [RDI]

            mov RDI,R12
            mov WORD PTR [RSP],33022
            call .L_40f0b0

            test R14B,R14B
            je .L_41f7d6

            call .L_401460

            movzx EAX,AX
            mov ECX,500
            cdq 
            idiv ECX
            lea EAX,DWORD PTR [RDX+1]
.L_41f7a1:

            movzx ECX,AX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_417880

            test EAX,EAX
            jne .L_41f64d

            lea RSI,QWORD PTR [RIP+.L_459067]
            mov RDX,R12
            mov RDI,RBP
            call .L_41aea0

            jmp .L_41f655
.L_41f7d1:

            call __stack_chk_fail@PLT
.L_41f7d6:

            call .L_401460

            movzx EAX,AX
            mov ECX,1000
            cdq 
            idiv ECX
            lea EAX,DWORD PTR [RDX+1]
            jmp .L_41f7a1
.L_41f7eb:

            nop
            nop
            nop
            nop
            nop
.L_41f7f0:

            push R15
            push R14
            xor ECX,ECX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            lea RBP,QWORD PTR [RDX+16]
            mov RBX,RDI
            mov R14D,13
            sub RSP,56
.L_41f812:

            mov R13,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+30],SI
            lea RSI,QWORD PTR [RIP+.L_45907d]
            mov RDX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+15],CX
            mov WORD PTR [RSP+18],AX
            call .L_41aea0

            test BYTE PTR [RBX+4668],1
            je .L_41fa78

            test BYTE PTR [RBX+56],2
            je .L_41fa78

            call .L_401240

            sub EAX,DWORD PTR [RBX+748]
            mov EDX,274877907
            movzx ECX,BYTE PTR [RBX+4660]
            mul EDX
            shr EDX,6
            cmp ECX,EDX
            jbe .L_41faa0

            cmp DWORD PTR [RBX+12],4
            je .L_41f940

            mov RDI,RBX
            call .L_415eb0

            cmp AL,62
            ja .L_41f8c0

            cmp AL,BYTE PTR [RBX+4669]
            movzx EDX,AL
            movzx ECX,AL
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDX,QWORD PTR [RBX+RDX*8+752]
            je .L_41f8c0

            movzx EAX,BYTE PTR [RDX+26]
            and EAX,7
            cmp AL,7
            je .L_41fb40
.L_41f8c0:

            cmp DWORD PTR [RBX+12],2
            je .L_41fac0
.L_41f8ca:

            mov RDI,RBX
            call .L_415eb0

            movzx EAX,AL
            mov RDI,RBX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx R14D,BYTE PTR [RBX+RAX*8+789]
            call .L_415eb0

            movzx EAX,AL
            mov EDX,16
            lea RAX,QWORD PTR [RAX+RAX*4]
            shr R14B,2
            movzx EAX,BYTE PTR [RBX+RAX*8+788]
            and R14D,15
            cmp AL,62
            ja .L_41f933

            cmp AL,BYTE PTR [RBX+4669]
            movzx ECX,AL
            movzx ESI,AL
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RCX,QWORD PTR [RBX+RCX*8+752]
            je .L_41f933

            movzx EAX,BYTE PTR [RCX+26]
            and EAX,7
            cmp AL,7
            je .L_41faf0
.L_41f933:

            add R14D,EDX
            cmp R14D,15
            jg .L_41faa0
.L_41f940:

            lea R15,QWORD PTR [RSP+22]
            mov RDI,RBP
            mov RSI,R15
            call .L_40f0c0

            lea RCX,QWORD PTR [RSP+18]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov R14D,EAX
            jne .L_41fa78

            cmp BYTE PTR [RSP+19],2
            jne .L_41fab0

            movzx EAX,WORD PTR [RSP+20]
            rol AX,8
            cmp AX,1
            jbe .L_41fab0

            lea RCX,QWORD PTR [RSP+15]
            mov EDX,3
            mov ESI,14
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov R14D,EAX
            jne .L_41fa78

            cmp BYTE PTR [RSP+16],1
            jne .L_41fab0

            cmp DWORD PTR [RBX+12],4
            ja .L_41f9e1

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_459168]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_41f9d6:

            test BYTE PTR [RSP+17],64
            je .L_41fa78
.L_41f9e1:

            lea RBP,QWORD PTR [RSP+30]
            mov EDX,10
            mov ESI,3
            mov RDI,R12
            mov RCX,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_41fb7c

            movzx EAX,BYTE PTR [RSP+31]
            sub EAX,4
            cmp AL,4
            ja .L_41fab0

            mov RSI,R15
            mov RDI,RBX
            call .L_41b940

            test RAX,RAX
            mov R12,RAX
            je .L_41fb89
.L_41fa2a:

            movzx EAX,BYTE PTR [R12+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_41fa52

            sub AL,1
            je .L_41fa52

            call .L_401240

            mov DWORD PTR [R12+92],5
            mov DWORD PTR [R12+8],EAX
.L_41fa52:

            movzx ECX,BYTE PTR [RSP+17]
            mov RDX,RBP
            mov RSI,R12
            mov RDI,RBX
            shr CL,6
            xor ECX,1
            and ECX,1
            call .L_41f600

            mov R14D,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fa78:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_41fb84

            add RSP,56
.L_41fa93:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_41faa0:

            mov R14D,2
            jmp .L_41fa78
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fab0:

            mov R14D,6
            jmp .L_41fa78
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fac0:

            mov RDI,RBX
            call .L_415eb0

            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            xor EAX,60
            test AL,60
            jne .L_41f940

            jmp .L_41f8ca
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41faf0:

            lea RAX,QWORD PTR [RSI+RSI*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            mov ESI,EAX
            movzx EAX,BYTE PTR [RCX+30]
            cmp AL,SIL
            cmova EAX,ESI
            sub EAX,1
            cmp AL,2
            ja .L_41f933

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            movzx EDX,BYTE PTR [RDX+RAX*1]
            jmp .L_41f933
.L_41fb29:

            cmp BYTE PTR [RSP+17],0
            jns .L_41fa78

            jmp .L_41f9e1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fb40:

            lea RAX,QWORD PTR [RCX+RCX*4]
            movzx EDX,BYTE PTR [RDX+30]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            and EAX,3
            cmp AL,DL
            cmova EAX,EDX
            sub EAX,1
            cmp AL,2
            ja .L_41f8c0

            lea RDX,QWORD PTR [RIP+.L_459230]
            movzx EAX,AL
            cmp BYTE PTR [RDX+RAX*1],15
            jbe .L_41f940

            jmp .L_41f8c0
.L_41fb7c:

            mov R14D,EAX
            jmp .L_41fa78
.L_41fb84:

            call __stack_chk_fail@PLT
.L_41fb89:

            movzx ECX,BYTE PTR [RBX+3272]
            test ECX,ECX
            je .L_41fa78

            test BYTE PTR [RBX+3306],7
            je .L_41fbc8

            xor EAX,EAX
            jmp .L_41fbbc
.L_41fba5:

            movsxd RDX,EAX
            mov RSI,RDX
            shl RSI,4
            add RSI,RDX
            test BYTE PTR [RBX+RSI*8+3306],7
            je .L_41fbca
.L_41fbbc:

            add EAX,1
            cmp EAX,ECX
            jne .L_41fba5

            jmp .L_41fa78
.L_41fbc8:

            xor EDX,EDX
.L_41fbca:

            imul RDX,RDX,136
            xor EAX,EAX
            mov ECX,32
            lea R12,QWORD PTR [RBX+RDX*1+3280]
            lea RDX,QWORD PTR [R12+8]
            lea R14,QWORD PTR [R12+28]
            mov RDI,RDX

            rep stosd DWORD PTR [RDI]

            mov RDI,R14
            mov RAX,QWORD PTR [RSP+22]
            mov QWORD PTR [R12],RAX
            call .L_413070

            movsx R13D,BYTE PTR [R13+3]
            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            mov EDX,R13D
            movsx ESI,AL
            mov RDI,R14
            call .L_413080

            movzx EAX,BYTE PTR [R12+26]
            mov BYTE PTR [R12+27],0
            and EAX,120
            or EAX,2
            mov BYTE PTR [R12+26],AL
            jmp .L_41fa2a
.L_41fc43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fc50:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            sub RSP,136
.L_41fc6a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_430af0

            mov R15,RAX
            xor EAX,EAX
            mov EDX,19
            mov WORD PTR [RSP+60],AX
            movzx EAX,WORD PTR [R12+58]
            mov RDI,R12
            mov WORD PTR [RSP+62],DX
            mov EDX,2
            mov WORD PTR [RSP+38],AX
            lea RAX,QWORD PTR [RSP+62]
            mov RSI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_403d30

            test EAX,EAX
            mov DWORD PTR [RSP+32],EAX
            jne .L_41fdbc

            lea RAX,QWORD PTR [RSP+60]
            xor EBP,EBP
            lea RBX,QWORD PTR [RSP+80]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [R15+7520]
            lea R15,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+24],RAX
            jmp .L_41fd2f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41fcf8:

            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov EDX,17
            mov RSI,R15
            mov RDI,R12
            mov BYTE PTR [RSP+96],0
            movups XMMWORD PTR [RSP+97],XMM0
            call .L_403d30

            test EAX,EAX
            jne .L_41fdb8
.L_41fd20:

            movzx EAX,BYTE PTR [RSP+96]
            sar AL,7
            and EAX,4294967288
            lea EBP,DWORD PTR [RBP+RAX*1+17]
.L_41fd2f:

            mov RDI,R13
            call .L_430ac0

            mov RDX,QWORD PTR [RSP+8]
            mov RCX,RBX
            mov RSI,RAX
            mov RDI,R14
            call .L_42bcb0

            test EAX,EAX
            jne .L_41fde8

            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            jne .L_41fcf8

            mov RDX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+24]
            mov RSI,RBX
            call .L_426230

            test EAX,EAX
            jne .L_41fcf8

            movzx EAX,BYTE PTR [RSP+73]
            mov RDI,RBX
            or EAX,4294967168
            mov BYTE PTR [RSP+96],AL
            call .L_40f090

            movsx EDX,BYTE PTR [RSP+96]
            mov RAX,QWORD PTR [RAX]
            mov RSI,R15
            mov RDI,R12
            mov QWORD PTR [RSP+97],RAX
            sar EDX,31
            and EDX,4294967288
            add EDX,17
            call .L_403d30

            test EAX,EAX
            je .L_41fd20

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_41fdb8:

            mov DWORD PTR [RSP+32],EAX
.L_41fdbc:

            mov RCX,QWORD PTR [RSP+120]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+32]
            jne .L_41fe06

            add RSP,136
.L_41fdd7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41fde8:

            movzx ESI,WORD PTR [RSP+38]
            mov RCX,QWORD PTR [RSP+40]
            mov EDX,2
            mov RDI,R12
            mov BYTE PTR [RSP+63],BPL
            call .L_403ac0

            jmp .L_41fdbc
.L_41fe06:

            call __stack_chk_fail@PLT
.L_41fe0b:

            nop
            nop
            nop
            nop
            nop
.L_41fe10:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            mov EBP,R8D
            sub RSP,24
.L_41fe2a:

            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP],R9
            call .L_4161c0

            test RAX,RAX
            je .L_41fed8

            mov EDX,14
            mov RSI,RAX
            mov RDI,R13
            mov R12,RAX
            call .L_416200

            test EAX,EAX
            jne .L_41fed0

            test BPL,BPL
            je .L_41ff15

            movzx EBP,BPL
            lea EAX,DWORD PTR [RBP-1]
            lea RBP,QWORD PTR [RIP+.L_45917c]
            lea RBX,QWORD PTR [R15+RAX*1+1]
            nop
            nop
            nop
            nop
.L_41fe78:

            cmp BYTE PTR [R15],19
            ja .L_41ff08

            movzx EAX,BYTE PTR [R15]
            movsxd RAX,DWORD PTR [RBP+RAX*4]
            add RAX,RBP
            jmp RAX
.L_41fe90:

            movzx EDX,BYTE PTR [R14+26]
            mov RSI,R12
            mov RDI,R13
            shr DL,3
            not EDX
            and EDX,1
            call .L_4166a0

            test EAX,EAX
            jne .L_41fed0

            mov RSI,R12
            mov RDI,R13
            call .L_416870

            test EAX,EAX
            jne .L_41fed0

            mov RSI,R12
            mov RDI,R13
            call .L_416910

            test EAX,EAX
            je .L_41ff08

            nop
            nop
            nop
            nop
            nop
            nop
.L_41fed0:

            mov RDI,R12
            call .L_4033b0
.L_41fed8:

            add RSP,24
.L_41fedc:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41fef0:

            mov RDX,R14
            mov RSI,R12
            mov RDI,R13
            call .L_41fc50

            test EAX,EAX
            jne .L_41fed0

            nop
            nop
            nop
            nop
            nop
            nop
.L_41ff08:

            add R15,1
            cmp RBX,R15
            jne .L_41fe78
.L_41ff15:

            mov RBX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R13
            add RBX,16
            mov RDX,RBX
            call .L_416d90

            test EAX,EAX
            jne .L_41fed0

            test R14,R14
            je .L_420053

            movzx ECX,WORD PTR [R14+24]
            lea RSI,QWORD PTR [RIP+.L_459608]
            mov RDX,RBX
            mov RDI,R13
            call .L_41aeb0

            jmp .L_41fed8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_41ff58:

            mov EDX,1
            mov RSI,R12
            mov RDI,R13
            call .L_4162f0

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ff78:

            mov RSI,R12
            mov RDI,R13
            call .L_4165e0

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41ff90:

            mov RSI,R12
            mov RDI,R13
            call .L_416520

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ffb0:

            mov RSI,R12
            mov RDI,R13
            call .L_4164c0

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_41ffd0:

            mov RAX,QWORD PTR [RSP]
            mov RSI,R12
            mov RDI,R13
            movzx ECX,BYTE PTR [RAX+1]
            lea RDX,QWORD PTR [RAX+2]
            call .L_416450

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_41fff8:

            mov EDX,DWORD PTR [R14+92]
            mov RSI,R12
            mov RDI,R13
            call .L_416390

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_420018:

            mov RSI,R12
            mov RDI,R13
            call .L_416280

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
.L_420030:

            movzx EDX,BYTE PTR [R14+26]
            mov RSI,R12
            mov RDI,R13
            shr DL,3
            and EDX,15
            call .L_416340

            test EAX,EAX
            je .L_41ff08

            jmp .L_41fed0
.L_420053:

            lea RSI,QWORD PTR [RIP+.L_459608]
            mov RDX,RBX
            mov RDI,R13
            call .L_41aea0

            jmp .L_41fed8
.L_42006a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_420070:

            movzx EAX,BYTE PTR [RDI+744]
            push R15
            lea R9,QWORD PTR [RDI+752]
            push R14
            mov QWORD PTR [RSI+3],0
            xor EDX,EDX
            push R13
            xor R14D,R14D
            push R12
            push RBP
            mov EBP,128
            push RBX
.L_42009a:

            mov BYTE PTR [RSI+2],AL
            xor EBX,EBX
            jmp .L_42017d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4200a8:

            movzx R8D,BYTE PTR [R9+26]
            movzx R11D,BYTE PTR [R9+36]
            and R8D,7
            cmp R8B,7
            je .L_4201d0
.L_4200c0:

            xor R10D,R10D
            cmp R11B,62
            mov R8D,16
            ja .L_420127
.L_4200cf:

            lea R10,QWORD PTR [RAX+RAX*4]
            mov R13D,16
            movzx R10D,BYTE PTR [RDI+R10*8+789]
            shr R10B,2
            and R10D,15
            cmp R12B,R11B
            je .L_420112

            movzx R12D,R11B
            lea R11,QWORD PTR [R11+R11*4]
            lea R15,QWORD PTR [RDI+R11*8+752]
            movzx R11D,BYTE PTR [R15+26]
            and R11D,7
            cmp R11B,7
            je .L_420218
.L_420112:

            add R10D,R13D
            cmp R8B,R10B
            cmova R8D,R10D
.L_42011c:

            cmp R8B,15
            mov R10D,R8D
            cmova R10D,R14D
.L_420127:

            movzx R8D,BYTE PTR [RSI+RCX*1+11]
            lea RAX,QWORD PTR [RAX+RAX*4]
            and R8D,4294967280
            or R8D,R10D
            mov BYTE PTR [RSI+RCX*1+11],R8B
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            and R8D,63
            shl EAX,6
            or EAX,R8D
            mov BYTE PTR [RSI+RCX*1+11],AL
            movzx R8D,BYTE PTR [R9+30]
            and EAX,4294967247
            shl R8D,4
            and R8D,48
            or EAX,R8D
            mov BYTE PTR [RSI+RCX*1+11],AL
.L_42016a:

            add EBX,1
.L_42016d:

            add EDX,1
            add R9,40
            cmp EDX,63
            je .L_420260
.L_42017d:

            movsxd RAX,EDX
            lea RCX,QWORD PTR [RAX+RAX*4]
            lea R10,QWORD PTR [RDI+RCX*8+784]
            test BYTE PTR [R10+5],64
            je .L_42016d

            mov R8D,EDX
            mov ECX,EDX
            mov R15D,EBP
            shr R8B,3
            and ECX,7
            and R8D,31
            sar R15D,CL
            movzx ECX,BL
            or BYTE PTR [RSI+R8*1+3],R15B
            movzx R12D,BYTE PTR [RDI+4669]
            cmp R12B,DL
            jne .L_4200a8

            mov BYTE PTR [RSI+RCX*1+11],1
            jmp .L_42016a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4201d0:

            movzx R8D,BYTE PTR [R10+5]
            mov R10D,R8D
            movzx R8D,BYTE PTR [R9+30]
            and R10D,3
            cmp R8B,R10B
            cmova R8D,R10D
            sub R8D,1
            cmp R8B,2
            ja .L_4200c0

            lea R15,QWORD PTR [RIP+.L_459230]
            movzx R8D,R8B
            cmp R11B,62
            movzx R8D,BYTE PTR [R15+R8*1]
            ja .L_42011c

            jmp .L_4200cf
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420218:

            lea R11,QWORD PTR [R12+R12*4]
            movzx R11D,BYTE PTR [RDI+R11*8+789]
            and R11D,3
            mov R12D,R11D
            movzx R11D,BYTE PTR [R15+30]
            cmp R11B,R12B
            cmova R11D,R12D
            sub R11D,1
            cmp R11B,2
            ja .L_420112

            lea R15,QWORD PTR [RIP+.L_459230]
            movzx R11D,R11B
            movzx R13D,BYTE PTR [R15+R11*1]
            jmp .L_420112
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420260:

            add EBX,9
            mov BYTE PTR [RSI+1],BL
            pop RBX
.L_420267:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_420271:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420280:

            push RBP
            push RBX
            mov RBP,RSI
            sub RSP,104
.L_420289:

            mov RBX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            mov RSI,RBX
            mov EAX,18441
            mov WORD PTR [RSP],AX
            call .L_420070

            movzx EAX,BYTE PTR [RSP+1]
            mov RDI,RBP
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4202d4

            add RSP,104
.L_4202d1:

            pop RBX
            pop RBP
            ret 
.L_4202d4:

            call __stack_chk_fail@PLT
.L_4202d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4202e0:

            push R12
            push RBP
            push RBX
            sub RSP,48
            mov ECX,DWORD PTR [RDI+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test ECX,ECX
            jne .L_420330

            test BYTE PTR [RDI+4668],2
            mov RBX,RDI
            je .L_420338
.L_42030b:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42041c

            add RSP,48
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420330:

            xor EAX,EAX
            jmp .L_42030b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_420338:

            call .L_4161c0

            test RAX,RAX
            mov RBP,RAX
            je .L_420370

            mov EDX,4
            mov RSI,RAX
            mov RDI,RBX
            call .L_416200

            test EAX,EAX
            je .L_420380
.L_420359:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42030b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420370:

            mov EAX,3
            jmp .L_42030b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420380:

            mov RSI,RBP
            mov RDI,RBX
            call .L_416280

            test EAX,EAX
            jne .L_420359

            mov RSI,RBP
            mov RDI,RBX
            call .L_4165e0

            test EAX,EAX
            jne .L_420359

            mov EAX,DWORD PTR [RBX+12]
            cmp EAX,1
            jbe .L_420421

            sub EAX,3
            cmp EAX,1
            ja .L_4203bd

            mov RSI,RBP
            mov RDI,RBX
            call .L_420280

            test EAX,EAX
            jne .L_420359
.L_4203bd:

            lea R12,QWORD PTR [RSP+16]
            mov EDX,256
            mov EAX,767
            mov WORD PTR [RSP+30],DX
            mov RSI,RBP
            mov RDI,RBX
            mov RDX,R12
            mov QWORD PTR [RSP+18],0
            mov DWORD PTR [RSP+26],0
            mov WORD PTR [RSP+16],AX
            call .L_416d90

            test EAX,EAX
            jne .L_420359

            lea RSI,QWORD PTR [RIP+.L_459094]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42030b
.L_42041c:

            call __stack_chk_fail@PLT
.L_420421:

            lea RCX,QWORD PTR [RIP+.L_459500]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,578
            call __assert_fail@PLT
.L_420440:

            test BYTE PTR [RDI+56],2
            jne .L_420450

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420450:

            sub RSP,8
            call .L_4202e0

            mov EAX,1
            add RSP,8
            ret 
.L_420463:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420470:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a20

            xor EDX,EDX
            test BYTE PTR [RAX+56],2
            je .L_420496

            mov RDI,RAX
            call .L_4202e0

            mov EDX,1
.L_420496:

            mov EAX,EDX
            add RSP,8
            ret 
.L_42049d:

            nop
            nop
            nop
.L_4204a0:

            push R15
            push R14
            mov R15D,1
            push R13
            push R12
            mov R13,R8
            push RBP
            push RBX
            mov R12,RSI
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,24
.L_4204c0:

            mov RAX,QWORD PTR [RSI+40]
            test RDX,RDX
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+8],RAX
            je .L_4204e6

            movzx EAX,BYTE PTR [RDX+26]
            xor R15D,R15D
            and EAX,7
            cmp AL,7
            setne R15B
            add R15D,1
.L_4204e6:

            mov RDI,RBX
            call .L_4161c0

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_42051b

            mov EDX,R15D
            mov RSI,R14
            mov RDI,RBX
            call .L_416200

            test EAX,EAX
            je .L_420530
.L_42050d:

            mov RDI,R14
            mov DWORD PTR [RSP],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP]
.L_42051b:

            add RSP,24
.L_42051f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420530:

            mov RSI,R14
            mov RDI,RBX
            call .L_416820

            test EAX,EAX
            jne .L_42050d

            mov RSI,R14
            mov RDI,RBX
            call .L_416280

            test EAX,EAX
            jne .L_42050d

            movzx ECX,BYTE PTR [R13+1]
            lea RDX,QWORD PTR [R13+2]
            mov RSI,R14
            mov RDI,RBX
            call .L_416450

            test EAX,EAX
            jne .L_42050d

            mov RSI,R14
            mov RDI,RBX
            call .L_4164c0

            test EAX,EAX
            jne .L_42050d

            mov RSI,R14
            mov RDI,RBX
            call .L_416520

            test EAX,EAX
            jne .L_42050d

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBX
            movsx R13D,BYTE PTR [RAX+3]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            mov ESI,R13D
            movsx EDI,AL
            call .L_413220

            mov RSI,R14
            movzx EDX,AL
            mov RDI,RBX
            call .L_4167d0

            test EAX,EAX
            jne .L_42050d

            test RBP,RBP
            je .L_420715

            test WORD PTR [RBP+24],511
            je .L_420728
.L_4205d8:

            mov RAX,QWORD PTR [RSP]
            cmp BYTE PTR [RAX+1],0
            je .L_420640
.L_4205e2:

            mov RAX,QWORD PTR [RSP]
            xor R15D,R15D
            lea R13,QWORD PTR [RAX+2]
.L_4205ed:

            movzx EAX,R15B
            movzx EAX,BYTE PTR [R13+RAX*1]
            cmp AL,10
            je .L_420611

            cmp AL,16
            je .L_42062d

            cmp AL,9
            je .L_4206fd
.L_420607:

            mov EAX,2
            jmp .L_42050d
.L_420611:

            test RBP,RBP
            je .L_420607

            movzx EDX,WORD PTR [RBP+24]
            mov RSI,R14
            mov RDI,RBX
            call .L_416580

            test EAX,EAX
            jne .L_42050d
.L_42062d:

            mov RAX,QWORD PTR [RSP]
            add R15D,1
            cmp R15B,BYTE PTR [RAX+1]
            jb .L_4205ed

            test RBP,RBP
            je .L_4206a3
.L_420640:

            movzx EAX,BYTE PTR [RBP+26]
            and EAX,7
            cmp AL,7
            je .L_4206a3

            mov RDI,RBP
            call .L_42bc00

            lea RDX,QWORD PTR [RBP+12]
            mov ECX,8
            mov RSI,R14
            mov RDI,RBX
            call .L_4163e0

            test EAX,EAX
            jne .L_42050d

            lea RDX,QWORD PTR [RIP+.L_4595da]
            mov ECX,1
            mov RSI,R14
            mov RDI,RBX
            call .L_416710

            test EAX,EAX
            jne .L_42050d

            call .L_401240

            mov DWORD PTR [RBP+8],EAX
            movzx EAX,BYTE PTR [RBP+26]
            and EAX,4294967288
            or EAX,5
            mov BYTE PTR [RBP+26],AL
.L_4206a3:

            mov RDI,R12
            add R12,16
            call .L_40ee50

            test AL,AL
            je .L_420740

            call .L_401460

            movzx EAX,AX
            mov ECX,1000
            mov RSI,R14
            cdq 
            mov RDI,RBX
            idiv ECX
            lea ECX,DWORD PTR [RDX+1]
            mov RDX,R12
            call .L_417880

            test EAX,EAX
            jne .L_42050d

            lea RSI,QWORD PTR [RIP+.L_4590a7]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP]
            jmp .L_42051b
.L_4206fd:

            mov RSI,R14
            mov RDI,RBX
            call .L_420280

            test EAX,EAX
            je .L_42062d

            jmp .L_42050d
.L_420715:

            mov RAX,QWORD PTR [RSP]
            cmp BYTE PTR [RAX+1],0
            jne .L_4205e2

            jmp .L_4206a3
.L_420728:

            mov RSI,R14
            mov RDI,RBX
            call .L_4165e0

            test EAX,EAX
            jne .L_42050d

            jmp .L_4205d8
.L_420740:

            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_416d90

            test EAX,EAX
            jne .L_42050d

            lea RSI,QWORD PTR [RIP+.L_4590b9]
            mov RDX,R12
            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_41aea0

            mov EAX,DWORD PTR [RSP]
            jmp .L_42051b
.L_420773:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420780:

            push RBX
            mov RBX,RSI
            call .L_430af0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+1080]
            pop RBX
            jmp .L_409550
.L_420799:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4207a0:

            push RBX
            mov RBX,RSI
            call .L_430af0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+1208]
            pop RBX
            jmp .L_409550
.L_4207b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4207c0:

            xor EAX,EAX
            xor R8D,R8D
            nop
            nop
            nop
.L_4207c8:

            movsxd RDX,EAX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RSI,QWORD PTR [RDI+RDX*8]
            movzx EDX,BYTE PTR [RSI+778]
            and EDX,7
            cmp DL,7
            jne .L_420809

            lea RCX,QWORD PTR [RAX+RAX*4]
            movzx EDX,BYTE PTR [RSI+789]
            shl RCX,3
            movzx ESI,BYTE PTR [RDI+RCX*1+782]
            and EDX,3
            cmp SIL,DL
            cmovbe EDX,ESI
            cmp DL,2
            sbb R8B,255
.L_420809:

            add RAX,1
            cmp RAX,63
            jne .L_4207c8

            cmp R8B,6
            seta AL
            ret 
.L_42081b:

            nop
            nop
            nop
            nop
            nop
.L_420820:

            push RBP
            movzx R10D,BYTE PTR [RDI+4669]
            xor EAX,EAX
            push RBX
.L_42082c:

            xor R11D,R11D
            mov EBX,128
            jmp .L_42084e
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420840:

            add RAX,1
            cmp RAX,63
            je .L_420902
.L_42084e:

            cmp R10B,AL
            mov ECX,EAX
            je .L_4208f0

            movsxd R8,EAX
            lea R8,QWORD PTR [R8+R8*4]
            lea R9,QWORD PTR [RDI+R8*8]
            movzx R8D,BYTE PTR [R9+778]
            and R8D,7
            cmp R8B,7
            jne .L_420840

            cmp DL,AL
            je .L_4208f0

            lea RBP,QWORD PTR [RAX+RAX*4]
            movzx R8D,BYTE PTR [R9+789]
            shl RBP,3
            movzx R9D,BYTE PTR [RDI+RBP*1+782]
            and R8D,3
            cmp R9B,R8B
            cmovbe R8D,R9D
            cmp R8B,1
            jbe .L_4208f0

            mov R9D,EAX
            and ECX,7
            mov EBP,EBX
            shr R9B,3
            sar EBP,CL
            and R9D,31
            movzx R9D,BYTE PTR [RSI+R9*1+3]
            test R9D,EBP
            je .L_4208e5

            movzx ECX,R11B
            movzx R9D,BYTE PTR [RSI+RCX*1+11]
            mov ECX,R9D
            shr R9B,6
            shr CX,4
            and ECX,3
            cmp CL,R9B
            cmova ECX,R9D
            cmp R8B,CL
            jbe .L_4208f0
.L_4208e5:

            xor EAX,EAX
            pop RBX
.L_4208e8:

            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4208f0:

            add RAX,1
            add R11D,1
            cmp RAX,63
            jne .L_42084e
.L_420902:

            mov EAX,1
            pop RBX
            pop RBP
            ret 
.L_42090a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_420910:

            movzx ESI,BYTE PTR [RDI+3272]
            test SIL,SIL
            je .L_420988

            movzx EDX,BYTE PTR [RDI+3306]
            and EDX,7
            cmp DL,3
            seta AL
            cmp DL,1
            sete DL
            or AL,DL
            jne .L_420981

            sub ESI,1
            mov ECX,1
            movzx ESI,SIL
            add RSI,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420950:

            cmp RSI,RCX
            je .L_420988

            movsxd RDX,ECX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EDX,BYTE PTR [RDI+RAX*8+3306]
            and EDX,7
            cmp DL,3
            seta AL
            cmp DL,1
            sete DL
            add RCX,1
            or AL,DL
            je .L_420950
.L_420981:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420988:

            xor EAX,EAX
            ret 
.L_42098b:

            nop
            nop
            nop
            nop
            nop
.L_420990:

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
.L_420998:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RDI+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_420998

            movzx R10D,BYTE PTR [RDI+4662]
            xor EAX,EAX
            cmp R10B,CL
            jae .L_420a24

            movzx EAX,BYTE PTR [RDI+3272]
            test AL,AL
            je .L_420a26

            lea R9D,DWORD PTR [RAX-1]
            xor R8D,R8D
            xor EAX,EAX
            movzx R9D,R9B
            add R9D,1
            nop
            nop
            nop
.L_4209e8:

            movsxd RSI,EAX
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            movzx EDX,BYTE PTR [RDI+RDX*8+3306]
            and EDX,7
            cmp DL,7
            sete DL
            add EAX,1
            add R8D,EDX
            cmp R9D,EAX
            jne .L_4209e8

            movzx R8D,R8B
.L_420a15:

            movzx ECX,CL
            sub ECX,R10D
            lea EAX,DWORD PTR [RCX+RCX*2]
            cmp EAX,R8D
            setg AL
.L_420a24:

            ret 
.L_420a26:

            xor R8D,R8D
            jmp .L_420a15
.L_420a2b:

            nop
            nop
            nop
            nop
            nop
.L_420a30:

            xor EDX,EDX
            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_420a38:

            movsxd RCX,EDX
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea R8,QWORD PTR [RDI+RCX*8]
            movzx ECX,BYTE PTR [R8+778]
            and ECX,7
            cmp CL,7
            jne .L_420a7b

            lea RSI,QWORD PTR [RDX+RDX*4]
            movzx ECX,BYTE PTR [R8+789]
            shl RSI,3
            movzx R8D,BYTE PTR [RDI+RSI*1+782]
            and ECX,3
            cmp R8B,CL
            cmovbe ECX,R8D
            cmp CL,2
            sbb AL,255
.L_420a7b:

            add RDX,1
            cmp RDX,63
            jne .L_420a38

            ret 
.L_420a87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420a90:

            movzx EAX,BYTE PTR [RDI+4678]
            ret 
.L_420a98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420aa0:

            lea EDX,DWORD PTR [RSI+2]
            mov EAX,7
            cmp DL,3
            ja .L_420ab6

            mov BYTE PTR [RDI+4678],SIL
            xor EAX,EAX
.L_420ab6:

            ret 
.L_420ab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420ac0:

            mov EAX,DWORD PTR [RDI+12]
            lea EDX,DWORD PTR [RAX-3]
            mov EAX,13
            cmp EDX,1
            ja .L_420b45

            cmp BYTE PTR [RDI+3272],0
            je .L_420b40

            xor EDX,EDX
            mov EAX,23
.L_420ae0:

            movzx R8D,DL
            mov RCX,R8
            shl RCX,4
            add RCX,R8
            movzx ECX,BYTE PTR [RDI+RCX*8+3306]
            mov R8D,ECX
            and R8D,7
            cmp R8B,7
            jne .L_420b30

            shr CL,3
            and ECX,2
            jne .L_420b30

            movzx ECX,DL
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            mov ECX,DWORD PTR [RDI+RAX*8+3372]
            xor EAX,EAX
            cmp DWORD PTR [RSI],ECX
            jae .L_420b30

            mov DWORD PTR [RSI],ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420b30:

            add EDX,1
            cmp BYTE PTR [RDI+3272],DL
            ja .L_420ae0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420b40:

            mov EAX,23
.L_420b45:

            ret 
.L_420b47:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420b50:

            push R12
            push RBP
            mov EBP,ESI
            push RBX
            mov RBX,RDI
            sub RSP,48
.L_420b5d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+4640],0
            je .L_420b94

            mov R12,RSP
            mov RSI,RDX
            mov RDX,R12
            call .L_41e030

            test EAX,EAX
            jne .L_420bfc

            mov RSI,R12
            mov EDI,EBP
            call QWORD PTR [RBX+4640]
.L_420b94:

            test EBP,EBP
            je .L_420be0

            cmp EBP,1
            je .L_420bc0
.L_420b9d:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_420bf7

            add RSP,48
.L_420bb1:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420bc0:

            mov RDI,RBX
            call .L_430b10

            mov ESI,2048
            mov RDI,RAX
            call .L_402d30

            jmp .L_420b9d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420be0:

            mov RDI,RBX
            call .L_430b10

            mov ESI,1024
            mov RDI,RAX
            call .L_402d30

            jmp .L_420b9d
.L_420bf7:

            call __stack_chk_fail@PLT
.L_420bfc:

            lea RCX,QWORD PTR [RIP+.L_459240]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,5022
            call __assert_fail@PLT
.L_420c1b:

            nop
            nop
            nop
            nop
            nop
.L_420c20:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            sub RSP,8
.L_420c34:

            call .L_430af0

            mov R15,RAX
            mov EAX,DWORD PTR [R14+12]
            cmp EAX,2
            je .L_420cf0

            jb .L_420cca

            cmp EAX,4
            ja .L_420cca

            test WORD PTR [R12+24],511
            movzx EAX,BYTE PTR [R12+26]
            je .L_420d08

            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            jbe .L_420da8

            cmp AL,1
            je .L_420da8
.L_420c7b:

            and BYTE PTR [R12+26],248
            lea RDI,QWORD PTR [R15+2256]
            mov RSI,R12
            call .L_4137e0

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+7520]
            call .L_428b40

            test BYTE PTR [R12+26],16
            je .L_420cbc

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+10688]
            call .L_411290
.L_420cbc:

            movzx ESI,WORD PTR [R12+24]
            mov RDI,R14
            call .L_41dc30
.L_420cca:

            lea RDI,QWORD PTR [R12+28]
            call .L_413070

            and BYTE PTR [R12+26],248
            add RSP,8
.L_420cde:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420cf0:

            lea RAX,QWORD PTR [R14+16]
            cmp R12,RAX
            jne .L_420cca

            mov RDI,R14
            call .L_415e50

            jmp .L_420cca
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_420d08:

            and EAX,7
            cmp AL,7
            jne .L_420cca

            and BYTE PTR [R12+37],252
            lea RBX,QWORD PTR [R14+752]
            xor EBP,EBP
            lea R13,QWORD PTR [RIP+.L_459230]
            call .L_401240

            mov DWORD PTR [R12+8],EAX
            jmp .L_420d4a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420d38:

            add RBP,1
            add RBX,40
            cmp RBP,63
            je .L_420de8
.L_420d4a:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+36],AL
            jne .L_420d38

            movsxd RAX,EBP
            mov BYTE PTR [RBX+36],63
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [R14+RAX*8+784]
            movzx EDX,BYTE PTR [RAX+5]
            mov ECX,EDX
            and ECX,4294967235
            mov BYTE PTR [RAX+5],CL
            cmp BYTE PTR [R14+4669],BPL
            je .L_420d8b

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,7
            cmp AL,7
            je .L_420dc0
.L_420d8b:

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            ja .L_420d38

            mov RDI,R14
            call .L_41aec0

            jmp .L_420d38

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420da8:

            mov RDX,R12
            mov ESI,1
            mov RDI,R14
            call .L_420b50

            jmp .L_420c7b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420dc0:

            movzx EAX,BYTE PTR [RBX+30]
            and EDX,3
            cmp AL,DL
            cmovbe EDX,EAX
            sub EDX,1
            cmp DL,2
            ja .L_420d8b

            movzx EDX,DL
            cmp BYTE PTR [R13+RDX*1],15
            jbe .L_420d38

            jmp .L_420d8b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420de8:

            cmp BYTE PTR [R12+36],63
            jne .L_420cca

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_420e1a
.L_420e00:

            movzx ESI,WORD PTR [R12+24]
            lea RDI,QWORD PTR [R15+10688]
            sar ESI,10
            call .L_411220

            jmp .L_420cca
.L_420e1a:

            mov RDI,R14
            call .L_41aec0

            jmp .L_420e00
.L_420e24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420e30:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_420e37:

            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RBX+12],3
            mov RBP,RAX
            je .L_420e5d

            mov RDI,RBX
            call .L_430b10

            mov ESI,4
            mov RDI,RAX
            call .L_402d30
.L_420e5d:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_415ab0

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],3
            mov DWORD PTR [RBX+60],0
            call .L_430c70

            lea RDI,QWORD PTR [RBX+120]
            call .L_430c70

            lea RDI,QWORD PTR [RBX+592]
            call .L_4311b0

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_420fa7
.L_420ea4:

            mov RDI,RBP
            call .L_4101c0

            movzx EDX,BYTE PTR [RBX+4669]
            lea RDI,QWORD PTR [RBP+7520]
            mov RAX,RDX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov BYTE PTR [RBX+RDX*8+788],AL
            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBX+4672],EAX
            call .L_4275c0

            mov RDI,RBP
            call .L_430ad0

            mov RDI,RBP
            mov BYTE PTR [RAX],1
            call .L_430ad0

            mov BYTE PTR [RAX+120],2
            or BYTE PTR [RBP+1564],128
            lea RCX,QWORD PTR [RBX+788]
            xor EDX,EDX
            nop
.L_420f00:

            movsxd RAX,EDX
            add EDX,1
            add RCX,40
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RBX+RAX*8]
            and BYTE PTR [RAX+789],63
            and BYTE PTR [RAX+778],248
            mov BYTE PTR [RCX-40],63
            cmp EDX,63
            jne .L_420f00

            cmp BYTE PTR [RBX+3272],0
            je .L_420fa0

            lea R12,QWORD PTR [RBX+3280]
            xor EBP,EBP
            jmp .L_420f59
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_420f40:

            cmp AL,1
            je .L_420f79
.L_420f44:

            movzx EAX,BYTE PTR [RBX+3272]
            add EBP,1
            add R12,136
            cmp EAX,EBP
            jle .L_420fa0
.L_420f59:

            movsxd RDX,EBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_420f40
.L_420f79:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+4669],AL
            je .L_420f44

            mov RSI,R12
            mov RDI,RBX
            call .L_420c20

            jmp .L_420f44
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_420fa0:

            pop RBX
.L_420fa1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_420fa7:

            mov RDI,RBX
            call .L_41aec0

            jmp .L_420ea4
.L_420fb4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_420fc0:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_420fc7:

            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RBX+12],4
            mov RBP,RAX
            je .L_420fed

            mov RDI,RBX
            call .L_430b10

            mov ESI,4
            mov RDI,RAX
            call .L_402d30
.L_420fed:

            movzx ESI,R12W
            mov RDI,RBX
            call .L_415ab0

            lea RDI,QWORD PTR [RBX+72]
            mov DWORD PTR [RBX+12],4
            mov DWORD PTR [RBX+60],0
            call .L_430c70

            lea RDI,QWORD PTR [RBX+120]
            call .L_430c70

            lea RDI,QWORD PTR [RBX+592]
            call .L_4311b0

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_421190
.L_421034:

            mov RDI,RBX
            call .L_416090

            mov RDI,RBP
            call .L_4101c0

            movzx EDX,BYTE PTR [RBX+4669]
            mov RAX,RDX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov BYTE PTR [RBX+RDX*8+788],AL
            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            mov DWORD PTR [RBX+4672],EAX
            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            movzx EAX,BYTE PTR [RBX+4669]
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea R12,QWORD PTR [RBX+RAX*8+752]
            call .L_401240

            lea RDI,QWORD PTR [RBP+7520]
            mov DWORD PTR [R12+8],EAX
            lea R12,QWORD PTR [RBP+216]
            call .L_427570

            lea RDI,QWORD PTR [RBP+1080]
            call .L_40afb0

            lea RDI,QWORD PTR [RBP+1208]
            call .L_40b030

            lea RSI,QWORD PTR [RBX+680]
            mov RDI,R12
            call .L_42d6f0

            lea RSI,QWORD PTR [RBX+712]
            mov RDI,R12
            call .L_42d6f0

            mov RDI,RBP
            call .L_430ad0

            mov RDI,RBP
            mov BYTE PTR [RAX],1
            call .L_430ad0

            mov BYTE PTR [RAX+120],2
            or BYTE PTR [RBP+1564],128
            lea RDI,QWORD PTR [RBP+10688]
            call .L_411180

            cmp BYTE PTR [RBX+3272],0
            je .L_421180

            lea R12,QWORD PTR [RBX+3280]
            xor EBP,EBP
            jmp .L_421139
.L_421120:

            cmp AL,1
            je .L_421159
.L_421124:

            movzx EAX,BYTE PTR [RBX+3272]
            add EBP,1
            add R12,136
            cmp EAX,EBP
            jle .L_421180
.L_421139:

            movsxd RDX,EBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_421120
.L_421159:

            movzx EAX,WORD PTR [R12+24]
            sar EAX,10
            cmp BYTE PTR [RBX+4669],AL
            je .L_421124

            mov RSI,R12
            mov RDI,RBX
            call .L_420c20

            jmp .L_421124
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421180:

            pop RBX
.L_421181:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421190:

            mov RDI,RBX
            call .L_41aec0

            jmp .L_421034
.L_42119d:

            nop
            nop
            nop
.L_4211a0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_4211ad:

            call .L_430af0

            mov RBP,RAX
            mov EAX,DWORD PTR [RBX+12]
            test EAX,EAX
            je .L_4212d0

            cmp EAX,4
            je .L_4212c0

            test BYTE PTR [RBX+4668],1
            je .L_4212e0

            test BYTE PTR [RBX+56],2
            je .L_4212e0

            lea RCX,QWORD PTR [RBX+788]
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4211f0:

            movsxd RAX,EDX
            add EDX,1
            add RCX,40
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea RAX,QWORD PTR [RBX+RAX*8]
            and BYTE PTR [RAX+789],63
            and BYTE PTR [RAX+778],248
            mov BYTE PTR [RCX-40],63
            cmp EDX,63
            jne .L_4211f0

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            jbe .L_4212f0

            mov RDI,RBX
            call .L_41b300
.L_421230:

            cmp AL,62
            ja .L_42132a

            mov BYTE PTR [RBX+4669],AL
            mov BYTE PTR [RBX+4670],AL
            movzx EAX,AL
            mov RDX,QWORD PTR [RBP+1656]
            lea RAX,QWORD PTR [RAX+RAX*4]
            mov QWORD PTR [RBX+RAX*8+752],RDX
            mov ESI,DWORD PTR [RBX+4664]
            test ESI,ESI
            je .L_421300

            movzx ECX,BYTE PTR [RBX+4669]
            movzx EDX,BYTE PTR [RBX+4663]
            mov RDI,RBX
            call .L_415ec0
.L_42127e:

            call .L_401460

            lea RDI,QWORD PTR [RBP+7520]
            mov BYTE PTR [RBX+744],AL
            call .L_427450

            lea RDI,QWORD PTR [RBP+10528]
            call .L_40ccf0

            movzx ESI,BYTE PTR [RBX+4669]
            add RSP,8
.L_4212ac:

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            shl ESI,10
            movzx ESI,SI
            jmp .L_420fc0
.L_4212c0:

            xor EAX,EAX
.L_4212c2:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4212d0:

            add RSP,8
            mov EAX,13
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4212e0:

            add RSP,8
            mov EAX,27
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4212f0:

            movzx ESI,AL
            mov RDI,RBX
            call .L_41b270

            jmp .L_421230
.L_421300:

            movzx R13D,BYTE PTR [RBX+4669]
            movzx R12D,BYTE PTR [RBX+4663]
            call .L_401460

            mov RDI,RBX
            mov ESI,EAX
            mov ECX,R13D
            mov EDX,R12D
            call .L_415ec0

            jmp .L_42127e
.L_42132a:

            mov EAX,3
            jmp .L_4212c2
.L_421331:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421340:

            push R15
            push R14
            lea R14,QWORD PTR [RDX+16]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            xor ESI,ESI
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            sub RSP,88
.L_42135f:

            xor R10D,R10D
            mov RBX,RDI
            mov WORD PTR [RSP+26],SI
            lea RSI,QWORD PTR [RIP+.L_4590ca]
            mov RBP,RDX
            mov RDX,R14
            mov WORD PTR [RSP+52],CX
            mov WORD PTR [RSP+34],R8W
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+30],R9W
            mov WORD PTR [RSP+62],R10W
            call .L_41aea0

            mov EAX,DWORD PTR [RBX+12]
            sub EAX,3
            cmp EAX,1
            ja .L_421400

            mov EAX,DWORD PTR [RBX+60]
            test EAX,EAX
            jne .L_421400

            lea R13,QWORD PTR [RSP+44]
            mov RDI,R14
            lea R14,QWORD PTR [RSP+52]
            mov RSI,R13
            call .L_40f0c0

            mov EDX,10
            mov RCX,R14
            mov ESI,3
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EDX,EAX
            jne .L_421405

            movzx EAX,BYTE PTR [RSP+53]
            sub EAX,4
            cmp AL,4
            jbe .L_421430
.L_4213f1:

            mov EDX,6
            jmp .L_421405
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_421400:

            mov EDX,13
.L_421405:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_421628

            add RSP,88
.L_42141f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_421430:

            lea RCX,QWORD PTR [RSP+26]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EDX,EAX
            jne .L_421405

            cmp BYTE PTR [RSP+27],2
            jne .L_4213f1

            movzx EAX,WORD PTR [RSP+28]
            rol AX,8
            cmp AX,1
            jbe .L_4213f1

            lea RCX,QWORD PTR [RSP+34]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_421496

            cmp BYTE PTR [RSP+35],8
            jne .L_4213f1

            mov EAX,DWORD PTR [RSP+36]
            cmp DWORD PTR [RBX+2],EAX
            jne .L_421400
.L_421496:

            lea RCX,QWORD PTR [RSP+30]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_4215e4

            cmp BYTE PTR [RSP+31],2
            jne .L_4213f1

            movzx R15D,WORD PTR [RSP+32]
            mov RSI,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_41cf00

            mov EDX,DWORD PTR [RSP+8]
            rol R15W,8
            test RAX,RAX
            je .L_4214f6

            cmp WORD PTR [RAX+24],R15W
            je .L_4214f6

            mov RSI,RAX
            mov RDI,RBX
            call .L_420c20

            mov EDX,DWORD PTR [RSP+8]
.L_4214f6:

            test R15W,511
            jne .L_421620

            movzx EAX,R15W
            sar EAX,10
            cmp EAX,63
            je .L_4213f1

            cdqe 
            imul RAX,RAX,40
            lea R15,QWORD PTR [RBX+RAX*1+752]
            movzx EAX,BYTE PTR [R15+26]
            and EAX,7
            cmp EAX,5
            je .L_421637

            cmp EAX,7
            je .L_421641

            mov RAX,QWORD PTR [RSP+44]
            lea RCX,QWORD PTR [R15+28]
            mov R13,QWORD PTR [RBP+40]
            mov RDI,RCX
            mov QWORD PTR [RSP+8],RCX
            mov QWORD PTR [R15],RAX
            call .L_413070

            mov RDI,RBX
            movsx R13D,BYTE PTR [R13+3]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            mov RCX,QWORD PTR [RSP+8]
            movsx ESI,AL
            mov EDX,R13D
            mov RDI,RCX
            call .L_413080

            mov BYTE PTR [R15+27],0
            call .L_401240

            mov DWORD PTR [R15+8],EAX
            movzx EAX,BYTE PTR [R15+26]
            and EAX,4294967288
            or EAX,5
            mov BYTE PTR [R15+26],AL
.L_4215a0:

            lea R13,QWORD PTR [RSP+62]
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            mov RCX,R13
            call .L_430f70

            test EAX,EAX
            jne .L_421619

            cmp BYTE PTR [RSP+63],8
            ja .L_4213f1
.L_4215c9:

            mov RDX,R15
            mov R8,R14
            mov RCX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_4204a0

            mov EDX,EAX
            jmp .L_421405
.L_4215e4:

            mov RSI,R13
            mov RDI,RBX
            call .L_41cf00

            test RAX,RAX
            mov R15,RAX
            je .L_42162d

            movzx EAX,BYTE PTR [RAX+26]
            mov EDX,2
            and EAX,7
            cmp AL,7
            jne .L_421405

            test WORD PTR [R15+24],511
            je .L_4215a0

            jmp .L_421405
.L_421619:

            mov BYTE PTR [RSP+63],0
            jmp .L_4215c9
.L_421620:

            xor R15D,R15D
            jmp .L_4215a0
.L_421628:

            call __stack_chk_fail@PLT
.L_42162d:

            mov EDX,2
            jmp .L_421405
.L_421637:

            mov EDX,24
            jmp .L_421405
.L_421641:

            mov RSI,R13
            mov RDI,R15
            mov DWORD PTR [RSP+8],EDX
            call .L_408380

            test AL,AL
            jne .L_4215a0

            mov EDX,DWORD PTR [RSP+8]
            jmp .L_421405
.L_421661:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421670:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            xor R13D,R13D
            push RBP
            push RBX
            xor R12D,R12D
            xor EDI,EDI
            mov RBP,RSI
            xor ESI,ESI
            sub RSP,232
.L_421691:

            xor R9D,R9D
            xor R10D,R10D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+53],R12W
            lea R12,QWORD PTR [RDX+16]
            mov WORD PTR [RSP+108],R13W
            lea R13,QWORD PTR [RSP+90]
            xor R11D,R11D
            mov DWORD PTR [RSP+20],ECX
            mov WORD PTR [RSP+60],SI
            xor ECX,ECX
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+68],DI
            mov WORD PTR [RSP+56],AX
            mov RSI,R13
            xor EAX,EAX
            mov RDI,R12
            mov R15D,R8D
            xor R8D,R8D
            mov WORD PTR [RSP+64],R9W
            mov RBX,RDX
            mov WORD PTR [RSP+98],CX
            mov WORD PTR [RSP+74],R8W
            mov WORD PTR [RSP+128],R10W
            mov WORD PTR [RSP+80],R11W
            mov WORD PTR [RSP+118],AX
            call .L_40f0c0

            lea RCX,QWORD PTR [RSP+60]
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_4218b0

            cmp BYTE PTR [RSP+61],2
            jne .L_4218e0

            movzx ECX,WORD PTR [RSP+62]
            mov RDX,R12
            rol CX,8
            test R15B,R15B
            movzx ECX,CX
            jne .L_4218f0

            lea RSI,QWORD PTR [RIP+.L_4590df]
            mov RDI,R14
            call .L_41aeb0
.L_42176e:

            lea RCX,QWORD PTR [RSP+56]
            mov EDX,4
            mov ESI,18
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_4218b0

            cmp BYTE PTR [RSP+57],2
            jne .L_4218e0

            lea RCX,QWORD PTR [RSP+98]
            mov EDX,10
            mov ESI,4
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_4218b0

            cmp BYTE PTR [RSP+99],8
            jne .L_4218e0

            mov RSI,R13
            mov RDI,R14
            call .L_41cf00

            test RAX,RAX
            je .L_4217f2

            movzx EDX,WORD PTR [RSP+62]
            rol DX,8
            cmp DX,WORD PTR [RAX+24]
            je .L_4217f2

            mov RSI,RAX
            mov RDI,R14
            call .L_420c20
.L_4217f2:

            lea RCX,QWORD PTR [RSP+68]
            mov EDX,6
            mov ESI,5
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_4218b0

            cmp BYTE PTR [RSP+69],4
            jne .L_4218e0

            lea RCX,QWORD PTR [RSP+74]
            mov EDX,6
            mov ESI,8
            mov RDI,RBP
            mov DWORD PTR [RSP+24],EAX
            call .L_430f70

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+24]
            jne .L_421904

            cmp BYTE PTR [RSP+75],4
            jne .L_4218e0
.L_421852:

            movzx EAX,WORD PTR [RSP+62]
            mov EDX,EAX
            rol DX,8
            test DX,511
            jne .L_4218e0

            movzx EDX,DX
            sar EDX,10
            cmp EDX,63
            mov DWORD PTR [RSP+24],EDX
            je .L_4218e0

            movsxd RSI,EDX
            imul RDX,RSI,40
            mov QWORD PTR [RSP+32],RSI
            lea R13,QWORD PTR [R14+RDX*1+752]
            movzx EDX,BYTE PTR [R13+26]
            and EDX,7
            cmp DL,5
            je .L_421916

            cmp DL,7
            je .L_421925

            test DL,DL
            je .L_421c36

            mov R9D,13
            nop
.L_4218b0:

            mov RDX,QWORD PTR [RSP+216]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_421911

            add RSP,232
.L_4218cd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4218e0:

            mov R9D,6
            jmp .L_4218b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4218f0:

            lea RSI,QWORD PTR [RIP+.L_459630]
            mov RDI,R14
            call .L_41aeb0

            jmp .L_42176e
.L_421904:

            mov EAX,DWORD PTR [RSP+70]
            mov DWORD PTR [RSP+76],EAX
            jmp .L_421852
.L_421911:

            call __stack_chk_fail@PLT
.L_421916:

            mov RSI,QWORD PTR [RSP+100]
            cmp QWORD PTR [R13+12],RSI
            jne .L_421c52
.L_421925:

            cmp DWORD PTR [R14+12],4
            ja .L_4219a2

            mov EAX,DWORD PTR [R14+12]
            lea RDX,QWORD PTR [RIP+.L_4591cc]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_421940:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R9D
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            cmp BYTE PTR [RSP+54],1
            jne .L_4218e0

            movzx EDI,BYTE PTR [RSP+55]
            call .L_413240

            imul RDX,QWORD PTR [RSP+32],40
            and EAX,3
            mov R9D,DWORD PTR [RSP+24]
            lea RCX,QWORD PTR [R14+RDX*1+784]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967292
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            movzx EAX,WORD PTR [RSP+62]
.L_4219a2:

            rol AX,8
            mov RDX,QWORD PTR [RSP+90]
            mov DWORD PTR [RSP+24],R9D
            mov WORD PTR [R13+24],AX
            mov EAX,DWORD PTR [RSP+70]
            lea R12,QWORD PTR [R13+28]
            mov QWORD PTR [R13],RDX
            bswap EAX
            mov DWORD PTR [R13+12],EAX
            mov EAX,DWORD PTR [RSP+76]
            bswap EAX
            mov DWORD PTR [R13+16],EAX
            call .L_401240

            mov DWORD PTR [R13+8],EAX
            movzx EAX,BYTE PTR [R13+26]
            mov RDI,R12
            and EAX,4294967175
            or EAX,88
            mov BYTE PTR [R13+26],AL
            call .L_413070

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,R14
            movsx EDX,BYTE PTR [RAX+3]
            mov DWORD PTR [RSP+8],EDX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            mov EDX,DWORD PTR [RSP+8]
            movsx ESI,AL
            mov RDI,R12
            call .L_413080

            mov EAX,DWORD PTR [RSP+20]
            or BYTE PTR [R13+26],7
            test R15B,R15B
            mov BYTE PTR [R13+27],0
            mov R9D,DWORD PTR [RSP+24]
            mov DWORD PTR [R13+20],EAX
            je .L_4218b0

            lea R12,QWORD PTR [RSP+108]
            mov EDX,10
            mov ESI,3
            mov RDI,RBP
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            mov R9D,EAX
            jne .L_4218b0

            movzx EAX,BYTE PTR [RSP+109]
            sub EAX,4
            cmp AL,4
            ja .L_4218e0

            lea R15,QWORD PTR [RSP+118]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,R15
            call .L_430f70

            test EAX,EAX
            jne .L_421d98

            cmp BYTE PTR [RSP+119],8
            ja .L_4218e0
.L_421aa3:

            mov R8,R12
            mov RCX,R15
            mov RDX,R13
            mov RSI,RBX
            mov RDI,R14
            call .L_4204a0

            mov R9D,EAX
            jmp .L_4218b0
.L_421abf:

            lea RCX,QWORD PTR [RSP+80]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            mov DWORD PTR [RSP+40],R9D
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            cmp BYTE PTR [RSP+81],8
            jne .L_4218e0

            mov EAX,DWORD PTR [RSP+82]
            cmp DWORD PTR [R14+2],EAX
            mov R9D,DWORD PTR [RSP+40]
            jne .L_4218b0

            cmp BYTE PTR [R14+10],0
            je .L_421e00
.L_421b0c:

            lea RDX,QWORD PTR [RIP+.L_4595d9]
            xor R8D,R8D
            mov ECX,1
            mov RSI,R12
            mov RDI,R14
            mov DWORD PTR [RSP+40],R9D
            call .L_417940

            mov R9D,DWORD PTR [RSP+40]
.L_421b30:

            lea RCX,QWORD PTR [RSP+53]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            mov DWORD PTR [RSP+40],R9D
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            cmp BYTE PTR [RSP+54],1
            jne .L_4218e0

            movzx EDI,BYTE PTR [RSP+55]
            lea R12,QWORD PTR [RSP+128]
            call .L_413240

            imul RDX,QWORD PTR [RSP+32],40
            and EAX,3
            mov ESI,9
            mov RDI,RBP
            lea RCX,QWORD PTR [R14+RDX*1+784]
            mov EDX,EAX
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967292
            or EAX,EDX
            mov EDX,74
            mov BYTE PTR [RCX+5],AL
            mov RCX,R12
            call .L_430f70

            test EAX,EAX
            mov R9D,DWORD PTR [RSP+40]
            jne .L_421db6

            movzx EAX,BYTE PTR [RSP+129]
            sub EAX,9
            cmp AL,63
            ja .L_4218e0

            mov RSI,R12
            mov RDI,R14
            mov DWORD PTR [RSP+32],R9D
            call .L_41ba80

            test EAX,EAX
            je .L_421da2
.L_421bdd:

            mov R9D,EAX
            jmp .L_4218b0
.L_421be5:

            lea RCX,QWORD PTR [RSP+64]
            mov EDX,4
            mov ESI,10
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R9D
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            cmp BYTE PTR [RSP+65],2
            jne .L_4218e0

            mov RDI,R14
            call .L_415a90

            movzx EDX,WORD PTR [RSP+66]
            mov R9D,DWORD PTR [RSP+24]
            rol DX,8
            cmp AX,DX
            je .L_421c7c

            mov R9D,2
            jmp .L_4218b0
.L_421c36:

            cmp BYTE PTR [R14+4648],0
            je .L_421c52

            mov RDI,QWORD PTR [RSP+100]
            cmp QWORD PTR [R14+4649],RDI
            je .L_421925
.L_421c52:

            mov R9D,8
            jmp .L_4218b0
.L_421c5d:

            lea RCX,QWORD PTR [RIP+.L_459440]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1000
            call __assert_fail@PLT
.L_421c7c:

            lea R8,QWORD PTR [RSP+128]
            mov EDX,74
            mov ESI,9
            mov RDI,RBP
            mov DWORD PTR [RSP+32],R9D
            mov RCX,R8
            mov QWORD PTR [RSP+24],R8
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            movzx EAX,BYTE PTR [RSP+129]
            mov R8,QWORD PTR [RSP+24]
            mov R9D,DWORD PTR [RSP+32]
            sub EAX,9
            cmp AL,63
            ja .L_4218e0

            mov RSI,R8
            mov RDI,R14
            mov DWORD PTR [RSP+24],R9D
            call .L_41ba80

            test EAX,EAX
            jne .L_421bdd

            lea RCX,QWORD PTR [RSP+80]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_421bdd

            cmp BYTE PTR [RSP+81],8
            mov R9D,DWORD PTR [RSP+24]
            jne .L_4218e0

            mov ESI,DWORD PTR [RSP+82]
            movzx ECX,BYTE PTR [RSP+89]
            mov RDI,R14
            movzx EDX,BYTE PTR [RSP+86]
            mov DWORD PTR [RSP+32],R9D
            bswap ESI
            call .L_415ec0

            movzx EAX,BYTE PTR [R14+9]
            mov RDI,R14
            mov BYTE PTR [RSP+24],AL
            call .L_415a90

            movzx EAX,AX
            mov R9D,DWORD PTR [RSP+32]
            mov RDI,R14
            sar EAX,10
            cmp BYTE PTR [RSP+24],AL
            mov DWORD PTR [RSP+24],R9D
            je .L_421de1

            call .L_415a90

            mov RDI,R14
            movzx ESI,AX
            call .L_420e30

            lea RDX,QWORD PTR [RIP+.L_4595d9]
            mov BYTE PTR [R14+10],1
            xor R8D,R8D
            mov ECX,1
            mov RSI,R12
            mov RDI,R14
            call .L_417940

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_4219a2
.L_421d98:

            mov BYTE PTR [RSP+119],0
            jmp .L_421aa3
.L_421da2:

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,R12
            mov RDI,R14
            call .L_41bc90

            mov R9D,DWORD PTR [RSP+32]
.L_421db6:

            movzx EAX,BYTE PTR [RSP+24]
            cmp BYTE PTR [R14+4669],AL
            je .L_421dd7

            cmp BYTE PTR [R13+36],62
            jbe .L_421dd7

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            jbe .L_421e33
.L_421dd7:

            movzx EAX,WORD PTR [RSP+62]
            jmp .L_4219a2
.L_421de1:

            call .L_415a90

            mov RDI,R14
            movzx ESI,AX
            call .L_420fc0

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_4219a2
.L_421e00:

            movzx EDX,BYTE PTR [RSP+87]
            mov RDI,R14
            mov DWORD PTR [RSP+44],R9D
            mov BYTE PTR [RSP+40],DL
            call .L_430af0

            movzx EDX,BYTE PTR [RSP+40]
            mov R9D,DWORD PTR [RSP+44]
            sub DL,BYTE PTR [RAX+7785]
            test DL,DL
            jg .L_421b0c

            jmp .L_421b30
.L_421e33:

            mov RDI,R14
            mov DWORD PTR [RSP+24],R9D
            call .L_41aec0

            movzx EAX,WORD PTR [RSP+62]
            mov R9D,DWORD PTR [RSP+24]
            jmp .L_4219a2
.L_421e4f:

            nop
.L_421e50:

            xor R8D,R8D
            jmp .L_421670
.L_421e58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_421e60:

            mov R8D,1
            jmp .L_421670
.L_421e6b:

            nop
            nop
            nop
            nop
            nop
.L_421e70:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            sub RSP,168
.L_421e8a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_430af0

            mov R14,QWORD PTR [RBX+40]
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            movsx R13D,BYTE PTR [R14+3]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            mov ESI,R13D
            movsx EDI,AL
            lea R13,QWORD PTR [RSP+56]
            call .L_413220

            lea RDI,QWORD PTR [RBX+16]
            xor EDX,EDX
            xor ECX,ECX
            mov RSI,R13
            mov R15D,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+42],AX
            mov WORD PTR [RSP+46],DX
            mov WORD PTR [RSP+64],CX
            call .L_40f0c0

            lea RCX,QWORD PTR [RSP+42]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov R8D,EAX
            jne .L_421f20

            cmp BYTE PTR [RSP+43],2
            je .L_421f50
.L_421f1a:

            mov R8D,6
.L_421f20:

            mov RDX,QWORD PTR [RSP+152]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R8D
            jne .L_422428

            add RSP,168
.L_421f41:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_421f50:

            mov RSI,R13
            mov RDI,RBP
            call .L_41cf00

            test RAX,RAX
            je .L_421f7a

            movzx EDX,WORD PTR [RSP+44]
            rol DX,8
            cmp DX,WORD PTR [RAX+24]
            je .L_421f7a

            mov RSI,RAX
            mov RDI,RBP
            call .L_420c20
.L_421f7a:

            lea RBX,QWORD PTR [RSP+46]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            mov R8D,EAX
            jne .L_421f20

            cmp BYTE PTR [RSP+47],8
            jne .L_421f1a

            mov DWORD PTR [RSP+24],EAX
            lea RAX,QWORD PTR [RSP+64]
            mov EDX,74
            mov ESI,9
            mov RDI,R12
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_430f70

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+24]
            jne .L_422060

            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            ja .L_421f1a
.L_421fe6:

            mov EAX,DWORD PTR [RSP+48]
            cmp DWORD PTR [RBP+2],EAX
            mov EDX,EAX
            bswap EDX
            je .L_422075

            cmp R15B,9
            jbe .L_42206a

            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            jbe .L_4220f7
.L_42200d:

            cmp DWORD PTR [RBP+12],2
            je .L_4220b1
.L_422017:

            mov RDI,RBP
            call .L_41bb70

            mov R10D,EAX
            movzx EAX,BYTE PTR [RSP+65]
            sub EAX,9
            cmp AL,63
            jbe .L_422138

            xor EAX,EAX
.L_422034:

            cmp R10B,AL
            je .L_4220de

            test R10B,R10B
            je .L_42204f
.L_422042:

            mov ESI,3
            mov RDI,RBP
            call .L_415170
.L_42204f:

            mov R8D,2
            jmp .L_421f20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_422060:

            mov BYTE PTR [RSP+65],0
            jmp .L_421fe6
.L_42206a:

            mov R8D,34
            jmp .L_421f20
.L_422075:

            movzx EBX,BYTE PTR [RSP+55]
            mov RDI,RBP
            mov DWORD PTR [RSP+24],R8D
            call .L_415eb0

            mov R8D,DWORD PTR [RSP+24]
            cmp AL,BL
            je .L_422147

            cmp DWORD PTR [RBP+12],2
            je .L_421f20

            mov RDI,RBP
            call .L_415e50

            mov R8D,2
            jmp .L_421f20
.L_4220b1:

            lea RDI,QWORD PTR [RBP+16]
            mov RSI,R13
            mov DWORD PTR [RSP+8],R8D
            call .L_408380

            test AL,AL
            mov R8D,DWORD PTR [RSP+8]
            jne .L_421f20

            test BYTE PTR [RBP+56],2
            jne .L_422017

            jmp .L_421f20
.L_4220de:

            movzx EAX,BYTE PTR [RBP+6]
            cmp BYTE PTR [RSP+52],AL
            je .L_422410

            ja .L_422042

            jmp .L_42204f
.L_4220f7:

            test BYTE PTR [RBP+56],2
            je .L_42200d

            cmp BYTE PTR [RBP+149],0
            je .L_42200d

            cmp DWORD PTR [RBP+144],EDX
            jne .L_42200d

            movzx EAX,BYTE PTR [RSP+66]
            sub EAX,DWORD PTR [RBP+148]
            test AL,AL
            jg .L_42200d

            jmp .L_42204f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_422138:

            mov RDI,QWORD PTR [RSP+16]
            call .L_41af20

            jmp .L_422034
.L_422147:

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            test AX,511
            jne .L_421f20

            movzx ECX,BYTE PTR [RSP+65]
            lea EDX,DWORD PTR [RCX-9]
            cmp DL,63
            ja .L_421f20

            movzx EBX,AX
            sar EBX,10
            cmp EBX,63
            mov DWORD PTR [RSP+24],EBX
            je .L_421f1a

            movsxd R12,EBX
            imul RDX,R12,40
            test BYTE PTR [RBP+56],2
            lea RBX,QWORD PTR [RBP+RDX*1+752]
            je .L_4221d4

            movzx EDX,BYTE PTR [RSP+66]
            sub EDX,DWORD PTR [RBP+744]
            test DL,DL
            jle .L_4221d4

            mov EDX,DWORD PTR [RBP+12]
            cmp EDX,2
            je .L_422435

            jb .L_4221d4

            cmp EDX,4
            ja .L_4221d4
.L_4221b5:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_41ba80

            test EAX,EAX
            mov R8D,DWORD PTR [RSP+28]
            jne .L_42242d
.L_4221d4:

            cmp DWORD PTR [RBP+12],4
            ja .L_422316

            mov EAX,DWORD PTR [RBP+12]
            lea RDX,QWORD PTR [RIP+.L_4591e0]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_4221f1:

            xor EAX,EAX
            xor ESI,ESI
            mov EDI,128
.L_4221fa:

            mov EDX,EAX
            mov ECX,EAX
            mov R9D,EDI
            shr DL,3
            and ECX,7
            and EDX,31
            sar R9D,CL
            movzx EDX,BYTE PTR [RSP+RDX*1+67]
            and EDX,R9D
            cmp EDX,1
            sbb SIL,255
            add EAX,1
            cmp AL,63
            jne .L_4221fa

            cmp BYTE PTR [RBP+4662],SIL
            jae .L_4222dc

            movzx ECX,BYTE PTR [RBP+4677]
            test CL,CL
            jne .L_4222dc

            xor EDX,EDX
.L_422241:

            movsxd RAX,EDX
            imul RAX,RAX,40
            add RAX,RBP
            movzx ESI,BYTE PTR [RAX+778]
            and ESI,7
            cmp SIL,7
            jne .L_42227e

            imul RDI,RDX,40
            movzx EAX,BYTE PTR [RAX+789]
            movzx ESI,BYTE PTR [RBP+RDI*1+782]
            and EAX,3
            cmp SIL,AL
            cmovbe EAX,ESI
            cmp AL,1
            jbe .L_42227e

            add ECX,1
.L_42227e:

            add RDX,1
            cmp RDX,63
            jne .L_422241

            cmp CL,6
            jbe .L_4222dc

            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_420990

            test AL,AL
            mov R8D,DWORD PTR [RSP+28]
            je .L_4222dc

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            call .L_420820

            test AL,AL
            mov R8D,DWORD PTR [RSP+28]
            je .L_4222dc

            movzx R13D,BYTE PTR [RBP+4676]
            call .L_401460

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+28]
            cdq 
            idiv R13D
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBP+4677],AL
.L_4222dc:

            imul R12,R12,40
            test BYTE PTR [RBP+R12*1+789],64
            je .L_422561

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,5
            cmp AL,5
            je .L_422304

            cmp R15B,9
            ja .L_42256c
.L_422304:

            mov DWORD PTR [RSP+28],R8D
            call .L_401240

            mov R8D,DWORD PTR [RSP+28]
            mov DWORD PTR [RBX+8],EAX
.L_422316:

            mov EDX,DWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBP
            mov DWORD PTR [RSP+28],R8D
            call .L_41bc90

            mov RDI,QWORD PTR [RSP+8]
            add RDI,7248
            call .L_429fa0

            mov R8D,DWORD PTR [RSP+28]
            jmp .L_421f20
.L_422347:

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            cmp WORD PTR [RBP+40],AX
            je .L_4224ec

            movzx EAX,BYTE PTR [RBX+26]
.L_42235e:

            and EAX,7
            cmp AL,7
            je .L_4224ec
.L_422369:

            lea R12,QWORD PTR [RBP+16]
            mov RSI,R13
            mov DWORD PTR [RSP+16],R8D
            mov RDI,R12
            call .L_408380

            test AL,AL
            mov R8D,DWORD PTR [RSP+16]
            je .L_422469

            movzx EAX,WORD PTR [RSP+44]
            rol AX,8
            cmp WORD PTR [RBP+40],AX
            jne .L_422456

            test BYTE PTR [RBP+56],2
            je .L_4223f5

            xor R13D,R13D
            xor R15D,R15D
            mov R14D,128
.L_4223af:

            mov EAX,R15D
            mov ECX,R15D
            shr AL,3
            and ECX,7
            and EAX,31
            movzx EDX,BYTE PTR [RSP+RAX*1+67]
            mov EAX,R14D
            sar EAX,CL
            test EDX,EAX
            je .L_4223eb

            mov RDI,RBP
            mov DWORD PTR [RSP+8],R8D
            call .L_415eb0

            cmp AL,R15B
            mov R8D,DWORD PTR [RSP+8]
            je .L_4225bc

            add R13D,1
.L_4223eb:

            add R15D,1
            cmp R15B,63
            jne .L_4223af
.L_4223f5:

            mov DWORD PTR [RSP+8],R8D
            call .L_401240

            mov R8D,DWORD PTR [RSP+8]
            mov DWORD PTR [R12+8],EAX
            jmp .L_421f20
          .byte 0x66
          .byte 0x90
.L_422410:

            mov RSI,RBP
            mov RDI,RBX
            call .L_41af00

            test EAX,EAX
            jg .L_422042

            jmp .L_42204f
.L_422428:

            call __stack_chk_fail@PLT
.L_42242d:

            mov R8D,EAX
            jmp .L_421f20
.L_422435:

            cmp WORD PTR [RBP+40],AX
            je .L_4221b5

            movzx EAX,BYTE PTR [RBX+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_42235e

            jmp .L_4221b5
.L_422456:

            mov RDI,RBP
            call .L_415e50

            mov R8D,4
            jmp .L_421f20
.L_422469:

            test BYTE PTR [RBP+56],2
            je .L_422559

            movzx EAX,BYTE PTR [RBX+26]
            mov R12,RBX
            and EAX,5
            cmp AL,5
            je .L_4223f5

            mov RAX,QWORD PTR [RSP+56]
            lea R13,QWORD PTR [RBX+28]
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_413070

            movsx R12D,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            add RDI,1560
            call .L_407e20

            mov EDX,R12D
            movsx ESI,AL
            mov RDI,R13
            call .L_413080

            mov BYTE PTR [RBX+27],0
            call .L_401240

            mov DWORD PTR [RBX+8],EAX
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,4294967288
.L_4224d0:

            or EAX,5
            mov RSI,RBX
            mov RDI,RBP
            mov BYTE PTR [RBX+26],AL
            call .L_41b5d0

            mov R8D,4
            jmp .L_421f20
.L_4224ec:

            test BYTE PTR [RBP+56],2
            je .L_422369

            movzx EAX,BYTE PTR [RBP+4677]
            test AL,AL
            jne .L_422369

            xor EDX,EDX
.L_422507:

            movsxd RCX,EDX
            imul RCX,RCX,40
            test BYTE PTR [RBP+RCX*1+789],64
            setne CL
            add EDX,1
            add EAX,ECX
            cmp EDX,63
            jne .L_422507

            cmp BYTE PTR [RBP+4661],AL
            jbe .L_422369

            movzx EBX,BYTE PTR [RBP+4676]
            mov DWORD PTR [RSP+8],R8D
            call .L_401460

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            cdq 
            idiv EBX
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBP+4677],AL
            jmp .L_421f20
.L_422559:

            mov R12,RBX
            jmp .L_4223f5
.L_422561:

            mov R8D,4
            jmp .L_421f20
.L_42256c:

            mov RAX,QWORD PTR [RSP+56]
            lea R13,QWORD PTR [RBX+28]
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_413070

            movsx R12D,BYTE PTR [R14+3]
            mov RDI,QWORD PTR [RSP+8]
            add RDI,1560
            call .L_407e20

            mov EDX,R12D
            movsx ESI,AL
            mov RDI,R13
            call .L_413080

            mov BYTE PTR [RBX+27],0
            call .L_401240

            mov DWORD PTR [RBX+8],EAX
            movzx EAX,BYTE PTR [RBX+26]
            and EAX,120
            jmp .L_4224d0
.L_4225bc:

            movzx R13D,R13B
            mov DWORD PTR [RSP+8],R8D
            mov RDI,RBP
            test BYTE PTR [RSP+R13*1+75],15
            je .L_422625

            call .L_415eb0

            movzx EAX,AL
            movzx ECX,BYTE PTR [RSP+24]
            mov RDI,RBP
            imul RAX,RAX,40
            mov BYTE PTR [RBP+RAX*1+788],CL
            call .L_415eb0

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            imul RAX,RAX,40
            lea RCX,QWORD PTR [RBP+RAX*1+784]
            movzx EAX,BYTE PTR [RSP+R13*1+75]
            and EAX,15
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967235
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            jmp .L_4223f5
.L_422625:

            call .L_415eb0

            movzx EAX,AL
            mov RDI,RBP
            imul RAX,RAX,40
            mov BYTE PTR [RBP+RAX*1+788],63
            call .L_415eb0

            movzx EAX,AL
            mov R8D,DWORD PTR [RSP+8]
            imul RAX,RAX,40
            and BYTE PTR [RBP+RAX*1+789],195
            jmp .L_4223f5
.L_42265a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_422660:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_422671:

            call .L_401240

            lea RDI,QWORD PTR [R14+656]
            mov ESI,EAX
            mov EDX,1000
            call .L_430d50

            movzx EAX,BYTE PTR [R14+4648]
            test AL,AL
            je .L_42269f

            sub EAX,1
            mov BYTE PTR [R14+4648],AL
.L_42269f:

            movzx EAX,BYTE PTR [R14+149]
            test AL,AL
            je .L_4226b5

            sub EAX,1
            mov BYTE PTR [R14+149],AL
.L_4226b5:

            movzx ECX,BYTE PTR [R14+4677]
            mov EAX,DWORD PTR [R14+12]
            test CL,CL
            je .L_4226f0

            sub ECX,1
            test CL,CL
            mov BYTE PTR [R14+4677],CL
            jne .L_4226f0

            cmp EAX,4
            ja .L_422780

            lea RDX,QWORD PTR [RIP+.L_4591f4]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4226f0:

            cmp EAX,4
            ja .L_422780

            lea RDX,QWORD PTR [RIP+.L_459208]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
.L_422709:

            xor EBX,EBX
.L_42270b:

            call .L_401240

            sub EAX,DWORD PTR [R14+748]
            mov EDX,274877907
            movzx ECX,BYTE PTR [R14+4660]
            mul EDX
            shr EDX,6
            cmp ECX,EDX
            jbe .L_422a6b
.L_422731:

            test BL,BL
            je .L_422780

            xor EDX,EDX
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422740:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R14+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_422740

            cmp BYTE PTR [R14+4662],CL
            jae .L_422780

            mov ESI,1
            mov RDI,R14
            call .L_415170

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422780:

            cmp BYTE PTR [R14+3272],0
            je .L_422880

            movzx ECX,BYTE PTR [R14+3306]
            mov EAX,1
            and ECX,7
            shl RAX,CL
            test AL,40
            jne .L_422abe

            lea R12,QWORD PTR [R14+3280]
            xor EBX,EBX
            mov EBP,1
            jmp .L_422815
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4227c0:

            test AL,17
            jne .L_4227d4

            call .L_401240
.L_4227c9:

            mov RSI,R12
            mov RDI,R14
            call .L_420c20
.L_4227d4:

            movzx EAX,BYTE PTR [R14+3272]
            add EBX,1
            cmp EAX,EBX
            jle .L_422880
.L_4227e7:

            movsxd RDX,EBX
            add R12,136
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx ECX,BYTE PTR [R14+RAX*8+3306]
            mov RAX,RBP
            and ECX,7
            shl RAX,CL
            test AL,40
            jne .L_422abe
.L_422815:

            test AL,198
            je .L_4227c0

            imul R13D,DWORD PTR [R12+92],1000
            call .L_401240

            sub EAX,DWORD PTR [R12+8]
            cmp EAX,R13D
            jae .L_4227c9

            mov EAX,DWORD PTR [R14+12]
            sub EAX,3
            cmp EAX,1
            ja .L_4227d4

            movsxd RDX,EBX
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [R14+RAX*8+3306]
            and EAX,7
            cmp AL,1
            jne .L_4227d4

            mov RSI,R12
            mov RDI,R14
            add EBX,1
            call .L_41c8a0

            movzx EAX,BYTE PTR [R14+3272]
            cmp EAX,EBX
            jg .L_4227e7

            nop
            nop
            nop
            nop
.L_422880:

            lea R15,QWORD PTR [R14+752]
            xor EBX,EBX
            lea R13,QWORD PTR [RIP+.L_459230]
            jmp .L_4228b9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_422898:

            cmp EAX,1999
            jbe .L_4228a4

            cmp ECX,5
            je .L_4228e9
.L_4228a4:

            cmp DWORD PTR [R14+12],4
            je .L_422920
.L_4228ab:

            add RBX,1
            add R15,40
            cmp RBX,63
            je .L_422902
.L_4228b9:

            call .L_401240

            movsxd RDX,EBX
            sub EAX,DWORD PTR [R15+8]
            mov R12D,EBX
            lea RDX,QWORD PTR [RDX+RDX*4]
            mov EBP,EBX
            movzx EDX,BYTE PTR [R14+RDX*8+778]
            and EDX,7
            movzx ECX,DL
            cmp ECX,7
            jne .L_422898

            cmp EAX,99999
            jbe .L_4228a4
.L_4228e9:

            mov RSI,R15
            mov RDI,R14
            add RBX,1
            call .L_420c20

            add R15,40
            cmp RBX,63
            jne .L_4228b9
.L_422902:

            add RSP,8
.L_422906:

            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_41cb20
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422920:

            movsxd RCX,EBP
            lea RCX,QWORD PTR [RCX+RCX*4]
            lea RSI,QWORD PTR [R14+RCX*8+784]
            movzx ECX,BYTE PTR [RSI+5]
            test CL,64
            je .L_422970

            cmp BYTE PTR [R15+36],62
            jbe .L_4228ab

            cmp BYTE PTR [R14+4669],R12B
            je .L_422951

            cmp DL,7
            je .L_422990
.L_422951:

            cmp EAX,89999
            jbe .L_4228ab

            mov ESI,EBP
            mov RDI,R14
            call .L_41b3b0

            jmp .L_4228ab
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_422970:

            test CL,CL
            jns .L_4228ab

            cmp EAX,189999
            jbe .L_4228ab

            and ECX,127
            mov BYTE PTR [RSI+5],CL
            jmp .L_4228ab
          .byte 0x66
          .byte 0x90
.L_422990:

            movzx EDX,BYTE PTR [R15+30]
            and ECX,3
            cmp DL,CL
            cmovbe ECX,EDX
            sub ECX,1
            cmp CL,2
            ja .L_422951

            movzx ECX,CL
            cmp BYTE PTR [R13+RCX*1],15
            jbe .L_4228ab

            jmp .L_422951
.L_4229b6:

            call .L_401240

            sub EAX,DWORD PTR [R14+748]
            cmp EAX,9999
            jbe .L_422780

            add BYTE PTR [R14+744],1
            call .L_401240

            mov DWORD PTR [R14+748],EAX
            jmp .L_422780
.L_4229e6:

            cmp BYTE PTR [R14+4648],0
            jne .L_422780

            add RSP,8
.L_4229f8:

            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_415e50
.L_422a0a:

            xor EDX,EDX
            nop
            nop
            nop
            nop
.L_422a10:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [R14+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_422a10

            cmp BYTE PTR [R14+4661],CL
            jbe .L_422a7d

            mov ESI,2
            mov RDI,R14
            call .L_41e920
.L_422a49:

            lea RBX,QWORD PTR [R14+592]
            mov RDI,RBX
            call .L_4311a0

            test AL,AL
            je .L_422a91

            add RSP,8
.L_422a60:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_422a6b:

            mov ESI,1
            mov RDI,R14
            call .L_415170

            jmp .L_422731
.L_422a7d:

            mov RDI,R14
            call .L_4153c0

            jmp .L_422a49
.L_422a87:

            mov EBX,1
            jmp .L_42270b
.L_422a91:

            mov RDI,R14
            call .L_4202e0

            add RSP,8
            mov RDI,RBX
            mov ECX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            mov EDX,630000
            mov ESI,570000
            jmp .L_431240
.L_422abe:

            lea RCX,QWORD PTR [RIP+.L_459400]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1921
            call __assert_fail@PLT
.L_422add:

            lea RCX,QWORD PTR [RIP+.L_459400]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,1830
            call __assert_fail@PLT
.L_422afc:

            nop
            nop
            nop
            nop
.L_422b00:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a20

            add RSP,8
            mov RDI,RAX
            jmp .L_422660
.L_422b1d:

            nop
            nop
            nop
.L_422b20:

            push RBX
            mov RBX,RDI
            call .L_41d020

            test RAX,RAX
            je .L_422b40

            mov RDI,RBX
            mov RSI,RAX
            pop RBX
            jmp .L_420c20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_422b40:

            mov EAX,23
            pop RBX
            ret 
.L_422b47:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422b50:

            cmp BYTE PTR [RDI+3272],0
            je .L_422bd0

            push RBP
            push RBX
            mov RBP,RDI
            xor EBX,EBX
            sub RSP,8
.L_422b64:

            jmp .L_422b7f
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422b70:

            cmp AL,1
            je .L_422b9f

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            jbe .L_422bc7
.L_422b7f:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_422b70
.L_422b9f:

            movzx EDX,BL
            mov RDI,RBP
            add EBX,1
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RSI,QWORD PTR [RBP+RAX*8+3280]
            call .L_420c20

            cmp BYTE PTR [RBP+3272],BL
            ja .L_422b7f
.L_422bc7:

            add RSP,8
.L_422bcb:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_422bd0:

            ret 
.L_422bd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422be0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,ESI
            sub RSP,8
.L_422bef:

            call .L_430af0

            mov R13,RAX
            call .L_401240

            movzx R12D,BYTE PTR [RBX+4676]
            mov DWORD PTR [RBX+748],EAX
            call .L_401460

            movzx EAX,AL
            mov RDI,RBX
            cdq 
            idiv R12D
            lea EAX,DWORD PTR [RDX+1]
            mov BYTE PTR [RBX+4677],AL
            call .L_41b4e0

            call .L_401240

            lea RDI,QWORD PTR [RBX+656]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            test BYTE PTR [RBX+4668],1
            je .L_422c50

            or BYTE PTR [R13+1564],128
.L_422c50:

            mov RDI,R13
            call .L_4101c0

            cmp BYTE PTR [RBX+4670],62
            mov EAX,13
            ja .L_422ceb

            cmp EBP,2
            ja .L_422da2

            cmp EBP,1
            jae .L_422db2
.L_422c7c:

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_422ce9

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_422ee5

            cmp DL,3
            ja .L_422ee5

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_422ce4
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_422cb8:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,1
            je .L_422ee5

            cmp AL,3
            ja .L_422ee5
.L_422ce4:

            cmp RSI,RDX
            jne .L_422cb8
.L_422ce9:

            xor EAX,EAX
.L_422ceb:

            xor ESI,ESI
            xor ECX,ECX
            nop
.L_422cf0:

            movsxd RDX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            movzx EDX,BYTE PTR [RBX+RDX*8+789]
            shr DL,6
            and EDX,1
            cmp DL,1
            sbb SIL,255
            add ECX,1
            cmp ECX,63
            jne .L_422cf0

            cmp BYTE PTR [RBX+4661],SIL
            ja .L_422d97

            cmp BYTE PTR [RBX+4670],62
            ja .L_422d8b

            movzx EDX,BYTE PTR [RBX+3272]
            test DL,DL
            je .L_422d8b

            movzx ECX,BYTE PTR [RBX+3306]
            and ECX,7
            cmp CL,1
            je .L_422d97

            cmp CL,3
            ja .L_422d97

            lea EDI,DWORD PTR [RDX-1]
            mov ECX,1
            movzx EDI,DIL
            add RDI,1
            jmp .L_422d86
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422d60:

            movsxd RSI,ECX
            add RCX,1
            mov RDX,RSI
            shl RDX,4
            add RDX,RSI
            movzx EDX,BYTE PTR [RBX+RDX*8+3306]
            and EDX,7
            cmp DL,3
            ja .L_422d97

            cmp DL,1
            je .L_422d97
.L_422d86:

            cmp RCX,RDI
            jne .L_422d60
.L_422d8b:

            mov EDX,16191
            mov WORD PTR [RBX+4669],DX
.L_422d97:

            add RSP,8
.L_422d9b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_422da2:

            cmp EBP,3
            je .L_422c7c

            xor EAX,EAX
            jmp .L_422ceb
.L_422db2:

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422dc0:

            movsxd RAX,EDX
            lea RAX,QWORD PTR [RAX+RAX*4]
            movzx EAX,BYTE PTR [RBX+RAX*8+789]
            shr AL,6
            and EAX,1
            cmp AL,1
            sbb CL,255
            add EDX,1
            cmp EDX,63
            jne .L_422dc0

            cmp BYTE PTR [RBX+4662],CL
            jb .L_422e68

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_422ce9

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_422f0a

            cmp DL,3
            ja .L_422f0a

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_422e5c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_422e30:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,3
            ja .L_422f0a

            cmp AL,1
            je .L_422f0a
.L_422e5c:

            cmp RDX,RSI
            jne .L_422e30

            xor EAX,EAX
            jmp .L_422ceb
.L_422e68:

            mov RDI,RBX
            call .L_41ea00

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_422ed2

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,1
            je .L_422f1e

            cmp DL,3
            ja .L_422f1e

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_422ecd
.L_422ea9:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,3
            ja .L_422f1e

            cmp AL,1
            je .L_422f1e
.L_422ecd:

            cmp RSI,RDX
            jne .L_422ea9
.L_422ed2:

            mov ECX,16191
            xor EAX,EAX
            mov WORD PTR [RBX+4669],CX
            jmp .L_422ceb
.L_422ee5:

            mov EAX,DWORD PTR [RBX+2]
            bswap EAX
            cmp DWORD PTR [RBX+4672],EAX
            je .L_422ce9

            mov ESI,4
            mov RDI,RBX
            call .L_41e920

            xor EAX,EAX
            jmp .L_422ceb
.L_422f0a:

            mov ESI,3
            mov RDI,RBX
            call .L_41e920

            xor EAX,EAX
            jmp .L_422ceb
.L_422f1e:

            mov RDI,RBX
            call .L_422b50

            jmp .L_422ed2
.L_422f28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422f30:

            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            sub RSP,8
            or BYTE PTR [RSI+26],7
            movzx ESI,WORD PTR [RSI+24]
            call .L_41dcf0

            add RSP,8
            mov RDX,RBX
            mov RDI,RBP
            pop RBX
            pop RBP
            xor ESI,ESI
            jmp .L_420b50
.L_422f5c:

            nop
            nop
            nop
            nop
.L_422f60:

            movzx EAX,BYTE PTR [RSI+26]
            and EAX,7
            cmp AL,7
            je .L_422f70

            jmp .L_422f30
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_422f70:

            ret 
.L_422f72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_422f80:

            push R15
            push R14
            lea R14,QWORD PTR [RDX+16]
            push R13
            push R12
            xor R8D,R8D
            push RBP
            push RBX
            mov RBP,RSI
            xor ESI,ESI
            xor R9D,R9D
            xor R10D,R10D
            sub RSP,120
.L_422fa0:

            xor R11D,R11D
            mov R12,RDX
            mov WORD PTR [RSP+74],SI
            lea RSI,QWORD PTR [RIP+.L_459650]
            mov RDX,R14
            mov R13D,ECX
            xor ECX,ECX
            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+47],CX
            mov WORD PTR [RSP+56],R8W
            mov WORD PTR [RSP+50],R9W
            mov WORD PTR [RSP+84],R10W
            mov WORD PTR [RSP+44],R11W
            call .L_41aea0

            lea RCX,QWORD PTR [RSP+47]
            mov EDX,3
            mov ESI,1
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            mov R15D,EAX
            jne .L_42301a

            cmp BYTE PTR [RSP+48],1
            je .L_423040
.L_423014:

            mov R15D,6
.L_42301a:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_4232c9

            add RSP,120
.L_423035:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_423040:

            lea RAX,QWORD PTR [RSP+66]
            mov RDI,R14
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_40f0c0

            mov RAX,QWORD PTR [RSP+8]
            mov RDI,RBX
            mov RSI,RAX
            call .L_41b940

            mov R14,RAX
            mov BYTE PTR [RSP+94],0
            movzx EAX,BYTE PTR [RSP+49]
            test R14,R14
            je .L_423081

            movzx EDX,BYTE PTR [R14+26]
            test DL,7
            jne .L_4230b0
.L_423081:

            test AL,8
            je .L_42301a

            lea RCX,QWORD PTR [RSP+94]
            xor R9D,R9D
            mov R8D,2
            mov RDX,R12
            xor ESI,ESI
            mov RDI,RBX
            mov BYTE PTR [RSP+95],17
            call .L_41fe10

            jmp .L_42301a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4230b0:

            and EAX,15
            and EDX,4294967175
            mov ESI,3
            shl EAX,3
            mov RDI,RBP
            or EAX,EDX
            mov EDX,2817
            mov BYTE PTR [R14+26],AL
            lea RAX,QWORD PTR [RSP+74]
            mov WORD PTR [RSP+95],DX
            mov EDX,10
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_423298

            movzx EAX,BYTE PTR [RSP+75]
            sub EAX,4
            cmp AL,4
            ja .L_423014

            mov EAX,2052
            mov BYTE PTR [RSP+99],5
            mov BYTE PTR [RSP+8],6
            mov WORD PTR [RSP+97],AX
.L_423114:

            lea RDX,QWORD PTR [RSP+44]
            mov ESI,19
            mov RDI,RBP
            call .L_430e40

            test EAX,EAX
            jne .L_42315a

            movzx EDX,WORD PTR [RSP+44]
            mov RCX,R14
            mov RSI,RBP
            mov RDI,RBX
            call .L_41c190

            test EAX,EAX
            jne .L_4232a2

            movzx EAX,BYTE PTR [RSP+8]
            mov RSI,RAX
            mov BYTE PTR [RSP+RAX*1+94],19
            add ESI,1
            mov BYTE PTR [RSP+8],SIL
.L_42315a:

            lea RCX,QWORD PTR [RSP+56]
            mov EDX,10
            mov ESI,11
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_423180

            cmp BYTE PTR [RSP+57],8
            jne .L_423014
.L_423180:

            lea RCX,QWORD PTR [RSP+50]
            mov EDX,6
            mov ESI,2
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_4231c5

            cmp BYTE PTR [RSP+51],4
            jne .L_423014

            mov EAX,DWORD PTR [RSP+52]
            bswap EAX
            mov DWORD PTR [R14+92],EAX
            movzx EAX,BYTE PTR [RSP+8]
            mov RSI,RAX
            mov BYTE PTR [RSP+RAX*1+94],2
            add ESI,1
            mov BYTE PTR [RSP+8],SIL
.L_4231c5:

            lea RAX,QWORD PTR [RSP+84]
            mov EDX,10
            mov ESI,13
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_4232aa

            movzx ECX,BYTE PTR [RSP+85]
            cmp CL,8
            ja .L_423014

            movzx EAX,BYTE PTR [RSP+8]
            mov EDX,10
            movzx ESI,CL
            sub EDX,EAX
            mov EBP,EAX
            cmp ESI,EDX
            jg .L_423014

            test CL,CL
            je .L_423258

            mov RDX,QWORD PTR [RSP+24]
            sub ECX,1
            movzx ECX,CL
            lea RSI,QWORD PTR [RDX+RCX*1+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423230:

            movzx ECX,BYTE PTR [RDX+2]
            mov EBP,EAX
            cmp CL,11
            je .L_42324f

            add BYTE PTR [RSP+8],1
            mov BYTE PTR [RSP+RAX*1+94],CL
            movzx EDI,BYTE PTR [RSP+8]
            movzx EAX,DIL
            mov EBP,EAX
.L_42324f:

            add RDX,1
            cmp RDX,RSI
            jne .L_423230
.L_423258:

            call .L_401240

            mov DWORD PTR [R14+8],EAX
            movzx EAX,BYTE PTR [R14+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,1
            je .L_4232b1

            cmp DL,6
            je .L_4232b1
.L_423275:

            mov R9,QWORD PTR [RSP+16]
            lea RCX,QWORD PTR [RSP+94]
            mov R8D,EBP
            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_41fe10

            jmp .L_42301a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_423298:

            mov BYTE PTR [RSP+8],3
            jmp .L_423114
.L_4232a2:

            mov R15D,EAX
            jmp .L_42301a
.L_4232aa:

            movzx EBP,BYTE PTR [RSP+8]
            jmp .L_423258
.L_4232b1:

            and EAX,7
            cmp AL,7
            je .L_4232c3

            mov RSI,R14
            mov RDI,RBX
            call .L_422f30
.L_4232c3:

            mov DWORD PTR [R14+20],R13D
            jmp .L_423275
.L_4232c9:

            call __stack_chk_fail@PLT
.L_4232ce:

            nop
            nop
.L_4232d0:

            push R15
            push R14
            xor R8D,R8D
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+16]
            xor EDI,EDI
            mov R12,RSI
            xor ESI,ESI
            sub RSP,72
.L_4232ef:

            xor R9D,R9D
            xor R10D,R10D
            lea RBP,QWORD PTR [RSP+38]
            xor R11D,R11D
            mov WORD PTR [RSP+46],SI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+3],DI
            xor EAX,EAX
            mov RSI,RBP
            mov RDI,RBX
            mov R15D,ECX
            xor ECX,ECX
            mov R14,QWORD PTR [RDX+40]
            mov WORD PTR [RSP+6],AX
            mov WORD PTR [RSP+10],CX
            mov WORD PTR [RSP+16],R8W
            mov WORD PTR [RSP+22],R9W
            mov WORD PTR [RSP+28],R10W
            mov WORD PTR [RSP],R11W
            call .L_40f0c0

            mov RSI,RBP
            mov RDI,R13
            call .L_41b940

            test RAX,RAX
            je .L_423580

            lea RCX,QWORD PTR [RSP+6]
            xor ESI,ESI
            mov EDX,4
            mov RDI,R12
            mov RBP,RAX
            call .L_430f70

            test EAX,EAX
            jne .L_423570

            cmp BYTE PTR [RSP+7],2
            jne .L_423548

            movzx EAX,WORD PTR [RSP+8]
            movzx ECX,WORD PTR [RBP+24]
            rol AX,8
            cmp AX,CX
            jne .L_423530
.L_4233a2:

            lea RSI,QWORD PTR [RIP+.L_4596b0]
            mov RDX,RBX
            mov RDI,R13
            call .L_41aeb0

            lea RCX,QWORD PTR [RSP+46]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_4233ee

            cmp BYTE PTR [RSP+47],8
            mov EAX,8
            jne .L_42354d

            mov RBX,QWORD PTR [RBP+96]
            cmp QWORD PTR [RSP+48],RBX
            jne .L_42354d
.L_4233ee:

            lea RCX,QWORD PTR [RSP+3]
            mov EDX,3
            mov ESI,17
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_42341f

            cmp BYTE PTR [RSP+4],1
            jne .L_423548

            cmp BYTE PTR [RSP+5],1
            je .L_4235e0
.L_42341f:

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_42344e

            cmp BYTE PTR [RSP+17],4
            jne .L_423548

            mov EAX,DWORD PTR [RSP+18]
            bswap EAX
            mov DWORD PTR [RBP+12],EAX
.L_42344e:

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_42347d

            cmp BYTE PTR [RSP+23],4
            jne .L_423548

            mov EAX,DWORD PTR [RSP+24]
            bswap EAX
            mov DWORD PTR [RBP+16],EAX
.L_42347d:

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_4234ac

            cmp BYTE PTR [RSP+11],4
            jne .L_423548

            mov EAX,DWORD PTR [RSP+12]
            bswap EAX
            mov DWORD PTR [RBP+92],EAX
.L_4234ac:

            mov RDX,RSP
            mov ESI,19
            mov RDI,R12
            call .L_430e40

            test EAX,EAX
            je .L_4235a0
.L_4234c4:

            lea RCX,QWORD PTR [RSP+28]
            mov EDX,10
            mov ESI,11
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            je .L_4235c0

            movzx EAX,BYTE PTR [RBP+26]
.L_4234e7:

            and EAX,7
            cmp AL,7
            je .L_4234f9

            mov RSI,RBP
            mov RDI,R13
            call .L_422f30
.L_4234f9:

            call .L_401240

            mov DWORD PTR [RBP+20],R15D
            mov DWORD PTR [RBP+8],EAX
            mov RDI,R13
            movsx EBX,BYTE PTR [R14+3]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            call .L_407e20

            lea RDI,QWORD PTR [RBP+28]
            movsx ESI,AL
            mov EDX,EBX
            call .L_413080

            xor EAX,EAX
            jmp .L_42354d
.L_423530:

            lea RSI,QWORD PTR [RIP+.L_459678]
            movzx ECX,AX
            mov RDX,RBX
            mov RDI,R13
            call .L_41aeb0

            nop
            nop
            nop
.L_423548:

            mov EAX,6
.L_42354d:

            mov RBX,QWORD PTR [RSP+56]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4235ff

            add RSP,72
.L_423565:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_423570:

            movzx ECX,WORD PTR [RBP+24]
            jmp .L_4233a2
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_423580:

            lea RSI,QWORD PTR [RIP+.L_459678]
            mov RDX,RBX
            mov RDI,R13
            call .L_41aea0

            mov EAX,23
            jmp .L_42354d
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4235a0:

            movzx EDX,WORD PTR [RSP]
            mov RCX,RBP
            mov RSI,R12
            mov RDI,R13
            call .L_41c190

            test EAX,EAX
            je .L_4234c4

            jmp .L_42354d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4235c0:

            cmp BYTE PTR [RSP+29],8
            jne .L_423548

            movzx EAX,BYTE PTR [RBP+26]
            test AL,8
            je .L_4235f2

            movzx EDX,BYTE PTR [RSP+35]
            mov BYTE PTR [RBP+125],DL
            jmp .L_4234e7
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4235e0:

            mov RSI,RBP
            mov RDI,R13
            call .L_420c20

            xor EAX,EAX
            jmp .L_42354d
.L_4235f2:

            movzx EDX,BYTE PTR [RSP+36]
            mov BYTE PTR [RBP+125],DL
            jmp .L_4234e7
.L_4235ff:

            call __stack_chk_fail@PLT
.L_423604:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423610:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,56
.L_423624:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_430af0

            mov RDI,RBX
            mov R13,RAX
            call .L_4161c0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_423675

            mov EDX,12
            mov RSI,RBP
            mov RDI,RBX
            call .L_416200

            test EAX,EAX
            je .L_4236a0
.L_423665:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_423675:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42393b

            add RSP,56
.L_42368d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4236a0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_416280

            test EAX,EAX
            jne .L_423665

            mov RSI,RBP
            mov RDI,RBX
            call .L_4165e0

            test EAX,EAX
            jne .L_423665

            mov RSI,RBP
            mov RDI,RBX
            call .L_416870

            test EAX,EAX
            jne .L_423665

            mov RSI,RBP
            mov RDI,RBX
            call .L_416910

            test EAX,EAX
            jne .L_423665

            movzx EDI,WORD PTR [R12+24]
            test DI,DI
            jne .L_423761

            movzx R8D,BYTE PTR [RBX+3272]
            movzx EDI,WORD PTR [RBX+4658]
.L_4236f6:

            add EDI,1
            cmp DI,511
            ja .L_423870

            mov WORD PTR [RBX+4658],DI
.L_42370b:

            test R8D,R8D
            je .L_423753

            lea RSI,QWORD PTR [RBX+3304]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_423720:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            test BYTE PTR [RBX+RDX*8+3306],7
            je .L_423744

            movzx EDX,WORD PTR [RSI]
            and DX,511
            cmp DI,DX
            je .L_4236f6
.L_423744:

            add EAX,1
            add RSI,136
            cmp EAX,R8D
            jne .L_423720
.L_423753:

            or DI,WORD PTR [R13+1664]
            mov WORD PTR [R12+24],DI
.L_423761:

            movzx EDX,DI
            mov RSI,RBP
            mov RDI,RBX
            call .L_416580

            test EAX,EAX
            jne .L_423665

            lea R14,QWORD PTR [R12+96]
            lea R15,QWORD PTR [R12+101]
.L_423781:

            movzx EAX,BYTE PTR [R14]
            cmp AL,12
            je .L_4238b0

            jbe .L_423886

            cmp AL,24
            je .L_4238e0

            cmp AL,25
            jne .L_4237be

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1208]
            mov RSI,RBP
            call .L_409550

            test EAX,EAX
            jne .L_423665
.L_4237be:

            add R14,1
            cmp R15,R14
            jne .L_423781

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            shr DL,3
            and EDX,2
            je .L_423904
.L_4237db:

            mov EDX,EAX
            and EDX,7
            cmp DL,7
            je .L_4237f6

            mov RSI,R12
            mov RDI,RBX
            call .L_422f30

            movzx EAX,BYTE PTR [R12+26]
.L_4237f6:

            shr AL,3
            test AL,8
            je .L_423925
.L_423801:

            lea R13,QWORD PTR [RSP+16]
            xor EAX,EAX
            mov EDX,4294934782
            mov RSI,R12
            mov WORD PTR [RSP+30],AX
            mov WORD PTR [RSP+16],DX
            mov RDI,R13
            mov QWORD PTR [RSP+18],0
            mov DWORD PTR [RSP+26],0
            call .L_40f0b0

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_416d90

            test EAX,EAX
            jne .L_423665

            movzx ECX,WORD PTR [R12+24]
            lea RSI,QWORD PTR [RIP+.L_4590f3]
            mov RDX,R13
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_41aeb0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_423675
          .byte 0x66
          .byte 0x90
.L_423870:

            mov ECX,1
            mov EDI,1
            mov WORD PTR [RBX+4658],CX
            jmp .L_42370b
.L_423886:

            cmp AL,9
            jne .L_4237be

            mov RSI,RBP
            mov RDI,RBX
            call .L_420280

            test EAX,EAX
            je .L_4237be

            jmp .L_423665
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4238b0:

            movzx EDX,BYTE PTR [R12+26]
            mov RSI,RBP
            mov RDI,RBX
            shr DL,3
            not EDX
            and EDX,1
            call .L_4166a0

            test EAX,EAX
            je .L_4237be

            jmp .L_423665
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4238e0:

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1080]
            mov RSI,RBP
            call .L_409550

            test EAX,EAX
            je .L_4237be

            jmp .L_423665
.L_423904:

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_41fc50

            test EAX,EAX
            jne .L_423665

            movzx EAX,BYTE PTR [R12+26]
            jmp .L_4237db
.L_423925:

            lea RDI,QWORD PTR [R13+2504]
            xor EDX,EDX
            mov RSI,R12
            call .L_42b480

            jmp .L_423801
.L_42393b:

            call __stack_chk_fail@PLT
.L_423940:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            add RBP,16
            sub RSP,152
.L_423961:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_430af0

            xor ESI,ESI
            mov R14,QWORD PTR [RBP+24]
            xor EDX,EDX
            xor EDI,EDI
            mov WORD PTR [RSP+67],SI
            lea RSI,QWORD PTR [RIP+.L_45910a]
            xor ECX,ECX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov WORD PTR [RSP+70],DX
            mov WORD PTR [RSP+82],DI
            mov R13,RAX
            mov RDX,RBP
            xor EAX,EAX
            mov RDI,RBX
            mov WORD PTR [RSP+76],CX
            mov WORD PTR [RSP+96],AX
            mov WORD PTR [RSP+106],R8W
            mov WORD PTR [RSP+116],R9W
            mov WORD PTR [RSP+126],R10W
            mov WORD PTR [RSP+64],R11W
            call .L_41aea0

            test BYTE PTR [RBX+4668],1
            je .L_423ae8

            test BYTE PTR [RBX+56],2
            je .L_423ae8

            cmp DWORD PTR [RBX+12],1
            jle .L_423ae8

            lea RAX,QWORD PTR [RSP+88]
            mov RDI,RBP
            mov RSI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_40f0c0

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBX
            call .L_41b940

            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            je .L_423b30

            lea RCX,QWORD PTR [RSP+96]
            mov EDX,10
            mov ESI,4
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_423aed

            cmp BYTE PTR [RSP+97],8
            jne .L_423b20

            mov R9,QWORD PTR [RSP+8]
            lea RAX,QWORD PTR [R9+96]
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR [R9+96]
            cmp QWORD PTR [RSP+98],RAX
            jne .L_423b20

            lea RBP,QWORD PTR [R13+2256]
            mov RSI,R9
            mov EDX,6
            mov RDI,RBP
            call .L_413990

            mov R9,QWORD PTR [RSP+8]
            mov RDI,RBP
            mov EDX,8
            mov RSI,R9
            call .L_413990

            mov R9,QWORD PTR [RSP+8]
            mov RDI,RBP
            mov EDX,9
            mov RSI,R9
            call .L_413990

            lea RCX,QWORD PTR [RSP+70]
            mov EDX,6
            mov ESI,5
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_423aed

            cmp BYTE PTR [RSP+71],4
            mov R9,QWORD PTR [RSP+8]
            je .L_423b37
.L_423adb:

            mov EBP,6
            jmp .L_423aed
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_423ae8:

            mov EBP,13
.L_423aed:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_423e35

            add RSP,152
.L_423b0d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_423b20:

            mov EBP,8
            jmp .L_423aed
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_423b30:

            mov EBP,24
            jmp .L_423aed
.L_423b37:

            lea RCX,QWORD PTR [RSP+76]
            mov EDX,6
            mov ESI,8
            mov RDI,R12
            mov QWORD PTR [RSP+8],R9
            call .L_430f70

            test EAX,EAX
            mov R9,QWORD PTR [RSP+8]
            jne .L_423e28

            cmp BYTE PTR [RSP+77],4
            jne .L_423adb
.L_423b6b:

            lea RCX,QWORD PTR [RSP+67]
            mov EDX,3
            mov ESI,1
            mov RDI,R12
            mov QWORD PTR [RSP+8],R9
            call .L_430f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_423aed

            cmp BYTE PTR [RSP+68],1
            jne .L_423adb

            lea RCX,QWORD PTR [RSP+82]
            mov EDX,6
            mov ESI,2
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_423aed

            cmp BYTE PTR [RSP+83],4
            mov R9,QWORD PTR [RSP+8]
            jne .L_423adb

            lea RAX,QWORD PTR [RSP+106]
            mov EDX,10
            mov ESI,13
            mov RDI,R12
            mov QWORD PTR [RSP+24],R9
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_430f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_423aed

            cmp BYTE PTR [RSP+107],5
            mov R9,QWORD PTR [RSP+24]
            ja .L_423adb

            lea RAX,QWORD PTR [RSP+116]
            mov EDX,10
            mov ESI,22
            mov RDI,R12
            mov QWORD PTR [RSP+32],R9
            mov BYTE PTR [RSP+117],0
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_430f70

            test EAX,EAX
            mov R9,QWORD PTR [RSP+32]
            jne .L_423c48

            cmp BYTE PTR [RSP+117],8
            jne .L_423adb
.L_423c48:

            lea RAX,QWORD PTR [RSP+126]
            mov EDX,10
            mov ESI,23
            mov RDI,R12
            mov QWORD PTR [RSP+40],R9
            mov BYTE PTR [RSP+127],0
            mov RCX,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_430f70

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            jne .L_423c85

            cmp BYTE PTR [RSP+127],8
            jne .L_423adb
.L_423c85:

            test BYTE PTR [RSP+69],2
            je .L_423e3a
.L_423c90:

            lea RAX,QWORD PTR [RBX+752]
            xor R12D,R12D
            mov QWORD PTR [RSP+40],RAX
            jmp .L_423cab
.L_423ca1:

            add R12,1
            cmp R12,63
            je .L_423cfc
.L_423cab:

            movsxd RAX,R12D
            imul RAX,RAX,40
            test BYTE PTR [RBX+RAX*1+778],7
            je .L_423ca1

            imul RCX,R12,40
            mov RSI,QWORD PTR [RSP]
            mov QWORD PTR [RSP+56],R9
            add RCX,QWORD PTR [RSP+40]
            mov RDI,RCX
            mov QWORD PTR [RSP+48],RCX
            call .L_408380

            test AL,AL
            mov RCX,QWORD PTR [RSP+48]
            mov R9,QWORD PTR [RSP+56]
            je .L_423ca1

            mov RSI,RCX
            mov RDI,RBX
            mov QWORD PTR [RSP],R9
            call .L_420c20

            mov R9,QWORD PTR [RSP]
.L_423cfc:

            movzx EAX,BYTE PTR [R9+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            je .L_423f36

            and EAX,4294967288
            or EAX,4
            mov BYTE PTR [R9+26],AL
.L_423d19:

            mov QWORD PTR [RSP],R9
            call .L_401240

            mov R9,QWORD PTR [RSP]
            lea RDI,QWORD PTR [R13+1560]
            mov DWORD PTR [R9+8],EAX
            mov EAX,DWORD PTR [RSP+72]
            mov DWORD PTR [R9+20],R15D
            bswap EAX
            mov DWORD PTR [R9+12],EAX
            mov EAX,DWORD PTR [RSP+78]
            bswap EAX
            mov DWORD PTR [R9+16],EAX
            movzx EAX,BYTE PTR [RSP+69]
            and EAX,15
            lea EDX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [R9+26]
            and EAX,4294967175
            or EAX,EDX
            mov BYTE PTR [R9+26],AL
            movsx R12D,BYTE PTR [R14+3]
            call .L_407e20

            mov R9,QWORD PTR [RSP]
            movsx ESI,AL
            mov EDX,R12D
            lea RDI,QWORD PTR [R9+28]
            call .L_413080

            mov EAX,DWORD PTR [RSP+84]
            test BYTE PTR [RSP+69],1
            mov R9,QWORD PTR [RSP]
            bswap EAX
            mov DWORD PTR [R9+92],EAX
            je .L_423f29

            movzx EAX,BYTE PTR [RBX+7]
            mov BYTE PTR [R9+125],AL
.L_423da4:

            mov RAX,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+8]
            mov DWORD PTR [R9+96],4294967295
            movzx R12D,BYTE PTR [RSP+107]
            mov BYTE PTR [RAX+4],255
            add RDX,2
            xor EAX,EAX
            jmp .L_423dd5
.L_423dc8:

            movzx ECX,BYTE PTR [RDX+RAX*1]
            mov BYTE PTR [R9+RAX*1+96],CL
            add RAX,1
.L_423dd5:

            cmp R12B,AL
            ja .L_423dc8

            cmp BYTE PTR [RSP+117],0
            jne .L_423eff
.L_423de5:

            movzx EAX,R12B
            add R12D,1
            mov BYTE PTR [R9+RAX*1+96],24
.L_423df3:

            cmp BYTE PTR [RSP+127],0
            jne .L_423ed5
.L_423dfe:

            movzx R12D,R12B
            mov BYTE PTR [R9+R12*1+96],25
.L_423e08:

            cmp DWORD PTR [RBX+12],4
            ja .L_423aed

            mov EAX,DWORD PTR [RBX+12]
            lea RDX,QWORD PTR [RIP+.L_45921c]
            movsxd RAX,DWORD PTR [RDX+RAX*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_423e28:

            mov EAX,DWORD PTR [RSP+72]
            mov DWORD PTR [RSP+78],EAX
            jmp .L_423b6b
.L_423e35:

            call __stack_chk_fail@PLT
.L_423e3a:

            lea RDX,QWORD PTR [RSP+64]
            mov ESI,19
            mov RDI,R12
            mov QWORD PTR [RSP+40],R9
            call .L_430e40

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            je .L_423e61
.L_423e5a:

            mov EBP,EAX
            jmp .L_423aed
.L_423e61:

            movzx EDX,WORD PTR [RSP+64]
            mov RCX,R9
            mov RSI,R12
            mov RDI,RBX
            call .L_41c190

            test EAX,EAX
            mov R9,QWORD PTR [RSP+40]
            je .L_423c90

            jmp .L_423e5a
.L_423e83:

            movzx EAX,BYTE PTR [R9+26]
            mov ESI,3
            mov RDI,RBX
            and EAX,4294967288
            or EAX,4
            mov BYTE PTR [R9+26],AL
            call .L_41e920

            jmp .L_423aed
.L_423ea4:

            lea RCX,QWORD PTR [RIP+.L_459380]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,2321
            call __assert_fail@PLT
.L_423ec3:

            mov RSI,R9
            mov RDI,RBX
            call .L_423610

            mov EBP,EAX
            jmp .L_423aed
.L_423ed5:

            mov RSI,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R13+1208]
            mov QWORD PTR [RSP],R9
            add RSI,2
            call .L_409530

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            jne .L_423dfe

            jmp .L_423e08
.L_423eff:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+1080]
            mov QWORD PTR [RSP],R9
            add RSI,2
            call .L_409530

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            jne .L_423de5

            jmp .L_423df3
.L_423f29:

            movzx EAX,BYTE PTR [RBX+8]
            mov BYTE PTR [R9+125],AL
            jmp .L_423da4
.L_423f36:

            mov RSI,R9
            mov RDI,RBX
            mov QWORD PTR [RSP],R9
            call .L_420c20

            mov R9,QWORD PTR [RSP]
            jmp .L_423d19
.L_423f4e:

            nop
            nop
.L_423f50:

            push R12
            push RBP
            xor R9D,R9D
            push RBX
            xor R10D,R10D
            xor R11D,R11D
            mov RBX,RDI
            sub RSP,32
.L_423f64:

            and BYTE PTR [RDI+4668],253
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RSI,RSI
            mov WORD PTR [RSP+6],R9W
            mov WORD PTR [RSP+9],R10W
            sete DIL
            test RDX,RDX
            mov WORD PTR [RSP+13],R11W
            sete AL
            or DIL,AL
            jne .L_423faa

            test R8D,R8D
            jne .L_423faa

            cmp BYTE PTR [RSI+1],68
            je .L_423fd0
.L_423faa:

            mov RDI,RBX
            call .L_4153c0

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42433d

            add RSP,32
.L_423fca:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_423fd0:

            mov RBP,RDX
            lea RSI,QWORD PTR [RIP+.L_459123]
            lea RDX,QWORD PTR [RCX+16]
            mov RDI,RBX
            call .L_41aea0

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,3
            mov ESI,4
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_423faa

            cmp BYTE PTR [RSP+7],1
            jne .L_423faa

            cmp BYTE PTR [RSP+8],0
            je .L_42409a

            cmp BYTE PTR [RBX+4670],62
            ja .L_423faa

            movzx EAX,BYTE PTR [RBX+3272]
            test AL,AL
            je .L_424089

            movzx EDX,BYTE PTR [RBX+3306]
            and EDX,7
            cmp DL,3
            ja .L_424330

            cmp DL,1
            je .L_424330

            lea ESI,DWORD PTR [RAX-1]
            mov EDX,1
            movzx ESI,SIL
            add RSI,1
            jmp .L_424084
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424058:

            movsxd RCX,EDX
            add RDX,1
            mov RAX,RCX
            shl RAX,4
            add RAX,RCX
            movzx EAX,BYTE PTR [RBX+RAX*8+3306]
            and EAX,7
            cmp AL,1
            je .L_424330

            cmp AL,3
            ja .L_424330
.L_424084:

            cmp RSI,RDX
            jne .L_424058
.L_424089:

            mov EAX,16191
            mov WORD PTR [RBX+4669],AX
            jmp .L_423faa
.L_42409a:

            lea RCX,QWORD PTR [RSP+9]
            mov EDX,4
            mov ESI,2
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_423faa

            cmp BYTE PTR [RSP+10],2
            jne .L_423faa

            movzx R12D,WORD PTR [RSP+11]
            rol R12W,8
            movzx R12D,R12W
            sar R12D,10
            cmp R12D,63
            je .L_423faa

            lea RCX,QWORD PTR [RSP+13]
            mov EDX,11
            mov ESI,7
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_423faa

            cmp BYTE PTR [RSP+14],9
            jne .L_423faa

            movzx EAX,BYTE PTR [RBX+4670]
            cmp AL,62
            ja .L_424154

            cmp AL,R12B
            je .L_424154

            movzx ECX,BYTE PTR [RBX+3272]
            xor EAX,EAX
            jmp .L_424150
.L_424126:

            movsxd RDX,EAX
            add EAX,1
            imul RDX,RDX,136
            movzx EDX,BYTE PTR [RBX+RDX*1+3306]
            and EDX,7
            cmp DL,1
            je .L_424342

            cmp DL,3
            ja .L_424342
.L_424150:

            cmp CL,AL
            ja .L_424126
.L_424154:

            movsxd RBP,R12D
            mov RDI,RBX
            mov BYTE PTR [RBX+4669],R12B
            imul RBP,RBP,40
            mov BYTE PTR [RBX+4670],R12B
            call .L_430af0

            mov RAX,QWORD PTR [RAX+1656]
            mov RDI,RBX
            add RBP,RBX
            mov QWORD PTR [RBP+752],RAX
            movzx ESI,BYTE PTR [RBX+4669]
            shl ESI,10
            movzx ESI,SI
            call .L_420e30

            test EAX,EAX
            jne .L_423faa

            movzx EAX,BYTE PTR [RSP+15]
            and BYTE PTR [RBP+789],195
            mov BYTE PTR [RBX+744],AL
            call .L_401240

            xor ESI,ESI
            mov DWORD PTR [RBX+748],EAX
            mov R8D,128
.L_4241c4:

            movsxd RAX,ESI
            mov ECX,ESI
            lea RAX,QWORD PTR [RAX+RAX*4]
            and ECX,7
            lea RDI,QWORD PTR [RBX+RAX*8+784]
            mov EAX,ESI
            shr AL,3
            and EAX,31
            movzx EDX,BYTE PTR [RSP+RAX*1+16]
            mov EAX,R8D
            sar EAX,CL
            test EDX,EAX
            setne AL
            add ESI,1
            shl EAX,6
            mov EDX,EAX
            movzx EAX,BYTE PTR [RDI+5]
            and EAX,4294967231
            or EAX,EDX
            cmp ESI,63
            mov BYTE PTR [RDI+5],AL
            jne .L_4241c4

            movzx EAX,WORD PTR [RBX+40]
            lea RSI,QWORD PTR [RBX+16]
            mov ECX,38
            sar EAX,10
            cdqe 
            imul RAX,RAX,40
            add RAX,RBX
            lea RDX,QWORD PTR [RAX+752]
            mov RDI,RDX

            rep movsb 

            lea RCX,QWORD PTR [RAX+784]
            mov BYTE PTR [RAX+788],63
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+789]
            mov EAX,EDX
            or EAX,64
            and EAX,4294967235
            mov BYTE PTR [RCX+5],AL
            call .L_415eb0

            movzx EDX,WORD PTR [RBX+40]
            sar EDX,10
            cmp AL,DL
            je .L_4242c8

            mov RDI,RBX
            call .L_415eb0

            movzx EAX,AL
            mov RDI,RBX
            imul RAX,RAX,40
            lea RCX,QWORD PTR [RBX+RAX*1+784]
            movzx EAX,BYTE PTR [RBX+150]
            and EAX,15
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RCX+5]
            and EAX,4294967235
            or EAX,EDX
            mov BYTE PTR [RCX+5],AL
            call .L_415eb0

            movzx EAX,AL
            mov RDI,RBX
            imul RAX,RAX,40
            or BYTE PTR [RBX+RAX*1+789],64
            call .L_415eb0

            movzx EDX,WORD PTR [RBX+40]
            movzx EAX,AL
            imul RAX,RAX,40
            sar EDX,10
            mov BYTE PTR [RBX+RAX*1+788],DL
.L_4242c8:

            xor ESI,ESI
            mov RDI,RBX
            xor EBP,EBP
            call .L_41b5d0

            lea R12,QWORD PTR [RBX+3280]
            movzx EDX,BYTE PTR [RBX+3272]
            jmp .L_4242f0
.L_4242e4:

            cmp AL,5
            je .L_42434f

            cmp AL,3
            je .L_42434f
.L_4242ec:

            add RBP,1
.L_4242f0:

            cmp EDX,EBP
            jle .L_423faa

            movsxd RAX,EBP
            imul RAX,RAX,136
            movzx EAX,BYTE PTR [RBX+RAX*1+3306]
            and EAX,7
            cmp AL,4
            jne .L_4242e4

            imul RSI,RBP,136
            mov RDI,RBX
            add RSI,R12
            call .L_423610

            movzx EDX,BYTE PTR [RBX+3272]
            jmp .L_4242ec
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_424330:

            mov RDI,RBX
            call .L_422b50

            jmp .L_424089
.L_42433d:

            call __stack_chk_fail@PLT
.L_424342:

            mov RDI,RBX
            call .L_422b50

            jmp .L_424154
.L_42434f:

            lea RCX,QWORD PTR [RIP+.L_459300]
            lea RSI,QWORD PTR [RIP+.L_458f39]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,4318
            call __assert_fail@PLT
.L_42436e:

            nop
            nop
.L_424370:

            jmp .L_423f50
.L_424375:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424380:

            movzx EAX,BYTE PTR [RDX+26]
            mov ECX,EAX
            and ECX,7
            lea R8D,DWORD PTR [RCX-6]
            cmp R8B,1
            setbe R8B
            cmp CL,1
            sete CL
            or R8B,CL
            je .L_4243a7

            shr AL,3
            test AL,8
            je .L_4243b0
.L_4243a7:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4243b0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDX
            sub RSP,8
            call .L_430ac0

            add RSP,8
            mov RDX,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            mov RSI,RAX
            jmp .L_42bf60
.L_4243d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4243e0:

            cmp BYTE PTR [RDI+3272],0
            je .L_424466

            push R12
            mov R12,RSI
            push RBP
            mov RBP,RDI
            push RBX
.L_4243f3:

            xor EBX,EBX
            nop
            nop
            nop
.L_4243f8:

            movzx EDX,BL
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            movzx EAX,BYTE PTR [RBP+RAX*8+3306]
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_42441c

            cmp AL,1
            jne .L_424454
.L_42441c:

            mov RAX,RDX
            shl RAX,4
            add RDX,RAX
            test BYTE PTR [RBP+RDX*8+3306],64
            jne .L_424454

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            mov RAX,RDX
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [RBP+RAX*8+3280]
            call .L_424380

            test AL,AL
            jne .L_424461
.L_424454:

            add EBX,1
            cmp BYTE PTR [RBP+3272],BL
            ja .L_4243f8

            xor EAX,EAX
.L_424461:

            pop RBX
.L_424462:

            pop RBP
            pop R12
            ret 
.L_424466:

            xor EAX,EAX
            ret 
.L_424469:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424470:

            mov BYTE PTR [RDI+256],DL
            mov BYTE PTR [RDI+257],0
            mov DWORD PTR [RDI+260],0
            mov BYTE PTR [RDI+255],0
            ret 
.L_42448f:

            nop
.L_424490:

            mov BYTE PTR [RDI+255],0
            ret 
.L_424498:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4244a0:

            push R14
            movzx EAX,BYTE PTR [RSI]
            movzx R14D,BYTE PTR [RDI+255]
            push R13
            push R12
            push RBP
            push RBX
.L_4244b3:

            add RAX,RDI
            add R14,RDI
            cmp RAX,R14
            jae .L_424502
.L_4244be:

            lea R8,QWORD PTR [RAX+2]
            cmp R14,R8
            jb .L_4247a0

            movzx R8D,BYTE PTR [RAX+1]
            lea R12,QWORD PTR [RAX+R8*1+2]
            cmp R14,R12
            jb .L_4247a0

            movzx R8D,BYTE PTR [RAX]
            sar R8D,1
            cmp R8D,1
            je .L_424510
.L_4244eb:

            movzx R8D,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+R8*1+2]
            xor R8D,R8D
            mov WORD PTR [RSI+1],R8W
            cmp R14,RAX
            ja .L_4244be
.L_424502:

            mov EAX,23
            jmp .L_424764
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_424510:

            movzx R8D,BYTE PTR [RAX+3]
            movzx R9D,BYTE PTR [RSI+1]
            add R8D,7
            sar R8D,3
            movsxd R8,R8D
            lea RBX,QWORD PTR [R8+R9*1+4]
            add RBX,RAX
            cmp RBX,R12
            jae .L_4244eb

            lea R8,QWORD PTR [RBX+2]
            cmp R12,R8
            jb .L_4247a0

            movzx R8D,BYTE PTR [RBX+1]
            lea R13,QWORD PTR [RBX+R8*1+2]
            mov RBP,R8
            cmp R13,R12
            ja .L_4247a0

            movzx R8D,BYTE PTR [RBX]
            sar R8D,1
            cmp R8D,2
            je .L_4245a1
.L_424562:

            cmp R12,R13
            mov BYTE PTR [RSI+2],0
            jbe .L_4244eb

            lea R8,QWORD PTR [R13+2]
            cmp R12,R8
            jb .L_4247a0

            movzx R8D,BYTE PTR [R13+1]
            mov RBX,R13
            mov RBP,R8
            lea R8,QWORD PTR [R13+R8*1+2]
            cmp R8,R12
            ja .L_4247a0

            mov R13,R8
            movzx R8D,BYTE PTR [RBX]
            sar R8D,1
            cmp R8D,2
            jne .L_424562
.L_4245a1:

            movzx R8D,BYTE PTR [RSI+2]
            shr BPL,2
            cmp R8B,BPL
            jae .L_424562

            lea R10,QWORD PTR [RBX+2]
            movzx R9D,R8B
            cmp DX,-1
            lea R11,QWORD PTR [R10+R9*4]
            je .L_424603

            movzx R9D,WORD PTR [R11]
            rol R9W,8
            cmp DX,R9W
            je .L_424603

            lea R9D,DWORD PTR [R8+1]
            movzx R9D,R9B
            lea R10,QWORD PTR [R10+R9*4]
            nop
            nop
            nop
            nop
.L_4245e0:

            add R8D,1
            cmp R8B,BPL
            je .L_424562

            mov R11,R10
            add R10,4
            movzx R9D,WORD PTR [R11]
            rol R9W,8
            cmp DX,R9W
            jne .L_4245e0
.L_424603:

            pxor XMM0,XMM0
            mov QWORD PTR [RCX+16],0
            lea R9,QWORD PTR [RAX+4]
            movups XMMWORD PTR [RCX],XMM0
            movzx EDX,BYTE PTR [RAX+3]
            add EDX,7
            sar EDX,3
            cmp EDX,8
            jb .L_424770

            mov R10,QWORD PTR [RAX+4]
            mov QWORD PTR [RCX],R10
            mov R10D,EDX
            mov RBP,QWORD PTR [R9+R10*1-8]
            mov QWORD PTR [RCX+R10*1-8],RBP
            lea R10,QWORD PTR [RCX+8]
            mov RBP,RCX
            and R10,-8
            sub RBP,R10
            add EDX,EBP
            sub R9,RBP
            and EDX,4294967288
            cmp EDX,8
            jb .L_424670

            and EDX,4294967288
            xor EBP,EBP
.L_42465d:

            mov R12D,EBP
            add EBP,8
            mov R13,QWORD PTR [R9+R12*1]
            cmp EBP,EDX
            mov QWORD PTR [R10+R12*1],R13
            jb .L_42465d

            nop
.L_424670:

            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RCX+16],DL
            movsx R10D,BYTE PTR [R11+2]
            mov R9D,R10D
            movzx R10D,BYTE PTR [RCX+17]
            shr R9B,6
            and R10D,4294967292
            or R10D,R9D
            mov BYTE PTR [RCX+17],R10B
            movzx R9D,BYTE PTR [R11+2]
            and R10D,4294967291
            shr R9B,3
            and R9D,4
            or R9D,R10D
            mov BYTE PTR [RCX+17],R9B
            movzx EDX,BYTE PTR [R11+2]
            and R9D,4294967287
            shr DL,1
            and EDX,8
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx R14D,BYTE PTR [R11+2]
            and EDX,4294967279
            lea R10D,DWORD PTR [R14+R14*1]
            and R10D,16
            or R10D,EDX
            mov BYTE PTR [RCX+17],R10B
            movzx EDX,BYTE PTR [R11+2]
            and R10D,4294967263
            lea R9D,DWORD PTR [RDX*8]
            and R9D,32
            or R9D,R10D
            mov BYTE PTR [RCX+17],R9B
            movzx EDX,BYTE PTR [R11+2]
            and R9D,4294967231
            shl EDX,5
            and EDX,64
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx R9D,BYTE PTR [R11+2]
            and EDX,127
            shl R9D,7
            or EDX,R9D
            mov BYTE PTR [RCX+17],DL
            movzx EDX,BYTE PTR [RCX+18]
            movzx R9D,BYTE PTR [RBX]
            and EDX,4294967294
            and R9D,1
            or EDX,R9D
            mov BYTE PTR [RCX+18],DL
            movzx EDX,WORD PTR [R11]
            rol DX,8
            mov WORD PTR [RCX+20],DX
            mov RDX,RAX
            sub RDX,RDI
            mov BYTE PTR [RSI],DL
            movzx EDX,BYTE PTR [RAX+3]
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            lea RAX,QWORD PTR [RAX+RDX*1+4]
            sub RBX,RAX
            add R8D,1
            xor EAX,EAX
            mov BYTE PTR [RSI+1],BL
            mov BYTE PTR [RSI+2],R8B
.L_424764:

            pop RBX
.L_424765:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424770:

            test DL,4
            jne .L_4247ae

            test EDX,EDX
            je .L_424670

            movzx R10D,BYTE PTR [R9]
            test DL,2
            mov BYTE PTR [RCX],R10B
            je .L_424670

            movzx R9D,WORD PTR [R9+RDX*1-2]
            mov WORD PTR [RCX+RDX*1-2],R9W
            jmp .L_424670
          .byte 0x66
          .byte 0x90
.L_4247a0:

            pop RBX
            mov EAX,6
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_4247ae:

            mov R10D,DWORD PTR [R9]
            mov DWORD PTR [RCX],R10D
            mov R9D,DWORD PTR [R9+RDX*1-4]
            mov DWORD PTR [RCX+RDX*1-4],R9D
            jmp .L_424670
.L_4247c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4247d0:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_4244a0
.L_4247dd:

            nop
            nop
            nop
.L_4247e0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_4247ee:

            movzx EBX,BYTE PTR [RSI]
            movzx R13D,BYTE PTR [RDI+255]
            add RBX,RDI
            add R13,RDI
            cmp RBX,R13
            jae .L_424841
.L_424804:

            lea RAX,QWORD PTR [RBX+2]
            cmp R13,RAX
            jb .L_424ab0

            movzx EAX,BYTE PTR [RBX+1]
            lea R11,QWORD PTR [RBX+RAX*1+2]
            cmp R13,R11
            jb .L_424ab0

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_424850
.L_42482d:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            xor EAX,EAX
            mov WORD PTR [RSI+1],AX
            cmp R13,RBX
            ja .L_424804
.L_424841:

            mov EAX,23
            jmp .L_424a71
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_424850:

            movzx EAX,BYTE PTR [RBX+3]
            movzx R8D,BYTE PTR [RSI+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea R12,QWORD PTR [RAX+R8*1+4]
            add R12,RBX
            cmp R12,R11
            jae .L_42482d

            lea RAX,QWORD PTR [R12+2]
            cmp R11,RAX
            jb .L_424ab0

            movzx R8D,BYTE PTR [R12+1]
            lea R14,QWORD PTR [R12+R8*1+2]
            mov RAX,R8
            cmp R14,R11
            ja .L_424ab0
.L_424893:

            test BYTE PTR [R12],254
            jne .L_42490c

            lea R10D,DWORD PTR [RAX+RAX*8]
            movzx EBP,BYTE PTR [RSI+2]
            lea EAX,DWORD PTR [RAX+R10*2]
            lea R10D,DWORD PTR [RAX+RAX*8]
            shr R10W,9
            cmp BPL,R10B
            jae .L_42490c

            movzx EAX,BPL
            lea R8,QWORD PTR [R12+2]
            lea R9,QWORD PTR [RAX+RAX*2]
            add R9,R8
            cmp DX,-1
            je .L_424950

            movzx EAX,WORD PTR [R9]
            rol AX,8
            cmp DX,AX
            je .L_424950

            lea EAX,DWORD PTR [RBP+1]
            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*2]
            add R8,RAX
            jmp .L_424904
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4248f0:

            mov R9,R8
            add R8,3
            movzx EAX,WORD PTR [R9]
            rol AX,8
            cmp DX,AX
            je .L_424950
.L_424904:

            add EBP,1
            cmp BPL,R10B
            jne .L_4248f0
.L_42490c:

            cmp R11,R14
            mov BYTE PTR [RSI+2],0
            jbe .L_42482d

            lea RAX,QWORD PTR [R14+2]
            cmp R11,RAX
            jb .L_424ab0

            movzx R8D,BYTE PTR [R14+1]
            mov R12,R14
            mov RAX,R8
            lea R8,QWORD PTR [R14+R8*1+2]
            cmp R8,R11
            ja .L_424ab0

            mov R14,R8
            jmp .L_424893
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424950:

            pxor XMM0,XMM0
            mov QWORD PTR [RCX+16],0
            lea RDX,QWORD PTR [RBX+4]
            movups XMMWORD PTR [RCX],XMM0
            movzx EAX,BYTE PTR [RBX+3]
            add EAX,7
            sar EAX,3
            cmp EAX,8
            jb .L_424a80

            mov R8,QWORD PTR [RBX+4]
            mov QWORD PTR [RCX],R8
            mov R8D,EAX
            mov R10,QWORD PTR [RDX+R8*1-8]
            mov QWORD PTR [RCX+R8*1-8],R10
            lea R8,QWORD PTR [RCX+8]
            mov R10,RCX
            and R8,-8
            sub R10,R8
            add EAX,R10D
            sub RDX,R10
            and EAX,4294967288
            cmp EAX,8
            jb .L_4249c0

            and EAX,4294967288
            xor R10D,R10D
.L_4249ac:

            mov R11D,R10D
            add R10D,8
            mov R13,QWORD PTR [RDX+R11*1]
            cmp R10D,EAX
            mov QWORD PTR [R8+R11*1],R13
            jb .L_4249ac
.L_4249c0:

            movzx EAX,BYTE PTR [RBX+3]
            mov R14,RCX
            mov R13,RSI
            mov QWORD PTR [RSP+8],RDI
            mov BYTE PTR [RCX+16],AL
            movsx EAX,BYTE PTR [R9+2]
            mov ECX,EAX
            movzx EAX,BYTE PTR [R14+20]
            shr CL,6
            and EAX,4294967292
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            movzx ECX,BYTE PTR [R12]
            and EAX,4294967291
            and ECX,1
            shl ECX,2
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            movzx EAX,WORD PTR [R9]
            rol AX,8
            mov WORD PTR [R14+18],AX
            movzx R15D,WORD PTR [R9]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            rol R15W,8
            call .L_415a90

            cmp AX,R15W
            mov RDX,QWORD PTR [RSP+8]
            sete AL
            add EBP,1
            lea ECX,DWORD PTR [RAX*8]
            movzx EAX,BYTE PTR [R14+20]
            and EAX,4294967287
            or EAX,ECX
            mov BYTE PTR [R14+20],AL
            mov RAX,RBX
            sub RAX,RDX
            mov BYTE PTR [R13],AL
            movzx EAX,BYTE PTR [RBX+3]
            mov BYTE PTR [R13+2],BPL
            add EAX,7
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RBX+RAX*1+4]
            sub R12,RAX
            xor EAX,EAX
            mov BYTE PTR [R13+1],R12B
.L_424a71:

            add RSP,24
.L_424a75:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_424a80:

            test AL,4
            jne .L_424ac4

            test EAX,EAX
            je .L_4249c0

            movzx R8D,BYTE PTR [RDX]
            test AL,2
            mov BYTE PTR [RCX],R8B
            je .L_4249c0

            movzx EDX,WORD PTR [RDX+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_4249c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_424ab0:

            add RSP,24
            mov EAX,6
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_424ac4:

            mov R8D,DWORD PTR [RDX]
            mov DWORD PTR [RCX],R8D
            mov EDX,DWORD PTR [RDX+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_4249c0
.L_424ad7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424ae0:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_4247e0
.L_424aed:

            nop
            nop
            nop
.L_424af0:

            push RBP
            push RBX
.L_424af2:

            mov RBX,RDI
            movzx R9D,BYTE PTR [RSI]
            add R9,RDI
            movzx EDI,BYTE PTR [RDI+255]
            add RDI,RBX
            cmp R9,RDI
            jae .L_424e40

            lea RAX,QWORD PTR [R9+2]
            cmp RDI,RAX
            jb .L_424c15

            movzx EAX,BYTE PTR [R9+1]
            mov R11,RCX
            mov R10,RSI
            lea RCX,QWORD PTR [R9+RAX*1+2]
            cmp RDI,RCX
            jb .L_424c15

            movzx EAX,BYTE PTR [R9]
            sar EAX,1
            cmp EAX,5
            je .L_424b7e
.L_424b40:

            cmp RDI,RCX
            mov BYTE PTR [R10+1],0
            jbe .L_424e40

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_424c15

            movzx EAX,BYTE PTR [RCX+1]
            mov R9,RCX
            lea RAX,QWORD PTR [RCX+RAX*1+2]
            cmp RDI,RAX
            jb .L_424c15

            mov RCX,RAX
            movzx EAX,BYTE PTR [R9]
            sar EAX,1
            cmp EAX,5
            jne .L_424b40
.L_424b7e:

            cmp BYTE PTR [R9+2],0
            lea RBP,QWORD PTR [R9+3]
            js .L_424c20

            lea RSI,QWORD PTR [R9+7]
            mov R8D,4
.L_424b97:

            movzx EAX,BYTE PTR [R10+1]
            lea R8,QWORD PTR [R8+RAX*1+1]
            movzx EAX,BYTE PTR [RSI]
            add R8,RAX
            add R8,RBP
            cmp R8,RCX
            jae .L_424b40

            lea RAX,QWORD PTR [R8+2]
            cmp RCX,RAX
            jb .L_424c15

            movzx EAX,BYTE PTR [R8+1]
            lea RAX,QWORD PTR [R8+RAX*1+2]
            cmp RAX,RCX
            jbe .L_424be4

            jmp .L_424c15
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424bd0:

            movzx ESI,BYTE PTR [RAX+1]
            mov R8,RAX
            lea RSI,QWORD PTR [RAX+RSI*1+2]
            cmp RSI,RCX
            ja .L_424c15

            mov RAX,RSI
.L_424be4:

            movzx ESI,BYTE PTR [R8]
            sar ESI,1
            cmp ESI,6
            jne .L_424c03

            cmp DX,-1
            je .L_424c30

            movzx ESI,WORD PTR [R8+2]
            rol SI,8
            cmp DX,SI
            je .L_424c30
.L_424c03:

            cmp RAX,RCX
            jae .L_424b40

            lea RSI,QWORD PTR [RAX+2]
            cmp RCX,RSI
            jae .L_424bd0
.L_424c15:

            mov EAX,6
.L_424c1a:

            pop RBX
.L_424c1b:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424c20:

            mov RSI,RBP
            xor R8D,R8D
            jmp .L_424b97
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_424c30:

            lea RDI,QWORD PTR [R11+8]
            mov RCX,R11
            xor EAX,EAX
            mov QWORD PTR [R11],0
            mov QWORD PTR [R11+508],0
            and RDI,-8
            sub RCX,RDI
            add ECX,516
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movzx EAX,BYTE PTR [R9+2]
            and EAX,15
            mov BYTE PTR [R11],AL
            cmp BYTE PTR [R9+2],0
            mov EAX,44970
            js .L_424c7b

            mov EAX,DWORD PTR [R9+3]
            bswap EAX
.L_424c7b:

            mov DWORD PTR [R11+4],EAX
            cmp BYTE PTR [R9+2],0
            mov RAX,RBP
            js .L_424c8d

            lea RAX,QWORD PTR [R9+7]
.L_424c8d:

            movzx EAX,BYTE PTR [RAX]
            mov BYTE PTR [R11+8],AL
            cmp BYTE PTR [R9+2],0
            js .L_424db0

            lea RAX,QWORD PTR [R9+7]
            mov ESI,5
.L_424ca8:

            movzx EAX,BYTE PTR [RAX]
            add RSI,RBP
            lea RCX,QWORD PTR [R11+9]
            cmp EAX,8
            jae .L_424e00

            test AL,4
            jne .L_424e6f

            test EAX,EAX
            je .L_424cd6

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [R11+9],DL
            jne .L_424e95
.L_424cd6:

            movzx EDX,BYTE PTR [R8]
            movzx EAX,BYTE PTR [R11+262]
            lea RCX,QWORD PTR [R11+264]
            lea RSI,QWORD PTR [R8+4]
            and EDX,1
            and EAX,4294967294
            or EAX,EDX
            mov BYTE PTR [R11+262],AL
            movzx EAX,BYTE PTR [R8+1]
            sub EAX,2
            mov BYTE PTR [R11+263],AL
            movzx EAX,BYTE PTR [R8+1]
            lea EDX,DWORD PTR [RAX-2]
            movzx EAX,DL
            cmp EAX,8
            jae .L_424dc0

            test AL,4
            jne .L_424e57

            test EAX,EAX
            je .L_424d3d

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [R11+264],DL
            jne .L_424e84
.L_424d3d:

            movzx EAX,WORD PTR [R8+2]
            rol AX,8
            mov WORD PTR [R11+512],AX
            movzx EAX,BYTE PTR [R9+1]
            movzx EDX,BYTE PTR [R8+1]
            lea RAX,QWORD PTR [R9+RAX*1+2]
            lea RDX,QWORD PTR [R8+RDX*1+2]
            cmp RAX,RDX
            jbe .L_424e30

            mov RAX,R9
            sub RAX,RBX
            mov BYTE PTR [R10],AL
            cmp BYTE PTR [R9+2],0
            js .L_424e4a

            add R9,7
            mov ECX,5
.L_424d88:

            movzx EAX,BYTE PTR [R8+1]
            movzx EDX,BYTE PTR [R9]
            lea RAX,QWORD PTR [R8+RAX*1+2]
            add RDX,RCX
            add RBP,RDX
            sub RAX,RBP
            mov BYTE PTR [R10+1],AL
            xor EAX,EAX
            pop RBX
.L_424da6:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_424db0:

            mov RAX,RBP
            mov ESI,1
            jmp .L_424ca8
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424dc0:

            mov RDX,QWORD PTR [R8+4]
            mov QWORD PTR [R11+264],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [R11+272]
            mov RDX,RCX
            and RDI,-8
            sub RDX,RDI
            add EAX,EDX
            sub RSI,RDX
            shr EAX,3
            mov ECX,EAX

            rep movsq 

            jmp .L_424d3d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_424e00:

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [R11+9],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [R11+17]
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            shr ECX,3

            rep movsq 

            jmp .L_424cd6
          .byte 0x66
          .byte 0x90
.L_424e30:

            sub RAX,RBX
            mov BYTE PTR [R10+1],0
            mov BYTE PTR [R10],AL
            xor EAX,EAX
            pop RBX
.L_424e3e:

            pop RBP
            ret 
.L_424e40:

            mov EAX,23
            jmp .L_424c1a
.L_424e4a:

            mov R9,RBP
            mov ECX,1
            jmp .L_424d88
.L_424e57:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [R11+264],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_424d3d
.L_424e6f:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [R11+9],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_424cd6
.L_424e84:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_424d3d
.L_424e95:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_424cd6
.L_424ea6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_424eb0:

            mov RCX,RDX
            mov EDX,65535
            jmp .L_424af0
.L_424ebd:

            nop
            nop
            nop
.L_424ec0:

            push R12
            movzx R11D,BYTE PTR [RSI]
            push RBP
            push RBX
.L_424ec8:

            movzx EBX,BYTE PTR [RDI+255]
            add R11,RDI
            add RBX,RDI
            cmp R11,RBX
            jae .L_425070

            lea RAX,QWORD PTR [R11+2]
            cmp RBX,RAX
            jb .L_424fe2

            movzx EAX,BYTE PTR [R11+1]
            lea R8,QWORD PTR [R11+RAX*1+2]
            cmp RBX,R8
            jb .L_424fe2

            movzx EAX,BYTE PTR [R11]
            sar EAX,1
            cmp EAX,5
            je .L_424f47
.L_424f09:

            cmp RBX,R8
            mov BYTE PTR [RSI+1],0
            jbe .L_425070

            lea RAX,QWORD PTR [R8+2]
            cmp RBX,RAX
            jb .L_424fe2

            movzx EAX,BYTE PTR [R8+1]
            mov R11,R8
            lea RAX,QWORD PTR [R8+RAX*1+2]
            cmp RBX,RAX
            jb .L_424fe2

            mov R8,RAX
            movzx EAX,BYTE PTR [R11]
            sar EAX,1
            cmp EAX,5
            jne .L_424f09
.L_424f47:

            movzx R12D,BYTE PTR [R11+2]
            lea RBP,QWORD PTR [R11+3]
            test R12B,R12B
            js .L_424ff0

            lea R9,QWORD PTR [R11+7]
            mov R10D,4
.L_424f63:

            movzx EAX,BYTE PTR [RSI+1]
            lea R10,QWORD PTR [R10+RAX*1+1]
            movzx EAX,BYTE PTR [R9]
            add R10,RAX
            add R10,RBP
            cmp R10,R8
            jae .L_424f09

            lea RAX,QWORD PTR [R10+2]
            cmp R8,RAX
            jb .L_424fe2

            movzx EAX,BYTE PTR [R10+1]
            lea RAX,QWORD PTR [R10+RAX*1+2]
            cmp R8,RAX
            jae .L_424fad

            jmp .L_424fe2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_424f98:

            movzx R9D,BYTE PTR [RAX+1]
            mov R10,RAX
            lea R9,QWORD PTR [RAX+R9*1+2]
            cmp R9,R8
            ja .L_424fe2

            mov RAX,R9
.L_424fad:

            movzx R9D,BYTE PTR [R10]
            sar R9D,1
            cmp R9D,6
            jne .L_424fd0

            cmp DX,-1
            je .L_425000

            movzx R9D,WORD PTR [R10+2]
            rol R9W,8
            cmp DX,R9W
            je .L_425000
.L_424fd0:

            cmp R8,RAX
            jbe .L_424f09

            lea R9,QWORD PTR [RAX+2]
            cmp R8,R9
            jae .L_424f98
.L_424fe2:

            mov EAX,6
.L_424fe7:

            pop RBX
.L_424fe8:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_424ff0:

            mov R9,RBP
            xor R10D,R10D
            jmp .L_424f63
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425000:

            and R12D,15
            mov BYTE PTR [RCX],R12B
            movzx EAX,BYTE PTR [R11+1]
            movzx EDX,BYTE PTR [R10+1]
            lea RAX,QWORD PTR [R11+RAX*1+2]
            lea RDX,QWORD PTR [R10+RDX*1+2]
            cmp RAX,RDX
            jbe .L_425060

            mov RAX,R11
            sub RAX,RDI
            mov BYTE PTR [RSI],AL
            cmp BYTE PTR [R11+2],0
            js .L_42507a

            add R11,7
            mov ECX,5
.L_425038:

            movzx EAX,BYTE PTR [R10+1]
            movzx EDX,BYTE PTR [R11]
            pop RBX
.L_425042:

            lea RAX,QWORD PTR [R10+RAX*1+2]
            add RDX,RCX
            add RBP,RDX
            sub RAX,RBP
            mov BYTE PTR [RSI+1],AL
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425060:

            sub RAX,RDI
            mov BYTE PTR [RSI+1],0
            pop RBX
            mov BYTE PTR [RSI],AL
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_425070:

            mov EAX,23
            jmp .L_424fe7
.L_42507a:

            mov R11,RBP
            mov ECX,1
            jmp .L_425038
.L_425084:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425090:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,104
.L_4250a7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RSP+64]
            lea RBP,QWORD PTR [RSP+28]
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
.L_4250d8:

            mov RSI,QWORD PTR [RSP+8]
            mov RCX,R13
            mov EDX,EBX
            mov RDI,R14
            call .L_4244a0

            test EAX,EAX
            jne .L_425168

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425100:

            mov RCX,R15
            mov EDX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_4244a0

            test EAX,EAX
            jne .L_425140

            mov RAX,QWORD PTR [R13]
            mov RDX,QWORD PTR [R13+8]
            xor RAX,QWORD PTR [R15]
            xor RDX,QWORD PTR [R15+8]
            or RDX,RAX
            jne .L_425100

            mov EAX,DWORD PTR [R15+16]
            cmp DWORD PTR [R13+16],EAX
            jne .L_425100

            movzx EAX,WORD PTR [R15+20]
            cmp WORD PTR [R13+20],AX
            jne .L_425100

            jmp .L_4250d8
.L_425140:

            xor EAX,EAX
.L_425142:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42516f

            add RSP,104
.L_425156:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425168:

            mov EAX,1
            jmp .L_425142
.L_42516f:

            call __stack_chk_fail@PLT
.L_425174:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425180:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,104
.L_425197:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            lea R15,QWORD PTR [RSP+64]
            lea RBP,QWORD PTR [RSP+28]
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4251d0:

            mov RSI,QWORD PTR [RSP+8]
            mov RCX,R13
            mov EDX,EBX
            mov RDI,R14
            call .L_4247e0

            test EAX,EAX
            jne .L_425250

            mov DWORD PTR [RSP+28],0
            nop
            nop
.L_4251f0:

            mov RCX,R15
            mov EDX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_4247e0

            test EAX,EAX
            jne .L_425228

            mov RAX,QWORD PTR [R13]
            mov RDX,QWORD PTR [R13+8]
            xor RAX,QWORD PTR [R15]
            xor RDX,QWORD PTR [R15+8]
            or RDX,RAX
            jne .L_4251f0

            mov RAX,QWORD PTR [R15+16]
            cmp QWORD PTR [R13+16],RAX
            jne .L_4251f0

            jmp .L_4251d0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_425228:

            xor EAX,EAX
.L_42522a:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_425257

            add RSP,104
.L_42523e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425250:

            mov EAX,1
            jmp .L_42522a
.L_425257:

            call __stack_chk_fail@PLT
.L_42525c:

            nop
            nop
            nop
            nop
.L_425260:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            movzx EBX,DX
            sub RSP,1096
.L_425277:

            lea RBP,QWORD PTR [RSP+560]
            lea R14,QWORD PTR [RSP+32]
            lea R12,QWORD PTR [RSP+28]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+1080],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+24]
            lea R15,QWORD PTR [RBP+9]
            mov QWORD PTR [RSP],RSI
            mov DWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+8],RAX
.L_4252b6:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP]
            mov RCX,R14
            mov EDX,EBX
            call .L_424af0

            test EAX,EAX
            jne .L_42538f

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4252e0:

            mov RCX,RBP
            mov EDX,EBX
            mov RSI,R12
            mov RDI,R13
            call .L_424af0

            test EAX,EAX
            jne .L_425368

            mov EAX,DWORD PTR [RSP+564]
            cmp DWORD PTR [RSP+36],EAX
            jne .L_4252e0

            movzx EDX,BYTE PTR [RSP+40]
            cmp DL,BYTE PTR [RSP+568]
            jne .L_4252e0

            lea RDI,QWORD PTR [R14+9]
            mov RSI,R15
            call memcmp@PLT

            test EAX,EAX
            jne .L_4252e0

            movzx EAX,BYTE PTR [RSP+294]
            xor AL,BYTE PTR [RSP+822]
            test AL,1
            jne .L_4252e0

            movzx EAX,BYTE PTR [RSP+295]
            cmp AL,BYTE PTR [RSP+823]
            jne .L_4252e0

            lea RSI,QWORD PTR [RBP+264]
            lea RDI,QWORD PTR [R14+264]
            movzx EDX,AL
            call memcmp@PLT

            test EAX,EAX
            jne .L_4252e0

            jmp .L_4252b6
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425368:

            xor EAX,EAX
.L_42536a:

            mov RCX,QWORD PTR [RSP+1080]
            xor RCX,QWORD PTR FS:[40]
            jne .L_425396

            add RSP,1096
.L_425384:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42538f:

            mov EAX,1
            jmp .L_42536a
.L_425396:

            call __stack_chk_fail@PLT
.L_42539b:

            nop
            nop
            nop
            nop
            nop
.L_4253a0:

            movzx R8D,BYTE PTR [RDI+255]
            add R8,RDI
            cmp RDI,R8
            jae .L_42549f

            lea RAX,QWORD PTR [RDI+2]
            cmp R8,RAX
            jb .L_42549f

            movzx EAX,BYTE PTR [RDI+1]
            lea RAX,QWORD PTR [RDI+RAX*1+2]
            cmp R8,RAX
            jae .L_425406

            jmp .L_42549f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4253d8:

            cmp R8,RAX
            jbe .L_42549f

            lea RCX,QWORD PTR [RAX+2]
            cmp R8,RCX
            jb .L_42549f

            movzx ECX,BYTE PTR [RAX+1]
            mov RDI,RAX
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp R8,RCX
            jb .L_42549f

            mov RAX,RCX
.L_425406:

            movzx ECX,BYTE PTR [RDI]
            sar ECX,1
            cmp ECX,5
            jne .L_4253d8

            movzx ECX,BYTE PTR [RDI+2]
            mov R9D,ECX
            and R9D,15
            cmp R9B,SIL
            jne .L_4253d8

            test CL,CL
            lea R9,QWORD PTR [RDI+3]
            js .L_4254a8

            add RDI,7
            mov R10D,5
.L_425436:

            movzx ECX,BYTE PTR [RDI]
            add RCX,R10
            add R9,RCX
            cmp R9,RAX
            jae .L_4253d8

            lea RCX,QWORD PTR [R9+2]
            cmp RAX,RCX
            jb .L_42549f

            movzx ECX,BYTE PTR [R9+1]
            lea RCX,QWORD PTR [R9+RCX*1+2]
            cmp RCX,RAX
            jbe .L_425474

            jmp .L_42549f
          .byte 0x66
          .byte 0x90
.L_425460:

            movzx EDI,BYTE PTR [RCX+1]
            mov R9,RCX
            lea RDI,QWORD PTR [RCX+RDI*1+2]
            cmp RDI,RAX
            ja .L_42549f

            mov RCX,RDI
.L_425474:

            movzx EDI,BYTE PTR [R9]
            sar EDI,1
            cmp EDI,6
            jne .L_42548d

            movzx EDI,WORD PTR [R9+2]
            rol DI,8
            cmp DX,DI
            je .L_4254c0
.L_42548d:

            cmp RAX,RCX
            jbe .L_4253d8

            lea RDI,QWORD PTR [RCX+2]
            cmp RAX,RDI
            jae .L_425460
.L_42549f:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4254a8:

            mov RDI,R9
            mov R10D,1
            jmp .L_425436
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4254c0:

            mov EAX,1
            ret 
.L_4254c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4254d0:

            push R13
            push R12
            lea R8,QWORD PTR [RCX+3]
            push RBP
            push RBX
            mov RBP,RSI
            mov R12,RDX
            mov RBX,RCX
            sub RSP,8
.L_4254e7:

            cmp BYTE PTR [RCX+2],0
            js .L_4255c8

            lea RAX,QWORD PTR [RCX+7]
            mov EDX,5
.L_4254fa:

            movzx EAX,BYTE PTR [RAX]
            movzx ECX,BYTE PTR [RBX+1]
            add RAX,RDX
            add R8,RAX
.L_425507:

            lea RAX,QWORD PTR [RBX+RCX*1+2]
            cmp R8,RAX
            jae .L_425552
.L_425511:

            movzx EAX,BYTE PTR [R8]
            movzx ESI,BYTE PTR [R8+1]
            test AL,1
            mov RDX,RSI
            lea RSI,QWORD PTR [R8+RSI*1+2]
            je .L_425560

            sar EAX,1
            cmp EAX,6
            jne .L_425545

            movzx EAX,BYTE PTR [RBX+2]
            and EAX,15
            sub AX,1008
            rol AX,8
            mov WORD PTR [R8+2],AX
            movzx ECX,BYTE PTR [RBX+1]
.L_425545:

            lea RAX,QWORD PTR [RBX+RCX*1+2]
            mov R8,RSI
            cmp R8,RAX
            jb .L_425511
.L_425552:

            add RSP,8
.L_425556:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_425560:

            lea R13D,DWORD PTR [RDX+2]
            movzx EDX,BYTE PTR [R12]
            mov RAX,RSI
            sub RAX,RBP
            mov RDI,R8
            sub RDX,RAX
            call memmove@PLT

            cmp BYTE PTR [RBX+2],0
            mov R8,RAX
            movzx EAX,BYTE PTR [RBX+1]
            js .L_4255b0

            movzx ECX,BYTE PTR [RBX+7]
            sub EAX,6
            mov EDX,6
            sub EAX,ECX
            sub EAX,R13D
.L_425598:

            add EAX,EDX
            add EAX,ECX
            mov BYTE PTR [RBX+1],AL
            sub BYTE PTR [R12],R13B
            movzx ECX,BYTE PTR [RBX+1]
            jmp .L_425507
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4255b0:

            movzx ECX,BYTE PTR [RBX+3]
            sub EAX,2
            mov EDX,2
            sub EAX,ECX
            sub EAX,R13D
            jmp .L_425598
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4255c8:

            mov RAX,R8
            mov EDX,1
            jmp .L_4254fa
.L_4255d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4255e0:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            cmp RCX,RDX
            jbe .L_425651

            lea RAX,QWORD PTR [RDX+2]
            cmp RCX,RAX
            jb .L_425651

            movzx EAX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            jb .L_425651

            movzx ESI,BYTE PTR [RDX]
            sar ESI,1
            cmp ESI,2
            jne .L_42564c

            jmp .L_425655
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425628:

            lea RDX,QWORD PTR [RAX+2]
            cmp RCX,RDX
            jb .L_425651

            movzx EDX,BYTE PTR [RAX+1]
            lea RSI,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RSI
            jb .L_425651

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,2
            je .L_425653

            mov RAX,RSI
.L_42564c:

            cmp RCX,RAX
            ja .L_425628
.L_425651:

            xor EAX,EAX
.L_425653:

            ret 
.L_425655:

            mov RAX,RDX
            ret 
.L_425659:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425660:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            lea RDI,QWORD PTR [RSI+RCX*1+2]
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RSI+RAX*1+4]
            cmp RDI,RAX
            jbe .L_4256e0

            lea RCX,QWORD PTR [RAX+2]
            cmp RDI,RCX
            jb .L_4256e0

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDI,RCX
            jae .L_4256c2

            jmp .L_4256e0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4256a0:

            cmp RDI,RCX
            jbe .L_4256e0

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_4256e0

            movzx EAX,BYTE PTR [RCX+1]
            lea RSI,QWORD PTR [RCX+RAX*1+2]
            mov RAX,RCX
            cmp RDI,RSI
            jb .L_4256e0

            mov RCX,RSI
.L_4256c2:

            movzx ESI,BYTE PTR [RAX]
            mov R8D,ESI
            sar ESI,1
            cmp ESI,2
            jne .L_4256a0

            and R8D,1
            cmp DL,R8B
            jne .L_4256a0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4256e0:

            xor EAX,EAX
            ret 
.L_4256e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4256f0:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RDX,QWORD PTR [RSI+RAX*1+2]
            cmp RDX,RCX
            jbe .L_425754

            lea RAX,QWORD PTR [RCX+2]
            cmp RDX,RAX
            jb .L_425754

            movzx EAX,BYTE PTR [RCX+1]
            lea RAX,QWORD PTR [RCX+RAX*1+2]
            cmp RDX,RAX
            jb .L_425754

            test BYTE PTR [RCX],254
            jne .L_42574f

            jmp .L_425758
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_425730:

            lea RCX,QWORD PTR [RAX+2]
            cmp RDX,RCX
            jb .L_425754

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDX,RCX
            jb .L_425754

            test BYTE PTR [RAX],254
            je .L_425756

            mov RAX,RCX
.L_42574f:

            cmp RDX,RAX
            ja .L_425730
.L_425754:

            xor EAX,EAX
.L_425756:

            ret 
.L_425758:

            mov RAX,RCX
            ret 
.L_42575c:

            nop
            nop
            nop
            nop
.L_425760:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            lea RDI,QWORD PTR [RSI+RCX*1+2]
            sar EAX,3
            cdqe 
            lea RAX,QWORD PTR [RSI+RAX*1+4]
            cmp RDI,RAX
            jbe .L_4257d3

            lea RCX,QWORD PTR [RAX+2]
            cmp RDI,RCX
            jb .L_4257d3

            movzx ECX,BYTE PTR [RAX+1]
            lea RCX,QWORD PTR [RAX+RCX*1+2]
            cmp RDI,RCX
            jae .L_4257bd

            jmp .L_4257d3
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4257a0:

            lea RAX,QWORD PTR [RCX+2]
            cmp RDI,RAX
            jb .L_4257d3

            movzx EAX,BYTE PTR [RCX+1]
            lea RSI,QWORD PTR [RCX+RAX*1+2]
            mov RAX,RCX
            cmp RDI,RSI
            jb .L_4257d3

            mov RCX,RSI
.L_4257bd:

            movzx ESI,BYTE PTR [RAX]
            test SIL,254
            jne .L_4257ce

            and ESI,1
            cmp DL,SIL
            je .L_4257e0
.L_4257ce:

            cmp RDI,RCX
            ja .L_4257a0
.L_4257d3:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4257e0:

            ret 
.L_4257e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4257f0:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RCX,QWORD PTR [RSI+RAX*1+2]
            cmp RCX,RDX
            jbe .L_425861

            lea RAX,QWORD PTR [RDX+2]
            cmp RCX,RAX
            jb .L_425861

            movzx EAX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            jb .L_425861

            movzx ESI,BYTE PTR [RDX]
            sar ESI,1
            cmp ESI,3
            jne .L_42585c

            jmp .L_425865
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425838:

            lea RDX,QWORD PTR [RAX+2]
            cmp RCX,RDX
            jb .L_425861

            movzx EDX,BYTE PTR [RAX+1]
            lea RSI,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RSI
            jb .L_425861

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,3
            je .L_425863

            mov RAX,RSI
.L_42585c:

            cmp RCX,RAX
            ja .L_425838
.L_425861:

            xor EAX,EAX
.L_425863:

            ret 
.L_425865:

            mov RAX,RDX
            ret 
.L_425869:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425870:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RDX
            mov EBP,4294967039
            sub RSP,8
.L_42588f:

            movzx EAX,BYTE PTR [RCX+3]
            movzx R9D,BYTE PTR [R14+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RCX+RAX*1+4]
.L_4258a5:

            lea RAX,QWORD PTR [R14+R9*1+2]
            cmp RCX,RAX
            jae .L_425949
.L_4258b3:

            movzx EAX,BYTE PTR [RCX]
            movzx ESI,BYTE PTR [RCX+1]
            test AL,1
            lea R8,QWORD PTR [RCX+RSI*1+2]
            je .L_425960

            sar EAX,1
            je .L_425990

            cmp EAX,2
            jne .L_425938

            mov RSI,R14
            mov RDI,R12
            call .L_4255e0

            mov RSI,R14
            mov R10,RAX
            call .L_4257f0

            test RAX,RAX
            je .L_425938

            movzx ESI,BYTE PTR [RAX+2]
            movzx EAX,BYTE PTR [R10+1]
            shr AL,2
            and ESI,15
            test AL,AL
            je .L_425938

            movzx ESI,SIL
            lea RAX,QWORD PTR [R10+2]
            xor ECX,ECX
            or SI,64512
            rol SI,8
            nop
            nop
            nop
.L_425918:

            test BYTE PTR [RAX+2],12
            mov EDX,EBP
            cmovne EDX,ESI
            add ECX,1
            add RAX,4
            mov WORD PTR [RAX-4],DX
            movzx EDX,BYTE PTR [R10+1]
            shr DL,2
            cmp CL,DL
            jb .L_425918
.L_425938:

            mov RCX,R8
.L_42593b:

            lea RAX,QWORD PTR [R14+R9*1+2]
            cmp RCX,RAX
            jb .L_4258b3
.L_425949:

            add RSP,8
.L_42594d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425960:

            movzx EDX,BYTE PTR [RBX]
            mov RAX,R8
            lea R15D,DWORD PTR [RSI+2]
            sub RAX,R13
            mov RDI,RCX
            mov RSI,R8
            sub RDX,RAX
            call memmove@PLT

            sub BYTE PTR [R14+1],R15B
            mov RCX,RAX
            sub BYTE PTR [RBX],R15B
            movzx R9D,BYTE PTR [R14+1]
            jmp .L_4258a5
          .byte 0x90
.L_425990:

            mov RSI,R14
            mov RDI,R12
            call .L_4256f0

            cmp BYTE PTR [RAX+1],2
            jbe .L_425938

            lea RDI,QWORD PTR [RAX+2]
            xor ESI,ESI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4259b0:

            mov EDX,4294967039
            add ESI,1
            add RDI,3
            mov WORD PTR [RDI-3],DX
            movzx ECX,BYTE PTR [RAX+1]
            lea EDX,DWORD PTR [RCX+RCX*8]
            lea EDX,DWORD PTR [RCX+RDX*2]
            lea EDX,DWORD PTR [RDX+RDX*8]
            shr DX,9
            cmp SIL,DL
            jb .L_4259b0

            mov RCX,R8
            jmp .L_42593b
.L_4259de:

            nop
            nop
.L_4259e0:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_4259ee:

            movzx EDX,BYTE PTR [RDX]
            mov RBP,RDI
            mov RBX,RSI
.L_4259f7:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_425a61
.L_425a00:

            movzx EAX,BYTE PTR [RBX]
            mov ECX,EAX
            sar EAX,1
            cmp EAX,1
            je .L_425ab0

            cmp EAX,5
            jne .L_425a70

            mov RCX,RBX
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_4254d0

            cmp BYTE PTR [RBX+2],0
            movzx R14D,BYTE PTR [RBX+1]
            lea RCX,QWORD PTR [RBX+3]
            js .L_425af0

            lea EAX,DWORD PTR [R14-4]
            lea RCX,QWORD PTR [RBX+7]
.L_425a41:

            sub AL,BYTE PTR [RCX]
            movzx ESI,R14B
            movzx EDX,BYTE PTR [R13]
            lea RSI,QWORD PTR [RBX+RSI*1+2]
            cmp AL,2
            je .L_425a81
.L_425a55:

            lea RAX,QWORD PTR [R12+RDX*1]
            mov RBX,RSI
            cmp RBX,RAX
            jb .L_425a00
.L_425a61:

            pop RBX
.L_425a62:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425a70:

            movzx EAX,BYTE PTR [RBX+1]
            and ECX,1
            mov R14,RAX
            lea RSI,QWORD PTR [RBX+RAX*1+2]
            jne .L_425a55
.L_425a81:

            mov RAX,RSI
            mov RDI,RBX
            sub RAX,R12
            sub RDX,RAX
            call memmove@PLT

            movzx EAX,BYTE PTR [R13]
            lea EDX,DWORD PTR [RAX-2]
            sub EDX,R14D
            mov BYTE PTR [R13],DL
            movzx EDX,DL
            jmp .L_4259f7
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425ab0:

            mov RDI,RBP
            mov RCX,RBX
            mov RDX,R13
            mov RSI,R12
            call .L_425870

            movzx EAX,BYTE PTR [RBX+3]
            movzx R14D,BYTE PTR [RBX+1]
            add EAX,7
            mov EDI,R14D
            sar EAX,3
            sub EDI,EAX
            cmp DIL,2
            je .L_425b00

            lea RBX,QWORD PTR [RBX+R14*1+2]
            movzx EDX,BYTE PTR [R13]
            jmp .L_4259f7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425af0:

            mov EAX,R14D
            jmp .L_425a41
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425b00:

            movzx EAX,R14B
            movzx EDX,BYTE PTR [R13]
            lea RSI,QWORD PTR [RBX+RAX*1+2]
            jmp .L_425a81
.L_425b13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425b20:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_425b28:

            test RDX,RDX
            je .L_425b97

            mov R8,RDX
            movzx EDX,BYTE PTR [RDI+255]
            mov RBX,RDI
            cmp BYTE PTR [RCX],DL
            mov RBP,RCX
            mov EAX,3
            jb .L_425b68

            mov R12D,ESI
            mov RSI,RDI
            mov RDI,R8
            call memcpy@PLT

            mov R8,RAX
            movzx EAX,BYTE PTR [RBX+255]
            mov BYTE PTR [RBP],AL
            xor EAX,EAX
            test R12B,R12B
            jne .L_425b78
.L_425b68:

            add RSP,16
.L_425b6c:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425b78:

            mov RDX,RBP
            mov RDI,RBX
            mov RSI,R8
            mov DWORD PTR [RSP+12],EAX
            call .L_4259e0

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
.L_425b97:

            lea RCX,QWORD PTR [RIP+.L_459840]
            lea RSI,QWORD PTR [RIP+.L_4596d9]
            lea RDI,QWORD PTR [RIP+.L_4596f1]
            mov EDX,71
            call __assert_fail@PLT
.L_425bb6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425bc0:

            movzx R8D,R8B
            add R8,RCX
            cmp RCX,R8
            jae .L_425cd0

            lea RAX,QWORD PTR [RCX+2]
            cmp R8,RAX
            jb .L_425cd0

            movzx EAX,BYTE PTR [RCX+1]
            lea RDI,QWORD PTR [RCX+RAX*1+2]
            cmp R8,RDI
            jb .L_425cd0

            mov R11D,EDX
            movzx EDX,DL
            push R12
            push RBP
            push RBX
.L_425bf9:

            lea EBX,DWORD PTR [RDX+7]
            sar EBX,3
            lea R10D,DWORD PTR [RBX-1]
            movzx R10D,R10B
            jmp .L_425c36
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425c10:

            cmp R8,RDI
            jbe .L_425ca0

            lea RAX,QWORD PTR [RDI+2]
            cmp R8,RAX
            jb .L_425ca0

            movzx EAX,BYTE PTR [RDI+1]
            mov RCX,RDI
            lea RAX,QWORD PTR [RDI+RAX*1+2]
            cmp R8,RAX
            jb .L_425ca0

            mov RDI,RAX
.L_425c36:

            movzx R9D,BYTE PTR [RCX]
            sar R9D,1
            cmp R9D,1
            jne .L_425c10

            cmp R11B,BYTE PTR [RCX+3]
            jne .L_425c10

            test EBX,EBX
            je .L_425cd3

            movzx R9D,BYTE PTR [RCX+4]
            movzx R12D,BYTE PTR [RSI]
            xor EAX,EAX
            xor EBP,EBP
            cmp R9B,R12B
            je .L_425c84

            xor R9D,R12D
            xor EBP,EBP
            jmp .L_425cb3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425c70:

            movzx R9D,BYTE PTR [RCX+RAX*1+5]
            add RAX,1
            movzx R12D,BYTE PTR [RSI+RAX*1]
            cmp R9B,R12B
            jne .L_425cb0
.L_425c84:

            add EBP,8
            cmp R10,RAX
            jne .L_425c70
.L_425c8c:

            movsx EBP,BPL
.L_425c90:

            cmp EDX,EBP
            jg .L_425c10

            pop RBX
.L_425c99:

            mov RAX,RCX
            pop RBP
            pop R12
            ret 
.L_425ca0:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425cb0:

            xor R9D,R12D
.L_425cb3:

            test R9B,R9B
            js .L_425c8c

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425cc0:

            add EBP,1
            add R9B,R9B
            jns .L_425cc0

            jmp .L_425c8c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425cd0:

            xor EAX,EAX
            ret 
.L_425cd3:

            xor EBP,EBP
            jmp .L_425c90
.L_425cd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425ce0:

            movzx R8D,BYTE PTR [RDI+255]
            movzx EDX,DL
            mov RCX,RDI
            jmp .L_425bc0
.L_425cf3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425d00:

            movzx ECX,CL
            lea EDI,DWORD PTR [RCX+7]
            sar EDI,3
            test EDI,EDI
            mov R9D,EDI
            je .L_425d80

            movzx R8D,BYTE PTR [RSI]
            movzx EAX,BYTE PTR [RDX]
            cmp R8B,AL
            jne .L_425d88

            sub R9D,1
            mov EDI,1
            movzx R9D,R9B
            add R9,1
            jmp .L_425d44
          .byte 0x90
.L_425d30:

            movzx R8D,BYTE PTR [RSI+RDI*1]
            add RDI,1
            movzx R10D,BYTE PTR [RDX+RDI*1-1]
            cmp R8B,R10B
            jne .L_425d60
.L_425d44:

            cmp RDI,R9
            lea EAX,DWORD PTR [RDI*8]
            jne .L_425d30
.L_425d50:

            movsx EDI,AL
.L_425d53:

            cmp ECX,EDI
            mov EDX,4294967295
            cmovg EAX,EDX
            ret 
          .byte 0x66
          .byte 0x90
.L_425d60:

            xor R8D,R10D
.L_425d63:

            test R8B,R8B
            js .L_425d50

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425d70:

            add EAX,1
            add R8B,R8B
            jns .L_425d70

            jmp .L_425d50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_425d80:

            xor EAX,EAX
            jmp .L_425d53
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_425d88:

            xor R8D,EAX
            xor EAX,EAX
            jmp .L_425d63
.L_425d8f:

            nop
.L_425d90:

            movzx R9D,R9B
            push R15
            push R14
            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [R8+R9*1]
            push RBX
            sub RSP,24
.L_425da6:

            cmp R8,RBP
            jae .L_425e80

            lea RAX,QWORD PTR [R8+2]
            cmp RBP,RAX
            jb .L_425e80

            movzx EAX,BYTE PTR [R8+1]
            lea RBX,QWORD PTR [R8+RAX*1+2]
            cmp RBP,RBX
            jb .L_425e80

            mov R12D,ESI
            mov R13,RDX
            mov R14D,ECX
            movzx R15D,CL
            jmp .L_425e0a
          .byte 0x66
          .byte 0x90
.L_425de0:

            cmp RBP,RBX
            jbe .L_425e80

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_425e80

            movzx EAX,BYTE PTR [RBX+1]
            mov R8,RBX
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RAX
            jb .L_425e80

            mov RBX,RAX
.L_425e0a:

            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,5
            jne .L_425de0

            cmp BYTE PTR [R8+2],0
            js .L_425e60

            mov EAX,DWORD PTR [R8+3]
            lea RDX,QWORD PTR [R8+3]
            bswap EAX
            cmp R12D,EAX
            jne .L_425de0

            lea RAX,QWORD PTR [R8+7]
            mov ECX,4
.L_425e34:

            cmp R14B,BYTE PTR [RAX]
            jne .L_425de0

            lea RDI,QWORD PTR [RDX+RCX*1+1]
            mov RSI,R13
            mov RDX,R15
            mov QWORD PTR [RSP+8],R8
            call memcmp@PLT

            test EAX,EAX
            mov R8,QWORD PTR [RSP+8]
            jne .L_425de0

            mov RAX,R8
            jmp .L_425e82
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_425e60:

            cmp R12D,44970
            jne .L_425de0

            lea RDX,QWORD PTR [R8+3]
            xor ECX,ECX
            mov RAX,RDX
            jmp .L_425e34
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_425e80:

            xor EAX,EAX
.L_425e82:

            add RSP,24
.L_425e86:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_425e91:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425ea0:

            movzx R9D,BYTE PTR [RDI+255]
            movzx ECX,CL
            mov R8,RDI
            jmp .L_425d90
.L_425eb3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425ec0:

            push RBP
            push RBX
            movzx EAX,DL
            mov RBX,RDI
            mov EBP,EDX
            sub RSP,8
.L_425ece:

            movzx ECX,BYTE PTR [RDI+255]
            add EAX,ECX
            cmp EAX,255
            jg .L_425f13

            cmp RDI,RSI
            ja .L_425f13

            lea RAX,QWORD PTR [RBX+RCX*1]
            movzx EDI,DL
            mov RDX,RCX
            cmp RSI,RAX
            ja .L_425f13

            mov RAX,RSI
            add RDI,RSI
            sub RAX,RBX
            sub RDX,RAX
            call memmove@PLT

            add BYTE PTR [RBX+255],BPL
            add RSP,8
.L_425f0e:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_425f13:

            lea RCX,QWORD PTR [RIP+.L_459800]
            lea RSI,QWORD PTR [RIP+.L_4596d9]
            lea RDI,QWORD PTR [RIP+.L_459708]
            mov EDX,980
            call __assert_fail@PLT
.L_425f32:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_425f40:

            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            mov RDI,RSI
            movzx ESI,DL
            sub RSP,8
            movzx EDX,BYTE PTR [RBX+255]
            cmp DL,BPL
            jb .L_425f8f

            cmp RBX,RDI
            ja .L_425f8f

            mov RAX,RDI
            sub RAX,RBX
            lea RCX,QWORD PTR [RSI+RAX*1]
            cmp RCX,RDX
            jg .L_425f8f

            sub RDX,RSI
            add RSI,RDI
            sub RDX,RAX
            call memmove@PLT

            sub BYTE PTR [RBX+255],BPL
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_425f8f:

            lea RCX,QWORD PTR [RIP+.L_4597c0]
            lea RSI,QWORD PTR [RIP+.L_4596d9]
            lea RDI,QWORD PTR [RIP+.L_459760]
            mov EDX,988
            call __assert_fail@PLT
.L_425fae:

            nop
            nop
.L_425fb0:

            push R15
            push R14
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,232
.L_425fc7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBP+257],0
            pxor XMM0,XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_426019

            call .L_401240

            mov EBX,24
            sub EAX,DWORD PTR [RBP+260]
            cmp EAX,299999
            jg .L_4260c2
.L_426019:

            lea RBX,QWORD PTR [RSP+64]
            mov EDX,2
            xor ESI,ESI
            lea R14,QWORD PTR [R12+216]
            mov RDI,RBX
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4596ff]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            mov EDX,2
            mov RSI,RBX
            mov RDI,R14
            call .L_42d7b0

            test RAX,RAX
            mov R15,RAX
            je .L_4261b0

            cmp BYTE PTR [RBP+256],0
            jne .L_4260f0
.L_42607e:

            cmp R13W,-2
            je .L_426138

            mov EDX,514
            lea RSI,QWORD PTR [RSP+12]
            rol R13W,8
            mov WORD PTR [RSP+12],DX
            mov RDI,R15
            mov EDX,4
            mov WORD PTR [RSP+14],R13W
            call .L_403d30

            test EAX,EAX
            mov EBX,EAX
            je .L_426138
.L_4260ba:

            mov RDI,R15
            call .L_4033b0
.L_4260c2:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_4261ba

            add RSP,232
.L_4260e2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4260f0:

            movzx EAX,BYTE PTR [RBP+255]
            lea RSI,QWORD PTR [RSP+12]
            mov EDX,2
            mov RDI,R15
            mov BYTE PTR [RSP+12],10
            mov BYTE PTR [RSP+13],AL
            call .L_403d30

            test EAX,EAX
            mov EBX,EAX
            jne .L_4260ba

            movzx EDX,BYTE PTR [RBP+255]
            mov RSI,RBP
            mov RDI,R15
            call .L_403d30

            test EAX,EAX
            mov EBX,EAX
            jne .L_4260ba

            jmp .L_42607e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_426138:

            add R12,2568
            lea RSI,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+16]
            mov RDI,R12
            call .L_415fe0

            mov RDI,R12
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R14
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_42e6e0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4260ba

            cmp BYTE PTR [RBP+256],0
            je .L_4260c2

            call .L_401240

            mov BYTE PTR [RBP+257],1
            mov DWORD PTR [RBP+260],EAX
            jmp .L_4260c2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4261b0:

            mov EBX,3
            jmp .L_4260c2
.L_4261ba:

            call __stack_chk_fail@PLT
.L_4261bf:

            nop
.L_4261c0:

            mov BYTE PTR [RDI+257],0
            ret 
.L_4261c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4261d0:

            push RBX
            mov RBX,RDI
            call .L_401460

            mov BYTE PTR [RBX+265],AL
            call .L_401460

            mov RDI,RBX
            mov BYTE PTR [RBX+264],AL
            mov BYTE PTR [RBX+255],0
            call .L_430b10

            pop RBX
            mov ESI,512
            mov RDI,RAX
            jmp .L_402d30
.L_426207:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426210:

            push RBX
            xor EDX,EDX
            mov RBX,RDI
            call .L_424470

            mov RDI,RBX
            pop RBX
            jmp .L_4261d0
.L_426221:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426230:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_42623e:

            mov RBP,RDI
            call .L_430af0

            lea RBX,QWORD PTR [RAX+2568]
            mov BYTE PTR [R12+8],0
            mov RDI,RBX
            call .L_4154b0

            mov ECX,64
            mov RDX,R13
            mov RSI,RAX
            mov RDI,RBP
            call .L_425d00

            test AL,AL
            jns .L_426350

            movzx EDX,BYTE PTR [RBP+255]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jae .L_426320
.L_42628b:

            mov RBX,RBP
            jmp .L_4262a3
.L_426290:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBX,RAX
            jae .L_426320
.L_4262a3:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_426290

            movzx ECX,BYTE PTR [RBX+3]
            lea R14,QWORD PTR [RBX+4]
            mov RDX,R13
            mov RDI,RBP
            mov RSI,R14
            call .L_425d00

            test AL,AL
            js .L_42630a

            mov RSI,RBX
            mov RDI,RBP
            call .L_4257f0

            test RAX,RAX
            je .L_42630a

            movzx ESI,BYTE PTR [RBX+3]
            cmp BYTE PTR [R12+8],SIL
            jae .L_42630a

            mov QWORD PTR [R12],R14
            movzx EDX,BYTE PTR [RBX+3]
            mov BYTE PTR [R12+8],DL
            movzx EDX,BYTE PTR [RAX+2]
            and EDX,15
            mov BYTE PTR [R12+9],DL
            movzx EAX,BYTE PTR [RAX+2]
            shr AL,4
            and EAX,1
            mov BYTE PTR [R12+10],AL
.L_42630a:

            movzx EDX,BYTE PTR [RBP+255]
            jmp .L_426290
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426320:

            cmp BYTE PTR [R12+8],0
            je .L_426338
.L_426328:

            pop RBX
.L_426329:

            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426338:

            pop RBX
            mov EAX,23
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426350:

            mov RDI,RBX
            call .L_4154b0

            mov QWORD PTR [R12],RAX
            mov EAX,64
            mov BYTE PTR [R12+10],1
            mov WORD PTR [R12+8],AX
            movzx EDX,BYTE PTR [RBP+255]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jb .L_42628b

            jmp .L_426328
.L_426384:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426390:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_4263a0:

            test SIL,SIL
            je .L_426450

            movzx ECX,BYTE PTR [RDI+255]
            lea RAX,QWORD PTR [RDI+RCX*1]
            cmp RDI,RAX
            jae .L_426488

            mov R12D,ESI
            mov RBX,RDI
            jmp .L_4263df
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4263c8:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RCX*1]
            cmp RBX,RAX
            jae .L_426488
.L_4263df:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_4263c8

            mov RSI,RBX
            mov RDI,RBP
            call .L_4257f0

            test RAX,RAX
            je .L_426405

            movzx ECX,BYTE PTR [RAX+2]
            and ECX,15
            cmp R12B,CL
            je .L_426410
.L_426405:

            movzx ECX,BYTE PTR [RBP+255]
            jmp .L_4263c8
          .byte 0x66
          .byte 0x90
.L_426410:

            lea RDX,QWORD PTR [RBX+4]
            mov QWORD PTR [R13],RDX
            movzx EDX,BYTE PTR [RBX+3]
            mov BYTE PTR [R13+8],DL
            movzx EDX,BYTE PTR [RAX+2]
            and EDX,15
            mov BYTE PTR [R13+9],DL
            movzx EAX,BYTE PTR [RAX+2]
            shr AL,4
            and EAX,1
            mov BYTE PTR [R13+10],AL
            add RSP,8
.L_42643d:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426450:

            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4154b0

            mov QWORD PTR [R13],RAX
            mov EAX,64
            mov BYTE PTR [R13+10],1
            mov WORD PTR [R13+8],AX
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426488:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_426498:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4264a0:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            movzx ESI,SIL
            mov RBP,RDI
            sub RSP,72
.L_4264b4:

            lea RDX,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_426390

            test EAX,EAX
            mov EDX,23
            jne .L_42651a

            mov DWORD PTR [RSP+12],0
            lea RBX,QWORD PTR [RSP+32]
            lea R12,QWORD PTR [RSP+12]
            jmp .L_426503
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4264f0:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_401820

            cmp BYTE PTR [RSP+48],AL
            jbe .L_426540
.L_426503:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,RBP
            call .L_4247d0

            test EAX,EAX
            je .L_4264f0

            mov EDX,23
.L_42651a:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_42654e

            add RSP,72
.L_426530:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426540:

            movzx EAX,WORD PTR [RSP+52]
            xor EDX,EDX
            mov WORD PTR [R13],AX
            jmp .L_42651a
.L_42654e:

            call __stack_chk_fail@PLT
.L_426553:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426560:

            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_426567:

            mov RBP,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R12],RAX
            je .L_4265e7

            movzx EDX,BYTE PTR [RBP+255]
            mov RBX,RBP
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBP,RAX
            jae .L_4265b5
.L_426598:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_4265c0
.L_4265a2:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1]
            cmp RBX,RAX
            jb .L_426598
.L_4265b5:

            pop RBX
.L_4265b6:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4265c0:

            movzx ECX,BYTE PTR [RBX+3]
            lea RSI,QWORD PTR [RBX+4]
            mov RDX,R12
            mov RDI,RBP
            call .L_425d00

            test AL,AL
            js .L_4265f8

            mov RSI,RBX
            mov RDI,RBP
            call .L_4255e0

            test RAX,RAX
            je .L_4265f8
.L_4265e7:

            pop RBX
            mov EAX,1
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4265f8:

            movzx EDX,BYTE PTR [RBP+255]
            jmp .L_4265a2
.L_426601:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426610:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,72
.L_426621:

            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+24],R8
            mov BYTE PTR [RSP+45],SIL
            call .L_430af0

            movzx EDX,BYTE PTR [R13+255]
            lea RCX,QWORD PTR [R13+RDX*1]
            cmp R13,RCX
            jae .L_4268a0

            mov RBX,R13
            xor R15D,R15D
            add RAX,2568
            mov R13D,R15D
            xor R14D,R14D
            mov QWORD PTR [RSP+32],RAX
            mov R15,RBX
            jmp .L_426685
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426670:

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
.L_426679:

            mov RBX,RAX
            lea RAX,QWORD PTR [R15+RDX*1]
            cmp RBX,RAX
            jae .L_4266e0
.L_426685:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_426670

            movzx EAX,BYTE PTR [RSP+45]
            cmp AL,BYTE PTR [RBX+2]
            jne .L_426670

            movzx ECX,BYTE PTR [RBX+3]
            mov RDX,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RBX+4]
            mov RDI,R15
            call .L_425d00

            movsx EDX,AL
            movzx EAX,R13B
            cmp EDX,EAX
            mov ECX,EDX
            jg .L_426720

            movzx EAX,BYTE PTR [RBX+1]
            movzx EDX,BYTE PTR [R15+255]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            mov RBX,RAX
            lea RAX,QWORD PTR [R15+RDX*1]
            cmp RBX,RAX
            jb .L_426685

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4266e0:

            test R14,R14
            mov R15D,R13D
            je .L_4268a0

            mov RSI,QWORD PTR [RSP+24]
            test RSI,RSI
            je .L_426701

            movzx EAX,WORD PTR [R14]
            rol AX,8
            mov WORD PTR [RSI],AX
.L_426701:

            mov RCX,QWORD PTR [RSP+16]
            xor EAX,EAX
            test RCX,RCX
            je .L_426710

            mov BYTE PTR [RCX],R15B
.L_426710:

            add RSP,72
.L_426714:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_426720:

            movzx EAX,BYTE PTR [RBX+3]
            movzx ESI,BYTE PTR [RBX+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDX,QWORD PTR [RBX+RAX*1+4]
            lea RAX,QWORD PTR [RBX+RSI*1+2]
            cmp RDX,RAX
            jae .L_4267dc

            mov R8,RBX
            mov QWORD PTR [RSP+56],R15
            mov EBX,ECX
            mov R15D,R13D
            mov R13,RDX
            nop
            nop
            nop
            nop
            nop
.L_426758:

            test BYTE PTR [R13],254
            movzx EDI,BYTE PTR [R13+1]
            jne .L_4267c5

            cmp DIL,2
            jbe .L_4267c5

            lea RBP,QWORD PTR [R13+2]
            xor R12D,R12D
            jmp .L_426798
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426778:

            je .L_4267f0
.L_42677a:

            movzx EDX,DIL
            add R12D,1
            add RBP,3
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            cmp AL,R12B
            jbe .L_4267c0
.L_426798:

            test R14,R14
            je .L_4267b0

            movsx EAX,BYTE PTR [RBP+2]
            movsx EDX,BYTE PTR [R14+2]
            sar EAX,6
            sar EDX,6
            cmp DL,AL
            jge .L_426778
.L_4267b0:

            mov R15D,EBX
            mov R14,RBP
            jmp .L_42677a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4267c0:

            movzx ESI,BYTE PTR [R8+1]
.L_4267c5:

            lea R13,QWORD PTR [R13+RDI*1+2]
            lea RAX,QWORD PTR [R8+RSI*1+2]
            cmp R13,RAX
            jb .L_426758

            mov R13D,R15D
            mov R15,QWORD PTR [RSP+56]
.L_4267dc:

            movzx EDX,BYTE PTR [R15+255]
            jmp .L_426679
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4267f0:

            movzx EAX,WORD PTR [RBP]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol AX,8
            mov WORD PTR [RSP+46],AX
            call .L_415a90

            cmp AX,WORD PTR [RSP+46]
            mov R8,QWORD PTR [RSP+48]
            jne .L_426830
.L_426818:

            movzx EDI,BYTE PTR [R13+1]
            mov R15D,EBX
            mov R14,RBP
            jmp .L_42677a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426830:

            movzx EAX,WORD PTR [R14]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol AX,8
            mov WORD PTR [RSP+46],AX
            call .L_415a90

            cmp AX,WORD PTR [RSP+46]
            mov R8,QWORD PTR [RSP+48]
            je .L_426896

            movzx ESI,WORD PTR [RBP]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+48],R8
            rol SI,8
            movzx ESI,SI
            call .L_41d9c0

            movzx ESI,WORD PTR [R14]
            mov RDI,QWORD PTR [RSP+32]
            mov BYTE PTR [RSP+46],AL
            rol SI,8
            movzx ESI,SI
            call .L_41d9c0

            cmp BYTE PTR [RSP+46],AL
            mov R8,QWORD PTR [RSP+48]
            jb .L_426818
.L_426896:

            movzx EDI,BYTE PTR [R13+1]
            jmp .L_42677a
.L_4268a0:

            add RSP,72
.L_4268a4:

            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4268b4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4268c0:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov R13,RDX
            sub RSP,24
.L_4268d7:

            call .L_430af0

            movzx EDX,BYTE PTR [R12+3]
            movzx ESI,BYTE PTR [R12+1]
            add RAX,2568
            mov QWORD PTR [RSP],RAX
            add EDX,7
            sar EDX,3
            movsxd RDX,EDX
            lea R14,QWORD PTR [R12+RDX*1+4]
            lea RDX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RDX
            jb .L_42691f

            jmp .L_426a50
          .byte 0x90
.L_426910:

            lea R14,QWORD PTR [R14+RAX*1+2]
            lea RAX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RAX
            jae .L_42699d
.L_42691f:

            movzx EDX,BYTE PTR [R14]
            movzx EAX,BYTE PTR [R14+1]
            sar EDX,1
            cmp EDX,2
            jne .L_426910

            mov EDX,EAX
            shr DL,2
            test DL,DL
            je .L_426910

            lea RBX,QWORD PTR [R14+2]
            xor EBP,EBP
            jmp .L_426961
.L_426940:

            je .L_4269d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426950:

            mov EDX,EAX
            add EBP,1
            add RBX,4
            shr DL,2
            cmp DL,BPL
            jbe .L_426988
.L_426961:

            movsx EDX,BYTE PTR [RBX+2]
            test DL,2
            je .L_426950

            test R15,R15
            je .L_42697f

            movsx ESI,BYTE PTR [R15+2]
            sar EDX,6
            sar ESI,6
            cmp SIL,DL
            jge .L_426940
.L_42697f:

            mov R15,RBX
            jmp .L_426950
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426988:

            movzx ESI,BYTE PTR [R12+1]
            lea R14,QWORD PTR [R14+RAX*1+2]
            lea RAX,QWORD PTR [R12+RSI*1+2]
            cmp R14,RAX
            jb .L_42691f
.L_42699d:

            test R15,R15
            je .L_426a50

            xor EAX,EAX
            test R13,R13
            je .L_4269ba

            movzx EDX,WORD PTR [R15]
            rol DX,8
            mov WORD PTR [R13],DX
.L_4269ba:

            add RSP,24
.L_4269be:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4269d0:

            movzx EAX,WORD PTR [RBX]
            mov RDI,QWORD PTR [RSP]
            rol AX,8
            mov WORD PTR [RSP+14],AX
            call .L_415a90

            cmp AX,WORD PTR [RSP+14]
            jne .L_426a00
.L_4269ec:

            mov R15,RBX
.L_4269ef:

            movzx EAX,BYTE PTR [R14+1]
            jmp .L_426950
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426a00:

            movzx EAX,WORD PTR [R15]
            mov RDI,QWORD PTR [RSP]
            rol AX,8
            mov WORD PTR [RSP+14],AX
            call .L_415a90

            cmp AX,WORD PTR [RSP+14]
            je .L_4269ef

            movzx ESI,WORD PTR [RBX]
            mov RDI,QWORD PTR [RSP]
            rol SI,8
            movzx ESI,SI
            call .L_41d9c0

            movzx ESI,WORD PTR [R15]
            mov RDI,QWORD PTR [RSP]
            mov BYTE PTR [RSP+14],AL
            rol SI,8
            movzx ESI,SI
            call .L_41d9c0

            cmp BYTE PTR [RSP+14],AL
            jb .L_4269ec

            jmp .L_4269ef
.L_426a50:

            add RSP,24
.L_426a54:

            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_426a64:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426a70:

            movzx R9D,BYTE PTR [RDI+255]
            lea RAX,QWORD PTR [RDI+R9*1]
            cmp RDI,RAX
            jae .L_426b54

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,R8
            mov R14,RDX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_426aa5:

            jmp .L_426ac2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426ab0:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R15+R9*1]
            cmp RBX,RAX
            jae .L_426b40
.L_426ac2:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_426ab0

            movzx ECX,BYTE PTR [RBX+3]
            lea RSI,QWORD PTR [RBX+4]
            mov RDX,RBP
            mov RDI,R15
            call .L_425d00

            test AL,AL
            jns .L_426af0
.L_426ae3:

            movzx R9D,BYTE PTR [R15+255]
            jmp .L_426ab0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_426af0:

            movzx ESI,BYTE PTR [RBX+2]
            mov R8,R12
            mov RCX,R13
            mov RDX,R14
            mov RDI,R15
            call .L_426610

            test EAX,EAX
            je .L_426b25

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R15
            call .L_4268c0

            test EAX,EAX
            jne .L_426ae3

            test R13,R13
            je .L_426b25

            mov BYTE PTR [R13],0
.L_426b25:

            add RSP,8
.L_426b29:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426b40:

            add RSP,8
            mov EAX,4
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_426b54:

            mov EAX,4
            ret 
.L_426b5a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_426b60:

            mov EAX,ECX
            movzx ECX,R9B
            push RBX
.L_426b67:

            cmp ECX,8
            mov RBX,RDI
            mov BYTE PTR [RDI+265],SIL
            mov BYTE PTR [RDI+264],DL
            jae .L_426ba8

            test CL,4
            jne .L_426c10

            test ECX,ECX
            je .L_426bd7

            movzx EDX,BYTE PTR [R8]
            test CL,2
            mov BYTE PTR [RDI],DL
            je .L_426bd7

            mov ECX,ECX
            movzx EDX,WORD PTR [R8+RCX*1-2]
            mov WORD PTR [RDI+RCX*1-2],DX
            jmp .L_426bd7
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426ba8:

            mov RDX,QWORD PTR [R8]
            lea RDI,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI-8],RDX
            mov EDX,ECX
            mov RSI,QWORD PTR [R8+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-16],RSI
            and RDI,-8
            mov RDX,RBX
            sub RDX,RDI
            mov RSI,R8
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_426bd7:

            test AL,AL
            mov BYTE PTR [RBX+255],R9B
            je .L_426bf4

            lea RDX,QWORD PTR [RBX+255]
            mov RSI,RBX
            mov RDI,RBX
            call .L_4259e0
.L_426bf4:

            mov RDI,RBX
            call .L_430b10

            pop RBX
.L_426bfd:

            mov ESI,512
            mov RDI,RAX
            jmp .L_402d30
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426c10:

            mov EDX,DWORD PTR [R8]
            mov ECX,ECX
            mov DWORD PTR [RDI],EDX
            mov EDX,DWORD PTR [R8+RCX*1-4]
            mov DWORD PTR [RDI+RCX*1-4],EDX
            jmp .L_426bd7
.L_426c22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426c30:

            movzx ECX,BYTE PTR [RDI+255]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_426c68

            movzx EDX,BYTE PTR [RDI]
            sar EDX,1
            cmp EDX,4
            jne .L_426c5a

            jmp .L_426c70
          .byte 0x66
          .byte 0x90
.L_426c50:

            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,4
            je .L_426c6a
.L_426c5a:

            movzx EDX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RAX
            ja .L_426c50
.L_426c68:

            xor EAX,EAX
.L_426c6a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426c70:

            ret 
.L_426c72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_426c80:

            movzx EDX,BYTE PTR [RDI+255]
            add RDX,RDI
            cmp RDX,RDI
            ja .L_426ca6

            jmp .L_426ce5
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426c98:

            movzx EAX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RAX*1+2]
            cmp RDX,RDI
            jbe .L_426ce5
.L_426ca6:

            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            cmp EAX,4
            jne .L_426c98

            movzx EDX,BYTE PTR [RDI+1]
            lea RAX,QWORD PTR [RDI+2]
            lea RCX,QWORD PTR [RDI+RDX*1+2]
            cmp RCX,RAX
            jbe .L_426ce5

            movzx EDX,BYTE PTR [RDI+2]
            cmp ESI,EDX
            jne .L_426cd7

            jmp .L_426cf8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_426cd0:

            movzx EDX,BYTE PTR [RAX]
            cmp ESI,EDX
            je .L_426cf0
.L_426cd7:

            movzx EDX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp RCX,RAX
            ja .L_426cd0
.L_426ce5:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426cf0:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_426cf8:

            ret 
.L_426cfa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_426d00:

            mov ESI,9
            mov R8,RDI
            call .L_426c80

            xor R9D,R9D
            test RAX,RAX
            je .L_426d5a

            mov ESI,8
            mov RDI,R8
            call .L_426c80

            test RAX,RAX
            je .L_426d5a

            movzx EDX,BYTE PTR [RAX+1]
            test DL,DL
            je .L_426d5a

            cmp BYTE PTR [RAX+2],0
            jne .L_426d60

            add RAX,3
            sub EDX,1
            add RDX,RAX
            jmp .L_426d52
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426d48:

            add RAX,1
            cmp BYTE PTR [RAX-1],0
            jne .L_426d60
.L_426d52:

            cmp RDX,RAX
            jne .L_426d48

            xor R9D,R9D
.L_426d5a:

            mov EAX,R9D
            ret 
          .byte 0x66
          .byte 0x90
.L_426d60:

            mov R9D,1
            mov EAX,R9D
            ret 
.L_426d6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_426d70:

            movzx EDX,BYTE PTR [RDI+255]
            add RDX,RDI
            cmp RDI,RDX
            jae .L_426da8

            movzx EAX,BYTE PTR [RDI]
            mov RSI,RDI
            sar EAX,1
            cmp EAX,4
            jne .L_426d9a

            jmp .L_426db0
          .byte 0x66
          .byte 0x90
.L_426d90:

            movzx EAX,BYTE PTR [RSI]
            sar EAX,1
            cmp EAX,4
            je .L_426db0
.L_426d9a:

            movzx EAX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RSI+RAX*1+2]
            cmp RSI,RDX
            jb .L_426d90
.L_426da8:

            mov EAX,23
            ret 
          .byte 0x66
          .byte 0x90
.L_426db0:

            sub RSP,8

            movzx EAX,BYTE PTR [RSI+1]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_425f40

            xor EAX,EAX
            add RSP,8
            ret 
.L_426dca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_426dd0:

            push R14
            push R13
            mov EAX,3
            push R12
            push RBP
            movzx R12D,DL
            push RBX
.L_426de1:

            movzx ECX,BYTE PTR [RDI+255]
            lea R8,QWORD PTR [R12+2]
            not ECX
            movzx ECX,CL
            cmp R8,RCX
            jae .L_426e27

            mov EBP,EDX
            mov R13,RSI
            mov RBX,RDI
            call .L_426d70

            test BPL,BPL
            jne .L_426e30
.L_426e09:

            add BYTE PTR [RBX+265],1
            mov RDI,RBX
            call .L_430b10

            mov ESI,512
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
.L_426e27:

            pop RBX
.L_426e28:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_426e30:

            movzx R14D,BYTE PTR [RBX+255]
            lea EDX,DWORD PTR [RBP+2]
            mov RDI,RBX
            movzx EDX,DL
            add R14,RBX
            mov RSI,R14
            call .L_425ec0

            cmp R12D,8
            mov BYTE PTR [R14],8
            mov BYTE PTR [R14+1],BPL
            lea RCX,QWORD PTR [R14+2]
            jae .L_426e90

            test R12B,4
            jne .L_426ec4

            test R12D,R12D
            je .L_426e09

            movzx EAX,BYTE PTR [R13]
            test R12B,2
            mov BYTE PTR [R14+2],AL
            je .L_426e09

            mov R12D,R12D
            movzx EAX,WORD PTR [R13+R12*1-2]
            mov WORD PTR [RCX+R12*1-2],AX
            jmp .L_426e09
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426e90:

            mov RAX,QWORD PTR [R13]
            lea RDI,QWORD PTR [R14+10]
            mov RSI,R13
            and RDI,-8
            mov QWORD PTR [R14+2],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [R13+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R12D
            shr ECX,3

            rep movsq 

            jmp .L_426e09
.L_426ec4:

            mov EAX,DWORD PTR [R13]
            mov R12D,R12D
            mov DWORD PTR [R14+2],EAX
            mov EAX,DWORD PTR [R13+R12*1-4]
            mov DWORD PTR [RCX+R12*1-4],EAX
            jmp .L_426e09
.L_426ede:

            nop
            nop
.L_426ee0:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            lea R14,QWORD PTR [RSI+4]
            push RBX
.L_426eef:

            movzx EDX,BYTE PTR [RSI+3]
            mov RBP,RSI
            mov RSI,R14
            mov R12,RDI
            call .L_425ce0

            test RAX,RAX
            je .L_426fa8

            movzx EDX,BYTE PTR [R13]
            mov RSI,RAX
            mov RDI,R12
            mov RBX,RAX
            and EDX,1
            call .L_425760

            test RAX,RAX
            mov RBP,RAX
            je .L_426ff0

            cmp BYTE PTR [R12+255],252
            ja .L_426fca

            test BYTE PTR [R13],1
            jne .L_426fe0
.L_426f46:

            movzx ESI,BYTE PTR [RBP+1]
            add RSI,2
.L_426f4e:

            add RSI,RBP
            mov EDX,3
            mov RDI,R12
            call .L_425ec0

            add BYTE PTR [RBP+1],3
            add BYTE PTR [RBX+1],3
            movzx EDX,BYTE PTR [RBP+1]
            lea EAX,DWORD PTR [RDX+RDX*8]
            lea EAX,DWORD PTR [RDX+RAX*2]
            movzx EDX,WORD PTR [R13+2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            sub EAX,1
            movzx EAX,AL
            lea RAX,QWORD PTR [RAX+RAX*2]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            mov WORD PTR [RAX],DX
            movzx EDX,BYTE PTR [R13+4]
            mov BYTE PTR [RAX+2],DL
            xor EAX,EAX
            pop RBX
.L_426f99:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426fa8:

            movzx EAX,BYTE PTR [RBP+3]
            movzx EBX,BYTE PTR [R12+255]
            add EAX,7
            movzx EDX,BL
            sar EAX,3
            lea EDX,DWORD PTR [RAX+RDX*1+9]
            cmp EDX,255
            jle .L_427040
.L_426fca:

            pop RBX
            mov EAX,3
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_426fe0:

            or BYTE PTR [RBX],1
            test RBP,RBP
            jne .L_426f46

            jmp .L_427004
          .byte 0x66
          .byte 0x90
.L_426ff0:

            cmp BYTE PTR [R12+255],250
            ja .L_426fca
.L_426ffb:

            xor EBP,EBP
            test BYTE PTR [R13],1
            jne .L_426fe0
.L_427004:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,2
            mov RDI,R12
            lea RBP,QWORD PTR [RBX+RAX*1+2]
            mov RSI,RBP
            call .L_425ec0

            add BYTE PTR [RBX+1],2
            xor EAX,EAX
            mov ESI,2
            mov WORD PTR [RBP],AX
            test BYTE PTR [R13],1
            je .L_426f4e

            mov BYTE PTR [RBP],1
            jmp .L_426f4e
.L_427040:

            add RBX,R12
            lea EDX,DWORD PTR [RAX+4]
            mov RDI,R12
            mov RSI,RBX
            call .L_425ec0

            movzx EAX,BYTE PTR [RBP+3]
            movzx EDX,BYTE PTR [RBP+2]
            mov ECX,2
            mov WORD PTR [RBX],CX
            mov BYTE PTR [RBX+3],AL
            add EAX,7
            mov BYTE PTR [RBX+2],DL
            sar EAX,3
            lea RDX,QWORD PTR [RBX+4]
            cmp EAX,8
            jae .L_4270a8

            test AL,4
            jne .L_4270ec

            test EAX,EAX
            je .L_427098

            movzx ECX,BYTE PTR [RBP+4]
            test AL,2
            mov BYTE PTR [RDX],CL
            je .L_427098

            mov ECX,EAX
            movzx ESI,WORD PTR [R14+RCX*1-2]
            mov WORD PTR [RDX+RCX*1-2],SI
            nop
            nop
            nop
.L_427098:

            add EAX,2
            mov BYTE PTR [RBX+1],AL
            jmp .L_426ffb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4270a8:

            mov RCX,QWORD PTR [RBP+4]
            mov QWORD PTR [RBX+4],RCX
            mov ECX,EAX
            mov RSI,QWORD PTR [R14+RCX*1-8]
            mov QWORD PTR [RDX+RCX*1-8],RSI
            lea RCX,QWORD PTR [RBX+12]
            and RCX,-8
            sub RDX,RCX
            sub R14,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_427098

            and EDX,4294967288
            xor ESI,ESI
.L_4270d9:

            mov EDI,ESI
            add ESI,8
            mov R8,QWORD PTR [R14+RDI*1]
            cmp ESI,EDX
            mov QWORD PTR [RCX+RDI*1],R8
            jb .L_4270d9

            jmp .L_427098
.L_4270ec:

            mov ECX,DWORD PTR [RBP+4]
            mov DWORD PTR [RDX],ECX
            mov ECX,EAX
            mov ESI,DWORD PTR [R14+RCX*1-4]
            mov DWORD PTR [RDX+RCX*1-4],ESI
            jmp .L_427098
.L_4270fe:

            nop
            nop
.L_427100:

            push R15
            push R14
            lea RAX,QWORD PTR [RSI+4]
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R14,RDI
            sub RSP,24
.L_42711b:

            movzx EDX,BYTE PTR [RSI+3]
            mov RSI,RAX
            mov QWORD PTR [RSP],RAX
            call .L_425ce0

            test RAX,RAX
            mov RBX,RAX
            je .L_427320

            mov RSI,RAX
            mov RDI,R14
            call .L_4257f0

            movzx EDX,BYTE PTR [RBP]
            mov R15,RAX
            mov RSI,RBX
            mov RDI,R14
            and EDX,1
            call .L_425660

            mov R13,RAX
            xor EAX,EAX
            test R15,R15
            sete AL
            shl EAX,2
            test R13,R13
            je .L_427332
.L_42716e:

            movzx ESI,BYTE PTR [R14+255]
            lea EDX,DWORD PTR [RAX+4]
            movzx EDX,DX
            movzx EAX,SIL
            add EDX,EAX
            mov EAX,3
            cmp EDX,255
            jg .L_42722b

            test R15,R15
            mov ECX,4294967295
            je .L_427240

            test RBX,RBX
            je .L_427288
.L_4271aa:

            test R15,R15
            je .L_427340

            movzx ECX,BYTE PTR [R15+2]
.L_4271b8:

            mov EAX,ECX
            and ECX,15
            sub ECX,1
            or EAX,16
            test R13,R13
            movsxd RCX,ECX
            mov BYTE PTR [R15+2],AL
            mov DWORD PTR [R14+RCX*4+268],0
            je .L_427390

            movzx ESI,BYTE PTR [R13+1]
            add RSI,2
.L_4271e8:

            add RSI,R13
            mov EDX,4
            mov RDI,R14
            call .L_425ec0

            add BYTE PTR [R13+1],4
            add BYTE PTR [RBX+1],4
            movzx EAX,BYTE PTR [R13+1]
            mov EDX,DWORD PTR [RBP+2]
            shr AL,2
            sub EAX,1
            movzx EAX,AL
            mov DWORD PTR [R13+RAX*4+2],EDX
            xor EAX,EAX
            test BYTE PTR [RBP],1
            je .L_42722b

            or BYTE PTR [RBX],1
            or BYTE PTR [R15],1
            or BYTE PTR [R13],1
.L_42722b:

            add RSP,24
.L_42722f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427240:

            movzx EAX,WORD PTR [R14+266]
            mov ECX,1
            mov EDX,EAX
            jmp .L_427264
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427258:

            add ECX,1
            cmp ECX,16
            je .L_4273c8
.L_427264:

            bt EAX,ECX
            jb .L_427258

            mov EAX,1
            shl EAX,CL
            or EDX,EAX
            test RBX,RBX
            mov WORD PTR [R14+266],DX
            jne .L_4271aa

            nop
            nop
            nop
            nop
            nop
.L_427288:

            movzx EAX,BYTE PTR [R12+3]
            movzx EBX,SIL
            mov RDI,R14
            add RBX,R14
            mov DWORD PTR [RSP+12],ECX
            mov RSI,RBX
            add EAX,7
            sar EAX,3
            lea EDX,DWORD PTR [RAX+4]
            call .L_425ec0

            movzx EAX,BYTE PTR [R12+3]
            movzx EDX,BYTE PTR [R12+2]
            mov ECX,2
            mov WORD PTR [RBX],CX
            mov ECX,DWORD PTR [RSP+12]
            mov BYTE PTR [RBX+3],AL
            add EAX,7
            mov BYTE PTR [RBX+2],DL
            sar EAX,3
            lea RDX,QWORD PTR [RBX+4]
            cmp EAX,8
            jae .L_4273d8

            test AL,4
            jne .L_42742c

            test EAX,EAX
            je .L_427310

            movzx ESI,BYTE PTR [R12+4]
            test AL,2
            mov BYTE PTR [RDX],SIL
            je .L_427310

            mov RDI,QWORD PTR [RSP]
            mov ESI,EAX
            movzx EDI,WORD PTR [RDI+RSI*1-2]
            mov WORD PTR [RDX+RSI*1-2],DI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427310:

            add EAX,2
            mov BYTE PTR [RBX+1],AL
            jmp .L_4271aa
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427320:

            movzx EAX,BYTE PTR [R12+3]
            xor R15D,R15D
            add EAX,7
            sar EAX,3
            add EAX,8
.L_427332:

            add EAX,2
            xor R13D,R13D
            jmp .L_42716e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427340:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,4
            mov RDI,R14
            mov DWORD PTR [RSP],ECX
            lea R15,QWORD PTR [RBX+RAX*1+2]
            mov RSI,R15
            call .L_425ec0

            mov ECX,DWORD PTR [RSP]
            add BYTE PTR [RBX+1],4
            mov EDX,518
            mov BYTE PTR [R15+3],0
            mov WORD PTR [R15],DX
            and ECX,15
            or ECX,16
            mov BYTE PTR [R15+2],CL
            movzx EAX,BYTE PTR [R12+3]
            mov BYTE PTR [R15+3],AL
            jmp .L_4271b8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427390:

            movzx EAX,BYTE PTR [RBX+1]
            mov EDX,2
            mov RDI,R14
            lea R13,QWORD PTR [RBX+RAX*1+2]
            mov RSI,R13
            call .L_425ec0

            mov EAX,4
            add BYTE PTR [RBX+1],2
            mov ESI,2
            mov WORD PTR [R13],AX
            jmp .L_4271e8
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4273c8:

            mov EAX,3
            jmp .L_42722b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4273d8:

            mov RSI,QWORD PTR [R12+4]
            mov QWORD PTR [RBX+4],RSI
            mov R11,QWORD PTR [RSP]
            mov ESI,EAX
            mov RDI,QWORD PTR [R11+RSI*1-8]
            mov R8,R11
            mov QWORD PTR [RDX+RSI*1-8],RDI
            lea RSI,QWORD PTR [RBX+12]
            and RSI,-8
            sub RDX,RSI
            sub R8,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_427310

            and EDX,4294967288
            xor EDI,EDI
.L_427415:

            mov R9D,EDI
            add EDI,8
            mov R10,QWORD PTR [R8+R9*1]
            cmp EDI,EDX
            mov QWORD PTR [RSI+R9*1],R10
            jb .L_427415

            jmp .L_427310
.L_42742c:

            mov ESI,DWORD PTR [R12+4]
            mov DWORD PTR [RDX],ESI
            mov RDI,QWORD PTR [RSP]
            mov ESI,EAX
            mov EDI,DWORD PTR [RDI+RSI*1-4]
            mov DWORD PTR [RDX+RSI*1-4],EDI
            jmp .L_427310
.L_427446:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427450:

            push RBX

            mov RBX,RDI
            call .L_4261d0

            pxor XMM0,XMM0
            xor EAX,EAX
            mov QWORD PTR [RBX+316],0
            mov DWORD PTR [RBX+324],0
            mov WORD PTR [RBX+266],AX
            mov DWORD PTR [RBX+328],172800
            movups XMMWORD PTR [RBX+268],XMM0
            movups XMMWORD PTR [RBX+284],XMM0
            movups XMMWORD PTR [RBX+300],XMM0
            pop RBX

            ret 
.L_42749c:

            nop
            nop
            nop
            nop
.L_4274a0:

            push RBX

            mov RBX,RDI
            call .L_426210

            lea RAX,QWORD PTR [RIP+.L_4295b0]
            mov DWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+376],RBX
            mov QWORD PTR [RBX+384],0
            mov QWORD PTR [RBX+408],RBX
            mov RDI,RBX
            mov QWORD PTR [RBX+336],RAX
            lea RAX,QWORD PTR [RBX+336]
            mov QWORD PTR [RBX+416],0
            mov QWORD PTR [RBX+440],RBX
            mov QWORD PTR [RBX+448],0
            mov QWORD PTR [RBX+352],RAX
            lea RAX,QWORD PTR [RIP+.L_4596ff]
            mov QWORD PTR [RBX+360],RAX
            lea RAX,QWORD PTR [RIP+.L_429390]
            mov QWORD PTR [RBX+368],RAX
            lea RAX,QWORD PTR [RIP+.L_45988f]
            mov QWORD PTR [RBX+392],RAX
            lea RAX,QWORD PTR [RIP+.L_427960]
            mov QWORD PTR [RBX+400],RAX
            lea RAX,QWORD PTR [RIP+.L_459894]
            mov QWORD PTR [RBX+424],RAX
            lea RAX,QWORD PTR [RIP+.L_427d50]
            mov QWORD PTR [RBX+432],RAX
            pop RBX

            jmp .L_427450
.L_427562:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427570:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_430af0

            lea RBP,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+360]
            mov RDI,RBP
            call .L_42d6f0

            lea RSI,QWORD PTR [RBX+392]
            mov RDI,RBP
            call .L_42d6f0

            add RSP,8
            lea RSI,QWORD PTR [RBX+424]
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_42d6f0
.L_4275b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4275c0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_430af0

            lea RBP,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+360]
            mov RDI,RBP
            call .L_42d730

            lea RSI,QWORD PTR [RBX+392]
            mov RDI,RBP
            call .L_42d730

            add RSP,8
            lea RSI,QWORD PTR [RBX+424]
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_42d730
.L_427608:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427610:

            push RBX
            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RAX+2580],4
            je .L_427628

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427628:

            add BYTE PTR [RBX+265],1
            mov RDI,RBX
            call .L_430b10

            pop RBX
            mov ESI,512
            mov RDI,RAX
            jmp .L_402d30
.L_427645:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427650:

            push RBX
            mov RBX,RDI
            call .L_430af0

            cmp DWORD PTR [RAX+2580],4
            je .L_427668

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_427668:

            add BYTE PTR [RBX+264],1
            pop RBX
            ret 
.L_427671:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427680:

            mov EAX,DWORD PTR [RDI+328]
            ret 
.L_427687:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427690:

            mov DWORD PTR [RDI+328],ESI
            xor EAX,EAX
            ret 
.L_427699:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4276a0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,184
.L_4276ba:

            lea R14,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RDX
            mov DWORD PTR [RSP],R8D
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_430af0

            mov RSI,R15
            mov RBP,RAX
            mov RDI,R14
            call .L_42fa70

            add RBP,216
            mov RDI,R14
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,R14
            mov RDI,RBP
            call .L_42d7b0

            test RAX,RAX
            je .L_4277e4

            movzx EDX,BYTE PTR [RBX+255]
            mov R15,RAX
            mov R8D,DWORD PTR [RSP]
            add RDX,RBX
            cmp RBX,RDX
            jb .L_427742

            jmp .L_427828
          .byte 0x66
          .byte 0x90
.L_427730:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBX,RDX
            jae .L_427828
.L_427742:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,4
            jne .L_427730

            cmp RBX,-2
            movzx R14D,BYTE PTR [RBX+1]
            lea R12,QWORD PTR [RBX+2]
            je .L_427828

            test R14B,R14B
            je .L_427828

            test R8B,R8B
            je .L_427832

            sub R8D,1
            add R14,R12
            movzx R8D,R8B
            lea RAX,QWORD PTR [R13+R8*1+1]
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
.L_427788:

            cmp R12,R14
            jae .L_4277b2

            movzx EAX,BYTE PTR [R13]
            mov RSI,R12
            cmp AL,BYTE PTR [RBX+2]
            jne .L_4277a4

            jmp .L_427810
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4277a0:

            cmp BYTE PTR [RSI],AL
            je .L_427810
.L_4277a4:

            movzx EDX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RSI+RDX*1+2]
            cmp RSI,R14
            jb .L_4277a0
.L_4277b2:

            add R13,1
            cmp QWORD PTR [RSP],R13
            jne .L_427788
.L_4277bc:

            movzx EAX,BYTE PTR [RSP+144]
            cmp AX,WORD PTR [R15+58]
            je .L_42784a
.L_4277cb:

            mov RDX,QWORD PTR [RSP+8]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R15
            mov RDI,RBP
            call .L_42e6e0

            test EAX,EAX
            jne .L_427828
.L_4277e4:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42785d

            add RSP,184
.L_4277fe:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427810:

            movzx EAX,BYTE PTR [RSI+1]
            mov RDI,R15
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            test EAX,EAX
            je .L_4277b2

            nop
            nop
            nop
            nop
            nop
.L_427828:

            mov RDI,R15
            call .L_4033b0

            jmp .L_4277e4
.L_427832:

            movzx EDX,R14B
            mov RSI,R12
            mov RDI,R15
            call .L_403d30

            test EAX,EAX
            jne .L_427828

            jmp .L_4277bc
.L_42784a:

            sub EAX,1
            mov RDI,R15
            movzx ESI,AX
            call .L_403420

            jmp .L_4277cb
.L_42785d:

            call __stack_chk_fail@PLT
.L_427862:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427870:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,312
.L_42788a:

            movzx EBX,WORD PTR [RDX+60]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp BX,WORD PTR [RDX+58]
            mov WORD PTR [RSP+30],AX
            jae .L_427918

            mov R15,RDX
            lea R14,QWORD PTR [RSP+30]
            jmp .L_4278d0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4278c0:

            movzx EAX,BYTE PTR [RSP+31]
            lea EBX,DWORD PTR [RBX+RAX*1+2]
            cmp BX,WORD PTR [R15+58]
            jae .L_427918
.L_4278d0:

            movzx ESI,BX
            mov RCX,R14
            mov EDX,2
            mov RDI,R15
            call .L_403860

            cmp BYTE PTR [RSP+30],13
            jne .L_4278c0

            movzx R8D,BYTE PTR [RSP+31]
            lea R14,QWORD PTR [RSP+32]
            lea ESI,DWORD PTR [RBX+2]
            mov RDI,R15
            movzx ESI,SI
            mov RCX,R14
            mov EDX,R8D
            mov DWORD PTR [RSP+12],R8D
            call .L_403860

            mov R8D,DWORD PTR [RSP+12]
            jmp .L_427920
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427918:

            lea R14,QWORD PTR [RSP+32]
            xor R8D,R8D
.L_427920:

            mov RCX,R14
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_4276a0

            mov RAX,QWORD PTR [RSP+296]
            xor RAX,QWORD PTR FS:[40]
            jne .L_427956

            add RSP,312
.L_42794b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_427956:

            call __stack_chk_fail@PLT
.L_42795b:

            nop
            nop
            nop
            nop
            nop
.L_427960:

            jmp .L_427870
.L_427965:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427970:

            push R14
            push R13
            mov R14D,ECX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov R13,RDX
            sub RSP,176
.L_427988:

            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            mov RBX,RAX
            mov RSI,R12
            mov RDI,RBP
            mov WORD PTR [RSP+13],DX
            add RBX,216
            call .L_42fa70

            mov RDI,RBP
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42d7b0

            test RAX,RAX
            je .L_427a0b

            mov RBP,RAX
            lea RSI,QWORD PTR [RSP+13]
            mov EAX,272
            mov EDX,3
            mov RDI,RBP
            mov WORD PTR [RSP+13],AX
            mov BYTE PTR [RSP+15],R14B
            call .L_403d30

            test EAX,EAX
            je .L_427a30
.L_427a03:

            mov RDI,RBP
            call .L_4033b0
.L_427a0b:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_427a49

            add RSP,176
.L_427a25:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_427a30:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call .L_42e6e0

            test EAX,EAX
            je .L_427a0b

            jmp .L_427a03
.L_427a49:

            call __stack_chk_fail@PLT
.L_427a4e:

            nop
            nop
.L_427a50:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,296
.L_427a6a:

            movzx R14D,WORD PTR [RDX+60]
            movzx EBX,WORD PTR [RDX+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            sub EBX,R14D
            cmp BX,255
            jbe .L_427ad8
.L_427a90:

            mov EBX,4294967295
.L_427a95:

            mov RDI,RBP
            call .L_430af0

            cmp DWORD PTR [RAX+2580],4
            je .L_427bb0
.L_427aaa:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_427d49

            add RSP,296
.L_427ac8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427ad8:

            mov R15,RDX
            call .L_430af0

            cmp DWORD PTR [RAX+2580],4
            jne .L_427a90

            lea RAX,QWORD PTR [RSP+16]
            movzx ESI,R14W
            movzx EDX,BX
            mov RDI,R15
            mov RCX,RAX
            mov R14,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_403860

            movzx ESI,BX
            add RSI,R14
            cmp RSI,R14
            jbe .L_427a90

            lea RAX,QWORD PTR [R14+2]
            cmp RSI,RAX
            jb .L_427a90

            movzx EAX,BYTE PTR [RSP+17]
            mov RDI,RAX
            lea RAX,QWORD PTR [R14+RAX*1+2]
            cmp RSI,RAX
            jb .L_427a90

            mov R9,R14
            xor R8D,R8D
            xor R10D,R10D
            xor R11D,R11D
            jmp .L_427b8f
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427b50:

            cmp ECX,9
            je .L_427a90

            cmp ECX,11
            je .L_427bc8
.L_427b5e:

            cmp RSI,RAX
            jbe .L_427bf0

            lea RDX,QWORD PTR [RAX+2]
            cmp RSI,RDX
            jb .L_427a90

            movzx EDX,BYTE PTR [RAX+1]
            mov R9,RAX
            mov RDI,RDX
            lea RDX,QWORD PTR [RAX+RDX*1+2]
            cmp RSI,RDX
            jb .L_427a90

            mov RAX,RDX
.L_427b8f:

            movzx ECX,BYTE PTR [R9]
            cmp ECX,18
            sete DL
            cmp ECX,8
            sete R15B
            or DL,R15B
            je .L_427b50

            mov R10D,EDX
            jmp .L_427b5e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427bb0:

            mov ECX,EBX
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_427970

            jmp .L_427aaa
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427bc8:

            cmp DIL,2
            jne .L_427a90

            movzx R8D,WORD PTR [R9+2]
            mov R11D,1
            rol R8W,8
            jmp .L_427b5e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427bf0:

            test R11B,R11B
            je .L_427a90

            test R10B,R10B
            je .L_427a90

            movzx R11D,BYTE PTR [RBP+255]
            add R11,RBP
            cmp RBP,R11
            jae .L_427d0b

            mov RAX,RBP
            jmp .L_427c2c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427c20:

            cmp R9,R11
            mov RAX,R9
            jae .L_427d0b
.L_427c2c:

            movzx EDX,BYTE PTR [RAX+1]
            lea R9,QWORD PTR [RAX+RDX*1+2]
            movzx EDX,BYTE PTR [RAX]
            sar EDX,1
            cmp EDX,4
            jne .L_427c20

            add RAX,2
            cmp R9,RAX
            ja .L_427c63

            jmp .L_427c20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427c50:

            cmp ECX,9
            movzx EDX,BYTE PTR [RAX+1]
            je .L_427c88
.L_427c59:

            lea RAX,QWORD PTR [RAX+RDX*1+2]
            cmp R9,RAX
            jbe .L_427c20
.L_427c63:

            movzx ECX,BYTE PTR [RAX]
            cmp ECX,11
            jne .L_427c50

            movzx EDX,WORD PTR [RAX+2]
            rol DX,8
            cmp R8W,DX
            jne .L_427a90

            movzx EDX,BYTE PTR [RAX+1]
            jmp .L_427c59
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427c88:

            lea R10D,DWORD PTR [RDX+2]
            movzx ECX,BX
            movzx ESI,R10B
            add ECX,ESI
            cmp ECX,255
            jg .L_427a90

            movzx R15D,R10B
            movzx ECX,BX
            add RCX,QWORD PTR [RSP+8]
            cmp R15D,8
            jae .L_427cd8

            test R15B,4
            jne .L_427d25

            test R15D,R15D
            je .L_427cca

            movzx ESI,BYTE PTR [RAX]
            test R15B,2
            mov BYTE PTR [RCX],SIL
            jne .L_427d38
.L_427cca:

            movzx R10D,R10B
            add EBX,R10D
            jmp .L_427c59
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427cd8:

            mov RSI,QWORD PTR [RAX]
            mov QWORD PTR [RCX],RSI
            mov ESI,R15D
            mov RDI,QWORD PTR [RAX+RSI*1-8]
            mov QWORD PTR [RCX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,RAX
            and RDI,-8
            sub RCX,RDI
            add R15D,ECX
            sub RSI,RCX
            shr R15D,3
            mov ECX,R15D

            rep movsq 

            jmp .L_427cca
.L_427d0b:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,BL
            mov RDI,RBP
            mov EBX,1
            call .L_426dd0

            jmp .L_427a95
.L_427d25:

            mov ESI,DWORD PTR [RAX]
            mov R15D,R15D
            mov DWORD PTR [RCX],ESI
            mov ESI,DWORD PTR [RAX+R15*1-4]
            mov DWORD PTR [RCX+R15*1-4],ESI
            jmp .L_427cca
.L_427d38:

            mov R15D,R15D
            movzx ESI,WORD PTR [RAX+R15*1-2]
            mov WORD PTR [RCX+R15*1-2],SI
            jmp .L_427cca
.L_427d49:

            call __stack_chk_fail@PLT
.L_427d4e:

            nop
            nop
.L_427d50:

            jmp .L_427a50
.L_427d55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427d60:

            movzx R9D,R9B
            push R12
            push RBP
            lea RBP,QWORD PTR [R8+R9*1]
            push RBX
.L_427d6c:

            cmp R8,RBP
            jae .L_427ea1

            lea RAX,QWORD PTR [R8+2]
            cmp RBP,RAX
            jb .L_427fb0

            movzx EAX,BYTE PTR [R8+1]
            lea R12,QWORD PTR [R8+RAX*1+2]
            cmp RBP,R12
            jb .L_427fb0

            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,1
            je .L_427eec
.L_427da4:

            cmp EAX,5
            jne .L_427eb0

            movzx EAX,BYTE PTR [R8+1]
            test AL,AL
            je .L_427fb0

            cmp BYTE PTR [R8+2],0
            js .L_428050

            cmp RAX,5
            jbe .L_427fb0

            lea R9,QWORD PTR [R8+3]
            lea R10,QWORD PTR [R8+7]
            mov EDI,6
            mov R11D,4
.L_427de2:

            movzx R10D,BYTE PTR [R10]
            add RDI,R10
            cmp RAX,RDI
            jb .L_427fb0

            lea RDI,QWORD PTR [R11+R10*1+1]
            lea R8,QWORD PTR [R8+RAX*1+2]
            add R9,RDI
            cmp RBP,R8
            jb .L_427fb0

            cmp R8,R9
            jbe .L_427eb0

            lea RAX,QWORD PTR [R9+2]
            cmp R8,RAX
            jb .L_427fb0

            movzx EAX,BYTE PTR [R9+1]
            lea RAX,QWORD PTR [R9+RAX*1+2]
            cmp R8,RAX
            jae .L_427e6c

            jmp .L_427fb0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427e38:

            cmp BYTE PTR [RDX],0
            je .L_427e42
.L_427e3d:

            cmp BYTE PTR [RCX],0
            jne .L_427ea1
.L_427e42:

            cmp R8,RAX
            jbe .L_427eb0

            lea RDI,QWORD PTR [RAX+2]
            cmp R8,RDI
            jb .L_427fb0

            movzx EDI,BYTE PTR [RAX+1]
            mov R9,RAX
            lea RDI,QWORD PTR [RAX+RDI*1+2]
            cmp R8,RDI
            jb .L_427fb0

            mov RAX,RDI
.L_427e6c:

            movzx EDI,BYTE PTR [R9]
            sar EDI,1
            cmp EDI,6
            jne .L_427e38

            cmp BYTE PTR [R9+1],1
            jbe .L_427fb0

            movzx EDI,WORD PTR [R9+2]
            rol DI,8
            cmp SI,DI
            jne .L_427e38

            mov BYTE PTR [RDX],1
            test BYTE PTR [R9],1
            je .L_427e3d

            mov BYTE PTR [RCX],1
            cmp BYTE PTR [RDX],0
            je .L_427e42
.L_427ea1:

            pop RBX
.L_427ea2:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_427eb0:

            cmp RBP,R12
            jbe .L_427ea1

            lea RAX,QWORD PTR [R12+2]
            cmp RBP,RAX
            jb .L_427fb0

            movzx EAX,BYTE PTR [R12+1]
            mov R8,R12
            lea RAX,QWORD PTR [R12+RAX*1+2]
            cmp RBP,RAX
            jb .L_427fb0

            mov R12,RAX
            movzx EAX,BYTE PTR [R8]
            sar EAX,1
            cmp EAX,1
            jne .L_427da4
.L_427eec:

            movzx EAX,BYTE PTR [R8+1]
            cmp AL,1
            jbe .L_427fb0

            movzx R9D,AL
            movzx EAX,BYTE PTR [R8+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RDI,QWORD PTR [RAX+2]
            cmp R9,RDI
            jb .L_427fb0

            lea RBX,QWORD PTR [R8+R9*1+2]
            lea RDI,QWORD PTR [R8+RAX*1+4]
            cmp RBP,RBX
            jb .L_427fb0

            cmp RBX,RDI
            jbe .L_427eb0

            lea RAX,QWORD PTR [RDI+2]
            cmp RBX,RAX
            jb .L_427fb0

            movzx EAX,BYTE PTR [RDI+1]
            lea R9,QWORD PTR [RDI+RAX*1+2]
            cmp RBX,R9
            jb .L_427fb0

            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            je .L_428000

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_427f58:

            cmp EAX,2
            jne .L_427fc0

            movzx R11D,BYTE PTR [RDI+1]
            xor R8D,R8D
            lea R10,QWORD PTR [RDI+2]
            mov EAX,R11D
            shr AL,2
            test AL,AL
            jne .L_427f8b

            jmp .L_427fc0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_427f78:

            mov EAX,R11D
            add R8D,1
            add R10,4
            shr AL,2
            cmp R8B,AL
            jae .L_427fc0
.L_427f8b:

            movzx EAX,WORD PTR [R10]
            rol AX,8
            cmp SI,AX
            jne .L_427f78

            mov BYTE PTR [RDX],1
            test BYTE PTR [RDI],1
            je .L_427fa3

            mov BYTE PTR [RCX],1
.L_427fa3:

            movzx R11D,BYTE PTR [RDI+1]
            jmp .L_427f78
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427fb0:

            pop RBX
.L_427fb1:

            mov EAX,6
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_427fc0:

            cmp BYTE PTR [RDX],0
            je .L_427fce

            cmp BYTE PTR [RCX],0
            jne .L_427ea1
.L_427fce:

            cmp RBX,R9
            jbe .L_427eb0

            lea RAX,QWORD PTR [R9+2]
            cmp RBX,RAX
            jb .L_427fb0

            movzx EAX,BYTE PTR [R9+1]
            mov RDI,R9
            lea RAX,QWORD PTR [R9+RAX*1+2]
            cmp RBX,RAX
            jb .L_427fb0

            mov R9,RAX
            movzx EAX,BYTE PTR [RDI]
            sar EAX,1
            jne .L_427f58
.L_428000:

            cmp BYTE PTR [RDI+1],2
            jbe .L_427fc0

            lea R11,QWORD PTR [RDI+2]
            xor R10D,R10D
            jmp .L_428031
          .byte 0x90
.L_428010:

            movzx R8D,BYTE PTR [RDI+1]
            add R10D,1
            add R11,3
            lea EAX,DWORD PTR [R8+R8*8]
            lea EAX,DWORD PTR [R8+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            cmp R10B,AL
            jae .L_427fc0
.L_428031:

            movzx EAX,WORD PTR [R11]
            rol AX,8
            cmp SI,AX
            jne .L_428010

            mov BYTE PTR [RDX],1
            test BYTE PTR [RDI],1
            je .L_428010

            mov BYTE PTR [RCX],1
            jmp .L_428010
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428050:

            cmp RAX,1
            je .L_427fb0

            lea R9,QWORD PTR [R8+3]
            mov EDI,2
            xor R11D,R11D
            mov R10,R9
            jmp .L_427de2
.L_42806e:

            nop
            nop
.L_428070:

            movzx EDX,DL
            push R15
            push R14
            push R13
            lea R13,QWORD PTR [RSI+RDX*1]
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_428085:

            cmp RSI,R13
            mov QWORD PTR [RSP+16],RCX
            jae .L_428318

            lea RAX,QWORD PTR [RSI+2]
            mov RBX,RSI
            cmp R13,RAX
            jb .L_428318

            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp R13,RAX
            jb .L_428318

            movzx EAX,R8B
            mov RBP,RDI
            mov DWORD PTR [RSP+28],EAX
            jmp .L_42810a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4280c8:

            cmp EAX,5
            jne .L_4280d6

            and EDX,1
            jne .L_428200
.L_4280d6:

            movzx EAX,BYTE PTR [RBX+1]
            lea R12,QWORD PTR [RBX+RAX*1+2]
.L_4280df:

            cmp R13,R12
            mov RBX,R12
            jbe .L_428318

            lea RAX,QWORD PTR [RBX+2]
            cmp R13,RAX
            jb .L_428318

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R13,RAX
            jb .L_428318
.L_42810a:

            movzx EAX,BYTE PTR [RBX]
            mov EDX,EAX
            sar EAX,1
            cmp EAX,1
            jne .L_4280c8

            mov RSI,RBX
            mov RDI,RBP
            call .L_4257f0

            mov EDX,1
            mov RSI,RBX
            mov RDI,RBP
            mov R15,RAX
            call .L_425660

            mov EDX,1
            mov RSI,RBX
            mov RDI,RBP
            mov R12,RAX
            call .L_425760

            test BYTE PTR [RBX],1
            mov R14,RAX
            je .L_4280d6

            test R15,R15
            je .L_42815d

            test R12,R12
            je .L_4280d6
.L_42815d:

            movzx EDX,BYTE PTR [RBX+3]
            mov R8D,DWORD PTR [RSP+28]
            lea RSI,QWORD PTR [RBX+4]
            mov RCX,QWORD PTR [RSP+16]
            mov RDI,RBP
            call .L_425bc0

            test RAX,RAX
            mov R15,RAX
            je .L_4281e4

            test R12,R12
            je .L_4281ae

            mov EDX,1
            mov RSI,RAX
            mov RDI,RBP
            call .L_425660

            test RAX,RAX
            je .L_4281e4

            movzx EDX,BYTE PTR [R12+1]
            mov RSI,RAX
            mov RDI,R12
            call memcmp@PLT

            test EAX,EAX
            jne .L_4281e4
.L_4281ae:

            test R14,R14
            je .L_4280d6

            mov EDX,1
            mov RSI,R15
            mov RDI,RBP
            call .L_425760

            test RAX,RAX
            je .L_4281e4

            movzx EDX,BYTE PTR [R14+1]
            mov RSI,RAX
            mov RDI,R14
            call memcmp@PLT

            test EAX,EAX
            je .L_4280d6
.L_4281e4:

            add RSP,40
.L_4281e8:

            mov EAX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428200:

            cmp BYTE PTR [RBX+2],0
            lea R12,QWORD PTR [RBX+3]
            js .L_428330

            mov ESI,DWORD PTR [RBX+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
.L_42821b:

            mov R9D,DWORD PTR [RSP+28]
            mov R8,QWORD PTR [RSP+16]
            mov RDI,RBP
            call .L_425d90

            test RAX,RAX
            je .L_4281e4

            test BYTE PTR [RAX],1
            je .L_4281e4

            cmp BYTE PTR [RBX+2],0
            js .L_428348

            lea RDX,QWORD PTR [RBX+7]
            mov EAX,5
.L_42824a:

            movzx R8D,BYTE PTR [RDX]
            add R8,RAX
            movzx EAX,BYTE PTR [RBX+1]
            add R8,R12
            lea R12,QWORD PTR [RBX+RAX*1+2]
            cmp R12,R8
            jbe .L_4280df

            mov R14,R8
            jmp .L_428283
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428270:

            movzx R11D,BYTE PTR [R14+1]
.L_428275:

            lea R14,QWORD PTR [R14+R11*1+2]
            cmp R12,R14
            jbe .L_4280df
.L_428283:

            movzx EAX,BYTE PTR [R14]
            test AL,1
            je .L_428270

            sar EAX,1
            cmp EAX,6
            jne .L_428270

            cmp R12,R8
            jb .L_4281e4

            mov RBX,R8
            lea R9,QWORD PTR [R14+4]
            jmp .L_4282b6
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4282a8:

            lea RBX,QWORD PTR [RBX+R15*1+2]
            cmp R12,RBX
            jb .L_4281e4
.L_4282b6:

            test BYTE PTR [RBX],1
            movzx R15D,BYTE PTR [RBX+1]
            je .L_4282a8

            movzx EAX,WORD PTR [RBX+2]
            cmp WORD PTR [R14+2],AX
            jne .L_4282a8

            movzx R11D,BYTE PTR [R14+1]
            lea EDX,DWORD PTR [R15-2]
            lea EAX,DWORD PTR [R11-2]
            cmp DL,AL
            jne .L_4282a8

            lea RSI,QWORD PTR [RBX+4]
            mov RDI,R9
            movzx EDX,DL
            mov BYTE PTR [RSP+27],R11B
            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP],R9
            call memcmp@PLT

            test EAX,EAX
            mov R9,QWORD PTR [RSP]
            mov R8,QWORD PTR [RSP+8]
            movzx R11D,BYTE PTR [RSP+27]
            jne .L_4282a8

            jmp .L_428275
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428318:

            add RSP,40
.L_42831c:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428330:

            movzx ECX,BYTE PTR [RBX+3]
            lea RDX,QWORD PTR [RBX+4]
            mov ESI,44970
            jmp .L_42821b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428348:

            mov RDX,R12
            mov EAX,1
            jmp .L_42824a
.L_428355:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428360:

            movzx EAX,BYTE PTR [RSI+1]
            cmp AL,1
            jbe .L_428440

            movzx EDX,AL
            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RCX,QWORD PTR [RAX+2]
            cmp RDX,RCX
            jb .L_428440

            push R13
            push R12
            push RBP
            lea RBP,QWORD PTR [RSI+RDX*1+2]
            push RBX
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            sub RSP,8
.L_42839c:

            cmp RBP,RBX
            jbe .L_428450

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_428430

            mov R12,RSI
            mov R13,RDI
            jmp .L_4283f3
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4283c0:

            cmp EAX,2
            jne .L_4283dc

            cmp DL,3
            jbe .L_428430

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_427100

            test EAX,EAX
            jne .L_428422
.L_4283dc:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RBX
            jbe .L_428450

            lea RAX,QWORD PTR [RBX+2]
            cmp RBP,RAX
            jb .L_428430
.L_4283f3:

            movzx EAX,BYTE PTR [RBX+1]
            mov RDX,RAX
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp RBP,RAX
            jb .L_428430

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            jne .L_4283c0

            cmp DL,2
            jbe .L_428430

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_426ee0

            test EAX,EAX
            je .L_4283dc
.L_428422:

            add RSP,8
.L_428426:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_428430:

            add RSP,8
            mov EAX,6
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_428440:

            mov EAX,6
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428450:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42845d:

            nop
            nop
            nop
.L_428460:

            cmp BYTE PTR [RDX+1],2
            jbe .L_428470

            jmp .L_426ee0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428470:

            mov EAX,6
            ret 
.L_428476:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428480:

            mov RAX,RDI
            movzx EDI,BYTE PTR [RDI+255]
            add RDI,RAX
            cmp RAX,RDI
            jae .L_4284f0

            lea RDX,QWORD PTR [RAX+2]
            cmp RDI,RDX
            jb .L_4284f0

            movzx EDX,BYTE PTR [RAX+1]
            lea RDX,QWORD PTR [RAX+RDX*1+2]
            cmp RDI,RDX
            jae .L_4284d2

            jmp .L_4284f0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4284b0:

            cmp RDI,RDX
            jbe .L_4284f0

            lea RAX,QWORD PTR [RDX+2]
            cmp RDI,RAX
            jb .L_4284f0

            movzx EAX,BYTE PTR [RDX+1]
            lea RCX,QWORD PTR [RDX+RAX*1+2]
            mov RAX,RDX
            cmp RDI,RCX
            jb .L_4284f0

            mov RDX,RCX
.L_4284d2:

            movzx ECX,BYTE PTR [RAX]
            sar ECX,1
            cmp ECX,5
            jne .L_4284b0

            movzx ECX,BYTE PTR [RAX+2]
            and ECX,15
            cmp SIL,CL
            jne .L_4284b0

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4284f0:

            xor EAX,EAX
            ret 
.L_4284f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428500:

            push R15
            push R14
            lea RAX,QWORD PTR [RSI+3]
            push R13
            push R12
            mov R15,RDI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RSI
            mov R13,RCX
            sub RSP,24
.L_42851e:

            cmp BYTE PTR [RSI+2],0
            mov QWORD PTR [RSP+8],RAX
            js .L_428660

            mov ESI,DWORD PTR [RSI+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
            cmp ESI,44970
            setne BPL
            lea EBP,DWORD PTR [RCX+RBP*4]
            lea EAX,DWORD PTR [RBP+4]
            mov BYTE PTR [RSP+7],AL
.L_42854e:

            mov RDI,R15
            mov DWORD PTR [RSP],R8D
            call .L_425ea0

            test RAX,RAX
            mov R14,RAX
            mov R8D,DWORD PTR [RSP]
            je .L_4286b0

            movzx EDX,BYTE PTR [R12+1]
            movzx ECX,BYTE PTR [R15+255]
            lea EAX,DWORD PTR [RDX-2]
            movzx EAX,AL
            lea EAX,DWORD PTR [RCX+RAX*1+4]
            cmp EAX,255
            jg .L_428649

            movzx EBP,BYTE PTR [R14+1]
.L_428592:

            movzx EBP,BPL
            add EDX,2
            mov RDI,R15
            lea RBX,QWORD PTR [R14+RBP*1+2]
            movzx EDX,DL
            mov RSI,RBX
            call .L_425ec0

            mov EAX,524
            lea RDX,QWORD PTR [RBX+4]
            lea RSI,QWORD PTR [R12+4]
            mov WORD PTR [RBX],AX
            movzx EAX,WORD PTR [R12+2]
            mov WORD PTR [RBX+2],AX
            movzx ECX,BYTE PTR [R12+1]
            mov BYTE PTR [RBX+1],CL
            sub ECX,2
            movzx ECX,CL
            cmp ECX,8
            jae .L_428680

            test CL,4
            jne .L_428860

            test ECX,ECX
            jne .L_4287d8
.L_4285f0:

            test BYTE PTR [R12],1
            je .L_4285fe

            or BYTE PTR [R14],1
            or BYTE PTR [RBX],1
.L_4285fe:

            movzx EAX,BYTE PTR [R12+1]
            add EAX,2
            add BYTE PTR [R14+1],AL
            add RSP,24
.L_42860f:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428620:

            xor R8D,R8D
            nop
            nop
            nop
            nop
            nop
.L_428628:

            mov ESI,R8D
            mov RDI,R15
            mov R13D,R8D
            call .L_428480

            test RAX,RAX
            je .L_428712

            add R8D,1
            cmp R8D,16
            jne .L_428628
.L_428649:

            add RSP,24
            mov EAX,3
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_428660:

            movzx ECX,BYTE PTR [RSI+3]
            lea RDX,QWORD PTR [RSI+4]
            mov ESI,44970
            lea EAX,DWORD PTR [RCX+4]
            mov EBP,ECX
            mov BYTE PTR [RSP+7],AL
            jmp .L_42854e
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428680:

            mov RAX,QWORD PTR [R12+4]
            mov QWORD PTR [RBX+4],RAX
            mov EAX,ECX
            mov RDI,QWORD PTR [RSI+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RDI
            lea RDI,QWORD PTR [RBX+12]
            and RDI,-8
            sub RDX,RDI
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 

            jmp .L_4285f0
.L_4286b0:

            movzx EAX,BYTE PTR [R12+1]
            movzx EDX,BYTE PTR [RSP+7]
            sub EAX,2
            movzx EAX,AL
            lea EAX,DWORD PTR [RDX+RAX*1+4]
            movzx EDX,BYTE PTR [R15+255]
            add EAX,EDX
            cmp EAX,255
            jg .L_428649

            cmp BYTE PTR [RBX+2],0
            movzx R9D,R8B
            js .L_428848

            mov ESI,DWORD PTR [RBX+3]
            movzx ECX,BYTE PTR [RBX+7]
            lea RDX,QWORD PTR [RBX+8]
            bswap ESI
.L_4286f5:

            mov R8,R13
            mov RDI,R15
            call .L_425d90

            test RAX,RAX
            je .L_428620

            movzx R13D,BYTE PTR [RAX+2]
            and R13D,15
.L_428712:

            movzx R9D,BYTE PTR [R15+255]
            movzx EDX,BYTE PTR [RSP+7]
            mov RDI,R15
            or R13D,4294967168
            lea R14,QWORD PTR [R15+R9*1]
            mov RSI,R14
            call .L_425ec0

            mov EDX,522
            mov BYTE PTR [R14+3],0
            mov BYTE PTR [R14+2],R13B
            mov WORD PTR [R14],DX
            cmp BYTE PTR [RBX+2],0
            js .L_428800

            mov EAX,DWORD PTR [RBX+3]
            cmp EAX,2863595520
            je .L_42876e

            and R13D,127
            mov DWORD PTR [R14+3],EAX
            mov BYTE PTR [R14+2],R13B
            cmp BYTE PTR [RBX+2],0
            js .L_428800
.L_42876e:

            add RBX,7
            mov ESI,5
.L_428777:

            movzx EAX,BYTE PTR [RBX]
            lea RCX,QWORD PTR [R14+3]
            lea RDX,QWORD PTR [R14+7]
            add RSI,QWORD PTR [RSP+8]
            test R13B,R13B
            cmovs RDX,RCX
            mov BYTE PTR [RDX],AL
            movsx RDX,BYTE PTR [R14+2]
            sar RDX,63
            and RDX,-4
            cmp EAX,8
            lea RCX,QWORD PTR [RCX+RDX*1+5]
            jae .L_428810

            test AL,4
            jne .L_428880

            test EAX,EAX
            je .L_4287c0

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RCX],DL
            jne .L_428893
.L_4287c0:

            add EBP,2
            mov BYTE PTR [R14+1],BPL
            movzx EDX,BYTE PTR [R12+1]
            jmp .L_428592
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4287d8:

            movzx EAX,BYTE PTR [R12+4]
            test CL,2
            mov BYTE PTR [RBX+4],AL
            je .L_4285f0

            mov EAX,ECX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_4285f0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428800:

            mov RBX,QWORD PTR [RSP+8]
            mov ESI,1
            jmp .L_428777
          .byte 0x90
.L_428810:

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [RCX],RDX
            mov EDX,EAX
            mov RDI,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RCX+RDX*1-8],RDI
            lea RDI,QWORD PTR [RCX+8]
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 

            jmp .L_4287c0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428848:

            movzx ECX,BYTE PTR [RBX+3]
            lea RDX,QWORD PTR [RBX+4]
            mov ESI,44970
            jmp .L_4286f5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428860:

            mov EAX,DWORD PTR [R12+4]
            mov DWORD PTR [RBX+4],EAX
            mov EAX,ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_4285f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428880:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RCX],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            jmp .L_4287c0
.L_428893:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_4287c0
.L_4288a4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4288b0:

            movzx EAX,BYTE PTR [RSI+1]
            test AL,AL
            je .L_4289e8

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,8
.L_4288ca:

            cmp BYTE PTR [RSI+2],0
            js .L_4289a0

            cmp RAX,5
            jbe .L_4289d0

            lea R9,QWORD PTR [RSI+7]
            mov R8D,6
            lea RBX,QWORD PTR [RSI+3]
            mov R10D,4
            movzx R9D,BYTE PTR [R9]
            add R8,R9
            cmp RAX,R8
            jb .L_4289d0
.L_428902:

            lea R8,QWORD PTR [R10+R9*1+1]
            lea R15,QWORD PTR [RSI+RAX*1+2]
            add RBX,R8
            cmp R15,RBX
            jbe .L_4289f0

            lea RAX,QWORD PTR [RBX+2]
            cmp R15,RAX
            jb .L_4289d0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RAX
            jb .L_4289d0

            mov R14,RDX
            mov RBP,RSI
            mov R13,RDI
            movzx R12D,CL
            jmp .L_428979
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428950:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RBX
            jbe .L_4289f0

            lea RAX,QWORD PTR [RBX+2]
            cmp R15,RAX
            jb .L_4289d0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R15,RAX
            jb .L_4289d0
.L_428979:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,6
            jne .L_428950

            mov R8D,R12D
            mov RCX,R14
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            call .L_428500

            test EAX,EAX
            je .L_428950

            jmp .L_4289d5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4289a0:

            cmp RAX,1
            je .L_4289d0

            lea RBX,QWORD PTR [RSI+3]
            mov R8D,2
            xor R10D,R10D
            mov R9,RBX
            movzx R9D,BYTE PTR [R9]
            add R8,R9
            cmp RAX,R8
            jae .L_428902

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4289d0:

            mov EAX,6
.L_4289d5:

            add RSP,8
.L_4289d9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4289e8:

            mov EAX,6
            ret 
          .byte 0x66
          .byte 0x90
.L_4289f0:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_428a01:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428a10:

            movzx EDX,DL
            push R14
            push R13
            lea R14,QWORD PTR [RSI+RDX*1]
            push R12
            push RBP
            push RBX
.L_428a1f:

            cmp RSI,R14
            jae .L_428ad0

            lea RAX,QWORD PTR [RSI+2]
            mov RBX,RSI
            cmp R14,RAX
            jb .L_428ac0

            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp R14,RAX
            jb .L_428ac0

            mov RBP,RDI
            mov R13,RCX
            movzx R12D,R8B
            jmp .L_428a97
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428a58:

            cmp EAX,5
            jne .L_428a72

            mov ECX,R12D
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_4288b0

            test EAX,EAX
            jne .L_428ab0
.L_428a72:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RBX
            jbe .L_428ad0

            lea RAX,QWORD PTR [RBX+2]
            cmp R14,RAX
            jb .L_428ac0

            movzx EAX,BYTE PTR [RBX+1]
            lea RAX,QWORD PTR [RBX+RAX*1+2]
            cmp R14,RAX
            jb .L_428ac0
.L_428a97:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_428a58

            mov RSI,RBX
            mov RDI,RBP
            call .L_428360

            test EAX,EAX
            je .L_428a72
.L_428ab0:

            pop RBX
.L_428ab1:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428ac0:

            pop RBX
            mov EAX,6
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_428ad0:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_428adb:

            nop
            nop
            nop
            nop
            nop
.L_428ae0:

            cmp BYTE PTR [RDX+1],3
            jbe .L_428af0

            jmp .L_427100
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428af0:

            mov EAX,6
            ret 
.L_428af6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428b00:

            movzx EDX,WORD PTR [RDI+266]
            mov EAX,1
            mov ESI,EDX
            jmp .L_428b18
.L_428b10:

            add EAX,1
            cmp EAX,16
            je .L_428b30
.L_428b18:

            bt EDX,EAX
            jb .L_428b10

            mov ECX,EAX
            mov EDX,1
            shl EDX,CL
            or ESI,EDX
            mov WORD PTR [RDI+266],SI
            ret 
.L_428b30:

            mov EAX,4294967295
            ret 
.L_428b36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428b40:

            push RBP
            push RBX
            movzx EBP,SI
            mov R8,RDI
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,24
.L_428b51:

            movzx R9D,BYTE PTR [RDI+255]
            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            call .L_427d60

            cmp BYTE PTR [RSP+6],0
            mov EAX,23
            je .L_428b96

            mov RDI,RBX
            call .L_425fb0
.L_428b96:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_428bad

            add RSP,24
.L_428baa:

            pop RBX
            pop RBP
            ret 
.L_428bad:

            call __stack_chk_fail@PLT
.L_428bb2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428bc0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov R12D,EDX
            lea RBX,QWORD PTR [RSI+3]
            sub RSP,8
.L_428bdb:

            cmp BYTE PTR [RSI+2],0
            js .L_428ca8

            lea RAX,QWORD PTR [RSI+7]
            mov EDX,5
.L_428bee:

            movzx EAX,BYTE PTR [RAX]
            mov R15D,4294967294
            mov R14D,4294967290
            add RAX,RDX
            movzx EDX,BYTE PTR [RBP+1]
            add RBX,RAX
            mov RSI,RDX
.L_428c0a:

            lea RAX,QWORD PTR [RBP+RDX*1+2]
            cmp RBX,RAX
            jae .L_428c3f
.L_428c14:

            movzx EAX,BYTE PTR [RBX]
            movzx ECX,BYTE PTR [RBX+1]
            sar EAX,1
            cmp EAX,6
            jne .L_428c30

            movzx EAX,WORD PTR [RBX+2]
            rol AX,8
            cmp R12W,AX
            je .L_428c50
.L_428c30:

            lea RBX,QWORD PTR [RBX+RCX*1+2]
            lea RAX,QWORD PTR [RBP+RDX*1+2]
            cmp RBX,RAX
            jb .L_428c14
.L_428c3f:

            add RSP,8
.L_428c43:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_428c50:

            add ECX,2
            cmp BYTE PTR [RBP+2],0
            js .L_428c90

            movzx EDX,BYTE PTR [RBP+7]
            mov EAX,R14D
            sub EAX,EDX
            add ESI,EAX
            mov EAX,6
            sub ESI,ECX
.L_428c6b:

            add ESI,EAX
            mov RDI,R13
            add ESI,EDX
            movzx EDX,CL
            mov BYTE PTR [RBP+1],SIL
            mov RSI,RBX
            call .L_425f40

            movzx EDX,BYTE PTR [RBP+1]
            mov RSI,RDX
            jmp .L_428c0a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_428c90:

            movzx EDX,BYTE PTR [RBP+3]
            mov EAX,R15D
            sub EAX,EDX
            add ESI,EAX
            mov EAX,2
            sub ESI,ECX
            jmp .L_428c6b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428ca8:

            mov RAX,RBX
            mov EDX,1
            jmp .L_428bee
.L_428cb5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_428cc0:

            movzx R8D,BYTE PTR [RDX+1]
            lea EAX,DWORD PTR [R8+R8*8]
            lea EAX,DWORD PTR [R8+RAX*2]
            lea EAX,DWORD PTR [RAX+RAX*8]
            shr AX,9
            test AL,AL
            je .L_428d48

            movzx R11D,WORD PTR [RDX+2]
            mov R9D,R8D
            lea R8,QWORD PTR [RDX+2]
            rol R11W,8
            cmp CX,R11W
            je .L_428d1d

            sub EAX,1
            mov R10D,ECX
            lea RCX,QWORD PTR [RDX+5]
            movzx EAX,AL
            lea R11,QWORD PTR [RAX+RAX*2]
            add R11,RCX
.L_428d03:

            cmp RCX,R11
            je .L_428d48

            mov R8,RCX
            add RCX,3
            movzx EAX,WORD PTR [R8]
            rol AX,8
            cmp AX,R10W
            jne .L_428d03
.L_428d1d:

            sub R9D,3
            sub RSP,8

            mov BYTE PTR [RDX+1],R9B
            sub BYTE PTR [RSI+1],3
            mov EDX,3
            mov RSI,R8
            call .L_425f40

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428d48:

            xor EAX,EAX
            ret 
.L_428d4b:

            nop
            nop
            nop
            nop
            nop
.L_428d50:

            movzx R10D,BYTE PTR [RDX+1]
            mov R8D,R10D
            shr R8B,2
            test R8B,R8B
            je .L_428dc8

            movzx EAX,WORD PTR [RDX+2]
            lea R9,QWORD PTR [RDX+2]
            rol AX,8
            cmp CX,AX
            je .L_428d9f

            lea RAX,QWORD PTR [RDX+6]
            sub R8D,1
            mov R11D,ECX
            movzx R8D,R8B
            lea R8,QWORD PTR [RAX+R8*4]
.L_428d85:

            cmp RAX,R8
            je .L_428dc8

            mov R9,RAX
            add RAX,4
            movzx ECX,WORD PTR [R9]
            rol CX,8
            cmp CX,R11W
            jne .L_428d85
.L_428d9f:

            sub R10D,4
            sub RSP,8

            mov BYTE PTR [RDX+1],R10B
            sub BYTE PTR [RSI+1],4
            mov EDX,4
            mov RSI,R9
            call .L_425f40

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_428dc8:

            xor EAX,EAX
            ret 
.L_428dcb:

            nop
            nop
            nop
            nop
            nop
.L_428dd0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            movzx R12D,DX
            sub RSP,8
.L_428de4:

            movzx EAX,BYTE PTR [RSI+3]
            movzx ECX,BYTE PTR [RSI+1]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
.L_428df9:

            lea RAX,QWORD PTR [R13+RCX*1+2]
            cmp RBX,RAX
            jae .L_428e48
.L_428e03:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            je .L_428eb0

            cmp EAX,2
            jne .L_428ea8

            mov ECX,R12D
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RBP
            call .L_428d50

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            je .L_428ecd
.L_428e34:

            movzx ECX,BYTE PTR [R13+1]
.L_428e39:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R13+RCX*1+2]
            cmp RBX,RAX
            jb .L_428e03
.L_428e48:

            mov RSI,R13
            mov RDI,RBP
            call .L_4257f0

            test RAX,RAX
            mov R12,RAX
            je .L_428e94

            movzx EDX,BYTE PTR [RAX+2]
            movzx EAX,BYTE PTR [R13+3]
            movzx ECX,BYTE PTR [R13+1]
            add EAX,7
            mov EBX,EDX
            sar EAX,3
            and EBX,15
            sub ECX,EAX
            sub EBX,1
            cmp CL,6
            je .L_428ef0

            or EDX,16
            movsxd RBX,EBX
            mov BYTE PTR [R12+2],DL
            mov DWORD PTR [RBP+RBX*4+268],0
.L_428e94:

            add RSP,8
.L_428e98:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428ea8:

            movzx EAX,BYTE PTR [RBX+1]
            jmp .L_428e39
          .byte 0x66
          .byte 0x90
.L_428eb0:

            mov ECX,R12D
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RBP
            call .L_428cc0

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            jne .L_428e34
.L_428ecd:

            sub BYTE PTR [R13+1],2
            mov EDX,2
            mov RSI,RBX
            mov RDI,RBP
            call .L_425f40

            movzx ECX,BYTE PTR [R13+1]
            jmp .L_428df9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_428ef0:

            and EDX,4294967279
            movsxd RBX,EBX
            mov BYTE PTR [R12+2],DL
            call .L_401240

            mov DWORD PTR [RBP+RBX*4+268],EAX
            movzx EAX,BYTE PTR [R12+2]
            and EAX,15
            lea RAX,QWORD PTR [RBP+RAX*4]
            mov EDX,DWORD PTR [RAX+264]
            test EDX,EDX
            jne .L_428f29

            mov DWORD PTR [RAX+264],1
.L_428f29:

            call .L_401240

            lea RDI,QWORD PTR [RBP+336]
            mov ESI,EAX
            mov EDX,1000
            call .L_430d50

            add RSP,8
.L_428f45:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_428f4e:

            nop
            nop
.L_428f50:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_428f57:

            movzx EDX,BYTE PTR [RDI+255]
            mov RBX,RDI
            movzx EBP,SI
.L_428f64:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_428fc0
.L_428f6d:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            je .L_428fe0

            cmp EAX,5
            jne .L_428fd0

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_428bc0

            cmp BYTE PTR [RBX+2],0
            movzx EAX,BYTE PTR [RBX+1]
            lea RCX,QWORD PTR [RBX+3]
            js .L_429028

            lea EDX,DWORD PTR [RAX-4]
            lea RCX,QWORD PTR [RBX+7]
.L_428fa2:

            sub DL,BYTE PTR [RCX]
            cmp DL,2
            je .L_429004
.L_428fa9:

            movzx EDX,BYTE PTR [R12+255]
.L_428fb2:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jb .L_428f6d
.L_428fc0:

            pop RBX
.L_428fc1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428fd0:

            movzx EAX,BYTE PTR [RBX+1]
            jmp .L_428fb2
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_428fe0:

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_428dd0

            movzx EDX,BYTE PTR [RBX+3]
            movzx EAX,BYTE PTR [RBX+1]
            add EDX,7
            mov ECX,EAX
            sar EDX,3
            sub ECX,EDX
            cmp CL,2
            jne .L_428fa9
.L_429004:

            add EAX,2
            mov RSI,RBX
            mov RDI,R12
            movzx EDX,AL
            call .L_425f40

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_428f64
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429028:

            mov EDX,EAX
            jmp .L_428fa2
.L_42902f:

            nop
.L_429030:

            push RBP
            push RBX
            movzx EBP,SI
            mov R8,RDI
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,24
.L_429041:

            movzx R9D,BYTE PTR [RDI+255]
            lea RCX,QWORD PTR [RSP+7]
            lea RDX,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+6],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            call .L_427d60

            cmp BYTE PTR [RSP+6],0
            jne .L_429090
.L_429079:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4290c4

            add RSP,24
.L_42908d:

            pop RBX
            pop RBP
            ret 
.L_429090:

            mov RDI,RBX
            call .L_428f50

            add BYTE PTR [RBX+265],1
            cmp BYTE PTR [RSP+7],0
            je .L_4290ad

            add BYTE PTR [RBX+264],1
.L_4290ad:

            mov RDI,RBX
            call .L_430b10

            mov ESI,512
            mov RDI,RAX
            call .L_402d30

            jmp .L_429079
.L_4290c4:

            call __stack_chk_fail@PLT
.L_4290c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4290d0:

            push R15
            push R14
            mov R8,RDI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            movzx EBP,SI
            mov R12D,ECX
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,296
.L_4290f2:

            movzx R9D,BYTE PTR [RDI+255]
            movzx R12D,R12B
            lea R15,QWORD PTR [RSP+14]
            lea R14,QWORD PTR [RSP+13]
            mov BYTE PTR [RSP+13],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            mov RCX,R15
            mov RDX,R14
            mov BYTE PTR [RSP+14],0
            mov BYTE PTR [RSP+15],255
            call .L_427d60

            cmp BYTE PTR [RSP+13],0
            je .L_4291b0

            movzx R8D,BYTE PTR [RBX+255]
            mov RCX,RBX
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_428070

            test AL,AL
            mov R14D,EAX
            je .L_429250
.L_429160:

            lea R15,QWORD PTR [RSP+16]
            lea RCX,QWORD PTR [RSP+15]
            xor ESI,ESI
            mov RDI,RBX
            mov RDX,R15
            call .L_425b20

            test EAX,EAX
            je .L_429210
.L_42917f:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_429270

            add RSP,296
.L_42919d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4291b0:

            mov R9D,R12D
            mov R8,R13
            mov RDI,RBX
            call .L_427d60

            test EAX,EAX
            jne .L_42917f

            lea RCX,QWORD PTR [RSP+16]
            xor R8D,R8D
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_428a10

            test EAX,EAX
            jne .L_42917f

            add BYTE PTR [RBX+265],1
            cmp BYTE PTR [RSP+14],0
            je .L_4291f1
.L_4291ea:

            add BYTE PTR [RBX+264],1
.L_4291f1:

            mov RDI,RBX
            call .L_430b10

            mov ESI,512
            mov RDI,RAX
            call .L_402d30

            xor EAX,EAX
            jmp .L_42917f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429210:

            mov ESI,EBP
            mov RDI,RBX
            call .L_428f50

            test EAX,EAX
            jne .L_42917f

            movzx R8D,BYTE PTR [RSP+15]
            mov RCX,R15
            mov EDX,R12D
            mov RSI,R13
            mov RDI,RBX
            call .L_428a10

            test EAX,EAX
            jne .L_42917f

            add BYTE PTR [RBX+265],1
            test R14B,R14B
            je .L_4291f1

            jmp .L_4291ea
          .byte 0x90
.L_429250:

            movzx EDX,BYTE PTR [RBX+255]
            mov R8D,R12D
            mov RCX,R13
            mov RSI,RBX
            mov RDI,RBX
            call .L_428070

            mov R14D,EAX
            jmp .L_429160
.L_429270:

            call __stack_chk_fail@PLT
.L_429275:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429280:

            push R14
            push R13
            mov R13,RCX
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            xor EDX,EDX
            mov RBP,RDI
            mov ESI,2
            mov RDI,RBX
            sub RSP,288
.L_4292a5:

            lea RCX,QWORD PTR [RSP+12]
            mov WORD PTR [RSP+12],DX
            mov EDX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+16],AX
            call .L_430f70

            test EAX,EAX
            jne .L_42931c

            cmp BYTE PTR [RSP+13],2
            je .L_429308
.L_4292de:

            mov RAX,QWORD PTR [RSP+280]
            xor RAX,QWORD PTR FS:[40]
            jne .L_429387

            add RSP,288
.L_4292fc:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429308:

            movzx ESI,WORD PTR [RSP+14]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_429030
.L_42931c:

            lea R14,QWORD PTR [RSP+16]
            mov EDX,257
            mov ESI,10
            mov RDI,RBX
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            je .L_429368
.L_42933a:

            mov RDI,RBP
            call .L_430af0

            test BYTE PTR [R12],48
            jne .L_4292de

            lea RDI,QWORD PTR [RAX+216]
            mov RCX,R13
            mov RDX,R12
            mov ESI,68
            call .L_42e970

            jmp .L_4292de
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429368:

            movzx ESI,WORD PTR [R13+30]
            movzx ECX,BYTE PTR [RSP+17]
            lea RDX,QWORD PTR [R14+2]
            mov RDI,RBP
            rol SI,8
            movzx ESI,SI
            call .L_4290d0

            jmp .L_42933a
.L_429387:

            call __stack_chk_fail@PLT
.L_42938c:

            nop
            nop
            nop
            nop
.L_429390:

            jmp .L_429280
.L_429395:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4293a0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov R12D,EDX
            sub RSP,8
.L_4293b3:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            movzx ESI,BYTE PTR [RSI+1]
            mov RDI,RSI
            jmp .L_4293ef
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4293d0:

            movzx ECX,BYTE PTR [RBX]
            movzx EAX,BYTE PTR [RBX+1]
            sar ECX,1
            cmp ECX,3
            jne .L_4293ea

            movzx EDX,BYTE PTR [RBX+2]
            and EDX,15
            cmp R12B,DL
            je .L_429410
.L_4293ea:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
.L_4293ef:

            lea RAX,QWORD PTR [RBP+RSI*1+2]
            cmp RBX,RAX
            jb .L_4293d0

            add RSP,8
.L_4293fd:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429410:

            add EAX,2
            mov RSI,RBX
            sub EDI,EAX
            movzx EDX,AL
            mov BYTE PTR [RBP+1],DIL
            mov RDI,R13
            call .L_425f40

            movzx ESI,BYTE PTR [RBP+1]
            mov RDI,RSI
            jmp .L_4293ef
.L_429430:

            push R12
            mov R12,RDI
            push RBP
            movzx EBP,SIL
            push RBX
.L_42943b:

            mov RBX,RDI
            movzx EDX,BYTE PTR [RDI+255]
            jmp .L_429459
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429450:

            movzx EAX,BYTE PTR [RBX+1]
.L_429454:

            lea RBX,QWORD PTR [RBX+RAX*1+2]
.L_429459:

            lea RAX,QWORD PTR [R12+RDX*1]
            cmp RBX,RAX
            jae .L_4294a0

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_429450

            mov EDX,EBP
            mov RSI,RBX
            mov RDI,R12
            call .L_4293a0

            movzx EDX,BYTE PTR [RBX+3]
            movzx EAX,BYTE PTR [RBX+1]
            add EDX,7
            mov ECX,EAX
            sar EDX,3
            sub ECX,EDX
            cmp CL,2
            je .L_4294b0

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_429454
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4294a0:

            pop RBX
.L_4294a1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4294b0:

            add EAX,2
            mov RSI,RBX
            mov RDI,R12
            movzx EDX,AL
            call .L_425f40

            movzx EDX,BYTE PTR [R12+255]
            jmp .L_429459
.L_4294cc:

            nop
            nop
            nop
            nop
.L_4294d0:

            push RBP
            push RBX
            movzx EBP,SIL
            mov ESI,EBP
            mov RBX,RDI
            sub RSP,8
            call .L_429430

            mov ECX,EBP
            mov EAX,4294967294
            add BYTE PTR [RBX+265],1
            rol EAX,CL
            add BYTE PTR [RBX+264],1
            mov RDI,RBX
            and WORD PTR [RBX+266],AX
            call .L_430b10

            mov ESI,512
            mov RDI,RAX
            call .L_402d30

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_429520:

            push R12
            xor R12D,R12D
            push RBP
            mov RBP,RDI
            push RBX
.L_42952a:

            xor EBX,EBX
            jmp .L_429540
          .byte 0x66
          .byte 0x90
.L_429530:

            mov R12D,1
.L_429536:

            add RBX,1
            cmp RBX,15
            je .L_429580
.L_429540:

            mov EAX,DWORD PTR [RBP+RBX*4+268]
            test EAX,EAX
            je .L_429536

            call .L_401240

            imul EDX,DWORD PTR [RBP+328],1000
            sub EAX,DWORD PTR [RBP+RBX*4+268]
            cmp EAX,EDX
            jb .L_429530

            lea ESI,DWORD PTR [RBX+1]
            mov RDI,RBP
            add RBX,1
            call .L_4294d0

            cmp RBX,15
            jne .L_429540

            nop
            nop
            nop
            nop
            nop
            nop
.L_429580:

            test R12B,R12B
            jne .L_429590

            pop RBX
.L_429586:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429590:

            call .L_401240

            pop RBX
            lea RDI,QWORD PTR [RBP+336]
            mov EDX,1000
            mov ESI,EAX
            pop RBP
            pop R12
            jmp .L_430d50
.L_4295ac:

            nop
            nop
            nop
            nop
.L_4295b0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402ae0

            add RSP,8
            mov RDI,RAX
            jmp .L_429520
.L_4295cd:

            nop
            nop
            nop
.L_4295d0:

            push RBX
            mov EDX,1
            mov RBX,RDI
            call .L_424470

            mov EAX,4294967294
            mov WORD PTR [RBX+264],AX
            pop RBX
            ret 
.L_4295ec:

            nop
            nop
            nop
            nop
.L_4295f0:

            push RBP
            push RBX
            movzx EDX,DL
            mov RBX,RDI
            sub RSP,8
            call .L_425ce0

            test RAX,RAX
            je .L_429640

            mov RSI,RAX
            mov RDI,RBX
            mov RBP,RAX
            call .L_4255e0

            test RAX,RAX
            je .L_429640

            movzx EAX,BYTE PTR [RBP+1]
            mov RSI,RBP
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_425f40

            mov RDI,RBX
            call .L_4261c0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_429640:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_42964c:

            nop
            nop
            nop
            nop
.L_429650:

            push R15
            push R14
            movzx R15D,DL
            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            lea EBX,DWORD PTR [R15+7]
            mov R12,RSI
            mov R14D,ECX
            mov RBP,RDI
            sub RSP,24
.L_429672:

            sar EBX,3
            mov DWORD PTR [RSP],R8D
            mov DWORD PTR [RSP+4],R9D
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_4154b0

            mov EDX,EBX
            mov RSI,RAX
            mov RDI,R12
            call .L_40f1b0

            cmp AL,63
            mov EDX,7
            ja .L_42977e

            mov EDX,R15D
            mov RSI,R12
            mov RDI,RBP
            call .L_4295f0

            movzx ECX,BYTE PTR [RBP+255]
            lea EDX,DWORD PTR [RBX+10]
            mov RDI,RBP
            add RCX,RBP
            mov RSI,RCX
            mov QWORD PTR [RSP+8],RCX
            call .L_425ec0

            mov RCX,QWORD PTR [RSP+8]
            mov EAX,2
            cmp EBX,8
            movsxd RSI,EBX
            mov WORD PTR [RCX],AX
            mov BYTE PTR [RCX+2],0
            lea RAX,QWORD PTR [RCX+4]
            mov BYTE PTR [RCX+3],R13B
            jb .L_429790

            mov RDX,QWORD PTR [R12]
            mov QWORD PTR [RCX+4],RDX
            mov EDX,EBX
            mov RDI,QWORD PTR [R12+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RDI
            lea RDX,QWORD PTR [RCX+12]
            and RDX,-8
            sub RAX,RDX
            sub R12,RAX
            add EAX,EBX
            and EAX,4294967288
            cmp EAX,8
            jb .L_429740

            and EAX,4294967288
            xor EDI,EDI
.L_42972a:

            mov R8D,EDI
            add EDI,8
            mov R9,QWORD PTR [R12+R8*1]
            cmp EDI,EAX
            mov QWORD PTR [RDX+R8*1],R9
            jb .L_42972a

            nop
            nop
            nop
            nop
.L_429740:

            movzx EAX,BYTE PTR [RSP]
            shl R14D,6
            add EBX,8
            lea RDX,QWORD PTR [RCX+RSI*1+4]
            mov BYTE PTR [RCX+1],BL
            mov DWORD PTR [RDX],4278125572
            mov BYTE PTR [RDX+5],0
            and EAX,63
            or R14D,EAX
            cmp BYTE PTR [RSP+4],0
            mov BYTE PTR [RDX+4],R14B
            je .L_429774

            or BYTE PTR [RCX],1
            or BYTE PTR [RDX],1
.L_429774:

            mov RDI,RBP
            call .L_4261c0

            xor EDX,EDX
.L_42977e:

            add RSP,24
.L_429782:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_429790:

            test BL,4
            jne .L_4297b8

            test EBX,EBX
            je .L_429740

            movzx EDX,BYTE PTR [R12]
            test BL,2
            mov BYTE PTR [RCX+4],DL
            je .L_429740

            mov EDX,EBX
            movzx EDI,WORD PTR [R12+RDX*1-2]
            mov WORD PTR [RAX+RDX*1-2],DI
            jmp .L_429740
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4297b8:

            mov EDX,DWORD PTR [R12]
            mov DWORD PTR [RCX+4],EDX
            mov EDX,EBX
            mov EDI,DWORD PTR [R12+RDX*1-4]
            mov DWORD PTR [RAX+RDX*1-4],EDI
            jmp .L_429740
.L_4297cf:

            nop
.L_4297d0:

            push RBP
            push RBX
            movzx EDX,DL
            mov RBX,RDI
            sub RSP,8
            call .L_425ce0

            test RAX,RAX
            je .L_429820

            mov RSI,RAX
            mov RDI,RBX
            mov RBP,RAX
            call .L_4256f0

            test RAX,RAX
            je .L_429820

            movzx EAX,BYTE PTR [RBP+1]
            mov RSI,RBP
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_425f40

            mov RDI,RBX
            call .L_4261c0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_429820:

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
.L_42982c:

            nop
            nop
            nop
            nop
.L_429830:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            movzx EBX,DL
            mov EBP,EDX
            mov EDX,EBX
            mov R12D,R8D
            sub RSP,24
.L_42984e:

            add EBX,7
            mov DWORD PTR [RSP+12],ECX
            sar EBX,3
            call .L_4297d0

            movzx R14D,BYTE PTR [R13+255]
            lea EDX,DWORD PTR [RBX+9]
            mov RDI,R13
            add R14,R13
            mov RSI,R14
            call .L_425ec0

            mov EAX,2
            cmp EBX,8
            mov BYTE PTR [R14+2],0
            mov WORD PTR [R14],AX
            mov BYTE PTR [R14+3],BPL
            movsxd RSI,EBX
            lea RAX,QWORD PTR [R14+4]
            jae .L_4298f8

            test BL,4
            jne .L_429940

            test EBX,EBX
            je .L_4298b2

            movzx EDX,BYTE PTR [R15]
            test BL,2
            mov BYTE PTR [R14+4],DL
            jne .L_429960
.L_4298b2:

            movsx EBP,BYTE PTR [RSP+12]
            lea RAX,QWORD PTR [R14+RSI*1+4]
            add EBX,7
            mov BYTE PTR [R14+1],BL
            mov DWORD PTR [RAX],4278125312
            shl EBP,6
            test R12B,R12B
            mov BYTE PTR [RAX+4],BPL
            je .L_4298dc

            or BYTE PTR [R14],1
            or BYTE PTR [RAX],1
.L_4298dc:

            mov RDI,R13
            call .L_4261c0

            add RSP,24
.L_4298e8:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4298f8:

            mov RDX,QWORD PTR [R15]
            mov QWORD PTR [R14+4],RDX
            mov EDX,EBX
            mov RCX,QWORD PTR [R15+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RCX
            lea RDX,QWORD PTR [R14+12]
            and RDX,-8
            sub RAX,RDX
            sub R15,RAX
            add EAX,EBX
            and EAX,4294967288
            cmp EAX,8
            jb .L_4298b2

            and EAX,4294967288
            xor ECX,ECX
.L_429928:

            mov EDI,ECX
            add ECX,8
            mov R8,QWORD PTR [R15+RDI*1]
            cmp ECX,EAX
            mov QWORD PTR [RDX+RDI*1],R8
            jb .L_429928

            jmp .L_4298b2
          .byte 0x66
          .byte 0x90
.L_429940:

            mov EDX,DWORD PTR [R15]
            mov DWORD PTR [R14+4],EDX
            mov EDX,EBX
            mov ECX,DWORD PTR [R15+RDX*1-4]
            mov DWORD PTR [RAX+RDX*1-4],ECX
            jmp .L_4298b2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429960:

            mov EDX,EBX
            movzx ECX,WORD PTR [R15+RDX*1-2]
            mov WORD PTR [RAX+RDX*1-2],CX
            jmp .L_4298b2
.L_429972:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429980:

            push RBX
            movzx ECX,CL
            mov RBX,RDI
            call .L_425ea0

            mov RSI,RAX
            mov EAX,23
            test RSI,RSI
            je .L_4299b5

            movzx EAX,BYTE PTR [RSI+1]
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            call .L_425f40

            mov RDI,RBX
            call .L_4261c0

            xor EAX,EAX
.L_4299b5:

            pop RBX
            ret 
.L_4299b7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4299c0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R10D,ECX
            push RBP
            push RBX
            mov R12,RDI
            mov R15D,ESI
            sub RSP,40
.L_4299da:

            cmp ESI,44970
            mov R13D,DWORD PTR [RSP+96]
            setne BPL
            mov BYTE PTR [RSP],CL
            mov DWORD PTR [RSP+28],R8D
            mov QWORD PTR [RSP+16],R9
            mov DWORD PTR [RSP+12],R10D
            lea EDX,DWORD PTR [R13+RCX*1]
            movzx ECX,CL
            mov BYTE PTR [RSP+26],R13B
            lea EBP,DWORD PTR [RDX+RBP*4]
            mov RDX,R14
            lea R11D,DWORD PTR [RBP+6]
            mov BYTE PTR [RSP+27],R11B
            call .L_429980

            movzx EBX,BYTE PTR [R12+255]
            lea EDX,DWORD PTR [RBP+8]
            mov RDI,R12
            movzx EDX,DL
            add RBX,R12
            mov RSI,RBX
            call .L_425ec0

            cmp R15D,44970
            mov DWORD PTR [RBX],8389130
            mov R10D,DWORD PTR [RSP+12]
            movzx R11D,BYTE PTR [RSP+27]
            mov R9,QWORD PTR [RSP+16]
            mov R8D,DWORD PTR [RSP+28]
            jne .L_429bc0

            lea RDX,QWORD PTR [RBX+3]
            mov RAX,RDX
.L_429a68:

            mov BYTE PTR [RDX],R10B
            movsx RDX,BYTE PTR [RBX+2]
            movzx ECX,BYTE PTR [RSP]
            sar RDX,63
            and RDX,-4
            cmp ECX,8
            lea RDX,QWORD PTR [RAX+RDX*1+5]
            jae .L_429ab0

            test CL,4
            jne .L_429bf0

            test ECX,ECX
            je .L_429adb

            movzx ESI,BYTE PTR [R14]
            test CL,2
            mov BYTE PTR [RDX],SIL
            je .L_429adb

            mov ECX,ECX
            movzx ESI,WORD PTR [R14+RCX*1-2]
            mov WORD PTR [RDX+RCX*1-2],SI
            jmp .L_429adb
          .byte 0x66
          .byte 0x90
.L_429ab0:

            mov RSI,QWORD PTR [R14]
            mov QWORD PTR [RDX],RSI
            mov ESI,ECX
            mov RDI,QWORD PTR [R14+RSI*1-8]
            mov QWORD PTR [RDX+RSI*1-8],RDI
            lea RDI,QWORD PTR [RDX+8]
            mov RSI,R14
            and RDI,-8
            sub RDX,RDI
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_429adb:

            cmp BYTE PTR [RBX+2],0
            mov BYTE PTR [RBX+1],R11B
            js .L_429be0

            lea RDX,QWORD PTR [RAX+4]
            mov EDI,5
.L_429af2:

            movzx EBP,BYTE PTR [RDX]
            add RBP,RDI
            add RBP,RAX
            mov EAX,524
            test R8B,R8B
            mov WORD PTR [RBP],AX
            je .L_429b10

            or BYTE PTR [RBX],1
            or BYTE PTR [RBP],1
.L_429b10:

            mov RDI,R12
            mov QWORD PTR [RSP],R9
            add R13D,2
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415a90

            movzx ECX,BYTE PTR [RSP+26]
            rol AX,8
            mov BYTE PTR [RBP+1],R13B
            mov WORD PTR [RBP+2],AX
            lea RDX,QWORD PTR [RBP+4]
            mov R9,QWORD PTR [RSP]
            cmp ECX,8
            jae .L_429b78

            test CL,4
            jne .L_429c08

            test ECX,ECX
            je .L_429ba4

            movzx EAX,BYTE PTR [R9]
            test CL,2
            mov BYTE PTR [RBP+4],AL
            je .L_429ba4

            mov EAX,ECX
            movzx ECX,WORD PTR [R9+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_429ba4
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429b78:

            mov RAX,QWORD PTR [R9]
            lea RDI,QWORD PTR [RBP+12]
            and RDI,-8
            mov QWORD PTR [RBP+4],RAX
            mov EAX,ECX
            mov RSI,QWORD PTR [R9+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RSI
            sub RDX,RDI
            mov RSI,R9
            add ECX,EDX
            sub RSI,RDX
            shr ECX,3

            rep movsq 
.L_429ba4:

            mov RDI,R12
            call .L_4261c0

            add RSP,40
.L_429bb0:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429bc0:

            bswap R15D
            mov BYTE PTR [RBX+2],0
            lea RAX,QWORD PTR [RBX+3]
            mov DWORD PTR [RBX+3],R15D
            lea RDX,QWORD PTR [RBX+7]
            jmp .L_429a68
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_429be0:

            mov RDX,RAX
            mov EDI,1
            jmp .L_429af2
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429bf0:

            mov ESI,DWORD PTR [R14]
            mov ECX,ECX
            mov DWORD PTR [RDX],ESI
            mov ESI,DWORD PTR [R14+RCX*1-4]
            mov DWORD PTR [RDX+RCX*1-4],ESI
            jmp .L_429adb
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429c08:

            mov EAX,DWORD PTR [R9]
            mov DWORD PTR [RBP+4],EAX
            mov EAX,ECX
            mov ECX,DWORD PTR [R9+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_429ba4
.L_429c1b:

            nop
            nop
            nop
            nop
            nop
.L_429c20:

            push RBX
            mov RBX,RSI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415a90

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_429c41:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429c50:

            push RBX
            mov RBX,RSI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415a90

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_429c71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429c80:

            push R12
            push RBP
            push RBX
.L_429c84:

            movzx EAX,BYTE PTR [RSI+3]
            add EAX,7
            sar EAX,3
            cdqe 
            lea RBX,QWORD PTR [RSI+RAX*1+4]
            movzx EAX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+RAX*1+2]
            cmp RBX,RAX
            jae .L_429cf0

            mov R12,RDI
            mov RBP,RSI
            jmp .L_429cd7
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429cb0:

            cmp EAX,2
            jne .L_429cf7

            mov RSI,RBX
            mov RDI,R12
            call .L_429c50
.L_429cc0:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jae .L_429cf0
.L_429cd7:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            jne .L_429cb0

            mov RSI,RBX
            mov RDI,R12
            call .L_429c20

            jmp .L_429cc0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429cf0:

            pop RBX
.L_429cf1:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_429cf7:

            lea RCX,QWORD PTR [RIP+.L_459920]
            lea RSI,QWORD PTR [RIP+.L_459899]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,263
            call __assert_fail@PLT
.L_429d16:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429d20:

            push RBX
            mov RBX,RSI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415a90

            rol AX,8
            mov WORD PTR [RBX+2],AX
            xor EAX,EAX
            pop RBX
            ret 
.L_429d41:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429d50:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_429d57:

            cmp BYTE PTR [RSI+2],0
            mov RBP,RSI
            lea RBX,QWORD PTR [RSI+3]
            js .L_429dc0

            lea RAX,QWORD PTR [RSI+7]
            mov EDX,5
.L_429d6d:

            movzx EAX,BYTE PTR [RAX]
            add RAX,RDX
            add RBX,RAX
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jae .L_429db4

            nop
            nop
            nop
            nop
.L_429d88:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,6
            jne .L_429dca

            mov RSI,RBX
            mov RDI,R12
            call .L_429d20

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+1]
            lea RAX,QWORD PTR [RBP+RAX*1+2]
            cmp RBX,RAX
            jb .L_429d88
.L_429db4:

            pop RBX
.L_429db5:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429dc0:

            mov RAX,RBX
            mov EDX,1
            jmp .L_429d6d
.L_429dca:

            lea RCX,QWORD PTR [RIP+.L_4598c0]
            lea RSI,QWORD PTR [RIP+.L_459899]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,297
            call __assert_fail@PLT
.L_429de9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_429df0:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
.L_429df9:

            movzx EAX,BYTE PTR [RDI+255]
            add RAX,RDI
            cmp RDI,RAX
            jae .L_429e50

            mov RBX,RDI
            jmp .L_429e38
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_429e10:

            cmp EAX,5
            jne .L_429e61

            mov RSI,RBX
            mov RDI,RBP
            call .L_429d50
.L_429e20:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            movzx EAX,BYTE PTR [RBP+255]
            add RAX,RBP
            cmp RBX,RAX
            jae .L_429e50
.L_429e38:

            movzx EAX,BYTE PTR [RBX]
            sar EAX,1
            cmp EAX,1
            jne .L_429e10

            mov RSI,RBX
            mov RDI,RBP
            call .L_429c80

            jmp .L_429e20
          .byte 0x90
.L_429e50:

            mov RDI,RBP
            call .L_4261c0

            add RSP,8
.L_429e5c:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_429e61:

            lea RCX,QWORD PTR [RIP+.L_459980]
            lea RSI,QWORD PTR [RIP+.L_459899]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,238
            call __assert_fail@PLT
.L_429e80:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_430af0

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_415a90

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_425090

            test AL,AL
            jne .L_429ec0

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429ec0:

            mov RDI,RBX
            call .L_415a90

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_425090
.L_429eda:

            nop
            nop
            nop
            nop
            nop
            nop
.L_429ee0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_430af0

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_415a90

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_425180

            test AL,AL
            jne .L_429f20

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429f20:

            mov RDI,RBX
            call .L_415a90

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_425180
.L_429f3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_429f40:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            call .L_430af0

            lea RBX,QWORD PTR [RAX+2568]
            lea R12,QWORD PTR [RAX+7520]
            mov RDI,RBX
            call .L_415a90

            mov RSI,RBP
            movzx EDX,AX
            mov RDI,R12
            call .L_425260

            test AL,AL
            jne .L_429f80

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_429f80:

            mov RDI,RBX
            call .L_415a90

            pop RBX
            mov RSI,R12
            mov RDI,RBP
            movzx EDX,AX
            pop RBP
            pop R12
            jmp .L_425260
.L_429f9a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_429fa0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_429fad:

            call .L_430af0

            lea R13,QWORD PTR [RAX+2568]
            mov RBP,RAX
            mov RDI,R13
            call .L_415a90

            test BYTE PTR [RBP+2624],2
            mov R12D,EAX
            je .L_429fdc

            mov RDI,R13
            call .L_41b1e0

            test AL,AL
            jne .L_42a030
.L_429fdc:

            mov RDI,RBX
            call .L_429df0

            mov RDI,RBX
            call .L_429e80

            test AL,AL
            jne .L_42a058
.L_429ff0:

            movzx ESI,WORD PTR [RBX+264]
            cmp SI,R12W
            jne .L_42a00e

            mov EAX,4294967294
            mov ESI,65534
            mov WORD PTR [RBX+264],AX
.L_42a00e:

            mov RDI,RBX
            call .L_425fb0

            test EAX,EAX
            jne .L_42a022

            mov WORD PTR [RBX+264],R12W
.L_42a022:

            add RSP,8
.L_42a026:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a030:

            cmp DWORD PTR [RBP+2580],2
            jg .L_429fdc

            mov RDI,R13
            call .L_41bc10

            mov EDX,EAX
            cmp DL,BYTE PTR [RBP+7229]
            mov EAX,13
            jae .L_429fdc

            jmp .L_42a022
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a058:

            mov RDI,RBX
            call .L_429ee0

            test AL,AL
            je .L_429ff0

            mov RDI,RBX
            call .L_429f40

            test AL,AL
            je .L_429ff0

            mov RDI,RBX
            call .L_4261c0

            xor EAX,EAX
            jmp .L_42a022
.L_42a07c:

            nop
            nop
            nop
            nop
.L_42a080:

            test R8D,R8D
            mov RAX,RDX
            jne .L_42a08e

            cmp BYTE PTR [RSI+1],68
            je .L_42a090
.L_42a08e:

            ret 
.L_42a090:

            mov R8,QWORD PTR [RDI+128]
            test R8,R8
            je .L_42a08e

            mov RDX,QWORD PTR [RDI+136]
            mov RSI,RCX
            mov RDI,RAX
            jmp R8
.L_42a0ac:

            nop
            nop
            nop
            nop
.L_42a0b0:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov RAX,QWORD PTR [RDI+128]
            mov RBX,RDI
            mov RBP,RSI
            test RAX,RAX
            je .L_42a0d8

            mov RDI,RDX
            mov RSI,RCX
            mov RDX,QWORD PTR [RBX+136]
            call RAX
.L_42a0d8:

            mov RDI,RBX
            call .L_430af0

            test BYTE PTR [RBP],48
            je .L_42a0f0

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a0f0:

            pop RBX
            mov RCX,R12
            mov RDX,RBP
            lea RDI,QWORD PTR [RAX+216]
            pop RBP
            pop R12
            mov ESI,68
            jmp .L_42e970
.L_42a10b:

            nop
            nop
            nop
            nop
            nop
.L_42a110:

            test BYTE PTR [RSI],48
            jne .L_42a11b

            cmp BYTE PTR [RSI+1],2
            je .L_42a120
.L_42a11b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a120:

            jmp .L_42a0b0
.L_42a122:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a130:

            lea RAX,QWORD PTR [RIP+.L_4599ad]
            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_42ae10]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_4599b2]
            mov QWORD PTR [RBX+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_42aca0]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_4599b7]
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_42a110]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RIP+.L_4599bc]
            mov QWORD PTR [RBX+80],RDI
            mov QWORD PTR [RDI+88],0
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RIP+.L_42b0e0]
            mov QWORD PTR [RDI+104],RAX
            mov QWORD PTR [RBX+112],RDI
            mov QWORD PTR [RDI+120],0
            mov QWORD PTR [RDI+128],0
            mov QWORD PTR [RDI+136],0
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            mov RSI,RBX
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+64]
            lea RDI,QWORD PTR [RAX+216]
            call .L_42d6f0

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_42a22e:

            nop
            nop
.L_42a230:

            mov QWORD PTR [RDI+128],RSI
            mov QWORD PTR [RDI+136],RDX
            ret 
.L_42a23f:

            nop
.L_42a240:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov EBP,ECX
            sub RSP,248
.L_42a259:

            mov QWORD PTR [RSP+8],RDX
            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov RDI,R15
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_40ee50

            test AL,AL
            mov EDX,2
            je .L_42a370

            mov ESI,16
            mov RDI,RBX
            lea R12,QWORD PTR [R13+216]
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4599b2]
            mov RDI,RBX
            call .L_42f620

            test BPL,BPL
            mov QWORD PTR [RSP],0
            jne .L_42a3b1
.L_42a2e7:

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_42a408
.L_42a303:

            movdqu XMM0,XMMWORD PTR [R15]
            mov EAX,4294963391
            lea RDX,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+66],AX
            mov RCX,QWORD PTR [RSP]
            mov R8,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+68],AL
            call .L_42e6e0

            test EAX,EAX
            jne .L_42a3f1
.L_42a33f:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42a432

            add RSP,248
.L_42a35d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a370:

            xor ESI,ESI
            mov RDI,RBX
            lea R12,QWORD PTR [R13+216]
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4599ad]
            mov RDI,RBX
            call .L_42f620

            lea RAX,QWORD PTR [RIP+.L_42a080]
            test BPL,BPL
            mov QWORD PTR [RSP],RAX
            je .L_42a2e7
.L_42a3b1:

            mov RDI,RBX
            call .L_42f8d0

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_42a408

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],18
            mov BYTE PTR [RSP+31],BPL
            call .L_403d30

            test EAX,EAX
            je .L_42a418
.L_42a3f1:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP]
            jmp .L_42a33f
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a408:

            mov EAX,3
            jmp .L_42a33f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a418:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,BPL
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_42a3f1

            jmp .L_42a303
.L_42a432:

            call __stack_chk_fail@PLT
.L_42a437:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a440:

            test R8D,R8D
            mov RAX,RDX
            jne .L_42a44e

            cmp BYTE PTR [RSI+1],68
            je .L_42a450
.L_42a44e:

            ret 
.L_42a450:

            mov R8,QWORD PTR [RDI+128]
            test R8,R8
            je .L_42a44e

            mov RDX,QWORD PTR [RDI+136]
            mov RSI,RCX
            mov RDI,RAX
            jmp R8
.L_42a46c:

            nop
            nop
            nop
            nop
.L_42a470:

            test BYTE PTR [RSI],48
            jne .L_42a47b

            cmp BYTE PTR [RSI+1],2
            je .L_42a480
.L_42a47b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42a480:

            jmp .L_42a0b0
.L_42a485:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a490:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            sub RSP,16
.L_42a49b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            mov RBX,RAX
            mov RAX,QWORD PTR [RAX+8]
            xor EDX,EDX
            mov BYTE PTR [RSP+6],8
            test RAX,RAX
            je .L_42a4d7

            nop
            nop
            nop
            nop
            nop
.L_42a4c8:

            mov RAX,QWORD PTR [RAX+24]
            add EDX,1
            test RAX,RAX
            jne .L_42a4c8

            shl EDX,4
.L_42a4d7:

            lea RSI,QWORD PTR [RSP+6]
            mov BYTE PTR [RSP+7],DL
            mov RDI,RBP
            mov EDX,2
            call .L_403d30

            test EAX,EAX
            mov R12D,EAX
            jne .L_42a500

            mov RBX,QWORD PTR [RBX+8]
            test RBX,RBX
            jne .L_42a529

            nop
            nop
            nop
.L_42a500:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_42a542

            add RSP,16
.L_42a517:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a520:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_42a500
.L_42a529:

            mov EDX,16
            mov RSI,RBX
            mov RDI,RBP
            call .L_403d30

            test EAX,EAX
            je .L_42a520

            mov R12D,EAX
            jmp .L_42a500
.L_42a542:

            call __stack_chk_fail@PLT
.L_42a547:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a550:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,16
.L_42a55f:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+2]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            movzx EDX,BYTE PTR [RSP+2]
            mov R12,RAX
            xor EAX,EAX
            mov WORD PTR [RSP+5],AX
            mov BYTE PTR [RSP+7],0
            mov BYTE PTR [RSP+3],16
            test DL,DL
            je .L_42a6f0

            lea ECX,DWORD PTR [RDX-1]
            mov RAX,R12
            mov RDX,RCX
            shl RDX,4
            add RDX,RCX
            xor ECX,ECX
            lea RSI,QWORD PTR [R12+RDX*8+136]
.L_42a5c0:

            movzx EDX,BYTE PTR [RAX+26]
            and EDX,7
            cmp DL,7
            sete DL
            add RAX,136
            add ECX,EDX
            cmp RAX,RSI
            jne .L_42a5c0

            lea ECX,DWORD PTR [RCX+RCX*2]
.L_42a5dd:

            lea RSI,QWORD PTR [RSP+3]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+4],CL
            call .L_403d30

            test EAX,EAX
            mov R14D,EAX
            jne .L_42a610

            xor R13D,R13D
            cmp BYTE PTR [RSP+2],0
            lea RBP,QWORD PTR [RSP+5]
            jne .L_42a6b9

            nop
            nop
            nop
.L_42a610:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_42a6f7

            add RSP,16
.L_42a62b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a638:

            mov EDI,DWORD PTR [R12+92]
            cmp EDI,1
            jbe .L_42a6e0

            xor EDX,EDX
            mov R8D,1
            jmp .L_42a652
.L_42a650:

            mov EDX,ECX
.L_42a652:

            lea ECX,DWORD PTR [RDX+1]
            mov ESI,R8D
            shl ESI,CL
            cmp ESI,EDI
            jb .L_42a650

            add EDX,5
            shl EDX,11
.L_42a664:

            movzx ECX,WORD PTR [R12+24]
            shr AL,3
            mov RSI,RBP
            and EAX,15
            mov RDI,RBX
            mov BYTE PTR [RSP+7],AL
            and CX,511
            or EDX,ECX
            rol DX,8
            mov WORD PTR [RSP+5],DX
            mov EDX,3
            call .L_403d30

            test EAX,EAX
            jne .L_42a6d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42a6a0:

            movzx EAX,BYTE PTR [RSP+2]
            add R13D,1
            add R12,136
            cmp EAX,R13D
            jle .L_42a610
.L_42a6b9:

            movzx EAX,BYTE PTR [R12+26]
            mov EDX,EAX
            and EDX,7
            cmp DL,7
            jne .L_42a6a0

            jmp .L_42a638
          .byte 0x66
          .byte 0x90
.L_42a6d0:

            mov R14D,EAX
            jmp .L_42a610
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a6e0:

            mov EDX,8192
            jmp .L_42a664
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a6f0:

            xor ECX,ECX
            jmp .L_42a5dd
.L_42a6f7:

            call __stack_chk_fail@PLT
.L_42a6fc:

            nop
            nop
            nop
            nop
.L_42a700:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            sub RSP,392
.L_42a717:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+376],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+32],RDI
            mov QWORD PTR [RSP+8],RDX
            call .L_430af0

            cmp BYTE PTR [R14+1],0
            mov R15,RAX
            movzx EAX,WORD PTR [R13+60]
            je .L_42a80b

            lea R12D,DWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RSP+59]
            lea RBP,QWORD PTR [RIP+.L_4599c4]
            xor EBX,EBX
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+60]
            mov QWORD PTR [RSP+40],RAX
            lea RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+24],RAX
.L_42a780:

            lea ESI,DWORD PTR [R12+RBX*1]
            mov RCX,QWORD PTR [RSP]
            mov EDX,1
            mov RDI,R13
            movzx ESI,SI
            call .L_403860

            cmp AX,1
            jne .L_42aad0

            cmp BYTE PTR [RSP+59],19
            ja .L_42aad0

            movzx EAX,BYTE PTR [RSP+59]
            movsxd RAX,DWORD PTR [RBP+RAX*4]
            add RAX,RBP
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a7c0:

            mov RSI,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R15+2568]
            mov R10D,10501
            mov WORD PTR [RSP+112],R10W
            call .L_420070
.L_42a7dd:

            movzx EAX,BYTE PTR [RSP+113]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
.L_42a7e8:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+8]
            call .L_403d30

            test EAX,EAX
            jne .L_42a80d
.L_42a7fb:

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42a780
.L_42a80b:

            xor EAX,EAX
.L_42a80d:

            mov RCX,QWORD PTR [RSP+376]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42aada

            add RSP,392
.L_42a82b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a840:

            mov RCX,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            mov ESI,9225
            lea RDI,QWORD PTR [R15+1560]
            movups XMMWORD PTR [RCX+2],XMM0
            mov DWORD PTR [RCX+34],0
            movups XMMWORD PTR [RCX+18],XMM0
            mov WORD PTR [RSP+64],SI
            mov RSI,RCX
            call .L_407d50

            movzx EAX,BYTE PTR [RSP+65]
            lea EDX,DWORD PTR [RAX+2]
            movzx EDX,DL
            nop
            nop
            nop
            nop
.L_42a880:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_403d30

            test EAX,EAX
            jne .L_42a80d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42a780

            jmp .L_42a80b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a8b0:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+32]
            call .L_42a490

            test EAX,EAX
            jne .L_42a80d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42a780

            jmp .L_42a80b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a8e0:

            lea RDI,QWORD PTR [R15+2568]
            xor R8D,R8D
            mov WORD PTR [RSP+64],R8W
            call .L_4160f0

            mov RDX,QWORD PTR [RAX]
            mov R9D,2054
            mov QWORD PTR [RSP+64],RDX
            movzx EAX,WORD PTR [RAX+8]
            mov EDX,10
            mov WORD PTR [RSP+64],R9W
            mov WORD PTR [RSP+72],AX
            jmp .L_42a880
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42a920:

            mov EDI,4294967047
            mov RSI,QWORD PTR [RSP+24]
            xor EDX,EDX
            mov WORD PTR [RSP+112],DI
            lea RDI,QWORD PTR [R15+2568]
            call .L_416630

            jmp .L_42a7dd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42a948:

            mov RSI,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R15+2568]
            mov R11D,2564
            mov WORD PTR [RSP+64],R11W
            call .L_41f1b0

            mov EDX,12
            jmp .L_42a880
          .byte 0x90
.L_42a970:

            test BYTE PTR [R15+2624],8
            jne .L_42a7fb

            lea RDI,QWORD PTR [R15+2520]
            mov EAX,1027
            mov WORD PTR [RSP+64],AX
            call .L_4123a0

            mov EDX,274877907
            mul EDX
            mov ECX,EDX
            mov EAX,EDX
            shr ECX,6
            shr EAX,14
            mov EDX,ECX
            and EAX,65280
            shl ECX,24
            shl EDX,8
            and EDX,16711680
            or EAX,EDX
            or EAX,ECX
            jmp .L_42aac1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a9c8:

            mov EAX,258
            mov EDX,3
            mov WORD PTR [RSP+64],AX
            movzx EAX,BYTE PTR [R15+2624]
            mov BYTE PTR [RSP+66],AL
            jmp .L_42a880
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42a9f0:

            lea RDI,QWORD PTR [R15+2568]
            mov EAX,513
            mov WORD PTR [RSP+64],AX
            call .L_415a90

            rol AX,8
            mov EDX,4
            mov WORD PTR [RSP+66],AX
            jmp .L_42a880
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42aa20:

            mov EAX,2048
            mov EDX,10
            mov WORD PTR [RSP+112],AX
            mov RAX,QWORD PTR [R15+1656]
            mov QWORD PTR [RSP+114],RAX
            jmp .L_42a7e8
.L_42aa40:

            mov EDX,273
            mov BYTE PTR [RSP+114],0
            mov WORD PTR [RSP+112],DX
            mov EDX,3
            jmp .L_42a7e8
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42aa60:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+32]
            call .L_42a550

            test EAX,EAX
            jne .L_42a80d

            movzx EAX,BYTE PTR [R14+1]
            add EBX,1
            cmp EAX,EBX
            ja .L_42a780

            jmp .L_42a80b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42aa90:

            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [R15+2568]
            mov DWORD PTR [RSP+60],0
            call .L_420ac0

            test EAX,EAX
            jne .L_42a7fb

            mov EAX,1043
            mov WORD PTR [RSP+64],AX
            mov EAX,DWORD PTR [RSP+60]
            bswap EAX
.L_42aac1:

            mov DWORD PTR [RSP+66],EAX
            mov EDX,6
            jmp .L_42a880
          .byte 0x90
.L_42aad0:

            mov EAX,2
            jmp .L_42a80d
.L_42aada:

            call __stack_chk_fail@PLT
.L_42aadf:

            nop
.L_42aae0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov R12,RDX
            mov RBP,RDI
            sub RSP,248
.L_42aafd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            cmp BYTE PTR [RBX+1],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+30],DX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_42ab60
.L_42ab35:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ac90

            add RSP,248
.L_42ab53:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_42ab60:

            movzx ESI,WORD PTR [R12+60]
            lea R14,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,R12
            mov R15,RAX
            mov RCX,R14
            call .L_403860

            cmp AX,2
            jne .L_42ab35

            cmp BYTE PTR [RSP+30],18
            jne .L_42ab35

            cmp BYTE PTR [RSP+31],19
            ja .L_42ab35

            test BYTE PTR [RBX],48
            lea RAX,QWORD PTR [R15+216]
            mov QWORD PTR [RSP+8],RAX
            jne .L_42abb6

            mov RCX,R13
            mov RDX,RBX
            mov ESI,68
            mov RDI,RAX
            call .L_42e970
.L_42abb6:

            lea RBX,QWORD PTR [RSP+80]
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4599b7]
            mov RDI,RBX
            call .L_42f620

            cmp BYTE PTR [RSP+31],0
            je .L_42abf5

            mov RDI,RBX
            call .L_42f8d0
.L_42abf5:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov EDX,2
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_42ab35

            movdqu XMM0,XMMWORD PTR [R13+16]
            mov EAX,4294963391
            mov RCX,R14
            mov WORD PTR [RSP+66],AX
            mov RDX,RBX
            mov RSI,R12
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R15+24]
            mov RDI,RBP
            mov BYTE PTR [RSP+68],AL
            call .L_42a700

            test EAX,EAX
            jne .L_42ac73

            movzx EAX,BYTE PTR [RSP+208]
            cmp AX,WORD PTR [RBX+58]
            je .L_42ac80
.L_42ac54:

            mov RDI,QWORD PTR [RSP+8]
            lea RDX,QWORD PTR [RSP+32]
            xor ECX,ECX
            mov R8,RBP
            mov RSI,RBX
            call .L_42e6e0

            test EAX,EAX
            je .L_42ab35
.L_42ac73:

            mov RDI,RBX
            call .L_4033b0

            jmp .L_42ab35
.L_42ac80:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403420

            jmp .L_42ac54
.L_42ac90:

            call __stack_chk_fail@PLT
.L_42ac95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42aca0:

            jmp .L_42aae0
.L_42aca5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42acb0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            mov R12,RDI
            sub RSP,232
.L_42accd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            call .L_430af0

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+14],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_42ad15

            cmp BYTE PTR [RBP+1],2
            je .L_42ad40
.L_42ad15:

            mov RAX,QWORD PTR [RSP+216]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42adf9

            add RSP,232
.L_42ad33:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_42ad40:

            movzx ESI,WORD PTR [R13+60]
            lea RBX,QWORD PTR [RSP+14]
            mov EDX,2
            mov RDI,R13
            mov R14,RAX
            mov RCX,RBX
            call .L_403860

            cmp AX,2
            jne .L_42ad15

            cmp BYTE PTR [RSP+14],18
            jne .L_42ad15

            cmp BYTE PTR [RSP+15],19
            ja .L_42ad15

            lea R15,QWORD PTR [RSP+64]
            mov RSI,RBP
            add R14,216
            mov RDI,R15
            call .L_42fa70

            mov RDI,R15
            call .L_42f8d0

            mov EDX,2
            mov RSI,R15
            mov RDI,R14
            call .L_42d7b0

            test RAX,RAX
            mov RBP,RAX
            je .L_42ad15

            mov RCX,RBX
            mov RDX,RAX
            mov RSI,R13
            mov RDI,R12
            call .L_42a700

            test EAX,EAX
            jne .L_42adec

            movzx EAX,BYTE PTR [RSP+192]
            cmp AX,WORD PTR [RBP+58]
            je .L_42adfe
.L_42adcf:

            lea RDX,QWORD PTR [RSP+16]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBP
            mov RDI,R14
            call .L_42e6e0

            test EAX,EAX
            je .L_42ad15
.L_42adec:

            mov RDI,RBP
            call .L_4033b0

            jmp .L_42ad15
.L_42adf9:

            call __stack_chk_fail@PLT
.L_42adfe:

            sub EAX,1
            mov RDI,RBP
            movzx ESI,AX
            call .L_403420

            jmp .L_42adcf
.L_42ae0e:

            nop
            nop
.L_42ae10:

            jmp .L_42acb0
.L_42ae15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ae20:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RSI
            push RBP
            push RBX
            mov EBP,ECX
            sub RSP,248
.L_42ae39:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_4599bc]
            mov RDI,RBX
            call .L_42f620

            test BPL,BPL
            jne .L_42af30

            lea R12,QWORD PTR [R13+216]
            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_42af28
.L_42aebf:

            movdqu XMM0,XMMWORD PTR [R14]
            mov EAX,4294963391
            lea RDX,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+66],AX
            xor R8D,R8D
            xor ECX,ECX
            movaps XMMWORD PTR [RSP+48],XMM0
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,RBX
            mov RDI,R12
            mov BYTE PTR [RSP+68],AL
            call .L_42e6e0

            test EAX,EAX
            jne .L_42af77
.L_42aef9:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42afa8

            add RSP,248
.L_42af17:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42af28:

            mov EAX,3
            jmp .L_42aef9
          .byte 0x90
.L_42af30:

            lea R12,QWORD PTR [R13+216]
            mov RDI,RBX
            call .L_42f8d0

            mov RSI,RBX
            mov EDX,2
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_42af28

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],18
            mov BYTE PTR [RSP+31],BPL
            call .L_403d30

            test EAX,EAX
            je .L_42af90
.L_42af77:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42aef9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42af90:

            movzx EDX,BPL
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_42af77

            jmp .L_42aebf
.L_42afa8:

            call __stack_chk_fail@PLT
.L_42afad:

            nop
            nop
            nop
.L_42afb0:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDX
            sub RSP,40
.L_42afc7:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            test BYTE PTR [R15],48
            mov WORD PTR [RSP+22],DX
            jne .L_42aff0

            cmp BYTE PTR [R15+1],2
            je .L_42b018
.L_42aff0:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42b0da

            add RSP,40
.L_42b008:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42b018:

            movzx ESI,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,RBX
            mov R14,RAX
            call .L_403860

            cmp AX,2
            jne .L_42aff0

            cmp BYTE PTR [RSP+22],18
            jne .L_42aff0

            movzx EAX,BYTE PTR [RSP+23]
            cmp AL,19
            ja .L_42aff0

            movzx EDX,WORD PTR [RBX+60]
            test AL,AL
            lea R13D,DWORD PTR [RDX+2]
            je .L_42b0b4

            lea RAX,QWORD PTR [RSP+21]
            movzx R13D,R13W
            xor R12D,R12D
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [R14+1560]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_42b083
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b078:

            add R12D,1
            cmp R12B,BYTE PTR [RSP+23]
            jae .L_42b0b4
.L_42b083:

            mov RCX,QWORD PTR [RSP]
            mov EDX,1
            mov ESI,R13D
            mov RDI,RBX
            call .L_403860

            cmp AX,1
            jne .L_42aff0

            cmp BYTE PTR [RSP+21],9
            jne .L_42b078

            mov RDI,QWORD PTR [RSP+8]
            call .L_407de0

            jmp .L_42b078
.L_42b0b4:

            test BYTE PTR [R15],48
            jne .L_42aff0

            lea RDI,QWORD PTR [R14+216]
            mov RCX,RBP
            mov RDX,R15
            mov ESI,68
            call .L_42e970

            jmp .L_42aff0
.L_42b0da:

            call __stack_chk_fail@PLT
.L_42b0df:

            nop
.L_42b0e0:

            jmp .L_42afb0
.L_42b0e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b0f0:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RDI,RAX
            call .L_401410

            mov RDI,RBX
            call .L_430ac0

            pop RBX
            mov RDI,RAX
            jmp .L_401420
.L_42b112:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b120:

            mov BYTE PTR [RDI],0
            jmp .L_42b0f0
.L_42b125:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b130:

            push RBX
            mov EBX,ESI
            mov BYTE PTR [RDI],SIL
            call .L_430ac0

            movzx ESI,BL
            mov RDI,RAX
            pop RBX
            jmp .L_4013c0
.L_42b147:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b150:

            push RBX
            sub RSP,16
.L_42b155:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test BYTE PTR [RSI+127],32
            jne .L_42b1c0

            mov RBX,RSP
            lea RAX,QWORD PTR [RSI+7]
            lea R8,QWORD PTR [RSI-1]
            mov RDX,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b180:

            movzx ECX,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],CL
            cmp RAX,R8
            jne .L_42b180

            call .L_430ac0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4013e0
.L_42b1a3:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42b1d5

            add RSP,16
.L_42b1b7:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b1c0:

            movzx EBX,WORD PTR [RSI+24]
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBX
            call .L_4013d0

            jmp .L_42b1a3
.L_42b1d5:

            call __stack_chk_fail@PLT
.L_42b1da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42b1e0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_42b1eb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            cmp BYTE PTR [RSP+7],0
            je .L_42b260

            mov RBX,RAX
            xor EBP,EBP
            jmp .L_42b235
          .byte 0x90
.L_42b220:

            cmp AL,1
            je .L_42b244
.L_42b224:

            add EBP,1
            add RBX,136
            cmp BYTE PTR [RSP+7],BPL
            jbe .L_42b260
.L_42b235:

            movzx EAX,BYTE PTR [RBX+26]
            and EAX,7
            lea EDX,DWORD PTR [RAX-6]
            cmp DL,1
            ja .L_42b220
.L_42b244:

            test BYTE PTR [RBX+127],64
            je .L_42b224

            mov RSI,RBX
            mov RDI,R12
            call .L_42b150

            test EAX,EAX
            jne .L_42b262

            and BYTE PTR [RBX+127],191
            jmp .L_42b224
          .byte 0x90
.L_42b260:

            xor EAX,EAX
.L_42b262:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42b27b

            add RSP,16
.L_42b276:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_42b27b:

            call __stack_chk_fail@PLT
.L_42b280:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            or BYTE PTR [RSI+127],64
            cmp BYTE PTR [RDI],0
            jne .L_42b2a8

            call .L_42b1e0

            test EAX,EAX
            je .L_42b2c0

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42b2a8:

            mov RBX,RSI
            call .L_42b150

            test EAX,EAX
            jne .L_42b2e0

            and BYTE PTR [RBX+127],191
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_42b2c0:

            mov RDI,RBP
            mov BYTE PTR [RBP],1
            call .L_430ac0

            add RSP,8
            mov ESI,1
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_4013c0
          .byte 0x90
.L_42b2e0:

            mov RDI,RBP
            mov BYTE PTR [RBP],0
            call .L_430ac0

            add RSP,8
            xor ESI,ESI
            mov RDI,RAX
            pop RBX
            pop RBP
            jmp .L_4013c0
.L_42b2fc:

            nop
            nop
            nop
            nop
.L_42b300:

            movzx EAX,WORD PTR [RSI+126]
            push RBX
            mov RBX,RSI
            and AX,8191
            jne .L_42b31b

            call .L_42b280

            movzx EAX,WORD PTR [RBX+126]
            and AX,8191
.L_42b31b:

            movzx EDX,WORD PTR [RBX+126]
            add EAX,1
            and AX,8191
            and DX,57344
            or EAX,EDX
            mov WORD PTR [RBX+126],AX
            pop RBX
            ret 
.L_42b333:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b340:

            push RBP
            push RBX
            sub RSP,24
.L_42b346:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RSI+127]
            test AL,64
            jne .L_42b3d0

            test AL,32
            mov RBX,RDI
            jne .L_42b3e0

            mov RBP,RSP
            lea RAX,QWORD PTR [RSI+7]
            lea RCX,QWORD PTR [RSI-1]
            mov RDX,RBP
            nop
            nop
            nop
            nop
            nop
.L_42b378:

            movzx EDI,BYTE PTR [RAX]
            sub RAX,1
            add RDX,1
            mov BYTE PTR [RDX-1],DIL
            cmp RAX,RCX
            jne .L_42b378

            mov RDI,RBX
            call .L_430ac0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401400
.L_42b39f:

            test EAX,EAX
            jne .L_42b3b0

            cmp BYTE PTR [RBX],0
            je .L_42b3f8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b3b0:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42b41e

            add RSP,24
.L_42b3c4:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b3d0:

            and EAX,4294967231
            mov BYTE PTR [RSI+127],AL
            jmp .L_42b3b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b3e0:

            movzx EBP,WORD PTR [RSI+24]
            call .L_430ac0

            mov RDI,RAX
            mov ESI,EBP
            call .L_4013f0

            jmp .L_42b39f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b3f8:

            mov RDI,RBX
            call .L_42b1e0

            test EAX,EAX
            jne .L_42b3b0

            mov RDI,RBX
            mov BYTE PTR [RBX],1
            call .L_430ac0

            mov ESI,1
            mov RDI,RAX
            call .L_4013c0

            jmp .L_42b3b0
.L_42b41e:

            call __stack_chk_fail@PLT
.L_42b423:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b430:

            movzx EAX,WORD PTR [RSI+126]
            mov EDX,EAX
            and DX,8191
            je .L_42b456

            add DX,8191
            and AX,57344
            and DX,8191
            or EAX,EDX
            test DX,DX
            mov WORD PTR [RSI+126],AX
            je .L_42b460
.L_42b456:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b460:

            jmp .L_42b340
.L_42b465:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b470:

            and WORD PTR [RSI+126],57344
            jmp .L_42b340
.L_42b47b:

            nop
            nop
            nop
            nop
            nop
.L_42b480:

            movzx EAX,BYTE PTR [RSI+127]
            mov ECX,EAX
            shr CL,5
            and ECX,1
            cmp DL,CL
            je .L_42b4a6

            test WORD PTR [RSI+126],8191
            jne .L_42b4b0

            and EDX,1
            and EAX,4294967263
            shl EDX,5
            or EDX,EAX
            mov BYTE PTR [RSI+127],DL
.L_42b4a6:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42b4b0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov EBX,EDX
            mov R12,RDI
            call .L_42b340

            mov EDX,EBX
            movzx EBX,BYTE PTR [RBP+127]
            mov RSI,RBP
            and EDX,1
            mov RDI,R12
            shl EDX,5
            and EBX,4294967263
            or EDX,EBX
            mov BYTE PTR [RBP+127],DL
            pop RBX
            pop RBP
            pop R12
            jmp .L_42b280
.L_42b4e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b4f0:

            mov DWORD PTR [RSI],27
            mov BYTE PTR [RSI+4],8
            mov RAX,QWORD PTR [RDI+1656]
            mov QWORD PTR [RSI+5],RAX
            xor EAX,EAX
            ret 
.L_42b508:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b510:

            push RBP
            push RBX
            mov RBP,RDI
            add RDI,7520
            sub RSP,24
.L_42b520:

            lea R8,QWORD PTR [RSP+6]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_426a70

            test EAX,EAX
            mov EBX,EAX
            jne .L_42b559

            lea RDI,QWORD PTR [RBP+2568]
            call .L_415a90

            cmp WORD PTR [RSP+6],AX
            mov EAX,4
            cmove EBX,EAX
.L_42b559:

            mov EAX,EBX
            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42b572

            add RSP,24
.L_42b56f:

            pop RBX
            pop RBP
            ret 
.L_42b572:

            call __stack_chk_fail@PLT
.L_42b577:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b580:

            push R14
            push R13
            mov EDX,1
            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_42b590:

            mov RBX,RDI
            lea R12,QWORD PTR [RBP+12720]
            lea R13,QWORD PTR [RBX+216]
            lea R14,QWORD PTR [RBX+2568]
            call .L_4100f0

            lea RAX,QWORD PTR [RIP+.L_676890]
            mov RSI,RBP
            mov RDI,R13
            mov QWORD PTR [RBX],RAX
            call .L_42f020

            lea RDI,QWORD PTR [RBX+408]
            mov RSI,RBP
            call .L_437e50

            lea RDI,QWORD PTR [RBX+696]
            mov RSI,RBP
            call .L_438f60

            mov RDI,R12
            call .L_430ad0

            lea RDI,QWORD PTR [RBX+968]
            lea RSI,QWORD PTR [RAX+104]
            call .L_4108b0

            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+1048]
            mov WORD PTR [RBX+1040],AX
            call .L_404440

            mov RDI,R12
            lea R12,QWORD PTR [RBX+1368]
            call .L_430ac0

            mov RAX,OFFSET .L_43a810
            lea RDI,QWORD PTR [RBX+1080]
            mov RSI,RBP
            mov DWORD PTR [RBX+1064],0
            mov QWORD PTR [RBX+1056],RAX
            lea RAX,QWORD PTR [RBX+1056]
            mov QWORD PTR [RBX+1072],RAX
            call .L_409e20

            lea RDI,QWORD PTR [RBX+1208]
            mov RSI,RBP
            call .L_409f70

            lea RDI,QWORD PTR [RBX+1360]
            call .L_40f470

            mov RSI,RBP
            mov RDI,R12
            call .L_412900

            lea RDI,QWORD PTR [RBX+1552]
            mov RSI,RBP
            call .L_43b9a0

            lea RDI,QWORD PTR [RBX+1560]
            mov RSI,RBP
            call .L_405840

            lea RDI,QWORD PTR [RBX+2256]
            mov RSI,RBP
            call .L_43d4c0

            mov RSI,RBP
            mov RDI,R14
            call .L_41af70

            lea RDI,QWORD PTR [RBX+7248]
            mov RSI,RBP
            call .L_4295d0

            lea RDI,QWORD PTR [RBX+7520]
            mov RSI,RBP
            call .L_4274a0

            lea RDI,QWORD PTR [RBX+7976]
            mov RSI,RBP
            call .L_42a130

            lea RDI,QWORD PTR [RBX+8128]
            mov RSI,RBP
            mov BYTE PTR [RBX+8120],0
            call .L_431c50

            lea RDI,QWORD PTR [RBX+8504]
            mov RSI,RBP
            call .L_4354e0

            lea RDI,QWORD PTR [RBX+9784]
            mov RSI,RBP
            call .L_42fd50

            lea RDI,QWORD PTR [RBX+10080]
            mov RSI,RBP
            call .L_436580

            lea RDI,QWORD PTR [RBX+10232]
            mov RSI,RBP
            call .L_42c780

            mov RDI,R14
            call .L_415f60

            lea RDI,QWORD PTR [RBX+10304]
            mov RDX,R13
            mov RSI,RAX
            call .L_42b9a0

            lea RDI,QWORD PTR [RBX+10368]
            mov RSI,RBP
            call .L_40b960

            lea RDI,QWORD PTR [RBX+10528]
            mov RSI,RBP
            call .L_40c8a0

            lea RDI,QWORD PTR [RBX+10688]
            mov RSI,RBP
            call .L_411000

            lea RDI,QWORD PTR [RBX+11232]
            mov RSI,RBP
            call .L_42c270

            lea RDI,QWORD PTR [RBX+11264]
            mov RSI,RBP
            call .L_42c680

            lea RDI,QWORD PTR [RBX+11296]
            mov RSI,RBP
            call .L_43afa0

            lea RDI,QWORD PTR [RBX+11360]
            mov RSI,RBP
            call .L_43f680

            lea RDI,QWORD PTR [RBX+11440]
            mov RSI,RBP
            call .L_43b330

            lea RSI,QWORD PTR [RIP+.L_459a40]
            mov RDI,R12
            call .L_412ac0

            lea RAX,QWORD PTR [RIP+.L_42b980]
            mov QWORD PTR [RBX+344],RBX
            mov QWORD PTR [RBX+352],RAX
            pop RBX
.L_42b7e5:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42b7ed:

            nop
            nop
            nop
.L_42b7f0:

            cmp BYTE PTR [RDI+8120],0
            je .L_42b800

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42b800:

            push RBX

            mov RBX,RDI
            call .L_430ad0

            mov RSI,RBX
            mov RDI,RAX
            call .L_40db00

            lea RDI,QWORD PTR [RBX+2256]
            call .L_43d660

            lea RDI,QWORD PTR [RBX+216]
            mov ESI,61631
            call .L_42d680

            lea RDI,QWORD PTR [RBX+968]
            call .L_439d70

            mov RDI,RBX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24560]
            call .L_42c090

            lea RDI,QWORD PTR [RBX+11232]
            call .L_42c2a0

            lea RDI,QWORD PTR [RBX+2568]
            call .L_414f40

            mov BYTE PTR [RBX+8120],1
            xor EAX,EAX
            pop RBX

            ret 
.L_42b874:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b880:

            push RBX

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+216]
            call .L_42edd0

            lea RDI,QWORD PTR [RBX+968]
            call .L_43a590

            mov RDI,RBX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24560]
            call .L_42c0c0

            lea RDI,QWORD PTR [RBX+11232]
            call .L_42c2e0

            lea RDI,QWORD PTR [RBX+2568]
            call .L_415390

            lea RDI,QWORD PTR [RBX+2256]
            call .L_43d6a0

            mov RDI,RBX
            call .L_430ad0

            mov RSI,RBX
            mov RDI,RAX
            call .L_40db50

            mov RDI,RBX
            call .L_410820

            mov RDI,RBX
            call .L_410550

            lea RDI,QWORD PTR [RBX+8504]
            mov BYTE PTR [RBX+8120],0
            call .L_435670

            xor EAX,EAX
            pop RBX

            ret 
.L_42b90e:

            nop
            nop
.L_42b910:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+2568]
            mov RBP,RSI
            sub RSP,8
            mov RDI,RBX
            call .L_41ad60

            test AL,AL
            jne .L_42b938

            mov RDI,RBP
            call .L_40f150

            test AL,AL
            je .L_42b970
.L_42b938:

            lea RSI,QWORD PTR [RBP+16]
            mov RDI,RBX
            call .L_41ad60

            test AL,AL
            jne .L_42b954
.L_42b948:

            mov RDI,RBP
            call .L_40ee30

            test AL,AL
            jne .L_42b960
.L_42b954:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42b960:

            add RSP,8
            lea RDI,QWORD PTR [RBP+16]
            pop RBX
            pop RBP
            jmp .L_40ee30
          .byte 0x90
.L_42b970:

            mov RDI,RBP
            call .L_40f170

            test AL,AL
            jne .L_42b938

            jmp .L_42b948
.L_42b97e:

            nop
            nop
.L_42b980:

            sub RSP,8
            mov RDI,RDX
            call .L_42b910

            cmp AL,1
            sbb EAX,EAX
            add RSP,8
            and EAX,31
            ret 
.L_42b998:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42b9a0:

            lea RAX,QWORD PTR [RIP+.L_4588d2]
            mov QWORD PTR [RDI+16],RDI
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_42baf0]
            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+56],RDX
            mov QWORD PTR [RDI+8],RAX
            ret 
.L_42b9da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42b9e0:

            cmp QWORD PTR [RDI+32],0
            je .L_42b9f0

            mov EAX,24
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42b9f0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+56]
            mov RBP,RDX
            mov RSI,RBX
            call .L_42d6f0

            mov QWORD PTR [RBX+32],R12
            mov QWORD PTR [RBX+40],RBP
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
.L_42ba18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ba20:

            cmp QWORD PTR [RDI+32],0
            je .L_42ba48

            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+56]
            mov RSI,RBX
            call .L_42d730

            mov QWORD PTR [RBX+32],0
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ba48:

            mov EAX,24
            ret 
.L_42ba4e:

            nop
            nop
.L_42ba50:

            cmp QWORD PTR [RDI+32],0
            setne AL
            ret 
.L_42ba59:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ba60:

            cmp QWORD PTR [RDI+32],0
            je .L_42bae0

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RDX
            mov RBX,RCX
            sub RSP,8
.L_42ba7d:

            movzx ESI,WORD PTR [RDX+58]
            call .L_404020

            test RAX,RAX
            mov R12,RAX
            je .L_42bad0

            movzx EAX,BYTE PTR [R13+128]
            movzx ESI,WORD PTR [R12+60]
            mov RDI,R12
            sub ESI,EAX
            movzx ESI,SI
            call .L_403810

            movzx ESI,WORD PTR [RBX+30]
            mov RCX,QWORD PTR [RBP+40]
            mov RDI,R12
            movzx EDX,WORD PTR [RBX+34]
            mov RAX,QWORD PTR [RBP+32]
            add RSP,8
.L_42bac0:

            pop RBX
            pop RBP
            rol SI,8
            pop R12
            pop R13
            movzx ESI,SI
            jmp RAX
          .byte 0x90
.L_42bad0:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bae0:

            ret 
.L_42bae2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42baf0:

            jmp .L_42ba60
.L_42baf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bb00:

            test R8D,R8D
            je .L_42bb10

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bb10:

            jmp .L_42ba60
.L_42bb15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bb20:

            push RBX
            mov EAX,EDX
            mov RBX,RSI
            pxor XMM0,XMM0
            sub RSP,80
.L_42bb2e:

            mov RDX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RDX
            xor EDX,EDX
            cmp QWORD PTR [RDI+32],0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_42bbe8

            rol AX,8
            cmp CX,61631
            mov R8,RDI
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RDI+48]
            mov RDI,QWORD PTR [RDI+56]
            movdqu XMM0,XMMWORD PTR [RSI]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI]
            mov WORD PTR [RSP+50],CX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+46],AX
            je .L_42bbd0

            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            call .L_42e6e0
.L_42bb9c:

            test EAX,EAX
            je .L_42bbb0
.L_42bba0:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_42bbb0:

            mov RBX,QWORD PTR [RSP+72]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42bbef

            add RSP,80
.L_42bbc4:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bbd0:

            lea RCX,QWORD PTR [RIP+.L_42bb00]
            mov RSI,RBX
            call .L_42e6e0

            jmp .L_42bb9c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bbe8:

            mov EAX,13
            jmp .L_42bba0
.L_42bbef:

            call __stack_chk_fail@PLT
.L_42bbf4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bc00:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+20]
            lea RBX,QWORD PTR [RDI+12]
            sub RSP,8
            nop
            nop
.L_42bc10:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42bc10

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42bc28:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bc30:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+36],0
            movups XMMWORD PTR [RDI+44],XMM0
            movups XMMWORD PTR [RDI+60],XMM0
            movups XMMWORD PTR [RDI+76],XMM0
            ret 
.L_42bc49:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bc50:

            push RBP
            lea RBP,QWORD PTR [RDI+36]
            push RBX
            lea RCX,QWORD PTR [RDI+44]
            sub RSP,8
            mov RAX,RBP
.L_42bc61:

            cmp BYTE PTR [RAX],0
            jne .L_42bc80

            add RAX,1
            cmp RCX,RAX
            jne .L_42bc61

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bc80:

            lea RDI,QWORD PTR [RSI+15288]
            mov RBX,RDX
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            mov RSI,RBP
            mov RDI,RBX
            mov QWORD PTR [RBX],RAX
            call .L_40f0a0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42bca9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bcb0:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov R12,RDI
            mov RBX,RDX
            sub RSP,8
.L_42bcc3:

            movzx EAX,WORD PTR [RDX]
            test AX,AX
            je .L_42bd30
.L_42bccb:

            sub EAX,1
            cmp AX,2
            ja .L_42bd18

            movzx EBP,AX
            movzx EAX,AX
            shl RAX,4
            lea RDI,QWORD PTR [R12+RAX*1+44]
            call .L_40ede0

            test AL,AL
            jne .L_42bd18

            add RBP,2
            xor EAX,EAX
            shl RBP,4
            movdqu XMM0,XMMWORD PTR [R12+RBP*1+12]
            movups XMMWORD PTR [R13],XMM0
            add WORD PTR [RBX],1
            add RSP,8
.L_42bd0a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bd18:

            mov EAX,23
.L_42bd1d:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42bd30:

            mov EAX,1
            mov WORD PTR [RDX],AX
            mov RDX,RCX
            call .L_42bc50

            mov EDX,EAX
            xor EAX,EAX
            cmp EDX,23
            jne .L_42bd1d

            movzx EAX,WORD PTR [RBX]
            jmp .L_42bccb
.L_42bd51:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42bd60:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,8
.L_42bd76:

            call .L_40ede0

            test AL,AL
            mov EDX,7
            jne .L_42bdd1

            lea RDI,QWORD PTR [RBP+15288]
            mov RSI,RBX
            call .L_41ad60

            test AL,AL
            jne .L_42bde0

            lea RBP,QWORD PTR [R12+44]
            xor R13D,R13D
.L_42bd9f:

            mov RDI,RBP
            call .L_40ede0

            test AL,AL
            jne .L_42be38

            mov RSI,RBX
            mov RDI,RBP
            call .L_40f2b0

            test AL,AL
            je .L_42be20

            add R13D,1
            add RBP,16
            cmp R13D,3
            jne .L_42bd9f

            mov EDX,3
.L_42bdd1:

            add RSP,8
.L_42bdd5:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_42bde0:

            lea RAX,QWORD PTR [R12+36]
            lea RDX,QWORD PTR [R12+44]
.L_42bdea:

            cmp BYTE PTR [RAX],0
            jne .L_42be20

            add RAX,1
            cmp RAX,RDX
            jne .L_42bdea

            mov RDI,RBX
            call .L_40f080

            mov RAX,QWORD PTR [RAX]
            xor EDX,EDX
            mov QWORD PTR [R12+36],RAX
            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42be20:

            add RSP,8
            mov EDX,24
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42be38:

            movsxd R13,R13D
            movdqu XMM0,XMMWORD PTR [RBX]
            add R13,2
            xor EDX,EDX
            shl R13,4
            movups XMMWORD PTR [R12+R13*1+12],XMM0
            jmp .L_42bdd1
.L_42be54:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42be60:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBP,RDX
            mov RBX,RSI
            sub RSP,8
.L_42be76:

            call .L_40ede0

            test AL,AL
            mov EDX,7
            jne .L_42becd

            lea RDI,QWORD PTR [RBX+15288]
            mov RSI,RBP
            xor R12D,R12D
            lea RBX,QWORD PTR [R13+44]
            call .L_41ad60

            test AL,AL
            jne .L_42bee0
.L_42be9e:

            mov RDI,RBX
            call .L_40ede0

            test AL,AL
            jne .L_42bec8

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            jne .L_42bf00

            add R12D,1
            add RBX,16
            cmp R12W,3
            jne .L_42be9e
.L_42bec8:

            mov EDX,23
.L_42becd:

            add RSP,8
.L_42bed1:

            mov EAX,EDX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bee0:

            mov RDI,RBP
            call .L_40f080

            mov RCX,QWORD PTR [R13+36]
            cmp QWORD PTR [RAX],RCX
            jne .L_42bec8

            mov QWORD PTR [R13+36],0
            xor EDX,EDX
            jmp .L_42becd
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42bf00:

            cmp R12W,2
            je .L_42bf42

            movzx EDX,R12W
            mov RAX,RDX
            add RDX,2
            add EAX,1
            shl RDX,4
            cdqe 
            add RAX,2
            shl RAX,4
            cmp R12W,1
            movdqu XMM0,XMMWORD PTR [R13+RAX*1+12]
            movups XMMWORD PTR [R13+RDX*1+12],XMM0
            je .L_42bf42

            movdqu XMM0,XMMWORD PTR [R13+76]
            movups XMMWORD PTR [R13+60],XMM0
.L_42bf42:

            lea RDI,QWORD PTR [R13+76]
            call .L_40edd0

            add RSP,8
.L_42bf4f:

            xor EDX,EDX
            pop RBX
            mov EAX,EDX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42bf5a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42bf60:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RDX
            mov RBX,RSI
            mov RBP,RDX
            sub RSP,8
            call .L_40ede0

            test AL,AL
            je .L_42bf90
.L_42bf7f:

            xor EAX,EAX
.L_42bf81:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42bf90:

            lea RDI,QWORD PTR [RBX+15288]
            mov RSI,RBP
            lea RBX,QWORD PTR [R12+44]
            lea R13,QWORD PTR [R12+92]
            call .L_41ad60

            test AL,AL
            jne .L_42bfd8
.L_42bfad:

            mov RDI,RBX
            call .L_40ede0

            test AL,AL
            jne .L_42bf7f

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f290

            test AL,AL
            jne .L_42bf81

            add RBX,16
            cmp RBX,R13
            jne .L_42bfad

            jmp .L_42bf7f
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42bfd8:

            mov RDI,RBP
            call .L_40f080

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R12+36],RAX
            sete AL
            add RSP,8
.L_42bfef:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42bff6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c000:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+104]
            lea RBX,QWORD PTR [RDI+96]
            sub RSP,8
            nop
            nop
.L_42c010:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42c010

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42c028:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c030:

            test BYTE PTR [RDI+127],32
            mov RAX,RSI
            jne .L_42c050

            mov RDX,QWORD PTR [RDI]
            mov DWORD PTR [RSI+8],2
            mov QWORD PTR [RSI],RDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c050:

            movzx EDX,WORD PTR [RDI+24]
            mov DWORD PTR [RSI+8],1
            mov WORD PTR [RSI],DX
            ret 
.L_42c05f:

            nop
.L_42c060:

            lea RAX,QWORD PTR [RIP+.L_42c180]
            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+48],0
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RDI+40]
            movups XMMWORD PTR [RDI+4],XMM0
            mov QWORD PTR [RDI+56],RAX
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
.L_42c08d:

            nop
            nop
            nop
.L_42c090:

            pxor XMM0,XMM0
            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],0
            movups XMMWORD PTR [RDI+4],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            call .L_401240

            lea RDI,QWORD PTR [RBX+40]
            mov EDX,10250
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_42c0bc:

            nop
            nop
            nop
            nop
.L_42c0c0:

            add RDI,40
            jmp .L_430c70
.L_42c0c9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c0d0:

            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            movups XMMWORD PTR [RDI+4],XMM0
            movups XMMWORD PTR [RDI+20],XMM0
            ret 
.L_42c0e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c0f0:

            lea EDX,DWORD PTR [RSI-11]
            xor EAX,EAX
            cmp DL,15
            ja .L_42c109

            movzx ESI,SIL
            sub ESI,11
            movsxd RSI,ESI
            movzx EAX,WORD PTR [RDI+RSI*2+4]
.L_42c109:

            ret 
.L_42c10b:

            nop
            nop
            nop
            nop
            nop
.L_42c110:

            push RBX
            mov RBX,RDI
            call .L_401460

            mov ESI,DWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RBX+40]
            and EAX,8191
            pop RBX
            lea EDX,DWORD PTR [RAX+6154]
            jmp .L_430d50
.L_42c131:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c140:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RDI,RAX
            call .L_402a50

            movzx EDX,BYTE PTR [RBX]
            lea RCX,QWORD PTR [RIP+.L_459af0]
            mov R8,RBX
            mov RDI,RAX
            and EDX,3
            mov ESI,DWORD PTR [RCX+RDX*4]
            lea RCX,QWORD PTR [RIP+.L_42c250]
            xor EDX,EDX
            call .L_405d20

            mov RDI,RBX
            pop RBX
            jmp .L_42c110
.L_42c17b:

            nop
            nop
            nop
            nop
            nop
.L_42c180:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402be0

            add RSP,8
            mov RDI,RAX
            jmp .L_42c140
.L_42c19a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c1a0:

            test RSI,RSI
            je .L_42c200

            movzx EAX,BYTE PTR [RSI]
            lea EDX,DWORD PTR [RAX-11]
            movzx EAX,DL
            cmp DL,15
            lea R8,QWORD PTR [RDI+RAX*2]
            movzx EAX,WORD PTR [R8+4]
            ja .L_42c229

            movzx ECX,BYTE PTR [RSI+1]
            cmp CL,127
            je .L_42c1f8

            cmp CL,181
            mov EDX,65535
            jl .L_42c1f8
.L_42c1cf:

            mov ECX,DWORD PTR [RDI]
            mov ESI,959
            shr ECX,2
            cmp ECX,959
            cmova ECX,ESI
            imul EAX,ECX
            add ECX,1
            add EAX,EDX
            xor EDX,EDX
            div ECX
            mov WORD PTR [R8+4],AX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c1f8:

            xor EDX,EDX
            jmp .L_42c1cf
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c200:

            movzx EAX,BYTE PTR [RDI]
            mov EDX,EAX
            and EDX,3
            cmp DL,3
            je .L_42c220

            add EDX,1
            and EAX,4294967292
            and EDX,3
            or EAX,EDX
            mov BYTE PTR [RDI],AL
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c220:

            and EAX,4294967292
            mov BYTE PTR [RDI],AL
            add DWORD PTR [RDI],4
            ret 
.L_42c229:

            lea RCX,QWORD PTR [RIP+.L_459aa0]
            lea RSI,QWORD PTR [RIP+.L_459a50]
            lea RDI,QWORD PTR [RIP+.L_459a6a]
            sub RSP,8

            mov EDX,157
            call __assert_fail@PLT
.L_42c24c:

            nop
            nop
            nop
            nop
.L_42c250:

            jmp .L_42c1a0
.L_42c255:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c260:

            ret 
.L_42c262:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c270:

            mov EAX,129
            mov DWORD PTR [RDI+16],0
            mov WORD PTR [RDI],AX
            lea RAX,QWORD PTR [RIP+.L_42c580]
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            ret 
.L_42c293:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c2a0:

            cmp WORD PTR [RDI],0
            je .L_42c2b8

            push RBX
            lea RBX,QWORD PTR [RDI+8]
            cmp RBX,QWORD PTR [RDI+24]
            je .L_42c2c0

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c2b8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c2c0:

            call .L_401240

            mov RDI,RBX
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_42c2d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c2e0:

            add RDI,8
            jmp .L_430c70
.L_42c2e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c2f0:

            test SI,SI
            mov WORD PTR [RDI],SI
            je .L_42c308

            push RBX
            lea RBX,QWORD PTR [RDI+8]
            cmp RBX,QWORD PTR [RDI+24]
            je .L_42c310

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c308:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c310:

            call .L_401240

            mov RDI,RBX
            mov EDX,1000
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
.L_42c325:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c330:

            push RBX
            sub RSP,16
.L_42c335:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RSI+78]
            and EAX,3
            cmp AL,3
            jne .L_42c3b0

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,1
            mov RBX,RDI
            mov RDI,RSI
            xor ESI,ESI
            call .L_403860

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            movzx EDX,BYTE PTR [RSP+6]
            cmp DL,BYTE PTR [RSP+7]
            jae .L_42c3b0

            mov RCX,RDX
            shl RCX,4
            add RDX,RCX
            lea RAX,QWORD PTR [RAX+RDX*8]
.L_42c399:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42c3b4

            add RSP,16
.L_42c3ad:

            pop RBX
            ret 
          .byte 0x90
.L_42c3b0:

            xor EAX,EAX
            jmp .L_42c399
.L_42c3b4:

            call __stack_chk_fail@PLT
.L_42c3b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c3c0:

            push R12
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            test WORD PTR [RBX+126],8191
            je .L_42c408
.L_42c3e8:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42c4a2

            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c408:

            mov RDI,RAX
            mov RBP,RAX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            mov EDX,1
            mov ESI,3
            call .L_403740

            test RAX,RAX
            mov R12,RAX
            je .L_42c3e8

            lea RDI,QWORD PTR [RBP+2568]
            mov RSI,RBX
            call .L_41cd60

            lea RSI,QWORD PTR [RSP+7]
            mov EDX,1
            mov RDI,R12
            mov BYTE PTR [RSP+7],AL
            call .L_403d30

            test EAX,EAX
            je .L_42c468
.L_42c45a:

            mov RDI,R12
            call .L_4033b0

            jmp .L_42c3e8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c468:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_40edc0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42c498

            lea RDI,QWORD PTR [RBP+2256]
            mov RSI,R12
            call .L_4133e0
.L_42c48a:

            test EAX,EAX
            jne .L_42c45a

            jmp .L_42c3e8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c498:

            mov RSI,R12
            mov RDI,RBP
            call RAX

            jmp .L_42c48a
.L_42c4a2:

            call __stack_chk_fail@PLT
.L_42c4a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c4b0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,16
.L_42c4bb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            cmp BYTE PTR [RSP+7],0
            je .L_42c536

            mov RBX,RAX
            xor EBP,EBP
            nop
            nop
            nop
.L_42c4f0:

            movzx EDX,BYTE PTR [RBX+26]
            mov EAX,EDX
            and EAX,7
            lea ECX,DWORD PTR [RAX-6]
            cmp CL,1
            jbe .L_42c505

            cmp AL,1
            jne .L_42c525
.L_42c505:

            movzx EAX,WORD PTR [RBX+128]
            add EAX,1
            mov WORD PTR [RBX+128],AX
            cmp AX,WORD PTR [R12]
            jb .L_42c525

            shr DL,3
            and EDX,8
            je .L_42c568
.L_42c525:

            add EBP,1
            add RBX,136
            cmp BYTE PTR [RSP+7],BPL
            ja .L_42c4f0
.L_42c536:

            call .L_401240

            lea RDI,QWORD PTR [R12+8]
            mov ESI,EAX
            mov EDX,1000
            call .L_430d50

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42c575

            add RSP,16
.L_42c560:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c568:

            mov RSI,RBX
            mov RDI,R12
            call .L_42c3c0

            jmp .L_42c525
.L_42c575:

            call __stack_chk_fail@PLT
.L_42c57a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c580:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402bc0

            cmp WORD PTR [RAX],0
            jne .L_42c5a0

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42c5a0:

            mov RDI,RAX
            add RSP,8
            jmp .L_42c4b0
.L_42c5ac:

            nop
            nop
            nop
            nop
.L_42c5b0:

            xor EAX,EAX
            mov WORD PTR [RSI+128],AX
            ret 
.L_42c5ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c5c0:

            cmp WORD PTR [RDI],0
            jne .L_42c5d0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c5d0:

            jmp .L_42c4b0
.L_42c5d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c5e0:

            add RDI,8
            jmp .L_430c70
.L_42c5e9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c5f0:

            push RBP
            push RBX
            mov RBX,RDI
            lea RBP,QWORD PTR [RBX+8]
            sub RSP,8
            call .L_430af0

            cmp WORD PTR [RBX],0
            je .L_42c612

            mov EDX,DWORD PTR [RAX+2580]
            test EDX,EDX
            jne .L_42c620
.L_42c612:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            jmp .L_430c70
.L_42c620:

            lea RDI,QWORD PTR [RAX+2256]
            call .L_43d9f0

            test AL,AL
            jne .L_42c612

            movzx EBX,WORD PTR [RBX]
            call .L_401240

            add RSP,8
            mov RDI,RBP
            mov ESI,EAX
            imul EBX,EBX,1000
            mov EDX,EBX
            pop RBX
            pop RBP
            jmp .L_430d50
.L_42c650:

            jmp .L_42c5f0
.L_42c652:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c660:

            cmp WORD PTR [RDI],SI
            je .L_42c670

            mov WORD PTR [RDI],SI
            jmp .L_42c5f0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c670:

            ret 
.L_42c672:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c680:

            lea RAX,QWORD PTR [RIP+.L_42c760]
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            mov EAX,190
            mov WORD PTR [RDI],AX
            jmp .L_42c5f0
.L_42c6a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c6b0:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            call .L_430af0

            lea RCX,QWORD PTR [RBX+8]
            cmp QWORD PTR [RBX+24],RCX
            je .L_42c6d9

            test BPL,BPL
            je .L_42c6d9

            cmp DWORD PTR [RAX+2580],2
            je .L_42c6e0
.L_42c6d9:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_42c6e0:

            lea RBP,QWORD PTR [RAX+2568]
            mov RSI,R12
            mov RDI,RBP
            call .L_41d020

            mov RDI,RBP
            mov R12,RAX
            call .L_41ad80

            cmp R12,RAX
            jne .L_42c6d9

            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_42c5f0
.L_42c70e:

            nop
            nop
.L_42c710:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_430af0

            cmp DWORD PTR [RAX+2580],2
            je .L_42c738
.L_42c727:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_42c5f0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c738:

            lea RDI,QWORD PTR [RAX+2256]
            mov RBP,RAX
            call .L_43d9f0

            test AL,AL
            jne .L_42c727

            lea RDI,QWORD PTR [RBP+2568]
            call .L_419960

            jmp .L_42c727
.L_42c759:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c760:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402bd0

            add RSP,8
            mov RDI,RAX
            jmp .L_42c710
.L_42c77a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c780:

            lea RAX,QWORD PTR [RIP+.L_42caa0]
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov BYTE PTR [RDI+16],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RDI+48],0
            mov DWORD PTR [RDI+56],0
            or BYTE PTR [RDI+62],63
            mov QWORD PTR [RDI+40],RAX
            xor EAX,EAX
            mov BYTE PTR [RDI+63],63
            mov WORD PTR [RDI+60],AX
            and BYTE PTR [RDI+64],254
            ret 
.L_42c7cf:

            nop
.L_42c7d0:

            movzx ECX,BYTE PTR [RDI+63]
            mov EAX,24
            test CL,64
            jne .L_42c838

            test RSI,RSI
            mov EAX,7
            je .L_42c838

            push RBX

            or ECX,64
            mov RBX,RDI
            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RDX
            mov BYTE PTR [RDI+63],CL
            call .L_401240

            or BYTE PTR [RBX+63],128
            and BYTE PTR [RBX+64],254
            mov DWORD PTR [RBX+56],EAX
            mov EAX,256
            mov QWORD PTR [RBX+48],0
            mov WORD PTR [RBX+60],AX
            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,EAX
            mov EDX,2
            call .L_430d50

            xor EAX,EAX
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c838:

            ret 
.L_42c83a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c840:

            movzx EDX,BYTE PTR [RDI+63]
            test DL,64
            je .L_42c870

            sub RSP,8
            and BYTE PTR [RDI+64],254
            and EDX,4294967231
            mov BYTE PTR [RDI+63],DL
            add RDI,24
            call .L_430c70

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42c870:

            mov EAX,24
            ret 
.L_42c876:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c880:

            mov BYTE PTR [RDI+16],SIL
            xor EAX,EAX
            ret 
.L_42c887:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c890:

            lea EDX,DWORD PTR [RSI-1]
            mov EAX,7
            cmp DL,62
            jbe .L_42c8a0

            ret 
          .byte 0x90
.L_42c8a0:

            movzx EAX,BYTE PTR [RDI+62]
            and ESI,63
            and EAX,4294967232
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+62],SIL
            ret 
.L_42c8b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c8c0:

            test SIL,SIL
            mov EAX,7
            je .L_42c8e8

            movzx EDX,BYTE PTR [RDI+62]
            and EDX,63
            cmp DL,SIL
            jb .L_42c8e8

            movzx EAX,BYTE PTR [RDI+63]
            and ESI,63
            and EAX,4294967232
            or ESI,EAX
            xor EAX,EAX
            mov BYTE PTR [RDI+63],SIL
.L_42c8e8:

            ret 
.L_42c8ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42c8f0:

            movzx ECX,BYTE PTR [RDI+62]
            movzx ESI,BYTE PTR [RDI+64]
            mov RAX,-1
            mov R8,RDI
            and ECX,63
            and ESI,1
            shl RAX,CL
            xor ECX,ECX
            not RAX
            and RAX,QWORD PTR [RDI+48]
            je .L_42c92c

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c920:

            lea RDX,QWORD PTR [RAX-1]
            add ECX,1
            and RAX,RDX
            jne .L_42c920
.L_42c92c:

            movzx EAX,BYTE PTR [R8+63]
            and EAX,63
            cmp AL,CL
            movzx EAX,BYTE PTR [R8+64]
            setbe DIL
            and EAX,4294967294
            or EAX,EDI
            test DIL,DIL
            mov BYTE PTR [R8+64],AL
            jne .L_42c952

            test SIL,SIL
            je .L_42c95d
.L_42c952:

            mov RSI,QWORD PTR [R8+8]
            movzx EDI,DIL
            jmp QWORD PTR [R8]
.L_42c95d:

            ret 
.L_42c95f:

            nop
.L_42c960:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_42c96b:

            call .L_401240

            test BPL,BPL
            jne .L_42c979

            and BYTE PTR [RBX+63],127
.L_42c979:

            mov EDX,DWORD PTR [RBX+56]
            sub EAX,EDX
            cmp EAX,999
            jbe .L_42c9e0

            mov RSI,QWORD PTR [RBX+48]
            cmp BYTE PTR [RBX+63],0
            lea RCX,QWORD PTR [RSI+RSI*1]
            mov QWORD PTR [RBX+48],RCX
            js .L_42c9d0
.L_42c997:

            or BYTE PTR [RBX+63],128
            add EDX,1000
            jmp .L_42c9aa
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c9a8:

            mov EDX,ECX
.L_42c9aa:

            sub EAX,1000
            lea ECX,DWORD PTR [RDX+1000]
            cmp EAX,999
            ja .L_42c9a8

            mov DWORD PTR [RBX+56],EDX
            add RSP,8
.L_42c9c3:

            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_42c8f0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42c9d0:

            or RCX,1
            mov QWORD PTR [RBX+48],RCX
            jmp .L_42c997
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42c9e0:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42c9e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42c9f0:

            push R12
            push RBP
            push RBX
.L_42c9f4:

            mov RBX,RDI
            call .L_430ac0

            mov RDI,RAX
            call .L_401390

            cmp AL,127
            jne .L_42ca50
.L_42ca08:

            movzx EBP,WORD PTR [RBX+60]
            shr BP,1
            cmp BP,1
            jbe .L_42ca40

            mov WORD PTR [RBX+60],BP
            movzx EBP,BP
.L_42ca1c:

            call .L_401460

            and EAX,3
            add EBP,EAX
            call .L_401240

            lea RDI,QWORD PTR [RBX+24]
            mov EDX,EBP
            mov ESI,EAX
            pop RBX
.L_42ca34:

            pop RBP
            pop R12
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ca40:

            mov EAX,2
            mov EBP,2
            mov WORD PTR [RBX+60],AX
            jmp .L_42ca1c
.L_42ca50:

            movzx R12D,BYTE PTR [RBX+16]
            xor ESI,ESI
            mov EBP,EAX
            mov RDI,RBX
            cmp AL,R12B
            setge SIL
            call .L_42c960

            cmp BPL,R12B
            jge .L_42ca08

            mov EDX,256
            mov EBP,256
            mov WORD PTR [RBX+60],DX
            jmp .L_42ca1c
.L_42ca7d:

            nop
            nop
            nop
.L_42ca80:

            test BYTE PTR [RDI+63],64
            jne .L_42ca90

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ca90:

            jmp .L_42c9f0
.L_42ca95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42caa0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402bb0

            test BYTE PTR [RAX+63],64
            jne .L_42cac0

            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42cac0:

            mov RDI,RAX
            add RSP,8
            jmp .L_42c9f0
.L_42cacc:

            nop
            nop
            nop
            nop
.L_42cad0:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RDI,RSI
            mov RBX,RDX
            mov R12,RSI
            sub RSP,8
            call strlen@PLT

            test RBX,RBX
            mov RBP,RAX
            je .L_42cb09

            sub RBX,1
            cmp RAX,RBX
            cmovbe RBX,RAX
            test RBX,RBX
            jne .L_42cb20
.L_42cb03:

            mov BYTE PTR [R13+RBX*1],0
.L_42cb09:

            add RSP,8
            mov RAX,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42cb20:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call memcpy@PLT

            jmp .L_42cb03
.L_42cb30:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            sub RSP,104
.L_42cb44:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            mov EAX,EDX
            mov QWORD PTR [RSP+32],RCX
            mov QWORD PTR [RSP+40],R8
            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            lea RBX,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+60]
            je .L_42cbe9

            mov RAX,QWORD PTR [RSP+8]
            lea RBX,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+60]
            mov RBP,RSI
            shl RAX,5
            add RAX,RSI
            mov R15,RAX
.L_42cb90:

            test BYTE PTR [RBP+17],2
            je .L_42cbe0

            mov DWORD PTR [RSP+60],0
            nop
            nop
.L_42cba0:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R12
            call .L_42d4b0

            test EAX,EAX
            jne .L_42ccf0

            test BYTE PTR [RSP+81],8
            je .L_42cba0

            mov RSI,RBP
            mov RDI,RBX
            call .L_401820

            movzx EDX,BYTE PTR [RSP+80]
            cmp DL,AL
            ja .L_42cba0

            cmp DL,BYTE PTR [RBP+16]
            jne .L_42cba0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cbe0:

            add RBP,32
            cmp RBP,R15
            jne .L_42cb90
.L_42cbe9:

            mov RBP,QWORD PTR [RSP+8]
            mov DWORD PTR [RSP+60],0
            shl RBP,5
            add RBP,R14
            nop
            nop
            nop
.L_42cc00:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R12
            call .L_42d4b0

            test EAX,EAX
            jne .L_42cd40

            test BYTE PTR [RSP+81],8
            je .L_42cc00

            cmp QWORD PTR [RSP+8],0
            je .L_42cc00

            mov R15,R14
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cc30:

            test BYTE PTR [R15+17],2
            je .L_42cc51

            mov RSI,R15
            mov RDI,RBX
            call .L_401820

            movzx ECX,BYTE PTR [RSP+80]
            cmp CL,AL
            ja .L_42cc51

            cmp CL,BYTE PTR [R15+16]
            je .L_42cc00
.L_42cc51:

            add R15,32
            cmp RBP,R15
            jne .L_42cc30

            test BYTE PTR [R14+17],2
            mov R8,R14
            jne .L_42cd18
.L_42cc68:

            pxor XMM0,XMM0
            mov QWORD PTR [R8+24],0
            lea RCX,QWORD PTR [R8+8]
            mov RSI,R8
            mov QWORD PTR [RSP+16],R8
            mov RDI,R12
            mov QWORD PTR [RSP+24],RCX
            movups XMMWORD PTR [R8+8],XMM0
            mov RAX,QWORD PTR [RSP+64]
            mov QWORD PTR [R8],RAX
            movzx EAX,BYTE PTR [RSP+80]
            mov BYTE PTR [R8+16],AL
            movzx EAX,BYTE PTR [RSP+81]
            shr AL,2
            and EAX,1
            mov EDX,EAX
            movzx EAX,BYTE PTR [R8+17]
            and EAX,4294967294
            or EAX,EDX
            mov RDX,QWORD PTR [RSP+40]
            or EAX,2
            mov BYTE PTR [R8+17],AL
            mov RAX,QWORD PTR [RSP+32]
            call RAX

            test EAX,EAX
            mov R8,QWORD PTR [RSP+16]
            mov RCX,QWORD PTR [RSP+24]
            jne .L_42cd5f
.L_42ccda:

            mov RSI,R8
            mov RDI,R12
            call .L_401680

            jmp .L_42cc00
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ccf0:

            mov RSI,RBP
            mov RDI,R12
            call .L_401690

            and BYTE PTR [RBP+17],253
            add RBP,32
            cmp RBP,R15
            jne .L_42cb90

            jmp .L_42cbe9
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42cd18:

            xor EAX,EAX
.L_42cd1a:

            add RAX,1
            cmp QWORD PTR [RSP+8],RAX
            je .L_42cc00

            mov R8,RAX
            shl R8,5
            add R8,R14
            test BYTE PTR [R8+17],2
            je .L_42cc68

            jmp .L_42cd1a
.L_42cd40:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42cd9a

            add RSP,104
.L_42cd54:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_42cd5f:

            lea RAX,QWORD PTR [R8+16]
            mov R15,RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cd70:

            add RCX,1
            mov QWORD PTR [RSP+24],R8
            mov QWORD PTR [RSP+16],RCX
            call .L_401460

            mov RCX,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+24]
            cmp RCX,R15
            mov BYTE PTR [RCX-1],AL
            jne .L_42cd70

            jmp .L_42ccda
.L_42cd9a:

            call __stack_chk_fail@PLT
.L_42cd9f:

            nop
.L_42cda0:

            push RBP
            push RBX
            lea RBP,QWORD PTR [RSI+16]
            lea RBX,QWORD PTR [RSI+8]
            sub RSP,8
            nop
            nop
.L_42cdb0:

            add RBX,1
            call .L_401460

            cmp RBX,RBP
            mov BYTE PTR [RBX-1],AL
            jne .L_42cdb0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_42cdca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42cdd0:

            push RBX
            mov RDI,RSI
            mov RBX,RDX
            call .L_401670

            test RAX,RAX
            je .L_42ce20

            mov RDI,QWORD PTR [RBX]
            mov RSI,QWORD PTR [RBX+8]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cdf0:

            mov RCX,QWORD PTR [RAX+8]
            mov RDX,QWORD PTR [RAX]
            xor RCX,RSI
            xor RDX,RDI
            or RCX,RDX
            jne .L_42ce10

            mov EAX,1
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ce10:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_42cdf0

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ce20:

            xor EAX,EAX
            pop RBX
            ret 
.L_42ce24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ce30:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RDX
            sub RSP,168
.L_42ce46:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_42ce5f:

            call .L_431b80
.L_42ce64:

            mov RDI,RBX
.L_42ce67:

            call .L_431ba0

            movzx EDX,BYTE PTR [R12+16]
            mov RSI,R12
            mov RDI,RBX
            shr DL,3
            movzx EDX,DL
            call .L_431bb0

            mov RSI,QWORD PTR [RBP]
            test RSI,RSI
            je .L_42cf20

            movzx EDX,BYTE PTR [RBP+8]
            mov RDI,RBX
            call .L_431bb0

            movzx EDX,BYTE PTR [RBP+24]
            test DL,DL
            je .L_42ceb5

            mov RSI,QWORD PTR [RBP+16]
            test RSI,RSI
            je .L_42cf20

            mov RDI,RBX
            call .L_431bb0
.L_42ceb5:

            lea RSI,QWORD PTR [RBP+25]
            mov EDX,1
            mov RDI,RBX
            call .L_431bb0

            mov RSI,QWORD PTR [RBP+32]
            test RSI,RSI
            je .L_42cf20

            movzx EDX,WORD PTR [RBP+40]
            mov RDI,RBX
            call .L_431bb0

            lea RSI,QWORD PTR [RSP+112]
            mov RDI,RBX
            call .L_431bc0

            mov RAX,QWORD PTR [RSP+136]
            mov RDX,R12
            mov RSI,R13
            mov RDI,RBP
            mov QWORD PTR [R12+8],RAX
            call .L_42cdd0

            test AL,AL
            jne .L_42cf15

            mov RDI,R12
            call .L_40f010
.L_42cf0f:

            xor EBP,EBP
            test AL,AL
            je .L_42cf25
.L_42cf15:

            mov EBP,26
            jmp .L_42cf25
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42cf20:

            mov EBP,7
.L_42cf25:

            mov RDI,RBX
.L_42cf28:

            call .L_431b90
.L_42cf2d:

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_42cf50

            add RSP,168
.L_42cf49:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42cf50:

            call __stack_chk_fail@PLT
.L_42cf55:

            mov RBP,RAX
            mov RDI,RBX
            call .L_431b90

            mov RDI,RBP
.L_42cf63:

            call _Unwind_Resume@PLT
.L_42cf68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cf70:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,RDI
            mov EBP,256
            sub RSP,8
            jmp .L_42cf99
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42cf90:

            add BYTE PTR [RBX+25],1
            sub EBP,1
            je .L_42cfac
.L_42cf99:

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_42ce30

            cmp EAX,26
            je .L_42cf90
.L_42cfac:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42cfb7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cfc0:

            cmp BYTE PTR [RDI+20840],0
            mov EAX,13
            jne .L_42cfd7

            mov BYTE PTR [RDI+24336],SIL
            xor EAX,EAX
.L_42cfd7:

            ret 
.L_42cfd9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cfe0:

            movzx EAX,BYTE PTR [RDI+24336]
            ret 
.L_42cfe8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42cff0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d010

            sub RSP,8
            movzx ESI,SI
            call .L_4012e0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d010:

            mov EAX,13
            ret 
.L_42d016:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d020:

            sub RSP,24
.L_42d024:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+24336],0
            mov EAX,13
            je .L_42d06b

            lea RDX,QWORD PTR [RSI+7]
            xor EAX,EAX
            mov RSI,RSP
            nop
            nop
            nop
            nop
            nop
.L_42d050:

            movzx ECX,BYTE PTR [RDX]
            sub RDX,1
            mov BYTE PTR [RSI+RAX*1],CL
            add RAX,1
            cmp RAX,8
            jne .L_42d050

            call .L_4012f0

            xor EAX,EAX
.L_42d06b:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_42d080

            add RSP,24
.L_42d07f:

            ret 
.L_42d080:

            call __stack_chk_fail@PLT
.L_42d085:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d090:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d0b0

            sub RSP,8
            movzx ESI,SI
            call .L_401300

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d0b0:

            mov EAX,13
            ret 
.L_42d0b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d0c0:

            jmp .L_4013b0
.L_42d0c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d0d0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d0f0

            sub RSP,8
            movzx ESI,SIL
            call .L_401310

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42d0f0:

            mov EAX,13
            ret 
.L_42d0f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d100:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d110

            jmp .L_401350
          .byte 0x66
          .byte 0x90
.L_42d110:

            mov EAX,13
            ret 
.L_42d116:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d120:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d150

            mov BYTE PTR [RDI+24337],SIL
            mov QWORD PTR [RDI+24344],RDX
            movzx ESI,SIL
            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_401360
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d150:

            mov EAX,13
            ret 
.L_42d156:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d160:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d170

            jmp .L_401380
          .byte 0x66
          .byte 0x90
.L_42d170:

            xor EAX,EAX
            ret 
.L_42d173:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d180:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d1a0

            mov QWORD PTR [RDI+24352],RDX
            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_401370
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d1a0:

            mov EAX,13
            ret 
.L_42d1a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d1b0:

            jmp .L_401390
.L_42d1b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d1c0:

            mov RDI,QWORD PTR [RDI+24328]
            jmp .L_4013a0
.L_42d1cc:

            nop
            nop
            nop
            nop
.L_42d1d0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d1f8

            mov QWORD PTR [RDI+24360],RCX
            mov RDI,QWORD PTR [RDI+24328]
            movzx EDX,DX
            movzx ESI,SIL
            jmp .L_401430
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d1f8:

            mov EAX,13
            ret 
.L_42d1fe:

            nop
            nop
.L_42d200:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d220

            sub RSP,8
            movzx ESI,SIL
            call .L_4013c0

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42d220:

            mov EAX,13
            ret 
.L_42d226:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d230:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d248

            movzx ESI,SI
            jmp .L_4013d0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d248:

            mov EAX,13
            ret 
.L_42d24e:

            nop
            nop
.L_42d250:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d260

            jmp .L_4013e0
          .byte 0x66
          .byte 0x90
.L_42d260:

            mov EAX,13
            ret 
.L_42d266:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d270:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d288

            movzx ESI,SI
            jmp .L_4013f0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d288:

            mov EAX,13
            ret 
.L_42d28e:

            nop
            nop
.L_42d290:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d2a0

            jmp .L_401400
          .byte 0x66
          .byte 0x90
.L_42d2a0:

            mov EAX,13
            ret 
.L_42d2a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d2b0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d2d0

            sub RSP,8
            call .L_401410

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d2d0:

            mov EAX,13
            ret 
.L_42d2d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d2e0:

            cmp BYTE PTR [RDI+24336],0
            je .L_42d300

            sub RSP,8
            call .L_401420

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d300:

            mov EAX,13
            ret 
.L_42d306:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d310:

            mov QWORD PTR [RDI],RSI
            mov BYTE PTR [RDI+8],0
            mov BYTE PTR [RDI+9],11
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+32],0
            mov RDI,RSI
            jmp .L_4013a0
.L_42d33b:

            nop
            nop
            nop
            nop
            nop
.L_42d340:

            mov RDI,QWORD PTR [RDI]
            jmp .L_4013a0
.L_42d348:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d350:

            cmp BYTE PTR [RDI+8],0
            je .L_42d370

            mov BYTE PTR [RDI+9],SIL
            mov QWORD PTR [RDI+16],RDX
            movzx ESI,SIL
            mov RDI,QWORD PTR [RDI]
            jmp .L_401360
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d370:

            mov EAX,13
            ret 
.L_42d376:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d380:

            mov RAX,QWORD PTR [RDI+16]
            test RAX,RAX
            je .L_42d390

            mov RDI,QWORD PTR [RDI]
            jmp RAX
          .byte 0x66
          .byte 0x90
.L_42d390:

            ret 
.L_42d392:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d3a0:

            cmp BYTE PTR [RDI+8],0
            je .L_42d3b8

            mov QWORD PTR [RDI+24],RDX
            mov RDI,QWORD PTR [RDI]
            jmp .L_401370
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d3b8:

            mov EAX,13
            ret 
.L_42d3be:

            nop
            nop
.L_42d3c0:

            mov RDI,QWORD PTR [RDI]
            jmp .L_401370
.L_42d3c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d3d0:

            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov R12,RDX
            sub RSP,8
            movzx ESI,BYTE PTR [RDI+9]
            mov RDI,QWORD PTR [RDI]
            call .L_401360

            mov RAX,QWORD PTR [RBX+24]
            test RAX,RAX
            je .L_42d411

            mov ECX,R13D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,QWORD PTR [RBX]
            call RAX

            mov QWORD PTR [RBX+24],0
.L_42d411:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42d41c:

            nop
            nop
            nop
            nop
.L_42d420:

            cmp BYTE PTR [RDI+8],0
            je .L_42d440

            mov QWORD PTR [RDI+32],RCX
            mov RDI,QWORD PTR [RDI]
            movzx EDX,DX
            movzx ESI,SIL
            jmp .L_401430
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d440:

            mov EAX,13
            ret 
.L_42d446:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d450:

            mov RAX,QWORD PTR [RDI+32]
            test RAX,RAX
            je .L_42d470

            push RBX
            mov RBX,RDI
            movsx ESI,SIL
            mov RDI,QWORD PTR [RDI]
            call RAX

            mov QWORD PTR [RBX+32],0
            pop RBX
            ret 
.L_42d470:

            ret 
.L_42d472:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d480:

            test RDX,RDX
            je .L_42d4a0

            test RCX,RCX
            je .L_42d4a0

            movzx ESI,SIL
            add RDI,20240
            jmp .L_425b20
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d4a0:

            mov EAX,7
            ret 
.L_42d4a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d4b0:

            test RSI,RSI
            je .L_42d4d0

            test RDX,RDX
            je .L_42d4d0

            add RDI,20240
            jmp .L_4247d0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d4d0:

            mov EAX,7
            ret 
.L_42d4d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d4e0:

            test RSI,RSI
            je .L_42d500

            test RDX,RDX
            je .L_42d500

            add RDI,20240
            jmp .L_424ae0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d500:

            mov EAX,7
            ret 
.L_42d506:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d510:

            sub RSP,8
            add RDI,15288
            call .L_4160f0

            movzx EAX,BYTE PTR [RAX+7]
            add RSP,8
            ret 
.L_42d529:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d530:

            sub RSP,8
            add RDI,15288
            call .L_4160f0

            movzx EAX,BYTE PTR [RAX+8]
            add RSP,8
            ret 
.L_42d549:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d550:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            jne .L_42d560

            pop RBX
            ret 
          .byte 0x90
.L_42d560:

            lea RDI,QWORD PTR [RBX+80]
            pop RBX
            jmp .L_404c10
.L_42d56a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42d570:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            je .L_42d585

            cmp QWORD PTR [RBX+80],0
            setne AL
.L_42d585:

            pop RBX
            ret 
.L_42d587:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d590:

            ret 
.L_42d592:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d5a0:

            mov RAX,QWORD PTR [RDI]
            jmp QWORD PTR [RAX+8]
.L_42d5a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d5b0:

            add RDI,8
            jmp .L_410a20
.L_42d5b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d5c0:

            lea RAX,QWORD PTR [RIP+.L_6768f8]
            push R12
            push RBP
            push RBX
.L_42d5cb:

            mov RBX,RDI
            mov R12,RDX
            mov QWORD PTR [RDI],RAX
            lea RDI,QWORD PTR [RSI+12720]
            mov RBP,RCX
            call .L_430ad0

            lea RDI,QWORD PTR [RBX+8]
            lea RSI,QWORD PTR [RAX+104]
            call .L_4108b0

            lea RDI,QWORD PTR [RBX+80]
            call .L_404440

            lea RAX,QWORD PTR [RBX+96]
            lea RDI,QWORD PTR [RBX+144]
            mov QWORD PTR [RBX+96],R12
            mov DWORD PTR [RBX+104],0
            mov QWORD PTR [RBX+120],0
            mov QWORD PTR [RBX+112],RAX
            mov QWORD PTR [RBX+128],0
            mov QWORD PTR [RBX+136],0
            call .L_404440

            lea RAX,QWORD PTR [RBX+152]
            mov QWORD PTR [RBX+152],RBP
            mov DWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+176],0
            mov QWORD PTR [RBX+184],0
            mov QWORD PTR [RBX+168],RAX
            call .L_401460

            mov WORD PTR [RBX+88],AX
            pop RBX
.L_42d675:

            pop RBP
            pop R12
            ret 
.L_42d679:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d680:

            push RBP
            push RBX
            lea RBX,QWORD PTR [RDI+8]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_42d691:

            mov RDI,RBX
            mov WORD PTR [RSP+16],SI
            lea RSI,QWORD PTR [RIP+.L_42d5a0]
            mov BYTE PTR [RSP+18],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP],XMM0
            call .L_4108e0

            test EAX,EAX
            jne .L_42d6d0

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_410940
.L_42d6d0:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42d6e7

            add RSP,40
.L_42d6e4:

            pop RBX
            pop RBP
            ret 
.L_42d6e7:

            call __stack_chk_fail@PLT
.L_42d6ec:

            nop
            nop
            nop
            nop
.L_42d6f0:

            mov RDX,QWORD PTR [RDI+120]
            test RDX,RDX
            je .L_42d716

            cmp RDX,RSI
            je .L_42d728

            mov RAX,RDX
            jmp .L_42d70d
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d708:

            cmp RSI,RAX
            je .L_42d728
.L_42d70d:

            mov RAX,QWORD PTR [RAX+24]
            test RAX,RAX
            jne .L_42d708
.L_42d716:

            mov QWORD PTR [RSI+24],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI+120],RSI
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d728:

            mov EAX,24
            ret 
.L_42d72e:

            nop
            nop
.L_42d730:

            mov RDX,QWORD PTR [RDI+120]
            cmp RDX,RSI
            je .L_42d788

            test RDX,RDX
            je .L_42d761

            mov RAX,QWORD PTR [RDX+24]
            cmp RAX,RSI
            jne .L_42d75c

            jmp .L_42d770
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d750:

            mov RDX,QWORD PTR [RAX+24]
            cmp RDX,RSI
            je .L_42d773

            mov RAX,RDX
.L_42d75c:

            test RAX,RAX
            jne .L_42d750
.L_42d761:

            mov QWORD PTR [RSI+24],0
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d770:

            mov RAX,RDX
.L_42d773:

            mov RDX,QWORD PTR [RSI+24]
            mov QWORD PTR [RAX+24],RDX
            mov QWORD PTR [RSI+24],0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42d788:

            mov RAX,QWORD PTR [RSI+24]
            mov QWORD PTR [RDI+120],RAX
            mov QWORD PTR [RSI+24],0
            ret 
.L_42d799:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d7a0:

            mov QWORD PTR [RDI+176],RSI
            mov QWORD PTR [RDI+184],RDX
            ret 
.L_42d7af:

            nop
.L_42d7b0:

            push R12
            push RBP
            push RBX
.L_42d7b4:

            movzx EAX,BYTE PTR [RSI+128]
            cmp AL,3
            jbe .L_42d810

            add RDI,8
            mov RBX,RSI
            movzx ESI,AL
            mov EBP,EDX
            call .L_4108c0

            test RAX,RAX
            mov R12,RAX
            je .L_42d800

            movzx EDX,BYTE PTR [RBX+128]
            mov RSI,RBX
            mov RDI,RAX
            call .L_403da0

            xor ESI,ESI
            mov RDI,R12
            call .L_403550

            movzx ESI,BPL
            mov RDI,R12
            call .L_403590
.L_42d800:

            mov RAX,R12
            pop RBX
.L_42d804:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d810:

            xor R12D,R12D
            mov RAX,R12
            pop RBX
            pop RBP
            pop R12
            ret 
.L_42d81b:

            nop
            nop
            nop
            nop
            nop
.L_42d820:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,184
.L_42d82d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            test BYTE PTR [RDX],48
            mov EAX,7
            jne .L_42d8bd

            lea R12,QWORD PTR [RSP+16]
            mov RBP,RDX
            mov RBX,RDI
            xor EDX,EDX
            mov R13,RCX
            mov RDI,R12
            call .L_42f0e0

            movzx EAX,WORD PTR [RBP+2]
            mov EDX,2
            mov RSI,R12
            mov RDI,RBX
            mov WORD PTR [RSP+18],AX
            call .L_42d7b0

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_42d8bd

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_42d5b0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42d8e0

            lea RDI,QWORD PTR [RBX+8]
            mov RDX,R13
            mov RSI,RBP
            call .L_410a20
.L_42d8a9:

            test EAX,EAX
            je .L_42d8bd

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_42d8bd:

            mov RCX,QWORD PTR [RSP+168]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42d8ed

            add RSP,184
.L_42d8d7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_42d8e0:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,RBX
            call RAX

            jmp .L_42d8a9
.L_42d8ed:

            call __stack_chk_fail@PLT
.L_42d8f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d900:

            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RSI
            movzx ESI,DX
            sub RSP,8
.L_42d916:

            call .L_404020

            test RAX,RAX
            mov RBX,RAX
            je .L_42d95c

            mov EDX,60
            mov RSI,R12
            mov RDI,RAX
            call .L_403d30

            test EAX,EAX
            jne .L_42d970

            lea R13,QWORD PTR [RBP+96]
            cmp R13,QWORD PTR [RBP+112]
            je .L_42d990

            mov EAX,DWORD PTR [R12+50]
            cmp DWORD PTR [RBP+104],EAX
            jns .L_42d990
.L_42d94b:

            lea RDI,QWORD PTR [RBP+80]
            mov EDX,1
            mov RSI,RBX
            call .L_404580
.L_42d95c:

            add RSP,8
.L_42d960:

            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42d970:

            mov RDI,RBX
            xor EBX,EBX
            call .L_4033b0

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42d990:

            mov R12D,DWORD PTR [R12+54]
            call .L_401240

            mov RDI,R13
            mov ESI,EAX
            mov EDX,R12D
            call .L_430d50

            jmp .L_42d94b
.L_42d9a9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42d9b0:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+80]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RSI
            lea R13,QWORD PTR [RBX+96]
            sub RSP,8
            call .L_404640

            cmp R13,QWORD PTR [RBX+112]
            je .L_42d9e3

            mov RDI,R12
            call .L_404570

            test RAX,RAX
            je .L_42d9f8
.L_42d9e3:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4033b0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42d9f8:

            mov RDI,R13
            call .L_430c70

            jmp .L_42d9e3
.L_42da02:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42da10:

            push R14
            push R13
            mov R14,R9
            push R12
            push RBP
            mov R12,R8
            push RBX
            mov RBX,RDX
            mov RBP,RCX
            mov R13D,DWORD PTR [RSP+48]
            call .L_42d9b0

            mov RAX,QWORD PTR [RBX+34]
            test RAX,RAX
            je .L_42da58

            mov RDI,QWORD PTR [RBX+42]
            mov R8D,R13D
            mov RCX,R14
            pop RBX
            mov RDX,R12
            mov RSI,RBP
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42da58:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_42da61:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42da70:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            add RDI,80
            push RBP
            push RBX
            mov RBP,RSI
            mov R13,RDX
            sub RSP,104
.L_42da8b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            xor EAX,EAX
            and BYTE PTR [RSP+75],252
            mov QWORD PTR [RSP+48],0
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_404570

            test RAX,RAX
            je .L_42db90

            mov R15,RAX
            mov DWORD PTR [RSP+12],23
            lea R12,QWORD PTR [RSP+16]
            jmp .L_42daf8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42daf0:

            test RBX,RBX
            mov R15,RBX
            je .L_42db68
.L_42daf8:

            mov RDI,R15
            call .L_4033c0

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R12
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403860

            cmp QWORD PTR [RSP+50],RBP
            jne .L_42daf0

            cmp QWORD PTR [RSP+58],R13
            jne .L_42daf0

            mov RSI,R15
            mov RDI,R14
            call .L_42d9b0

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_42db9a

            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov R8D,11
            mov RDI,QWORD PTR [RSP+58]
            mov R15,RBX
            call RAX

            test RBX,RBX
            mov DWORD PTR [RSP+12],0
            jne .L_42daf8

            nop
            nop
            nop
            nop
.L_42db68:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+12]
            jne .L_42dba7

            add RSP,104
.L_42db80:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42db90:

            mov DWORD PTR [RSP+12],23
            jmp .L_42db68
.L_42db9a:

            mov DWORD PTR [RSP+12],0
            jmp .L_42daf0
.L_42dba7:

            call __stack_chk_fail@PLT
.L_42dbac:

            nop
            nop
            nop
            nop
.L_42dbb0:

            push R12
            push RBP
            mov R12,RDX
            push RBX
            mov RBX,RDI
            mov RDI,RSI
            sub RSP,16
.L_42dbc1:

            movzx EAX,WORD PTR [RSI+58]
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_404020

            mov RBP,RAX
            mov EAX,3
            test RBP,RBP
            je .L_42dc02

            mov RAX,QWORD PTR [RBX]
            lea RDX,QWORD PTR [RIP+.L_42d5b0]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42dc30

            lea RDI,QWORD PTR [RBX+8]
            mov RDX,R12
            mov RSI,RBP
            call .L_410a20
.L_42dbfe:

            test EAX,EAX
            jne .L_42dc10
.L_42dc02:

            add RSP,16
.L_42dc06:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42dc10:

            mov RDI,RBP
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dc30:

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call RAX

            jmp .L_42dbfe
.L_42dc3d:

            nop
            nop
            nop
.L_42dc40:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,4294967295
            sub RSP,152
.L_42dc59:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_401240

            lea RDI,QWORD PTR [R14+80]
            mov R12D,EAX
            xor EAX,EAX
            and BYTE PTR [RSP+123],252
            mov QWORD PTR [RSP+96],0
            lea R13,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+104],0
            mov QWORD PTR [RSP+112],0
            mov WORD PTR [RSP+120],AX
            mov BYTE PTR [RSP+122],0
            call .L_404570

            pxor XMM0,XMM0
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+16]
            test R15,R15
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_42dd24

            jmp .L_42dd7a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42dce0:

            test BYTE PTR [RSP+123],2
            je .L_42dcf4

            movzx EAX,BYTE PTR [RSP+122]
            cmp AL,3
            jbe .L_42dda8
.L_42dcf4:

            mov RSI,R15
            mov RDI,R14
            call .L_42d9b0

            mov RAX,QWORD PTR [RSP+98]
            test RAX,RAX
            je .L_42dd1c

            mov R8D,28
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+106]
            call RAX
.L_42dd1c:

            test RBX,RBX
            mov R15,RBX
            je .L_42dd63
.L_42dd24:

            mov RDI,R15
            call .L_4033c0

            mov RBX,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,R13
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403860

            mov EAX,DWORD PTR [RSP+114]
            cmp R12D,EAX
            jns .L_42dce0

            sub EAX,R12D
            mov R15,RBX
            cmp EBP,EAX
            cmova EBP,EAX
            test RBX,RBX
            jne .L_42dd24
.L_42dd63:

            cmp EBP,-1
            je .L_42dd7a

            call .L_401240

            lea RDI,QWORD PTR [R14+96]
            mov EDX,EBP
            mov ESI,EAX
            call .L_430d50
.L_42dd7a:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42de34

            add RSP,152
.L_42dd98:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42dda8:

            add EAX,1
            mov RCX,R13
            mov EDX,60
            mov BYTE PTR [RSP+122],AL
            mov EAX,DWORD PTR [RSP+118]
            mov RDI,R15
            add EAX,EAX
            mov DWORD PTR [RSP+118],EAX
            add EAX,R12D
            mov DWORD PTR [RSP+114],EAX
            movzx EAX,WORD PTR [R15+58]
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403ac0

            mov EAX,DWORD PTR [RSP+118]
            cmp EBP,EAX
            cmova EBP,EAX
            test BYTE PTR [RSP+123],1
            jne .L_42dd1c

            movdqa XMM0,XMMWORD PTR [RSP+80]
            mov RDI,R14
            movzx EAX,WORD PTR [RSP+96]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+64]
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_430af0

            mov RSI,R15
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+24]
            mov RDX,QWORD PTR [RSP+8]
            mov BYTE PTR [RSP+52],AL
            call .L_42dbb0

            jmp .L_42dd1c
.L_42de34:

            call __stack_chk_fail@PLT
.L_42de39:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42de40:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b00

            add RSP,8
            mov RDI,RAX
            jmp .L_42dc40
.L_42de5d:

            nop
            nop
            nop
.L_42de60:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b30

            add RSP,8
            mov RDI,RAX
            jmp .L_42dc40
.L_42de7d:

            nop
            nop
            nop
.L_42de80:

            push R15
            push R14
            add RDI,80
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov R12,RDX
            mov RBX,R8
            sub RSP,24
.L_42de9b:

            mov QWORD PTR [RSP],RSI
            call .L_404570

            test RAX,RAX
            je .L_42dfe0

            mov R15,RAX
            lea RAX,QWORD PTR [R14+4]
            lea RBP,QWORD PTR [RBX+16]
            lea R13,QWORD PTR [R12+16]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_42dee8
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42dec8:

            movzx EAX,WORD PTR [R12+34]
            cmp WORD PTR [RBX+32],AX
            je .L_42df40
.L_42ded4:

            mov RDI,R15
            call .L_4033c0

            test RAX,RAX
            mov R15,RAX
            je .L_42dfe0
.L_42dee8:

            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBX
            mov EDX,60
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403860

            mov RSI,R13
            mov RDI,RBP
            call .L_40f290

            test AL,AL
            jne .L_42dec8

            mov RDI,RBP
            call .L_40ee50

            test AL,AL
            jne .L_42dec8

            mov RDI,RBP
            call .L_40ef90

            test AL,AL
            je .L_42ded4

            movzx EAX,WORD PTR [R12+34]
            cmp WORD PTR [RBX+32],AX
            jne .L_42ded4

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42df40:

            mov EDX,60
            mov RSI,R15
            mov RDI,R14
            call .L_42f110

            mov RAX,QWORD PTR [RSP]
            movzx EDX,BYTE PTR [RAX]
            mov EAX,EDX
            and EAX,48
            cmp AL,16
            je .L_42dfa0

            jbe .L_42df98

            cmp AL,32
            je .L_42df6e

            cmp AL,48
            jne .L_42ded4
.L_42df6e:

            mov RAX,QWORD PTR [RSP]
            movzx ECX,WORD PTR [R14+2]
            cmp WORD PTR [RAX+2],CX
            jne .L_42ded4
.L_42df81:

            add RSP,24
.L_42df85:

            mov RAX,R15
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42df98:

            test AL,AL
            jne .L_42ded4
.L_42dfa0:

            movzx EAX,BYTE PTR [R14]
            and EDX,15
            and EAX,15
            cmp DL,AL
            jne .L_42ded4

            mov RAX,QWORD PTR [RSP]
            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,DL
            lea RDI,QWORD PTR [RAX+4]
            call memcmp@PLT

            test EAX,EAX
            je .L_42df81

            mov RDI,R15
            call .L_4033c0

            test RAX,RAX
            mov R15,RAX
            jne .L_42dee8

            nop
.L_42dfe0:

            xor R15D,R15D
            jmp .L_42df81
.L_42dfe5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42dff0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDI
            mov RDI,RDX
            mov R13,RDX
            sub RSP,248
.L_42e010:

            and BYTE PTR [RSP+75],252
            lea R15,QWORD PTR [RSP+16]
            lea R14,QWORD PTR [RSP+80]
            movzx ESI,BYTE PTR [RSI+128]
            mov QWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_4034e0

            mov R8,R15
            mov RCX,R14
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_42de80

            test RAX,RAX
            je .L_42e130

            movzx EDX,BYTE PTR [RBX]
            mov R8,RAX
            mov EAX,EDX
            and EAX,48
            cmp AL,16
            je .L_42e101

            jbe .L_42e0e0

            cmp AL,32
            je .L_42e158

            cmp AL,48
            jne .L_42e0b0

            cmp BYTE PTR [RBX+1],0
            je .L_42e1d0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e0b0:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42e239

            add RSP,248
.L_42e0ce:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e0e0:

            test AL,AL
            jne .L_42e0b0

            mov RCX,R12
            mov RDX,RBX
            mov ESI,32
            mov RDI,RBP
            mov QWORD PTR [RSP+8],R8
            call .L_42d820
.L_42e0fc:

            mov R8,QWORD PTR [RSP+8]
.L_42e101:

            mov RSI,R8
            mov RDI,RBP
            call .L_42d9b0

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_42e0b0

            xor R8D,R8D
            mov RCX,R12
            mov RDX,R13
            mov RSI,RBX
            mov RDI,QWORD PTR [RSP+58]
            call RAX

            jmp .L_42e0b0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e130:

            test BYTE PTR [RBX],32
            jne .L_42e0b0

            mov RCX,R12
            mov RDX,RBX
            mov ESI,48
            mov RDI,RBP
            call .L_42d820

            jmp .L_42e0b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e158:

            movzx EAX,BYTE PTR [RBX+1]
            test AL,AL
            jne .L_42e190

            movzx EAX,BYTE PTR [RSP+75]
            test AL,2
            jne .L_42e208
.L_42e16d:

            cmp QWORD PTR [RSP+50],0
            jne .L_42e0b0

            mov RSI,R8
            mov RDI,RBP
            call .L_42d9b0

            jmp .L_42e0b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e190:

            cmp AL,63
            jbe .L_42e0b0

            movzx EAX,BYTE PTR [RSP+80]
            and EDX,15
            and EAX,15
            cmp DL,AL
            jne .L_42e0b0

            lea RSI,QWORD PTR [R14+4]
            lea RDI,QWORD PTR [RBX+4]
            movzx EDX,DL
            mov QWORD PTR [RSP+8],R8
            call memcmp@PLT

            test EAX,EAX
            jne .L_42e0b0

            jmp .L_42e0fc
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e1d0:

            mov RSI,R8
            mov RDI,RBP
            call .L_42d9b0

            mov RAX,QWORD PTR [RSP+50]
            test RAX,RAX
            je .L_42e0b0

            mov R8D,11
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+58]
            call RAX

            jmp .L_42e0b0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e208:

            or EAX,1
            mov RDI,R8
            mov RCX,R15
            mov BYTE PTR [RSP+75],AL
            movzx EAX,WORD PTR [R8+58]
            mov EDX,60
            mov QWORD PTR [RSP+8],R8
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403ac0

            mov R8,QWORD PTR [RSP+8]
            jmp .L_42e16d
.L_42e239:

            call __stack_chk_fail@PLT
.L_42e23e:

            nop
            nop
.L_42e240:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_42e24b:

            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RDI],XMM0
            movzx EAX,WORD PTR [RDX+34]
            mov WORD PTR [RDI+32],AX
            movdqu XMM0,XMMWORD PTR [RDX+16]
            mov QWORD PTR [RDI+34],RCX
            mov QWORD PTR [RDI+42],R8
            movups XMMWORD PTR [RDI+16],XMM0
            mov BYTE PTR [RDI+58],0
            mov DWORD PTR [RDI+54],2000
            call .L_401460

            mov EDX,98685563
            mov ECX,EAX
            mul EDX
            mov EAX,ECX
            sub EAX,EDX
            shr EAX,1
            add EDX,EAX
            shr EDX,9
            imul EDX,EDX,1001
            sub ECX,EDX
            add DWORD PTR [RBX+54],ECX
            test BPL,BPL
            jne .L_42e2c8

            call .L_401240

            add EAX,93
            mov DWORD PTR [RBX+50],EAX
.L_42e2aa:

            movzx EAX,BYTE PTR [RBX+59]
            and EBP,1
            add EBP,EBP
            and EAX,4294967292
            or EBP,EAX
            mov BYTE PTR [RBX+59],BPL
            add RSP,8
.L_42e2c0:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e2c8:

            call .L_401240

            add EAX,DWORD PTR [RBX+54]
            mov DWORD PTR [RBX+50],EAX
            jmp .L_42e2aa
.L_42e2d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e2e0:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
            call .L_404440

            lea RAX,QWORD PTR [RBX+8]
            mov QWORD PTR [RBX+8],RBP
            mov DWORD PTR [RBX+16],0
            mov QWORD PTR [RBX+24],RAX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42e30b:

            nop
            nop
            nop
            nop
            nop
.L_42e310:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDX
            pxor XMM0,XMM0
            sub RSP,296
.L_42e328:

            lea RBX,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RCX
            movups XMMWORD PTR [RSP+72],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            movups XMMWORD PTR [RBX+24],XMM0
            movups XMMWORD PTR [RBX+40],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            mov DWORD PTR [RSP+64],0
            call .L_404570

            test RAX,RAX
            je .L_42e460

            mov R15,RAX
            lea R13,QWORD PTR [RBP+16]
            lea R12,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+128]
            jmp .L_42e3ac
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e398:

            mov RDI,R15
            call .L_4033c0

            test RAX,RAX
            mov R15,RAX
            je .L_42e460
.L_42e3ac:

            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBX
            mov EDX,56
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-56]
            movzx ESI,SI
            call .L_403860

            movdqu XMM0,XMMWORD PTR [RSP+72]
            movzx EAX,WORD PTR [RBP+34]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+88]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+104]
            movaps XMMWORD PTR [RSP+48],XMM0
            cmp WORD PTR [RSP+50],AX
            jne .L_42e398

            mov RSI,R13
            mov RDI,R12
            call .L_40f2b0

            test AL,AL
            jne .L_42e398

            mov EDX,56
            mov RSI,R15
            mov RDI,R14
            call .L_42f110

            test EAX,EAX
            jne .L_42e398

            mov RAX,QWORD PTR [RSP]
            movzx EAX,WORD PTR [RAX+2]
            cmp WORD PTR [RSP+130],AX
            jne .L_42e398

            movzx ESI,WORD PTR [R15+58]
            mov RDI,R15
            call .L_404020

            mov RBX,QWORD PTR [RSP+8]
            test RAX,RAX
            mov QWORD PTR [RBX],RAX
            je .L_42e490

            movzx ECX,WORD PTR [RAX+58]
            mov RDI,RAX
            lea ESI,DWORD PTR [RCX-56]
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            jne .L_42e49c

            xor EAX,EAX
            jmp .L_42e465
.L_42e460:

            mov EAX,23
.L_42e465:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42e497

            add RSP,296
.L_42e47f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42e490:

            mov EAX,3
            jmp .L_42e465
.L_42e497:

            call __stack_chk_fail@PLT
.L_42e49c:

            lea RCX,QWORD PTR [RIP+.L_459b80]
            lea RSI,QWORD PTR [RIP+.L_459b00]
            lea RDI,QWORD PTR [RIP+.L_459b10]
            mov EDX,299
            call __assert_fail@PLT
.L_42e4bb:

            nop
            nop
            nop
            nop
            nop
.L_42e4c0:

            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov RBP,RDI
            mov R13,RCX
            sub RSP,168
.L_42e4d8:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_42f110

            test EAX,EAX
            jne .L_42e50b

            mov RCX,R13
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_42e310
.L_42e50b:

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42e52c

            add RSP,168
.L_42e525:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42e52c:

            call __stack_chk_fail@PLT
.L_42e531:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e540:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_404570

            test RAX,RAX
            je .L_42e570

            mov RDI,RBP
            mov RSI,RAX
            mov RBX,RAX
            call .L_404640

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_4033b0
          .byte 0x90
.L_42e570:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42e577:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e580:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RDX
            mov RBP,RSI
            sub RSP,240
.L_42e594:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_401240

            movdqu XMM0,XMMWORD PTR [RBX]
            lea RDI,QWORD PTR [RSP+80]
            add EAX,247000
            xor EDX,EDX
            mov RSI,RBP
            movups XMMWORD PTR [RSP+24],XMM0
            mov DWORD PTR [RSP+16],EAX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [RSP+40],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movups XMMWORD PTR [RSP+56],XMM0
            call .L_42f110

            test EAX,EAX
            je .L_42e610
.L_42e5e5:

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42e6cd

            add RSP,240
.L_42e603:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42e610:

            lea RCX,QWORD PTR [RSP+8]
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_42e4c0

            test EAX,EAX
            je .L_42e6b0

            cmp EAX,23
            jne .L_42e5e5

            lea RDX,QWORD PTR [RSP+6]
            lea RSI,QWORD PTR [RSP+4]
            mov RDI,R12
            call .L_4046f0

            cmp WORD PTR [RSP+4],9
            ja .L_42e6c0
.L_42e64a:

            movzx ESI,WORD PTR [RBP+58]
            mov RDI,RBP
            call .L_404020

            test RAX,RAX
            mov QWORD PTR [RSP+8],RAX
            je .L_42e5e5

            lea RSI,QWORD PTR [RSP+16]
            mov EDX,56
            mov RDI,RAX
            lea RBX,QWORD PTR [R12+8]
            call .L_403d30

            mov RSI,QWORD PTR [RSP+8]
            mov EDX,1
            mov RDI,R12
            call .L_404580

            cmp RBX,QWORD PTR [R12+24]
            jne .L_42e5e5

            call .L_401240

            mov EDX,247000
            mov ESI,EAX
            mov RDI,RBX
            call .L_430d50

            jmp .L_42e5e5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e6b0:

            mov RDI,QWORD PTR [RSP+8]
            call .L_4033b0

            jmp .L_42e5e5
          .byte 0x90
.L_42e6c0:

            mov RDI,R12
            call .L_42e540

            jmp .L_42e64a
.L_42e6cd:

            call __stack_chk_fail@PLT
.L_42e6d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42e6e0:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov RBP,RDI
            mov RBX,RSI
            mov R14,RCX
            sub RSP,312
.L_42e702:

            lea R12,QWORD PTR [RSP+144]
            and BYTE PTR [RSP+75],252
            mov QWORD PTR [RSP+48],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,R12
            xor EAX,EAX
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            mov WORD PTR [RSP+72],AX
            mov BYTE PTR [RSP+74],0
            call .L_42f110

            test EAX,EAX
            jne .L_42e7e5

            movzx EDX,BYTE PTR [RSP+144]
            mov EAX,EDX
            and EAX,48
            and EDX,32
            je .L_42e810

            cmp BYTE PTR [RSP+145],0
            jne .L_42e880
.L_42e77d:

            test AL,AL
            jne .L_42e85b
.L_42e785:

            movzx R9D,WORD PTR [RBX+58]
.L_42e78a:

            xor R12D,R12D
            xor ECX,ECX
            test R9W,R9W
            jne .L_42e8c0
.L_42e799:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_42d5b0]
            mov QWORD PTR [RSP+8],RCX
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42e948

            lea RDI,QWORD PTR [RBP+8]
            mov RDX,R13
            mov RSI,RBX
            call .L_410a20

            mov RCX,QWORD PTR [RSP+8]
.L_42e7c9:

            test EAX,EAX
            je .L_42e7e5

            test R12B,R12B
            je .L_42e7e5

            mov RSI,RCX
            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_42d9b0

            mov EAX,DWORD PTR [RSP+8]
.L_42e7e5:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_42e96a

            add RSP,312
.L_42e803:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_42e810:

            cmp WORD PTR [RSP+146],0
            jne .L_42e77d
.L_42e81f:

            movzx EAX,WORD PTR [RBP+88]
            xor ESI,ESI
            mov RCX,R12
            mov RDI,RBX
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+146],AX
            mov WORD PTR [RBP+88],DX
            mov EDX,4
            call .L_403ac0

            movzx EAX,BYTE PTR [RSP+144]
            and EAX,48
            test AL,AL
            je .L_42e785
.L_42e85b:

            test R14,R14
            setne R12B
            cmp AL,16
            sete DL
            xor ECX,ECX
            and R12B,DL
            je .L_42e799

            movzx R9D,BYTE PTR [RSP+272]
            jmp .L_42e78a
.L_42e880:

            lea RDI,QWORD PTR [RBP+144]
            mov RDX,R13
            mov RSI,RBX
            call .L_42e580

            movzx EDX,BYTE PTR [RSP+144]
            mov EAX,EDX
            and EAX,48
            cmp WORD PTR [RSP+146],0
            jne .L_42e77d

            and EDX,32
            je .L_42e81f

            jmp .L_42e77d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42e8c0:

            xor ESI,ESI
            lea RDI,QWORD PTR [RSP+80]
            test AL,AL
            sete SIL
            mov R8,R15
            mov RCX,R14
            mov RDX,R13
            mov DWORD PTR [RSP+8],R9D
            call .L_42e240

            movdqa XMM0,XMMWORD PTR [RSP+80]
            lea RCX,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR [RSP+128]
            mov R9D,DWORD PTR [RSP+8]
            mov RSI,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov RDI,RBP
            movzx EDX,R9W
            movdqa XMM0,XMMWORD PTR [RSP+96]
            mov QWORD PTR [RSP+64],RAX
            mov EAX,DWORD PTR [RSP+136]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqa XMM0,XMMWORD PTR [RSP+112]
            mov DWORD PTR [RSP+72],EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42d900

            test RAX,RAX
            mov RCX,RAX
            je .L_42e960

            mov R12D,1
            jmp .L_42e799
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e948:

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call RAX

            mov RCX,QWORD PTR [RSP+8]
            jmp .L_42e7c9
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e960:

            mov EAX,3
            jmp .L_42e7e5
.L_42e96a:

            call __stack_chk_fail@PLT
.L_42e96f:

            nop
.L_42e970:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDX
            sub RSP,176
.L_42e982:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            movzx EAX,BYTE PTR [RDX+1]
            lea EDX,DWORD PTR [RAX-1]
            mov EAX,7
            cmp DL,3
            jbe .L_42e9d0
.L_42e9a6:

            mov RCX,QWORD PTR [RSP+168]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42eaba

            add RSP,176
.L_42e9c4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42e9d0:

            movzx EDX,BYTE PTR [RBX]
            mov RBP,RDI
            mov R12,RCX
            and EDX,48
            je .L_42ea98

            cmp DL,16
            jne .L_42e9a6

            lea R14,QWORD PTR [RSP+16]
            mov EDX,ESI
            mov ESI,16
            mov RDI,R14
            call .L_42f0e0

            movzx EAX,WORD PTR [RBP+88]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+18],AX
            mov WORD PTR [RBP+88],DX
.L_42ea0f:

            movzx R13D,BYTE PTR [RBX]
            movzx EAX,BYTE PTR [RSP+16]
            lea RSI,QWORD PTR [RBX+4]
            lea RDI,QWORD PTR [R14+4]
            mov ECX,148
            and R13D,15
            and EAX,4294967280
            or EAX,R13D
            movzx EDX,R13B
            mov BYTE PTR [RSP+16],AL
            call __memcpy_chk@PLT

            mov EDX,2
            mov RSI,R14
            mov RDI,RBP
            add BYTE PTR [RSP+144],R13B
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_42e9a6

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_42e6e0

            test EAX,EAX
            je .L_42e9a6

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_42e9a6
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42ea98:

            lea R14,QWORD PTR [RSP+16]
            mov EDX,ESI
            mov ESI,32
            mov RDI,R14
            call .L_42f0e0

            movzx EAX,WORD PTR [RBX+2]
            mov WORD PTR [RSP+18],AX
            jmp .L_42ea0f
.L_42eaba:

            call __stack_chk_fail@PLT
.L_42eabf:

            nop
.L_42eac0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov RBP,RDI
            pxor XMM0,XMM0
            mov R12,RSI
            sub RSP,88
.L_42eade:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+136]
            mov QWORD PTR [RSP+24],0
            movaps XMMWORD PTR [RSP+32],XMM0
            test RAX,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_42eb60

            mov RSI,RCX
            mov RDX,QWORD PTR [RDI+128]
            mov RDI,R15
            call RAX

            test EAX,EAX
            mov R13D,EAX
            je .L_42eb70
.L_42eb23:

            cmp R13D,23
            je .L_42ec98
.L_42eb2d:

            mov RDI,QWORD PTR [RSP+24]
            test RDI,RDI
            je .L_42eb3c

            call .L_4033b0
.L_42eb3c:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ecf7

            add RSP,88
.L_42eb54:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_42eb60:

            mov R13D,23
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42eb70:

            movzx ESI,BYTE PTR [R12+128]
            mov RDI,R15
            call .L_4034e0

            lea RCX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RBP+144]
            mov RDX,R14
            mov RSI,R12
            call .L_42e310

            test EAX,EAX
            je .L_42ec60

            cmp EAX,3
            je .L_42ec87

            mov RDI,R12
            call .L_42f8a0

            test RAX,RAX
            je .L_42ece5

            lea RBX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RBX
            nop
            nop
            nop
            nop
.L_42ebc8:

            cmp WORD PTR [RAX],11
            jne .L_42ec0f

            cmp RBX,QWORD PTR [RSP+8]
            mov RCX,RBX
            je .L_42ebdf

            add RCX,1
            mov BYTE PTR [RBX],47
.L_42ebdf:

            lea RDX,QWORD PTR [RCX+1]
            sub RDX,QWORD PTR [RSP+8]
            movzx EBX,WORD PTR [RAX+2]
            mov ESI,32
            sub RSI,RDX
            cmp RBX,RSI
            jae .L_42ec87

            mov RSI,QWORD PTR [RAX+8]
            mov RDX,RBX
            mov RDI,RCX
            call memcpy@PLT

            add RBX,RAX
.L_42ec0f:

            mov RDI,R12
            call .L_42f750

            test RAX,RAX
            jne .L_42ebc8
.L_42ec1c:

            mov BYTE PTR [RBX],0
            mov RBX,QWORD PTR [RBP+120]
            test RBX,RBX
            jne .L_42ec39

            jmp .L_42ecb0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42ec30:

            mov RBX,QWORD PTR [RBX+24]
            test RBX,RBX
            je .L_42ecb0
.L_42ec39:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RBX]
            call strcmp@PLT

            test EAX,EAX
            jne .L_42ec30

            mov RDI,QWORD PTR [RBX+16]
            mov RCX,R14
            mov RDX,R15
            mov RSI,R12
            call QWORD PTR [RBX+8]

            jmp .L_42eb3c
          .byte 0x90
.L_42ec60:

            mov RAX,QWORD PTR [RBP]
            lea RDX,QWORD PTR [RIP+.L_42d5b0]
            mov RSI,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RAX]
            cmp RAX,RDX
            jne .L_42ecd8

            lea RDI,QWORD PTR [RBP+8]
            mov RDX,R14
            call .L_410a20

            mov R13D,EAX
.L_42ec87:

            test R13D,R13D
            je .L_42eb3c

            jmp .L_42eb23
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42ec98:

            mov RCX,R14
            mov RDX,R12
            mov ESI,132
            mov RDI,RBP
            call .L_42e970

            jmp .L_42eb2d
.L_42ecb0:

            mov RAX,QWORD PTR [RBP+176]
            test RAX,RAX
            je .L_42ec87

            mov RDI,QWORD PTR [RBP+184]
            mov RCX,R14
            mov RDX,R15
            mov RSI,R12
            call RAX

            jmp .L_42eb3c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42ecd8:

            mov RDX,R14
            mov RDI,RBP
            call RAX

            mov R13D,EAX
            jmp .L_42ec87
.L_42ece5:

            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RAX
            mov RBX,RAX
            jmp .L_42ec1c
.L_42ecf7:

            call __stack_chk_fail@PLT
.L_42ecfc:

            nop
            nop
            nop
            nop
.L_42ed00:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            xor EDX,EDX
            mov R12,RDI
            mov RBP,RSI
            sub RSP,168
.L_42ed18:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            call .L_42f110

            test EAX,EAX
            jne .L_42ed57

            movzx EAX,BYTE PTR [RSP+1]
            mov RCX,R13
            mov RDX,RBP
            mov RSI,RBX
            mov RDI,R12
            sub EAX,1
            cmp AL,3
            jbe .L_42ed80

            call .L_42dff0
.L_42ed57:

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ed87

            add RSP,168
.L_42ed71:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42ed80:

            call .L_42eac0

            jmp .L_42ed57
.L_42ed87:

            call __stack_chk_fail@PLT
.L_42ed8c:

            nop
            nop
            nop
            nop
.L_42ed90:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            jmp .L_42edb3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42eda0:

            mov RDI,RBP
            mov RSI,RAX
            call .L_404640

            mov RDI,RBX
            call .L_4033b0
.L_42edb3:

            mov RDI,RBP
            call .L_404570

            test RAX,RAX
            mov RBX,RAX
            jne .L_42eda0

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_42edca:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42edd0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            add RDI,80
            sub RSP,88
.L_42ede1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_404570

            xor EDX,EDX
            and BYTE PTR [RSP+59],252
            test RAX,RAX
            mov QWORD PTR [RSP+32],0
            mov QWORD PTR [RSP+40],0
            mov QWORD PTR [RSP+48],0
            mov WORD PTR [RSP+56],DX
            mov BYTE PTR [RSP+58],0
            je .L_42ee85

            mov RBX,RAX
            mov R13,RSP
            nop
            nop
            nop
.L_42ee30:

            mov RDI,RBX
            call .L_4033c0

            mov R12,RAX
            movzx EAX,WORD PTR [RBX+58]
            mov RCX,R13
            mov EDX,60
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-60]
            movzx ESI,SI
            call .L_403860

            mov RSI,RBX
            mov RDI,RBP
            call .L_42d9b0

            mov RAX,QWORD PTR [RSP+34]
            test RAX,RAX
            je .L_42ee7d

            mov R8D,11
            xor ECX,ECX
            xor EDX,EDX
            xor ESI,ESI
            mov RDI,QWORD PTR [RSP+42]
            call RAX
.L_42ee7d:

            test R12,R12
            mov RBX,R12
            jne .L_42ee30
.L_42ee85:

            lea RDI,QWORD PTR [RBP+144]
            call .L_42ed90

            lea RDI,QWORD PTR [RBP+8]
            call .L_4109a0

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_42eeb5

            add RSP,88
.L_42eeae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42eeb5:

            call __stack_chk_fail@PLT
.L_42eeba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_42eec0:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            pxor XMM0,XMM0
            sub RSP,72
.L_42eed1:

            mov R13,RSP
            mov DWORD PTR [RSP],0
            movups XMMWORD PTR [RSP+8],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movups XMMWORD PTR [R13+24],XMM0
            movups XMMWORD PTR [R13+40],XMM0
            jmp .L_42ef39
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ef00:

            movzx EAX,WORD PTR [RAX+58]
            mov RCX,R13
            mov EDX,56
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-56]
            movzx ESI,SI
            call .L_403860

            call .L_401240

            mov EBP,DWORD PTR [RSP]
            cmp EAX,EBP
            js .L_42ef68

            mov RDI,R12
            mov RSI,RBX
            call .L_404640

            mov RDI,RBX
            call .L_4033b0
.L_42ef39:

            mov RDI,R12
            call .L_404570

            test RAX,RAX
            mov RBX,RAX
            jne .L_42ef00
.L_42ef49:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42ef8e

            add RSP,72
.L_42ef5d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42ef68:

            call .L_401240

            mov EBX,EAX
            call .L_401240

            mov EDX,EBP
            mov ECX,0
            lea RDI,QWORD PTR [R12+8]
            sub EDX,EBX
            mov ESI,EAX
            cmovs EDX,ECX
            call .L_430d50

            jmp .L_42ef49
.L_42ef8e:

            call __stack_chk_fail@PLT
.L_42ef93:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42efa0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b00

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_42eec0
.L_42efc1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42efd0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b30

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_42eec0
.L_42eff1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f000:

            push RBX
            mov EBX,DWORD PTR [RDI]
            call .L_401240

            sub EBX,EAX
            mov EDX,0
            mov EAX,EBX
            cmovs EAX,EDX
            pop RBX
            ret 
.L_42f016:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f020:

            push RBX
            lea RCX,QWORD PTR [RIP+.L_42efa0]
            lea RDX,QWORD PTR [RIP+.L_42de40]
            mov RBX,RDI
            call .L_42d5c0

            lea RAX,QWORD PTR [RIP+.L_6768b8]
            mov QWORD PTR [RBX],RAX
            pop RBX
            ret 
.L_42f043:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f050:

            push RBX
            lea RCX,QWORD PTR [RIP+.L_42efd0]
            lea RDX,QWORD PTR [RIP+.L_42de60]
            mov RBX,RDI
            call .L_42d5c0

            lea RAX,QWORD PTR [RIP+.L_6768d8]
            mov QWORD PTR [RBX],RAX
            pop RBX
            ret 
.L_42f073:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f080:

            pxor XMM0,XMM0
            xor EAX,EAX
            mov WORD PTR [RDI+134],AX
            mov BYTE PTR [RDI+128],4
            mov RDX,RDI
            mov DWORD PTR [RDI+130],0
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            movups XMMWORD PTR [RDI+128],XMM0
            mov QWORD PTR [RDI+112],0
            mov RCX,RDX
            and RDI,-8
            sub RCX,RDI
            xor EAX,EAX
            sub ECX,-128
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movzx EAX,BYTE PTR [RDX]
            and EAX,63
            or EAX,64
            mov BYTE PTR [RDX],AL
            ret 
.L_42f0dc:

            nop
            nop
            nop
            nop
.L_42f0e0:

            mov R8,RDI
            sub RSP,8
            mov R9D,EDX
            call .L_42f080

            movzx EAX,BYTE PTR [R8]
            mov BYTE PTR [R8+1],R9B
            and EAX,4294967247
            or ESI,EAX
            mov BYTE PTR [R8],SIL
            add RSP,8
            ret 
.L_42f104:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f110:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_42f121:

            movzx R14D,WORD PTR [RSI+60]
            movzx EBP,WORD PTR [RSI+58]
            sub EBP,R14D
            sub EBP,EDX
            call .L_42f080

            cmp BP,3
            jbe .L_42f380

            mov R13,RSI
            mov RCX,RBX
            movzx ESI,R14W
            mov EDX,4
            mov RDI,R13
            call .L_403860

            movzx R12D,BYTE PTR [RBX]
            mov BYTE PTR [RBX+128],4
            mov EAX,R12D
            shr AL,6
            cmp AL,1
            jne .L_42f380

            and R12D,15
            cmp R12B,8
            ja .L_42f380

            movzx EDX,R12B
            movzx EBP,BP
            lea EAX,DWORD PTR [RDX+4]
            cmp EAX,EBP
            jg .L_42f380

            add R14D,4
            lea RCX,QWORD PTR [RBX+4]
            mov RDI,R13
            movzx ESI,R14W
            call .L_403860

            movzx ECX,BYTE PTR [RBX+128]
            add ECX,R12D
            movzx R12D,R12B
            movzx EAX,CL
            add R12D,R14D
            mov BYTE PTR [RBX+128],CL
            cmp EBP,EAX
            jle .L_42f378

            cmp CL,123
            ja .L_42f380

            mov R14D,1
            jmp .L_42f27c
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f1e0:

            add R12D,1
.L_42f1e4:

            cmp SIL,12
            ja .L_42f326
.L_42f1ee:

            movzx ECX,BYTE PTR [RBX+128]
.L_42f1f5:

            test R14B,R14B
            je .L_42f223

            movzx EAX,CL
            mov WORD PTR [RBX+136],DI
            mov WORD PTR [RBX+138],R15W
            add RAX,RBX
            mov QWORD PTR [RBX+144],RAX
            movzx EAX,CL
            add EAX,R15D
            mov WORD PTR [RBX+134],AX
.L_42f223:

            movzx EDX,R15W
            movzx EAX,CL
            add EAX,EDX
            cmp EAX,128
            setg R14B
            cmp EBP,EAX
            setl AL
            or R14B,AL
            jne .L_42f380

            movzx ECX,CL
            movzx ESI,R12W
            mov RDI,R13
            add RCX,RBX
            add R12D,R15D
            call .L_403860

            movzx ECX,BYTE PTR [RBX+128]
            add ECX,R15D
            movzx EAX,CL
            mov BYTE PTR [RBX+128],CL
            cmp EBP,EAX
            jle .L_42f378

            cmp CL,123
            ja .L_42f380
.L_42f27c:

            movzx ECX,CL
            mov EDX,5
            movzx ESI,R12W
            add RCX,RBX
            mov RDI,R13
            call .L_403860

            movzx EAX,BYTE PTR [RBX+128]
            movzx EDX,BYTE PTR [RBX+RAX*1]
            mov RCX,RAX
            cmp DL,255
            je .L_42f3e8

            test R14B,R14B
            je .L_42f2b9

            movzx EAX,AL
            mov WORD PTR [RBX+132],AX
.L_42f2b9:

            movzx EAX,DL
            mov ESI,EDX
            lea EDX,DWORD PTR [RCX+1]
            sar EAX,4
            and ESI,15
            cmp EAX,12
            mov EDI,EAX
            movzx R15D,SIL
            mov BYTE PTR [RBX+128],DL
            jle .L_42f1e0

            cmp EAX,13
            je .L_42f3a0

            cmp AX,14
            jne .L_42f380

            movzx EAX,DL
            add R12D,3
            movzx EDI,BYTE PTR [RBX+RAX*1]
            mov RDX,RAX
            add EDX,1
            movsxd RDX,EDX
            mov EAX,EDI
            movzx EDI,BYTE PTR [RBX+RDX*1]
            shl EAX,8
            or EDI,EAX
            lea EAX,DWORD PTR [RCX+3]
            add DI,269
            cmp SIL,12
            mov BYTE PTR [RBX+128],AL
            jbe .L_42f1ee
.L_42f326:

            cmp SIL,13
            je .L_42f3c0

            cmp R15W,14
            jne .L_42f380

            movzx EAX,BYTE PTR [RBX+128]
            add R12D,2
            movsxd RDX,EAX
            mov ECX,EAX
            add EAX,1
            movzx R15D,BYTE PTR [RBX+RDX*1]
            cdqe 
            add ECX,2
            mov EDX,R15D
            movzx R15D,BYTE PTR [RBX+RAX*1]
            mov BYTE PTR [RBX+128],CL
            shl EDX,8
            or R15D,EDX
            add R15W,269
            jmp .L_42f1f5
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f378:

            cmp EBP,EAX
            je .L_42f3f8

            nop
            nop
            nop
            nop
.L_42f380:

            xor EAX,EAX
            mov WORD PTR [RBX+132],AX
            mov EAX,6
.L_42f38e:

            add RSP,8
.L_42f392:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f3a0:

            movzx EDX,DL
            lea EAX,DWORD PTR [RCX+2]
            add R12D,2
            movzx EDI,BYTE PTR [RBX+RDX*1]
            mov BYTE PTR [RBX+128],AL
            add EDI,13
            jmp .L_42f1e4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42f3c0:

            movzx EAX,BYTE PTR [RBX+128]
            add R12D,1
            movzx R15D,BYTE PTR [RBX+RAX*1]
            mov RCX,RAX
            add ECX,1
            mov BYTE PTR [RBX+128],CL
            add R15D,13
            jmp .L_42f1f5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f3e8:

            lea EAX,DWORD PTR [RAX+1]
            mov BYTE PTR [RBX+128],AL
            movzx EAX,AL
            cmp EBP,EAX
            jle .L_42f380
.L_42f3f8:

            xor EAX,EAX
            jmp .L_42f38e
.L_42f3fc:

            nop
            nop
            nop
            nop
.L_42f400:

            movzx EDX,WORD PTR [RSI]
            movzx ECX,WORD PTR [RDI+130]
            mov EAX,7
            cmp DX,CX
            jb .L_42f4d8

            push R12
            sub EDX,ECX
            push RBP
            push RBX
.L_42f41e:

            movzx ECX,WORD PTR [RSI+2]
            cmp DX,12
            lea EAX,DWORD PTR [RCX+1]
            jbe .L_42f439

            xor EAX,EAX
            cmp DX,268
            seta AL
            lea EAX,DWORD PTR [RCX+RAX*1+2]
.L_42f439:

            cmp CX,12
            jbe .L_42f451

            mov R8D,EAX
            xor EAX,EAX
            cmp CX,268
            seta AL
            lea EAX,DWORD PTR [RAX+R8*1+1]
.L_42f451:

            movzx ECX,BYTE PTR [RDI+128]
            movzx EAX,AX
            mov RBP,RCX
            add ECX,EAX
            mov EAX,3
            cmp ECX,127
            jg .L_42f4ce

            add RBP,RDI
            cmp DX,12
            ja .L_42f500

            movzx EDX,DX
            lea RCX,QWORD PTR [RBP+1]
            shl EDX,4
            mov EAX,EDX
            mov BYTE PTR [RBP],DL
.L_42f486:

            movzx EDX,WORD PTR [RSI+2]
            cmp DX,12
            ja .L_42f4e0

            or EAX,EDX
            mov BYTE PTR [RBP],AL
.L_42f495:

            movzx EDX,WORD PTR [RSI+2]
            mov RBX,RSI
            mov RSI,QWORD PTR [RSI+8]
            mov R12,RDI
            mov RDI,RCX
            call memcpy@PLT

            mov RCX,RAX
            movzx EAX,WORD PTR [RBX+2]
            add RCX,RAX
            sub RCX,RBP
            add BYTE PTR [R12+128],CL
            movzx EAX,WORD PTR [RBX]
            mov WORD PTR [R12+130],AX
            xor EAX,EAX
.L_42f4ce:

            pop RBX
.L_42f4cf:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f4d8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f4e0:

            cmp DX,268
            ja .L_42f540

            or EAX,13
            add RCX,1
            mov BYTE PTR [RBP],AL
            movzx EAX,BYTE PTR [RSI+2]
            sub EAX,13
            mov BYTE PTR [RCX-1],AL
            jmp .L_42f495
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f500:

            cmp DX,268
            movzx EAX,BYTE PTR [RBP]
            ja .L_42f520

            or EAX,4294967248
            sub EDX,13
            lea RCX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP],AL
            mov BYTE PTR [RBP+1],DL
            jmp .L_42f486
.L_42f520:

            sub DX,269
            or EAX,4294967264
            movzx ECX,DH
            mov BYTE PTR [RBP],AL
            mov BYTE PTR [RBP+2],DL
            mov BYTE PTR [RBP+1],CL
            lea RCX,QWORD PTR [RBP+3]
            jmp .L_42f486
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_42f540:

            or EAX,14
            add RCX,2
            mov BYTE PTR [RBP],AL
            movzx EAX,WORD PTR [RSI+2]
            sub AX,269
            movzx EDX,AH
            mov BYTE PTR [RCX-1],AL
            mov BYTE PTR [RCX-2],DL
            jmp .L_42f495
.L_42f560:

            sub RSP,56
.L_42f564:

            bswap EDX
            mov ECX,4
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+12]
            test DL,DL
            mov DWORD PTR [RSP+12],EDX
            mov WORD PTR [RSP+16],SI
            mov WORD PTR [RSP+18],CX
            mov QWORD PTR [RSP+24],RAX
            jne .L_42f5bb

            mov EDX,4
            jmp .L_42f5a5
          .byte 0x66
          .byte 0x90
.L_42f5a0:

            test DX,DX
            je .L_42f5e0
.L_42f5a5:

            add RAX,1
            sub EDX,1
            cmp BYTE PTR [RAX],0
            je .L_42f5a0

            mov QWORD PTR [RSP+24],RAX
            mov WORD PTR [RSP+18],DX
.L_42f5bb:

            lea RSI,QWORD PTR [RSP+16]
            call .L_42f400

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_42f5ee

            add RSP,56
.L_42f5d9:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f5e0:

            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+18],AX
            jmp .L_42f5bb
.L_42f5ee:

            call __stack_chk_fail@PLT
.L_42f5f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f600:

            mov EDX,ESI
            mov ESI,6
            and EDX,16777215
            jmp .L_42f560
.L_42f612:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f620:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,40
.L_42f630:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,11
            mov R13,RSP
            mov WORD PTR [RSP],AX
            jmp .L_42f670
          .byte 0x66
          .byte 0x90
.L_42f650:

            sub RAX,RBX
            mov RSI,R13
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_42f400

            test EAX,EAX
            jne .L_42f6a2

            lea RBX,QWORD PTR [RBP+1]
.L_42f670:

            mov ESI,47
            mov RDI,RBX
            call strchr@PLT

            test RAX,RAX
            mov RBP,RAX
            jne .L_42f650

            mov RDI,RBX
            call strlen@PLT

            mov RSI,R13
            mov RDI,R12
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_42f400
.L_42f6a2:

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_42f6bd

            add RSP,40
.L_42f6b6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_42f6bd:

            call __stack_chk_fail@PLT
.L_42f6c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f6d0:

            mov EDX,ESI
            mov ESI,12
            jmp .L_42f560
.L_42f6dc:

            nop
            nop
            nop
            nop
.L_42f6e0:

            mov EDX,ESI
            mov ESI,14
            jmp .L_42f560
.L_42f6ec:

            nop
            nop
            nop
            nop
.L_42f6f0:

            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,RSI
            mov RBX,RSI
            sub RSP,40
.L_42f6ff:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,15
            mov WORD PTR [RSP],AX
            call strlen@PLT

            mov RSI,RSP
            mov RDI,RBP
            mov WORD PTR [RSP+2],AX
            mov QWORD PTR [RSP+8],RBX
            call .L_42f400

            mov RDX,QWORD PTR [RSP+24]
            xor RDX,QWORD PTR FS:[40]
            jne .L_42f749

            add RSP,40
.L_42f746:

            pop RBX
            pop RBP
            ret 
.L_42f749:

            call __stack_chk_fail@PLT
.L_42f74e:

            nop
            nop
.L_42f750:

            movzx R9D,WORD PTR [RDI+134]
            movzx EAX,BYTE PTR [RDI+128]
            cmp R9W,AX
            jae .L_42f850

            movzx EAX,R9W
            lea ESI,DWORD PTR [R9+1]
            movzx ECX,BYTE PTR [RDI+RAX*1]
            mov WORD PTR [RDI+134],SI
            mov EDX,ECX
            sar ECX,4
            and EDX,15
            cmp ECX,12
            mov R8D,ECX
            movzx EAX,DL
            jle .L_42f7d2

            cmp ECX,13
            je .L_42f858

            cmp CX,14
            jne .L_42f850

            movzx ECX,SI
            movzx R8D,BYTE PTR [RDI+RCX*1]
            mov RSI,RCX
            add ESI,1
            movsxd RSI,ESI
            mov ECX,R8D
            movzx R8D,BYTE PTR [RDI+RSI*1]
            shl ECX,8
            or R8D,ECX
            lea ECX,DWORD PTR [R9+3]
            add R8W,269
            mov WORD PTR [RDI+134],CX
.L_42f7d2:

            cmp DL,12
            jbe .L_42f840
.L_42f7d7:

            cmp DL,13
            je .L_42f880

            cmp AX,14
            jne .L_42f850

            movzx ECX,WORD PTR [RDI+134]
            movsxd RAX,ECX
            mov EDX,ECX
            add ECX,1
            movzx EAX,BYTE PTR [RDI+RAX*1]
            movsxd RCX,ECX
            add EDX,2
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RDI+RCX*1]
            or EAX,ESI
            add AX,269
.L_42f80e:

            movzx ECX,DX
            mov WORD PTR [RDI+138],AX
            add EAX,EDX
            add RCX,RDI
            mov WORD PTR [RDI+134],AX
            add WORD PTR [RDI+136],R8W
            mov QWORD PTR [RDI+144],RCX
            lea RAX,QWORD PTR [RDI+136]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f840:

            movzx EDX,WORD PTR [RDI+134]
            jmp .L_42f80e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42f850:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f858:

            movzx ESI,SI
            lea ECX,DWORD PTR [R9+2]
            movzx R8D,BYTE PTR [RDI+RSI*1]
            mov WORD PTR [RDI+134],CX
            add R8D,13
            cmp DL,12
            ja .L_42f7d7

            jmp .L_42f840
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f880:

            movzx EAX,WORD PTR [RDI+134]
            mov RDX,RAX
            movzx EAX,BYTE PTR [RDI+RAX*1]
            add EDX,1
            add EAX,13
            jmp .L_42f80e
.L_42f899:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f8a0:

            movzx EAX,WORD PTR [RDI+132]
            test AX,AX
            je .L_42f8c8

            pxor XMM0,XMM0
            mov WORD PTR [RDI+134],AX
            movups XMMWORD PTR [RDI+136],XMM0
            jmp .L_42f750
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f8c8:

            xor EAX,EAX
            ret 
.L_42f8cb:

            nop
            nop
            nop
            nop
            nop
.L_42f8d0:

            movzx EAX,BYTE PTR [RDI+128]
            test AL,AL
            js .L_42f8f0

            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+128],DL
            mov BYTE PTR [RDI+RAX*1],255
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f8f0:

            mov EAX,3
            ret 
.L_42f8f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42f900:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_42f90e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp SIL,8
            mov QWORD PTR [RSP],0
            ja .L_42fa3d

            movzx EAX,SIL
            mov R13,RDI
            mov R12D,ESI
            sub EAX,1
            test SIL,SIL
            movzx EBP,SIL
            mov R15,RSP
            je .L_42f969

            movzx EAX,AX
            mov RBX,R15
            lea R14,QWORD PTR [R15+RAX*1+1]
            nop
            nop
            nop
            nop
.L_42f958:

            add RBX,1
            call .L_401460

            cmp RBX,R14
            mov BYTE PTR [RBX-1],AL
            jne .L_42f958
.L_42f969:

            movzx EAX,BYTE PTR [R13]
            lea RDX,QWORD PTR [R13+4]
            and EAX,4294967280
            or EAX,R12D
            cmp EBP,8
            mov BYTE PTR [R13],AL
            jae .L_42f9d0

            test BPL,4
            jne .L_42fa14

            test EBP,EBP
            je .L_42f9a1

            movzx EAX,BYTE PTR [R15]
            test BPL,2
            mov BYTE PTR [R13+4],AL
            jne .L_42fa2b
.L_42f9a1:

            add BYTE PTR [R13+128],R12B
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42fa5c

            add RSP,24
.L_42f9c0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42f9d0:

            mov RAX,QWORD PTR [RSP]
            mov QWORD PTR [R13+4],RAX
            mov EAX,EBP
            mov RCX,QWORD PTR [R15+RAX*1-8]
            mov QWORD PTR [RDX+RAX*1-8],RCX
            lea RAX,QWORD PTR [R13+12]
            and RAX,-8
            sub RDX,RAX
            add EBP,EDX
            sub R15,RDX
            and EBP,4294967288
            cmp EBP,8
            jb .L_42f9a1

            and EBP,4294967288
            xor EDX,EDX
.L_42fa01:

            mov ECX,EDX
            add EDX,8
            mov RSI,QWORD PTR [R15+RCX*1]
            cmp EDX,EBP
            mov QWORD PTR [RAX+RCX*1],RSI
            jb .L_42fa01

            jmp .L_42f9a1
.L_42fa14:

            mov EAX,DWORD PTR [R15]
            mov DWORD PTR [R13+4],EAX
            mov EAX,EBP
            mov ECX,DWORD PTR [R15+RAX*1-4]
            mov DWORD PTR [RDX+RAX*1-4],ECX
            jmp .L_42f9a1
.L_42fa2b:

            mov EAX,EBP
            movzx ECX,WORD PTR [R15+RAX*1-2]
            mov WORD PTR [RDX+RAX*1-2],CX
            jmp .L_42f9a1
.L_42fa3d:

            lea RCX,QWORD PTR [RIP+.L_459c60]
            lea RSI,QWORD PTR [RIP+.L_459c1c]
            lea RDI,QWORD PTR [RIP+.L_459c38]
            mov EDX,421
            call __assert_fail@PLT
.L_42fa5c:

            call __stack_chk_fail@PLT
.L_42fa61:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fa70:

            mov R8,RDI
            sub RSP,8
.L_42fa77:

            call .L_42f080

            movzx EAX,BYTE PTR [R8]
            mov BYTE PTR [R8+1],68
            lea RDI,QWORD PTR [R8+4]
            lea R9,QWORD PTR [RSI+4]
            mov EDX,EAX
            and EAX,4294967232
            and EDX,4294967247
            or EDX,32
            mov BYTE PTR [R8],DL
            movzx EDX,WORD PTR [RSI+2]
            mov WORD PTR [R8+2],DX
            movzx ECX,BYTE PTR [RSI]
            and ECX,15
            mov EDX,ECX
            or EDX,32
            or EAX,EDX
            mov BYTE PTR [R8],AL
            movzx EAX,CL
            cmp EAX,8
            jae .L_42fae0

            test AL,4
            jne .L_42fb28

            test EAX,EAX
            je .L_42fad0

            movzx EDX,BYTE PTR [RSI+4]
            test AL,2
            mov BYTE PTR [R8+4],DL
            jne .L_42fb40
.L_42fad0:

            add BYTE PTR [R8+128],CL
            add RSP,8
.L_42fadb:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42fae0:

            mov RDX,QWORD PTR [RSI+4]
            mov QWORD PTR [R8+4],RDX
            mov EDX,EAX
            mov RSI,QWORD PTR [R9+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-8],RSI
            lea RDX,QWORD PTR [R8+12]
            and RDX,-8
            sub RDI,RDX
            add EAX,EDI
            sub R9,RDI
            and EAX,4294967288
            cmp EAX,8
            jb .L_42fad0

            and EAX,4294967288
            xor ESI,ESI
.L_42fb11:

            mov EDI,ESI
            add ESI,8
            mov R10,QWORD PTR [R9+RDI*1]
            cmp ESI,EAX
            mov QWORD PTR [RDX+RDI*1],R10
            jb .L_42fb11

            jmp .L_42fad0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42fb28:

            mov EDX,DWORD PTR [RSI+4]
            mov DWORD PTR [R8+4],EDX
            mov EDX,EAX
            mov EAX,DWORD PTR [R9+RDX*1-4]
            mov DWORD PTR [RDI+RDX*1-4],EAX
            jmp .L_42fad0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42fb40:

            mov EDX,EAX
            movzx EAX,WORD PTR [R9+RDX*1-2]
            mov WORD PTR [RDI+RDX*1-2],AX
            jmp .L_42fad0
.L_42fb4f:

            nop
.L_42fb50:

            mov RDX,QWORD PTR [RDI+240]
            movzx EAX,SIL
            test RDX,RDX
            je .L_42fb70

            mov RSI,QWORD PTR [RDI+248]
            mov EDI,EAX
            jmp RDX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42fb70:

            ret 
.L_42fb72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fb80:

            push RBX
            mov RBX,RSI
            call .L_430af0

            movzx EDX,WORD PTR [RBX+58]
            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+8504]
            pop RBX
            jmp .L_4357e0
.L_42fb9d:

            nop
            nop
            nop
.L_42fba0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RDI
            sub RSP,40
.L_42fbb7:

            lea R15,QWORD PTR [RBX+208]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            lea R12,QWORD PTR [RAX+8504]
            mov R14,RAX
            mov RDI,R12
            call .L_4356c0

            test AL,AL
            jne .L_42fcc0

            movzx EAX,WORD PTR [RBP+34]
            lea RDI,QWORD PTR [RBX+8]
            mov RSI,RSP
            movdqu XMM0,XMMWORD PTR [RBP+16]
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_410980

            mov RSI,RBP
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movups XMMWORD PTR [RBX+208],XMM0
            movzx EAX,WORD PTR [RBP+34]
            mov WORD PTR [RBX+226],AX
            movzx EAX,BYTE PTR [RBP+36]
            mov BYTE PTR [RBX+228],AL
            call .L_410860

            test AL,AL
            jne .L_42fce0
.L_42fc44:

            movzx EAX,WORD PTR [RBP+32]
            lea R8,QWORD PTR [RIP+.L_430150]
            lea RCX,QWORD PTR [RIP+.L_430260]
            lea RDX,QWORD PTR [RIP+.L_42fb50]
            mov R9,RBX
            xor ESI,ESI
            mov RDI,R12
            mov WORD PTR [RBX+224],AX
            call .L_435d40
.L_42fc71:

            mov EDX,16
            mov RSI,R15
            mov RDI,R12
            call .L_435780

            movzx EDX,WORD PTR [R13+60]
            movzx ECX,WORD PTR [R13+58]
            mov RSI,R13
            mov RDI,R12
            sub ECX,EDX
            movzx ECX,CX
            call .L_435d00
.L_42fc9b:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_42fcf1

            add RSP,40
.L_42fcaf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_42fcc0:

            lea RSI,QWORD PTR [RBP+16]
            mov RDI,R15
            call .L_40f290

            test AL,AL
            je .L_42fc9b

            movzx EAX,WORD PTR [RBP+34]
            cmp WORD PTR [RBX+226],AX
            jne .L_42fc9b

            jmp .L_42fc71
          .byte 0x90
.L_42fce0:

            movdqu XMM0,XMMWORD PTR [RBP]
            movups XMMWORD PTR [RBX+192],XMM0
            jmp .L_42fc44
.L_42fcf1:

            call __stack_chk_fail@PLT
.L_42fcf6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fd00:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b80

            add RSP,8
            mov RDI,RAX
            jmp .L_42dc40
.L_42fd1d:

            nop
            nop
            nop
.L_42fd20:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b80

            lea RDI,QWORD PTR [RAX+144]
            add RSP,8
            jmp .L_42eec0
.L_42fd41:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fd50:

            push RBP
            push RBX
            lea RCX,QWORD PTR [RIP+.L_42fd20]
            lea RDX,QWORD PTR [RIP+.L_42fd00]
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_42fd6a:

            call .L_42d5c0

            pxor XMM0,XMM0
            lea RAX,QWORD PTR [RIP+.L_676918]
            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+248],0
            lea RDI,QWORD PTR [RBX+280]
            mov QWORD PTR [RBX],RAX
            mov QWORD PTR [RBX+256],0
            mov RCX,RBX
            movups XMMWORD PTR [RBX+192],XMM0
            mov QWORD PTR [RBX+264],0
            mov QWORD PTR [RBX+272],0
            mov RSI,RBP
            movups XMMWORD PTR [RBX+208],XMM0
            lea RDX,QWORD PTR [RIP+.L_4301c0]
            movups XMMWORD PTR [RBX+224],XMM0
            add RSP,8
.L_42fde1:

            pop RBX
            pop RBP
            jmp .L_404b20
.L_42fde8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fdf0:

            test RDX,RDX
            mov QWORD PTR [RDI+256],RDX
            mov QWORD PTR [RDI+264],RCX
            je .L_42fe10

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_42fe10:

            movzx ESI,SI
            jmp .L_42d680
.L_42fe18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42fe20:

            push RBX
.L_42fe21:

            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            call .L_4356c0

            test AL,AL
            jne .L_42fe78
.L_42fe39:

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_42fe55

            call .L_4033b0

            mov QWORD PTR [RBX+272],0
.L_42fe55:

            mov QWORD PTR [RBX+256],0
            mov QWORD PTR [RBX+264],0
            mov RDI,RBX
            pop RBX
.L_42fe6f:

            jmp .L_42edd0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_42fe78:

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            call .L_435670

            jmp .L_42fe39
.L_42fe8e:

            nop
            nop
.L_42fe90:

            push RBX

            mov RBX,RDI
            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI+192],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDI+208],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            mov QWORD PTR [RDI+240],RDX
            mov QWORD PTR [RDI+248],RCX
            movups XMMWORD PTR [RDI+224],XMM0
            call .L_430af0

            mov R9,RBX
            lea RDI,QWORD PTR [RAX+8504]
            lea R8,QWORD PTR [RIP+.L_430150]
            pop RBX

            lea RCX,QWORD PTR [RIP+.L_430260]
            lea RDX,QWORD PTR [RIP+.L_42fb50]
            mov ESI,1
            jmp .L_435d40
.L_42fef4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ff00:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_4356c0
.L_42ff19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ff20:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_4357d0
.L_42ff39:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ff40:

            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            add RSP,8
            jmp .L_435670
.L_42ff59:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ff60:

            sub RSP,8
            call .L_430af0

            add RSP,8
            add RAX,8504
            ret 
.L_42ff74:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ff80:

            push RBP
            push RBX
            mov RBP,RSI
            mov EBX,EDX
            sub RSP,8
            call .L_430af0

            add RSP,8
            movzx EDX,BL
            mov RSI,RBP
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+8504]
            jmp .L_4356d0
.L_42ffa8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_42ffb0:

            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov R12,RDX
            sub RSP,8
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            call .L_4357d0

            test AL,AL
            je .L_430000

            add RSP,8
            lea RDX,QWORD PTR [RBX+192]
            mov R8,R13
            mov RCX,R12
            mov RSI,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_42e6e0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430000:

            add RSP,8
            mov EAX,13
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_430010:

            jmp .L_42e6e0
.L_430015:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430020:

            mov RDX,QWORD PTR [RDI+240]
            mov EAX,ESI
            test RDX,RDX
            je .L_430040

            mov RSI,QWORD PTR [RDI+248]
            movzx EDI,AL
            jmp RDX
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430040:

            ret 
.L_430042:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430050:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov R12D,ECX
            sub RSP,24
.L_430063:

            mov RDI,QWORD PTR [RDI+272]
            test RDI,RDI
            je .L_4300f0
.L_430073:

            movzx EDX,DX
            mov RSI,R13
            call .L_403d30

            test EAX,EAX
            mov EBP,EAX
            jne .L_4300c0

            test R12B,R12B
            je .L_4300a6

            mov RAX,QWORD PTR [RBX+272]
            and R12D,15
            shl R12D,2
            movzx ECX,BYTE PTR [RAX+78]
            and ECX,4294967235
            or R12D,ECX
            mov BYTE PTR [RAX+78],R12B
.L_4300a6:

            lea RDI,QWORD PTR [RBX+280]
            call .L_404bc0
.L_4300b2:

            add RSP,24
.L_4300b6:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_4300c0:

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_4300b2

            cmp WORD PTR [RDI+58],0
            jne .L_4300b2

            call .L_4033b0

            mov QWORD PTR [RBX+272],0
            add RSP,24
            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4300f0:

            lea RDI,QWORD PTR [RBX+8]
            xor ESI,ESI
            mov DWORD PTR [RSP+12],EDX
            mov EBP,3
            call .L_4108c0

            test RAX,RAX
            mov QWORD PTR [RBX+272],RAX
            je .L_4300b2

            mov ECX,R12D
            mov EDX,DWORD PTR [RSP+12]
            and ECX,15
            lea ESI,DWORD PTR [RCX*4]
            movzx ECX,BYTE PTR [RAX+78]
            and ECX,4294967235
            or ECX,ESI
            mov BYTE PTR [RAX+78],CL
            mov RAX,QWORD PTR [RBX+272]
            and BYTE PTR [RAX+78],127
            mov RDI,QWORD PTR [RBX+272]
            jmp .L_430073
.L_430144:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430150:

            movzx ECX,CL
            movzx EDX,DX
            jmp .L_430050
.L_43015b:

            nop
            nop
            nop
            nop
            nop
.L_430160:

            push RBX
.L_430161:

            mov RSI,QWORD PTR [RDI+272]
            mov RBX,RDI
            test RSI,RSI
            je .L_4301a1

            mov RAX,QWORD PTR [RDI+256]
            lea RDX,QWORD PTR [RDI+192]
            test RAX,RAX
            je .L_4301b0

            mov RDI,QWORD PTR [RDI+264]
            call RAX
.L_43018c:

            test EAX,EAX
            je .L_4301a1

            mov RDI,QWORD PTR [RBX+272]
            test RDI,RDI
            je .L_4301a1

            call .L_4033b0
.L_4301a1:

            mov QWORD PTR [RBX+272],0
            pop RBX
.L_4301ad:

            ret 
          .byte 0x66
          .byte 0x90
.L_4301b0:

            lea RDI,QWORD PTR [RDI+8]
            call .L_410a20

            jmp .L_43018c
.L_4301bb:

            nop
            nop
            nop
            nop
            nop
.L_4301c0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b80

            add RSP,8
            mov RDI,RAX
            jmp .L_430160
.L_4301da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4301e0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            mov EBP,EDX
            sub RSP,8
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403740

            test RAX,RAX
            je .L_430238

            movzx EDX,BP
            mov RSI,R13
            mov RDI,RAX
            mov RBX,RAX
            call .L_403d30

            test EAX,EAX
            je .L_430248
.L_430221:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4033b0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430238:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430248:

            lea RDX,QWORD PTR [R12+192]
            mov RSI,RBX
            mov RDI,R12
            call .L_42ed00

            jmp .L_430221
.L_43025d:

            nop
            nop
            nop
.L_430260:

            movzx EDX,DX
            jmp .L_4301e0
.L_430268:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430270:

            xor EAX,EAX
            mov WORD PTR [RDI],SI
            mov WORD PTR [RDI+2],AX
            ret 
.L_43027a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_430280:

            shl ESI,8
            xor SI,WORD PTR [RDI+2]
            mov EAX,8
            mov WORD PTR [RDI+2],SI
            jmp .L_4302a4

            nop
            nop
            nop
            nop
            nop
            nop
.L_430298:

            sub AL,1
            mov WORD PTR [RDI+2],DX
            je .L_4302b7
.L_4302a0:

            movzx ESI,WORD PTR [RDI+2]
.L_4302a4:

            test SI,SI
            lea EDX,DWORD PTR [RSI+RSI*1]
            jns .L_430298

            xor DX,WORD PTR [RDI]
            sub AL,1
            mov WORD PTR [RDI+2],DX
            jne .L_4302a0
.L_4302b7:

            ret 
.L_4302b9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4302c0:

            push R15
            push R14
            mov RDI,RCX
            push R13
            push R12
            mov R14,RCX
            push RBP
            push RBX
            mov EBP,72
            sub RSP,248
.L_4302dc:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+8],ESI
            mov DWORD PTR [RSP+40],EDX
            mov QWORD PTR [RSP+48],R8
            mov QWORD PTR [RSP+32],R9
            call strlen@PLT

            sub RBP,RAX
            lea RAX,QWORD PTR [RSP+64]
            shr RBP,1
            mov R13,RBP
            mov QWORD PTR [RSP+56],RAX
            sub R13,5
            je .L_4306ae

            xor R15D,R15D
            mov QWORD PTR [RSP+16],RBP
            mov RBX,RAX
            mov RBP,R15
            mov R12D,80
            mov R15,RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_430340:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_459ca7]
            mov RSI,R12
            sub RAX,R15
            mov RDI,RBX
            add RBP,1
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp RBP,R13
            jne .L_430340

            mov RAX,RBX
            sub RAX,QWORD PTR [RSP+56]
            mov RBP,QWORD PTR [RSP+16]
            mov RSI,R12
            sub RSI,RAX
.L_430384:

            sub RSP,8
.L_430388:

            lea R8,QWORD PTR [RIP+.L_459ca9]
            mov RCX,-1
            movzx EAX,WORD PTR [RSP+40]
            mov EDX,1
            mov RDI,RBX
            mov R9,R14
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            sub RBP,4
            pop RDX
            pop RCX
.L_4303bf:

            je .L_430401

            mov R14,QWORD PTR [RSP+56]
            xor R13D,R13D
            mov R12D,80
            nop
.L_4303d0:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_459ca7]
            mov RSI,R12
            sub RAX,R14
            mov RDI,RBX
            add R13,1
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R13,RBP
            jne .L_4303d0
.L_430401:

            movzx EAX,BYTE PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RIP+.L_45d69f]
            mov ESI,DWORD PTR [RSP+40]
            mov DWORD PTR [RSP+44],EAX
            mov EDI,EAX
            xor EAX,EAX
            call .L_4012c0

            cmp QWORD PTR [RSP+32],0
            je .L_430624

            lea RBP,QWORD PTR [RSP+144]
            mov QWORD PTR [RSP+24],0
            mov R12D,80
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430450:

            mov RCX,QWORD PTR [RSP+24]
            mov R14,QWORD PTR [RSP+32]
            mov EAX,16
            mov R15,QWORD PTR [RSP+48]
            lea RBX,QWORD PTR [RBP+1]
            sub R14,RCX
            cmp R14,16
            cmova R14,RAX
            mov EAX,124
            add R15,RCX
            mov WORD PTR [RBP],AX
            xor R13D,R13D
            jmp .L_4304d1
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_430488:

            movzx R9D,BYTE PTR [R15+R13*1]
            lea R8,QWORD PTR [RIP+.L_459cb7]
            mov RDI,RBX
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
.L_4304b5:

            mov RAX,RBX
            add R13,1
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            test R13B,7
            je .L_430500

            cmp R13,16
            je .L_43052e
.L_4304d1:

            mov RAX,RBX
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            cmp R14,R13
            ja .L_430488

            lea RDX,QWORD PTR [RIP+.L_459cbd]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            jmp .L_4304b5
.L_430500:

            lea RDX,QWORD PTR [RIP+.L_459cc1]
            mov RDI,RBX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            mov RSI,R12
            mov RAX,RBX
            sub RAX,RBP
            sub RSI,RAX
            cmp R13,16
            jne .L_4304d1
.L_43052e:

            lea RDX,QWORD PTR [RIP+.L_45d18b]
            mov RDI,RBX
            xor EAX,EAX
            xor R13D,R13D
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            mov QWORD PTR [RSP+16],R14
            add RBX,RAX
            mov R14,R13
            jmp .L_430586
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430560:

            lea RDX,QWORD PTR [RIP+.L_459cbf]
            mov RDI,RBX
            xor EAX,EAX
            add R14,1
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R14,16
            je .L_4305f5
.L_430586:

            mov RAX,RBX
            mov RSI,R12
            sub RAX,RBP
            sub RSI,RAX
            cmp QWORD PTR [RSP+16],R14
            jbe .L_430560

            movzx R13D,BYTE PTR [R15+R14*1]
            mov QWORD PTR [RSP+8],RSI
            call __ctype_b_loc@PLT

            mov RAX,QWORD PTR [RAX]
            mov RSI,QWORD PTR [RSP+8]
            and R13D,127
            movsx RDX,R13B
            test BYTE PTR [RAX+RDX*2+1],64
            je .L_430560

            lea R8,QWORD PTR [RIP+.L_459cc4]
            mov RDI,RBX
            movsx R9D,R13B
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            add R14,1
            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            cmp R14,16
            jne .L_430586
.L_4305f5:

            mov ESI,DWORD PTR [RSP+40]
            mov EDI,DWORD PTR [RSP+44]
            lea RDX,QWORD PTR [RIP+.L_45d69f]
            xor EAX,EAX
            mov RCX,RBP
            call .L_4012c0

            add QWORD PTR [RSP+24],16
            mov RAX,QWORD PTR [RSP+24]
            cmp QWORD PTR [RSP+32],RAX
            ja .L_430450
.L_430624:

            mov R13,QWORD PTR [RSP+56]
            mov EBP,72
            mov R12D,80
            mov RBX,R13
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430640:

            mov RAX,RBX
            lea RDX,QWORD PTR [RIP+.L_459d79]
            mov RSI,R12
            sub RAX,R13
            mov RDI,RBX
            sub RSI,RAX
            xor EAX,EAX
            call snprintf@PLT

            mov RDI,RBX
            call strlen@PLT

            add RBX,RAX
            sub RBP,1
            jne .L_430640

            mov RCX,QWORD PTR [RSP+56]
            mov ESI,DWORD PTR [RSP+40]
            lea RDX,QWORD PTR [RIP+.L_45d69f]
            mov EDI,DWORD PTR [RSP+44]
            xor EAX,EAX
            call .L_4012c0

            mov RAX,QWORD PTR [RSP+232]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4306bd

            add RSP,248
.L_4306a3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4306ae:

            mov ESI,80
            mov RBX,QWORD PTR [RSP+56]
            jmp .L_430384
.L_4306bd:

            call __stack_chk_fail@PLT
.L_4306c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4306d0:

            cmp DIL,4
            movzx EDX,DIL
            lea RAX,QWORD PTR [RIP+.L_459d76]
            ja .L_4306ff

            lea RCX,QWORD PTR [RIP+.L_459f24]
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4306f8:

            lea RAX,QWORD PTR [RIP+.L_458088]
.L_4306ff:

            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430708:

            lea RAX,QWORD PTR [RIP+.L_459cd6]
            ret 
.L_430710:

            lea RAX,QWORD PTR [RIP+.L_459cc7]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430720:

            lea RAX,QWORD PTR [RIP+.L_459ccc]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430730:

            lea RAX,QWORD PTR [RIP+.L_459cd1]
            ret 
.L_430738:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430740:

            cmp EDI,16
            ja .L_430850

            lea RDX,QWORD PTR [RIP+.L_459f38]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430760:

            lea RAX,QWORD PTR [RIP+.L_459cdb]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430770:

            lea RAX,QWORD PTR [RIP+.L_459ce5]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430780:

            lea RAX,QWORD PTR [RIP+.L_459cf9]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430790:

            lea RAX,QWORD PTR [RIP+.L_459d03]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307a0:

            lea RAX,QWORD PTR [RIP+.L_459d0d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307b0:

            lea RAX,QWORD PTR [RIP+.L_459d17]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307c0:

            lea RAX,QWORD PTR [RIP+.L_459d21]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307d0:

            lea RAX,QWORD PTR [RIP+.L_459d2b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307e0:

            lea RAX,QWORD PTR [RIP+.L_459d35]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4307f0:

            lea RAX,QWORD PTR [RIP+.L_459d3f]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430800:

            lea RAX,QWORD PTR [RIP+.L_459d49]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430810:

            lea RAX,QWORD PTR [RIP+.L_459d53]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430820:

            lea RAX,QWORD PTR [RIP+.L_459cef]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430830:

            lea RAX,QWORD PTR [RIP+.L_459d5d]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430840:

            lea RAX,QWORD PTR [RIP+.L_459d67]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430850:

            lea RAX,QWORD PTR [RIP+.L_459d71]
            ret 
.L_430858:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430860:

            cmp EDI,255
            ja .L_430ab0

            lea RDX,QWORD PTR [RIP+.L_459f7c]
            mov EDI,EDI
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0x66
          .byte 0x90
.L_430880:

            lea RAX,QWORD PTR [RIP+.L_458390]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430890:

            lea RAX,QWORD PTR [RIP+.L_459ef8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308a0:

            lea RAX,QWORD PTR [RIP+.L_459f05]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308b0:

            lea RAX,QWORD PTR [RIP+.L_459ee8]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308c0:

            lea RAX,QWORD PTR [RIP+.L_459ed5]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308d0:

            lea RAX,QWORD PTR [RIP+.L_459ece]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308e0:

            lea RAX,QWORD PTR [RIP+.L_459ebc]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4308f0:

            lea RAX,QWORD PTR [RIP+.L_459eb1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430900:

            lea RAX,QWORD PTR [RIP+.L_459ea1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430910:

            lea RAX,QWORD PTR [RIP+.L_459e96]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430920:

            lea RAX,QWORD PTR [RIP+.L_459e7b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430930:

            lea RAX,QWORD PTR [RIP+.L_459e73]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430940:

            lea RAX,QWORD PTR [RIP+.L_459e6a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430950:

            lea RAX,QWORD PTR [RIP+.L_459e4f]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430960:

            lea RAX,QWORD PTR [RIP+.L_459e5a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430970:

            lea RAX,QWORD PTR [RIP+.L_459e3a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430980:

            lea RAX,QWORD PTR [RIP+.L_459e2a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430990:

            lea RAX,QWORD PTR [RIP+.L_459e1a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4309a0:

            lea RAX,QWORD PTR [RIP+.L_459e13]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4309b0:

            lea RAX,QWORD PTR [RIP+.L_459e0a]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4309c0:

            lea RAX,QWORD PTR [RIP+.L_459df5]
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4309d0:

            lea RAX,QWORD PTR [RIP+.L_459def]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4309e0:

            lea RAX,QWORD PTR [RIP+.L_459de2]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4309f0:

            lea RAX,QWORD PTR [RIP+.L_459dd3]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a00:

            lea RAX,QWORD PTR [RIP+.L_459dcd]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a10:

            lea RAX,QWORD PTR [RIP+.L_459dc3]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a20:

            lea RAX,QWORD PTR [RIP+.L_459db6]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a30:

            lea RAX,QWORD PTR [RIP+.L_459dad]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a40:

            lea RAX,QWORD PTR [RIP+.L_459da1]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a50:

            lea RAX,QWORD PTR [RIP+.L_459d9b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a60:

            lea RAX,QWORD PTR [RIP+.L_459d96]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a70:

            lea RAX,QWORD PTR [RIP+.L_459d8e]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a80:

            lea RAX,QWORD PTR [RIP+.L_459d87]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430a90:

            lea RAX,QWORD PTR [RIP+.L_459d82]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430aa0:

            lea RAX,QWORD PTR [RIP+.L_459d7b]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430ab0:

            lea RAX,QWORD PTR [RIP+.L_459f13]
            ret 
.L_430ab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430ac0:

            jmp .L_402840
.L_430ac5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430ad0:

            sub RSP,8
            call .L_402840

            add RSP,8
            add RAX,12400
            ret 
.L_430ae4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430af0:

            sub RSP,8
            call .L_402840

            add RSP,8
            add RAX,12720
            ret 
.L_430b04:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430b10:

            sub RSP,8
            call .L_402840

            add RSP,8
            add RAX,32
            ret 
.L_430b22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430b30:

            mov ESI,DWORD PTR [RSI+8]
            mov ECX,DWORD PTR [RDI+8]
            mov EDI,ESI
            mov EAX,ECX
            sub ECX,ESI
            sub EDI,EDX
            sub EAX,EDX
            shr ECX,31
            mov EDX,EDI
            shr EAX,31
            shr EDX,31
            cmp AL,DL
            cmove EAX,ECX
            ret 
.L_430b51:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430b60:

            sub RSP,8
            call .L_430ac0

            add RSP,8
            add RAX,96
            ret 
.L_430b72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430b80:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            cmp QWORD PTR [RDI],0
            je .L_430bd8

            call QWORD PTR [RSI+16]

            mov EBP,EAX
            mov RAX,QWORD PTR [RBX]
            mov R13,QWORD PTR [R13]
            mov EDX,0
            mov RDI,RBX
            mov EAX,DWORD PTR [RAX+8]
            mov R12D,EAX
            sub R12D,EBP
            cmp EBP,EAX
            cmovns R12D,EDX
            call .L_430ac0

            add RSP,8
            mov EDX,R12D
            mov ESI,EBP
            pop RBX
            mov RDI,RAX
            mov RAX,R13
            pop RBP
            pop R12
            pop R13
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430bd8:

            mov RBP,QWORD PTR [RSI+8]
            call .L_430ac0

            add RSP,8
            mov RDI,RAX
            pop RBX
            mov RAX,RBP
            pop RBP
            pop R12
            pop R13
            jmp RAX
.L_430bf3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430c00:

            mov R8,QWORD PTR [RSI+16]
            cmp R8,RSI
            je .L_430c50

            mov RCX,QWORD PTR [RDI]
            push RBX
            mov RBX,RSI
            cmp RCX,RSI
            je .L_430c58

            test RCX,RCX
            je .L_430c39

            mov RAX,QWORD PTR [RCX+16]
            cmp RSI,RAX
            jne .L_430c34

            jmp .L_430c40
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430c28:

            mov RDX,QWORD PTR [RAX+16]
            cmp RDX,RBX
            je .L_430c43

            mov RAX,RDX
.L_430c34:

            test RAX,RAX
            jne .L_430c28
.L_430c39:

            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
          .byte 0x90
.L_430c40:

            mov RAX,RCX
.L_430c43:

            mov QWORD PTR [RAX+16],R8
            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430c50:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430c58:

            mov QWORD PTR [RDI],R8
            mov RSI,RDX
            call .L_430b80

            mov QWORD PTR [RBX+16],RBX
            pop RBX
            ret 
.L_430c69:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430c70:

            push RBX
            mov RBX,RDI
            call .L_430ac0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+96]
            lea RDX,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_430c00
.L_430c8d:

            nop
            nop
            nop
.L_430c90:

            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_430c9e:

            mov RBX,RDX
            xor EBP,EBP
            call .L_430c00

            mov R13,QWORD PTR [R12]
            test R13,R13
            jne .L_430cbb

            jmp .L_430d20
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_430cb8:

            mov R13,RAX
.L_430cbb:

            call QWORD PTR [RBX+16]

            mov ESI,DWORD PTR [R13+8]
            mov EDX,DWORD PTR [R14+8]
            mov EDI,ESI
            mov ECX,EDX
            sub EDX,ESI
            sub EDI,EAX
            sub ECX,EAX
            shr EDX,31
            mov EAX,EDI
            shr ECX,31
            shr EAX,31
            cmp CL,AL
            cmovne EDX,ECX
            test DL,DL
            jne .L_430d08

            mov RAX,QWORD PTR [R13+16]
            mov RBP,R13
            test RAX,RAX
            jne .L_430cb8

            mov QWORD PTR [R13+16],R14
            mov QWORD PTR [R14+16],0
            pop RBX
.L_430cfd:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_430d08:

            test RBP,RBP
            je .L_430d40

            mov QWORD PTR [R14+16],R13
            mov QWORD PTR [RBP+16],R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_430d20:

            mov QWORD PTR [R12],R14
            mov QWORD PTR [R14+16],0
.L_430d2c:

            mov RSI,RBX
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_430b80
          .byte 0x90
.L_430d40:

            mov RAX,QWORD PTR [R12]
            mov QWORD PTR [R14+16],RAX
            mov QWORD PTR [R12],R14
            jmp .L_430d2c
.L_430d4e:

            nop
            nop
.L_430d50:

            test EDX,EDX
            push RBX
            js .L_430d76

            add EDX,ESI
            mov RBX,RDI
            mov DWORD PTR [RDI+8],EDX
            call .L_430ac0

            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+96]
            lea RDX,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_430c90
.L_430d76:

            lea RCX,QWORD PTR [RIP+.L_45a3a0]
            lea RSI,QWORD PTR [RIP+.L_45a37c]
            lea RDI,QWORD PTR [RIP+.L_45a38d]
            mov EDX,74
            call __assert_fail@PLT
.L_430d95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430da0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            mov RBX,QWORD PTR [RDI]
            test RBX,RBX
            je .L_430de8

            mov R13D,DWORD PTR [RBX+8]
            call QWORD PTR [RSI+16]

            cmp EAX,R13D
            js .L_430de8

            mov RDI,RBP
            mov RDX,R12
            mov RSI,RBX
            call .L_430c00

            mov RAX,QWORD PTR [RBX]
            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_430de8:

            add RSP,8
            mov RSI,R12
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_430b80
.L_430dfd:

            nop
            nop
            nop
.L_430e00:

            sub EDI,ESI
            mov EAX,EDI
            shr EAX,31
            ret 
.L_430e08:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430e10:

            push RBX
            mov RBX,RDI
            call .L_401590

            test AL,AL
            jne .L_430e20

            pop RBX
            ret 
          .byte 0x90
.L_430e20:

            lea RDI,QWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RIP+.L_676dd0]
            pop RBX
            jmp .L_430da0
.L_430e31:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_430e40:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_430e4e:

            movzx R13D,WORD PTR [RDI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDI+60]
            mov QWORD PTR [RSP+24],RDX
            xor EDX,EDX
            mov WORD PTR [RSP+38],DX
            mov R15,RAX
            add RAX,2
            cmp RAX,R13
            ja .L_430f30

            lea RAX,QWORD PTR [RSP+38]
            mov RBX,RDI
            mov EBP,ESI
            mov R12,R13
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+36]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_430ed3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_430ea8:

            add EAX,2
            movzx EDX,R12W
            lea R8D,DWORD PTR [R14+RAX*1]
            cmp R8D,EDX
            ja .L_430f30
.L_430eb8:

            cmp BPL,BYTE PTR [RSP+38]
            je .L_430f58

            add R15D,EAX
            movzx EAX,R15W
            add RAX,2
            cmp RAX,R13
            ja .L_430f30
.L_430ed3:

            mov RCX,QWORD PTR [RSP+8]
            movzx R14D,R15W
            mov EDX,2
            mov ESI,R14D
            mov RDI,RBX
            call .L_403860

            movzx EAX,BYTE PTR [RSP+39]
            cmp AL,255
            jne .L_430ea8

            lea ESI,DWORD PTR [R15+2]
            mov RCX,QWORD PTR [RSP+16]
            mov EDX,2
            mov RDI,RBX
            movzx ESI,SI
            call .L_403860

            cmp AX,2
            jne .L_430f30

            movzx EAX,WORD PTR [RSP+36]
            movzx EDX,R12W
            rol AX,8
            movzx EAX,AX
            add EAX,4
            lea R8D,DWORD PTR [R14+RAX*1]
            cmp R8D,EDX
            jbe .L_430eb8
.L_430f30:

            mov EAX,23
.L_430f35:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_430f65

            add RSP,56
.L_430f49:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_430f58:

            mov RAX,QWORD PTR [RSP+24]
            mov WORD PTR [RAX],R15W
            xor EAX,EAX
            jmp .L_430f35
.L_430f65:

            call __stack_chk_fail@PLT
.L_430f6a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_430f70:

            push R13
            push R12
            movzx ESI,SIL
            push RBP
            push RBX
            mov EBX,EDX
            mov RBP,RDI
            mov R12,RCX
            sub RSP,24
.L_430f86:

            lea RDX,QWORD PTR [RSP+6]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430e40

            test EAX,EAX
            mov R13D,EAX
            jne .L_430fe8

            movzx ESI,WORD PTR [RSP+6]
            mov RCX,R12
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EDX,BYTE PTR [R12+1]
            movzx ECX,BX
            movzx ESI,WORD PTR [RSP+6]
            mov RDI,RBP
            mov RAX,RDX
            add RDX,2
            add EAX,2
            cmp RCX,RDX
            mov RCX,R12
            cmova EBX,EAX
            movzx EDX,BX
            call .L_403860
.L_430fe8:

            mov RBX,QWORD PTR [RSP+8]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_431006

            add RSP,24
.L_430fff:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_431006:

            call __stack_chk_fail@PLT
.L_43100b:

            nop
            nop
            nop
            nop
            nop
.L_431010:

            push R15
            push R14
            push R13
            push R12
            mov R13D,ESI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,56
.L_431024:

            movzx EBX,WORD PTR [RDI+60]
            movzx R12D,WORD PTR [RDI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov WORD PTR [RSP+38],AX
            lea RAX,QWORD PTR [RSP+38]
            mov R15,RBX
            add RBX,2
            mov R14,R12
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+36]
            cmp R12,RBX
            mov QWORD PTR [RSP+8],RAX
            jae .L_4310a8

            jmp .L_431118
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431078:

            movzx EDX,R14W
            movzx EDI,SI
            movzx ECX,AX
            sub EDX,EDI
            cmp ECX,EDX
            jg .L_431118
.L_43108c:

            cmp R13B,BYTE PTR [RSP+38]
            je .L_431140

            lea R15D,DWORD PTR [RSI+RAX*1]
            movzx EBX,R15W
            add RBX,2
            cmp RBX,R12
            ja .L_431118
.L_4310a8:

            mov RCX,QWORD PTR [RSP]
            movzx ESI,R15W
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,BYTE PTR [RSP+39]
            lea ESI,DWORD PTR [R15+2]
            cmp AX,255
            mov WORD PTR [RSP+36],AX
            jne .L_431078

            add RBX,2
            cmp RBX,R12
            ja .L_431118

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,SI
            mov EDX,2
            mov RDI,RBP
            call .L_403860

            movzx EAX,WORD PTR [RSP+36]
            lea ESI,DWORD PTR [R15+4]
            movzx EDX,R14W
            movzx EDI,SI
            sub EDX,EDI
            rol AX,8
            movzx ECX,AX
            mov WORD PTR [RSP+36],AX
            cmp ECX,EDX
            jle .L_43108c

            nop
            nop
            nop
.L_431118:

            mov EAX,23
.L_43111d:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            jne .L_431154

            add RSP,56
.L_431131:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431140:

            mov RDI,QWORD PTR [RSP+16]
            mov WORD PTR [RDI],SI
            mov RDI,QWORD PTR [RSP+24]
            mov WORD PTR [RDI],AX
            xor EAX,EAX
            jmp .L_43111d
.L_431154:

            call __stack_chk_fail@PLT
.L_431159:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431160:

            lea RAX,QWORD PTR [RIP+.L_4313d0]
            mov DWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],RDI
            mov QWORD PTR [RDI+24],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI],RAX
            mov QWORD PTR [RDI+36],0
            mov DWORD PTR [RDI+44],1
            mov QWORD PTR [RDI+48],RDX
            mov QWORD PTR [RDI+56],RCX
            ret 
.L_43119c:

            nop
            nop
            nop
            nop
.L_4311a0:

            cmp DWORD PTR [RDI+44],1
            setne AL
            ret 
.L_4311a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4311b0:

            mov DWORD PTR [RDI+44],1
            jmp .L_430c70
.L_4311bc:

            nop
            nop
            nop
            nop
.L_4311c0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_4311c7:

            mov EBX,DWORD PTR [RDI+36]
            mov DWORD PTR [RDI+44],2
            cmp EBX,1
            jbe .L_431218

            mov EAX,DWORD PTR [RDI+32]
            cmp EAX,2
            je .L_431228

            cmp EAX,1
            je .L_4311f9

            mov R12D,EBX
            shr R12D,1
            call .L_401460

            sub EBX,R12D
            xor EDX,EDX
            div EBX
            lea EBX,DWORD PTR [RDX+R12*1]
.L_4311f9:

            mov DWORD PTR [RBP+40],EBX
.L_4311fc:

            call .L_401240

            mov EDX,EBX
            mov RDI,RBP
            mov ESI,EAX
            pop RBX
.L_431209:

            pop RBP
            pop R12
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431218:

            mov DWORD PTR [RDI+40],0
            xor EBX,EBX
            jmp .L_4311fc

            nop
            nop
            nop
            nop
            nop
.L_431228:

            call .L_401460

            xor EDX,EDX
            div EBX
            mov EBX,EDX
            mov DWORD PTR [RBP+40],EDX
            jmp .L_4311fc
.L_431238:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431240:

            push RBP
            push RBX
            sub RSP,24
            cmp DWORD PTR [RDI+44],1
            jne .L_431296

            cmp ESI,EDX
            mov EBP,ESI
            mov EBX,EDX
            mov DWORD PTR [RDI+24],ESI
            mov DWORD PTR [RDI+28],EDX
            mov DWORD PTR [RDI+32],ECX
            je .L_431288

            mov QWORD PTR [RSP+8],RDI
            sub EBX,EBP
            call .L_401460

            xor EDX,EDX
            mov RDI,QWORD PTR [RSP+8]
            div EBX
            add EDX,EBP
            mov DWORD PTR [RDI+36],EDX
            add RSP,24
            pop RBX
            pop RBP
            jmp .L_4311c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431288:

            mov DWORD PTR [RDI+36],ESI
            add RSP,24
            pop RBX
            pop RBP
            jmp .L_4311c0
.L_431296:

            lea RCX,QWORD PTR [RIP+.L_45a440]
            lea RSI,QWORD PTR [RIP+.L_45a3d1]
            lea RDI,QWORD PTR [RIP+.L_45a3ea]
            mov EDX,72
            call __assert_fail@PLT
.L_4312b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4312c0:

            cmp DWORD PTR [RDI+44],1
            je .L_4312e8

            mov EAX,DWORD PTR [RDI+24]
            cmp DWORD PTR [RDI+36],EAX
            je .L_4312e8

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI+36],EAX
            call .L_430c70

            mov RDI,RBX
            pop RBX
            jmp .L_4311c0
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4312e8:

            ret 
.L_4312ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4312f0:

            push R12
            push RBP
            push RBX
.L_4312f4:

            mov EAX,DWORD PTR [RDI+44]
            mov RBX,RDI
            mov DWORD PTR [RDI+44],1
            cmp EAX,2
            je .L_431348

            cmp EAX,3
            jne .L_4313a5

            mov EDX,DWORD PTR [RDI+36]
            lea EAX,DWORD PTR [RDX+RDX*1]
            test EDX,EDX
            mov EDX,1
            cmove EAX,EDX
            cmp DWORD PTR [RDI+28],EAX
            cmovbe EAX,DWORD PTR [RDI+28]
            mov DWORD PTR [RDI+36],EAX
            mov RAX,QWORD PTR [RDI+56]
            test RAX,RAX
            je .L_431338

            call RAX

            test AL,AL
            je .L_431380
.L_431338:

            mov RDI,RBX
            pop RBX
.L_43133c:

            pop RBP
            pop R12
            jmp .L_4311c0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431348:

            call QWORD PTR [RDI+48]

            test AL,AL
            je .L_431380

            cmp DWORD PTR [RBX+32],1
            je .L_431388

            mov EBP,DWORD PTR [RBX+36]
            sub EBP,DWORD PTR [RBX+40]
            mov DWORD PTR [RBX+44],3
            call .L_401240

            mov RDI,RBX
            mov ESI,EAX
            pop RBX
            mov EDX,EBP
            pop RBP
            pop R12
            jmp .L_430d50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431380:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431388:

            mov EBP,DWORD PTR [RBX+28]
            mov R12D,DWORD PTR [RBX+24]
            call .L_401460

            xor EDX,EDX
            mov ECX,EBP
            sub ECX,R12D
            div ECX
            add EDX,R12D
            mov DWORD PTR [RBX+36],EDX
            jmp .L_431338
.L_4313a5:

            lea RCX,QWORD PTR [RIP+.L_45a400]
            lea RSI,QWORD PTR [RIP+.L_45a3d1]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,236
            call __assert_fail@PLT
.L_4313c4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4313d0:

            jmp .L_4312f0
.L_4313d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4313e0:

            shl EDX,3
            sub RSP,8
            movzx EDX,DX
            call .L_431ae0

            xor EAX,EAX
            add RSP,8
            ret 
.L_4313f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431400:

            push R15
            push R14
            push R13
            push R12
            mov R12D,ECX
            push RBP
            push RBX
            and R12D,4294967294
            mov EBP,R9D
            sub RSP,24
.L_431418:

            cmp R12B,16
            ja .L_431618

            cmp R12B,3
            mov EAX,7
            jbe .L_431603

            movzx EAX,R12B
            sub EAX,2
            sar EAX,1
            test EDX,EDX
            lea R10D,DWORD PTR [RAX*8]
            jne .L_43162c
.L_43144a:

            cmp R9B,13
            ja .L_4316c0

            mov EAX,2
            mov ECX,2
            nop
            nop
.L_431460:

            movzx R11D,R9B
            mov EBX,15
            sub EBX,R11D
            cmp EBX,EAX
            jle .L_43147b

            mov ECX,15
            sub ECX,R9D
            movzx EAX,CL
.L_43147b:

            mov R9D,15
            sub R9D,EAX
            mov EAX,15
            sub EAX,ECX
            cmp R9D,R11D
            cmovl EBP,EAX
.L_431491:

            test ESI,ESI
            lea R13D,DWORD PTR [RCX-1]
            setne AL
            shl EAX,6
            mov R9D,EAX
            mov EAX,R10D
            or EAX,R13D
            or EAX,R9D
            test BPL,BPL
            mov BYTE PTR [RDI+288],AL
            je .L_4314dd

            lea R9D,DWORD PTR [RBP-1]
            xor EAX,EAX
            movzx R9D,R9B
            add R9,1
            nop
            nop
            nop
            nop
            nop
            nop
.L_4314c8:

            movzx ECX,BYTE PTR [R8+RAX*1]
            mov BYTE PTR [RDI+RAX*1+289],CL
            add RAX,1
            cmp RAX,R9
            jne .L_4314c8
.L_4314dd:

            lea R10,QWORD PTR [RDI+303]
            mov R9D,EDX
            mov EAX,15
            nop
            nop
            nop
            nop
.L_4314f0:

            sub EAX,1
            mov BYTE PTR [R10],R9B
            shr R9D,8
            sub R10,1
            cmp BPL,AL
            jb .L_4314f0

            mov DWORD PTR [RSP+12],ESI
            lea RSI,QWORD PTR [RDI+288]
            mov R15D,EDX
            mov R14,R8
            mov RBX,RDI
            mov RDX,RSI
            call .L_431af0

            mov ECX,DWORD PTR [RSP+12]
            xor R8D,R8D
            test ECX,ECX
            je .L_43155f

            mov ESI,ECX
            movzx EDX,BYTE PTR [RBX+288]
            movzx EAX,BYTE PTR [RBX+289]
            shr ESI,8
            cmp ECX,65279
            ja .L_431668

            xor EDX,ESI
            xor EAX,ECX
            mov R8D,2
            mov BYTE PTR [RBX+288],DL
            mov BYTE PTR [RBX+289],AL
.L_43155f:

            test BPL,BPL
            mov BYTE PTR [RBX+304],R13B
            je .L_4316b2
.L_43156f:

            lea ESI,DWORD PTR [RBP-1]
            xor EAX,EAX
            movzx ESI,SIL
            add RSI,1
            nop
            nop
            nop
            nop
.L_431580:

            movzx EDX,BYTE PTR [R14+RAX*1]
            mov BYTE PTR [RBX+RAX*1+305],DL
            add RAX,1
            cmp RSI,RAX
            jne .L_431580

            lea EAX,DWORD PTR [RBP+1]
            cmp AL,16
            je .L_4315be
.L_43159c:

            movzx EDX,AL
            lea RDI,QWORD PTR [RBX+RDX*1+304]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4315b0:

            add EAX,1
            mov BYTE PTR [RDI],0
            add RDI,1
            cmp AL,16
            jne .L_4315b0
.L_4315be:

            mov EAX,16
            mov BYTE PTR [RBX+336],BPL
            mov DWORD PTR [RBX+340],ECX
            mov WORD PTR [RBX+358],AX
            mov DWORD PTR [RBX+344],0
            xor EAX,EAX
            mov DWORD PTR [RBX+348],R15D
            mov DWORD PTR [RBX+352],0
            mov WORD PTR [RBX+356],R8W
            mov BYTE PTR [RBX+360],R12B
.L_431603:

            add RSP,24
.L_431607:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431618:

            test EDX,EDX
            mov R10D,56
            mov R12D,16
            je .L_43144a
.L_43162c:

            mov EAX,EDX
            xor ECX,ECX
.L_431630:

            shr EAX,8
            add ECX,1
            test EAX,EAX
            jne .L_431630

            cmp CL,2
            mov EAX,2
            cmovb ECX,EAX
            cmp R9B,13
            movzx EAX,CL
            jbe .L_431460

            mov EBP,13
            mov R11D,13
            jmp .L_43147b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431668:

            xor EAX,4294967294
            not EDX
            xor BYTE PTR [RBX+292],SIL
            mov BYTE PTR [RBX+289],AL
            mov EAX,ECX
            xor BYTE PTR [RBX+293],CL
            shr EAX,24
            xor BYTE PTR [RBX+290],AL
            mov EAX,ECX
            shr EAX,16
            xor BYTE PTR [RBX+291],AL
            test BPL,BPL
            mov R8D,6
            mov BYTE PTR [RBX+288],DL
            mov BYTE PTR [RBX+304],R13B
            jne .L_43156f
.L_4316b2:

            mov EAX,1
            jmp .L_43159c
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4316c0:

            mov ECX,2
            mov EBP,13
            jmp .L_431491
.L_4316cf:

            nop
.L_4316d0:

            push R14
            push R13
            mov R13D,EDX
            push R12
            push RBP
            push RBX
.L_4316db:

            mov EAX,DWORD PTR [RDI+344]
            add EAX,EDX
            mov EDX,DWORD PTR [RDI+340]
            cmp EAX,EDX
            ja .L_4317bc

            test R13D,R13D
            mov RBX,RDI
            je .L_43176f

            lea EAX,DWORD PTR [R13-1]
            movzx EDX,WORD PTR [RDI+356]
            mov RBP,RSI
            lea R14,QWORD PTR [RDI+288]
            lea R12,QWORD PTR [RSI+RAX*1+1]
            jmp .L_431740
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431718:

            movzx EAX,DX
            add EDX,1
.L_43171e:

            mov WORD PTR [RBX+356],DX
            movzx ECX,BYTE PTR [RBX+RAX*1+288]
            add RBP,1
            xor CL,BYTE PTR [RBP-1]
            cmp RBP,R12
            mov BYTE PTR [RBX+RAX*1+288],CL
            je .L_431760
.L_431740:

            cmp DX,16
            jne .L_431718

            mov RDX,R14
            mov RSI,R14
            mov RDI,RBX
            call .L_431af0

            xor EAX,EAX
            mov EDX,1
            jmp .L_43171e
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431760:

            mov EAX,DWORD PTR [RBX+344]
            mov EDX,DWORD PTR [RBX+340]
            add EAX,R13D
.L_43176f:

            cmp EAX,EDX
            mov DWORD PTR [RBX+344],EAX
            je .L_431788

            pop RBX
.L_43177a:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431788:

            cmp WORD PTR [RBX+356],0
            jne .L_4317a8
.L_431792:

            xor EAX,EAX
            mov WORD PTR [RBX+356],AX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4317a8:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov RDX,RSI
            call .L_431af0

            jmp .L_431792
.L_4317bc:

            lea RCX,QWORD PTR [RIP+.L_45a5a0]
            lea RSI,QWORD PTR [RIP+.L_45a489]
            lea RDI,QWORD PTR [RIP+.L_45a4a0]
            mov EDX,176
            call __assert_fail@PLT
.L_4317db:

            nop
            nop
            nop
            nop
            nop
.L_4317e0:

            push R15
            push R14
            mov R15D,ECX
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,24
.L_4317f1:

            mov EAX,DWORD PTR [RDI+352]
            add EAX,ECX
            mov ECX,DWORD PTR [RDI+348]
            cmp EAX,ECX
            ja .L_4319fa

            test R15D,R15D
            mov RBX,RDI
            je .L_43196f

            lea EAX,DWORD PTR [R15-1]
            mov R14D,R8D
            mov R12,RSI
            mov R13,RDX
            lea RBP,QWORD PTR [RSI+RAX*1+1]
            jmp .L_43187f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431830:

            cdqe 
            movzx R8D,BYTE PTR [R12]
            mov WORD PTR [RBX+358],DX
            movzx ECX,BYTE PTR [RBX+RAX*1+320]
            xor ECX,R8D
            mov BYTE PTR [R13],CL
            movzx EAX,WORD PTR [RBX+356]
            cmp AX,16
            je .L_4318bb
.L_43185a:

            lea EDX,DWORD PTR [RAX+1]
.L_43185d:

            cdqe 
            add R12,1
            mov WORD PTR [RBX+356],DX
            add R13,1
            xor BYTE PTR [RBX+RAX*1+288],R8B
            cmp R12,RBP
            je .L_431960
.L_43187f:

            movzx EAX,WORD PTR [RBX+358]
            cmp AX,16
            lea EDX,DWORD PTR [RAX+1]
            je .L_4318e8
.L_43188f:

            test R14B,R14B
            jne .L_431830

            movzx R8D,BYTE PTR [R13]
            cdqe 
            mov WORD PTR [RBX+358],DX
            xor R8B,BYTE PTR [RBX+RAX*1+320]
            mov BYTE PTR [R12],R8B
            movzx EAX,WORD PTR [RBX+356]
            cmp AX,16
            jne .L_43185a
.L_4318bb:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov BYTE PTR [RSP+15],R8B
            mov RDX,RSI
            call .L_431af0

            xor EAX,EAX
            mov EDX,1
            movzx R8D,BYTE PTR [RSP+15]
            jmp .L_43185d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4318e8:

            movzx EDX,BYTE PTR [RBX+336]
            cmp DL,14
            ja .L_43192e

            add BYTE PTR [RBX+319],1
            jne .L_43192e

            lea RAX,QWORD PTR [RBX+318]
            mov ECX,14
            sub ECX,EDX
            mov RSI,RAX
            sub RSI,RCX
            jmp .L_431929
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431918:

            movzx EDI,BYTE PTR [RAX]
            sub RAX,1
            lea EDX,DWORD PTR [RDI+1]
            mov BYTE PTR [RAX+1],DL
            test DL,DL
            jne .L_43192e
.L_431929:

            cmp RSI,RAX
            jne .L_431918
.L_43192e:

            lea RDX,QWORD PTR [RBX+320]
            lea RSI,QWORD PTR [RBX+304]
            mov RDI,RBX
            call .L_431af0

            xor EAX,EAX
            mov EDX,1
            mov WORD PTR [RBX+358],AX
            xor EAX,EAX
            jmp .L_43188f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431960:

            mov EAX,DWORD PTR [RBX+352]
            mov ECX,DWORD PTR [RBX+348]
            add EAX,R15D
.L_43196f:

            cmp EAX,ECX
            mov DWORD PTR [RBX+352],EAX
            jb .L_4319c4

            cmp WORD PTR [RBX+356],0
            jne .L_4319d8

            movzx ESI,BYTE PTR [RBX+336]
            lea EAX,DWORD PTR [RSI+1]
            cmp AL,15
            ja .L_4319c4
.L_431991:

            movzx EDX,AL
            mov ECX,14
            lea RAX,QWORD PTR [RBX+RDX*1+304]
            sub ECX,ESI
            lea RDX,QWORD PTR [RBX+RDX*1+305]
            movzx ECX,CL
            add RDX,RCX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4319b8:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RDX,RAX
            jne .L_4319b8
.L_4319c4:

            add RSP,24
.L_4319c8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4319d8:

            lea RSI,QWORD PTR [RBX+288]
            mov RDI,RBX
            mov RDX,RSI
            call .L_431af0

            movzx ESI,BYTE PTR [RBX+336]
            lea EAX,DWORD PTR [RSI+1]
            cmp AL,15
            jbe .L_431991

            jmp .L_4319c4
.L_4319fa:

            lea RCX,QWORD PTR [RIP+.L_45a560]
            lea RSI,QWORD PTR [RIP+.L_45a489]
            lea RDI,QWORD PTR [RIP+.L_45a4d0]
            mov EDX,210
            call __assert_fail@PLT
.L_431a19:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431a20:

            push R12
            push RBP
            push RBX
            mov EAX,DWORD PTR [RDI+348]
            cmp DWORD PTR [RDI+352],EAX
            jne .L_431aae

            cmp BYTE PTR [RDI+360],0
            mov RBX,RDI
            mov R12,RDX
            jne .L_431a60
.L_431a41:

            test R12,R12
            je .L_431a51

            movzx EAX,BYTE PTR [RBX+360]
            mov BYTE PTR [R12],AL
.L_431a51:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431a60:

            mov RBP,RSI
            lea RDX,QWORD PTR [RDI+320]
            lea RSI,QWORD PTR [RDI+304]
            call .L_431af0

            cmp BYTE PTR [RBX+360],0
            je .L_431a41

            mov EAX,1
            nop
            nop
            nop
            nop
.L_431a88:

            movzx EDX,BYTE PTR [RBX+RAX*1+287]
            xor DL,BYTE PTR [RBX+RAX*1+319]
            mov BYTE PTR [RBP+RAX*1-1],DL
            movzx ECX,BYTE PTR [RBX+360]
            mov EDX,EAX
            add RAX,1
            cmp ECX,EDX
            jg .L_431a88

            jmp .L_431a41
.L_431aae:

            lea RCX,QWORD PTR [RIP+.L_45a520]
            lea RSI,QWORD PTR [RIP+.L_45a489]
            lea RDI,QWORD PTR [RIP+.L_45a4f8]
            mov EDX,269
            call __assert_fail@PLT
.L_431acd:

            nop
            nop
            nop
.L_431ad0:

            jmp .L_441130
.L_431ad5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431ae0:

            movzx EDX,DX
            jmp .L_441180
.L_431ae8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431af0:

            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            jmp .L_441ef0
.L_431b00:

            jmp .L_441160
.L_431b05:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b10:

            push RBX
            mov RBX,RDI
            call .L_4401d0

            mov EDI,6
            call .L_4401a0

            mov RDI,RBX
            mov EDX,1
            mov RSI,RAX
            pop RBX
            jmp .L_4402a0
.L_431b34:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b40:

            jmp .L_4401e0
.L_431b45:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b50:

            movzx EDX,DX
            jmp .L_4403e0
.L_431b58:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b60:

            movzx EDX,DX
            jmp .L_440530
.L_431b68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b70:

            jmp .L_440570
.L_431b75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b80:

            jmp .L_440910
.L_431b85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431b90:

            jmp .L_440940
.L_431b95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431ba0:

            xor ESI,ESI
            jmp .L_4409b0
.L_431ba7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431bb0:

            movzx EDX,DX
            jmp .L_440e50
.L_431bb8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431bc0:

            jmp .L_440e70
.L_431bc5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431bd0:

            ret 
.L_431bd2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431be0:

            push RBP
            push RBX
            mov RBX,RSI
            mov RBP,RDX
            sub RSP,8
            call .L_430af0

            test BYTE PTR [RBX],48
            je .L_431c00

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431c00:

            add RSP,8
            mov RCX,RBP
            mov RDX,RBX
            pop RBX
            pop RBP
            lea RDI,QWORD PTR [RAX+216]
            mov ESI,68
            jmp .L_42e970
.L_431c1d:

            nop
            nop
            nop
.L_431c20:

            test BYTE PTR [RSI],48
            jne .L_431c2b

            cmp BYTE PTR [RSI+1],2
            je .L_431c30
.L_431c2b:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431c30:

            mov RDX,RCX
            jmp .L_431be0
.L_431c35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431c40:

            ret 
.L_431c42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431c50:

            push RBP
            lea RAX,QWORD PTR [RIP+.L_432700]
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_431c63:

            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RDI+120]
            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+112],0
            mov QWORD PTR [RDI+136],RAX
            lea RAX,QWORD PTR [RIP+.L_432e20]
            mov DWORD PTR [RDI+128],0
            mov DWORD PTR [RDI+152],0
            mov BYTE PTR [RDI+170],0
            mov QWORD PTR [RDI+144],RAX
            lea RAX,QWORD PTR [RDI+144]
            mov QWORD PTR [RDI+160],RAX
            xor EAX,EAX
            mov WORD PTR [RDI+168],AX
            lea RAX,QWORD PTR [RIP+.L_4588d2]
            mov QWORD PTR [RDI+176],RAX
            lea RAX,QWORD PTR [RIP+.L_4331a0]
            mov QWORD PTR [RDI+184],RAX
            lea RAX,QWORD PTR [RIP+.L_458954]
            mov QWORD PTR [RBX+192],RDI
            mov QWORD PTR [RDI+200],0
            mov QWORD PTR [RDI+208],RAX
            lea RAX,QWORD PTR [RIP+.L_431c20]
            mov QWORD PTR [RDI+216],RAX
            lea RAX,QWORD PTR [RIP+.L_45a5d7]
            mov QWORD PTR [RBX+224],RDI
            mov QWORD PTR [RDI+232],0
            mov QWORD PTR [RDI+240],RAX
            lea RAX,QWORD PTR [RIP+.L_433510]
            mov QWORD PTR [RDI+248],RAX
            mov QWORD PTR [RBX+256],RDI
            lea RDI,QWORD PTR [RDI+272]
            mov QWORD PTR [RDI-8],0
            call .L_43fe40

            lea RDI,QWORD PTR [RBX+280]
            mov RSI,RBP
            call .L_436070

            lea RDI,QWORD PTR [RBX+328]
            mov RSI,RBP
            call .L_4378f0

            lea RDI,QWORD PTR [RBX+12]
            mov QWORD PTR [RBX+4],0
            mov QWORD PTR [RBX+92],0
            xor EAX,EAX
            and RDI,-8
            sub EBX,EDI
            lea ECX,DWORD PTR [RBX+100]
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            add RSP,8
.L_431d99:

            pop RBX
            pop RBP
            ret 
.L_431d9c:

            nop
            nop
            nop
            nop
.L_431da0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_430af0

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+176]
            mov RBP,RAX
            mov RDI,R12
            call .L_42d6f0

            lea RSI,QWORD PTR [RBX+208]
            mov RDI,R12
            call .L_42d6f0

            lea RSI,QWORD PTR [RBX+240]
            lea RDI,QWORD PTR [RBP+9784]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42d6f0
.L_431deb:

            nop
            nop
            nop
            nop
            nop
.L_431df0:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            call .L_430af0

            lea R12,QWORD PTR [RAX+216]
            lea RSI,QWORD PTR [RBX+176]
            mov RBP,RAX
            mov RDI,R12
            call .L_42d730

            lea RSI,QWORD PTR [RBX+208]
            mov RDI,R12
            call .L_42d730

            lea RSI,QWORD PTR [RBX+240]
            lea RDI,QWORD PTR [RBP+9784]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42d730
.L_431e3b:

            nop
            nop
            nop
            nop
            nop
.L_431e40:

            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,8
.L_431e49:

            call .L_430af0

            test RBX,RBX
            mov RBP,RAX
            je .L_431e98

            mov ESI,65
            mov RDI,RBX
            call strnlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,64
            ja .L_431e8d

            test RDX,RDX
            mov BYTE PTR [RBP+8505],DL
            je .L_431eb0

            lea RDI,QWORD PTR [RBP+8506]
            mov RSI,RBX
            call memcpy@PLT

            xor EAX,EAX
.L_431e8d:

            add RSP,8
.L_431e91:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_431e98:

            mov BYTE PTR [RAX+8505],0
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_431eb0:

            xor EAX,EAX
            jmp .L_431e8d
.L_431eb4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431ec0:

            movzx EAX,WORD PTR [RDI+168]
            ret 
.L_431ec8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431ed0:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_431ed3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431ee0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_401240

            test BYTE PTR [RBX+49],1
            je .L_431f50

            mov EBP,DWORD PTR [RBX+12]
            movzx EDX,BYTE PTR [RBX+97]
            sub EBP,EAX
            and EDX,1
            cmp EBP,-1
            je .L_431f30

            test DL,DL
            je .L_431f13

            mov ECX,DWORD PTR [RBX+60]
            sub ECX,EAX
            cmp EBP,ECX
            cmova EBP,ECX
.L_431f13:

            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            mov EDX,EBP
            pop RBX
            pop RBP
            mov ESI,EAX
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_431f30:

            test DL,DL
            je .L_431f3e
.L_431f34:

            mov EBP,DWORD PTR [RBX+60]
            sub EBP,EAX
            cmp EBP,-1
            jne .L_431f13
.L_431f3e:

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            pop RBX
            pop RBP
            jmp .L_430c70
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_431f50:

            test BYTE PTR [RBX+97],1
            jne .L_431f34

            add RSP,8
            lea RDI,QWORD PTR [RBX+120]
            pop RBX
            pop RBP
            jmp .L_430c70
.L_431f65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_431f70:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14,RDI
            push RBP
            push RBX
            mov R12D,EDX
            sub RSP,248
.L_431f8a:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor EDX,EDX
            xor ESI,ESI
            mov WORD PTR [RSP+30],DX
            mov RDI,RBX
            mov EDX,2
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45988f]
            mov RDI,RBX
            call .L_42f620

            test R12B,R12B
            jne .L_4320a0

            lea R13,QWORD PTR [RBP+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_432098
.L_432018:

            add RBP,2568
            lea R12,QWORD PTR [RSP+32]
            mov RDI,RBP
            call .L_415f60

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_415fe0

            lea RCX,QWORD PTR [RIP+.L_431c40]
            mov EAX,4294963391
            mov R8,R14
            mov RDX,R12
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_42e6e0

            test EAX,EAX
            jne .L_4320e4
.L_43206c:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_432118

            add RSP,248
.L_43208a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_432098:

            mov EAX,3
            jmp .L_43206c
          .byte 0x90
.L_4320a0:

            lea R13,QWORD PTR [RBP+216]
            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            mov RBX,RAX
            je .L_432098

            lea RSI,QWORD PTR [RSP+30]
            mov EDX,2
            mov RDI,RAX
            mov BYTE PTR [RSP+30],13
            mov BYTE PTR [RSP+31],R12B
            call .L_403d30

            test EAX,EAX
            je .L_432100
.L_4320e4:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_43206c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432100:

            movzx EDX,R12B
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_4320e4

            jmp .L_432018
.L_432118:

            call __stack_chk_fail@PLT
.L_43211d:

            nop
            nop
            nop
.L_432120:

            ret 
.L_432122:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432130:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R14D,ECX
            push RBP
            push RBX
            mov R13,RDI
            sub RSP,280
.L_43214a:

            lea RBX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+8],RDX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov RBP,RAX
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_459894]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R12
            call .L_42d7b0

            test RAX,RAX
            je .L_432370

            mov RBX,RAX
            movzx EAX,BYTE PTR [R15+24]
            test AL,1
            jne .L_4322d8
.L_4321e2:

            test AL,2
            jne .L_432290

            test AL,4
            jne .L_432310
.L_4321f2:

            test AL,8
            jne .L_432380
.L_4321fa:

            test R14B,R14B
            jne .L_4323c0
.L_432203:

            movzx EAX,BYTE PTR [RSP+240]
            cmp AX,WORD PTR [RBX+58]
            je .L_4323e0
.L_432215:

            add RBP,2568
            lea R14,QWORD PTR [RSP+64]
            mov RDI,RBP
            call .L_415f60

            lea RSI,QWORD PTR [RSP+80]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_415fe0

            lea RCX,QWORD PTR [RIP+.L_431bd0]
            mov EAX,4294963391
            mov R8,R13
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R12
            mov WORD PTR [RSP+98],AX
            call .L_42e6e0

            test EAX,EAX
            jne .L_4322c2
.L_432265:

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4323f3

            add RSP,280
.L_432283:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_432290:

            movzx EAX,WORD PTR [R15+2]
            lea RSI,QWORD PTR [RSP+28]
            mov ECX,523
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+28],CX
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            je .L_432360
.L_4322c2:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_432265
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4322d8:

            movzx EAX,WORD PTR [R15]
            mov ESI,521
            mov EDX,4
            mov WORD PTR [RSP+28],SI
            lea RSI,QWORD PTR [RSP+28]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            jne .L_4322c2

            movzx EAX,BYTE PTR [R15+24]
            jmp .L_4321e2
          .byte 0x90
.L_432310:

            movzx EAX,BYTE PTR [R15+4]
            pxor XMM0,XMM0
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,2
            mov RDI,RBX
            mov BYTE PTR [RSP+32],8
            movups XMMWORD PTR [RSP+34],XMM0
            mov BYTE PTR [RSP+33],AL
            call .L_403d30

            test EAX,EAX
            jne .L_4322c2

            movzx EDX,BYTE PTR [R15+4]
            lea RSI,QWORD PTR [R15+5]
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_4322c2

            movzx EAX,BYTE PTR [R15+24]
            jmp .L_4321f2
.L_432360:

            movzx EAX,BYTE PTR [R15+24]
            test AL,4
            je .L_4321f2

            jmp .L_432310
          .byte 0x90
.L_432370:

            mov EAX,3
            jmp .L_432265
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432380:

            movzx EAX,WORD PTR [R15+22]
            mov EDX,530
            lea RSI,QWORD PTR [RSP+28]
            mov WORD PTR [RSP+28],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            jne .L_4322c2

            jmp .L_4321fa
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4323c0:

            mov RSI,QWORD PTR [RSP+8]
            movzx EDX,R14B
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_4322c2

            jmp .L_432203
          .byte 0x66
          .byte 0x90
.L_4323e0:

            sub EAX,1
            mov RDI,RBX
            movzx ESI,AX
            call .L_403420

            jmp .L_432215
.L_4323f3:

            call __stack_chk_fail@PLT
.L_4323f8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432400:

            push R12
            push RBP
            xor ESI,ESI
            push RBX
            sub RSP,96
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],2
            mov WORD PTR [RSP+16],SI
            mov EAX,13
            je .L_432450
.L_432429:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43253f

            add RSP,96
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432450:

            movzx EAX,WORD PTR [RDI+168]
            pxor XMM0,XMM0
            xor EDX,EDX
            mov ECX,4104
            mov RBX,RDI
            mov WORD PTR [RSP+72],DX
            mov QWORD PTR [RSP+64],0
            lea RBP,QWORD PTR [RSP+16]
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+50],AX
            movzx EAX,BYTE PTR [RDI+49]
            movups XMMWORD PTR [RSP+18],XMM0
            test AL,1
            mov BYTE PTR [RSP+72],2
            mov WORD PTR [RSP+16],CX
            je .L_4324bd

            test AL,2
            jne .L_432528

            lea R12,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RDI+4]
            mov RSI,R12
            call .L_437710

            mov RSI,R12
            mov RDI,RBP
            call .L_4377f0
.L_4324bd:

            movzx EAX,BYTE PTR [RBX+97]
            test AL,1
            je .L_4324e5

            test AL,2
            jne .L_432528

            lea R12,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RBX+52]
            mov RSI,R12
            call .L_437710

            mov RSI,R12
            mov RDI,RBP
            call .L_4377f0
.L_4324e5:

            movzx EDX,BYTE PTR [RSP+17]
            mov R12,RDX
.L_4324ed:

            lea RSI,QWORD PTR [RBP+2]
            lea RBP,QWORD PTR [RSP+48]
            mov ECX,21
            lea RDI,QWORD PTR [RBP+5]
            call __memcpy_chk@PLT

            xor ECX,ECX
            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            mov BYTE PTR [RSP+52],R12B
            or BYTE PTR [RSP+72],4
            call .L_432130

            jmp .L_432429
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432528:

            mov EAX,4294967041
            mov EDX,1
            mov R12D,1
            mov WORD PTR [RSP+17],AX
            jmp .L_4324ed
.L_43253f:

            call __stack_chk_fail@PLT
.L_432544:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432550:

            and BYTE PTR [RDI+49],254
            and BYTE PTR [RDI+97],254
            jmp .L_432400
.L_43255d:

            nop
            nop
            nop
.L_432560:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_432568:

            movzx EAX,BYTE PTR [RDI+49]
            test AL,1
            je .L_432638

            test RSI,RSI
            je .L_4325e0

            mov RAX,QWORD PTR [RSI]
            xor R12D,R12D
            cmp QWORD PTR [RDI+4],RAX
            jne .L_432668
.L_432589:

            test EDX,EDX
            mov EBP,EDX
            mov RBX,RDI
            je .L_432609
.L_432592:

            call .L_401240

            lea RCX,QWORD PTR [R12+R12*1]
            mov EDI,EAX
            add RCX,R12
            shl RCX,4
            add RCX,RBX
            mov ESI,DWORD PTR [RCX+12]
            sub ESI,EAX
            xor EAX,EAX
            test ESI,ESI
            jle .L_4325d1

            imul EDX,EBP,1000
            cmp ESI,EDX
            jbe .L_4325d1

            add EDX,EDI
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            mov DWORD PTR [RCX+12],EDX
            call .L_431ee0

            mov EAX,DWORD PTR [RSP+12]
.L_4325d1:

            add RSP,16
.L_4325d5:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4325e0:

            xor R12D,R12D
            test AL,2
            jne .L_432589

            movzx ECX,BYTE PTR [RDI+97]
            test CL,1
            je .L_43266e
.L_4325f0:

            and ECX,2
            mov EAX,23
            je .L_4325d1

            mov R12D,1
.L_432600:

            test EDX,EDX
            mov EBP,EDX
            mov RBX,RDI
            jne .L_432592
.L_432609:

            lea RCX,QWORD PTR [R12+R12*1]
            add RCX,R12
            shl RCX,4
            and BYTE PTR [RDI+RCX*1+49],254
            call .L_431ee0

            mov RDI,RBX
            call .L_432400

            add RSP,16
.L_43262a:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432638:

            movzx ECX,BYTE PTR [RDI+97]
            mov EAX,23
            test CL,1
            je .L_4325d1

            test RSI,RSI
            je .L_4325f0
.L_43264b:

            mov RBX,QWORD PTR [RSI]
            cmp QWORD PTR [RDI+52],RBX
            mov EAX,23
            jne .L_4325d1

            mov R12D,1
            jmp .L_432600
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_432668:

            test BYTE PTR [RDI+97],1
            jne .L_43264b
.L_43266e:

            mov EAX,23
            jmp .L_4325d1
.L_432678:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432680:

            cmp DWORD PTR [RDI],2
            jne .L_432690

            jmp .L_432560
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432690:

            mov EAX,13
            ret 
.L_432696:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4326a0:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            call .L_401240

            test BYTE PTR [RBX+49],1
            mov EBP,EAX
            je .L_4326c0

            cmp EAX,DWORD PTR [RBX+12]
            js .L_4326c0

            cmp DWORD PTR [RBX],2
            je .L_4326e0
.L_4326c0:

            test BYTE PTR [RBX+97],1
            je .L_4326d0

            cmp EBP,DWORD PTR [RBX+60]
            js .L_4326d0

            cmp DWORD PTR [RBX],2
            je .L_4326f0
.L_4326d0:

            add RSP,8
            mov RDI,RBX
            pop RBX
            pop RBP
            jmp .L_431ee0
          .byte 0x66
          .byte 0x90
.L_4326e0:

            lea RSI,QWORD PTR [RBX+4]
            xor EDX,EDX
            mov RDI,RBX
            call .L_432560

            jmp .L_4326c0
.L_4326f0:

            lea RSI,QWORD PTR [RBX+52]
            xor EDX,EDX
            mov RDI,RBX
            call .L_432560

            jmp .L_4326d0
.L_432700:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b40

            add RSP,8
            mov RDI,RAX
            jmp .L_4326a0
.L_43271a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_432720:

            cmp DWORD PTR [RDI],2
            mov EAX,13
            je .L_432730

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_432730:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_43273e:

            mov RBX,RDI
            mov RDI,RDX
            mov EBP,ECX
            call strlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,32
            ja .L_4327e4

            xor EDX,EDX
            mov RSI,R13
            mov RDI,RBX
            call .L_432560

            test BYTE PTR [RBX+49],1
            jne .L_432808

            mov EDI,16
            xor EAX,EAX
            xor R14D,R14D
.L_43277e:

            test R13,R13
            je .L_4327f0

            mov RDX,QWORD PTR [R13]
            mov QWORD PTR [RBX+RAX*1+4],RDX
            lea RAX,QWORD PTR [R14+R14*1]
            add RAX,R14
            shl RAX,4
            and BYTE PTR [RBX+RAX*1+49],253
.L_43279c:

            mov RSI,R12
            lea R12,QWORD PTR [R14+R14*1]
            mov EDX,33
            add RDI,RBX
            add R12,R14
            shl R12,4
            add R12,RBX
            call .L_42cad0

            or BYTE PTR [R12+49],1
            imul EBP,EBP,1000
            call .L_401240

            add EAX,EBP
            mov RDI,RBX
            mov DWORD PTR [R12+12],EAX
            call .L_431ee0

            mov RDI,RBX
            call .L_432400

            xor EAX,EAX
.L_4327e4:

            pop RBX
.L_4327e5:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4327f0:

            lea RAX,QWORD PTR [R14+R14*1]
            add RAX,R14
            shl RAX,4
            or BYTE PTR [RBX+RAX*1+49],2
            jmp .L_43279c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432808:

            test BYTE PTR [RBX+97],1
            mov EAX,3
            jne .L_4327e4

            mov EDI,64
            mov EAX,48
            mov R14D,1
            jmp .L_43277e
.L_432828:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432830:

            ret 
.L_432832:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432840:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,312
.L_432854:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            call .L_430af0

            add BYTE PTR [RBP+170],1
            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+144]
            mov R12,RAX
            lea RAX,QWORD PTR [RSP+16]
            xor ECX,ECX
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+64],CX
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45894a]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_43295c

            lea RDI,QWORD PTR [RIP+.L_45a5dc]
            mov EDX,16394
            mov ESI,64
            mov WORD PTR [RSP+64],DX
            lea R14,QWORD PTR [RSP+64]
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+66]
            lea RSI,QWORD PTR [RIP+.L_45a5dc]
            mov RBX,RAX
            mov ECX,64
            mov RDX,RAX
            call __memcpy_chk@PLT

            mov BYTE PTR [RSP+65],BL
            movzx EBX,BL
            mov RSI,R14
            lea EDX,DWORD PTR [RBX+2]
            mov RDI,R15
            call .L_403d30

            test EAX,EAX
            je .L_432988
.L_43294c:

            mov RDI,R15
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
.L_43295c:

            mov RCX,QWORD PTR [RSP+296]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4329dc

            add RSP,312
.L_432976:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432988:

            mov RBX,QWORD PTR [RSP+8]
            add R12,2568
            mov RDI,R12
            lea RSI,QWORD PTR [RBX+16]
            call .L_415fe0

            mov EAX,4294963391
            mov RDI,R12
            mov WORD PTR [RSP+50],AX
            call .L_415f60

            lea RCX,QWORD PTR [RIP+.L_432ba0]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov R8,RBP
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_42e6e0

            test EAX,EAX
            je .L_43295c

            jmp .L_43294c
.L_4329dc:

            call __stack_chk_fail@PLT
.L_4329e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4329f0:

            push RBP
            push RBX
            mov EBP,13
            sub RSP,8
            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jne .L_432a2a

            mov RBX,RDI
            call .L_430af0

            lea RDX,QWORD PTR [RIP+.L_4337d0]
            lea RDI,QWORD PTR [RAX+9784]
            mov RCX,RBX
            mov ESI,1000
            call .L_42fdf0

            test EAX,EAX
            mov EBP,EAX
            je .L_432a38
.L_432a2a:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432a38:

            mov DWORD PTR [RBX],1
            mov BYTE PTR [RBX+170],0
            mov RDI,RBX
            call .L_432840

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_432a56:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432a60:

            push RBP
            push RBX
            xor ECX,ECX
            mov RBX,RDI
            sub RSP,24
.L_432a6b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],1
            mov WORD PTR [RSP+4],CX
            mov WORD PTR [RSP+1],AX
            je .L_432ac8
.L_432a8c:

            mov DWORD PTR [RBX],0
.L_432a92:

            mov RDI,RBX
            call .L_430b10

            mov ESI,16384
            mov RDI,RAX
            call .L_402d30

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_432b9a

            add RSP,24
.L_432abf:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432ac8:

            test R8D,R8D
            je .L_432af0
.L_432acd:

            cmp BYTE PTR [RBX+170],1
            ja .L_432a8c

            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            jmp .L_432a92
.L_432af0:

            cmp BYTE PTR [RSI+1],68
            jne .L_432acd

            mov RBP,RDX
            lea RCX,QWORD PTR [RSP+1]
            mov EDX,3
            mov ESI,16
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_432a92

            cmp BYTE PTR [RSP+2],1
            jne .L_432a92

            cmp BYTE PTR [RSP+3],1
            jne .L_432a8c

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,11
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_432a92

            cmp BYTE PTR [RSP+5],2
            jne .L_432a92

            movzx EAX,WORD PTR [RSP+6]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RBX+168],AX
            call .L_431da0

            mov DWORD PTR [RBX],2
            mov BYTE PTR [RBX+170],0
            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,25000
            mov ESI,EAX
            call .L_430d50

            jmp .L_432a92
.L_432b9a:

            call __stack_chk_fail@PLT
.L_432b9f:

            nop
.L_432ba0:

            jmp .L_432a60
.L_432ba5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432bb0:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            sub RSP,240
.L_432bc2:

            lea RBX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ESI,ESI
            xor EDI,EDI
            mov EDX,2
            mov WORD PTR [RSP+25],SI
            mov WORD PTR [RSP+28],DI
            xor ESI,ESI
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov R12,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov ESI,2
            mov RDI,RBX
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45894f]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            je .L_432d50

            cmp DWORD PTR [RBP],2
            mov RBX,RAX
            lea RSI,QWORD PTR [RSP+25]
            mov ECX,272
            mov EDX,3
            mov RDI,RBX
            mov WORD PTR [RSP+25],CX
            sete AL
            lea EAX,DWORD PTR [RAX+RAX*1-1]
            mov BYTE PTR [RSP+27],AL
            call .L_403d30

            test EAX,EAX
            je .L_432cc0
.L_432c86:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_432c96:

            mov RCX,QWORD PTR [RSP+232]
            xor RCX,QWORD PTR FS:[40]
            jne .L_432d5a

            add RSP,240
.L_432cb4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_432cc0:

            movzx EAX,WORD PTR [RBP+168]
            mov EDX,523
            lea RSI,QWORD PTR [RSP+28]
            mov WORD PTR [RSP+28],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+30],AX
            call .L_403d30

            test EAX,EAX
            jne .L_432c86

            add R12,2568
            lea R14,QWORD PTR [RSP+32]
            mov RDI,R12
            call .L_415f60

            lea RSI,QWORD PTR [RSP+48]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_415fe0

            lea RCX,QWORD PTR [RIP+.L_432ef0]
            mov EAX,4294963391
            mov R8,RBP
            mov RDX,R14
            mov RSI,RBX
            mov RDI,R13
            mov WORD PTR [RSP+66],AX
            call .L_42e6e0

            test EAX,EAX
            je .L_432c96

            jmp .L_432c86
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432d50:

            mov EAX,3
            jmp .L_432c96
.L_432d5a:

            call __stack_chk_fail@PLT
.L_432d5f:

            nop
.L_432d60:

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_432de8

            push RBX

            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+9784]
            call .L_42fe20

            mov RDI,RBX
            mov DWORD PTR [RBX],0
            call .L_430b10

            mov ESI,16384
            mov RDI,RAX
            call .L_402d30

            mov RDI,RBX
            call .L_431df0

            and BYTE PTR [RBX+49],254
            and BYTE PTR [RBX+97],254
            mov RDI,RBX
            call .L_432400

            lea RDI,QWORD PTR [RBX+144]
            mov BYTE PTR [RBX+170],0
            call .L_430c70

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8504]
            call .L_435670

            mov RDI,RBX
            call .L_432bb0

            xor EAX,EAX
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_432de8:

            mov EAX,13
            ret 
.L_432dee:

            nop
            nop
.L_432df0:

            mov EAX,DWORD PTR [RDI]
            cmp EAX,1
            je .L_432e10

            cmp EAX,2
            jne .L_432e08

            jmp .L_432bb0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432e08:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_432e10:

            jmp .L_432840
.L_432e15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432e20:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b40

            add RSP,8
            mov RDI,RAX
            jmp .L_432df0
.L_432e3a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_432e40:

            push RBX
            mov RBX,RDI
            sub RSP,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],2
            mov WORD PTR [RSP+5],AX
            je .L_432e90
.L_432e64:

            mov DWORD PTR [RBX],0
.L_432e6a:

            mov RDI,RBX
            call .L_431df0
.L_432e72:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_432ee9

            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_432e90:

            test R8D,R8D
            jne .L_432e64

            cmp BYTE PTR [RSI+1],68
            jne .L_432e64

            lea RCX,QWORD PTR [RSP+5]
            mov RDI,RDX
            mov ESI,16
            mov EDX,3
            call .L_430f70

            test EAX,EAX
            jne .L_432ebd

            cmp BYTE PTR [RSP+6],1
            je .L_432ec8
.L_432ebd:

            cmp DWORD PTR [RBX],2
            je .L_432e72

            jmp .L_432e6a
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_432ec8:

            cmp BYTE PTR [RSP+7],1
            jne .L_432e64

            call .L_401240

            lea RDI,QWORD PTR [RBX+144]
            mov EDX,25000
            mov ESI,EAX
            call .L_430d50

            jmp .L_432ebd
.L_432ee9:

            call __stack_chk_fail@PLT
.L_432eee:

            nop
            nop
.L_432ef0:

            jmp .L_432e40
.L_432ef5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_432f00:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,104
.L_432f17:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            cmp DWORD PTR [RBX],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+6],DX
            mov WORD PTR [RSP+22],CX
            mov WORD PTR [RSP+10],SI
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_432f80
.L_432f59:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4330fb

            add RSP,104
.L_432f71:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_432f80:

            mov R13,RAX
            movzx EAX,BYTE PTR [RBP]
            and EAX,48
            cmp AL,16
            jne .L_432f59

            cmp BYTE PTR [RBP+1],2
            jne .L_432f59

            lea RCX,QWORD PTR [RSP+6]
            mov EDX,4
            mov ESI,18
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_432f59

            cmp BYTE PTR [RSP+7],2
            jne .L_432f59

            lea RCX,QWORD PTR [RSP+22]
            mov EDX,10
            mov ESI,19
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_432f59

            cmp BYTE PTR [RSP+23],8
            jne .L_432f59

            lea RCX,QWORD PTR [RSP+10]
            mov EDX,4
            mov ESI,20
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_432f59

            cmp BYTE PTR [RSP+11],2
            jne .L_432f59

            lea RCX,QWORD PTR [RSP+4]
            lea RDX,QWORD PTR [RSP+2]
            mov ESI,17
            mov RDI,R12
            call .L_431010

            test EAX,EAX
            jne .L_432f59

            movzx EAX,WORD PTR [R12+58]
            movzx ECX,WORD PTR [RSP+2]
            movzx EDX,WORD PTR [RSP+4]
            sub EAX,ECX
            cmp EDX,EAX
            jg .L_432f59

            lea RBP,QWORD PTR [R13+9784]
            lea R14,QWORD PTR [RBX+104]
            mov RDI,RBP
            call .L_42ff00

            mov R15D,EAX
            mov RAX,QWORD PTR [RSP+24]
            test R15B,R15B
            je .L_433100

            cmp QWORD PTR [RBX+104],RAX
            sete R15B
.L_433067:

            test R15B,R15B
            je .L_432f59

            movzx EAX,WORD PTR [RSP+8]
            movzx ESI,WORD PTR [RSP+2]
            mov RDI,R12
            rol AX,8
            mov WORD PTR [RBX+112],AX
            movzx EAX,WORD PTR [RSP+12]
            rol AX,8
            mov WORD PTR [RBX+114],AX
            call .L_403550

            movzx ESI,WORD PTR [RSP+4]
            mov RDI,R12
            add SI,WORD PTR [RSP+2]
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            jne .L_432f59

            lea RDI,QWORD PTR [R13+2568]
            lea R15,QWORD PTR [RSP+32]
            call .L_415f70

            lea RDI,QWORD PTR [R15+16]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RSI,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40f0a0

            mov RDX,R15
            mov RSI,R12
            mov RDI,RBP
            movzx EAX,WORD PTR [RBX+112]
            mov WORD PTR [RSP+66],AX
            mov RAX,QWORD PTR [R13+9784]
            call QWORD PTR [RAX+8]

            jmp .L_432f59
.L_4330fb:

            call __stack_chk_fail@PLT
.L_433100:

            mov QWORD PTR [RBX+104],RAX
            xor BYTE PTR [RBX+104],2
            test BYTE PTR [RBX+49],1
            je .L_43312d

            lea RSI,QWORD PTR [RSP+14]
            lea RDI,QWORD PTR [RBX+4]
            call .L_437710

            test BYTE PTR [RBX+49],2
            jne .L_43315b

            mov RAX,QWORD PTR [RSP+14]
            cmp QWORD PTR [RBX+104],RAX
            je .L_43315b
.L_43312d:

            test BYTE PTR [RBX+97],1
            je .L_433152

            lea RSI,QWORD PTR [RSP+14]
            lea RDI,QWORD PTR [RBX+52]
            call .L_437710

            test BYTE PTR [RBX+97],2
            jne .L_433192

            mov RAX,QWORD PTR [RBX+104]
            cmp QWORD PTR [RSP+14],RAX
            je .L_433192
.L_433152:

            xor BYTE PTR [RBX+104],2
            jmp .L_433067
.L_43315b:

            xor EAX,EAX
.L_43315d:

            lea RSI,QWORD PTR [RBX+RAX*1+16]
            or RCX,-1
            xor EAX,EAX
            mov RDI,RSI

            repne scasb AL,BYTE PTR [RDI]

            mov RDI,RBP
            mov RAX,RCX
            not RAX
            lea RDX,QWORD PTR [RAX-1]
            movzx EDX,DL
            call .L_42ff80

            test EAX,EAX
            jne .L_432f59

            mov R15D,1
            jmp .L_433152
.L_433192:

            mov EAX,48
            jmp .L_43315d
.L_433199:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4331a0:

            jmp .L_432f00
.L_4331a5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4331b0:

            test BYTE PTR [RSI],48
            jne .L_4331bb

            cmp BYTE PTR [RSI+1],2
            je .L_4331c0
.L_4331bb:

            ret 

            nop
            nop
            nop
.L_4331c0:

            mov RDX,RCX
            jmp .L_431be0
.L_4331c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4331d0:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,RDI
            sub RSP,376
.L_4331ea:

            lea RBX,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+360],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov RBP,RAX
            xor EDX,EDX
            mov RSI,R13
            mov RDI,RBX
            lea R13,QWORD PTR [RBP+9784]
            mov WORD PTR [RSP+5],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42fa70

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            test RAX,RAX
            je .L_43328d

            mov RBX,RAX
            movzx EAX,BYTE PTR [RAX+78]
            lea RSI,QWORD PTR [RSP+5]
            mov EDX,3
            mov RDI,RBX
            mov BYTE PTR [RSP+7],R14B
            and EAX,4294967235
            or EAX,28
            mov BYTE PTR [RBX+78],AL
            mov EAX,272
            mov WORD PTR [RSP+5],AX
            call .L_403d30

            test EAX,EAX
            je .L_4332c0
.L_433285:

            mov RDI,RBX
            call .L_4033b0
.L_43328d:

            mov RAX,QWORD PTR [RSP+360]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4333b1

            add RSP,376
.L_4332ab:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4332c0:

            lea RDI,QWORD PTR [RBP+2568]
            lea R15,QWORD PTR [RSP+16]
            call .L_415f70

            lea RSI,QWORD PTR [R12+104]
            movdqu XMM0,XMMWORD PTR [RAX]
            lea RDI,QWORD PTR [R15+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_40f0a0

            movzx EDX,WORD PTR [RBX+58]
            movzx EAX,WORD PTR [R12+112]
            cmp DX,128
            mov WORD PTR [RSP+50],AX
            ja .L_43328d

            movzx EAX,BYTE PTR [RSP+192]
            lea R14,QWORD PTR [RSP+224]
            mov RDI,RBX
            mov RCX,R14
            sub EDX,EAX
            mov ESI,EAX
            movzx EDX,DX
            call .L_403860

            movzx EBP,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [RSP+192]
            mov RDI,R12
            sub EBP,EAX
            movsxd RBP,EBP
            call .L_430ac0

            lea RCX,QWORD PTR [RIP+.L_45a5f8]
            xor ESI,ESI
            mov RDI,RAX
            mov R9,RBP
            mov R8,R14
            mov EDX,10
            call .L_4302c0

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R13
            call .L_430010

            test EAX,EAX
            jne .L_433285

            mov RAX,QWORD PTR [R12+104]
            mov ECX,EAX
            mov EDX,EAX
            mov QWORD PTR [RSP+8],RAX
            and ECX,4294967293
            or EDX,2
            test AL,2
            mov EAX,ECX
            cmove EAX,EDX
            cmp DWORD PTR [R12],2
            mov BYTE PTR [RSP+8],AL
            jne .L_43328d

            lea RSI,QWORD PTR [RSP+8]
            mov EDX,20
            mov RDI,R12
            call .L_432560

            jmp .L_43328d
.L_4333b1:

            call __stack_chk_fail@PLT
.L_4333b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4333c0:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            mov RBP,RDI
            mov EDX,66
            mov ESI,32
            mov RDI,RBX
            sub RSP,224
.L_4333e5:

            mov R13,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov RCX,R13
            xor EAX,EAX
            mov WORD PTR [RSP],AX
            call .L_430f70

            test EAX,EAX
            je .L_4334b0
.L_433411:

            mov R13D,1
.L_433417:

            movzx EDX,WORD PTR [RBX+58]
            cmp DX,128
            ja .L_433478

            movzx EAX,BYTE PTR [R12+128]
            lea R14,QWORD PTR [RSP+80]
            mov RDI,RBX
            mov RCX,R14
            sub EDX,EAX
            mov ESI,EAX
            movzx EDX,DX
            call .L_403860

            movzx EBX,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [R12+128]
            mov RDI,RBP
            sub EBX,EAX
            movsxd RBX,EBX
            call .L_430ac0

            lea RCX,QWORD PTR [RIP+.L_45a628]
            mov R9,RBX
            mov R8,R14
            mov EDX,10
            xor ESI,ESI
            mov RDI,RAX
            call .L_4302c0
.L_433478:

            mov EDX,R13D
            mov RSI,R12
            mov RDI,RBP
            call .L_4331d0

            mov RAX,QWORD PTR [RSP+216]
            xor RAX,QWORD PTR FS:[40]
            jne .L_433503

            add RSP,224
.L_4334a0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4334b0:

            movzx R14D,BYTE PTR [RSP+1]
            mov RDI,RBP
            call .L_430af0

            cmp R14B,BYTE PTR [RAX+8505]
            je .L_4334d8
.L_4334c7:

            mov R13D,4294967295
            jmp .L_433417
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4334d8:

            movzx R14D,BYTE PTR [RSP+1]
            mov RDI,RBP
            call .L_430af0

            lea RDI,QWORD PTR [R13+2]
            lea RSI,QWORD PTR [RAX+8506]
            mov RDX,R14
            call memcmp@PLT

            test EAX,EAX
            je .L_433411

            jmp .L_4334c7
.L_433503:

            call __stack_chk_fail@PLT
.L_433508:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433510:

            jmp .L_4333c0
.L_433515:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433520:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            xor EBX,EBX
            mov RBP,RDI
            sub RSP,296
.L_433539:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            mov WORD PTR [RSP+34],BX
            lea RBX,QWORD PTR [RSP+128]
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov EDX,2
            mov ESI,16
            mov RDI,RBX
            mov WORD PTR [RSP+26],R9W
            mov WORD PTR [RSP+38],R10W
            mov WORD PTR [RSP+30],R11W
            mov R12,RAX
            movaps XMMWORD PTR [RSP+80],XMM0
            lea R13,QWORD PTR [R12+216]
            movaps XMMWORD PTR [RSP+96],XMM0
            movaps XMMWORD PTR [RSP+112],XMM0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_4588cd]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,R13
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_433619

            movzx EAX,WORD PTR [RBP+112]
            lea RSI,QWORD PTR [RSP+26]
            mov R8D,530
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+26],R8W
            rol AX,8
            mov WORD PTR [RSP+28],AX
            call .L_403d30

            test EAX,EAX
            je .L_433648
.L_433609:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_433619:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4337c8

            add RSP,296
.L_433637:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433648:

            mov RAX,QWORD PTR [RBP+104]
            mov EDI,2067
            lea RSI,QWORD PTR [RSP+38]
            mov WORD PTR [RSP+38],DI
            mov EDX,10
            mov RDI,RBX
            mov QWORD PTR [RSP+40],RAX
            call .L_403d30

            test EAX,EAX
            jne .L_433609

            movzx EAX,WORD PTR [RBP+114]
            mov ESI,532
            mov EDX,4
            mov WORD PTR [RSP+30],SI
            lea RSI,QWORD PTR [RSP+30]
            mov RDI,RBX
            rol AX,8
            mov WORD PTR [RSP+32],AX
            call .L_403d30

            test EAX,EAX
            jne .L_433609

            movzx EAX,BYTE PTR [R14+78]
            shr AL,2
            and EAX,15
            cmp AL,7
            je .L_433790
.L_4336b5:

            movzx EAX,WORD PTR [R14+58]
            mov EDX,4294967057
            lea RSI,QWORD PTR [RSP+34]
            mov WORD PTR [RSP+34],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+36],AX
            call .L_403d30

            test EAX,EAX
            jne .L_433609

            movzx R15D,WORD PTR [RBX+58]
            movzx ESI,WORD PTR [R14+58]
            mov RDI,RBX
            add ESI,R15D
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            jne .L_433609

            movzx ECX,WORD PTR [R14+58]
            xor ESI,ESI
            movzx EDX,R15W
            mov R8,RBX
            mov RDI,R14
            call .L_403f50

            lea RDI,QWORD PTR [R12+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            lea RDX,QWORD PTR [RSP+80]
            movzx EAX,WORD PTR [RBP+114]
            xor R8D,R8D
            xor ECX,ECX
            movaps XMMWORD PTR [RSP+96],XMM0
            mov RSI,RBX
            mov RDI,R13
            rol AX,8
            mov WORD PTR [RSP+110],AX
            mov EAX,4294963391
            mov WORD PTR [RSP+114],AX
            movzx EAX,BYTE PTR [R12+24]
            mov BYTE PTR [RSP+116],AL
            call .L_42e6e0

            test EAX,EAX
            jne .L_433609

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_433619
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433790:

            movdqu XMM0,XMMWORD PTR [R12+1528]
            lea RSI,QWORD PTR [RSP+48]
            mov ECX,4117
            mov EDX,18
            mov RDI,RBX
            mov WORD PTR [RSP+48],CX
            movups XMMWORD PTR [RSP+50],XMM0
            call .L_403d30

            test EAX,EAX
            jne .L_433609

            jmp .L_4336b5
.L_4337c8:

            call __stack_chk_fail@PLT
.L_4337cd:

            nop
            nop
            nop
.L_4337d0:

            jmp .L_433520
.L_4337d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4337e0:

            push R15
            push R14
            mov R14,RCX
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RDX
            sub RSP,56
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call strlen@PLT

            lea RDX,QWORD PTR [RAX-6]
            cmp RDX,249
            jbe .L_433848

            mov EAX,7
.L_433821:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            jne .L_4338be

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433848:

            mov R12,RAX
            mov EAX,25697
            mov R15,RSP
            mov WORD PTR [RSP+4],AX
            pxor XMM0,XMM0
            mov RAX,QWORD PTR [RBX]
            mov RDI,R13
            mov DWORD PTR [RSP],1701996628
            movups XMMWORD PTR [RSP+14],XMM0
            mov QWORD PTR [RSP+6],RAX
            call strlen@PLT

            lea RDI,QWORD PTR [R15+14]
            mov RBX,RAX
            mov ECX,16
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT

            sub RSP,8
.L_433893:

            lea ECX,DWORD PTR [RBX+14]
            mov RDX,R15
            push R14
            mov R9D,16
            mov R8D,16384
            movzx ECX,CX
            mov ESI,R12D
            mov RDI,RBP
            call .L_43fb30

            pop RDX
            xor EAX,EAX
            pop RCX
            jmp .L_433821
.L_4338be:

            call __stack_chk_fail@PLT
.L_4338c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4338d0:

            xor EAX,EAX
            mov DWORD PTR [RDI+256],0
            mov DWORD PTR [RDI+264],ESI
            mov WORD PTR [RDI+260],AX
            mov QWORD PTR [RDI],0
            mov RCX,RDI
            mov QWORD PTR [RDI+248],0
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,256
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_433918:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433920:

            xor EAX,EAX
            mov WORD PTR [RDI+260],AX
            ret 
.L_43392a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_433930:

            movzx ECX,WORD PTR [RDI+260]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_433968

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            jne .L_433957

            jmp .L_43396a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433950:

            movzx EDX,BYTE PTR [RAX]
            cmp EDX,ESI
            je .L_43396a
.L_433957:

            mov RDX,RAX
            movzx EAX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            ja .L_433950
.L_433968:

            xor EAX,EAX
.L_43396a:

            ret 
.L_43396c:

            nop
            nop
            nop
            nop
.L_433970:

            jmp .L_433930
.L_433972:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433980:

            movzx R11D,WORD PTR [RDI+260]
            mov RDX,RDI
            mov RCX,RSI
            xor EAX,EAX
            mov QWORD PTR [RSI],0
            mov QWORD PTR [RSI+96],0
            add R11,RDI
            lea RDI,QWORD PTR [RSI+8]
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3
            cmp RDX,R11

            rep stosq QWORD PTR [RDI]

            jae .L_433cb0

            push RBP
.L_4339c0:

            lea R9,QWORD PTR [RIP+.L_45a654]
            push RBX
.L_4339c8:

            lea RBP,QWORD PTR [RSI+76]
            lea RBX,QWORD PTR [RSI+32]
            mov R8,RSI
            mov R10,RDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4339e0:

            cmp BYTE PTR [RDX],53
            ja .L_433a12

            movzx EAX,BYTE PTR [RDX]
            movsxd RAX,DWORD PTR [R9+RAX*4]
            add RAX,R9
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4339f8:

            movzx EAX,WORD PTR [RDX+2]
            rol AX,8
            mov WORD PTR [R8+92],AX
            movzx EAX,BYTE PTR [RDX+4]
            or BYTE PTR [R8+101],4
            mov BYTE PTR [R8+94],AL
.L_433a12:

            movzx ECX,BYTE PTR [RDX+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433a20:

            lea RDX,QWORD PTR [R10+RCX*1+2]
            cmp R11,RDX
            jbe .L_433a30

            mov R10,RDX
            jmp .L_4339e0
          .byte 0x90
.L_433a30:

            pop RBX
.L_433a31:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433a38:

            movzx ECX,BYTE PTR [RDX+1]
            lea RAX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RAX+RCX*1]
            cmp RAX,RDI
            jae .L_433a20

            cmp BYTE PTR [RDX+2],0
            je .L_433a63

            nop
.L_433a50:

            movzx ESI,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RAX+RSI*1+2]
            cmp RDI,RAX
            jbe .L_433a20

            cmp BYTE PTR [RAX],0
            jne .L_433a50
.L_433a63:

            mov EAX,DWORD PTR [RAX+2]
            or BYTE PTR [R8+101],8
            mov DWORD PTR [R8+96],EAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433a78:

            mov EAX,DWORD PTR [RDX+2]
            or BYTE PTR [R8+100],64
            bswap EAX
            mov DWORD PTR [R8+68],EAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433a90:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RDX+8]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_433aa0:

            movzx ESI,BYTE PTR [RCX]
            shl RAX,8
            add RCX,1
            or RAX,RSI
            cmp RDI,RCX
            jne .L_433aa0

            or BYTE PTR [R8+100],1
            mov QWORD PTR [R8],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433ac8:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RDX+8]
            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_433ad8:

            movzx ESI,BYTE PTR [RCX]
            shl RAX,8
            add RCX,1
            or RAX,RSI
            cmp RCX,RDI
            jne .L_433ad8

            or BYTE PTR [R8+100],2
            mov QWORD PTR [R8+8],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433b00:

            mov RAX,QWORD PTR [RDX+2]
            or BYTE PTR [R8+100],32
            mov QWORD PTR [R8+57],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433b20:

            movdqu XMM0,XMMWORD PTR [RDX+2]
            or BYTE PTR [R8+100],4
            movups XMMWORD PTR [R8+16],XMM0
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433b40:

            movzx EAX,BYTE PTR [RDX+1]
            lea RSI,QWORD PTR [RDX+2]
            cmp EAX,8
            jae .L_433c20

            test AL,4
            jne .L_433cb2

            test EAX,EAX
            je .L_433c51

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBP],CL
            je .L_433c51

            mov EAX,EAX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBP+RAX*1-2],CX
            jmp .L_433c51
.L_433b80:

            movzx EAX,BYTE PTR [RDX+1]
            lea RSI,QWORD PTR [RDX+2]
            cmp EAX,8
            jae .L_433c60

            test AL,4
            jne .L_433cc3

            test EAX,EAX
            je .L_433c90

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBX],CL
            je .L_433c90

            mov EAX,EAX
            movzx ECX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBX+RAX*1-2],CX
            jmp .L_433c90
          .byte 0x90
.L_433bc0:

            mov RAX,QWORD PTR [RDX+2]
            or BYTE PTR [R8+100],16
            mov QWORD PTR [R8+49],RAX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433be0:

            movzx EAX,WORD PTR [RDX+3]
            or BYTE PTR [R8+101],1
            rol AX,8
            mov WORD PTR [R8+74],AX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433c00:

            movzx EAX,WORD PTR [RDX+2]
            or BYTE PTR [R8+100],128
            rol AX,8
            mov WORD PTR [R8+72],AX
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_433c20:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBP],RCX
            mov ECX,EAX
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBP+RCX*1-8],RDI
            lea RDI,QWORD PTR [R8+84]
            mov RCX,RBP
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 
.L_433c51:

            or BYTE PTR [R8+101],2
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0x90
.L_433c60:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBX],RCX
            mov ECX,EAX
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBX+RCX*1-8],RDI
            lea RDI,QWORD PTR [R8+40]
            mov RCX,RBX
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            mov EAX,ECX
            shr EAX,3
            mov ECX,EAX

            rep movsq 
.L_433c90:

            movzx EAX,BYTE PTR [RDX+1]
            mov BYTE PTR [R8+RAX*1+32],0
            or BYTE PTR [R8+100],8
            movzx ECX,BYTE PTR [RDX+1]
            jmp .L_433a20
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433cb0:

            ret 
.L_433cb2:

            mov ECX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBP],ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBP+RAX*1-4],ECX
            jmp .L_433c51
.L_433cc3:

            mov ECX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBX],ECX
            mov ECX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBX+RAX*1-4],ECX
            jmp .L_433c90
.L_433cd3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433ce0:

            movzx EAX,WORD PTR [RDI+260]
            mov ESI,DWORD PTR [RDI+264]
            add RAX,RDI
            cmp ESI,14
            jne .L_433d10

            jmp .L_433d2e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433d00:

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            je .L_433d38

            movzx EDX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RDX*1+2]
.L_433d10:

            cmp RDI,RAX
            jb .L_433d00
.L_433d15:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433d20:

            cmp BYTE PTR [RDI],14
            je .L_433d38

            movzx EDX,BYTE PTR [RDI+1]
            lea RDI,QWORD PTR [RDI+RDX*1+2]
.L_433d2e:

            cmp RDI,RAX
            jb .L_433d20

            jmp .L_433d15
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433d38:

            lea RAX,QWORD PTR [RDI+2]
            ret 
.L_433d3d:

            nop
            nop
            nop
.L_433d40:

            push R12
            movzx R12D,CL
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov EBX,ECX
            movzx ESI,DX
            mov RCX,RBP
            mov EDX,R12D
            call .L_403860

            movzx EDX,AX
            mov EAX,7
            cmp R12D,EDX
            jne .L_433d82

            movzx EBX,BL
            mov WORD PTR [RBP+260],BX
            call .L_401240

            mov DWORD PTR [RBP+256],EAX
            xor EAX,EAX
.L_433d82:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_433d87:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433d90:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,16
.L_433d9c:

            movzx R12D,WORD PTR [RDI+260]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP],AX
            test R12W,R12W
            je .L_433eb8

            cmp DWORD PTR [RDI+264],14
            mov R13,RSI
            mov RBP,RDI
            mov RSI,RSP
            mov EDX,2
            mov RDI,R13
            setne AL
            add EAX,24
            mov BYTE PTR [RSP],AL
            lea EAX,DWORD PTR [R12-10]
            mov BYTE PTR [RSP+1],AL
            call .L_403d30

            test EAX,EAX
            jne .L_433e98

            add R12,RBP
            mov RBX,RBP
            cmp RBP,R12
            jae .L_433eb8

            lea R14,QWORD PTR [RSP+2]
            jmp .L_433e3c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433e18:

            movzx EAX,BYTE PTR [RBX+1]
            mov RSI,RBX
            mov RDI,R13
            lea EDX,DWORD PTR [RAX+2]
            call .L_403d30

            test EAX,EAX
            jne .L_433e98
.L_433e2e:

            movzx EAX,BYTE PTR [RBX+1]
            lea RBX,QWORD PTR [RBX+RAX*1+2]
            cmp R12,RBX
            jbe .L_433eb8
.L_433e3c:

            movzx EAX,BYTE PTR [RBX]
            cmp DWORD PTR [RBP+264],EAX
            je .L_433e2e

            cmp EAX,52
            jne .L_433e18

            call .L_401240

            mov EDX,DWORD PTR [RBX]
            sub EAX,DWORD PTR [RBP+256]
            mov RSI,R14
            mov RDI,R13
            mov DWORD PTR [RSP+2],EDX
            movzx EDX,WORD PTR [RBX+4]
            mov WORD PTR [RSP+6],DX
            mov ECX,DWORD PTR [RSP+4]
            bswap ECX
            mov EDX,ECX
            sub EDX,EAX
            cmp EAX,ECX
            mov EAX,0
            bswap EDX
            cmovb EAX,EDX
            mov EDX,6
            mov DWORD PTR [RSP+4],EAX
            call .L_403d30

            test EAX,EAX
            je .L_433e2e

            nop
            nop
            nop
            nop
.L_433e98:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_433ebc

            add RSP,16
.L_433eac:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_433eb8:

            xor EAX,EAX
            jmp .L_433e98
.L_433ebc:

            call __stack_chk_fail@PLT
.L_433ec1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433ed0:

            xor EAX,EAX
            cmp DWORD PTR [RDI+264],14
            setne AL
            add EAX,1
            ret 
.L_433ee0:

            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            mov RAX,RSI
            mov RDI,RSI
            sub RSP,8
            movzx EDX,WORD PTR [RBP+260]
            sub RAX,RBP
            movzx ECX,BL
            movzx EAX,AL
            movzx ESI,BL
            add EAX,ECX
            add RSI,RDI
            movzx EBX,BL
            sub EDX,EAX
            movsxd RDX,EDX
            call memmove@PLT

            sub WORD PTR [RBP+260],BX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_433f24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_433f30:

            push RBP
            push RBX
            mov R8D,256
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_433f42:

            movzx EAX,WORD PTR [RDI+260]
            movzx EDI,BYTE PTR [RSI]
            sub R8D,EAX
            add RAX,RBX
            cmp RAX,RBX
            jbe .L_433f7e

            cmp DIL,BYTE PTR [RBX]
            je .L_433fd8

            mov RCX,RBX
            mov RSI,RBX
            jmp .L_433f70
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_433f68:

            cmp BYTE PTR [RSI],DIL
            je .L_433fe0

            mov RCX,RSI
.L_433f70:

            movzx EDX,BYTE PTR [RSI+1]
            lea RSI,QWORD PTR [RCX+RDX*1+2]
            cmp RAX,RSI
            ja .L_433f68
.L_433f7e:

            movzx EDX,BYTE PTR [RBP+1]
            movzx R8D,R8W
            lea R9,QWORD PTR [RDX+2]
            cmp R9,R8
            ja .L_4340a4

            cmp R9D,8
            mov ECX,R9D
            jae .L_43402f
.L_433fa0:

            and R9D,4
            jne .L_43408e

            test ECX,ECX
            jne .L_434070
.L_433fb2:

            add RDX,2
            add WORD PTR [RBX+260],DX
            call .L_401240

            mov DWORD PTR [RBX+256],EAX
            xor EAX,EAX
.L_433fca:

            add RSP,8
.L_433fce:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_433fd8:

            mov RSI,RBX
            nop
            nop
            nop
            nop
            nop
.L_433fe0:

            movzx EAX,BYTE PTR [RSI+1]
            movzx ECX,BYTE PTR [RBP+1]
            lea R8D,DWORD PTR [R8+RAX*1+2]
            add RCX,2
            mov RDX,RAX
            mov EAX,3
            movzx R8D,R8W
            cmp RCX,R8
            ja .L_433fca

            add EDX,2
            mov RDI,RBX
            movzx EDX,DL
            call .L_433ee0

            movzx EDX,BYTE PTR [RBP+1]
            movzx EAX,WORD PTR [RBX+260]
            lea R9,QWORD PTR [RDX+2]
            add RAX,RBX
            cmp R9D,8
            mov ECX,R9D
            jb .L_433fa0
.L_43402f:

            mov RDX,QWORD PTR [RBP]
            lea RDI,QWORD PTR [RAX+8]
            mov RSI,RBP
            and RDI,-8
            mov QWORD PTR [RAX],RDX
            mov EDX,R9D
            mov RCX,QWORD PTR [RBP+RDX*1-8]
            mov QWORD PTR [RAX+RDX*1-8],RCX
            sub RAX,RDI
            lea ECX,DWORD PTR [R9+RAX*1]
            sub RSI,RAX
            shr ECX,3

            rep movsq 
.L_43405e:

            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_433fb2
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434070:

            movzx EDX,BYTE PTR [RBP]
            test CL,2
            mov BYTE PTR [RAX],DL
            je .L_43405e

            movzx EDX,WORD PTR [RBP+RCX*1-2]
            mov WORD PTR [RAX+RCX*1-2],DX
            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_433fb2
.L_43408e:

            mov EDX,DWORD PTR [RBP]
            mov DWORD PTR [RAX],EDX
            mov EDX,DWORD PTR [RBP+RCX*1-4]
            mov DWORD PTR [RAX+RCX*1-4],EDX
            movzx EDX,BYTE PTR [RBP+1]
            jmp .L_433fb2
.L_4340a4:

            mov EAX,3
            jmp .L_433fca
.L_4340ae:

            nop
            nop
.L_4340b0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,64
.L_4340bc:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            xor EAX,EAX
            test BYTE PTR [RSI+100],1
            mov WORD PTR [RSP+22],AX
            mov EAX,7
            je .L_4341a3

            mov RBX,RSI
            mov EAX,2062
            lea RSI,QWORD PTR [RSP+22]
            mov WORD PTR [RSP+22],AX
            mov RDX,QWORD PTR [RBX]
            xor EAX,EAX
            mov DWORD PTR [RSP+24],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov RBP,RDI
            mov WORD PTR [RSP+30],AX
            mov EAX,6
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434120:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_434120

            mov RDI,RBP
            call .L_433f30

            cmp DWORD PTR [RBP+264],51
            je .L_4341c8
.L_434142:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,1
            jne .L_434468
.L_43414e:

            test AL,8
            jne .L_4343e0
.L_434156:

            movzx EAX,BYTE PTR [RBX+100]
            test AL,16
            jne .L_4343b0
.L_434162:

            test AL,32
            jne .L_434380
.L_43416a:

            test AL,4
            jne .L_434350
.L_434172:

            test AL,8
            jne .L_4342f8
.L_43417a:

            test AL,AL
            js .L_4342c8
.L_434182:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,2
            jne .L_434298
.L_43418e:

            test AL,4
            jne .L_434260
.L_434196:

            call .L_401240

            mov DWORD PTR [RBP+256],EAX
            xor EAX,EAX
.L_4341a3:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43449c

            add RSP,64
.L_4341bb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4341c8:

            xor EAX,EAX
            test BYTE PTR [RBX+100],2
            mov WORD PTR [RSP+32],AX
            mov EAX,7
            je .L_4341a3

            lea RSI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RBX+8]
            mov R12D,2099
            xor R13D,R13D
            xor R14D,R14D
            mov WORD PTR [RSP+32],R12W
            lea RCX,QWORD PTR [RSI+1]
            mov DWORD PTR [RSP+34],0
            mov EAX,6
            mov WORD PTR [RSI+6],R13W
            mov WORD PTR [RSP+40],R14W
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434218:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_434218

            mov RDI,RBP
            call .L_433f30

            test BYTE PTR [RBX+100],64
            je .L_434142

            mov EAX,DWORD PTR [RBX+68]
            lea RSI,QWORD PTR [RSP+14]
            mov R11D,1076
            mov RDI,RBP
            mov WORD PTR [RSP+14],R11W
            bswap EAX
            mov DWORD PTR [RSP+16],EAX
            call .L_433f30

            jmp .L_434142
          .byte 0x66
          .byte 0x90
.L_434260:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            movzx EAX,WORD PTR [RBX+92]
            rol AX,8
            mov WORD PTR [RSP+16],AX
            movzx EAX,BYTE PTR [RBX+94]
            mov BYTE PTR [RSP+18],AL
            call .L_433f30

            jmp .L_434196
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434298:

            movdqu XMM0,XMMWORD PTR [RBX+76]
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,4100
            mov RDI,RBP
            mov WORD PTR [RSP+32],DX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_43418e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4342c8:

            movzx EAX,WORD PTR [RBX+72]
            lea RSI,QWORD PTR [RSP+14]
            mov ECX,513
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            rol AX,8
            mov WORD PTR [RSP+16],AX
            call .L_433f30

            jmp .L_434182
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4342f8:

            lea R14,QWORD PTR [RBX+32]
            mov ESI,4099
            lea R12,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R14
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+34]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R14
            mov R13,RAX
            call __memcpy_chk@PLT

            mov RSI,R12
            mov RDI,RBP
            mov BYTE PTR [RSP+33],R13B
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_43417a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434350:

            mov EDI,4101
            movdqu XMM0,XMMWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],DI
            mov RDI,RBP
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434172
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434380:

            mov RAX,QWORD PTR [RBX+57]
            lea RSI,QWORD PTR [RSP+32]
            mov R8D,2055
            mov RDI,RBP
            mov WORD PTR [RSP+32],R8W
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_43416a
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4343b0:

            mov RAX,QWORD PTR [RBX+49]
            lea RSI,QWORD PTR [RSP+32]
            mov R9D,2050
            mov RDI,RBP
            mov WORD PTR [RSP+32],R9W
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434162
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4343e0:

            mov EDX,DWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov DWORD PTR [RSP+14],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov DWORD PTR [RSP+18],EAX
            call .L_433f30

            jmp .L_434156
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434468:

            movzx EAX,WORD PTR [RBX+74]
            lea RSI,QWORD PTR [RSP+14]
            mov R10D,768
            mov RDI,RBP
            mov WORD PTR [RSP+14],R10W
            mov BYTE PTR [RSP+16],0
            rol AX,8
            mov WORD PTR [RSP+17],AX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_43414e
.L_43449c:

            call __stack_chk_fail@PLT
.L_4344a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4344b0:

            sub RSP,40
.L_4344b4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            cmp DWORD PTR [RDI+264],14
            je .L_434500

            mov EAX,2099
            mov WORD PTR [RSP+14],AX
            mov RAX,QWORD PTR [RSI]
            lea RSI,QWORD PTR [RSP+14]
            mov QWORD PTR [RSP+16],RAX
            call .L_433f30
.L_4344e9:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43451e

            add RSP,40
.L_4344fd:

            ret 
          .byte 0x66
          .byte 0x90
.L_434500:

            mov RAX,QWORD PTR [RSI]
            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2062
            mov WORD PTR [RSP+14],DX
            mov QWORD PTR [RSP+16],RAX
            call .L_433f30

            jmp .L_4344e9
.L_43451e:

            call __stack_chk_fail@PLT
.L_434523:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434530:

            movzx ECX,WORD PTR [RDI+260]
            mov RAX,RDI
            add RCX,RDI
            cmp RDI,RCX
            jae .L_434588

            movzx EDX,BYTE PTR [RDI]
            cmp ESI,EDX
            je .L_434570

            mov RDX,RDI
            jmp .L_43455a
          .byte 0x66
          .byte 0x90
.L_434550:

            movzx EDX,BYTE PTR [RAX]
            cmp ESI,EDX
            je .L_434570

            mov RDX,RAX
.L_43455a:

            movzx EAX,BYTE PTR [RAX+1]
            lea RAX,QWORD PTR [RDX+RAX*1+2]
            cmp RCX,RAX
            ja .L_434550

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434570:

            movzx ESI,BYTE PTR [RAX+1]
            lea EDX,DWORD PTR [RSI+2]
            mov RSI,RAX
            movzx EDX,DL
            jmp .L_433ee0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434588:

            ret 
.L_43458a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_434590:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            movzx EDX,WORD PTR [RSI+260]
            call memcpy@PLT

            movzx EAX,WORD PTR [RBP+260]
            cmp DWORD PTR [RBX+264],14
            mov WORD PTR [RBX+260],AX
            je .L_4345d8
.L_4345bf:

            mov EAX,DWORD PTR [RBP+256]
            mov DWORD PTR [RBX+256],EAX
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4345d8:

            mov RDI,RBX
            mov ESI,51
            call .L_434530

            mov ESI,52
            mov RDI,RBX
            call .L_434530

            jmp .L_4345bf
.L_4345f4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434600:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_43460e:

            movzx EBX,WORD PTR [RDI+260]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSI+32]
            add RBX,RDI
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSI+14280]
            cmp RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            jae .L_4346b8

            lea RAX,QWORD PTR [RSI+15288]
            lea R15,QWORD PTR [RIP+.L_45a72c]
            lea R12,QWORD PTR [RSI+14088]
            lea R13,QWORD PTR [RSP+48]
            mov RBP,RSI
            mov R14,RDI
            mov QWORD PTR [RSP+40],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434670:

            cmp BYTE PTR [R14],12
            ja .L_4346a9

            movzx EAX,BYTE PTR [R14]
            movsxd RAX,DWORD PTR [R15+RAX*4]
            add RAX,R15
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434688:

            movzx ESI,WORD PTR [R14+2]
            mov RDI,R12
            rol SI,8
            movzx ESI,SI
            call .L_412ce0

            movzx ESI,BYTE PTR [R14+4]
            mov RDI,R12
            call .L_412cf0
.L_4346a9:

            movzx R10D,BYTE PTR [R14+1]
.L_4346ae:

            lea R14,QWORD PTR [R14+R10*1+2]
            cmp RBX,R14
            ja .L_434670
.L_4346b8:

            xor EAX,EAX
.L_4346ba:

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_434860

            add RSP,88
.L_4346d2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4346e0:

            mov RDI,QWORD PTR [RSP+40]
            lea RSI,QWORD PTR [R14+2]
            call .L_4154c0

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4346f8:

            lea RSI,QWORD PTR [R14+2]
            mov RDI,R12
            call .L_412ac0

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434710:

            lea RSI,QWORD PTR [R14+2]
            mov RDI,R12
            call .L_412990

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434728:

            movzx ESI,WORD PTR [R14+2]
            rol SI,8
            cmp SI,WORD PTR [RBP+14386]
            je .L_4346a9

            mov RDI,QWORD PTR [RSP+8]
            movzx ESI,SI
            call .L_405a50

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,131072
            call .L_402d30

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434768:

            movzx EAX,WORD PTR [R14+3]
            rol AX,8
            cmp AL,BYTE PTR [RBP+14388]
            je .L_4346a9

            mov RDI,QWORD PTR [RSP+8]
            movzx ESI,AL
            call .L_405ba0

            test EAX,EAX
            jne .L_4346ba

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,65536
            call .L_402d30

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4347b0:

            movzx R10D,BYTE PTR [R14+1]
            lea RSI,QWORD PTR [R14+2]
            mov ECX,17
            mov RDI,R13
            mov RDX,R10
            mov BYTE PTR [RSP+39],R10B
            mov QWORD PTR [RSP+24],R10
            call __memcpy_chk@PLT

            movzx R11D,BYTE PTR [RSP+39]
            lea RSI,QWORD PTR [RBP+14389]
            mov RDI,R13
            mov BYTE PTR [RSP+R11*1+48],0
            call strcmp@PLT

            test EAX,EAX
            mov R10,QWORD PTR [RSP+24]
            je .L_4346ae

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R13
            call .L_405800

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,262144
            call .L_402d30

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434828:

            mov RAX,QWORD PTR [RBP+14406]
            cmp QWORD PTR [R14+2],RAX
            lea RSI,QWORD PTR [R14+2]
            je .L_4346a9

            mov RDI,QWORD PTR [RSP+8]
            call .L_405a70

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,524288
            call .L_402d30

            movzx R10D,BYTE PTR [R14+1]
            jmp .L_4346ae
.L_434860:

            call __stack_chk_fail@PLT
.L_434865:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434870:

            push RBX
            mov ESI,51
            mov RBX,RDI
            call .L_434530

            mov RDI,RBX
            mov ESI,52
            call .L_434530

            mov DWORD PTR [RBX+264],14
            xor EAX,EAX
            pop RBX
            ret 
.L_434899:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4348a0:

            mov DWORD PTR [RDI],0
            mov DWORD PTR [RDI+4],EDX
            ret 
.L_4348aa:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4348b0:

            push RBX
            xor EBX,EBX
            cmp DWORD PTR [RDI+4],14
            setne BL
            add EBX,1
            call .L_430ac0

            mov ESI,EBX
            mov EDX,4294967295
            mov RDI,RAX
            pop RBX
            jmp .L_401560
.L_4348d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4348e0:

            push R13
            push R12
            mov EDX,256
            push RBP
            push RBX
            xor EBP,EBP
            lea R13,QWORD PTR [RSI+260]
            mov RBX,RSI
            mov R12,RDI
            sub RSP,8
            mov WORD PTR [RSI+260],DX
            cmp DWORD PTR [RDI+4],14
            setne BPL
            add EBP,1
            call .L_430ac0

            xor EDX,EDX
            mov ESI,EBP
            mov R8,R13
            mov RCX,RBX
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            mov EBP,EAX
            je .L_434948

            xor EAX,EAX
            mov WORD PTR [RBX+260],AX
.L_434936:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434948:

            mov ESI,52
            mov RDI,RBX
            call .L_433930

            test RAX,RAX
            mov R13,RAX
            je .L_434936

            call .L_401240

            mov ECX,DWORD PTR [R13+2]
            sub EAX,DWORD PTR [R12]
            bswap ECX
            mov EDX,ECX
            sub EDX,EAX
            cmp EAX,ECX
            bswap EDX
            mov EAX,EDX
            cmovae EAX,EBP
            mov DWORD PTR [R13+2],EAX
            call .L_401240

            mov DWORD PTR [RBX+256],EAX
            add RSP,8
.L_43498c:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_434995:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4349a0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            xor R12D,R12D
            sub RSP,312
.L_4349ba:

            mov ESI,DWORD PTR [RDI+4]
            lea RBP,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+296],RAX
            xor EAX,EAX
            mov RDI,RBP
            call .L_4338d0

            lea RDI,QWORD PTR [RBX+8]
            mov RCX,RBX
            xor EAX,EAX
            mov QWORD PTR [RBX],0
            mov QWORD PTR [RBX+96],0
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov EAX,256
            mov RDI,R13
            mov WORD PTR [RSP+276],AX
            cmp DWORD PTR [R13+4],14
            setne R12B
            add R12D,1
            call .L_430ac0

            lea R8,QWORD PTR [RBP+260]
            xor EDX,EDX
            mov RCX,RBP
            mov ESI,R12D
            mov RDI,RAX
            call .L_401530

            test EAX,EAX
            jne .L_434aaa

            movzx R10D,WORD PTR [RSP+276]
            add R10,RBP
            cmp R10,RBP
            jbe .L_434aaa

            mov RDX,RBP
            lea R9,QWORD PTR [RIP+.L_45a760]
            lea RBP,QWORD PTR [RBX+76]
            lea R11,QWORD PTR [RBX+32]
            mov R12D,16
            nop
            nop
            nop
            nop
            nop
.L_434a70:

            movzx R8D,BYTE PTR [RDX+1]
            cmp BYTE PTR [RDX],53
            mov RCX,R8
            ja .L_434aa0

            movzx ESI,BYTE PTR [RDX]
            movsxd RSI,DWORD PTR [R9+RSI*4]
            add RSI,R9
            jmp RSI
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434a90:

            mov ECX,DWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],64
            bswap ECX
            mov DWORD PTR [RBX+68],ECX
            nop
            nop
            nop
            nop
.L_434aa0:

            lea RDX,QWORD PTR [RDX+R8*1+2]
            cmp R10,RDX
            ja .L_434a70
.L_434aaa:

            mov RBX,QWORD PTR [RSP+296]
            xor RBX,QWORD PTR FS:[40]
            jne .L_434d67

            add RSP,312
.L_434ac8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434ad8:

            lea RCX,QWORD PTR [RDX+2]
            lea RDI,QWORD PTR [RCX+R8*1]
            cmp RCX,RDI
            jae .L_434aa0

            cmp BYTE PTR [RDX+2],0
            jne .L_434af9

            jmp .L_434d30
.L_434af0:

            cmp BYTE PTR [RCX],0
            je .L_434d30
.L_434af9:

            movzx ESI,BYTE PTR [RCX+1]
            lea RCX,QWORD PTR [RCX+RSI*1+2]
            cmp RDI,RCX
            ja .L_434af0

            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434b10:

            lea RDI,QWORD PTR [RDX+2]
            lea R13,QWORD PTR [RDX+8]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_434b20:

            movzx ESI,BYTE PTR [RDI]
            shl RCX,8
            add RDI,1
            or RCX,RSI
            cmp RDI,R13
            jne .L_434b20

            mov QWORD PTR [RBX+8],RCX
            or BYTE PTR [RBX+100],2
            jmp .L_434aa0
.L_434b40:

            lea RDI,QWORD PTR [RDX+2]
            lea R13,QWORD PTR [RDX+8]
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_434b50:

            movzx ESI,BYTE PTR [RDI]
            shl RCX,8
            add RDI,1
            or RCX,RSI
            cmp R13,RDI
            jne .L_434b50

            mov QWORD PTR [RBX],RCX
            or BYTE PTR [RBX+100],1
            jmp .L_434aa0
          .byte 0x90
.L_434b70:

            movzx ECX,WORD PTR [RDX+2]
            rol CX,8
            mov WORD PTR [RBX+92],CX
            movzx ECX,BYTE PTR [RDX+4]
            or BYTE PTR [RBX+101],4
            mov BYTE PTR [RBX+94],CL
            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_434b90:

            mov RCX,QWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],32
            mov QWORD PTR [RBX+57],RCX
            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434ba8:

            movdqu XMM0,XMMWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],4
            movups XMMWORD PTR [RBX+16],XMM0
            jmp .L_434aa0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434bc0:

            cmp R8D,8
            lea RSI,QWORD PTR [RDX+2]
            jae .L_434cf8

            test R8B,4
            jne .L_434d3f

            test R8D,R8D
            je .L_434d27

            movzx ECX,BYTE PTR [RSI]
            test R8B,2
            mov BYTE PTR [RBP],CL
            je .L_434d27

            mov ECX,R8D
            movzx ESI,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [RBP+RCX*1-2],SI
            jmp .L_434d27
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434c08:

            movzx ECX,WORD PTR [RDX+2]
            or BYTE PTR [RBX+100],128
            rol CX,8
            mov WORD PTR [RBX+72],CX
            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_434c20:

            movzx ECX,WORD PTR [RDX+3]
            or BYTE PTR [RBX+101],1
            rol CX,8
            mov WORD PTR [RBX+74],CX
            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_434c38:

            cmp R8B,16
            lea RDI,QWORD PTR [RDX+2]
            cmova RCX,R12
            movzx ESI,CL
            cmp ESI,8
            jb .L_434cc8

            mov R13,QWORD PTR [RDX+2]
            mov QWORD PTR [R11],R13
            mov R13D,ESI
            mov R14,QWORD PTR [RDI+R13*1-8]
            mov QWORD PTR [R11+R13*1-8],R14
            lea R13,QWORD PTR [RBX+40]
            mov R14,R11
            and R13,-8
            sub R14,R13
            add ESI,R14D
            sub RDI,R14
            and ESI,4294967288
            cmp ESI,8
            jb .L_434ca0

            and ESI,4294967288
            xor R14D,R14D
            mov DWORD PTR [RSP+12],EAX
.L_434c86:

            mov R15D,R14D
            add R14D,8
            mov RAX,QWORD PTR [RDI+R15*1]
            cmp R14D,ESI
            mov QWORD PTR [R13+R15*1],RAX
            jb .L_434c86

            mov EAX,DWORD PTR [RSP+12]
            nop
.L_434ca0:

            mov BYTE PTR [RBX+RCX*1+32],0
            or BYTE PTR [RBX+100],8
            jmp .L_434aa0
          .byte 0x66
          .byte 0x90
.L_434cb0:

            mov RCX,QWORD PTR [RDX+2]
            or BYTE PTR [RBX+100],16
            mov QWORD PTR [RBX+49],RCX
            jmp .L_434aa0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434cc8:

            test SIL,4
            jne .L_434d51

            test ESI,ESI
            je .L_434ca0

            movzx R13D,BYTE PTR [RDI]
            test SIL,2
            mov BYTE PTR [R11],R13B
            je .L_434ca0

            mov ESI,ESI
            movzx EDI,WORD PTR [RDI+RSI*1-2]
            mov WORD PTR [R11+RSI*1-2],DI
            jmp .L_434ca0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434cf8:

            mov RCX,QWORD PTR [RDX+2]
            mov QWORD PTR [RBP],RCX
            mov ECX,R8D
            mov RDI,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [RBP+RCX*1-8],RDI
            lea RDI,QWORD PTR [RBX+84]
            mov RCX,RBP
            and RDI,-8
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R8D
            shr ECX,3

            rep movsq 
.L_434d27:

            or BYTE PTR [RBX+101],2
            jmp .L_434aa0
.L_434d30:

            mov ECX,DWORD PTR [RCX+2]
            or BYTE PTR [RBX+101],8
            mov DWORD PTR [RBX+96],ECX
            jmp .L_434aa0
.L_434d3f:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RBP],ECX
            mov ECX,R8D
            mov ESI,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [RBP+RCX*1-4],ESI
            jmp .L_434d27
.L_434d51:

            mov R13D,DWORD PTR [RDI]
            mov ESI,ESI
            mov DWORD PTR [R11],R13D
            mov EDI,DWORD PTR [RDI+RSI*1-4]
            mov DWORD PTR [R11+RSI*1-4],EDI
            jmp .L_434ca0
.L_434d67:

            call __stack_chk_fail@PLT
.L_434d6c:

            nop
            nop
            nop
            nop
.L_434d70:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            sub RSP,360
.L_434d87:

            mov ESI,DWORD PTR [RDI+4]
            lea RBP,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            mov RDI,RBP
            call .L_4338d0

            xor EAX,EAX
            test BYTE PTR [RBX+100],1
            mov WORD PTR [RSP+22],AX
            mov EAX,7
            je .L_434e96

            mov EAX,2062
            lea RSI,QWORD PTR [RSP+22]
            mov RDX,QWORD PTR [RBX]
            mov WORD PTR [RSP+22],AX
            xor EAX,EAX
            mov DWORD PTR [RSP+24],0
            lea RCX,QWORD PTR [RSI+1]
            mov WORD PTR [RSI+6],AX
            xor EAX,EAX
            mov WORD PTR [RSP+30],AX
            mov EAX,6
.L_434df0:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_434df0

            mov RDI,RBP
            call .L_433f30

            cmp DWORD PTR [R12+4],51
            je .L_434ef0
.L_434e11:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,1
            jne .L_435198
.L_434e1d:

            test AL,8
            jne .L_435110
.L_434e25:

            movzx EAX,BYTE PTR [RBX+100]
            test AL,16
            jne .L_4350e0
.L_434e31:

            test AL,32
            jne .L_4350b0
.L_434e39:

            test AL,4
            jne .L_435080
.L_434e41:

            test AL,8
            jne .L_435028
.L_434e49:

            test AL,AL
            js .L_434ff8
.L_434e51:

            movzx EAX,BYTE PTR [RBX+101]
            test AL,2
            jne .L_434fc8
.L_434e5d:

            test AL,4
            jne .L_434f90
.L_434e65:

            movzx ECX,WORD PTR [RSP+324]
            mov EAX,DWORD PTR [R12+4]
            test CX,CX
            jne .L_434ec0

            xor EBX,EBX
            cmp EAX,14
            mov RDI,R12
            setne BL
            add EBX,1
            call .L_430ac0

            xor EDX,EDX
            mov ESI,EBX
            mov RDI,RAX
            call .L_401560
.L_434e96:

            mov RDI,QWORD PTR [RSP+344]
            xor RDI,QWORD PTR FS:[40]
            jne .L_4351cc

            add RSP,360
.L_434eb4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_434ec0:

            xor R13D,R13D
            cmp EAX,14
            movzx EBX,CX
            setne R13B
            mov RDI,R12
            add R13D,1
            call .L_430ac0

            mov ECX,EBX
            mov RDX,RBP
            mov ESI,R13D
            mov RDI,RAX
            call .L_401540

            jmp .L_434e96
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434ef0:

            xor EAX,EAX
            test BYTE PTR [RBX+100],2
            mov WORD PTR [RSP+32],AX
            mov EAX,7
            je .L_434e96

            lea RSI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RBX+8]
            mov R13D,2099
            xor R14D,R14D
            xor R15D,R15D
            mov WORD PTR [RSP+32],R13W
            lea RCX,QWORD PTR [RSI+1]
            mov DWORD PTR [RSP+34],0
            mov EAX,6
            mov WORD PTR [RSI+6],R14W
            mov WORD PTR [RSP+40],R15W
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_434f40:

            mov BYTE PTR [RCX+RAX*1],DL
            shr RDX,8
            sub RAX,1
            jne .L_434f40

            mov RDI,RBP
            call .L_433f30

            test BYTE PTR [RBX+100],64
            je .L_434e11

            mov EAX,DWORD PTR [RBX+68]
            lea RSI,QWORD PTR [RSP+14]
            mov R11D,1076
            mov RDI,RBP
            mov WORD PTR [RSP+14],R11W
            bswap EAX
            mov DWORD PTR [RSP+16],EAX
            call .L_433f30

            jmp .L_434e11
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434f90:

            mov EAX,780
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov WORD PTR [RSP+14],AX
            movzx EAX,WORD PTR [RBX+92]
            rol AX,8
            mov WORD PTR [RSP+16],AX
            movzx EAX,BYTE PTR [RBX+94]
            mov BYTE PTR [RSP+18],AL
            call .L_433f30

            jmp .L_434e65
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_434fc8:

            movdqu XMM0,XMMWORD PTR [RBX+76]
            lea RSI,QWORD PTR [RSP+32]
            mov EDX,4100
            mov RDI,RBP
            mov WORD PTR [RSP+32],DX
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_434e5d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_434ff8:

            movzx EAX,WORD PTR [RBX+72]
            lea RSI,QWORD PTR [RSP+14]
            mov ECX,513
            mov RDI,RBP
            mov WORD PTR [RSP+14],CX
            rol AX,8
            mov WORD PTR [RSP+16],AX
            call .L_433f30

            jmp .L_434e51
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435028:

            lea R15,QWORD PTR [RBX+32]
            mov ESI,4099
            lea R13,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],SI
            mov ESI,16
            mov RDI,R15
            call strnlen@PLT

            lea RDI,QWORD PTR [RSP+34]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R15
            mov R14,RAX
            call __memcpy_chk@PLT

            mov RSI,R13
            mov RDI,RBP
            mov BYTE PTR [RSP+33],R14B
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434e49
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435080:

            mov EDI,4101
            movdqu XMM0,XMMWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+32]
            mov WORD PTR [RSP+32],DI
            mov RDI,RBP
            movups XMMWORD PTR [RSP+34],XMM0
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434e41
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4350b0:

            mov RAX,QWORD PTR [RBX+57]
            lea RSI,QWORD PTR [RSP+32]
            mov R8D,2055
            mov RDI,RBP
            mov WORD PTR [RSP+32],R8W
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434e39
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4350e0:

            mov RAX,QWORD PTR [RBX+49]
            lea RSI,QWORD PTR [RSP+32]
            mov R9D,2050
            mov RDI,RBP
            mov WORD PTR [RSP+32],R9W
            mov QWORD PTR [RSP+34],RAX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+100]
            jmp .L_434e31
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435110:

            mov EDX,DWORD PTR [RBX+96]
            lea RSI,QWORD PTR [RSP+14]
            mov RDI,RBP
            mov DWORD PTR [RSP+14],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov DWORD PTR [RSP+18],EAX
            call .L_433f30

            jmp .L_434e25
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435198:

            movzx EAX,WORD PTR [RBX+74]
            lea RSI,QWORD PTR [RSP+14]
            mov R10D,768
            mov RDI,RBP
            mov WORD PTR [RSP+14],R10W
            mov BYTE PTR [RSP+16],0
            rol AX,8
            mov WORD PTR [RSP+17],AX
            call .L_433f30

            movzx EAX,BYTE PTR [RBX+101]
            jmp .L_434e1d
.L_4351cc:

            call __stack_chk_fail@PLT
.L_4351d1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4351e0:

            push R13
            push R12
            mov ECX,33
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,296
.L_4351f5:

            mov RBX,RSP
            mov RDI,RBX

            rep movsq 

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            cmp DWORD PTR [RBP+4],14
            mov EAX,DWORD PTR [RSI]
            mov DWORD PTR [RDI],EAX
            je .L_4352a0

            movzx ECX,WORD PTR [RSP+260]
            test CX,CX
            je .L_435280

            movzx R12D,CX
            mov R13D,2
.L_435236:

            mov RDI,RBP
            call .L_430ac0

            mov RDX,RBX
            mov ECX,R12D
            mov ESI,R13D
            mov RDI,RAX
            call .L_401540

            mov EBX,EAX
.L_435251:

            test EBX,EBX
            jne .L_43525d

            call .L_401240

            mov DWORD PTR [RBP],EAX
.L_43525d:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_4352f0

            add RSP,296
.L_435279:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_435280:

            mov EBX,2
.L_435285:

            mov RDI,RBP
            call .L_430ac0

            mov ESI,EBX
            xor EDX,EDX
            mov RDI,RAX
            call .L_401560

            mov EBX,EAX
            jmp .L_435251
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4352a0:

            mov ESI,51
            mov RDI,RBX
            call .L_434530

            mov ESI,52
            mov RDI,RBX
            call .L_434530

            movzx ECX,WORD PTR [RSP+260]
            test CX,CX
            jne .L_4352d8

            cmp DWORD PTR [RBP+4],14
            jne .L_435280

            mov EBX,1
            jmp .L_435285
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4352d8:

            xor R13D,R13D
            cmp DWORD PTR [RBP+4],14
            movzx R12D,CX
            setne R13B
            add R13D,1
            jmp .L_435236
.L_4352f0:

            call __stack_chk_fail@PLT
.L_4352f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435300:

            xor EAX,EAX
            cmp DWORD PTR [RDI+4],14
            setne AL
            add EAX,1
            ret 
.L_43530d:

            nop
            nop
            nop
.L_435310:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDI
            sub RSP,288
.L_435321:

            mov ESI,DWORD PTR [RDI+4]
            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_4338d0

            mov RSI,RBX
            mov RDI,RBP
            call .L_4348e0

            test EAX,EAX
            je .L_435378
.L_435351:

            mov EAX,1
.L_435356:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4353bc

            add RSP,288
.L_435370:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435378:

            mov RDI,RBX
            call .L_433ce0

            test R12,R12
            mov RDI,RAX
            sete DL
            test RAX,RAX
            sete CL
            test DL,DL
            je .L_435399

            xor EAX,EAX
            test CL,CL
            jne .L_435356
.L_435399:

            test RDI,RDI
            je .L_4353a2

            test DL,DL
            jne .L_4353b5
.L_4353a2:

            test R12,R12
            je .L_4353ab

            test CL,CL
            jne .L_435351
.L_4353ab:

            mov RSI,R12
            call .L_40d0d0

            jmp .L_435356
.L_4353b5:

            mov EAX,4294967295
            jmp .L_435356
.L_4353bc:

            call __stack_chk_fail@PLT
.L_4353c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4353d0:

            push RBP
            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov RBX,RDX
            mov RBP,RCX
            sub RSP,8
            call .L_401490

            test EAX,EAX
            mov ESI,4294967236
            jne .L_4353fb

            xor ESI,ESI
            test RBP,RBP
            je .L_4353fb

            mov QWORD PTR [RBP],RBX
.L_4353fb:

            add RSP,8
            mov EAX,ESI
            pop RBX
            pop RBP
            ret 
.L_435404:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435410:

            cmp ESI,1
            je .L_435420

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435420:

            push RBP
            push RBX
            mov EDI,10
            mov RBX,R8
            sub RSP,8
            call .L_430740

            mov EDI,1
            mov RBP,RAX
            call .L_4306d0

            add RSP,8
            mov R9,RBX
            mov R8,RBP
            pop RBX
            pop RBP
            lea RDX,QWORD PTR [RIP+.L_45a838]
            mov RCX,RAX
            mov ESI,10
            mov EDI,1
            xor EAX,EAX
            jmp .L_4012c0
.L_435467:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435470:

            push RBX
.L_435471:

            mov RBX,RDI
            mov BYTE PTR [RDI+1184],0
            add RDI,600
            call .L_44bdc0

            lea RDI,QWORD PTR [RBX+984]
            call .L_44c030

            lea RDI,QWORD PTR [RBX+256]
            call .L_442a50

            lea RDI,QWORD PTR [RBX+104]
            call .L_443a60

            lea RDI,QWORD PTR [RBX+1144]
            call .L_443d90

            mov RAX,QWORD PTR [RBX+1240]
            test RAX,RAX
            je .L_4354d0

            mov RDI,QWORD PTR [RBX+1264]
            xor ESI,ESI
            pop RBX
.L_4354ca:

            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4354d0:

            pop RBX
            ret 
.L_4354d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4354e0:

            lea RAX,QWORD PTR [RIP+.L_436010]
            pxor XMM0,XMM0
            mov RDX,RDI
            mov BYTE PTR [RDI+1],0
            mov BYTE PTR [RDI+98],0
            mov QWORD PTR [RDI+1192],RAX
            lea RAX,QWORD PTR [RDI+1192]
            mov BYTE PTR [RDI+1184],0
            mov DWORD PTR [RDI+1200],0
            mov DWORD PTR [RDI+1216],0
            lea RSI,QWORD PTR [RDI+264]
            mov QWORD PTR [RDI+1208],RAX
            xor EAX,EAX
            mov BYTE PTR [RDI+1220],0
            mov WORD PTR [RDI+1273],AX
            mov QWORD PTR [RDI+1224],0
            lea RDI,QWORD PTR [RDI+112]
            mov DWORD PTR [RDI+1120],0
            mov QWORD PTR [RDI+1128],0
            mov ECX,EDX
            mov QWORD PTR [RDI+1136],0
            mov QWORD PTR [RDI+1144],0
            xor EAX,EAX
            mov QWORD PTR [RDI+1152],0
            mov BYTE PTR [RDI+1160],0
            and RSI,-8
            movups XMMWORD PTR [RDI-46],XMM0
            mov QWORD PTR [RDI-8],0
            mov QWORD PTR [RDI+136],0
            lea R8,QWORD PTR [RDX+608]
            movups XMMWORD PTR [RDI-30],XMM0
            and RDI,-8
            sub ECX,EDI
            add ECX,256
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,EDX
            mov RDI,RSI
            mov QWORD PTR [RDX+256],0
            sub ECX,ESI
            mov QWORD PTR [RDX+592],0
            lea RSI,QWORD PTR [RDX+992]
            add ECX,600
            shr ECX,3
            and RSI,-8

            rep stosq QWORD PTR [RDI]

            mov RDI,R8
            mov ECX,EDX
            mov QWORD PTR [RDX+600],0
            and RDI,-8
            mov QWORD PTR [RDX+976],0
            sub ECX,EDI
            add ECX,984
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov ECX,EDX
            mov RDI,RSI
            mov QWORD PTR [RDX+984],0
            sub ECX,ESI
            mov QWORD PTR [RDX+1136],0
            add ECX,1144
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            movups XMMWORD PTR [RDX+1144],XMM0
            movups XMMWORD PTR [RDX+1160],XMM0
            mov QWORD PTR [RDX+1176],0
            mov BYTE PTR [RDX],32
            ret 
.L_43566c:

            nop
            nop
            nop
            nop
.L_435670:

            push RBX
            mov RBX,RDI
            add RDI,600
            call .L_44bc90

            cmp BYTE PTR [RBX+1184],0
            je .L_435691

            mov RDI,RBX
            call .L_435470
.L_435691:

            xor EAX,EAX
            pop RBX
            ret 
.L_435695:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4356a0:

            cmp BYTE PTR [RDI+1184],0
            jne .L_4356b0

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4356b0:

            jmp .L_435470
.L_4356b5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4356c0:

            movzx EAX,BYTE PTR [RDI+1184]
            ret 
.L_4356c8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4356d0:

            cmp DL,32
            mov EAX,7
            ja .L_435735

            movzx EAX,DL
            lea R8,QWORD PTR [RDI+66]
            cmp EAX,8
            jb .L_435740

            mov RCX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+66],RCX
            mov ECX,EAX
            mov R9,QWORD PTR [RSI+RCX*1-8]
            mov QWORD PTR [R8+RCX*1-8],R9
            lea RCX,QWORD PTR [RDI+74]
            and RCX,-8
            sub R8,RCX
            add EAX,R8D
            sub RSI,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_435730

            and EAX,4294967288
            xor R8D,R8D
.L_435718:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RSI+R9*1]
            cmp R8D,EAX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_435718

            nop
            nop
            nop
            nop
.L_435730:

            mov BYTE PTR [RDI+98],DL
            xor EAX,EAX
.L_435735:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435740:

            test AL,4
            jne .L_435768

            test EAX,EAX
            je .L_435730

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RDI+66],CL
            je .L_435730

            mov ECX,EAX
            movzx EAX,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R8+RCX*1-2],AX
            jmp .L_435730
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435768:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RDI+66],ECX
            mov ECX,EAX
            mov EAX,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R8+RCX*1-4],EAX
            jmp .L_435730
.L_43577a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_435780:

            sub RSP,8
            add RDI,600
            movzx EDX,DL
            call .L_443fd0

            cmp EAX,4294934784
            je .L_4357c0

            cmp EAX,4294938368
            je .L_4357b0

            test EAX,EAX
            js .L_4357ca

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4357b0:

            mov EAX,7
            add RSP,8
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4357c0:

            mov EAX,3
            add RSP,8
            ret 
.L_4357ca:

            call .L_400f48
.L_4357cf:

            nop
.L_4357d0:

            cmp DWORD PTR [RDI+608],16
            sete AL
            ret 
.L_4357db:

            nop
            nop
            nop
            nop
            nop
.L_4357e0:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,152
.L_4357ed:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            cmp DX,128
            ja .L_435868

            movzx EAX,BYTE PTR [RSI+78]
            mov RBX,RDI
            mov R12,RSI
            mov EBP,EDX
            shr AL,2
            and EAX,15
            je .L_435821

            mov BYTE PTR [RDI+1273],AL
.L_435821:

            mov R13,RSP
            xor ESI,ESI
            movzx EDX,DX
            mov RCX,R13
            mov RDI,R12
            call .L_403860

            lea RDI,QWORD PTR [RBX+600]
            movzx EDX,BP
            mov RSI,R13
            call .L_44ba90

            cmp EAX,4294934784
            je .L_435868

            cmp EAX,4294938368
            je .L_435890

            test EAX,EAX
            js .L_43589c

            mov RDI,R12
            call .L_4033b0

            xor EAX,EAX
            jmp .L_43586d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435868:

            mov EAX,3
.L_43586d:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            jne .L_435897

            add RSP,152
.L_435887:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_435890:

            mov EAX,7
            jmp .L_43586d
.L_435897:

            call __stack_chk_fail@PLT
.L_43589c:

            call .L_400f48
.L_4358a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4358b0:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            movzx EDX,DX
            sub RSP,8
            movzx ECX,BYTE PTR [RDI+1273]
            mov RDI,QWORD PTR [RDI+1264]
            call QWORD PTR [RBX+1256]

            movzx EDX,BYTE PTR [RBX+1274]
            test EAX,EAX
            mov BYTE PTR [RBX+1273],DL
            je .L_4358f8

            cmp EAX,3
            jne .L_435901

            add RSP,8
            mov EAX,4294940544
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4358f8:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_435901:

            lea RCX,QWORD PTR [RIP+.L_45a8a0]
            lea RSI,QWORD PTR [RIP+.L_45a843]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,298
            call __assert_fail@PLT
.L_435920:

            jmp .L_4358b0
.L_435922:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435930:

            push RBX
.L_435931:

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+1224]
            test RDI,RDI
            je .L_435978

            movzx EAX,WORD PTR [RBX+1234]
            test AX,AX
            je .L_435978

            mov RCX,RSI
            movzx ESI,WORD PTR [RBX+1232]
            cmp RAX,RDX
            cmovbe RDX,RAX
            call .L_403860

            movzx EAX,AX
            add WORD PTR [RBX+1232],AX
            sub WORD PTR [RBX+1234],AX
            pop RBX
.L_435974:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435978:

            mov EAX,4294940416
            pop RBX
            ret 
.L_43597f:

            nop
.L_435980:

            jmp .L_435930
.L_435982:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435990:

            cmp BYTE PTR [RDI+1220],0
            je .L_4359d0

            lea RDX,QWORD PTR [RDI+1192]
            cmp QWORD PTR [RDI+1208],RDX
            mov EAX,2
            je .L_4359c8

            push RBX
            mov EBX,DWORD PTR [RDI+1216]
            call .L_401240

            sub EBX,EAX
            xor EAX,EAX
            test EBX,EBX
            setle AL
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4359c8:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4359d0:

            mov EAX,4294967295
            ret 
.L_4359d6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4359e0:

            jmp .L_435990
.L_4359e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4359f0:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+1192]
            push RBP
            push RBX
            sub RSP,8
            test EDX,EDX
            je .L_435a40

            mov EBP,EDX
            mov BYTE PTR [RDI+1220],1
            mov R13D,ESI
            mov RBX,RDI
            call .L_401240

            mov EDX,EBP
            mov ESI,EAX
            mov RDI,R12
            call .L_430d50

            call .L_401240

            lea ESI,DWORD PTR [R13+RAX*1]
            mov DWORD PTR [RBX+1216],ESI
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_435a40:

            mov BYTE PTR [RDI+1220],0
            add RSP,8
            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_430c70
.L_435a59:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435a60:

            jmp .L_4359f0
.L_435a62:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435a70:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RDX
            mov R14,RCX
            mov RBX,R8
            sub RSP,168
.L_435a90:

            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_435aa9:

            call .L_431b80
.L_435aae:

            mov RDI,RBP
.L_435ab1:

            call .L_431ba0

            lea EDX,DWORD PTR [RBX+R15*1]
            mov RSI,R13
            mov RDI,RBP
            add EDX,R14D
            add EDX,EDX
            movzx EDX,DX
            call .L_431bb0

            lea RBX,QWORD PTR [RSP+112]
            mov RDI,RBP
            mov RSI,RBX
            call .L_431bc0

            mov RDI,R12
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1368]
            mov RSI,RBX
            call .L_412cc0
.L_435af4:

            mov RDI,RBP
.L_435af7:

            call .L_431b90
.L_435afc:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            jne .L_435b23

            add RSP,168
.L_435b18:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_435b23:

            call __stack_chk_fail@PLT
.L_435b28:

            mov RBX,RAX
            mov RDI,RBP
            call .L_431b90

            mov RDI,RBX
.L_435b36:

            call _Unwind_Resume@PLT
.L_435b3b:

            nop
            nop
            nop
            nop
            nop
.L_435b40:

            jmp .L_435a70
.L_435b45:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435b50:

            push R12
            push RBP
            push RBX
            sub RSP,800
.L_435b5b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+792],RAX
            xor EAX,EAX
            cmp BYTE PTR [RDI+1184],0
            je .L_435c38

            mov RBX,RDI
            lea R12,QWORD PTR [RDI+600]
            lea RBP,QWORD PTR [RSP+16]
            jmp .L_435bc5
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435b90:

            mov RDI,R12
            call .L_44b6f0

            cmp DWORD PTR [RBX+608],16
            je .L_435c60
.L_435ba5:

            test EAX,EAX
            jle .L_435be2
.L_435ba9:

            movzx EDX,AX
            mov RDI,QWORD PTR [RBX+1264]
            mov RSI,RBP
            call QWORD PTR [RBX+1248]

            cmp BYTE PTR [RBX+1184],0
            je .L_435c38
.L_435bc5:

            cmp DWORD PTR [RBX+608],16
            jne .L_435b90

            mov EDX,768
            mov RSI,RBP
            mov RDI,R12
            call .L_44b770

            test EAX,EAX
            jg .L_435ba9
.L_435be2:

            mov EDX,EAX
            and DL,127
            cmp EDX,4294940416
            je .L_435c38

            test EAX,EAX
            je .L_435c38

            cmp EAX,4294936704
            je .L_435c92

            jle .L_435c8b

            cmp EAX,4294938240
            je .L_435cce

            cmp EAX,4294940032
            jne .L_435cad
.L_435c1a:

            mov RDI,R12
            call .L_44afb0

            movzx EDX,BYTE PTR [RBX+98]
            lea RSI,QWORD PTR [RBX+66]
            mov RDI,R12
            call .L_44b340

            nop
            nop
            nop
            nop
            nop
            nop
.L_435c38:

            mov RAX,QWORD PTR [RSP+792]
            xor RAX,QWORD PTR FS:[40]
            jne .L_435cef

            add RSP,800
.L_435c56:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_435c60:

            mov RDX,QWORD PTR [RBX+1240]
            test RDX,RDX
            je .L_435ba5

            mov DWORD PTR [RSP+12],EAX
            mov RDI,QWORD PTR [RBX+1264]
            mov ESI,1
            call RDX

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_435ba5
.L_435c8b:

            cmp EAX,4294936448
            jne .L_435cad
.L_435c92:

            mov RDI,R12
            call .L_44bc90
.L_435c9a:

            cmp BYTE PTR [RBX+1184],0
            je .L_435c38

            mov RDI,RBX
            call .L_435470

            jmp .L_435c38
.L_435cad:

            cmp DWORD PTR [RBX+608],16
            je .L_435c1a

            mov EDX,40
            mov ESI,2
            mov RDI,R12
            call .L_449350

            jmp .L_435c9a
.L_435cce:

            cmp DWORD PTR [RBX+608],16
            je .L_435c1a

            mov EDX,20
            mov ESI,2
            mov RDI,R12
            call .L_449350

            jmp .L_435c9a
.L_435cef:

            call __stack_chk_fail@PLT
.L_435cf4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435d00:

            sub RSP,8
            mov QWORD PTR [RDI+1224],RSI
            mov WORD PTR [RDI+1232],DX
            mov WORD PTR [RDI+1234],CX
            call .L_435b50

            xor EAX,EAX
            add RSP,8
            ret 
.L_435d25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435d30:

            jmp .L_435b50
.L_435d35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_435d40:

            push R15
            push R14
            lea R14,QWORD PTR [RDI+600]
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea R12,QWORD PTR [RBX+984]
            lea R13,QWORD PTR [RBX+256]
            lea RBP,QWORD PTR [RBX+104]
            sub RSP,24
.L_435d6a:

            mov QWORD PTR [RDI+1240],RDX
            mov QWORD PTR [RDI+1248],RCX
            mov QWORD PTR [RDI+1256],R8
            mov QWORD PTR [RDI+1264],R9
            mov BYTE PTR [RDI+1272],SIL
            mov QWORD PTR [RDI+1224],0
            mov BYTE PTR [RDI+1273],0
            mov RDI,R14
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_44ae00

            mov RDI,R12
            call .L_44bf10

            mov RDI,R13
            call .L_442a20

            mov RDI,RBP
            call .L_443a20

            lea RSI,QWORD PTR [RIP+.L_4353d0]
            xor EDX,EDX
            mov R8D,1
            mov ECX,32
            mov RDI,RBP
            call .L_443a80

            test EAX,EAX
            mov EDX,EAX
            je .L_435e50
.L_435df1:

            cmp EDX,4294934784
            je .L_435e40

            cmp EDX,4294938368
            mov EAX,7
            jne .L_435e30
.L_435e06:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_436005

            add RSP,24
.L_435e1e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435e30:

            test EDX,EDX
            js .L_43600a

            xor EAX,EAX
            jmp .L_435e06
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_435e40:

            mov EAX,3
            jmp .L_435e06
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_435e50:

            mov EDI,1
            mov R15,RSP
            call .L_443260

            mov RDI,RBX
            call .L_430ac0

            mov RSI,R15
            mov RDI,RAX
            call .L_4012d0

            mov RSI,OFFSET .L_443af0
            mov RDX,RBP
            mov R8D,8
            mov RCX,R15
            mov RDI,R13
            call .L_442cd0

            test EAX,EAX
            mov EDX,EAX
            jne .L_435df1

            movzx ESI,BYTE PTR [RBX+1272]
            xor ECX,ECX
            mov EDX,1
            mov RDI,R12
            xor ESI,1
            movzx ESI,SIL
            call .L_44bf40

            test EAX,EAX
            mov EDX,EAX
            jne .L_435df1

            mov R15,OFFSET .L_442ee0
            mov RDX,R13
            mov RDI,R12
            mov RSI,R15
            call .L_44b1f0

            mov EDX,3
            mov ESI,3
            mov RDI,R12
            call .L_44b3a0

            mov EDX,3
            mov ESI,3
            mov RDI,R12
            call .L_44b390

            lea RSI,QWORD PTR [RIP+.L_45a8f0]
            mov RDI,R12
            call .L_44b310

            lea RSI,QWORD PTR [RIP+.L_435b40]
            mov RDX,RBX
            mov RDI,R12
            call .L_44b440

            mov EDX,60000
            mov ESI,8000
            mov RDI,R12
            call .L_44b1c0

            lea RSI,QWORD PTR [RIP+.L_435410]
            mov RDX,RBX
            mov RDI,R12
            call .L_44b200

            cmp BYTE PTR [RBX+1272],0
            je .L_435fc0
.L_435f43:

            mov RSI,R12
            mov RDI,R14
            call .L_44ae30

            test EAX,EAX
            mov EDX,EAX
            jne .L_435df1

            lea RCX,QWORD PTR [RIP+.L_435980]
            lea RDX,QWORD PTR [RIP+.L_435920]
            xor R8D,R8D
            mov RSI,RBX
            mov RDI,R14
            call .L_44b210

            lea RCX,QWORD PTR [RIP+.L_4359e0]
            lea RDX,QWORD PTR [RIP+.L_435a60]
            mov RSI,RBX
            mov RDI,R14
            call .L_44b240

            movzx EDX,BYTE PTR [RBX+98]
            lea RSI,QWORD PTR [RBX+66]
            mov RDI,R14
            call .L_44b340

            test EAX,EAX
            mov EDX,EAX
            jne .L_435df1

            mov BYTE PTR [RBX+1184],1
            mov RDI,RBX
            call .L_435b50

            xor EAX,EAX
            jmp .L_435e06
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_435fc0:

            lea RBP,QWORD PTR [RBX+1144]
            mov RDI,RBP
            call .L_443d60

            mov RDX,R13
            mov RSI,R15
            mov RDI,RBP
            call .L_443db0

            test EAX,EAX
            mov EDX,EAX
            jne .L_435df1

            mov RDX,OFFSET .L_443ef0
            mov RSI,OFFSET .L_443e60
            mov RCX,RBP
            mov RDI,R12
            call .L_444040

            jmp .L_435f43
.L_436005:

            call __stack_chk_fail@PLT
.L_43600a:

            call .L_400f48
.L_43600f:

            nop
.L_436010:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b70

            add RSP,8
            mov RDI,RAX
            jmp .L_435b50
.L_43602d:

            nop
            nop
            nop
.L_436030:

            cmp EDI,4294934784
            je .L_436060

            cmp EDI,4294938368
            je .L_436050

            test EDI,EDI
            js .L_436066

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436050:

            mov EAX,7
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436060:

            mov EAX,3
            ret 
.L_436066:

            sub RSP,8
            call .L_400f48
.L_43606f:

            nop
.L_436070:

            lea RAX,QWORD PTR [RIP+.L_45a8f8]
            push RBX
            mov RBX,RDI
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RIP+.L_436570]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RBX+32],RDI
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI],0
            call .L_430af0

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d6f0
.L_4360bb:

            nop
            nop
            nop
            nop
            nop
.L_4360c0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,ESI
            xor EBX,EBX
            sub RSP,280
.L_4360df:

            mov RAX,QWORD PTR [RSP+336]
            mov DWORD PTR [RSP+4],R8D
            mov DWORD PTR [RSP],ECX
            mov QWORD PTR [RSP+8],RAX
            mov RAX,QWORD PTR [RSP+344]
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            call .L_430af0

            mov R14,RAX
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            cmp DWORD PTR [R14+8128],2
            pxor XMM0,XMM0
            mov WORD PTR [RSP+44],R8W
            mov WORD PTR [RSP+56],R9W
            mov WORD PTR [RSP+41],R10W
            mov EAX,13
            mov WORD PTR [RSP+48],R11W
            mov WORD PTR [RSP+52],BX
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            movaps XMMWORD PTR [RSP+96],XMM0
            je .L_436190
.L_436167:

            mov RCX,QWORD PTR [RSP+264]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4363dd

            add RSP,280
.L_436185:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_436190:

            mov RDI,R13
            lea RBX,QWORD PTR [RSP+112]
            call .L_40ee50

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,RBX
            shl ESI,4
            call .L_42f0e0

            mov RDI,RBX
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45a8fd]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            lea RAX,QWORD PTR [R14+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_436167

            mov EDI,523
            mov WORD PTR [RSP+44],DI
            lea RDI,QWORD PTR [R14+8128]
            call .L_431ec0

            lea RSI,QWORD PTR [RSP+44]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+46],AX
            call .L_403d30

            test EAX,EAX
            je .L_436250
.L_436238:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP]
            jmp .L_436167
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_436250:

            lea EAX,DWORD PTR [R12+R12*1]
            shr R12D,1
            mov RDI,RBX
            and R12D,1431655765
            mov DWORD PTR [RSP+56],67110453
            and EAX,2863311530
            or R12D,EAX
            lea EAX,DWORD PTR [R12*4]
            shr R12D,2
            and R12D,858993459
            and EAX,3435973836
            or R12D,EAX
            mov EAX,R12D
            shr R12D,4
            shl EAX,4
            and R12D,252645135
            and EAX,4042322160
            or EAX,R12D
            bswap EAX
            mov EDX,EAX
            mov ESI,EAX
            shr ESI,24
            shl EDX,24
            or EDX,ESI
            mov ESI,EAX
            shr EAX,8
            shl ESI,8
            and EAX,65280
            and ESI,16711680
            or EDX,ESI
            lea RSI,QWORD PTR [RSP+56]
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+60],EAX
            call .L_403d30

            test EAX,EAX
            jne .L_436238

            mov ESI,310
            mov EDX,3
            mov RDI,RBX
            mov WORD PTR [RSP+41],SI
            lea RSI,QWORD PTR [RSP+41]
            mov BYTE PTR [RSP+43],R15B
            call .L_403d30

            test EAX,EAX
            jne .L_436238

            movzx R15D,WORD PTR [RSP]
            lea RSI,QWORD PTR [RSP+48]
            mov ECX,567
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+48],CX
            rol R15W,8
            mov WORD PTR [RSP+50],R15W
            call .L_403d30

            test EAX,EAX
            jne .L_436238

            movzx EAX,WORD PTR [RSP+4]
            mov EDX,568
            lea RSI,QWORD PTR [RSP+52]
            mov WORD PTR [RSP+52],DX
            mov RDI,RBX
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+54],AX
            call .L_403d30

            test EAX,EAX
            jne .L_436238

            lea RDI,QWORD PTR [R14+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+98],AX
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RSP+64]
            movaps XMMWORD PTR [RSP+64],XMM0
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+80],XMM0
            movzx EAX,BYTE PTR [R14+24]
            mov BYTE PTR [RSP+100],AL
            call .L_42e6e0

            test EAX,EAX
            jne .L_436238

            mov RCX,QWORD PTR [RSP+8]
            mov QWORD PTR [RBP],RCX
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBP+8],RCX
            jmp .L_436167
.L_4363dd:

            call __stack_chk_fail@PLT
.L_4363e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4363f0:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            sub RSP,144
.L_43640b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_430af0

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+8],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+64],CX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_43645a

            cmp BYTE PTR [RBP+1],2
            je .L_436488
.L_43645a:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_436563

            add RSP,144
.L_436478:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436488:

            lea RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,53
            mov RDI,R13
            mov R14,RAX
            call .L_430f70

            test EAX,EAX
            jne .L_43645a

            cmp BYTE PTR [RSP+9],6
            jne .L_43645a

            cmp BYTE PTR [RSP+10],0
            jne .L_43645a

            cmp BYTE PTR [RSP+11],4
            jne .L_43645a

            lea RBX,QWORD PTR [RSP+64]
            mov EDX,66
            mov ESI,57
            mov RDI,R13
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_43645a

            mov R8,QWORD PTR [R12]
            test R8,R8
            je .L_43653b

            mov EAX,DWORD PTR [RSP+12]
            mov RCX,QWORD PTR [R12+8]
            lea RSI,QWORD PTR [RBX+2]
            bswap EAX
            lea EDX,DWORD PTR [RAX+RAX*1]
            shr EAX,1
            and EAX,1431655765
            and EDX,2863311530
            or EDX,EAX
            lea EAX,DWORD PTR [RDX*4]
            shr EDX,2
            and EDX,858993459
            and EAX,3435973836
            or EAX,EDX
            movzx EDX,BYTE PTR [RSP+65]
            mov EDI,EAX
            shr EAX,4
            shl EDI,4
            and EAX,252645135
            and EDI,4042322160
            or EAX,EDI
            bswap EAX
            mov EDI,EAX
            call R8
.L_43653b:

            test BYTE PTR [RBP],48
            jne .L_43645a

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R14+216]
            mov RDX,RBP
            mov ESI,68
            call .L_42e970

            jmp .L_43645a
.L_436563:

            call __stack_chk_fail@PLT
.L_436568:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436570:

            jmp .L_4363f0
.L_436575:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436580:

            lea RAX,QWORD PTR [RIP+.L_4376f0]
            push RBX

            mov RBX,RDI
            pxor XMM0,XMM0
            mov DWORD PTR [RDI],0
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+96]
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+24],0
            mov QWORD PTR [RDI+112],RAX
            lea RAX,QWORD PTR [RIP+.L_4588d7]
            mov QWORD PTR [RDI+64],0
            mov QWORD PTR [RDI+72],0
            mov QWORD PTR [RDI+80],0
            mov QWORD PTR [RDI+120],RAX
            lea RAX,QWORD PTR [RIP+.L_437600]
            mov QWORD PTR [RDI+88],0
            mov DWORD PTR [RDI+104],0
            mov QWORD PTR [RDI+128],RAX
            mov QWORD PTR [RBX+136],RDI
            movups XMMWORD PTR [RDI+28],XMM0
            mov QWORD PTR [RDI+144],0
            movups XMMWORD PTR [RDI+44],XMM0
            call .L_430af0

            lea RSI,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_436628:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436630:

            push RBX
            mov RBX,RSI
            call .L_430ac0

            mov RSI,RBX
            mov RDI,RAX
            call .L_4012d0

            mov RSI,RBX
            mov RDI,RBX
            pop RBX
            jmp .L_437710
.L_436650:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,120
.L_436661:

            mov RAX,QWORD PTR [RSP+176]
            lea RBP,QWORD PTR [RSP+88]
            lea R12,QWORD PTR [RSP+92]
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP+32],R8
            mov QWORD PTR [RSP+40],R9
            mov QWORD PTR [RSP+48],RAX
            mov RAX,QWORD PTR [RSP+184]
            mov QWORD PTR [RSP+8],RSI
            mov QWORD PTR [RSP+56],RAX
            mov RAX,QWORD PTR [RSP+192]
            mov QWORD PTR [RSP+64],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_430af0

            mov ESI,4129
            mov RDI,RBP
            mov R14,RAX
            call .L_430270

            mov ESI,32773
            mov RDI,R12
            call .L_430270

            mov ESI,DWORD PTR [R13]
            mov EAX,5
            test ESI,ESI
            jne .L_436792

            lea R15,QWORD PTR [RSP+96]
            mov RDI,R13
            call .L_430b10

            mov ESI,32768
            mov RDI,RAX
            lea RBX,QWORD PTR [R15+8]
            call .L_402d30

            mov RSI,R15
            mov RDI,R13
            call .L_436630

            lea RDI,QWORD PTR [R14+1560]
            mov RSI,R15
            call .L_405760

            lea RAX,QWORD PTR [R14+2568]
            mov RDI,RAX
            mov QWORD PTR [RSP+72],RAX
            call .L_415450

            nop
            nop
            nop
            nop
            nop
            nop
.L_436740:

            movzx ESI,BYTE PTR [R15]
            mov RDI,RBP
            add R15,1
            call .L_430280

            movzx ESI,BYTE PTR [R15-1]
            mov RDI,R12
            call .L_430280

            cmp RBX,R15
            jne .L_436740

            movzx EAX,WORD PTR [RSP+90]
            lea RBX,QWORD PTR [R14+9784]
            xor ECX,ECX
            xor EDX,EDX
            mov ESI,1000
            mov RDI,RBX
            mov WORD PTR [R13+24],AX
            movzx EAX,WORD PTR [RSP+94]
            mov WORD PTR [R13+26],AX
            call .L_42fdf0

            test EAX,EAX
            je .L_4367b8
.L_436792:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4368be

            add RSP,120
.L_4367aa:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4367b8:

            mov RDI,RBX
            call .L_42ff60

            mov R15,QWORD PTR [RSP+8]
            mov RBP,RAX
            mov RDI,R15
            call strlen@PLT

            mov RSI,R15
            movzx EDX,AL
            mov RDI,RBP
            call .L_4356d0

            test EAX,EAX
            jne .L_436792

            mov RDI,RBX
            call .L_42ff60

            cmp QWORD PTR [RSP+16],0
            mov RBX,RAX
            je .L_4368b5

            mov R15,QWORD PTR [RSP+16]
            mov ESI,65
            mov RDI,R15
            call strnlen@PLT

            mov RDX,RAX
            mov EAX,7
            cmp RDX,64
            ja .L_436792

            test RDX,RDX
            mov BYTE PTR [RBX+1],DL
            je .L_436831

            lea RDI,QWORD PTR [RBX+2]
            mov RSI,R15
            call memcpy@PLT
.L_436831:

            pxor XMM0,XMM0
            sub RSP,8
.L_436839:

            lea R9,QWORD PTR [RIP+.L_436c70]
            xor R8D,R8D
            mov ECX,1
            xor ESI,ESI
            movups XMMWORD PTR [R13+28],XMM0
            movups XMMWORD PTR [R13+44],XMM0
            movzx EDX,WORD PTR [R14+1666]
            push R13
            mov RDI,QWORD PTR [RSP+88]
            call .L_417310

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_436792

            mov RDX,QWORD PTR [RSP+24]
            mov DWORD PTR [R13],1
            mov QWORD PTR [R13+64],RDX
            mov RDX,QWORD PTR [RSP+32]
            mov QWORD PTR [R13+72],RDX
            mov RDX,QWORD PTR [RSP+40]
            mov QWORD PTR [R13+80],RDX
            mov RDX,QWORD PTR [RSP+48]
            mov QWORD PTR [R13+88],RDX
            mov RDX,QWORD PTR [RSP+56]
            mov QWORD PTR [R13+8],RDX
            mov RDX,QWORD PTR [RSP+64]
            mov QWORD PTR [R13+16],RDX
            jmp .L_436792
.L_4368b5:

            mov BYTE PTR [RAX+1],0
            jmp .L_436831
.L_4368be:

            call __stack_chk_fail@PLT
.L_4368c3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4368d0:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_4368d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4368e0:

            push RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+9784]
            mov RBX,RAX
            call .L_42ff40

            movzx ESI,WORD PTR [RBX+9808]
            lea RDI,QWORD PTR [RBX+1360]
            pop RBX
            jmp .L_40f620
.L_436909:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436910:

            sub RSP,8
            call .L_4368e0

            xor EAX,EAX
            add RSP,8
            ret 
.L_436920:

            movzx EDX,WORD PTR [RDI+52]
            movzx EAX,WORD PTR [RDI+36]
            cmp DX,AX
            jb .L_436950

            add RDI,28
.L_436931:

            cmp WORD PTR [RSI+8],AX
            ja .L_436940

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436940:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436950:

            add RDI,44
            mov EAX,EDX
            jmp .L_436931
.L_436958:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436960:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            lea RBP,QWORD PTR [RBX+28]
            sub RSP,64
.L_436973:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            movzx EDX,WORD PTR [RBX+36]
            mov R12,RAX
            movzx EAX,WORD PTR [RBX+52]
            cmp AX,DX
            jbe .L_43699e

            lea RBP,QWORD PTR [RBX+44]
            mov EDX,EAX
.L_43699e:

            test DX,DX
            mov EAX,23
            je .L_436a43

            movzx ESI,WORD PTR [RBP+10]
            pxor XMM0,XMM0
            lea R14,QWORD PTR [R12+1560]
            xor EAX,EAX
            mov R13,RSP
            mov WORD PTR [RBP+8],AX
            mov RDI,R14
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_405a50

            mov RDI,R14
            movzx ESI,BYTE PTR [RBP+14]
            call .L_405ba0

            movzx ESI,WORD PTR [R12+9808]
            lea RDI,QWORD PTR [R12+1360]
            call .L_40f5d0

            lea RDI,QWORD PTR [R13+16]
            mov EDX,4294934782
            mov RSI,RBP
            mov WORD PTR [RSP+16],DX
            call .L_40f0b0

            movzx EAX,WORD PTR [RBP+12]
            lea RDI,QWORD PTR [R12+9784]
            lea RDX,QWORD PTR [RIP+.L_4370f0]
            mov RCX,RBX
            mov RSI,R13
            mov BYTE PTR [RSP+36],1
            mov WORD PTR [RSP+34],AX
            call .L_42fe90

            mov DWORD PTR [RBX],2
            xor EAX,EAX
.L_436a43:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_436a60

            add RSP,64
.L_436a57:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_436a60:

            call __stack_chk_fail@PLT
.L_436a65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436a70:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
.L_436a77:

            mov RBX,RDI
            call .L_430af0

            mov RDI,RBX
            mov RBP,RAX
            mov DWORD PTR [RBX],0
            call .L_430b10

            add RBP,9784
            mov RDI,RAX
            mov ESI,32768
            call .L_402d30

            mov RDI,RBP
            call .L_42ff40

            test R12D,R12D
            je .L_436ab7

            cmp R12D,23
            jne .L_436ae0
.L_436ab7:

            cmp QWORD PTR [RBX+8],0
            je .L_436aed

            mov RDI,RBP
            call .L_42fe20

            mov RAX,QWORD PTR [RBX+8]
            mov RSI,QWORD PTR [RBX+16]
            mov EDI,R12D
            mov QWORD PTR [RBX+8],0
            pop RBX
.L_436ada:

            pop RBP
            pop R12
            jmp RAX
          .byte 0x90
.L_436ae0:

            mov RDI,RBX
            call .L_436960

            cmp EAX,23
            je .L_436ab7
.L_436aed:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_436af2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436b00:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,56
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_436c38

            movzx EBX,BYTE PTR [RSI+33]
            mov RBP,RSI
            test BL,BL
            jne .L_436b50
.L_436b31:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_436c64

            add RSP,56
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_436b50:

            lea RSI,QWORD PTR [RSI+34]
            lea RDI,QWORD PTR [RSP+18]
            movzx EDX,BL
            mov ECX,16
            mov BYTE PTR [RSP+16],0
            mov BYTE PTR [RSP+17],BL
            call __memcpy_chk@PLT

            movzx EAX,WORD PTR [R13+24]
            lea ESI,DWORD PTR [RBX*8]
            movzx ECX,BL
            sub ECX,1
            lea R12,QWORD PTR [RSP+16]
            movzx ESI,SIL
            mov EDI,ECX
            cdq 
            idiv ESI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub EDI,EAX
            movsxd RAX,EDI
            movzx EAX,BYTE PTR [RSP+RAX*1+18]
            bt EAX,EDX
            jae .L_436b31

            movzx EAX,WORD PTR [R13+26]
            cdq 
            idiv ESI
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            sub ECX,EAX
            movsxd RCX,ECX
            movzx EAX,BYTE PTR [RSP+RCX*1+18]
            bt EAX,EDX
            jae .L_436b31

            movsx DX,BYTE PTR [RBP+55]
            cmp BYTE PTR [RSP+18],255
            lea EAX,DWORD PTR [RDX+128]
            mov WORD PTR [RSP+8],AX
            jne .L_436c58

            lea RAX,QWORD PTR [R12+3]
            sub EBX,1
            movzx EBX,BL
            add RBX,RAX
            jmp .L_436bfa
.L_436bf0:

            add RAX,1
            cmp BYTE PTR [RAX-1],255
            jne .L_436c58
.L_436bfa:

            cmp RAX,RBX
            jne .L_436bf0
.L_436bff:

            movzx EAX,WORD PTR [RBP+52]
            mov RSI,RSP
            mov RDI,R13
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBP+50]
            mov WORD PTR [RSP+10],AX
            movzx EAX,BYTE PTR [RBP+54]
            mov BYTE PTR [RSP+14],AL
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RSP],RAX
            call .L_436920

            jmp .L_436b31
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436c38:

            call .L_436960

            test EAX,EAX
            je .L_436b31

            mov ESI,EAX
            mov RDI,R13
            call .L_436a70

            jmp .L_436b31
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_436c58:

            add DX,640
            mov WORD PTR [RSP+8],DX
            jmp .L_436bff
.L_436c64:

            call __stack_chk_fail@PLT
.L_436c69:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_436c70:

            mov RAX,RDI
            mov RDI,RSI
            mov RSI,RAX
            jmp .L_436b00
.L_436c7e:

            nop
            nop
.L_436c80:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            xor EBX,EBX
            xor R13D,R13D
            sub RSP,536
.L_436c99:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+520],RAX
            xor EAX,EAX
            call .L_430af0

            mov WORD PTR [RSP+8],BX
            lea RBX,QWORD PTR [RSP+224]
            xor R8D,R8D
            xor R9D,R9D
            xor R10D,R10D
            xor R11D,R11D
            mov EDX,2
            xor ESI,ESI
            mov RDI,RBX
            mov WORD PTR [RSP+5],R8W
            mov WORD PTR [RSP+48],R9W
            mov RBP,RAX
            mov WORD PTR [RSP+96],R10W
            mov WORD PTR [RSP+16],R11W
            add RBP,9784
            mov WORD PTR [RSP+13],R13W
            mov BYTE PTR [RSP+15],0
            call .L_42f0e0

            lea RSI,QWORD PTR [RIP+.L_45a5d7]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RBP
            call .L_42d7b0

            test RAX,RAX
            je .L_436d5f

            mov EDI,272
            lea RSI,QWORD PTR [RSP+5]
            mov EDX,3
            mov WORD PTR [RSP+5],DI
            mov RDI,RAX
            mov RBX,RAX
            mov BYTE PTR [RSP+7],1
            call .L_403d30

            test EAX,EAX
            je .L_436d90
.L_436d57:

            mov RDI,RBX
            call .L_4033b0
.L_436d5f:

            mov RAX,QWORD PTR [RSP+520]
            xor RAX,QWORD PTR FS:[40]
            jne .L_437099

            add RSP,536
.L_436d7d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_436d90:

            mov R13,QWORD PTR [R12+64]
            mov ESI,33
            mov WORD PTR [RSP+48],SI
            test R13,R13
            je .L_437010

            mov ESI,33
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,32
            ja .L_437010

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+49],AL
            lea R15,QWORD PTR [RSP+48]
            movzx R14D,R14B
            je .L_436de9

            lea RDI,QWORD PTR [R15+2]
            mov ECX,32
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_436de9:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_436d57

            mov R13,QWORD PTR [R12+72]
            mov ECX,34
            mov WORD PTR [RSP+96],CX
            test R13,R13
            je .L_437020

            mov ESI,33
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,32
            ja .L_437020

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+97],AL
            lea R15,QWORD PTR [RSP+96]
            movzx R14D,R14B
            je .L_436e58

            lea RDI,QWORD PTR [R15+2]
            mov ECX,32
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_436e58:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_436d57

            mov R13,QWORD PTR [R12+80]
            mov EDX,35
            mov WORD PTR [RSP+16],DX
            test R13,R13
            je .L_437030

            mov ESI,17
            mov RDI,R13
            call strnlen@PLT

            cmp RAX,16
            ja .L_437030

            lea R14D,DWORD PTR [RAX+2]
            test RAX,RAX
            mov BYTE PTR [RSP+17],AL
            lea R15,QWORD PTR [RSP+16]
            movzx R14D,R14B
            je .L_436ec7

            lea RDI,QWORD PTR [R15+2]
            mov ECX,16
            mov RDX,RAX
            mov RSI,R13
            call __memcpy_chk@PLT
.L_436ec7:

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_403d30

            test EAX,EAX
            jne .L_436d57

            lea RSI,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBX
            and WORD PTR [RSP+13],4095
            mov DWORD PTR [RSP+8],3021473317
            mov BYTE PTR [RSP+12],48
            mov BYTE PTR [RSP+15],16
            call .L_403d30

            test EAX,EAX
            jne .L_436d57

            mov R14,QWORD PTR [R12+88]
            test R14,R14
            je .L_436f72

            mov EAX,36
            mov ESI,65
            mov RDI,R14
            mov WORD PTR [RSP+144],AX
            call strnlen@PLT

            cmp RAX,64
            ja .L_436f4d

            test RAX,RAX
            mov R13D,EAX
            mov BYTE PTR [RSP+145],AL
            jne .L_437078
.L_436f4d:

            lea R15,QWORD PTR [RSP+144]
            xor R13D,R13D
.L_436f58:

            lea EDX,DWORD PTR [R13+2]
            mov RSI,R15
            mov RDI,RBX
            movzx EDX,DL
            call .L_403d30

            test EAX,EAX
            jne .L_436d57
.L_436f72:

            mov RDI,RBP
            call .L_42ff60

            cmp BYTE PTR [RAX+1],0
            jne .L_437040
.L_436f84:

            movzx EAX,WORD PTR [RBX+58]
            cmp AX,128
            ja .L_436d5f

            movzx EDX,BYTE PTR [RSP+352]
            lea R14,QWORD PTR [RSP+384]
            mov RDI,RBX
            mov ECX,EDX
            sub EAX,EDX
            movzx ESI,CL
            movzx EDX,AX
            mov RCX,R14
            call .L_403860

            movzx R13D,WORD PTR [RBX+58]
            movzx EAX,BYTE PTR [RSP+352]
            mov RDI,R12
            sub R13D,EAX
            movsxd R13,R13D
            call .L_430ac0

            lea RCX,QWORD PTR [RIP+.L_45a918]
            xor ESI,ESI
            mov RDI,RAX
            mov R9,R13
            mov R8,R14
            mov EDX,10
            call .L_4302c0

            lea RDX,QWORD PTR [RIP+.L_437230]
            mov RCX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_42ffb0

            test EAX,EAX
            je .L_436d5f

            jmp .L_436d57
.L_437010:

            mov R14D,2
            lea R15,QWORD PTR [RSP+48]
            jmp .L_436de9
.L_437020:

            mov R14D,2
            lea R15,QWORD PTR [RSP+96]
            jmp .L_436e58
.L_437030:

            mov R14D,2
            lea R15,QWORD PTR [RSP+16]
            jmp .L_436ec7
.L_437040:

            mov RDI,RBP
            call .L_42ff60

            movzx R13D,BYTE PTR [RAX+1]
            mov RDI,RBP
            call .L_42ff60

            mov RDI,RBX
            mov RSI,RAX
            add R13D,2
            movzx R13D,R13B
            mov EDX,R13D
            call .L_403d30

            test EAX,EAX
            jne .L_436d57

            jmp .L_436f84
.L_437078:

            lea R15,QWORD PTR [RSP+144]
            mov ECX,64
            mov RDX,RAX
            mov RSI,R14
            lea RDI,QWORD PTR [R15+2]
            call __memcpy_chk@PLT

            jmp .L_436f58
.L_437099:

            call __stack_chk_fail@PLT
.L_43709e:

            nop
            nop
.L_4370a0:

            cmp DWORD PTR [RDI],2
            jne .L_4370e0

            test SIL,SIL
            jne .L_4370b8

            mov ESI,8
            jmp .L_436a70
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4370b8:

            push RBX
            mov RBX,RDI
            mov DWORD PTR [RDI],3
            call .L_436c80

            call .L_401240

            lea RDI,QWORD PTR [RBX+96]
            mov EDX,4000
            mov ESI,EAX
            pop RBX
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4370e0:

            ret 
.L_4370e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4370f0:

            mov RAX,RSI
            movzx ESI,DIL
            mov RDI,RAX
            jmp .L_4370a0
.L_4370fc:

            nop
            nop
            nop
            nop
.L_437100:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,168
.L_437110:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            xor EAX,EAX
            cmp DWORD PTR [RDI],3
            mov WORD PTR [RSP+13],AX
            jne .L_437134

            test R8D,R8D
            je .L_437168
.L_437134:

            mov RDI,RBX
            call .L_4368e0

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_437227

            add RSP,168
.L_43715a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437168:

            movzx EAX,BYTE PTR [RSI]
            mov RBP,RSI
            and EAX,48
            cmp AL,32
            jne .L_437134

            cmp BYTE PTR [RSI+1],68
            jne .L_437134

            mov R12,RDX
            lea RCX,QWORD PTR [RSP+13]
            mov EDX,3
            mov ESI,16
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_437134

            cmp BYTE PTR [RSP+14],1
            jne .L_437134

            mov DWORD PTR [RBX],4
            call .L_401240

            lea RDI,QWORD PTR [RBX+96]
            mov ESI,EAX
            mov EDX,4000
            call .L_430d50

            movzx EAX,WORD PTR [R12+58]
            cmp AX,128
            ja .L_437134

            movzx EDX,BYTE PTR [RBP+128]
            lea R13,QWORD PTR [RSP+16]
            mov RDI,R12
            mov ECX,EDX
            sub EAX,EDX
            movzx ESI,CL
            movzx EDX,AX
            mov RCX,R13
            call .L_403860

            movzx EDX,BYTE PTR [RBP+128]
            movzx EAX,WORD PTR [R12+58]
            mov RDI,RBX
            sub EAX,EDX
            movsxd RBP,EAX
            call .L_430ac0

            lea RCX,QWORD PTR [RIP+.L_45a948]
            mov R9,RBP
            mov R8,R13
            mov EDX,10
            xor ESI,ESI
            mov RDI,RAX
            call .L_4302c0

            jmp .L_437134
.L_437227:

            call __stack_chk_fail@PLT
.L_43722c:

            nop
            nop
            nop
            nop
.L_437230:

            jmp .L_437100
.L_437235:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437240:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            mov R12,RDI
            sub RSP,216
.L_437256:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+200],RAX
            xor EAX,EAX
            call .L_430af0

            movdqu XMM0,XMMWORD PTR [RBP]
            mov RBX,RAX
            mov RSI,R13
            add RBX,216
            movaps XMMWORD PTR [RSP],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+16]
            movaps XMMWORD PTR [RSP+16],XMM0
            movdqu XMM0,XMMWORD PTR [RBP+32]
            lea RBP,QWORD PTR [RSP+48]
            mov RDI,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_42fa70

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_42d7b0

            test RAX,RAX
            je .L_4372ee

            mov RBP,RAX
            movzx EAX,BYTE PTR [RAX+78]
            xor R8D,R8D
            pxor XMM0,XMM0
            xor ECX,ECX
            mov RDX,RSP
            mov RSI,RBP
            mov RDI,RBX
            and EAX,4294967235
            or EAX,16
            mov BYTE PTR [RBP+78],AL
            movaps XMMWORD PTR [RSP],XMM0
            call .L_42e6e0

            test EAX,EAX
            je .L_437310

            mov RDI,RBP
            call .L_4033b0
.L_4372ee:

            mov RAX,QWORD PTR [RSP+200]
            xor RAX,QWORD PTR FS:[40]
            jne .L_437349

            add RSP,216
.L_437308:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_437310:

            mov DWORD PTR [R12],5
            mov EDI,10
            call .L_430740

            xor EDI,EDI
            mov RBX,RAX
            call .L_4306d0

            lea RDX,QWORD PTR [RIP+.L_45a978]
            mov RCX,RAX
            mov R8,RBX
            mov ESI,10
            xor EDI,EDI
            xor EAX,EAX
            call .L_4012c0

            jmp .L_4372ee
.L_437349:

            call __stack_chk_fail@PLT
.L_43734e:

            nop
            nop
.L_437350:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RSI
            sub RSP,184
.L_43736d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call .L_430af0

            xor EDX,EDX
            xor ECX,ECX
            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            xor R9D,R9D
            cmp DWORD PTR [R15],4
            mov WORD PTR [RSP+112],DX
            mov WORD PTR [RSP+50],CX
            mov WORD PTR [RSP+60],SI
            mov WORD PTR [RSP+144],DI
            mov WORD PTR [RSP+70],R8W
            mov WORD PTR [RSP+44],R9W
            je .L_4373e8
.L_4373bc:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4375ee

            add RSP,184
.L_4373da:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4373e8:

            test BYTE PTR [RBX],48
            jne .L_4373bc

            cmp BYTE PTR [RBX+1],2
            jne .L_4373bc

            mov EDI,10
            mov R14,RAX
            call .L_430740

            xor EDI,EDI
            mov R13,RAX
            call .L_4306d0

            mov R8,R13
            lea RDX,QWORD PTR [RIP+.L_45a9b0]
            lea R13,QWORD PTR [RSP+112]
            mov RCX,RAX
            xor EDI,EDI
            xor EAX,EAX
            mov ESI,10
            call .L_4012c0

            mov RCX,R13
            mov EDX,18
            mov ESI,5
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+113],16
            jne .L_4373bc

            lea RAX,QWORD PTR [RSP+50]
            mov EDX,10
            mov ESI,7
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+51],8
            jne .L_4373bc

            lea RAX,QWORD PTR [RSP+60]
            mov EDX,10
            mov ESI,2
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+61],8
            jne .L_4373bc

            lea RAX,QWORD PTR [RSP+144]
            mov EDX,18
            mov ESI,3
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+145],16
            ja .L_4373bc

            lea RCX,QWORD PTR [RSP+70]
            mov EDX,10
            mov ESI,14
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+71],8
            jne .L_4373bc

            lea RCX,QWORD PTR [RSP+44]
            mov EDX,6
            mov ESI,6
            mov RDI,RBP
            call .L_430f70

            test EAX,EAX
            jne .L_4373bc

            cmp BYTE PTR [RSP+45],4
            jne .L_4373bc

            lea RBP,QWORD PTR [R14+1368]
            lea RSI,QWORD PTR [R13+2]
            lea R13,QWORD PTR [R14+1560]
            mov RDI,RBP
            call .L_412ac0

            mov ESI,DWORD PTR [RSP+46]
            mov RDI,RBP
            bswap ESI
            call .L_412d70

            mov RSI,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [R14+2568]
            add RSI,2
            call .L_4154c0

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R13
            add RSI,2
            call .L_405a70

            movzx EDX,BYTE PTR [RSP+145]
            mov RSI,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RSP+80]
            mov ECX,17
            mov RDI,R8
            add RSI,2
            mov RBP,RDX
            call __memcpy_chk@PLT

            mov RDI,R13
            mov RSI,RAX
            mov BYTE PTR [RSP+RBP*1+80],0
            call .L_405800

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R15
            call .L_437240

            call .L_401240

            lea RDI,QWORD PTR [R15+96]
            mov EDX,100
            mov ESI,EAX
            call .L_430d50

            jmp .L_4373bc
.L_4375ee:

            call __stack_chk_fail@PLT
.L_4375f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437600:

            jmp .L_437350
.L_437605:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437610:

            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,32
.L_43761b:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            cmp DWORD PTR [RBX],5
            ja .L_4376e0

            mov EDX,DWORD PTR [RBX]
            lea RCX,QWORD PTR [RIP+.L_45aa00]
            movsxd RDX,DWORD PTR [RCX+RDX*4]
            add RDX,RCX
            jmp RDX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437650:

            mov ESI,28
.L_437655:

            mov RDI,RBX
            call .L_436a70

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4376db

            add RSP,32
.L_437671:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_437680:

            lea RBP,QWORD PTR [RAX+1560]
            lea R12,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RAX
            mov RSI,R12
            mov RDI,RBP
            call .L_405720

            mov RSI,R12
            mov RDI,RBP
            call .L_405760

            mov RAX,QWORD PTR [RSP+8]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_415450

            xor ESI,ESI
            jmp .L_437655
.L_4376bc:

            lea RCX,QWORD PTR [RIP+.L_45aa20]
            lea RSI,QWORD PTR [RIP+.L_45a902]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,578
            call __assert_fail@PLT
.L_4376db:

            call __stack_chk_fail@PLT
.L_4376e0:

            xor ESI,ESI
            jmp .L_437655
.L_4376e7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4376f0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b50

            add RSP,8
            mov RDI,RAX
            jmp .L_437610
.L_43770d:

            nop
            nop
            nop
.L_437710:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBP,RSI
            sub RSP,160
.L_437721:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
.L_43773a:

            call .L_431b80
.L_43773f:

            mov RDI,RBX
.L_437742:

            call .L_431ba0

            mov EDX,8
            mov RSI,R12
            mov RDI,RBX
            call .L_431bb0

            lea RSI,QWORD PTR [RSP+112]
            mov RDI,RBX
            call .L_431bc0
.L_437764:

            mov RAX,QWORD PTR [RSP+112]
            mov RDI,RBX
            mov QWORD PTR [RBP],RAX
            or BYTE PTR [RBP],2
.L_437774:

            call .L_431b90
.L_437779:

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_437798

            add RSP,160
.L_437793:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_437798:

            call __stack_chk_fail@PLT
.L_43779d:

            mov RBP,RAX
            mov RDI,RBX
            call .L_431b90

            mov RDI,RBP
.L_4377ab:

            call _Unwind_Resume@PLT
.L_4377b0:

            movzx EAX,BYTE PTR [RDI+1]
            test AL,AL
            je .L_4377df

            cmp BYTE PTR [RDI+2],0
            jne .L_4377e8

            sub EAX,1
            add RDI,3
            movzx EAX,AL
            add RAX,RDI
            jmp .L_4377da
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4377d0:

            add RDI,1
            cmp BYTE PTR [RDI-1],0
            jne .L_4377e8
.L_4377da:

            cmp RDI,RAX
            jne .L_4377d0
.L_4377df:

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4377e8:

            xor EAX,EAX
            ret 
.L_4377eb:

            nop
            nop
            nop
            nop
            nop
.L_4377f0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBX,RSI
            lea R15,QWORD PTR [RBX+8]
            mov ESI,4129
            sub RSP,24
.L_43780d:

            mov R14,RSP
            lea R12,QWORD PTR [RSP+4]
            mov RDI,R14
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430270

            mov ESI,32773
            mov RDI,R12
            call .L_430270

            nop
            nop
            nop
            nop
            nop
            nop
.L_437840:

            movzx EBP,BYTE PTR [RBX]
            mov RDI,R14
            add RBX,1
            mov ESI,EBP
            call .L_430280

            mov ESI,EBP
            mov RDI,R12
            call .L_430280

            cmp RBX,R15
            jne .L_437840

            movzx ESI,BYTE PTR [R13+1]
            movzx EAX,WORD PTR [RSP+2]
            mov R9D,1
            lea R8D,DWORD PTR [RSI*8]
            cdq 
            sub ESI,1
            mov EDI,ESI
            movzx R8D,R8B
            idiv R8D
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            mov ECX,EDX
            sub EDI,EAX
            mov EAX,R9D
            movsxd RDI,EDI
            shl EAX,CL
            or BYTE PTR [R13+RDI*1+2],AL
            movzx EAX,WORD PTR [RSP+6]
            cdq 
            idiv R8D
            mov EAX,EDX
            and EDX,7
            shr EAX,3
            mov ECX,EDX
            sub ESI,EAX
            mov EAX,R9D
            movsxd RSI,ESI
            shl EAX,CL
            or BYTE PTR [R13+RSI*1+2],AL
            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4378df

            add RSP,24
.L_4378d4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4378df:

            call __stack_chk_fail@PLT
.L_4378e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4378f0:

            lea RAX,QWORD PTR [RIP+.L_45aa48]
            push RBX
            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],RAX
            lea RAX,QWORD PTR [RIP+.L_437d20]
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RBX+32],RDI
            mov QWORD PTR [RDI+40],0
            call .L_430af0

            lea RSI,QWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
            jmp .L_42d6f0
.L_43793b:

            nop
            nop
            nop
            nop
            nop
.L_437940:

            push R15
            push R14
            mov R14D,ESI
            push R13
            push R12
            mov R13,RCX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12D,EDX
            sub RSP,264
.L_43795d:

            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP+16],R9
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            call .L_430af0

            mov R15,RAX
            xor ESI,ESI
            xor EDI,EDI
            xor R8D,R8D
            cmp DWORD PTR [R15+8128],2
            mov WORD PTR [RSP+32],SI
            pxor XMM0,XMM0
            mov WORD PTR [RSP+40],DI
            mov WORD PTR [RSP+36],R8W
            mov EAX,13
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            je .L_4379e8
.L_4379bb:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            jne .L_437bd5

            add RSP,264
.L_4379d9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4379e8:

            mov RDI,R13
            lea RBX,QWORD PTR [RSP+96]
            call .L_40ee50

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,RBX
            shl ESI,4
            call .L_42f0e0

            mov RDI,RBX
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45aa4d]
            mov RDI,RBX
            call .L_42f620

            mov RDI,RBX
            call .L_42f8d0

            lea RAX,QWORD PTR [R15+216]
            xor EDX,EDX
            mov RSI,RBX
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_42d7b0

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_4379bb

            lea RDI,QWORD PTR [R15+8128]
            mov ECX,523
            mov WORD PTR [RSP+32],CX
            call .L_431ec0

            lea RSI,QWORD PTR [RSP+32]
            rol AX,8
            mov EDX,4
            mov RDI,RBX
            mov WORD PTR [RSP+34],AX
            call .L_403d30

            test EAX,EAX
            je .L_437aa8
.L_437a90:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_4379bb
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437aa8:

            lea EAX,DWORD PTR [R12+R12*1]
            shr R12D,1
            mov RDI,RBX
            and R12D,1431655765
            mov DWORD PTR [RSP+40],67110453
            and EAX,2863311530
            or R12D,EAX
            lea EAX,DWORD PTR [R12*4]
            shr R12D,2
            and R12D,858993459
            and EAX,3435973836
            or R12D,EAX
            mov EAX,R12D
            shr R12D,4
            shl EAX,4
            and R12D,252645135
            and EAX,4042322160
            or EAX,R12D
            bswap EAX
            mov EDX,EAX
            mov ESI,EAX
            shr ESI,24
            shl EDX,24
            or EDX,ESI
            mov ESI,EAX
            shr EAX,8
            shl ESI,8
            and EAX,65280
            and ESI,16711680
            or EDX,ESI
            lea RSI,QWORD PTR [RSP+40]
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d30

            test EAX,EAX
            jne .L_437a90

            mov EDX,513
            lea RSI,QWORD PTR [RSP+36]
            rol R14W,8
            mov WORD PTR [RSP+36],DX
            mov RDI,RBX
            mov EDX,4
            mov WORD PTR [RSP+38],R14W
            call .L_403d30

            test EAX,EAX
            jne .L_437a90

            lea RDI,QWORD PTR [R15+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov EAX,4294963391
            mov WORD PTR [RSP+82],AX
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RSP+48]
            movaps XMMWORD PTR [RSP+48],XMM0
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+64],XMM0
            movzx EAX,BYTE PTR [R15+24]
            mov BYTE PTR [RSP+84],AL
            call .L_42e6e0

            test EAX,EAX
            jne .L_437a90

            mov RCX,QWORD PTR [RSP+8]
            mov QWORD PTR [RBP],RCX
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RBP+8],RCX
            jmp .L_4379bb
.L_437bd5:

            call __stack_chk_fail@PLT
.L_437bda:

            nop
            nop
            nop
            nop
            nop
            nop
.L_437be0:

            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RCX
            mov RBP,RSI
            sub RSP,80
.L_437bf8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_430af0

            movdqu XMM0,XMMWORD PTR [RBX]
            xor EDX,EDX
            xor ECX,ECX
            test BYTE PTR [RBP],48
            mov WORD PTR [RSP+4],DX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+8],CX
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RBX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_437c44

            cmp BYTE PTR [RBP+1],2
            je .L_437c68
.L_437c44:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_437d0f

            add RSP,80
.L_437c5c:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_437c68:

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,1
            mov RDI,R13
            mov R14,RAX
            call .L_430f70

            test EAX,EAX
            jne .L_437c44

            cmp BYTE PTR [RSP+5],2
            jne .L_437c44

            lea RBX,QWORD PTR [RSP+8]
            mov EDX,8
            mov ESI,53
            mov RDI,R13
            mov RCX,RBX
            call .L_430f70

            test EAX,EAX
            jne .L_437c44

            cmp BYTE PTR [RSP+9],6
            jne .L_437c44

            cmp BYTE PTR [RSP+10],0
            jne .L_437c44

            cmp BYTE PTR [RSP+11],4
            jne .L_437c44

            mov R13,QWORD PTR [R12]
            test R13,R13
            je .L_437ce7

            mov RDI,RBX
            call .L_437d30

            movzx EDI,WORD PTR [RSP+6]
            mov RDX,QWORD PTR [R12+8]
            mov ESI,EAX
            rol DI,8
            movzx EDI,DI
            call R13
.L_437ce7:

            test BYTE PTR [RBP],48
            jne .L_437c44

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R14+216]
            mov RDX,RBP
            mov ESI,68
            call .L_42e970

            jmp .L_437c44
.L_437d0f:

            call __stack_chk_fail@PLT
.L_437d14:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437d20:

            jmp .L_437be0
.L_437d25:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437d30:

            mov EDX,DWORD PTR [RDI+4]
            bswap EDX
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EDX,EAX
            mov EAX,EDX
            bswap EAX
            ret 
.L_437d78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437d80:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+72]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            sub RSP,8
.L_437d94:

            call .L_4311b0

            mov RBP,QWORD PTR [RBX+272]
            test RBP,RBP
            je .L_437e40

            xor R13D,R13D
            cmp BYTE PTR [RBP],1
            jne .L_437e23
.L_437db2:

            call .L_401460

            mov BYTE PTR [RBX+136],AL
            call .L_401460

            mov BYTE PTR [RBX+137],AL
            call .L_401460

            test R13,R13
            mov BYTE PTR [RBX+138],AL
            je .L_437df2

            mov RAX,QWORD PTR [RBP+20]
            mov QWORD PTR [R13+20],RAX
            mov RAX,QWORD PTR [RBX+272]
            mov QWORD PTR [RBP+20],RAX
            mov QWORD PTR [RBX+272],RBP
.L_437df2:

            mov RDI,R12
            xor ECX,ECX
            mov EDX,120000
            mov ESI,1000
            call .L_431240

            mov RDI,R12
            call .L_4312c0

            add RSP,8
.L_437e12:

            mov EAX,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_437e20:

            mov RBP,RAX
.L_437e23:

            mov RAX,QWORD PTR [RBP+20]
            test RAX,RAX
            je .L_437e40

            cmp BYTE PTR [RAX],1
            jne .L_437e20

            mov R13,RBP
            mov RBP,RAX
            jmp .L_437db2
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_437e40:

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_437e4d:

            nop
            nop
            nop
.L_437e50:

            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RSI+12720]
            mov RBP,RSI
            sub RSP,8
.L_437e63:

            call .L_430ad0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_4108b0

            lea RDI,QWORD PTR [RBX+72]
            lea RDX,QWORD PTR [RIP+.L_438880]
            mov R8,RBX
            mov RSI,RBP
            xor ECX,ECX
            call .L_431160

            lea RDX,QWORD PTR [RBX+184]
            pxor XMM0,XMM0
            lea RAX,QWORD PTR [RBX+156]
            mov QWORD PTR [RBX+140],0
            mov QWORD PTR [RBX+148],0
            mov QWORD PTR [RBX+176],RDX
            lea RDX,QWORD PTR [RBX+212]
            mov DWORD PTR [RBX+172],0
            movups XMMWORD PTR [RBX+156],XMM0
            mov QWORD PTR [RBX+204],RDX
            lea RDX,QWORD PTR [RBX+240]
            mov QWORD PTR [RBX+272],0
            mov QWORD PTR [RBX+232],RDX
            mov QWORD PTR [RBX+280],RAX
            add RSP,8
.L_437efe:

            pop RBX
            pop RBP
            ret 
.L_437f01:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437f10:

            mov RCX,QWORD PTR [RDI+280]
            test RCX,RCX
            je .L_437f58

            mov RAX,QWORD PTR [RCX+20]
            mov QWORD PTR [RDI+280],RAX
            mov WORD PTR [RCX+1],SI
            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RCX+3],XMM0
            movzx EAX,BYTE PTR [RDX+16]
            mov BYTE PTR [RCX],1
            mov QWORD PTR [RCX+20],0
            mov BYTE PTR [RCX+19],AL
            mov RDX,QWORD PTR [RDI+272]
            test RDX,RDX
            jne .L_437f63

            mov QWORD PTR [RDI+272],RCX
.L_437f58:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437f60:

            mov RDX,RAX
.L_437f63:

            mov RAX,QWORD PTR [RDX+20]
            test RAX,RAX
            jne .L_437f60

            mov QWORD PTR [RDX+20],RCX
            ret 
.L_437f71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_437f80:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,QWORD PTR [RDI+272]
            test RBX,RBX
            je .L_437fb1

            mov EBP,ESI
            mov R13,RDX
            mov R12,RDI
            xor R14D,R14D
.L_437f9f:

            cmp BP,WORD PTR [RBX+1]
            je .L_437fc0
.L_437fa5:

            mov R14,RBX
            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            jne .L_437f9f
.L_437fb1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_437fc0:

            lea RSI,QWORD PTR [RBX+3]
            mov RDI,R13
            call .L_401820

            cmp BYTE PTR [R13+16],AL
            ja .L_437fa5

            test R14,R14
            mov RAX,QWORD PTR [RBX+20]
            je .L_438018

            mov QWORD PTR [R14+20],RAX
.L_437fdf:

            pxor XMM0,XMM0
            mov QWORD PTR [RBX+16],0
            mov DWORD PTR [RBX+24],0
            movups XMMWORD PTR [RBX],XMM0
            mov RAX,QWORD PTR [R12+280]
            mov QWORD PTR [RBX+20],RAX
            mov QWORD PTR [R12+280],RBX
            pop RBX
.L_43800a:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438018:

            mov QWORD PTR [R12+272],RAX
            jmp .L_437fdf
.L_438022:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438030:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_438f50]
            pxor XMM0,XMM0
            mov RBX,RDI
            sub RSP,40
.L_438044:

            mov RDX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RBP,RSP
            mov EAX,546
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_4108e0

            mov RSI,RBP
            mov RDI,RBX
            call .L_410940

            mov RAX,QWORD PTR [RBX+272]
            test RAX,RAX
            je .L_438096

            cmp BYTE PTR [RAX],2
            je .L_438096

            mov RDI,RBX
            call .L_437d80
.L_438096:

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4380af

            add RSP,40
.L_4380ac:

            pop RBX
            pop RBP
            ret 
.L_4380af:

            call __stack_chk_fail@PLT
.L_4380b4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4380c0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,72
.L_4380d4:

            mov QWORD PTR [RDI+144],RDX
            mov DWORD PTR [RDI+152],ECX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test ECX,ECX
            lea RBP,QWORD PTR [RSP+32]
            lea R13,QWORD PTR [RSP+28]
            je .L_4381c8

            lea RBP,QWORD PTR [RSP+32]
            lea R13,QWORD PTR [RSP+28]
            xor R15D,R15D
.L_438110:

            movzx EAX,R15B
            lea RAX,QWORD PTR [RAX+RAX*4]
            lea R14,QWORD PTR [RDX+RAX*8]
            mov EDX,DWORD PTR [R14+36]
            test EDX,EDX
            je .L_438168

            mov DWORD PTR [RSP+28],0
            nop
            nop
            nop
            nop
.L_438130:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_42d4b0

            test EAX,EAX
            jne .L_438188

            test BYTE PTR [RSP+49],16
            je .L_438130

            mov RSI,RBP
            mov RDI,R14
            call .L_401820

            movzx EDX,BYTE PTR [R14+16]
            cmp DL,AL
            ja .L_438130

            cmp DL,BYTE PTR [RSP+48]
            jne .L_438130

            nop
            nop
            nop
            nop
            nop
.L_438168:

            add R15D,1
            movzx EAX,R15B
            cmp EAX,DWORD PTR [RBX+152]
            jae .L_4381c8
.L_438178:

            mov RDX,QWORD PTR [RBX+144]
            jmp .L_438110
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438188:

            mov RSI,R14
            mov RDI,R12
            add R15D,1
            call .L_401690

            movzx ESI,WORD PTR [RSP+52]
            mov RDX,RBP
            mov RDI,RBX
            call .L_437f80

            pxor XMM0,XMM0
            mov QWORD PTR [R14+32],0
            movzx EAX,R15B
            movups XMMWORD PTR [R14],XMM0
            movups XMMWORD PTR [R14+16],XMM0
            cmp EAX,DWORD PTR [RBX+152]
            jb .L_438178
.L_4381c8:

            mov DWORD PTR [RSP+28],0
            mov BYTE PTR [RSP+15],0
            nop
            nop
            nop
.L_4381d8:

            mov RDX,RBP
            mov RSI,R13
            mov RDI,R12
            call .L_42d4b0

            test EAX,EAX
            jne .L_4382d8

            movzx EAX,BYTE PTR [RSP+49]
            shr AL,4
            and EAX,1
            mov BYTE PTR [RSP+14],AL
            je .L_4381d8

            mov EAX,DWORD PTR [RBX+152]
            test EAX,EAX
            je .L_4381d8

            xor R15D,R15D
            nop
            nop
            nop
            nop
.L_438210:

            movzx EAX,R15B
            lea RCX,QWORD PTR [RAX+RAX*4]
            mov RAX,QWORD PTR [RBX+144]
            lea R14,QWORD PTR [RAX+RCX*8]
            cmp BYTE PTR [R14+16],0
            je .L_438245

            mov RSI,R14
            mov RDI,RBP
            call .L_401820

            movzx ESI,BYTE PTR [RSP+48]
            cmp SIL,AL
            ja .L_438245

            cmp SIL,BYTE PTR [R14+16]
            je .L_4381d8
.L_438245:

            mov EAX,DWORD PTR [RBX+152]
            add R15D,1
            movzx ECX,R15B
            cmp ECX,EAX
            jb .L_438210

            test EAX,EAX
            mov ECX,EAX
            je .L_4381d8

            mov RAX,QWORD PTR [RBX+144]
            cmp BYTE PTR [RAX+16],0
            je .L_438290

            xor EDX,EDX
.L_438270:

            add RDX,1
            cmp RDX,RCX
            je .L_4381d8

            imul RSI,RDX,40
            cmp BYTE PTR [RAX+RSI*1+16],0
            lea RDI,QWORD PTR [RAX+RSI*1]
            jne .L_438270

            mov RAX,RDI
            nop
.L_438290:

            pxor XMM0,XMM0
            mov QWORD PTR [RAX+32],0
            mov RDI,RBX
            movups XMMWORD PTR [RAX],XMM0
            mov RDX,QWORD PTR [RSP+32]
            movups XMMWORD PTR [RAX+16],XMM0
            mov QWORD PTR [RAX],RDX
            movzx EDX,BYTE PTR [RSP+48]
            mov BYTE PTR [RAX+16],DL
            movzx ESI,WORD PTR [RSP+52]
            mov RDX,RBP
            call .L_437f10

            movzx EAX,BYTE PTR [RSP+14]
            mov BYTE PTR [RSP+15],AL
            jmp .L_4381d8
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4382d8:

            cmp BYTE PTR [RSP+15],0
            mov RDI,RBX
            jne .L_438310

            call .L_4109a0
.L_4382e7:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_438317

            add RSP,72
.L_4382fb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438310:

            call .L_438030

            jmp .L_4382e7
.L_438317:

            call __stack_chk_fail@PLT
.L_43831c:

            nop
            nop
            nop
            nop
.L_438320:

            sub RSP,8
            call .L_4109a0

            xor EAX,EAX
            add RSP,8
            ret 
.L_438330:

            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_438350

            cmp BYTE PTR [RAX],2
            je .L_438350

            jmp .L_437d80
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438350:

            xor EAX,EAX
            ret 
.L_438353:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438360:

            sub RSP,24
.L_438364:

            movzx EDX,WORD PTR [RDI+136]
            mov RAX,RSI
            lea RSI,QWORD PTR [RSP+4]
            mov BYTE PTR [RSP+4],1
            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RCX
            xor ECX,ECX
            mov WORD PTR [RSP+5],DX
            movzx EDX,BYTE PTR [RDI+138]
            mov RDI,RAX
            mov BYTE PTR [RSP+7],DL
            mov EDX,4
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4383ba

            add RSP,24
.L_4383b9:

            ret 
.L_4383ba:

            call __stack_chk_fail@PLT
.L_4383bf:

            nop
.L_4383c0:

            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,24
.L_4383cc:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],33556480
            call .L_401240

            sub EAX,DWORD PTR [RBP+140]
            mov EDX,274877907
            lea RSI,QWORD PTR [RSP+2]
            mov RDI,RBX
            mul EDX
            shr EDX,6
            rol DX,8
            mov WORD PTR [RSP+6],DX
            mov EDX,6
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43842b

            add RSP,24
.L_438428:

            pop RBX
            pop RBP
            ret 
.L_43842b:

            call __stack_chk_fail@PLT
.L_438430:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_438438:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movabs RAX,1945558337760264448
            mov QWORD PTR [RSP],RAX
            call .L_430af0

            mov RAX,QWORD PTR [RAX+1656]
            mov RSI,RSP
            mov EDX,16
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43848d

            add RSP,32
.L_43848b:

            pop RBX
            ret 
.L_43848d:

            call __stack_chk_fail@PLT
.L_438492:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4384a0:

            sub RSP,40
.L_4384a4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_438548

            mov R8,RSI
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4384d0:

            cmp BYTE PTR [RAX],3
            je .L_4384df

            cmp WORD PTR [RAX+1],DX
            sete SIL
            add ECX,ESI
.L_4384df:

            mov RAX,QWORD PTR [RAX+20]
            test RAX,RAX
            jne .L_4384d0

            mov EAX,768
            movzx ECX,CL
            mov RSI,RSP
            mov WORD PTR [RSP],AX
            lea EAX,DWORD PTR [RCX*8]
            mov EDX,16
            mov RDI,R8
            mov QWORD PTR [RSP+4],0
            mov DWORD PTR [RSP+12],0
            sub EAX,ECX
            lea EAX,DWORD PTR [RAX*4+12]
            rol AX,8
            mov WORD PTR [RSP+2],AX
            call .L_403d30
.L_43852e:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43854f

            add RSP,40
.L_438542:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438548:

            mov EAX,2
            jmp .L_43852e
.L_43854f:

            call __stack_chk_fail@PLT
.L_438554:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438560:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_43856a:

            mov RBX,QWORD PTR [RDI+272]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_438608

            mov R12,RSI
            mov EBP,EDX
            mov DWORD PTR [RSP],402654464
            mov R13,RSP
            jmp .L_4385a9
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4385a0:

            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            je .L_438600
.L_4385a9:

            cmp BYTE PTR [RBX],3
            je .L_4385a0

            cmp WORD PTR [RBX+1],BP
            jne .L_4385a0

            movdqu XMM0,XMMWORD PTR [RBX+3]
            mov EDX,28
            mov RSI,R13
            mov RDI,R12
            mov QWORD PTR [RSP+20],0
            movups XMMWORD PTR [RSP+4],XMM0
            call .L_403d30

            test EAX,EAX
            je .L_4385a0

            nop
            nop
            nop
            nop
            nop
.L_4385e0:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43860f

            add RSP,56
.L_4385f4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438600:

            xor EAX,EAX
            jmp .L_4385e0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_438608:

            mov EAX,2
            jmp .L_4385e0
.L_43860f:

            call __stack_chk_fail@PLT
.L_438614:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438620:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,104
.L_438633:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ESI,ESI
            mov RDI,RBX
            mov R13,RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_4108c0

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_4386b7

            movzx EAX,WORD PTR [RBX+136]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov RDI,R15
            mov BYTE PTR [RSP+28],1
            mov WORD PTR [RSP+29],AX
            movzx EAX,BYTE PTR [RBX+138]
            mov BYTE PTR [RSP+31],AL
            call .L_403d30

            test EAX,EAX
            je .L_4386e0
.L_4386a7:

            mov RDI,R15
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_4386b7:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4387c2

            add RSP,104
.L_4386cf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4386e0:

            mov RSI,R15
            mov RDI,RBX
            call .L_4383c0

            test EAX,EAX
            jne .L_4386a7

            mov RSI,R15
            mov RDI,RBX
            call .L_438430

            test EAX,EAX
            jne .L_4386a7

            movzx R14D,BP
            mov RSI,R15
            mov RDI,RBX
            mov EDX,R14D
            call .L_4384a0

            test EAX,EAX
            jne .L_4386a7

            mov EDX,R14D
            mov RSI,R15
            mov RDI,RBX
            call .L_438560

            test EAX,EAX
            jne .L_4386a7

            lea RSI,QWORD PTR [RSP+24]
            mov EDX,4
            mov RDI,R15
            mov DWORD PTR [RSP+24],3584
            call .L_403d30

            test EAX,EAX
            jne .L_4386a7

            lea R12,QWORD PTR [RSP+32]
            mov ECX,12
            lea R14,QWORD PTR [R13+2568]
            rol BP,8
            mov RDI,R12

            rep stosd DWORD PTR [RDI]

            mov RDI,R14
            call .L_4154b0

            mov RAX,QWORD PTR [RAX]
            mov RDI,R14
            mov DWORD PTR [RSP+56],4278190080
            mov WORD PTR [RSP+60],254
            mov WORD PTR [RSP+62],BP
            mov QWORD PTR [RSP+48],RAX
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDX,R12
            mov WORD PTR [RSP+66],547
            movzx EAX,BYTE PTR [R13+24]
            mov RSI,R15
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov BYTE PTR [RSP+68],AL
            call .L_410a20

            test EAX,EAX
            je .L_4386b7

            jmp .L_4386a7
.L_4387c2:

            call __stack_chk_fail@PLT
.L_4387c7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4387d0:

            push RBP
            push RBX
            xor EBP,EBP
            sub RSP,8
            mov RAX,QWORD PTR [RDI+272]
            test RAX,RAX
            je .L_4387fe

            movzx EDX,BYTE PTR [RAX]
            mov RBX,RDI
            cmp DL,2
            je .L_43882c

            cmp DL,3
            je .L_438850

            cmp DL,1
            mov EBP,1
            je .L_438810
.L_4387fe:

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438810:

            call .L_401240

            mov DWORD PTR [RBX+140],EAX
            mov RAX,QWORD PTR [RBX+272]
            mov BYTE PTR [RAX],2
            mov RAX,QWORD PTR [RBX+272]
.L_43882c:

            movzx ESI,WORD PTR [RAX+1]
            mov RDI,RBX
            mov EBP,1
            call .L_438620

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438850:

            call .L_437d80

            test AL,AL
            mov EBP,EAX
            jne .L_4387fe

            lea RDI,QWORD PTR [RBX+72]
            call .L_4311b0

            mov RDI,RBX
            call .L_4109a0

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_438875:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438880:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402ba0

            add RSP,8
            mov RDI,RAX
            jmp .L_4387d0
.L_43889d:

            nop
            nop
            nop
.L_4388a0:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],3584
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4388e3

            add RSP,24
            ret 
.L_4388e3:

            call __stack_chk_fail@PLT
.L_4388e8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4388f0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov EBX,ECX
            mov R12,RSI
            sub RSP,24
.L_438909:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            add BX,DX
            jb .L_4389ad

            xor R14D,R14D
.L_438925:

            test R14W,R14W
            lea RBP,QWORD PTR [RSP+4]
            je .L_43895d

            jmp .L_4389a0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_438938:

            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            movzx EAX,AX
            cmp R13D,EAX
            je .L_4389a8

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            lea R15D,DWORD PTR [R15+RAX*1+4]
            cmp BX,R15W
            jb .L_4389a0
.L_43895d:

            movzx ESI,R15W
            mov RCX,RBP
            mov EDX,4
            mov RDI,R12
            call .L_403860

            cmp AX,4
            je .L_438938
.L_438977:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_4389b8

            add RSP,24
.L_43898e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4389a0:

            xor R14D,R14D
            jmp .L_438977
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4389a8:

            mov R14D,R15D
            jmp .L_438977
.L_4389ad:

            mov R14D,1
            jmp .L_438925
.L_4389b8:

            call __stack_chk_fail@PLT
.L_4389bd:

            nop
            nop
            nop
.L_4389c0:

            sub RSP,40
.L_4389c4:

            mov RDI,RSI
            movzx ESI,DX
            mov RCX,RSP
            mov EDX,16
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,16
            mov EDX,6
            jne .L_438a18

            cmp WORD PTR [RSP+2],3072
            jne .L_438a18

            cmp WORD PTR [RSP+4],768
            jne .L_438a18

            cmp WORD PTR [RSP+6],6912
            mov EAX,0
            cmove EDX,EAX
            nop
            nop
            nop
            nop
            nop
.L_438a18:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_438a2f

            add RSP,40
.L_438a2e:

            ret 
.L_438a2f:

            call __stack_chk_fail@PLT
.L_438a34:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438a40:

            push RBX
            mov RBX,RDI
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,16
            sub RSP,32
.L_438a53:

            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,16
            jne .L_438ab0

            cmp WORD PTR [RSP+2],3072
            jne .L_438ab0

            cmp WORD PTR [RSP+4],768
            jne .L_438ab0

            cmp WORD PTR [RSP+6],6912
            jne .L_438ab0

            mov RDI,RBX
            call .L_430af0

            mov RDX,RAX
            xor EAX,EAX
            mov RBX,QWORD PTR [RDX+1656]
            cmp QWORD PTR [RSP+8],RBX
            je .L_438ab5

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438ab0:

            mov EAX,6
.L_438ab5:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            jne .L_438acb

            add RSP,32
.L_438ac9:

            pop RBX
            ret 
.L_438acb:

            call __stack_chk_fail@PLT
.L_438ad0:

            sub RSP,24
.L_438ad4:

            mov RDI,RSI
            movzx ESI,DX
            lea RCX,QWORD PTR [RSP+2]
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,6
            mov EDX,6
            jne .L_438b21

            cmp WORD PTR [RSP+4],512
            jne .L_438b21

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            cmp AX,1
            sbb EDX,EDX
            not EDX
            and EDX,6
.L_438b21:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_438b38

            add RSP,24
.L_438b37:

            ret 
.L_438b38:

            call __stack_chk_fail@PLT
.L_438b3d:

            nop
            nop
            nop
.L_438b40:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,28
            sub RSP,48
.L_438b5a:

            mov R13,RSP
            mov RCX,R13
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,28
            mov EDX,6
            jne .L_438c17

            cmp WORD PTR [RSP+2],6144
            jne .L_438c17

            mov EDX,DWORD PTR [R12+152]
            test EDX,EDX
            je .L_438be2

            lea R14,QWORD PTR [R13+4]
            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
.L_438ba8:

            movzx EAX,BL
            lea RDX,QWORD PTR [RAX+RAX*4]
            mov RAX,QWORD PTR [R12+144]
            lea RBP,QWORD PTR [RAX+RDX*8]
            mov EAX,DWORD PTR [RBP+36]
            test EAX,EAX
            jne .L_438bd2

            mov RSI,R14
            mov RDI,RBP
            call .L_401820

            cmp BYTE PTR [RBP+16],AL
            jbe .L_438c40
.L_438bd2:

            add EBX,1
            movzx EAX,BL
            cmp EAX,DWORD PTR [R12+152]
            jb .L_438ba8
.L_438be2:

            mov RBX,QWORD PTR [R12+272]
            add R13,4
            test RBX,RBX
            jne .L_438c01

            jmp .L_438c15
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_438bf8:

            mov RBX,QWORD PTR [RBX+20]
            test RBX,RBX
            je .L_438c15
.L_438c01:

            lea RSI,QWORD PTR [RBX+3]
            mov RDI,R13
            call .L_401820

            cmp BYTE PTR [RBX+19],AL
            ja .L_438bf8

            mov BYTE PTR [RBX],3
.L_438c15:

            xor EDX,EDX
.L_438c17:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_438c96

            add RSP,48
.L_438c2d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_438c40:

            movdqu XMM0,XMMWORD PTR [RSP+4]
            mov RDI,R12
            movups XMMWORD PTR [RBP],XMM0
            mov EAX,DWORD PTR [RSP+20]
            mov EDX,DWORD PTR [RSP+24]
            bswap EAX
            bswap EDX
            test EAX,EAX
            mov DWORD PTR [RBP+32],EAX
            movzx EAX,BYTE PTR [RBP+17]
            setne CL
            mov DWORD PTR [RBP+36],EDX
            and EAX,4294967292
            test EDX,EDX
            setne DL
            or EAX,ECX
            add EDX,EDX
            or EAX,EDX
            mov BYTE PTR [RBP+17],AL
            call .L_430af0

            mov RDI,RAX
            call .L_430ac0

            mov RSI,RBP
            mov RDI,RAX
            call .L_401680

            jmp .L_438be2
.L_438c96:

            call __stack_chk_fail@PLT
.L_438c9b:

            nop
            nop
            nop
            nop
            nop
.L_438ca0:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            movzx ESI,DX
            mov R12D,EDX
            mov RDI,R13
            mov EDX,16
            sub RSP,40
.L_438cc2:

            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_403860

            mov EDX,EAX
            mov EAX,6
            cmp DX,16
            jne .L_438d80

            movzx EBX,WORD PTR [RSP+2]
            movzx EDX,WORD PTR [R13+58]
            add R12D,16
            movzx R15D,R12W
            rol BX,8
            sub EDX,R15D
            sub EBX,12
            movzx EBP,BX
            cmp EBP,EDX
            jg .L_438d80

            mov R8D,13
            mov ECX,EBP
            mov EDX,R15D
            mov RSI,R13
            mov RDI,R14
            call .L_4388f0

            test AX,AX
            jne .L_438da0
.L_438d29:

            test BX,BX
            jne .L_438d57

            jmp .L_438d74
.L_438d30:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_438b40

            test EAX,EAX
            jne .L_438d80

            lea EBX,DWORD PTR [RBX+R12*1-28]
            lea R12D,DWORD PTR [RBP+28]
            sub BX,BP
            je .L_438d74

            movzx EBP,BX
            movzx R15D,R12W
.L_438d57:

            mov ECX,EBP
            mov R8D,5
            mov EDX,R15D
            mov RSI,R13
            mov RDI,R14
            call .L_4388f0

            test AX,AX
            mov EBP,EAX
            jne .L_438d30
.L_438d74:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438d80:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_438db8

            add RSP,40
.L_438d94:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_438da0:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_438ad0

            test EAX,EAX
            je .L_438d29

            jmp .L_438d80
.L_438db8:

            call __stack_chk_fail@PLT
.L_438dbd:

            nop
            nop
            nop
.L_438dc0:

            push R13
            push R12
            mov R8D,2
            push RBP
            push RBX
            mov R12,RDI
            mov RBP,RSI
            sub RSP,8
            movzx R13D,WORD PTR [RSI+60]
            movzx EBX,WORD PTR [RSI+58]
            sub EBX,R13D
            mov EDX,R13D
            movzx EBX,BX
            mov ECX,EBX
            call .L_4388f0

            test AX,AX
            jne .L_438e00
.L_438df4:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_438e00:

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_4389c0

            test EAX,EAX
            jne .L_438df4

            mov R8D,1
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_4388f0

            test AX,AX
            je .L_438df4

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_438a40

            test EAX,EAX
            jne .L_438df4

            mov R8D,14
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_4388f0

            test AX,AX
            je .L_438df4

            mov R8D,3
            mov ECX,EBX
            mov EDX,R13D
            mov RSI,RBP
            mov RDI,R12
            call .L_4388f0

            test AX,AX
            je .L_438df4

            movzx EDX,AX
            mov RSI,RBP
            mov RDI,R12
            call .L_438ca0

            test EAX,EAX
            jne .L_438df4

            pop RAX
.L_438e90:

            mov RDI,R12
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4387d0
.L_438e9e:

            nop
            nop
.L_438ea0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RSI
            mov EDX,4
            mov RDI,RBX
            sub RSP,16
            movzx ESI,WORD PTR [RSI+60]
            lea RBP,QWORD PTR [RSP+4]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov RCX,RBP
            call .L_403860

            cmp AX,4
            je .L_438f00
.L_438edd:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_438f3e

            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438f00:

            mov ESI,4
            mov RDI,RBX
            call .L_4034e0

            cmp BYTE PTR [RSP+4],7
            jne .L_438edd

            movzx ECX,WORD PTR [R12+136]
            cmp WORD PTR [RBP+1],CX
            jne .L_438edd

            movzx EAX,BYTE PTR [R12+138]
            cmp BYTE PTR [RBP+3],AL
            jne .L_438edd

            mov RSI,RBX
            mov RDI,R12
            call .L_438dc0

            jmp .L_438edd
.L_438f3e:

            call __stack_chk_fail@PLT
.L_438f43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438f50:

            jmp .L_438ea0
.L_438f55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_438f60:

            push RBX

            mov RBX,RDI
            call .L_430af0

            mov RDI,RAX
            call .L_430ad0

            lea RSI,QWORD PTR [RAX+104]
            mov RDI,RBX
            call .L_4108b0

            lea RAX,QWORD PTR [RBX+200]
            lea RDX,QWORD PTR [RBX+72]
            lea RCX,QWORD PTR [RBX+268]
.L_438f8f:

            pxor XMM0,XMM0
            mov BYTE PTR [RAX+16],0
            add RAX,17
            add RDX,32
            movups XMMWORD PTR [RAX-17],XMM0
            movups XMMWORD PTR [RDX-32],XMM0
            movups XMMWORD PTR [RDX-16],XMM0
            cmp RAX,RCX
            jne .L_438f8f

            xor EAX,EAX
            mov WORD PTR [RBX+268],AX
            pop RBX

            ret 
.L_438fbb:

            nop
            nop
            nop
            nop
            nop
.L_438fc0:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_439d10]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_438fd4:

            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov RBP,RSP
            mov EAX,547
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_4108e0

            mov RSI,RBP
            mov RDI,RBX
            call .L_410940

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_439026

            add RSP,40
.L_439021:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_439026:

            call __stack_chk_fail@PLT
.L_43902b:

            nop
            nop
            nop
            nop
            nop
.L_439030:

            sub RSP,8
            call .L_4109a0

            xor EAX,EAX
            add RSP,8
            ret 
.L_439040:

            lea RDX,QWORD PTR [RDI+216]
            xor EAX,EAX
.L_439049:

            cmp BYTE PTR [RDX],0
            je .L_439060

            add EAX,1
            add RDX,17
            cmp EAX,4
            jne .L_439049

            mov EAX,3
            ret 
.L_439060:

            cdqe 
            movdqu XMM0,XMMWORD PTR [RSI]
            mov RDX,RAX
            shl RDX,4
            lea RAX,QWORD PTR [RAX+RDX*1+200]
            add RAX,RDI
            movups XMMWORD PTR [RAX],XMM0
            movzx EDX,BYTE PTR [RSI+16]
            mov BYTE PTR [RAX+16],DL
            xor EAX,EAX
            add BYTE PTR [RDI+269],1
            ret 
.L_43908c:

            nop
            nop
            nop
            nop
.L_439090:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea RBP,QWORD PTR [RDI+268]
            lea RBX,QWORD PTR [RDI+200]
            mov R12,RDI
            sub RSP,8
.L_4390ae:

            cmp BYTE PTR [RBX+16],0
            je .L_4390c4

            mov RSI,R13
            mov RDI,RBX
            call .L_401820

            cmp BYTE PTR [RBX+16],AL
            jbe .L_4390e0
.L_4390c4:

            add RBX,17
            cmp RBX,RBP
            jne .L_4390ae

            add RSP,8
            mov EAX,23
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4390e0:

            pxor XMM0,XMM0
            mov BYTE PTR [RBX+16],0
            xor EAX,EAX
            movups XMMWORD PTR [RBX],XMM0
            sub BYTE PTR [R12+269],1
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_439101:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439110:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea R15,QWORD PTR [R12+72]
            sub RSP,120
.L_439126:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            call .L_430af0

            mov RBX,RAX
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RAX+2568]
            lea RBP,QWORD PTR [RSP+80]
            lea R14,QWORD PTR [RSP+60]
            add RBX,7520
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_415a90

            movzx R13D,AX
            lea RAX,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+16],RAX
.L_43917e:

            movsxd RAX,DWORD PTR [RSP+8]
            mov QWORD PTR [RSP+24],RAX
            shl RAX,5
            test BYTE PTR [R12+RAX*1+89],2
            je .L_4391e0

            mov DWORD PTR [RSP+60],0
            nop
            nop
            nop
            nop
.L_4391a0:

            mov RCX,RBP
            mov EDX,R13D
            mov RSI,R14
            mov RDI,RBX
            call .L_4244a0

            test EAX,EAX
            jne .L_4392b0

            test BYTE PTR [RSP+97],16
            je .L_4391a0

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            call .L_426230

            movzx EAX,BYTE PTR [RSP+73]
            cmp BYTE PTR [R15+15],AL
            jne .L_4391a0

            nop
            nop
            nop
            nop
            nop
.L_4391e0:

            add DWORD PTR [RSP+8],1
            add R15,32
            mov EAX,DWORD PTR [RSP+8]
            cmp EAX,4
            jne .L_43917e

            lea R15,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+60],0
            nop
.L_439200:

            mov RCX,RBP
            mov EDX,R13D
            mov RSI,R14
            mov RDI,RBX
            call .L_4244a0

            test EAX,EAX
            jne .L_4392f0

            test BYTE PTR [RSP+97],16
            je .L_439200

            mov RDX,R15
            mov RSI,RBP
            mov RDI,RBX
            call .L_426230

            movzx ECX,BYTE PTR [RSP+73]
            xor EAX,EAX
.L_439235:

            movsxd RDX,EAX
            shl RDX,5
            test BYTE PTR [R12+RDX*1+89],2
            je .L_439252

            mov RDX,RAX
            shl RDX,5
            cmp BYTE PTR [R12+RDX*1+87],CL
            je .L_439200
.L_439252:

            add RAX,1
            cmp RAX,4
            jne .L_439235

            xor EAX,EAX
.L_43925e:

            movsxd RCX,EAX
            mov RDX,RCX
            shl RDX,5
            add RDX,R12
            test BYTE PTR [RDX+89],2
            lea R8,QWORD PTR [RDX+80]
            je .L_439320

            add EAX,1
            cmp EAX,4
            jne .L_43925e

            mov EAX,3
.L_439286:

            mov RDI,QWORD PTR [RSP+104]
            xor RDI,QWORD PTR FS:[40]
            jne .L_439396

            add RSP,120
.L_43929e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4392b0:

            movzx ESI,BYTE PTR [R15+15]
            mov RDX,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_426390

            mov RDI,QWORD PTR [RSP+32]
            mov RSI,R15
            call .L_4105f0

            mov RAX,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+64]
            mov RDI,R12
            shl RAX,5
            and BYTE PTR [R12+RAX*1+89],253
            call .L_439090

            jmp .L_4391e0
.L_4392f0:

            cmp BYTE PTR [R12+269],0
            mov RDI,R12
            jne .L_439310

            call .L_4109a0

            xor EAX,EAX
            jmp .L_439286
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_439310:

            call .L_438fc0

            xor EAX,EAX
            jmp .L_439286
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_439320:

            shl RCX,5
            mov RDI,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+24],R8
            lea RSI,QWORD PTR [R12+RCX*1+72]
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+8],RSI
            call .L_4154b0

            mov RSI,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR [RAX]
            mov RDX,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+32]
            mov QWORD PTR [RSI],RAX
            mov EAX,254
            mov DWORD PTR [RSI+8],4278190080
            mov WORD PTR [RSI+12],AX
            movzx EAX,BYTE PTR [RSP+73]
            mov BYTE PTR [RSI+14],252
            mov BYTE PTR [RSI+15],AL
            mov BYTE PTR [RDX+88],128
            or BYTE PTR [R8+9],3
            call .L_410590

            mov RSI,RBP
            mov RDI,R12
            call .L_439040

            jmp .L_439200
.L_439396:

            call __stack_chk_fail@PLT
.L_43939b:

            nop
            nop
            nop
            nop
            nop
.L_4393a0:

            push R15
            push R14
            mov R15D,EDX
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov EBX,ECX
            mov R12,RSI
            sub RSP,24
.L_4393b9:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            add BX,DX
            jb .L_43945d

            xor R14D,R14D
.L_4393d5:

            test R14W,R14W
            lea RBP,QWORD PTR [RSP+4]
            je .L_43940d

            jmp .L_439450
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4393e8:

            movzx EAX,WORD PTR [RSP+4]
            rol AX,8
            movzx EAX,AX
            cmp R13D,EAX
            je .L_439458

            movzx EAX,WORD PTR [RSP+6]
            rol AX,8
            lea R15D,DWORD PTR [R15+RAX*1+4]
            cmp BX,R15W
            jb .L_439450
.L_43940d:

            movzx ESI,R15W
            mov RCX,RBP
            mov EDX,4
            mov RDI,R12
            call .L_403860

            cmp AX,4
            je .L_4393e8
.L_439427:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_439468

            add RSP,24
.L_43943e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439450:

            xor R14D,R14D
            jmp .L_439427
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_439458:

            mov R14D,R15D
            jmp .L_439427
.L_43945d:

            mov R14D,1
            jmp .L_4393d5
.L_439468:

            call __stack_chk_fail@PLT
.L_43946d:

            nop
            nop
            nop
.L_439470:

            push RBX
            mov RDI,RSI
            movzx ESI,DX
            mov EDX,16
            mov RBX,RCX
            call .L_403860

            cmp AX,16
            mov EDX,6
            jne .L_4394ad

            cmp WORD PTR [RBX+2],3072
            jne .L_4394ad

            cmp WORD PTR [RBX+4],768
            jne .L_4394ad

            cmp WORD PTR [RBX+6],6912
            mov EAX,0
            cmove EDX,EAX
.L_4394ad:

            mov EAX,EDX
            pop RBX
            ret 
.L_4394b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4394c0:

            sub RSP,24
.L_4394c4:

            mov RDI,RSI
            movzx ESI,DX
            lea RCX,QWORD PTR [RSP+2]
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,6
            mov EDX,6
            jne .L_439503

            cmp WORD PTR [RSP+4],512
            mov EAX,0
            cmove EDX,EAX
.L_439503:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_43951a

            add RSP,24
.L_439519:

            ret 
.L_43951a:

            call __stack_chk_fail@PLT
.L_43951f:

            nop
.L_439520:

            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            mov RDI,RSI
            push RBX
            movzx ESI,DX
            mov EDX,28
            sub RSP,48
.L_43953a:

            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,28
            mov EDX,6
            jne .L_43959c

            cmp WORD PTR [RSP+2],6144
            jne .L_43959c

            lea RBX,QWORD PTR [R13+200]
            xor EBP,EBP
            add R12,4
.L_439576:

            cmp BYTE PTR [RBX+16],0
            je .L_43958c

            mov RSI,RBX
            mov RDI,R12
            call .L_401820

            cmp BYTE PTR [RBX+16],AL
            jbe .L_4395c0
.L_43958c:

            add RBP,1
            add RBX,17
            cmp RBP,4
            jne .L_439576

            xor EDX,EDX
.L_43959c:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_4395d4

            add RSP,48
.L_4395b2:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4395c0:

            mov EAX,1
            mov ECX,EBP
            xor EDX,EDX
            shl EAX,CL
            or BYTE PTR [R13+268],AL
            jmp .L_43959c
.L_4395d4:

            call __stack_chk_fail@PLT
.L_4395d9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4395e0:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            movzx ESI,DX
            push RBX
.L_4395ee:

            mov R14,RDI
            mov R12D,EDX
            mov RDI,R13
            mov EDX,16
            mov RBX,RCX
            call .L_403860

            mov EDX,EAX
            mov EAX,6
            cmp DX,16
            jne .L_439689

            movzx EBX,WORD PTR [RBX+2]
            movzx ESI,WORD PTR [R13+58]
            add R12D,16
            movzx EDX,R12W
            rol BX,8
            sub ESI,EDX
            sub EBX,12
            movzx ECX,BX
            cmp ECX,ESI
            jg .L_439689

            test BX,BX
            mov BYTE PTR [R14+268],0
            jne .L_43966f

            jmp .L_439687
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439648:

            movzx EDX,AX
            mov RSI,R13
            mov RDI,R14
            call .L_439520

            test EAX,EAX
            jne .L_439689

            lea EBX,DWORD PTR [RBX+R12*1-28]
            lea R12D,DWORD PTR [RBP+28]
            sub BX,BP
            je .L_439687

            movzx ECX,BX
            movzx EDX,R12W
.L_43966f:

            mov R8D,5
            mov RSI,R13
            mov RDI,R14
            call .L_4393a0

            test AX,AX
            mov EBP,EAX
            jne .L_439648
.L_439687:

            xor EAX,EAX
.L_439689:

            pop RBX
.L_43968a:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_439692:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4396a0:

            sub RSP,24
.L_4396a4:

            mov RDI,RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDX]
            lea RSI,QWORD PTR [RSP+4]
            mov BYTE PTR [RSP+4],7
            mov WORD PTR [RSP+5],AX
            movzx EAX,BYTE PTR [RDX+2]
            mov EDX,4
            mov BYTE PTR [RSP+7],AL
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4396f0

            add RSP,24
.L_4396ef:

            ret 
.L_4396f0:

            call __stack_chk_fail@PLT
.L_4396f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439700:

            mov RDI,RSI
            mov RSI,RDX
            mov EDX,16
            jmp .L_403d30
.L_439710:

            push RBX
            mov RBX,RSI
            sub RSP,32
.L_439718:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movabs RAX,1945558337760264704
            mov QWORD PTR [RSP],RAX
            call .L_430af0

            mov RAX,QWORD PTR [RAX+1656]
            mov RSI,RSP
            mov EDX,16
            mov RDI,RBX
            mov QWORD PTR [RSP+8],RAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43976d

            add RSP,32
.L_43976b:

            pop RBX
            ret 
.L_43976d:

            call __stack_chk_fail@PLT
.L_439772:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439780:

            mov R10,RSI
            mov RSI,RDX
            movzx EDX,BYTE PTR [RDI+268]
            test DL,DL
            je .L_4397d0

            xor ECX,ECX
            xor EAX,EAX
.L_439795:

            mov R9D,EDX
            lea R8D,DWORD PTR [RAX+28]
            sar R9D,CL
            and R9D,1
            cmovne EAX,R8D
            add ECX,1
            cmp ECX,4
            jne .L_439795
.L_4397af:

            add EAX,18
            mov QWORD PTR [RSI+8],-1
            mov EDX,16
            rol AX,8
            mov RDI,R10
            mov WORD PTR [RSI+2],AX
            jmp .L_403d30
          .byte 0x90
.L_4397d0:

            movzx EDX,BYTE PTR [RDI+269]
            lea EAX,DWORD PTR [RDX*8]
            sub EAX,EDX
            shl EAX,2
            jmp .L_4397af
.L_4397e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4397f0:

            sub RSP,24
.L_4397f4:

            rol DX,8
            mov RDI,RSI
            lea RSI,QWORD PTR [RSP+2]
            mov WORD PTR [RSP+6],DX
            mov EDX,6
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov DWORD PTR [RSP+2],33557760
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43983c

            add RSP,24
.L_43983b:

            ret 
.L_43983c:

            call __stack_chk_fail@PLT
.L_439841:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439850:

            push RBP
            push RBX
            mov RBP,RSI
            lea RSI,QWORD PTR [RCX+8]
            sub RSP,56
.L_43985d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RBX,RSP
            mov RAX,QWORD PTR [RDX]
            mov DWORD PTR [RSP],402654464
            lea RDI,QWORD PTR [RBX+4]
            mov QWORD PTR [RSP+4],RAX
            call .L_40f0b0

            mov EDX,28
            mov RSI,RBX
            mov RDI,RBP
            mov QWORD PTR [RSP+20],-1
            call .L_403d30

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4398b8

            add RSP,56
.L_4398b5:

            pop RBX
            pop RBP
            ret 
.L_4398b8:

            call __stack_chk_fail@PLT
.L_4398bd:

            nop
            nop
            nop
.L_4398c0:

            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_4398ce:

            movzx EAX,BYTE PTR [RDI+268]
            mov RBP,RSI
            test AL,AL
            je .L_439930

            xor EBX,EBX
            lea R13,QWORD PTR [RDI+200]
            bt EAX,EBX
            jb .L_439907

            nop
            nop
            nop
            nop
            nop
            nop
.L_4398f0:

            add RBX,1
            cmp RBX,4
            je .L_439962

            movzx EAX,BYTE PTR [R14+268]
            bt EAX,EBX
            jae .L_4398f0
.L_439907:

            mov RDX,RBX
            mov RCX,R12
            mov RSI,RBP
            shl RDX,4
            mov RDI,R14
            add RDX,RBX
            add RDX,R13
            call .L_439850

            test EAX,EAX
            je .L_4398f0
.L_439926:

            pop RBX
.L_439927:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_439930:

            lea RBX,QWORD PTR [RDI+200]
            lea R13,QWORD PTR [RDI+268]
.L_43993e:

            cmp BYTE PTR [RBX+16],0
            je .L_439959

            mov RCX,R12
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R14
            call .L_439850

            test EAX,EAX
            jne .L_439926
.L_439959:

            add RBX,17
            cmp RBX,R13
            jne .L_43993e
.L_439962:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_43996d:

            nop
            nop
            nop
.L_439970:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            xor ESI,ESI
            push RBP
            push RBX
            mov R13,RDX
            pxor XMM0,XMM0
            mov RBX,RDI
            sub RSP,104
.L_43998d:

            mov RBP,RCX
            mov R12,R8
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+32],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_4108c0

            mov R15,RAX
            mov EAX,3
            test R15,R15
            je .L_439a0c

            movzx EAX,WORD PTR [R13]
            lea RSI,QWORD PTR [RSP+28]
            mov EDX,4
            mov RDI,R15
            mov BYTE PTR [RSP+28],7
            mov WORD PTR [RSP+29],AX
            movzx EAX,BYTE PTR [R13+2]
            mov BYTE PTR [RSP+31],AL
            call .L_403d30

            test EAX,EAX
            je .L_439a30
.L_4399fc:

            mov RDI,R15
            mov DWORD PTR [RSP+8],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+8]
.L_439a0c:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            jne .L_439b01

            add RSP,104
.L_439a24:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_439a30:

            mov RSI,R15
            mov RDI,RBX
            call .L_439710

            test EAX,EAX
            jne .L_4399fc

            mov EDX,16
            mov RSI,RBP
            mov RDI,R15
            call .L_403d30

            test EAX,EAX
            jne .L_4399fc

            mov RDX,R12
            mov RSI,R15
            mov RDI,RBX
            call .L_439780

            test EAX,EAX
            jne .L_4399fc

            lea R12,QWORD PTR [RSP+22]
            xor EAX,EAX
            mov EDX,6
            mov RDI,R15
            mov DWORD PTR [RSP+22],33557760
            mov WORD PTR [RSP+26],AX
            mov RSI,R12
            call .L_403d30

            test EAX,EAX
            jne .L_4399fc

            mov RDX,RBP
            mov RSI,R15
            mov RDI,RBX
            call .L_4398c0

            test EAX,EAX
            jne .L_4399fc

            mov EDX,4
            mov RSI,R12
            mov RDI,R15
            mov DWORD PTR [RSP+22],3584
            call .L_403d30

            test EAX,EAX
            jne .L_4399fc

            mov RDI,QWORD PTR [RSP+8]
            mov ECX,12
            mov RDX,QWORD PTR [RSP+8]
            movdqu XMM0,XMMWORD PTR [R14]
            mov RSI,R15

            rep stosd DWORD PTR [RDI]

            mov RDI,RBX
            mov WORD PTR [RSP+66],546
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_410a20

            test EAX,EAX
            je .L_439a0c

            jmp .L_4399fc
.L_439b01:

            call __stack_chk_fail@PLT
.L_439b06:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439b10:

            push R15
            push R14
            mov R8D,1
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov R14,RCX
            mov R12,RDI
            mov R15,RSI
            sub RSP,72
.L_439b30:

            movzx EBP,WORD PTR [RSI+60]
            movzx EBX,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            sub EBX,EBP
            mov EDX,EBP
            movzx EBX,BX
            mov ECX,EBX
            call .L_4393a0

            test AX,AX
            jne .L_439b80
.L_439b5b:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_439c77

            add RSP,72
.L_439b73:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_439b80:

            lea RCX,QWORD PTR [RSP+32]
            movzx EDX,AX
            mov RSI,R15
            mov RDI,R12
            mov QWORD PTR [RSP+8],RCX
            call .L_439470

            test EAX,EAX
            jne .L_439b5b

            mov R8D,2
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_4393a0

            test AX,AX
            jne .L_439b5b

            mov R8D,14
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_4393a0

            test AX,AX
            je .L_439b5b

            mov R8D,8
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_4393a0

            test AX,AX
            je .L_439c20

            lea RCX,QWORD PTR [RSP+16]
            movzx ESI,AX
            mov EDX,6
            mov RDI,R15
            call .L_403860

            cmp AX,6
            jne .L_439b5b

            cmp WORD PTR [RSP+18],512
            jne .L_439b5b

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439c20:

            mov R8D,3
            mov ECX,EBX
            mov EDX,EBP
            mov RSI,R15
            mov RDI,R12
            call .L_4393a0

            test AX,AX
            je .L_439b5b

            lea RBX,QWORD PTR [RSP+16]
            movzx EDX,AX
            mov RSI,R15
            mov RDI,R12
            mov RCX,RBX
            call .L_4395e0

            test EAX,EAX
            jne .L_439b5b

            mov RCX,QWORD PTR [RSP+8]
            mov R8,RBX
            mov RDX,R14
            mov RSI,R13
            mov RDI,R12
            call .L_439970

            jmp .L_439b5b
.L_439c77:

            call __stack_chk_fail@PLT
.L_439c7c:

            nop
            nop
            nop
            nop
.L_439c80:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            mov RBX,RSI
            mov RDI,RBX
            sub RSP,48
.L_439c91:

            movzx ESI,WORD PTR [RSI+60]
            lea RBP,QWORD PTR [RSP+12]
            movdqu XMM0,XMMWORD PTR [RDX+16]
            mov EDX,4
            mov RCX,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_403860

            cmp AX,4
            je .L_439ce0
.L_439cc7:

            mov RAX,QWORD PTR [RSP+40]
            xor RAX,QWORD PTR FS:[40]
            jne .L_439d0a

            add RSP,48
.L_439cdb:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_439ce0:

            mov ESI,4
            mov RDI,RBX
            call .L_4034e0

            cmp BYTE PTR [RSP+12],1
            jne .L_439cc7

            lea RCX,QWORD PTR [RBP+1]
            lea RDX,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,R12
            call .L_439b10

            jmp .L_439cc7
.L_439d0a:

            call __stack_chk_fail@PLT
.L_439d0f:

            nop
.L_439d10:

            jmp .L_439c80
.L_439d15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439d20:

            sub RSP,24
            mov RDI,RSI
            mov EDX,4
            lea RSI,QWORD PTR [RSP+4]
            mov DWORD PTR [RSP+4],3584
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403d30

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_439d63

            add RSP,24
            ret 
.L_439d63:

            call __stack_chk_fail@PLT
.L_439d68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439d70:

            push RBP
            push RBX
            lea RSI,QWORD PTR [RIP+.L_43aa60]
            pxor XMM0,XMM0
            mov RDX,RDI
            sub RSP,40
.L_439d84:

            mov RBX,RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov BYTE PTR [RSP+18],0
            movaps XMMWORD PTR [RSP],XMM0
            mov WORD PTR [RSP+16],AX
            call .L_4108e0

            test EAX,EAX
            jne .L_439dbe

            mov RBP,RSP
            mov RDI,RBX
            mov RSI,RBP
            call .L_410940
.L_439dbe:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_439dd5

            add RSP,40
.L_439dd2:

            pop RBX
            pop RBP
            ret 
.L_439dd5:

            call __stack_chk_fail@PLT
.L_439dda:

            nop
            nop
            nop
            nop
            nop
            nop
.L_439de0:

            push RBP
            push RBX
            mov RBP,RSI
            mov ESI,12
            sub RSP,8
            call .L_4108c0

            test RAX,RAX
            mov RBX,RAX
            je .L_439e15

            mov RSI,RBP
            mov RDI,RAX
            mov EDX,12
            call .L_403da0

            xor ESI,ESI
            mov RDI,RBX
            call .L_403550
.L_439e15:

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_439e1f:

            nop
.L_439e20:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_439e2b:

            mov RBX,RSI
            mov RBP,RDX
            call .L_401240

            movzx ESI,WORD PTR [RBX+58]
            mov RDI,RBX
            mov R13D,EAX
            call .L_404020

            test RAX,RAX
            mov RBX,RAX
            je .L_439e6b

            mov EDX,63
            mov RSI,RBP
            mov RDI,RAX
            call .L_403d30

            test EAX,EAX
            je .L_439e80

            mov RDI,RBX
            xor EBX,EBX
            call .L_4033b0
.L_439e6b:

            mov RAX,RBX
            pop RBX
.L_439e6f:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439e80:

            lea RDI,QWORD PTR [R12+80]
            mov EDX,1
            mov RSI,RBX
            lea R14,QWORD PTR [R12+88]
            call .L_404580

            cmp R14,QWORD PTR [R12+104]
            je .L_439ec8

            mov EDX,DWORD PTR [RBP+24]
            mov EAX,DWORD PTR [R12+96]
            sub EAX,EDX
            test EAX,EAX
            jle .L_439e6b

            sub EDX,R13D
            mov EBP,EDX
.L_439eb1:

            call .L_401240

            mov EDX,EBP
            mov ESI,EAX
            mov RDI,R14
            call .L_430d50

            jmp .L_439e6b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_439ec8:

            mov EBP,DWORD PTR [RBP+24]
            sub EBP,R13D
            jmp .L_439eb1
.L_439ed0:

            push R13
            push R12
            lea R12,QWORD PTR [RDI+80]
            push RBP
            push RBX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RSI
            lea R13,QWORD PTR [RBX+88]
            sub RSP,8
            call .L_404640

            cmp R13,QWORD PTR [RBX+104]
            je .L_439f03

            mov RDI,R12
            call .L_404570

            test RAX,RAX
            je .L_439f18
.L_439f03:

            add RSP,8
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_4033b0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_439f18:

            mov RDI,R13
            call .L_430c70

            jmp .L_439f03
.L_439f22:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439f30:

            jmp .L_410a20
.L_439f35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439f40:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RDI,RSI
            mov R12,RDX
            sub RSP,16
.L_439f51:

            movzx EAX,WORD PTR [RSI+58]
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_404020

            mov RBX,RAX
            mov EAX,3
            test RBX,RBX
            je .L_439f8f

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_410a20

            test EAX,EAX
            je .L_439f8f

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_439f8f:

            add RSP,16
.L_439f93:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_439f98:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_439fa0:

            push R15
            push R14
            xor R15D,R15D
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBP,RDX
            xor R12D,R12D
            xor EDX,EDX
            sub RSP,24
.L_439fbc:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov BYTE PTR [RSP+7],0
            lea R14,QWORD PTR [RSP+7]
            jmp .L_439fef
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_439fe0:

            test AL,AL
            je .L_439ffd

            add EDX,1
            mov BYTE PTR [RSP+7],DL
.L_439feb:

            add R15D,1
.L_439fef:

            movzx EBX,R15B
            add RBX,RBP
            movzx EAX,BYTE PTR [RBX]
            cmp AL,46
            jne .L_439fe0
.L_439ffd:

            test DL,DL
            je .L_43a048

            mov EDX,1
            mov RSI,R14
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_43a04d

            movzx EDX,BYTE PTR [RSP+7]
            movzx ESI,R12B
            mov RDI,R13
            add RSI,RBP
            call .L_403d30

            test EAX,EAX
            jne .L_43a04d

            movzx EAX,BYTE PTR [RSP+7]
            cmp BYTE PTR [RBX],0
            mov BYTE PTR [RSP+7],0
            lea R12D,DWORD PTR [R12+RAX*1+1]
            je .L_43a070

            xor EDX,EDX
            jmp .L_439feb
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a048:

            mov EAX,7
.L_43a04d:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43a082

            add RSP,24
.L_43a061:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43a070:

            mov EDX,1
            mov RSI,R14
            mov RDI,R13
            call .L_403d30

            jmp .L_43a04d
.L_43a082:

            call __stack_chk_fail@PLT
.L_43a087:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a090:

            push R14
            push R13
            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            mov RSI,RCX
            mov ECX,7
            sub RSP,112
.L_43a0aa:

            lea R12,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+20],0
            mov DWORD PTR [RSP+28],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov RDI,R12
            mov DWORD PTR [RSP+16],16784384

            rep stosq QWORD PTR [RDI]

            xor ECX,ECX
            cmp QWORD PTR [RBX],0
            mov QWORD PTR [RSP+40],RDX
            mov QWORD PTR [RSP+48],RSI
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],CX
            mov BYTE PTR [RDI+6],0
            je .L_43a1a0

            cmp QWORD PTR [RBX+8],0
            je .L_43a1a0

            movzx EAX,WORD PTR [RBP+72]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RSP+20],AX
            mov WORD PTR [RBP+72],DX
            cmp BYTE PTR [RBX+16],0
            je .L_43a190
.L_43a127:

            lea RSI,QWORD PTR [RSP+20]
            mov EAX,256
            mov RDI,RBP
            mov WORD PTR [RSP+24],AX
            call .L_439de0

            mov R13,RAX
            mov EAX,3
            test R13,R13
            je .L_43a16d

            mov RDX,QWORD PTR [RBX]
            mov RSI,R13
            mov RDI,RBP
            call .L_439fa0

            test EAX,EAX
            je .L_43a1b0
.L_43a15d:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_43a16d:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43a262

            add RSP,112
.L_43a185:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43a190:

            mov BYTE PTR [RSP+22],1
            jmp .L_43a127
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a1a0:

            mov EAX,7
            jmp .L_43a16d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a1b0:

            lea RSI,QWORD PTR [RSP+16]
            mov EDX,4
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_43a15d

            mov RAX,QWORD PTR [RBX]
            mov R14,QWORD PTR [RBX+8]
            mov QWORD PTR [RSP+32],RAX
            call .L_401240

            add EAX,3000
            mov RDX,R12
            mov RSI,R13
            mov DWORD PTR [RSP+56],EAX
            mov RDI,RBP
            movdqu XMM0,XMMWORD PTR [R14]
            movups XMMWORD PTR [RSP+60],XMM0
            movzx EAX,WORD PTR [R14+34]
            mov WORD PTR [RSP+92],AX
            movdqu XMM0,XMMWORD PTR [R14+16]
            mov BYTE PTR [RSP+94],0
            movups XMMWORD PTR [RSP+76],XMM0
            call .L_439e20

            test RAX,RAX
            mov RBX,RAX
            je .L_43a250

            mov RDX,R14
            mov RSI,R13
            mov RDI,RBP
            call .L_410a20

            test EAX,EAX
            je .L_43a16d

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov RSI,RBX
            mov RDI,RBP
            call .L_439ed0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_43a16d
.L_43a250:

            mov RDI,R13
            call .L_4033b0

            mov EAX,3
            jmp .L_43a16d
.L_43a262:

            call __stack_chk_fail@PLT
.L_43a267:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a270:

            push R15
            push R14
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            sub RSP,88
.L_43a281:

            movzx EDI,WORD PTR [RDX+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDX+60]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP+8],RDX
            mov ECX,EDI
            mov WORD PTR [RSP+30],DI
            lea EBX,DWORD PTR [RCX-75]
            sub BX,AX
            je .L_43a350

            lea EBP,DWORD PTR [RAX+12]
            lea R13,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+48]
            jmp .L_43a304
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a2c8:

            movzx ESI,WORD PTR [R12]
            mov RDI,QWORD PTR [RSP+16]
            movzx EDX,AX
            mov RCX,R14
            call .L_403860

            cmp R15W,AX
            jne .L_43a32b

            movzx EDX,R15W
            mov RSI,R13
            mov RDI,R14
            call memcmp@PLT

            test EAX,EAX
            jne .L_43a358

            add WORD PTR [R12],R15W
            add EBP,R15D
            sub BX,R15W
            je .L_43a350
.L_43a304:

            cmp BX,16
            mov EDX,16
            mov RDI,QWORD PTR [RSP+8]
            cmovbe EDX,EBX
            movzx ESI,BP
            mov RCX,R13
            movzx EDX,DX
            call .L_403860

            test AX,AX
            mov R15D,EAX
            jne .L_43a2c8
.L_43a32b:

            mov EAX,6
.L_43a330:

            mov RDI,QWORD PTR [RSP+72]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43a35f

            add RSP,88
.L_43a344:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_43a350:

            xor EAX,EAX
            jmp .L_43a330
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43a358:

            mov EAX,23
            jmp .L_43a330
.L_43a35f:

            call __stack_chk_fail@PLT
.L_43a364:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a370:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,32
.L_43a37c:

            movzx EBX,WORD PTR [RDX]
            movzx EBP,WORD PTR [RSI+58]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            sub BP,BX
            je .L_43a400

            mov R14,RSI
            mov R13,RDX
            mov R12,RSP
.L_43a3a1:

            movzx ESI,BX
            mov RCX,R12
            mov EDX,16
            mov RDI,R14
            call .L_403860

            test AX,AX
            je .L_43a400

            movzx EDX,BYTE PTR [RSP]
            test DL,DL
            je .L_43a410

            and EDX,4294967232
            cmp DL,192
            je .L_43a440

            lea RCX,QWORD PTR [R12+1]
            lea ESI,DWORD PTR [RAX+RBX*1]
            jmp .L_43a3eb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43a3d8:

            movzx EDX,BYTE PTR [RCX]
            test DL,DL
            je .L_43a410

            and EDX,4294967232
            add RCX,1
            cmp DL,192
            je .L_43a440
.L_43a3eb:

            add EBX,1
            cmp SI,BX
            jne .L_43a3d8

            sub BP,AX
            jne .L_43a3a1

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a400:

            mov EAX,6
            jmp .L_43a41a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a410:

            add EBX,1
            xor EAX,EAX
            mov WORD PTR [R13],BX
.L_43a41a:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43a44c

            add RSP,32
.L_43a42e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a440:

            add EBX,2
            xor EAX,EAX
            mov WORD PTR [R13],BX
            jmp .L_43a41a
.L_43a44c:

            call __stack_chk_fail@PLT
.L_43a451:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a460:

            push R13
            push R12
            add RDI,80
            push RBP
            push RBX
            mov RBP,RSI
            mov R13,RDX
            sub RSP,24
.L_43a474:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_404570

            test RAX,RAX
            je .L_43a4f8

            mov RBX,RAX
            lea R12,QWORD PTR [RSP+6]
            jmp .L_43a4b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a4a0:

            mov RDI,RBX
            call .L_4033c0

            test RAX,RAX
            mov RBX,RAX
            je .L_43a4f8
.L_43a4b0:

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,R12
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            cmp AX,2
            jne .L_43a518

            movzx EAX,WORD PTR [RBP]
            cmp WORD PTR [RSP+6],AX
            jne .L_43a4a0

            movzx EAX,WORD PTR [RBX+58]
            mov RCX,R13
            mov EDX,63
            mov RDI,RBX
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_403860

            jmp .L_43a4fa
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a4f8:

            xor EBX,EBX
.L_43a4fa:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            mov RAX,RBX
            jne .L_43a537

            add RSP,24
.L_43a511:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43a518:

            lea RCX,QWORD PTR [RIP+.L_45aa80]
            lea RSI,QWORD PTR [RIP+.L_45aa52]
            lea RDI,QWORD PTR [RIP+.L_45aa65]
            mov EDX,353
            call __assert_fail@PLT
.L_43a537:

            call __stack_chk_fail@PLT
.L_43a53c:

            nop
            nop
            nop
            nop
.L_43a540:

            push R13
            push R12
            mov R13D,R9D
            push RBP
            push RBX
            mov RBX,RDX
            mov RBP,RCX
            mov R12D,R8D
            sub RSP,8
            call .L_439ed0

            mov RAX,QWORD PTR [RBX+8]
            test RAX,RAX
            je .L_43a580

            mov RDI,QWORD PTR [RBX+16]
            mov RSI,QWORD PTR [RBX]
            add RSP,8
            pop RBX
            mov R8D,R13D
            mov ECX,R12D
            mov RDX,RBP
            pop RBP
            pop R12
            pop R13
            jmp RAX
.L_43a580:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43a58b:

            nop
            nop
            nop
            nop
            nop
.L_43a590:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            add RDI,80
            sub RSP,88
.L_43a5a1:

            mov RBP,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_404570

            mov ECX,7
            mov RBX,RAX
            mov RDI,RBP
            xor EAX,EAX

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            test RBX,RBX
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            je .L_43a626

            nop
            nop
.L_43a5e0:

            mov RDI,RBX
            call .L_4033c0

            mov R12,RAX
            movzx EAX,WORD PTR [RBX+58]
            mov RDI,RBX
            mov RCX,RBP
            mov EDX,63
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_403860

            xor R8D,R8D
            xor ECX,ECX
            mov RSI,RBX
            mov R9D,11
            mov RDX,RBP
            mov RDI,R13
            call .L_43a540

            test R12,R12
            mov RBX,R12
            jne .L_43a5e0
.L_43a626:

            mov RDI,R13
            call .L_4109a0

            mov RDX,QWORD PTR [RSP+72]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43a649

            add RSP,88
.L_43a642:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43a649:

            call __stack_chk_fail@PLT
.L_43a64e:

            nop
            nop
.L_43a650:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            push RBP
            push RBX
            mov EBX,4294967295
            sub RSP,152
.L_43a669:

            lea RBP,QWORD PTR [RSP+64]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_401240

            mov ECX,7
            mov R13D,EAX
            mov RDI,RBP
            xor EAX,EAX

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            lea RDI,QWORD PTR [R14+80]
            call .L_404570

            pxor XMM0,XMM0
            mov R15,RAX
            lea RAX,QWORD PTR [RSP+16]
            test R15,R15
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            jne .L_43a70e

            jmp .L_43a764
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a6e0:

            movzx EAX,BYTE PTR [RSP+126]
            cmp AL,1
            jbe .L_43a790

            mov R9D,28
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R15
            mov RDI,R14
            call .L_43a540
.L_43a706:

            test R12,R12
            mov R15,R12
            je .L_43a74d
.L_43a70e:

            mov RDI,R15
            call .L_4033c0

            mov R12,RAX
            movzx EAX,WORD PTR [R15+58]
            mov RCX,RBP
            mov EDX,63
            mov RDI,R15
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_403860

            mov EAX,DWORD PTR [RSP+88]
            cmp R13D,EAX
            jns .L_43a6e0

            sub EAX,R13D
            mov R15,R12
            cmp EBX,EAX
            cmova EBX,EAX
            test R12,R12
            jne .L_43a70e
.L_43a74d:

            cmp EBX,-1
            je .L_43a764

            call .L_401240

            lea RDI,QWORD PTR [R14+88]
            mov EDX,EBX
            mov ESI,EAX
            call .L_430d50
.L_43a764:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43a7fe

            add RSP,152
.L_43a782:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43a790:

            add EAX,1
            mov RDI,R15
            mov RCX,RBP
            mov BYTE PTR [RSP+126],AL
            lea EAX,DWORD PTR [R13+3000]
            mov EDX,63
            mov DWORD PTR [RSP+88],EAX
            movzx EAX,WORD PTR [R15+58]
            lea ESI,DWORD PTR [RAX-63]
            movzx ESI,SI
            call .L_403ac0

            mov EAX,DWORD PTR [RSP+88]
            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R15
            movdqu XMM0,XMMWORD PTR [RSP+108]
            mov RDI,R14
            sub EAX,R13D
            cmp EBX,EAX
            cmova EBX,EAX
            movzx EAX,WORD PTR [RSP+124]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSP+92]
            mov WORD PTR [RSP+50],AX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_439f40

            jmp .L_43a706
.L_43a7fe:

            call __stack_chk_fail@PLT
.L_43a803:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43a810:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402b60

            add RSP,8
            mov RDI,RAX
            jmp .L_43a650
.L_43a82d:

            nop
            nop
            nop
.L_43a830:

            push R15
            push R14
            mov ECX,7
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov EDX,12
            sub RSP,152
.L_43a851:

            movzx ESI,WORD PTR [RSI+60]
            lea RBX,QWORD PTR [RSP+64]
            lea R12,QWORD PTR [RSP+20]
            mov QWORD PTR [RSP+20],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov DWORD PTR [RSP+28],0

            rep stosq QWORD PTR [RDI]

            xor EAX,EAX
            mov RCX,R12
            mov DWORD PTR [RDI],0
            mov WORD PTR [RDI+4],AX
            mov BYTE PTR [RDI+6],0
            mov RDI,RBP
            call .L_403860

            cmp AX,12
            je .L_43a8d8
.L_43a8aa:

            mov RAX,QWORD PTR [RSP+136]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43aa3a

            add RSP,152
.L_43a8c8:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43a8d8:

            movzx EAX,BYTE PTR [RSP+22]
            test AL,AL
            jns .L_43a8aa

            cmp WORD PTR [RSP+24],256
            jne .L_43a8aa

            test AL,2
            jne .L_43a8aa

            mov ESI,12
            mov RDI,RBP
            call .L_4034e0

            movzx EAX,WORD PTR [RBP+60]
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            mov WORD PTR [RSP+18],AX
            call .L_43a460

            test RAX,RAX
            mov R15,RAX
            je .L_43a8aa

            test BYTE PTR [RSP+23],15
            mov R9D,1
            je .L_43a93f
.L_43a927:

            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            call .L_43a540

            jmp .L_43a8aa
.L_43a93f:

            lea R14,QWORD PTR [RSP+18]
            mov RDX,RAX
            mov RSI,RBP
            mov RDI,R13
            mov RCX,R14
            call .L_43a270

            test EAX,EAX
            mov R9D,EAX
            jne .L_43a927

            xor R12D,R12D
            cmp WORD PTR [RSP+26],0
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+8],RAX
            jne .L_43a9b0

            jmp .L_43aa4a
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43a980:

            movzx EAX,WORD PTR [RSP+40]
            movzx EDX,WORD PTR [RSP+18]
            add R12D,1
            rol AX,8
            lea EAX,DWORD PTR [RAX+RDX*1+10]
            mov WORD PTR [RSP+18],AX
            movzx EAX,WORD PTR [RSP+26]
            rol AX,8
            movzx EAX,AX
            cmp EAX,R12D
            jbe .L_43aa4a
.L_43a9b0:

            mov RDX,R14
            mov RSI,RBP
            mov RDI,R13
            call .L_43a370

            test EAX,EAX
            mov R9D,EAX
            jne .L_43a927

            movzx EDX,WORD PTR [RSP+18]
            movzx ECX,WORD PTR [RBP+58]
            mov RAX,RDX
            add RDX,10
            cmp RDX,RCX
            ja .L_43aa3f

            mov RCX,QWORD PTR [RSP+8]
            movzx ESI,AX
            mov EDX,26
            mov RDI,RBP
            call .L_403860

            cmp AX,26
            jne .L_43a980

            cmp WORD PTR [RSP+32],7168
            jne .L_43a980

            cmp WORD PTR [RSP+34],256
            jne .L_43a980

            mov RCX,QWORD PTR [RSP+8]
            mov R8D,DWORD PTR [RSP+36]
            xor R9D,R9D
            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            add RCX,10
            bswap R8D
            call .L_43a540

            jmp .L_43a8aa
.L_43aa3a:

            call __stack_chk_fail@PLT
.L_43aa3f:

            mov R9D,6
            jmp .L_43a927
.L_43aa4a:

            mov R9D,23
            jmp .L_43a927
.L_43aa55:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aa60:

            jmp .L_43a830
.L_43aa65:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aa70:

            mov EAX,1
            mov QWORD PTR [RDI],0
            mov BYTE PTR [RDI+10],1
            mov WORD PTR [RDI+8],AX
            ret 
.L_43aa85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aa90:

            push RBX
            mov EBX,ESI
            call .L_430ad0

            lea ESI,DWORD PTR [RBX+8]
            mov RDI,RAX
            pop RBX
            movzx ESI,SI
            jmp .L_40d1e0
.L_43aaa7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aab0:

            mov RDX,QWORD PTR [RDI]
            test RDX,RDX
            je .L_43aad6

            cmp RDX,RSI
            je .L_43aae0

            mov RAX,RDX
            jmp .L_43aacd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43aac8:

            cmp RSI,RAX
            je .L_43aae0
.L_43aacd:

            mov RAX,QWORD PTR [RAX+16]
            test RAX,RAX
            jne .L_43aac8
.L_43aad6:

            mov QWORD PTR [RSI+16],RDX
            xor EAX,EAX
            mov QWORD PTR [RDI],RSI
            ret 
.L_43aae0:

            mov EAX,24
            ret 
.L_43aae6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43aaf0:

            push RBP
            push RBX
            mov RBX,RSI
            rol CX,8
            mov RBP,RDI
            sub RSP,88
.L_43ab00:

            movdqu XMM0,XMMWORD PTR [RDX]
            lea RSI,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RDI+8]
            mov DWORD PTR [RSP+8],128
            movaps XMMWORD PTR [RSP+16],XMM0
            mov WORD PTR [RSP+12],CX
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            lea EDX,DWORD PTR [RAX+1]
            rol AX,8
            mov WORD PTR [RDI+8],DX
            mov EDX,8
            mov RDI,RBX
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+14],AX
            call .L_403da0

            test EAX,EAX
            jne .L_43ab8b

            xor ESI,ESI
            mov RDI,RBX
            call .L_403550

            mov RDI,RBP
            call .L_430ad0

            lea RDX,QWORD PTR [RSP+16]
            mov ECX,58
            mov RSI,RBX
            mov RDI,RAX
            call .L_40e0d0
.L_43ab8b:

            mov RBX,QWORD PTR [RSP+72]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43aba2

            add RSP,88
.L_43ab9f:

            pop RBX
            pop RBP
            ret 
.L_43aba2:

            call __stack_chk_fail@PLT
.L_43aba7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43abb0:

            push R14
            push R13
            mov R13,R8
            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov EBP,EDX
            mov RBX,RDI
            sub RSP,96
.L_43abc7:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+16]
            movaps XMMWORD PTR [RSP+48],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_430ad0

            xor ESI,ESI
            mov RDI,RAX
            call .L_40d1e0

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_43ac31

            mov ESI,48
            mov RDI,R14
            call .L_403420

            test EAX,EAX
            je .L_43ac50
.L_43ac21:

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_43ac31:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43acbc

            add RSP,96
.L_43ac45:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43ac50:

            mov RCX,R13
            mov EDX,40
            mov ESI,8
            mov RDI,R14
            call .L_403ac0

            lea RCX,QWORD PTR [RSP+24]
            xor ESI,ESI
            xor EAX,EAX
            mov EDX,8
            mov RDI,R14
            mov WORD PTR [RSP+26],AX
            mov DWORD PTR [RSP+28],0
            mov BYTE PTR [RSP+24],R12B
            mov BYTE PTR [RSP+25],BPL
            call .L_403ac0

            mov RDI,RBX
            call .L_430ad0

            lea RDX,QWORD PTR [RSP+32]
            mov ECX,58
            mov RSI,R14
            mov RDI,RAX
            call .L_40e0d0

            test EAX,EAX
            je .L_43ac31

            jmp .L_43ac21
.L_43acbc:

            call __stack_chk_fail@PLT
.L_43acc1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43acd0:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RDX
            push R12
            push RBP
            mov R13,RDI
            push RBX
            mov R12,RSI
            xor R15D,R15D
            sub RSP,104
.L_43acee:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov QWORD PTR [RSP+24],129
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_430ad0

            xor ESI,ESI
            mov RDI,RAX
            call .L_40d1e0

            test RAX,RAX
            je .L_43ad53

            movzx EBP,WORD PTR [R12+58]
            mov RDI,RAX
            mov RBX,RAX
            sub BP,WORD PTR [R12+60]
            movzx ESI,BP
            call .L_403420

            test EAX,EAX
            mov R15D,EAX
            je .L_43ad80
.L_43ad4b:

            mov RDI,RBX
            call .L_4033b0
.L_43ad53:

            mov RCX,QWORD PTR [RSP+88]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_43ae2b

            add RSP,104
.L_43ad6e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ad80:

            lea RAX,QWORD PTR [RSP+24]
            xor ESI,ESI
            mov EDX,4
            mov RDI,RBX
            mov RCX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_403ac0

            movzx EAX,WORD PTR [R12+60]
            lea ECX,DWORD PTR [RBP-4]
            mov R8,RBX
            mov EDX,4
            mov RDI,R12
            movzx ECX,CX
            lea ESI,DWORD PTR [RAX+4]
            movzx ESI,SI
            call .L_403f50

            movdqu XMM0,XMMWORD PTR [R14+16]
            mov RDI,R14
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_40ee50

            test AL,AL
            jne .L_43addf

            movdqu XMM0,XMMWORD PTR [R14]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_43addf:

            movzx EAX,BYTE PTR [R14+36]
            mov RDI,R13
            mov BYTE PTR [RSP+68],AL
            call .L_430ad0

            lea RDX,QWORD PTR [RSP+32]
            mov ECX,58
            mov RSI,RBX
            mov RDI,RAX
            call .L_40e0d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_43ad4b

            movzx ESI,WORD PTR [RBX+60]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,8
            mov RDI,RBX
            call .L_403860

            jmp .L_43ad53
.L_43ae2b:

            call __stack_chk_fail@PLT
.L_43ae30:

            push R14
            push R13
            mov R14,RDI
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov R13,RDX
            mov RDI,RBP
            mov EDX,8
            sub RSP,16
.L_43ae4d:

            movzx ESI,WORD PTR [RSI+60]
            mov R12,RSP
            mov RCX,R12
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403860

            cmp AX,8
            je .L_43aea0
.L_43ae72:

            mov EAX,6
.L_43ae77:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43af30

            add RSP,16
.L_43ae8f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43aea0:

            movzx EBX,WORD PTR [RBP+58]
            lea RDI,QWORD PTR [R13+16]
            mov ECX,58
            sub BX,WORD PTR [RBP+60]
            mov RSI,R13
            movzx EBX,BX
            mov EDX,EBX
            call .L_40d210

            movzx EDX,WORD PTR [RBP+60]
            movzx ESI,AX
            mov ECX,EBX
            mov RDI,RBP
            call .L_404270

            cmp AX,-1
            jne .L_43ae72

            cmp BYTE PTR [R14+10],0
            je .L_43aee2

            cmp BYTE PTR [RSP],128
            je .L_43af20
.L_43aee2:

            mov ESI,8
            mov RDI,RBP
            call .L_4034e0

            mov RBX,QWORD PTR [R14]
            test RBX,RBX
            je .L_43af18

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43af00:

            mov RDI,QWORD PTR [RBX+8]
            mov RCX,R12
            mov RDX,R13
            mov RSI,RBP
            call QWORD PTR [RBX]

            mov RBX,QWORD PTR [RBX+16]
            test RBX,RBX
            jne .L_43af00
.L_43af18:

            xor EAX,EAX
            jmp .L_43ae77
          .byte 0x90
.L_43af20:

            mov RDX,R13
            mov RSI,RBP
            mov RDI,R14
            call .L_43acd0

            jmp .L_43aee2
.L_43af30:

            call __stack_chk_fail@PLT
.L_43af35:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43af40:

            push RBX
            mov RBX,RSI
            mov ESI,EDX
            mov RDI,RBX
            movzx ESI,SI
            sub RSP,16
.L_43af50:

            movzx ECX,WORD PTR [RBX+58]
            mov WORD PTR [RSP+12],DX
            movzx EDX,WORD PTR [RBX+60]
            sub ECX,EDX
            movzx ECX,CX
            call .L_404270

            mov EDX,EAX
            cmp AX,-1
            lea RCX,QWORD PTR [RSP+12]
            not EDX
            mov RDI,RBX
            cmovne EAX,EDX
            mov EDX,2
            rol AX,8
            mov WORD PTR [RSP+12],AX
            movzx EAX,WORD PTR [RBX+60]
            lea ESI,DWORD PTR [RAX+2]
            movzx ESI,SI
            call .L_403ac0

            add RSP,16
.L_43af9b:

            xor EAX,EAX
            pop RBX
            ret 
.L_43af9f:

            nop
.L_43afa0:

            lea RAX,QWORD PTR [RIP+.L_43b2b0]
            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            mov DWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RDI+8]
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_45aae0]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_43b210]
            mov QWORD PTR [RDI+40],RAX
            mov QWORD PTR [RBX+48],RDI
            mov QWORD PTR [RDI+56],0
            call .L_430af0

            lea RSI,QWORD PTR [RBX+32]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_43affd:

            nop
            nop
            nop
.L_43b000:

            push RBP
            push RBX
            mov EBP,ECX
            mov R8D,1
            sub RSP,8
.L_43b00e:

            mov WORD PTR [RDI+4],CX
            mov DWORD PTR [RDI],ESI
            mov BYTE PTR [RDI+6],DL
            mov BYTE PTR [RDI+7],11
            mov ECX,11
            jmp .L_43b036
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b028:

            lea EAX,DWORD PTR [RCX+1]
            add ECX,1
            cmp ECX,27
            mov BYTE PTR [RDI+7],AL
            je .L_43b060
.L_43b036:

            mov EAX,R8D
            shl EAX,CL
            test EAX,ESI
            je .L_43b028

            mov RBX,RDI
            call .L_401240

            lea RDI,QWORD PTR [RBX+8]
            movzx EDX,BP
            mov ESI,EAX
            call .L_430d50

            add RSP,8
.L_43b059:

            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_43b060:

            add RSP,8
            mov EAX,7
            pop RBX
            pop RBP
            ret 
.L_43b06c:

            nop
            nop
            nop
            nop
.L_43b070:

            mov ECX,1000
            mov EDX,3
            jmp .L_43b000
.L_43b07c:

            nop
            nop
            nop
            nop
.L_43b080:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            xor R9D,R9D
            push RBX
            sub RSP,80
.L_43b092:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+1],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+8],AX
            mov WORD PTR [RSP+4],R9W
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_43b100
.L_43b0d8:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43b200

            add RSP,80
.L_43b0f0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b100:

            lea R14,QWORD PTR [RSP+8]
            mov R12,RDX
            mov R13,RDI
            mov RBP,RSI
            mov RBX,RCX
            mov EDX,8
            mov RCX,R14
            mov ESI,53
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b0d8

            cmp BYTE PTR [RSP+9],6
            jne .L_43b0d8

            cmp BYTE PTR [RSP+10],0
            jne .L_43b0d8

            cmp BYTE PTR [RSP+11],4
            jne .L_43b0d8

            lea RCX,QWORD PTR [RSP+1]
            mov EDX,3
            mov ESI,54
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b0d8

            cmp BYTE PTR [RSP+2],1
            jne .L_43b0d8

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,55
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b0d8

            cmp BYTE PTR [RSP+5],2
            jne .L_43b0d8

            mov RDI,R14
            call .L_437d30

            movzx ECX,WORD PTR [RSP+6]
            movzx EDX,BYTE PTR [RSP+3]
            mov ESI,EAX
            mov RDI,R13
            rol CX,8
            movzx ECX,CX
            call .L_43b000

            test BYTE PTR [RBP],48
            jne .L_43b0d8

            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            jne .L_43b0d8

            mov RDI,R13
            call .L_430af0

            test BYTE PTR [RBP],48
            lea RDI,QWORD PTR [RAX+216]
            jne .L_43b0d8

            lea RCX,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov ESI,68
            call .L_42e970

            jmp .L_43b0d8
.L_43b200:

            call __stack_chk_fail@PLT
.L_43b205:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b210:

            jmp .L_43b080
.L_43b215:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b220:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
.L_43b229:

            call .L_430af0

            movzx ESI,BYTE PTR [RBX+7]
            lea RDI,QWORD PTR [RAX+2568]
            lea EDX,DWORD PTR [RSI+1]
            mov BYTE PTR [RBX+7],DL
            xor EDX,EDX
            call .L_417080

            movzx EDX,BYTE PTR [RBX+6]
            mov ESI,1
            jmp .L_43b26f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b258:

            movzx ECX,BYTE PTR [RBX+7]
            mov EAX,ESI
            shl EAX,CL
            test DWORD PTR [RBX],EAX
            jne .L_43b280

            add ECX,1
            cmp CL,26
            mov BYTE PTR [RBX+7],CL
            ja .L_43b2a0
.L_43b26f:

            test DL,DL
            jne .L_43b258

            add RSP,8
.L_43b277:

            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b280:

            movzx EBP,WORD PTR [RBX+4]
            call .L_401240

            add RSP,8
            lea RDI,QWORD PTR [RBX+8]
            mov ESI,EAX
            pop RBX
            mov EDX,EBP
            pop RBP
            jmp .L_430d50
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43b2a0:

            sub EDX,1
            mov BYTE PTR [RBX+7],11
            mov BYTE PTR [RBX+6],DL
            jmp .L_43b26f
.L_43b2ac:

            nop
            nop
            nop
            nop
.L_43b2b0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402aa0

            add RSP,8
            mov RDI,RAX
            jmp .L_43b220
.L_43b2cd:

            nop
            nop
            nop
.L_43b2d0:

            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+7520]
            call .L_426c30

            test RAX,RAX
            je .L_43b2f0

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43b2f0:

            mov BYTE PTR [RBX+29],0
            lea RDI,QWORD PTR [RBX+96]
            pop RBX
            jmp .L_430c70
.L_43b2fe:

            nop
            nop
.L_43b300:

            push RBX
            mov EBX,ESI
            call .L_402840

            mov RDI,RAX
            call .L_402ac0

            and BH,2
            je .L_43b31b

            cmp BYTE PTR [RAX+29],0
            je .L_43b320
.L_43b31b:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43b320:

            pop RBX
            mov RDI,RAX
            jmp .L_43b2d0
.L_43b326:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b330:

            lea RAX,QWORD PTR [RIP+.L_43b8f0]
            push R12
            lea R12,QWORD PTR [RDI+120]
            push RBP
            push RBX
.L_43b33f:

            mov RBP,RSI
            mov QWORD PTR [RDI+96],RAX
            lea RAX,QWORD PTR [RDI+96]
            lea RSI,QWORD PTR [RIP+.L_43b300]
            mov RBX,RDI
            mov RDX,RDI
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+112],RAX
            mov DWORD PTR [RDI+24],0
            mov BYTE PTR [RDI+28],0
            mov BYTE PTR [RDI+29],0
            mov BYTE PTR [RDI+94],0
            mov DWORD PTR [RDI+104],0
            mov RDI,R12
            call .L_402bf0

            lea RAX,QWORD PTR [RIP+.L_45a8fd]
            lea RDI,QWORD PTR [RBP+32]
            mov RSI,R12
            mov QWORD PTR [RBX+152],RBX
            mov QWORD PTR [RBX+160],0
            mov QWORD PTR [RBX+136],RAX
            lea RAX,QWORD PTR [RIP+.L_43b5e0]
            mov QWORD PTR [RBX+144],RAX
            call .L_402c40

            mov RDI,RBX
            call .L_430af0

            lea RSI,QWORD PTR [RBX+136]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX
.L_43b3d6:

            pop RBP
            pop R12
            jmp .L_42d6f0
.L_43b3de:

            nop
            nop
.L_43b3e0:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            xor R9D,R9D
            push RBX
            xor R10D,R10D
            sub RSP,96
.L_43b3f5:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+16],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+13],AX
            mov WORD PTR [RSP+20],R9W
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+24],R10W
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+64],XMM0
            je .L_43b468
.L_43b441:

            mov RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43b5cd

            add RSP,96
.L_43b459:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b468:

            mov R12,RDX
            mov RBX,RCX
            lea RCX,QWORD PTR [RSP+13]
            mov R13,RDI
            mov RBP,RSI
            mov EDX,3
            mov ESI,54
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b441

            cmp BYTE PTR [RSP+14],1
            jne .L_43b441

            lea RCX,QWORD PTR [RSP+16]
            mov EDX,4
            mov ESI,55
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b441

            cmp BYTE PTR [RSP+17],2
            jne .L_43b441

            lea RCX,QWORD PTR [RSP+20]
            mov EDX,4
            mov ESI,56
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43b441

            cmp BYTE PTR [RSP+21],2
            jne .L_43b441

            lea R14,QWORD PTR [RSP+24]
            mov EDX,8
            mov ESI,53
            mov RDI,R12
            mov RCX,R14
            call .L_430f70

            test EAX,EAX
            jne .L_43b441

            cmp BYTE PTR [RSP+25],6
            jne .L_43b441

            cmp BYTE PTR [RSP+26],0
            jne .L_43b441

            cmp BYTE PTR [RSP+27],4
            jne .L_43b441

            mov RDI,R14
            call .L_437d30

            mov DWORD PTR [R13+16],EAX
            mov DWORD PTR [R13+20],EAX
            movzx EAX,BYTE PTR [RSP+15]
            mov BYTE PTR [R13+94],0
            mov BYTE PTR [R13+29],1
            mov BYTE PTR [R13+28],AL
            movzx EAX,WORD PTR [RSP+18]
            rol AX,8
            mov WORD PTR [R13+24],AX
            movzx EAX,WORD PTR [RSP+22]
            rol AX,8
            mov WORD PTR [R13+26],AX
            call .L_401240

            lea RDI,QWORD PTR [R13+96]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [R13],XMM0
            test BYTE PTR [RBP],48
            jne .L_43b441

            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            jne .L_43b441

            mov RDI,R13
            call .L_430af0

            test BYTE PTR [RBP],48
            lea RDI,QWORD PTR [RAX+216]
            jne .L_43b441

            lea RCX,QWORD PTR [RSP+32]
            mov RDX,RBP
            mov ESI,68
            call .L_42e970

            jmp .L_43b441
.L_43b5cd:

            call __stack_chk_fail@PLT
.L_43b5d2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b5e0:

            jmp .L_43b3e0
.L_43b5e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b5f0:

            cmp BYTE PTR [RDI+29],0
            je .L_43b610

            test RSI,RSI
            je .L_43b618

            movzx EAX,BYTE PTR [RDI+94]
            lea EDX,DWORD PTR [RAX+1]
            mov BYTE PTR [RDI+94],DL
            movzx EDX,BYTE PTR [RSI+1]
            mov BYTE PTR [RDI+RAX*1+30],DL
            ret 
          .byte 0x66
          .byte 0x90
.L_43b610:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b618:

            push RBP
            push RBX
            sub RSP,8
            mov EDX,DWORD PTR [RDI+20]
            lea EAX,DWORD PTR [RDX-1]
            and EAX,EDX
            movzx EDX,BYTE PTR [RDI+28]
            test EAX,EAX
            mov DWORD PTR [RDI+20],EAX
            jne .L_43b63d

            mov EAX,DWORD PTR [RDI+16]
            sub EDX,1
            mov BYTE PTR [RDI+28],DL
            mov DWORD PTR [RDI+20],EAX
.L_43b63d:

            test DL,DL
            lea RBX,QWORD PTR [RDI+96]
            jne .L_43b660

            call .L_401240

            mov EDX,500
.L_43b64f:

            add RSP,8
            mov RDI,RBX
            mov ESI,EAX
            pop RBX
            pop RBP
            jmp .L_430d50
          .byte 0x90
.L_43b660:

            movzx EBP,WORD PTR [RDI+24]
            call .L_401240

            mov EDX,EBP
            jmp .L_43b64f
.L_43b66d:

            nop
            nop
            nop
.L_43b670:

            jmp .L_43b5f0
.L_43b675:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b680:

            push R12
            push RBP
            xor EDX,EDX
            push RBX
            pxor XMM0,XMM0
            xor ECX,ECX
            xor ESI,ESI
            mov RBX,RDI
            sub RSP,240
.L_43b698:

            lea R12,QWORD PTR [RSP+80]
            mov WORD PTR [RSP+24],DX
            mov EDX,2
            mov WORD PTR [RSP+22],CX
            mov RDI,R12
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov RDI,R12
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45a8f8]
            mov RDI,R12
            call .L_42f620

            mov RDI,R12
            call .L_42f8d0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            xor EDX,EDX
            mov RSI,R12
            call .L_42d7b0

            mov R12,RAX
            mov EAX,3
            test R12,R12
            je .L_43b7bc

            mov EDX,DWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,R12
            mov DWORD PTR [RSP+24],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+28],EAX
            call .L_403d30

            test EAX,EAX
            je .L_43b7e8
.L_43b7ac:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_43b7bc:

            mov BYTE PTR [RBX+29],0
            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43b880

            add RSP,240
.L_43b7de:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b7e8:

            movzx EAX,BYTE PTR [RBX+94]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,R12
            mov BYTE PTR [RSP+22],57
            mov BYTE PTR [RSP+23],AL
            call .L_403d30

            test EAX,EAX
            jne .L_43b7ac

            movzx EDX,BYTE PTR [RBX+94]
            lea RSI,QWORD PTR [RBX+30]
            mov RDI,R12
            call .L_403d30

            test EAX,EAX
            jne .L_43b7ac

            mov RDI,RBX
            lea RBP,QWORD PTR [RSP+32]
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            mov EAX,4294963391
            movaps XMMWORD PTR [RSP+32],XMM0
            mov WORD PTR [RSP+66],AX
            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            xor R8D,R8D
            xor ECX,ECX
            mov RDX,RBP
            mov RSI,R12
            call .L_42e6e0

            test EAX,EAX
            je .L_43b7bc

            jmp .L_43b7ac
.L_43b880:

            call __stack_chk_fail@PLT
.L_43b885:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b890:

            cmp BYTE PTR [RDI+29],0
            je .L_43b8e8

            cmp BYTE PTR [RDI+28],0
            jne .L_43b8a8

            jmp .L_43b680
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b8a8:

            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,8
            mov ESI,DWORD PTR [RDI+20]
            mov EBP,ESI
            neg EBP
            and EBP,ESI
            call .L_430af0

            movzx EDX,WORD PTR [RBX+26]
            add RSP,8
            mov R8,RBX
            mov ESI,EBP
            lea RDI,QWORD PTR [RAX+1560]
            lea RCX,QWORD PTR [RIP+.L_43b670]
            pop RBX
            pop RBP
            jmp .L_405d20
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b8e8:

            ret 
.L_43b8ea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43b8f0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402ac0

            add RSP,8
            mov RDI,RAX
            jmp .L_43b890
.L_43b90a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43b910:

            and ESI,512
            je .L_43b91e

            cmp BYTE PTR [RDI+29],0
            je .L_43b920
.L_43b91e:

            ret 
.L_43b920:

            jmp .L_43b2d0
.L_43b925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b930:

            lea RDX,QWORD PTR [RIP+.L_45aae8]
            and EDI,14
            movsxd RAX,DWORD PTR [RDX+RDI*4]
            add RAX,RDX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43b948:

            mov DWORD PTR [RSI],41
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b958:

            mov DWORD PTR [RSI],0
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b968:

            mov DWORD PTR [RSI],43
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b978:

            mov DWORD PTR [RSI],44
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b988:

            mov DWORD PTR [RSI],60
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43b998:

            mov EAX,6
            ret 
.L_43b99e:

            nop
            nop
.L_43b9a0:

            ret 
.L_43b9a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b9b0:

            movzx EAX,BYTE PTR [RDI+8]
            mov RDX,QWORD PTR [RDI]
            shr AL,3
            movzx EAX,AL
            cmp EAX,8
            jae .L_43ba38

            test AL,4
            jne .L_43ba89

            test EAX,EAX
            je .L_43b9db

            movzx ECX,BYTE PTR [RDX]
            test AL,2
            mov BYTE PTR [RSI],CL
            jne .L_43ba9c
.L_43b9db:

            movzx EAX,BYTE PTR [RDI+8]
            mov R8D,EAX
            and R8D,4294967288
            cmp EAX,R8D
            jle .L_43ba2e

            mov R10D,128
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43b9f8:

            mov ECX,R8D
            mov EAX,R8D
            mov EDX,R10D
            and ECX,7
            sar EAX,3
            add R8D,1
            sar EDX,CL
            cdqe 
            mov ECX,EDX
            not ECX
            and CL,BYTE PTR [RSI+RAX*1]
            mov BYTE PTR [RSI+RAX*1],CL
            mov R9,QWORD PTR [RDI]
            and DL,BYTE PTR [R9+RAX*1]
            or EDX,ECX
            mov BYTE PTR [RSI+RAX*1],DL
            movzx EAX,BYTE PTR [RDI+8]
            cmp EAX,R8D
            jg .L_43b9f8
.L_43ba2e:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ba38:

            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RSI],RCX
            mov ECX,EAX
            mov R8,QWORD PTR [RDX+RCX*1-8]
            mov QWORD PTR [RSI+RCX*1-8],R8
            lea RCX,QWORD PTR [RSI+8]
            mov R8,RSI
            and RCX,-8
            sub R8,RCX
            add EAX,R8D
            sub RDX,R8
            and EAX,4294967288
            cmp EAX,8
            jb .L_43b9db

            and EAX,4294967288
            xor R8D,R8D
.L_43ba70:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RDX+R9*1]
            cmp R8D,EAX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_43ba70

            jmp .L_43b9db
.L_43ba89:

            mov ECX,DWORD PTR [RDX]
            mov EAX,EAX
            mov DWORD PTR [RSI],ECX
            mov EDX,DWORD PTR [RDX+RAX*1-4]
            mov DWORD PTR [RSI+RAX*1-4],EDX
            jmp .L_43b9db
.L_43ba9c:

            mov EAX,EAX
            movzx EDX,WORD PTR [RDX+RAX*1-2]
            mov WORD PTR [RSI+RAX*1-2],DX
            jmp .L_43b9db
.L_43baad:

            nop
            nop
            nop
.L_43bab0:

            push RBX
            mov RBX,RSI
            sub RSP,16
.L_43bab8:

            mov EAX,DWORD PTR [RDI+8]
            cmp EAX,1
            je .L_43bb48

            cmp EAX,2
            jne .L_43bb38

            mov RSI,RDI
            mov RDI,RDX
            mov QWORD PTR [RSP+8],RDX
            call .L_40f0b0

            mov RDX,QWORD PTR [RSP+8]
.L_43bade:

            movzx EAX,BYTE PTR [RBX+8]
            cmp AL,64
            jbe .L_43bb2c

            mov ESI,EAX
            and ESI,4294967288
            cmp EAX,ESI
            jle .L_43bb2c

            mov R9D,128
            nop
            nop
            nop
.L_43baf8:

            mov EAX,ESI
            mov ECX,ESI
            mov EDI,R9D
            and ECX,7
            sar EAX,3
            add ESI,1
            cdqe 
            sar EDI,CL
            mov ECX,EDI
            not EDI
            and DIL,BYTE PTR [RDX+RAX*1]
            mov BYTE PTR [RDX+RAX*1],DIL
            mov R8,QWORD PTR [RBX]
            and CL,BYTE PTR [R8+RAX*1]
            or ECX,EDI
            mov BYTE PTR [RDX+RAX*1],CL
            movzx EAX,BYTE PTR [RBX+8]
            cmp EAX,ESI
            jg .L_43baf8
.L_43bb2c:

            add RSP,16
.L_43bb30:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43bb38:

            add RSP,16
            mov EAX,6
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43bb48:

            mov EAX,254
            mov DWORD PTR [RDX+8],4278190080
            mov WORD PTR [RDX+12],AX
            movzx EAX,WORD PTR [RDI]
            rol AX,8
            mov WORD PTR [RDX+14],AX
            jmp .L_43bade
.L_43bb68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bb70:

            push R15
            push R14
            mov RDI,RSI
            push R13
            push R12
            mov RSI,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov R13,RCX
            mov R12,R8
            mov R15,R9
            sub RSP,56
.L_43bb90:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDX,RBX
            call .L_43bab0

            mov RDI,RBP
            call .L_40f080

            mov RDI,RBX
            mov R14,RAX
            call .L_40f090

            mov RCX,QWORD PTR [R14]
            cmp QWORD PTR [RAX],RCX
            jne .L_43bc00

            or WORD PTR [R12],48
            xor EAX,EAX
.L_43bbd8:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43bc7e

            add RSP,56
.L_43bbf0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43bc00:

            movzx EAX,WORD PTR [RBP+14]
            lea RDI,QWORD PTR [RSP+4]
            mov RSI,R13
            mov RDX,RBX
            mov DWORD PTR [RSP+12],1
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_43bab0

            mov RDI,RBP
            call .L_40f080

            mov RDI,RBX
            mov R13,RAX
            call .L_40f090

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R13],RAX
            jne .L_43bc60

            or WORD PTR [R12],32
            movzx EAX,BYTE PTR [RBP+14]
            mov BYTE PTR [R15],AL
            movzx EAX,BYTE PTR [RBP+15]
            mov BYTE PTR [R15+1],AL
            mov EAX,2
            jmp .L_43bbd8
.L_43bc60:

            or WORD PTR [R12],16
            mov RDI,RBP
            call .L_40f080

            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [R15],RAX
            mov EAX,8
            jmp .L_43bbd8
.L_43bc7e:

            call __stack_chk_fail@PLT
.L_43bc83:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bc90:

            push R15
            push R14
            mov RDI,RSI
            push R13
            push R12
            mov RSI,RCX
            push RBP
            push RBX
            mov RBP,RDX
            mov R13,RCX
            mov R12,R8
            mov R15,R9
            sub RSP,56
.L_43bcb0:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDX,RBX
            call .L_43bab0

            mov RDI,RBP
            call .L_40f080

            mov RDI,RBX
            mov R14,RAX
            call .L_40f090

            mov RCX,QWORD PTR [R14]
            cmp QWORD PTR [RAX],RCX
            jne .L_43bd20

            or WORD PTR [R12],3
            xor EAX,EAX
.L_43bcf8:

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_43bd9e

            add RSP,56
.L_43bd10:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43bd20:

            movzx EAX,WORD PTR [RBP+14]
            lea RDI,QWORD PTR [RSP+4]
            mov RSI,R13
            mov RDX,RBX
            mov DWORD PTR [RSP+12],1
            rol AX,8
            mov WORD PTR [RSP+4],AX
            call .L_43bab0

            mov RDI,RBP
            call .L_40f080

            mov RDI,RBX
            mov R13,RAX
            call .L_40f090

            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [R13],RAX
            jne .L_43bd80

            or WORD PTR [R12],2
            movzx EAX,BYTE PTR [RBP+14]
            mov BYTE PTR [R15],AL
            movzx EAX,BYTE PTR [RBP+15]
            mov BYTE PTR [R15+1],AL
            mov EAX,2
            jmp .L_43bcf8
.L_43bd80:

            or WORD PTR [R12],1
            mov RDI,RBP
            call .L_40f080

            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [R15],RAX
            mov EAX,8
            jmp .L_43bcf8
.L_43bd9e:

            call __stack_chk_fail@PLT
.L_43bda3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bdb0:

            push R12
            push RBP
            mov RBP,RDX
            push RBX
            mov R12,RCX
            mov RBX,RSI
            sub RSP,32
.L_43bdc1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            movzx R8D,WORD PTR [RBP]
            mov EDX,R8D
            or EDX,8
            mov WORD PTR [RBP],DX
            mov EDX,2
            jmp .L_43bdfa
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43bdf0:

            add RDX,1
            cmp RDX,16
            je .L_43be58
.L_43bdfa:

            cmp BYTE PTR [RBX+RDX*1],0
            mov ESI,EDX
            je .L_43bdf0

            cmp BYTE PTR [RBX+1],2
            jne .L_43be11

            cmp EDX,15
            je .L_43bee0
.L_43be11:

            cmp ESI,12
            ja .L_43beb0

            cmp ESI,10
            ja .L_43be80

            lea RDI,QWORD PTR [RAX+7520]
            xor ESI,ESI
            mov RDX,RSP
            call .L_426390

            test EAX,EAX
            jne .L_43be42

            movzx EAX,BYTE PTR [RBX+3]
            cmp BYTE PTR [RSP+8],AL
            je .L_43befb
.L_43be42:

            movdqu XMM0,XMMWORD PTR [RBX]
            mov EAX,16
            movups XMMWORD PTR [R12],XMM0
            jmp .L_43be5a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43be58:

            xor EAX,EAX
.L_43be5a:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43bf2c

            add RSP,32
.L_43be72:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43be80:

            or R8D,9
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+1]
            mov BYTE PTR [R12],AL
            mov EAX,DWORD PTR [RBX+11]
            mov DWORD PTR [R12+1],EAX
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12+5],AL
            mov EAX,6
            jmp .L_43be5a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43beb0:

            or R8D,10
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+1]
            mov BYTE PTR [R12],AL
            movzx EAX,WORD PTR [RBX+13]
            mov WORD PTR [R12+1],AX
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12+3],AL
            mov EAX,4
            jmp .L_43be5a
          .byte 0x66
          .byte 0x90
.L_43bee0:

            or R8D,11
            mov WORD PTR [RBP],R8W
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [R12],AL
            mov EAX,1
            jmp .L_43be5a
.L_43befb:

            mov RAX,QWORD PTR [RSP]
            mov RAX,QWORD PTR [RAX]
            cmp QWORD PTR [RBX+4],RAX
            jne .L_43be42

            or WORD PTR [RBP],4
            movzx EAX,WORD PTR [RBX+1]
            mov WORD PTR [R12],AX
            mov EAX,DWORD PTR [RBX+12]
            mov DWORD PTR [R12+2],EAX
            mov EAX,6
            jmp .L_43be5a
.L_43bf2c:

            call __stack_chk_fail@PLT
.L_43bf31:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43bf40:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RSI
            mov EDX,2
            mov RDI,RBX
            sub RSP,56
.L_43bf5f:

            movzx ESI,WORD PTR [RSI+60]
            lea RCX,QWORD PTR [RSP+36]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            xor EAX,EAX
            mov WORD PTR [RSP+38],AX
            call .L_403860

            mov ESI,2
            mov RDI,RBX
            call .L_4034e0

            movzx EAX,BYTE PTR [RSP+36]
            mov BYTE PTR [R13],224
            cmp AL,17
            je .L_43c0d0

            cmp AL,41
            je .L_43c0d0

            lea RCX,QWORD PTR [R13+1]
            mov BYTE PTR [R13+1],AL
            mov QWORD PTR [RSP+16],RCX
.L_43bfb8:

            movzx EDX,BYTE PTR [RSP+37]
            lea EDI,DWORD PTR [RDX*8+8]
            movzx EDX,BYTE PTR [R15]
            lea R12D,DWORD PTR [RDI-2]
            mov BYTE PTR [RSP+31],DIL
            test DL,DL
            movzx EBP,R12B
            je .L_43c048

            xor R8D,R8D
            cmp DL,60
            je .L_43c048
.L_43bfe1:

            mov BYTE PTR [R15],AL
            mov RAX,QWORD PTR [RSP+16]
            mov EDX,EBP
            mov RDI,RBX
            mov DWORD PTR [RSP+8],R8D
            mov BYTE PTR [RAX+1],R12B
            movzx ESI,WORD PTR [RBX+60]
            lea R14,QWORD PTR [RAX+2]
            mov RCX,R14
            call .L_403860

            mov R8D,DWORD PTR [RSP+8]
            mov RDI,RBX
            lea ESI,DWORD PTR [R8+RBP*1]
            call .L_4034e0

            movzx EAX,R12B
            add RAX,R14
            sub RAX,R13
            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c0fd

            add RSP,56
.L_43c03a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43c048:

            movzx R14D,WORD PTR [RBX+60]
            lea RCX,QWORD PTR [RSP+38]
            mov QWORD PTR [RSP+8],RCX
            movzx EAX,R14W
            jmp .L_43c068
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43c060:

            add R14D,1
.L_43c064:

            movzx EAX,WORD PTR [RBX+60]
.L_43c068:

            movzx ESI,R14W
            add EAX,EBP
            cmp ESI,EAX
            jge .L_43c0a0

            mov RCX,QWORD PTR [RSP+8]
            mov EDX,2
            mov RDI,RBX
            call .L_403860

            cmp BYTE PTR [RSP+38],0
            je .L_43c060

            movzx EAX,BYTE PTR [RSP+39]
            lea R14D,DWORD PTR [R14+RAX*1+2]
            jmp .L_43c064
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c0a0:

            movzx EAX,BYTE PTR [RSP+38]
            test AL,AL
            jne .L_43c0e0

            movzx R12D,BYTE PTR [RSP+31]
            mov R8D,1
            sub R12D,3
            movzx EBP,R12B
.L_43c0bd:

            movzx EAX,BYTE PTR [RSP+36]
            jmp .L_43bfe1
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c0d0:

            mov BYTE PTR [R13],225
            mov QWORD PTR [RSP+16],R13
            jmp .L_43bfb8
          .byte 0x90
.L_43c0e0:

            xor R8D,R8D
            cmp AL,1
            jne .L_43c0bd

            movzx EAX,BYTE PTR [RSP+39]
            lea R8D,DWORD PTR [RAX+2]
            sub R12D,R8D
            movzx R8D,R8B
            movzx EBP,R12B
            jmp .L_43c0bd
.L_43c0fd:

            call __stack_chk_fail@PLT
.L_43c102:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c110:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBP,RDX
            mov RDI,R12
            mov EDX,8
            sub RSP,16
.L_43c126:

            movzx ESI,WORD PTR [RSI+60]
            mov RCX,RSP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_403860

            movzx EAX,WORD PTR [RSP]
            movzx EDX,WORD PTR [RSP+2]
            mov BYTE PTR [RBP],240
            rol AX,8
            rol DX,8
            mov ECX,EAX
            movzx ESI,AX
            and ECX,4294967280
            cmp CX,61616
            je .L_43c1d8
.L_43c166:

            mov ECX,EAX
            xor CL,CL
            cmp CX,61440
            je .L_43c200

            mov ECX,EDX
            xor CL,CL
            cmp CX,61440
            je .L_43c1c0

            mov EAX,DWORD PTR [RSP]
            lea RBX,QWORD PTR [RBP+5]
            mov DWORD PTR [RBP+1],EAX
.L_43c18a:

            movzx EAX,WORD PTR [RSP+6]
            mov RDI,R12
            mov ESI,8
            mov WORD PTR [RBX],AX
            call .L_4034e0

            lea RAX,QWORD PTR [RBX+2]
            sub RAX,RBP
            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43c219

            add RSP,16
.L_43c1ba:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_43c1c0:

            mov EBX,ESI
            mov BYTE PTR [RBP],241
            mov BYTE PTR [RBP+2],AL
            mov BYTE PTR [RBP+1],BH
            mov BYTE PTR [RBP+3],DL
            lea RBX,QWORD PTR [RBP+4]
            jmp .L_43c18a
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43c1d8:

            mov ECX,EDX
            and ECX,4294967280
            cmp CX,61616
            jne .L_43c166

            shl ESI,4
            and EDX,15
            mov BYTE PTR [RBP],243
            or EDX,ESI
            lea RBX,QWORD PTR [RBP+2]
            mov BYTE PTR [RBP+1],DL
            jmp .L_43c18a

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c200:

            mov BYTE PTR [RBP+1],AL
            movzx EAX,DH
            mov BYTE PTR [RBP],242
            mov BYTE PTR [RBP+2],AL
            lea RBX,QWORD PTR [RBP+4]
            mov BYTE PTR [RBP+3],DL
            jmp .L_43c18a
.L_43c219:

            call __stack_chk_fail@PLT
.L_43c21e:

            nop
            nop
.L_43c220:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov R12,R8
            sub RSP,152
.L_43c23a:

            mov QWORD PTR [RSP+32],RDX
            mov QWORD PTR [RSP+16],RCX
            lea RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            call .L_430af0

            movzx ESI,WORD PTR [R13+60]
            xor EDI,EDI
            mov RCX,RBX
            mov WORD PTR [RSP+62],DI
            mov EDX,40
            mov RDI,R13
            mov RBP,RAX
            add RBP,7520
            call .L_403860

            lea RAX,QWORD PTR [RSP+64]
            lea RSI,QWORD PTR [RBX+8]
            mov RDI,RBP
            mov RDX,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_426230

            test EAX,EAX
            jne .L_43c370

            movzx EAX,BYTE PTR [RSP+74]
            test AL,AL
            mov BYTE PTR [RSP+31],AL
            je .L_43c370
.L_43c2b9:

            lea R15,QWORD PTR [RSP+80]
            lea RSI,QWORD PTR [RBX+24]
            mov RDI,RBP
            mov RDX,R15
            call .L_426230

            test EAX,EAX
            jne .L_43c350

            movzx EAX,BYTE PTR [RSP+90]
            test AL,AL
            mov BYTE PTR [RSP+30],AL
            je .L_43c350
.L_43c2de:

            movzx EAX,BYTE PTR [RSP+73]
            mov ESI,24576
            movzx EDX,BYTE PTR [RSP+89]
            mov WORD PTR [RSP+62],SI
            test AL,AL
            jne .L_43c4c0

            test DL,DL
            lea RBP,QWORD PTR [R12+2]
            jne .L_43c4c0
.L_43c307:

            movzx EDX,BYTE PTR [RSP+97]
            movzx EAX,BYTE PTR [RSP+96]
            mov ESI,EDX
            shl EAX,2
            mov ECX,EDX
            and EAX,60
            sar ESI,6
            shl EDX,2
            or EAX,ESI
            and EDX,4294967232
            and ECX,15
            jne .L_43c390

            cmp BYTE PTR [RSP+98],0
            jne .L_43c390

            cmp BYTE PTR [RSP+99],0
            jne .L_43c390

            or AL,DL
            movzx ECX,WORD PTR [RSP+62]
            jne .L_43c688

            or CH,24
            mov WORD PTR [RSP+62],CX
            jmp .L_43c3ad
.L_43c350:

            mov RDX,R15
            xor ESI,ESI
            mov RDI,RBP
            call .L_426390

            mov BYTE PTR [RSP+30],0
            jmp .L_43c2de
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c370:

            mov RDX,QWORD PTR [RSP+8]
            xor ESI,ESI
            mov RDI,RBP
            call .L_426390

            mov BYTE PTR [RSP+31],0
            jmp .L_43c2b9
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c390:

            test AL,AL
            movzx ESI,WORD PTR [RSP+98]
            je .L_43c4e0

            or EAX,EDX
            mov BYTE PTR [RBP+1],CL
            mov WORD PTR [RBP+2],SI
            mov BYTE PTR [RBP],AL
            add RBP,4
.L_43c3ad:

            movzx EAX,BYTE PTR [RSP+102]
            cmp AL,41
            ja .L_43c503
.L_43c3ba:

            movabs RDX,2199023386625
            bt RDX,RAX
            jae .L_43c503

            movzx EAX,BYTE PTR [RSP+103]
            or WORD PTR [RSP+62],1024
            cmp AL,64
            je .L_43c517
.L_43c3e2:

            cmp AL,255
            je .L_43c648

            cmp AL,1
            je .L_43c638

            mov BYTE PTR [RBP],AL
            add RBP,1
.L_43c3f9:

            lea RAX,QWORD PTR [RBX+8]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_40ede0

            test AL,AL
            je .L_43c5f0

            or WORD PTR [RSP+62],64
.L_43c418:

            add RBX,24
            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            je .L_43c528

            lea RDX,QWORD PTR [RSP+62]
            mov RSI,RBX
            mov RCX,RBP
            mov RDI,R14
            call .L_43bdb0

            cdqe 
            lea RBX,QWORD PTR [RBP+RAX*1]
            movzx EAX,WORD PTR [RSP+62]
.L_43c44b:

            movzx EDX,AH
            mov BYTE PTR [R12+1],AL
            mov ESI,40
            mov BYTE PTR [R12],DL
            mov RDI,R13
            lea RBP,QWORD PTR [RSP+61]
            call .L_4034e0

            movzx EAX,BYTE PTR [RSP+102]
            mov BYTE PTR [RSP+61],AL
.L_43c472:

            cmp AL,17
            je .L_43c5b0

            cmp AL,41
            je .L_43c580

            test AL,AL
            je .L_43c5d0
.L_43c48a:

            mov RAX,RBX
            sub RAX,R12
            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43c69c

            add RSP,152
.L_43c4ae:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c4c0:

            shl EAX,4
            mov ECX,24704
            lea RBP,QWORD PTR [R12+3]
            or EAX,EDX
            mov WORD PTR [RSP+62],CX
            mov BYTE PTR [R12+2],AL
            jmp .L_43c307
          .byte 0x66
          .byte 0x90
.L_43c4e0:

            mov EAX,ECX
            mov WORD PTR [RBP+1],SI
            or WORD PTR [RSP+62],2048
            or EAX,EDX
            add RBP,3
            mov BYTE PTR [RBP-3],AL
            movzx EAX,BYTE PTR [RSP+102]
            cmp AL,41
            jbe .L_43c3ba
.L_43c503:

            mov BYTE PTR [RBP],AL
            movzx EAX,BYTE PTR [RSP+103]
            add RBP,1
            cmp AL,64
            jne .L_43c3e2
.L_43c517:

            or WORD PTR [RSP+62],512
            jmp .L_43c3f9
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c528:

            mov RDI,RBX
            call .L_40ee30

            test AL,AL
            jne .L_43c54c

            cmp BYTE PTR [RSP+30],0
            movzx EAX,WORD PTR [RSP+62]
            je .L_43c658

            or EAX,4
            mov WORD PTR [RSP+62],AX
.L_43c54c:

            mov RSI,QWORD PTR [RSP+16]
            lea R8,QWORD PTR [RSP+62]
            mov RDX,RBX
            mov R9,RBP
            mov RCX,R15
            mov RDI,R14
            call .L_43bc90

            movsxd RBX,EAX
            movzx EAX,WORD PTR [RSP+62]
            add RBX,RBP
            jmp .L_43c44b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c580:

            mov RCX,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+32]
            add RBX,1
            mov BYTE PTR [RBX-1],238
            mov RSI,R13
            mov R8,RBX
            mov RDI,R14
            call .L_43c220

            cdqe 
            add RBX,RAX
            jmp .L_43c48a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c5b0:

            mov RDX,RBX
            mov RSI,R13
            mov RDI,R14
            call .L_43c110

            cdqe 
            add RBX,RAX
            jmp .L_43c48a
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c5d0:

            mov RDX,RBX
            mov RCX,RBP
            mov RSI,R13
            mov RDI,R14
            call .L_43bf40

            cdqe 
            add RBX,RAX
            movzx EAX,BYTE PTR [RSP+61]
            jmp .L_43c472
.L_43c5f0:

            mov RDI,QWORD PTR [RSP+40]
            call .L_40ee30

            test AL,AL
            jne .L_43c60b

            cmp BYTE PTR [RSP+31],0
            je .L_43c670

            or WORD PTR [RSP+62],64
.L_43c60b:

            mov RCX,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [RSP+40]
            lea R8,QWORD PTR [RSP+62]
            mov RSI,QWORD PTR [RSP+32]
            mov R9,RBP
            mov RDI,R14
            call .L_43bb70

            cdqe 
            add RBP,RAX
            jmp .L_43c418
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43c638:

            or WORD PTR [RSP+62],256
            jmp .L_43c3f9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43c648:

            or WORD PTR [RSP+62],768
            jmp .L_43c3f9
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43c658:

            movdqu XMM0,XMMWORD PTR [RSP+120]
            lea RBX,QWORD PTR [RBP+16]
            movups XMMWORD PTR [RBP],XMM0
            jmp .L_43c44b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c670:

            movdqu XMM0,XMMWORD PTR [RSP+104]
            add RBP,16
            movups XMMWORD PTR [RBP-16],XMM0
            jmp .L_43c418
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c688:

            or CH,16
            mov BYTE PTR [RBP],AL
            add RBP,1
            mov WORD PTR [RSP+62],CX
            jmp .L_43c3ad
.L_43c69c:

            call __stack_chk_fail@PLT
.L_43c6a1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c6b0:

            mov EAX,ESI
            and EAX,4294967280
            cmp AL,224
            je .L_43c6d8

            and ESI,4294967288
            mov EAX,6
            cmp SIL,240
            jne .L_43c6cf

            mov DWORD PTR [RDX],17
            xor EAX,EAX
.L_43c6cf:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c6d8:

            movzx EDI,SIL
            mov RSI,RDX
            jmp .L_43b930
.L_43c6e4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43c6f0:

            push R15
            push R14
            push R13
            push R12
            mov R13D,R9D
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,R8
            sub RSP,120
.L_43c707:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+24],RDX
            mov QWORD PTR [RSP+40],RCX
            call .L_430af0

            cmp R13W,1
            jbe .L_43caa8

            movzx ECX,BYTE PTR [RBX]
            movzx EDX,BYTE PTR [RBX+1]
            lea R14D,DWORD PTR [R13-2]
            shl ECX,8
            or EDX,ECX
            mov R12D,EDX
            and DX,57344
            cmp DX,24576
            jne .L_43caa8

            test R12B,128
            mov BYTE PTR [RSP+72],0
            mov BYTE PTR [RSP+88],0
            je .L_43c9d0

            test R14W,R14W
            je .L_43caa8

            movzx ESI,BYTE PTR [RBX+2]
            lea R14,QWORD PTR [RAX+7520]
            lea RDX,QWORD PTR [RSP+64]
            lea R15,QWORD PTR [RBX+3]
            mov RDI,R14
            mov QWORD PTR [RSP+8],RDX
            sar ESI,4
            call .L_426390

            movzx ESI,BYTE PTR [RBX+2]
            test EAX,EAX
            lea RDX,QWORD PTR [RSP+80]
            sete BYTE PTR [RSP+39]
            mov RDI,R14
            lea R14D,DWORD PTR [R13-3]
            mov QWORD PTR [RSP+16],RDX
            and ESI,15
            call .L_426390

            test EAX,EAX
            sete BYTE PTR [RSP+38]
.L_43c7c1:

            pxor XMM0,XMM0
            mov EAX,R12D
            mov DWORD PTR [RBP+36],0
            and AX,6144
            mov DWORD PTR [RBP],96
            cmp AX,6144
            movups XMMWORD PTR [RBP+4],XMM0
            movups XMMWORD PTR [RBP+20],XMM0
            je .L_43c864

            test R14W,R14W
            je .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sar EAX,2
            and EAX,48
            or AL,BYTE PTR [RBP+1]
            test R12W,2048
            mov BYTE PTR [RBP+1],AL
            jne .L_43c82f

            movzx EDX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            sar EDX,2
            and EDX,15
            or EDX,96
            mov BYTE PTR [RBP],DL
            movzx EDX,BYTE PTR [R15-1]
            shl EDX,6
            or EAX,EDX
            mov BYTE PTR [RBP+1],AL
.L_43c82f:

            test R12W,4096
            jne .L_43c864

            cmp R14W,2
            jbe .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,3
            add R15,3
            and EAX,15
            or BYTE PTR [RBP+1],AL
            movzx EAX,BYTE PTR [R15-2]
            or BYTE PTR [RBP+2],AL
            movzx EAX,BYTE PTR [R15-1]
            or BYTE PTR [RBP+3],AL
.L_43c864:

            mov R13D,R12D
            and R13W,1024
            jne .L_43c888

            test R14W,R14W
            je .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+6],AL
.L_43c888:

            mov EAX,R12D
            and AX,768
            cmp AX,512
            je .L_43ca20

            cmp AX,768
            je .L_43c990

            cmp AX,256
            je .L_43ca30

            test R14W,R14W
            je .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+7],AL
.L_43c8c6:

            mov EAX,R12D
            and EAX,48
            cmp AX,16
            je .L_43c9a4
.L_43c8d6:

            jbe .L_43cab8

            cmp AX,32
            jne .L_43ca40

            cmp R14W,1
            jbe .L_43caa8

            mov ESI,4294967039
            add R15,2
            sub R14D,2
            mov WORD PTR [RBP+19],SI
            movzx EAX,WORD PTR [R15-2]
            test R12B,64
            mov WORD PTR [RBP+22],AX
            je .L_43ca63
.L_43c915:

            cmp BYTE PTR [RSP+39],0
            je .L_43caa8

            mov RDI,QWORD PTR [RSP+8]
            lea RSI,QWORD PTR [RBP+8]
            call .L_43b9b0

            mov EAX,R12D
            and EAX,3
            test R12B,8
            je .L_43ca7c
.L_43c93e:

            and R12D,4
            mov BYTE PTR [RBP+24],255
            jne .L_43cae0

            cmp AX,2
            je .L_43cc50

            cmp AX,3
            je .L_43ccb0

            cmp AX,1
            je .L_43cc80
.L_43c96a:

            cmp R14W,15
            jbe .L_43caa8

            movdqu XMM0,XMMWORD PTR [R15]
            sub R14D,16
            add R15,16
            movups XMMWORD PTR [RBP+24],XMM0
            jmp .L_43cb25
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43c990:

            mov EAX,R12D
            mov BYTE PTR [RBP+7],255
            and EAX,48
            cmp AX,16
            jne .L_43c8d6
.L_43c9a4:

            cmp R14W,7
            jbe .L_43caa8

            lea RDI,QWORD PTR [RBP+8]
            mov RSI,R15
            sub R14D,8
            add R15,8
            call .L_40f0a0

            jmp .L_43ca59
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43c9d0:

            lea R13,QWORD PTR [RAX+7520]
            lea RAX,QWORD PTR [RSP+64]
            xor ESI,ESI
            lea R15,QWORD PTR [RBX+2]
            mov RDX,RAX
            mov RDI,R13
            mov QWORD PTR [RSP+8],RAX
            call .L_426390

            lea RAX,QWORD PTR [RSP+80]
            xor ESI,ESI
            mov RDI,R13
            mov RDX,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_426390

            mov BYTE PTR [RSP+38],1
            mov BYTE PTR [RSP+39],1
            jmp .L_43c7c1
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ca20:

            mov BYTE PTR [RBP+7],64
            jmp .L_43c8c6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ca30:

            mov BYTE PTR [RBP+7],1
            jmp .L_43c8c6
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ca40:

            cmp AX,48
            jne .L_43ca59

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [RBP+8]
            call .L_43bab0
.L_43ca59:

            test R12B,64
            jne .L_43c915
.L_43ca63:

            mov ECX,4294934782
            mov WORD PTR [RBP+8],CX
.L_43ca6c:

            mov EAX,R12D
            and EAX,3
            test R12B,8
            jne .L_43c93e
.L_43ca7c:

            cmp AX,2
            je .L_43cbe0

            cmp AX,3
            je .L_43cc10

            cmp AX,1
            je .L_43cb88

            and R12D,4
            je .L_43c96a

            nop
            nop
            nop
            nop
.L_43caa8:

            mov EAX,4294967295
            jmp .L_43cb60
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43cab8:

            test AX,AX
            jne .L_43ca59

            test R12B,64
            jne .L_43ca6c

            cmp R14W,15
            jbe .L_43caa8

            movdqu XMM0,XMMWORD PTR [R15]
            sub R14D,16
            add R15,16
            movups XMMWORD PTR [RBP+8],XMM0
            jmp .L_43ca6c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43cae0:

            test AX,AX
            jne .L_43caa8

            cmp R14W,5
            jbe .L_43caa8

            cmp BYTE PTR [RSP+38],0
            je .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,6
            add R15,6
            mov BYTE PTR [RBP+25],AL
            movzx EAX,BYTE PTR [R15-5]
            mov BYTE PTR [RBP+26],AL
            movzx EAX,BYTE PTR [RSP+88]
            mov BYTE PTR [RBP+27],AL
            mov RAX,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RBP+28],RAX
            mov EAX,DWORD PTR [R15-4]
            mov DWORD PTR [RBP+36],EAX
.L_43cb25:

            test R13W,R13W
            je .L_43cb5b

            test R14W,R14W
            je .L_43caa8

            movzx EDI,BYTE PTR [R15]
            mov EAX,EDI
            and EAX,4294967280
            cmp AL,224
            je .L_43cc30

            and EDI,4294967288
            cmp DIL,240
            jne .L_43caa8

            mov EAX,17
.L_43cb58:

            mov BYTE PTR [RBP+6],AL
.L_43cb5b:

            mov EAX,R15D
            sub EAX,EBX
.L_43cb60:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43ccd2

            add RSP,120
.L_43cb78:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43cb88:

            cmp R14W,7
            jbe .L_43caa8

            lea RDI,QWORD PTR [RBP+24]
            mov RSI,R15
            sub R14D,8
            add R15,8
            call .L_40f0a0
.L_43cba7:

            and R12D,4
            je .L_43cbd0

            cmp BYTE PTR [RSP+38],0
            je .L_43caa8

            mov RDI,QWORD PTR [RSP+16]
            lea RSI,QWORD PTR [RBP+24]
            call .L_43b9b0

            jmp .L_43cb25
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43cbd0:

            mov EAX,4294934782
            mov WORD PTR [RBP+24],AX
            jmp .L_43cb25
          .byte 0x66
          .byte 0x90
.L_43cbe0:

            cmp R14W,1
            jbe .L_43caa8

            mov EDX,4294967039
            add R15,2
            sub R14D,2
            mov WORD PTR [RBP+35],DX
            movzx EAX,WORD PTR [R15-2]
            mov WORD PTR [RBP+38],AX
            jmp .L_43cba7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43cc10:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+40]
            lea RDX,QWORD PTR [RBP+24]
            call .L_43bab0

            test EAX,EAX
            je .L_43cba7

            jmp .L_43caa8
.L_43cc30:

            lea RSI,QWORD PTR [RSP+60]
            call .L_43b930

            test EAX,EAX
            jne .L_43caa8

            movzx EAX,BYTE PTR [RSP+60]
            jmp .L_43cb58
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43cc50:

            cmp R14W,3
            jbe .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,4
            add R15,4
            mov BYTE PTR [RBP+25],AL
            movzx EAX,WORD PTR [R15-3]
            mov WORD PTR [RBP+37],AX
            movzx EAX,BYTE PTR [R15-1]
            mov BYTE PTR [RBP+39],AL
            jmp .L_43cb25
.L_43cc80:

            cmp R14W,5
            jbe .L_43caa8

            movzx EAX,BYTE PTR [R15]
            sub R14D,6
            add R15,6
            mov BYTE PTR [RBP+25],AL
            mov EAX,DWORD PTR [R15-5]
            mov DWORD PTR [RBP+35],EAX
            movzx EAX,BYTE PTR [R15-1]
            mov BYTE PTR [RBP+39],AL
            jmp .L_43cb25
          .byte 0x66
          .byte 0x90
.L_43ccb0:

            test R14W,R14W
            je .L_43caa8

            mov BYTE PTR [RBP+25],2
            movzx EAX,BYTE PTR [R15]
            sub R14D,1
            add R15,1
            mov BYTE PTR [RBP+39],AL
            jmp .L_43cb25
.L_43ccd2:

            call __stack_chk_fail@PLT
.L_43ccd7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43cce0:

            push R15
            push R14
            xor EDI,EDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_43ccf0:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test CX,CX
            movzx EAX,BYTE PTR [RDX]
            mov WORD PTR [RSP+15],DI
            je .L_43cec0

            test AL,1
            mov R12,RDX
            mov R13,RSI
            lea EDX,DWORD PTR [RCX-1]
            jne .L_43ce48

            cmp DX,1
            jbe .L_43cec0

            movzx EAX,BYTE PTR [R12+1]
            sub ECX,3
            lea RBP,QWORD PTR [R12+3]
            mov BYTE PTR [RSP+22],AL
            movzx EAX,BYTE PTR [R12+2]
            cmp AX,CX
            mov EBX,EAX
            ja .L_43cec0

            movzx R14D,AL
.L_43cd53:

            lea RAX,QWORD PTR [R14+9]
            lea RSI,QWORD PTR [RSP+22]
            mov EDX,2
            mov RDI,R13
            shr RAX,3
            sub EAX,1
            mov BYTE PTR [RSP+23],AL
            call .L_403d30

            test EAX,EAX
            jne .L_43cec0

            mov ESI,2
            mov RDI,R13
            movzx R15D,BL
            call .L_4034e0

            mov EDX,R15D
            mov RSI,RBP
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_43cec0

            add EBX,2
            mov ESI,R15D
            mov RDI,R13
            call .L_4034e0

            and EBX,7
            mov EDX,8
            add RBP,R14
            sub EDX,EBX
            cmp DL,8
            je .L_43ce1d

            cmp DL,1
            je .L_43ce98

            mov EAX,6
            movzx R14D,DL
            movzx EDX,DL
            sub EAX,EBX
            lea RBX,QWORD PTR [RSP+15]
            sub RDX,2
            xor ESI,ESI
            mov ECX,5
            mov BYTE PTR [RSP+15],1
            lea RDI,QWORD PTR [RBX+2]
            mov BYTE PTR [RSP+16],AL
            call __memset_chk@PLT

            mov EDX,R14D
            mov RSI,RBX
            mov RDI,R13
            call .L_403d30

            test EAX,EAX
            jne .L_43cec0
.L_43ce12:

            mov ESI,R14D
            mov RDI,R13
            call .L_4034e0
.L_43ce1d:

            mov EAX,EBP
            sub EAX,R12D
.L_43ce22:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43cee5

            add RSP,40
.L_43ce3a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43ce48:

            test DX,DX
            je .L_43cec0

            movzx EAX,BYTE PTR [R12+1]
            sub ECX,2
            lea RBP,QWORD PTR [R12+2]
            cmp AX,CX
            mov EBX,EAX
            ja .L_43cec0

            movzx R14D,AL
            movzx EDI,BYTE PTR [R12+R14*1+2]
            mov EAX,EDI
            and EAX,4294967280
            cmp AL,224
            je .L_43ced0

            and EDI,4294967288
            cmp DIL,240
            jne .L_43cec0

            mov DWORD PTR [RSP+8],17
            mov EAX,17
.L_43ce8b:

            mov BYTE PTR [RSP+22],AL
            jmp .L_43cd53
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43ce98:

            lea RSI,QWORD PTR [RSP+7]
            mov EDX,1
            mov RDI,R13
            mov BYTE PTR [RSP+7],0
            call .L_403d30

            test EAX,EAX
            jne .L_43cec0

            mov R14D,1
            jmp .L_43ce12
          .byte 0x66
          .byte 0x90
.L_43cec0:

            mov EAX,4294967295
            jmp .L_43ce22
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ced0:

            lea RSI,QWORD PTR [RSP+8]
            call .L_43b930

            test EAX,EAX
            jne .L_43cec0

            movzx EAX,BYTE PTR [RSP+8]
            jmp .L_43ce8b
.L_43cee5:

            call __stack_chk_fail@PLT
.L_43ceea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43cef0:

            push R12
            push RBP
            push RBX
            sub RSP,16
.L_43cef8:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test CX,CX
            je .L_43d0e8

            mov RBP,RDX
            movzx EDX,BYTE PTR [RDX]
            mov R12,RSI
            mov QWORD PTR [RSP],0
            lea ESI,DWORD PTR [RCX-1]
            mov EAX,EDX
            and EAX,3
            cmp AL,2
            je .L_43d0a8

            cmp AL,3
            je .L_43d028

            cmp AL,1
            je .L_43d068

            cmp SI,3
            jbe .L_43d0e8

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+5]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+2]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+3]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+4]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-5]
.L_43cf82:

            and EDX,4
            jne .L_43d0e8

            cmp AX,1
            jbe .L_43d0e8

            movzx EDX,BYTE PTR [RBX]
            add RBX,2
            mov ESI,EDX
            movzx EDX,BYTE PTR [RBX-1]
            shl ESI,8
            or EDX,ESI
            rol DX,8
            test R8W,R8W
            mov WORD PTR [RSP+6],DX
            jne .L_43d010

            mov RAX,RBX
            add ECX,8
            sub RAX,RBP
            sub ECX,EAX
            rol CX,8
            mov WORD PTR [RSP+4],CX
.L_43cfca:

            mov RSI,RSP
            mov EDX,8
            mov RDI,R12
            call .L_403d30

            test EAX,EAX
            jne .L_43d0e8

            mov ESI,8
            mov RDI,R12
            call .L_4034e0

            mov EAX,EBX
            sub EAX,EBP
.L_43cff3:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43d0f2

            add RSP,16
.L_43d00b:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_43d010:

            sub R8W,WORD PTR [R12+60]
            rol R8W,8
            mov WORD PTR [RSP+4],R8W
            jmp .L_43cfca
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d028:

            test SI,SI
            je .L_43d0e8

            movzx ESI,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+2]
            mov EAX,ESI
            sar ESI,4
            and EAX,15
            or SI,61616
            or AX,61616
            rol SI,8
            rol AX,8
            mov WORD PTR [RSP],SI
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-2]
            jmp .L_43cf82
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d068:

            cmp SI,2
            jbe .L_43d0e8

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+4]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+2]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+3]
            or AX,61440
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-4]
            jmp .L_43cf82
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d0a8:

            cmp SI,2
            jbe .L_43d0e8

            movzx EAX,BYTE PTR [RBP+1]
            lea RBX,QWORD PTR [RBP+4]
            or AX,61440
            rol AX,8
            mov WORD PTR [RSP],AX
            movzx EAX,BYTE PTR [RBP+2]
            shl EAX,8
            mov ESI,EAX
            movzx EAX,BYTE PTR [RBP+3]
            or EAX,ESI
            rol AX,8
            mov WORD PTR [RSP+2],AX
            lea EAX,DWORD PTR [RCX-4]
            jmp .L_43cf82
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d0e8:

            mov EAX,4294967295
            jmp .L_43cff3
.L_43d0f2:

            call __stack_chk_fail@PLT
.L_43d0f7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d100:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_43d10e:

            mov EAX,DWORD PTR [RSP+176]
            mov QWORD PTR [RSP+24],RDX
            mov QWORD PTR [RSP+32],RCX
            mov DWORD PTR [RSP+40],R9D
            mov DWORD PTR [RSP+12],EAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            movzx EAX,WORD PTR [RSI+60]
            cmp R9W,1
            mov WORD PTR [RSP+46],AX
            jbe .L_43d2cf

            movzx EBX,WORD PTR [R8]
            mov R13D,DWORD PTR [RSP+40]
            lea R10,QWORD PTR [RSP+64]
            mov RCX,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+24]
            mov RBP,RSI
            mov RSI,R10
            mov R12,RDI
            mov R14,R8
            movzx R9D,R13W
            mov QWORD PTR [RSP+16],R10
            rol BX,8
            and BX,1024
            call .L_43c6f0

            test EAX,EAX
            js .L_43d2cf

            mov R10,QWORD PTR [RSP+16]
            movsxd R9,EAX
            mov EDX,40
            mov RDI,RBP
            sub R13D,EAX
            lea R15,QWORD PTR [R14+R9*1]
            mov RSI,R10
            call .L_403d30

            test EAX,EAX
            jne .L_43d2cf

            mov ESI,40
            mov RDI,RBP
            call .L_4034e0

            test EAX,EAX
            jne .L_43d2cf

            test BX,BX
            je .L_43d234

            test R13W,R13W
            je .L_43d2cf

            mov QWORD PTR [RSP+16],R14
            mov R14,RBP
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d1e8:

            movzx EBX,BYTE PTR [R15]
            mov EAX,EBX
            and EAX,4294967280
            cmp AL,224
            je .L_43d290

            and EBX,4294967288
            mov RBP,R14
            mov R14,QWORD PTR [RSP+16]
            cmp BL,240
            jne .L_43d2cf

            movzx R8D,WORD PTR [RSP+12]
            movzx EBX,R13W
            mov RDX,R15
            mov ECX,EBX
            mov RSI,RBP
            mov RDI,R12
            call .L_43cef0

            cmp EAX,EBX
            ja .L_43d2cf
.L_43d22f:

            cdqe 
            add R15,RAX
.L_43d234:

            mov EAX,DWORD PTR [RSP+12]
            mov RBX,R15
            sub RBX,R14
            test AX,AX
            jne .L_43d348

            movzx EAX,WORD PTR [RBP+60]
            movzx ECX,WORD PTR [RSP+40]
            lea EAX,DWORD PTR [RAX+RCX*1-40]
            sub AX,WORD PTR [RSP+46]
            sub EAX,EBX
            rol AX,8
            mov WORD PTR [RSP+62],AX
.L_43d264:

            movzx ESI,WORD PTR [RSP+46]
            lea RCX,QWORD PTR [RSP+62]
            mov EDX,2
            mov RDI,RBP
            add ESI,4
            movzx ESI,SI
            call .L_403ac0

            movzx EAX,BX
            jmp .L_43d2d4
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d290:

            mov EAX,EBX
            and EAX,14
            cmp AL,14
            je .L_43d300

            movzx EBP,R13W
            mov RDX,R15
            mov RSI,R14
            mov ECX,EBP
            mov RDI,R12
            and EBX,1
            call .L_43cce0

            cmp EBP,EAX
            jb .L_43d2cf

            movsxd RDX,EAX
            sub R13D,EAX
            add R15,RDX
            test BL,BL
            je .L_43d365

            test R13W,R13W
            jne .L_43d1e8
.L_43d2cf:

            mov EAX,4294967295
.L_43d2d4:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43d372

            add RSP,120
.L_43d2ec:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d300:

            sub RSP,8
            mov RBP,R14
            mov R14,QWORD PTR [RSP+24]
            movzx EAX,WORD PTR [RSP+20]
            lea R8D,DWORD PTR [R13-1]
            add R15,1
            mov RSI,RBP
            mov RDI,R12
            movzx EBX,R8W
            mov R8,R15
            mov R9D,EBX
            push RAX
            mov RCX,QWORD PTR [RSP+48]
            mov RDX,QWORD PTR [RSP+40]
            call .L_43d100

            cmp EAX,EBX
            pop RDX
            pop RCX
            jbe .L_43d22f

            jmp .L_43d2cf
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d348:

            mov R13D,EAX
            sub R13D,40
            sub R13W,WORD PTR [RSP+46]
            rol R13W,8
            mov WORD PTR [RSP+62],R13W
            jmp .L_43d264
.L_43d365:

            mov RBP,R14
            mov R14,QWORD PTR [RSP+16]
            jmp .L_43d234
.L_43d372:

            call __stack_chk_fail@PLT
.L_43d377:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d380:

            test DL,DL
            je .L_43d3a0

            movzx EAX,BYTE PTR [RSI]
            lea ECX,DWORD PTR [RDX-1]
            mov BYTE PTR [RDI],AL
            and EAX,15
            cmp AL,15
            je .L_43d3b0

            lea RAX,QWORD PTR [RSI+1]
            mov BYTE PTR [RDI+1],0
.L_43d39b:

            cmp CL,3
            ja .L_43d3c8
.L_43d3a0:

            mov EAX,1
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d3b0:

            test CL,CL
            je .L_43d3a0

            movzx ECX,BYTE PTR [RSI+1]
            lea RAX,QWORD PTR [RSI+2]
            mov BYTE PTR [RDI+1],CL
            lea ECX,DWORD PTR [RDX-2]
            jmp .L_43d39b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d3c8:

            mov EAX,DWORD PTR [RAX]
            mov DWORD PTR [RDI+2],EAX
            xor EAX,EAX
            ret 
.L_43d3d0:

            push RBP
            push RBX
            mov RBP,RSI
            mov RCX,RDI
            xor ESI,ESI
            mov RBX,RDI
            sub RSP,8
            mov EDX,1
            mov RDI,RBP
            call .L_403860

            cmp AX,1
            je .L_43d400
.L_43d3f4:

            add RSP,8
            mov EAX,1
            pop RBX
            pop RBP
            ret 
.L_43d400:

            movzx EAX,BYTE PTR [RBX]
            and EAX,15
            cmp AL,15
            je .L_43d438

            mov BYTE PTR [RBX+1],0
            mov ESI,1
.L_43d413:

            lea RCX,QWORD PTR [RBX+2]
            mov RDI,RBP
            mov EDX,4
            call .L_403860

            cmp AX,4
            setne AL
            add RSP,8
            movzx EAX,AL
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d438:

            lea RCX,QWORD PTR [RBX+1]
            mov ESI,1
            mov EDX,1
            mov RDI,RBP
            call .L_403860

            cmp AX,1
            mov ESI,2
            jne .L_43d3f4

            jmp .L_43d413
.L_43d45b:

            nop
            nop
            nop
            nop
            nop
.L_43d460:

            cmp DL,3
            jbe .L_43d488

            mov EAX,DWORD PTR [RSI]
            mov ECX,EAX
            mov DWORD PTR [RDI],EAX
            xor EAX,EAX
            rol CX,8
            and CH,32
            je .L_43d482

            cmp DL,4
            je .L_43d488

            movzx EDX,BYTE PTR [RSI+4]
            mov BYTE PTR [RDI+4],DL
.L_43d482:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d488:

            mov EAX,6
            ret 
.L_43d48e:

            nop
            nop
.L_43d490:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            lea RDI,QWORD PTR [RAX+264]
            add RSP,8
            jmp .L_4126f0
.L_43d4b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d4c0:

            push RBP
            lea RAX,QWORD PTR [RIP+.L_43f650]
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,8
.L_43d4d3:

            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_43d490]
            mov QWORD PTR [RDI+16],0
            mov QWORD PTR [RDI+40],0
            mov QWORD PTR [RDI+8],RAX
            lea RAX,QWORD PTR [RIP+.L_43e980]
            mov DWORD PTR [RDI+56],0
            mov DWORD PTR [RDI+80],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RIP+.L_43ecb0]
            mov QWORD PTR [RDI+32],RAX
            lea RAX,QWORD PTR [RIP+.L_43ede0]
            mov QWORD PTR [RDI+48],RAX
            lea RAX,QWORD PTR [RDI+48]
            mov QWORD PTR [RDI+64],RAX
            lea RAX,QWORD PTR [RIP+.L_43ef20]
            mov QWORD PTR [RDI+72],RAX
            lea RAX,QWORD PTR [RDI+72]
            lea RDI,QWORD PTR [RDI+96]
            mov QWORD PTR [RDI-8],RAX
            call .L_4047a0

            lea RDI,QWORD PTR [RBX+128]
            call .L_404440

            lea RDX,QWORD PTR [RIP+.L_43dec0]
            xor EAX,EAX
            lea RDI,QWORD PTR [RBX+192]
            mov RCX,RBX
            mov RSI,RBP
            mov WORD PTR [RBX+138],AX
            mov QWORD PTR [RBX+144],0
            mov BYTE PTR [RBX+152],0
            mov BYTE PTR [RBX+153],4
            mov DWORD PTR [RBX+164],0
            mov DWORD PTR [RBX+176],0
            mov DWORD PTR [RBX+180],0
            mov BYTE PTR [RBX+184],0
            mov BYTE PTR [RBX+185],0
            call .L_404b20

            movabs RAX,-281474976710656
            lea RDI,QWORD PTR [RBX+240]
            mov BYTE PTR [RBX+208],0
            mov QWORD PTR [RBX+212],RAX
            mov BYTE PTR [RBX+220],0
            call .L_404440

            lea RDI,QWORD PTR [RBX+248]
            mov RSI,RBP
            call .L_42b120

            xor EDX,EDX
            lea RDI,QWORD PTR [RBX+264]
            mov RSI,RBP
            mov WORD PTR [RBX+256],DX
            mov DWORD PTR [RBX+252],0
            mov BYTE PTR [RBX+258],0
            call .L_412340

            call .L_401460

            mov RDI,RBX
            mov WORD PTR [RBX+136],AX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            mov RSI,RBX
            call .L_4056b0

            mov QWORD PTR [RBX+224],0
            mov QWORD PTR [RBX+232],0
            add RSP,8
.L_43d657:

            pop RBX
            pop RBP
            ret 
.L_43d65a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43d660:

            cmp BYTE PTR [RDI+208],0
            je .L_43d670

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d670:

            push RBX
            mov RBX,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            mov ESI,1
            call .L_407590

            mov BYTE PTR [RBX+208],1
            xor EAX,EAX
            pop RBX
            ret 
.L_43d695:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d6a0:

            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,8
            call .L_430af0

            cmp BYTE PTR [RBP+208],0
            jne .L_43d6d0

            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d6d0:

            lea RDI,QWORD PTR [RBP+264]
            mov RBX,RAX
            lea R13,QWORD PTR [RBX+1560]
            call .L_412380

            lea RDI,QWORD PTR [RBP+72]
            call .L_430c70

            cmp BYTE PTR [RBP+220],0
            jne .L_43d788
.L_43d6fc:

            lea R12,QWORD PTR [RBP+96]
            jmp .L_43d71b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d708:

            mov RDI,R12
            mov RSI,RAX
            call .L_404a30

            mov RDI,RBX
            call .L_4033b0
.L_43d71b:

            mov RDI,R12
            call .L_404810

            test RAX,RAX
            mov RBX,RAX
            jne .L_43d708

            lea R12,QWORD PTR [RBP+128]
            jmp .L_43d74b
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d738:

            mov RDI,R12
            mov RSI,RAX
            call .L_404640

            mov RDI,RBX
            call .L_4033b0
.L_43d74b:

            mov RDI,R12
            call .L_404570

            test RAX,RAX
            mov RBX,RAX
            jne .L_43d738

            mov BYTE PTR [RBP+208],0
            mov QWORD PTR [RBP+144],0
            mov RDI,R13
            xor ESI,ESI
            call .L_407590

            add RSP,8
.L_43d77b:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43d788:

            movzx ESI,BYTE PTR [RBP+217]
            mov RDI,R13
            call .L_405ba0

            lea RDI,QWORD PTR [RBX+2568]
            mov BYTE PTR [RBP+220],0
            call .L_415150

            jmp .L_43d6fc
.L_43d7af:

            nop
.L_43d7b0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,24
.L_43d7c0:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            call .L_430af0

            lea RSI,QWORD PTR [RSP+7]
            lea RDI,QWORD PTR [RAX+2568]
            call .L_41cd80

            cmp BYTE PTR [RSP+7],0
            je .L_43d81e

            mov R13,RAX
            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d7f8:

            movzx EDX,BL
            mov RSI,R12
            mov RDI,RBP
            mov RAX,RDX
            add EBX,1
            shl RAX,4
            add RAX,RDX
            lea RDX,QWORD PTR [R13+RAX*8]
            call .L_413900

            cmp BYTE PTR [RSP+7],BL
            ja .L_43d7f8
.L_43d81e:

            cmp QWORD PTR [RBP+144],R12
            jne .L_43d832

            mov QWORD PTR [RBP+144],0
.L_43d832:

            lea RDI,QWORD PTR [RBP+96]
            mov RSI,R12
            call .L_404a30

            mov RDI,R12
            call .L_4033b0

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43d861

            add RSP,24
.L_43d85a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43d861:

            call __stack_chk_fail@PLT
.L_43d866:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d870:

            push RBX
.L_43d871:

            mov RBX,RDI
            call .L_430af0

            mov RDI,RAX
            xor EAX,EAX
            cmp BYTE PTR [RBX+220],0
            jne .L_43d8eb

            mov ECX,DWORD PTR [RBX+212]
            mov BYTE PTR [RBX+216],11
            shr ECX,11
            mov DWORD PTR [RBX+212],ECX
            movzx EAX,BYTE PTR [RDI+1668]
            mov BYTE PTR [RBX+217],AL
            movzx EAX,WORD PTR [RDI+1666]
            mov WORD PTR [RBX+218],AX
            jmp .L_43d8dd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43d8c0:

            movzx EAX,BYTE PTR [RBX+216]
            shr ECX,1
            mov DWORD PTR [RBX+212],ECX
            lea EDX,DWORD PTR [RAX+1]
            cmp DL,26
            mov BYTE PTR [RBX+216],DL
            ja .L_43d8f0
.L_43d8dd:

            test CL,1
            je .L_43d8c0

            mov BYTE PTR [RBX+220],1
            xor EAX,EAX
.L_43d8eb:

            pop RBX
.L_43d8ec:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43d8f0:

            add RDI,2568
            call .L_415150

            mov EAX,2
            pop RBX
            ret 
.L_43d903:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43d910:

            push R14
            push R13
            push R12
            push RBP
            push RBX
.L_43d918:

            mov RBX,RDI
            call .L_430af0

            lea R13,QWORD PTR [RAX+2568]
            mov R12,RAX
            mov RDI,R13
            call .L_41ad90

            test RAX,RAX
            je .L_43d9e0

            movzx EDX,BYTE PTR [RAX+26]
            mov RBP,RAX
            and EDX,7
            lea EAX,DWORD PTR [RDX-6]
            cmp AL,1
            jbe .L_43d956

            cmp DL,1
            mov EAX,2
            jne .L_43d996
.L_43d956:

            movzx R14D,WORD PTR [R12+1664]
            cmp R14W,-2
            jne .L_43d9a0
.L_43d966:

            mov RAX,QWORD PTR [R12+1656]
            mov DWORD PTR [RBX+164],2
            mov QWORD PTR [RBX+156],RAX
            mov RAX,QWORD PTR [RBP]
            mov DWORD PTR [RBX+176],2
            mov QWORD PTR [RBX+168],RAX
            xor EAX,EAX
.L_43d996:

            pop RBX
.L_43d997:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x90
.L_43d9a0:

            mov RDI,R13
            call .L_41ad80

            cmp RBP,RAX
            jne .L_43d966

            mov WORD PTR [RBX+156],R14W
            mov DWORD PTR [RBX+164],1
            movzx EAX,WORD PTR [RBP+24]
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_43d996
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43d9e0:

            pop RBX
.L_43d9e1:

            mov EAX,2
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_43d9ee:

            nop
            nop
.L_43d9f0:

            sub RSP,8
            call .L_430af0

            movzx EAX,BYTE PTR [RAX+1564]
            add RSP,8
            shr AL,6
            and EAX,1
            ret 
.L_43da0b:

            nop
            nop
            nop
            nop
            nop
.L_43da10:

            push R12
            push RBP
            mov R12D,ESI
            push RBX
            mov RBP,RDI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+1560]
            movzx ESI,R12B
            mov RBX,RAX
            call .L_407590

            test R12B,R12B
            lea RDI,QWORD PTR [RBP+264]
            jne .L_43da58

            call .L_412510

            lea RDI,QWORD PTR [RBX+11264]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42c650
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43da58:

            call .L_412380

            lea RDI,QWORD PTR [RBX+11264]
            pop RBX
            pop RBP
            pop R12
            jmp .L_42c5e0
.L_43da6d:

            nop
            nop
            nop
.L_43da70:

            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RBX,RDX
            call .L_430af0

            mov RSI,RBX
            mov RBP,RAX
            mov RDI,R12
            call .L_40f0d0

            lea RSI,QWORD PTR [RBP+1656]
            mov RDI,RBX
            call .L_408390

            test AL,AL
            je .L_43dab1

            movzx EAX,WORD PTR [RBP+1664]
            mov DWORD PTR [RBX+8],1
            mov WORD PTR [RBX],AX
.L_43dab1:

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_43dab8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dac0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_43dac7:

            mov RDI,RSI
            mov RBX,RSI
            mov RBP,RDX
            call .L_40ee50

            test AL,AL
            jne .L_43db48

            cmp WORD PTR [RBX],33022
            jne .L_43db10

            cmp WORD PTR [RBX+2],0
            jne .L_43db10

            cmp WORD PTR [RBX+4],0
            jne .L_43db10

            cmp WORD PTR [RBX+6],0
            jne .L_43db10

            cmp WORD PTR [RBX+8],0
            jne .L_43db10

            cmp WORD PTR [RBX+10],65280
            jne .L_43db10

            cmp WORD PTR [RBX+12],254
            je .L_43db2b

            nop
            nop
            nop
            nop
.L_43db10:

            mov RDI,R12
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            mov RSI,RBX
            call .L_4193e0

            test AL,AL
            je .L_43db60
.L_43db2b:

            movzx EAX,WORD PTR [RBX+14]
            mov DWORD PTR [RBP+8],1
            rol AX,8
            mov WORD PTR [RBP],AX
            xor EAX,EAX
            pop RBX
.L_43db41:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43db48:

            mov EAX,4294967295
            mov DWORD PTR [RBP+8],1
            mov WORD PTR [RBP],AX
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x90
.L_43db60:

            mov RSI,RBP
            mov RDI,RBX
            call .L_40f0d0

            pop RBX
            xor EAX,EAX
            pop RBP
            pop R12
            ret 
.L_43db72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43db80:

            push R14
            push R13
            mov R13,RSI
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,48
.L_43db92:

            mov RBP,RSP
            lea R12,QWORD PTR [RBP+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_430af0

            xor ESI,ESI
            mov RCX,RBP
            mov EDX,40
            mov RDI,R13
            mov BYTE PTR [RBX+184],0
            mov R14,RAX
            call .L_403860

            mov RDI,R12
            call .L_40ee50

            test AL,AL
            jne .L_43dc28

            lea RDX,QWORD PTR [RBX+156]
            mov RSI,R12
            mov RDI,RBX
            lea R12,QWORD PTR [RBP+24]
            call .L_43da70

            cmp DWORD PTR [R14+2580],1
            mov RDI,R12
            ja .L_43dc50

            call .L_40ee30

            test AL,AL
            jne .L_43dc0e

            mov RDI,R12
            call .L_40f150

            test AL,AL
            je .L_43dc28
.L_43dc0e:

            lea RDX,QWORD PTR [RBX+168]
            lea RSI,QWORD PTR [RBP+24]
            mov RDI,RBX
            call .L_43dac0

            xor EAX,EAX
            jmp .L_43dc2d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43dc28:

            mov EAX,2
.L_43dc2d:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43dcf0

            add RSP,48
.L_43dc45:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43dc50:

            call .L_40ee50

            test AL,AL
            je .L_43dc80

            cmp DWORD PTR [R14+2580],2
            je .L_43dcc8
.L_43dc63:

            mov EAX,4294967295
            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_43dc2d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43dc80:

            mov RDI,R12
            call .L_40ee30

            test AL,AL
            jne .L_43dc0e

            movzx EAX,BYTE PTR [R14+2624]
            and EAX,10
            cmp AL,10
            je .L_43dce0
.L_43dc9b:

            lea RDI,QWORD PTR [R14+2568]
            mov ESI,65535
            call .L_41d830

            mov DWORD PTR [RBX+176],1
            mov WORD PTR [RBX+168],AX
            xor EAX,EAX
            jmp .L_43dc2d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43dcc8:

            mov RDI,R13
            call .L_403570

            test AL,AL
            jne .L_43dc63

            jmp .L_43dc9b
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43dce0:

            mov RSI,RBP
            mov RDI,RBX
            call .L_414cd0

            jmp .L_43dc2d
.L_43dcf0:

            call __stack_chk_fail@PLT
.L_43dcf5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43dd00:

            push R14
            push R13
            lea R13,QWORD PTR [RDI+96]
            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_43dd0f:

            mov RDI,R13
            call .L_404810

            test RAX,RAX
            je .L_43ddb0

            lea R14,QWORD PTR [R12+240]
            mov RBX,RAX
.L_43dd2b:

            mov RDI,RBX
            call .L_4033c0

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+78]
            test AL,64
            je .L_43dda4

            and EAX,3
            cmp AL,1
            je .L_43de18

            jb .L_43dde8

            cmp AL,2
            jne .L_43ddc0

            mov RDI,R12
            call .L_43d910
.L_43dd5b:

            cmp EAX,3
            ja .L_43dd80

            cmp EAX,2
            jae .L_43ddc0

            test EAX,EAX
            jne .L_43de28

            mov RAX,RBX
            pop RBX
.L_43dd71:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43dd80:

            cmp EAX,9
            jne .L_43de28

            mov RSI,RBX
            mov RDI,R13
            call .L_404a30

            mov EDX,1
            mov RSI,RBX
            mov RDI,R14
            call .L_404580
.L_43dda4:

            test RBP,RBP
            mov RBX,RBP
            jne .L_43dd2b
.L_43ddb0:

            xor EBX,EBX
            mov RAX,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x90
.L_43ddc0:

            mov RSI,RBX
            mov RDI,R13
            call .L_404a30

            mov RDI,RBX
            mov RBX,RBP
            call .L_4033b0

            test RBP,RBP
            jne .L_43dd2b

            jmp .L_43ddb0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43dde8:

            mov RSI,RBX
            mov RDI,R12
            call .L_43db80

            movzx EDX,BYTE PTR [RBX+78]
            shr DL,2
            and EDX,15
            cmp DL,2
            jne .L_43dd5b

            mov RDI,R12
            call .L_43d870

            jmp .L_43dd5b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43de18:

            mov RSI,RBX
            mov RDI,R12
            call .L_414480

            jmp .L_43dd5b
.L_43de28:

            lea RCX,QWORD PTR [RIP+.L_45ac80]
            lea RSI,QWORD PTR [RIP+.L_45ab24]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,298
            call __assert_fail@PLT
.L_43de47:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43de50:

            cmp BYTE PTR [RDI+185],0
            je .L_43de60

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43de60:

            push RBX
            mov BYTE PTR [RDI+152],0
            mov RBX,RDI
            call .L_413f60

            test EAX,EAX
            jne .L_43de80
.L_43de74:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43de80:

            mov RDI,RBX
            call .L_43dd00

            test RAX,RAX
            mov QWORD PTR [RBX+144],RAX
            je .L_43de74

            cmp WORD PTR [RAX+60],0
            jne .L_43de9f

            or BYTE PTR [RAX+79],8
.L_43de9f:

            mov RDI,RBX
            mov BYTE PTR [RBX+153],4
            call .L_430af0

            lea RSI,QWORD PTR [RBX+24]
            lea RDI,QWORD PTR [RAX+1560]
            pop RBX
            jmp .L_405a80
.L_43debf:

            nop
.L_43dec0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            add RSP,8
            mov RDI,RAX
            jmp .L_43de50
.L_43dedd:

            nop
            nop
            nop
.L_43dee0:

            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RDX
            sub RSP,8
.L_43def3:

            call .L_430af0

            cmp DWORD PTR [RBX+164],1
            mov R13,RAX
            mov ESI,56427
            mov EAX,39019
            mov EDX,13
            mov RDI,RBP
            cmove ESI,EAX
            call .L_408de0

            movzx ESI,WORD PTR [R13+1666]
            mov RDI,RBP
            call .L_408550

            lea RSI,QWORD PTR [RBX+156]
            mov RDI,RBP
            call .L_4089e0

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,RBP
            call .L_4086d0

            mov RDI,RBP
            mov ESI,4
            call .L_4090e0

            movzx EAX,WORD PTR [R12+58]
            mov WORD PTR [RBX+138],AX
            add RSP,8
.L_43df68:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43df71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43df80:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,72
.L_43df97:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBX+184],0
            mov R12,RAX
            je .L_43e1e0

            movzx EAX,WORD PTR [RBX+180]
            cmp DWORD PTR [RBX+176],1
            mov DWORD PTR [RSP+52],1
            mov DWORD PTR [RSP+40],1
            mov WORD PTR [RSP+44],AX
            movzx EAX,WORD PTR [RBX+182]
            mov WORD PTR [RSP+32],AX
            mov EAX,DWORD PTR [RBX+164]
            je .L_43e21f
.L_43dff7:

            cmp EAX,1
            mov ESI,4294941729
            mov EAX,4294958113
            cmovne ESI,EAX
.L_43e007:

            movzx ECX,BYTE PTR [RBP+78]
            xor EDX,EDX
            mov EAX,ECX
            shr AL,2
            and EAX,15
            test CL,CL
            jns .L_43e033

            or ESI,8
            cmp AL,1
            mov EDX,21
            je .L_43e033

            xor EDX,EDX
            cmp AL,4
            setne DL
            lea EDX,DWORD PTR [RDX*8+5]
.L_43e033:

            cmp AL,1
            movzx ECX,WORD PTR [R12+1666]
            je .L_43e258

            jb .L_43e248

            cmp AL,3
            ja .L_43e248

            movzx R14D,WORD PTR [RBP+76]
            mov EAX,R14D
.L_43e05a:

            cmp AX,CX
            je .L_43e24c
.L_43e063:

            movzx ESI,SI
            mov RDI,R13
            call .L_408de0

            mov ESI,R14D
            mov RDI,R13
            xor R14D,R14D
            call .L_408550

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,R13
            call .L_408790

            lea RSI,QWORD PTR [RBX+168]
            mov RDI,R13
            call .L_4086d0

            lea RSI,QWORD PTR [RBX+156]
            mov RDI,R13
            call .L_4089e0

            mov RDI,R13
            call .L_4091e0

            cmp BYTE PTR [RBX+184],0
            mov R15,RAX
            jne .L_43e3c8
.L_43e0c3:

            movzx EAX,WORD PTR [RBP+60]
            test AX,AX
            je .L_43e280

            movzx EDX,WORD PTR [RBP+58]
            sub EDX,EAX
            mov EAX,192
            mov WORD PTR [R15],AX
            movzx ECX,WORD PTR [RBP+58]
            and CX,2047
            or CX,49152
            mov EAX,ECX
            rol AX,8
            mov WORD PTR [R15],AX
            movzx ESI,WORD PTR [RBP+62]
            rol SI,8
            mov WORD PTR [R15+2],SI
            movzx ESI,WORD PTR [RBP+60]
            test SI,SI
            je .L_43e121

            mov EAX,ECX
            sar ESI,3
            or AH,32
            mov BYTE PTR [R15+4],SIL
            rol AX,8
            mov WORD PTR [R15],AX
.L_43e121:

            rol AX,8
            mov RDI,R13
            mov DWORD PTR [RSP+8],EDX
            and AX,8192
            cmp AX,1
            sbb RCX,RCX
            cmp AX,1
            sbb ESI,ESI
            lea R15,QWORD PTR [R15+RCX*1+5]
            lea R14D,DWORD PTR [R14+RSI*1+5]
            call .L_409130

            mov EDX,DWORD PTR [RSP+8]
            movzx R12D,AL
            movzx EAX,R14B
            sub R12D,EAX
            movzx ESI,WORD PTR [RBP+60]
            mov RCX,R15
            and R12D,4294967288
            mov RDI,RBP
            cmp R12W,DX
            cmova R12D,EDX
            movzx EDX,R12W
            call .L_403860

            lea ESI,DWORD PTR [R14+R12*1]
            mov RDI,R13
            movzx ESI,SIL
            call .L_4091a0

            add R12W,WORD PTR [RBP+60]
            mov WORD PTR [RBX+138],R12W
.L_43e197:

            xor EAX,EAX
            cmp WORD PTR [RBP+58],R12W
            jbe .L_43e1b5

            mov ESI,1
            mov RDI,R13
            mov DWORD PTR [RSP+8],EAX
            call .L_4084e0

            mov EAX,DWORD PTR [RSP+8]
.L_43e1b5:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_43e530

            add RSP,72
.L_43e1cd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e1e0:

            mov RAX,QWORD PTR [RBX+168]
            cmp DWORD PTR [RBX+176],1
            mov QWORD PTR [RSP+32],RAX
            mov EAX,DWORD PTR [RBX+176]
            mov DWORD PTR [RSP+40],EAX
            mov RAX,QWORD PTR [RBX+156]
            mov QWORD PTR [RSP+44],RAX
            mov EAX,DWORD PTR [RBX+164]
            mov DWORD PTR [RSP+52],EAX
            mov EAX,DWORD PTR [RBX+164]
            jne .L_43dff7
.L_43e21f:

            cmp EAX,1
            mov ESI,4294940673
            mov EAX,4294957057
            cmovne ESI,EAX
            cmp WORD PTR [RBX+168],-1
            je .L_43e007

            or ESI,32
            jmp .L_43e007
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43e248:

            movzx R14D,CX
.L_43e24c:

            or ESI,64
            jmp .L_43e063
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43e258:

            movzx EAX,BYTE PTR [RBP+76]
            mov R14D,65535
            mov BYTE PTR [R13+9],AL
            mov EAX,4294967295
            movzx ECX,WORD PTR [R12+1666]
            jmp .L_43e05a
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e280:

            lea RCX,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RSP+44]
            lea RDI,QWORD PTR [R12+1552]
            mov R8,R15
            mov RSI,RBP
            call .L_43c220

            test EAX,EAX
            mov DWORD PTR [RSP+8],EAX
            jle .L_43e535

            add R14B,BYTE PTR [RSP+8]
            movzx R12D,WORD PTR [RBP+58]
            mov RDI,R13
            sub R12W,WORD PTR [RBP+60]
            call .L_409130

            movzx EAX,AL
            movzx ECX,R14B
            sub EAX,ECX
            cmp R12W,AX
            jbe .L_43e377

            cmp BYTE PTR [RBP+78],0
            jns .L_43e4f0
.L_43e2dd:

            cmp WORD PTR [RBP+62],0
            jne .L_43e308

            movzx EAX,WORD PTR [RBX+136]
            test AX,AX
            lea EDX,DWORD PTR [RAX+1]
            jne .L_43e2fd

            mov EDX,2
            mov EAX,1
.L_43e2fd:

            mov WORD PTR [RBX+136],DX
            mov WORD PTR [RBP+62],AX
.L_43e308:

            lea R8,QWORD PTR [R15+4]
            movzx EDX,R14B
            mov RSI,R15
            mov DWORD PTR [RSP+12],ECX
            mov R12D,4294967292
            add R14D,4
            mov RDI,R8
            mov QWORD PTR [RSP],R8
            call memmove@PLT

            mov RDI,R13
            call .L_409130

            mov ECX,DWORD PTR [RSP+12]
            movzx EAX,AL
            mov EDX,192
            mov WORD PTR [R15],DX
            mov R8,QWORD PTR [RSP]
            sub R12D,ECX
            add R12D,EAX
            movzx EAX,WORD PTR [RBP+58]
            and R12D,4294967288
            and AX,2047
            or AX,49152
            rol AX,8
            mov WORD PTR [R15],AX
            movzx EAX,WORD PTR [RBP+62]
            rol AX,8
            mov WORD PTR [R15+2],AX
            mov R15,R8
.L_43e377:

            movsxd RCX,DWORD PTR [RSP+8]
            movzx ESI,WORD PTR [RBP+60]
            movzx EDX,R12W
            mov RDI,RBP
            add R14D,R12D
            add RCX,R15
            call .L_403860

            movzx ESI,R14B
            mov RDI,R13
            call .L_4091a0

            add R12W,WORD PTR [RBP+60]
            xor ESI,ESI
            mov RDI,RBP
            mov WORD PTR [RBX+138],R12W
            call .L_403550

            movzx R12D,WORD PTR [RBX+138]
            jmp .L_43e197
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e3c8:

            xor ECX,ECX
            cmp DWORD PTR [R12+2580],2
            mov DWORD PTR [RSP+26],0
            mov WORD PTR [RSP+30],CX
            movzx ESI,WORD PTR [RBX+182]
            jne .L_43e440

            test SI,511
            setne DL
            add EDX,18
.L_43e3f4:

            movzx EAX,WORD PTR [RBX+180]
            rol SI,8
            mov BYTE PTR [RSP+27],DL
            mov WORD PTR [RSP+30],SI
            mov BYTE PTR [R15],191
            rol AX,8
            mov WORD PTR [RSP+28],AX
.L_43e415:

            movzx EAX,BYTE PTR [RSP+27]
            mov R14D,6
            mov BYTE PTR [R15+1],AL
            mov EAX,DWORD PTR [RSP+28]
            mov DWORD PTR [R15+2],EAX
            mov EAX,6
.L_43e431:

            add R15,RAX
            jmp .L_43e0c3
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e440:

            lea R14,QWORD PTR [R12+2568]
            mov RDI,R14
            call .L_41dad0

            cmp AL,16
            mov BYTE PTR [RSP+8],AL
            movzx ESI,WORD PTR [RBX+182]
            je .L_43e520

            mov RDI,R14
            call .L_41d830

            movzx ESI,AX
            mov RDI,R14
            sar ESI,10
            call .L_41b9f0

            movzx EDX,BYTE PTR [RSP+8]
            add EAX,EDX
.L_43e480:

            movzx ESI,WORD PTR [RBX+182]
            lea EDX,DWORD PTR [RAX+1]
            add EAX,2
            mov BYTE PTR [RSP+26],176
            test SI,511
            cmovne EDX,EAX
            cmp DL,14
            ja .L_43e3f4

            movzx EAX,WORD PTR [RBX+180]
            or EDX,4294967216
            rol SI,8
            mov BYTE PTR [RSP+26],DL
            mov BYTE PTR [R15],DL
            and EDX,15
            mov WORD PTR [RSP+30],SI
            rol AX,8
            cmp DL,15
            mov WORD PTR [RSP+28],AX
            je .L_43e415

            mov EAX,DWORD PTR [RSP+28]
            mov R14D,5
            mov DWORD PTR [R15+1],EAX
            mov EAX,5
            jmp .L_43e431
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e4f0:

            mov RDI,RBP
            mov DWORD PTR [RSP],ECX
            call .L_403570

            test AL,AL
            mov ECX,DWORD PTR [RSP]
            je .L_43e2dd

            xor ESI,ESI
            mov RDI,RBP
            call .L_403550

            mov EAX,27
            jmp .L_43e1b5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e520:

            sar ESI,10
            mov RDI,R14
            call .L_41b9f0

            jmp .L_43e480
.L_43e530:

            call __stack_chk_fail@PLT
.L_43e535:

            lea RCX,QWORD PTR [RIP+.L_45abe0]
            lea RSI,QWORD PTR [RIP+.L_45ab24]
            lea RDI,QWORD PTR [RIP+.L_45ab3e]
            mov EDX,759
            call __assert_fail@PLT
.L_43e554:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e560:

            push R13
            push R12
            mov R13D,EDX
            push RBP
            push RBX
            mov RBP,RDI
            mov RBX,RSI
            sub RSP,40
.L_43e573:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            mov R12,RAX
            movzx EAX,WORD PTR [RAX+1664]
            mov DWORD PTR [RSP+20],1
            cmp AX,-2
            mov WORD PTR [RSP+12],AX
            je .L_43e650

            cmp DWORD PTR [RBP+176],1
            mov ESI,4294940673
            mov EAX,4294941697
            cmovne ESI,EAX
.L_43e5bd:

            mov EAX,ESI
            mov EDX,13
            mov RDI,RBX
            or EAX,32
            test R13B,R13B
            cmovne ESI,EAX
            or ESI,72
            movzx ESI,SI
            call .L_408de0

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,RBX
            call .L_408550

            movzx ESI,WORD PTR [R12+1666]
            mov RDI,RBX
            call .L_408790

            lea RSI,QWORD PTR [RBP+168]
            mov RDI,RBX
            call .L_4086d0

            lea RSI,QWORD PTR [RSP+12]
            mov RDI,RBX
            call .L_4089e0

            xor ESI,ESI
            mov RDI,RBX
            call .L_4091a0

            xor ESI,ESI
            mov RDI,RBX
            call .L_4084e0

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43e67e

            add RSP,40
.L_43e643:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e650:

            mov RAX,QWORD PTR [R12+1656]
            cmp DWORD PTR [RBP+176],1
            mov ESI,4294958081
            mov DWORD PTR [RSP+20],2
            mov QWORD PTR [RSP+12],RAX
            mov EAX,4294957057
            cmove ESI,EAX
            jmp .L_43e5bd
.L_43e67e:

            call __stack_chk_fail@PLT
.L_43e683:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e690:

            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,40
.L_43e6a0:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBX+208],0
            je .L_43e7e8

            mov RSI,QWORD PTR [RBX+144]
            mov BYTE PTR [RBX+185],1
            test RSI,RSI
            je .L_43e8a0

            mov R12,RAX
            movzx EAX,BYTE PTR [RSI+78]
            mov EDX,EAX
            and EDX,3
            cmp DL,1
            je .L_43e7f0

            jb .L_43e840

            cmp DL,2
            je .L_43e890

            cmp DL,3
            jne .L_43e72c

            mov EDX,1
            mov RSI,RBP
            mov RDI,RBX
            call .L_43e560

            mov RDX,QWORD PTR [RBX+144]
            movzx EDX,WORD PTR [RDX+58]
            mov WORD PTR [RBX+138],DX
.L_43e724:

            test EAX,EAX
            jne .L_43e8bc
.L_43e72c:

            movzx EAX,BYTE PTR [RBX+152]
            mov DWORD PTR [RSP+20],0
            and EAX,1
            lea EDX,DWORD PTR [RAX*4]
            movzx EAX,BYTE PTR [RBP+13]
            and EAX,4294967291
            or EAX,EDX
            mov BYTE PTR [RBP+13],AL
            movzx EAX,BYTE PTR [RBX+153]
            mov BYTE PTR [RBP+12],AL
            cmp BYTE PTR [RBX+152],0
            je .L_43e77f

            movzx EDX,BYTE PTR [RBX+257]
            mov RAX,QWORD PTR [RBP]
            mov BYTE PTR [RAX+2],DL
            mov RAX,QWORD PTR [RBP]
            test BYTE PTR [RAX],8
            jne .L_43e800
.L_43e77f:

            lea RBX,QWORD PTR [RSP+12]
            mov RDI,RBP
            mov RSI,RBX
            call .L_4085a0

            lea RDI,QWORD PTR [R12+2568]
            mov RSI,RBX
            call .L_41cce0

            test RAX,RAX
            je .L_43e7c0

            test BYTE PTR [RAX+26],64
            jne .L_43e7c0

            movzx EAX,WORD PTR [RAX+126]
            and AX,8191
            cmp AX,1
            ja .L_43e828

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e7c0:

            xor EAX,EAX
.L_43e7c2:

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            jne .L_43e972

            add RSP,40
.L_43e7da:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e7e8:

            mov EAX,11
            jmp .L_43e7c2
          .byte 0x90
.L_43e7f0:

            mov RDX,RBP
            mov RDI,RBX
            call .L_4140f0

            jmp .L_43e724
.L_43e800:

            mov ESI,DWORD PTR [RBX+252]
            mov RDI,RBP
            call .L_408b40

            movzx ESI,BYTE PTR [RBX+256]
            mov RDI,RBP
            call .L_408d30

            jmp .L_43e77f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e828:

            mov ESI,1
            mov RDI,RBP
            call .L_4084e0

            jmp .L_43e7c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43e840:

            shr AL,2
            and EAX,15
            cmp AL,2
            je .L_43e908
.L_43e84e:

            mov RDX,RBP
            mov RDI,RBX
            call .L_43df80

            cmp EAX,27
            je .L_43e8e0
.L_43e862:

            cmp BYTE PTR [RBP+8],7
            jne .L_43e724

            lea RCX,QWORD PTR [RIP+.L_45ac40]
            lea RSI,QWORD PTR [RIP+.L_45ab24]
            lea RDI,QWORD PTR [RIP+.L_45ab4b]
            mov EDX,518
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e890:

            mov RDX,RBP
            mov RDI,RBX
            call .L_43dee0

            jmp .L_43e724
.L_43e8a0:

            xor EDX,EDX
            mov RSI,RBP
            mov RDI,RBX
            call .L_43e560

            and BYTE PTR [RBP+13],251
            mov BYTE PTR [RBP+12],4
            xor EAX,EAX
            jmp .L_43e7c2
.L_43e8bc:

            lea RCX,QWORD PTR [RIP+.L_45ac40]
            lea RSI,QWORD PTR [RIP+.L_45ab24]
            lea RDI,QWORD PTR [RIP+.L_458076]
            mov EDX,539
            call __assert_fail@PLT
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e8e0:

            mov RAX,QWORD PTR [RBX+144]
            mov RDX,RBP
            mov RDI,RBX
            or BYTE PTR [RAX+78],128
            mov RSI,QWORD PTR [RBX+144]
            call .L_43df80

            jmp .L_43e862
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43e908:

            movzx ESI,BYTE PTR [RBX+216]
            lea R13,QWORD PTR [R12+1560]
            mov RDI,R13
            call .L_405ba0

            movzx EAX,BYTE PTR [RBX+216]
            mov BYTE PTR [RBP+9],AL
            mov RSI,QWORD PTR [RBX+144]
            cmp WORD PTR [RSI+76],-1
            jne .L_43e84e

            cmp WORD PTR [R12+1666],-1
            jne .L_43e84e

            nop
            nop
            nop
            nop
            nop
.L_43e950:

            call .L_401460

            cmp AX,-1
            je .L_43e950

            movzx ESI,AX
            mov RDI,R13
            call .L_405a50

            mov RSI,QWORD PTR [RBX+144]
            jmp .L_43e84e
.L_43e972:

            call __stack_chk_fail@PLT
.L_43e977:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43e980:

            push RBX
            mov RBX,RSI
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_43e690
.L_43e99d:

            nop
            nop
            nop
.L_43e9a0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            mov EBP,EDX
            sub RSP,40
.L_43e9b6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBX+208],0
            mov DWORD PTR [RSP+20],0
            mov BYTE PTR [RBX+185],0
            je .L_43eaff

            mov RDI,QWORD PTR [RBX+144]
            mov R12,RAX
            test RDI,RDI
            je .L_43ea02

            movzx ESI,WORD PTR [RBX+138]
            call .L_403550
.L_43ea02:

            lea R14,QWORD PTR [RSP+12]
            mov RDI,R13
            add R12,2568
            mov RSI,R14
            call .L_4085a0

            mov RSI,R14
            mov RDI,R12
            call .L_41d020

            test RAX,RAX
            mov R15,RAX
            je .L_43ea60

            cmp EBP,11
            je .L_43ea60

            jbe .L_43eb90

            cmp EBP,14
            jne .L_43eb68

            movzx EAX,BYTE PTR [RAX+27]
            add EAX,1
            test WORD PTR [R15+24],511
            mov BYTE PTR [R15+27],AL
            jne .L_43ea60

            cmp AL,3
            ja .L_43ec90

            nop
            nop
            nop
            nop
.L_43ea60:

            mov RDI,RBX
            mov RCX,R14
            mov EDX,EBP
            mov RSI,R13
            call .L_414250

            mov RDI,QWORD PTR [RBX+144]
            test RDI,RDI
            je .L_43eaea

            test BYTE PTR [RDI+78],64
            je .L_43eab9

            test EBP,EBP
            jne .L_43ebf0

            movzx ESI,WORD PTR [RBX+138]
.L_43ea91:

            cmp WORD PTR [RDI+58],SI
            jbe .L_43ebb0

            call .L_403550
.L_43eaa0:

            mov RDI,QWORD PTR [RBX+144]
            movzx EAX,BYTE PTR [RDI+78]
            shr AL,2
            and EAX,15
            cmp AL,2
            je .L_43ec50
.L_43eab9:

            movzx EAX,BYTE PTR [RDI+78]
            and EAX,3
            cmp AL,2
            je .L_43ec20
.L_43eac8:

            movzx EAX,WORD PTR [RDI+58]
            cmp WORD PTR [RBX+138],AX
            jb .L_43eae4

            test EBP,EBP
            jne .L_43ec10

            add DWORD PTR [RBX+224],1
.L_43eae4:

            test BYTE PTR [RDI+78],64
            je .L_43eb28
.L_43eaea:

            cmp BYTE PTR [RBX+208],0
            je .L_43eaff

            lea RDI,QWORD PTR [RBX+192]
            call .L_404bc0
.L_43eaff:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43eca0

            add RSP,40
.L_43eb17:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43eb28:

            call .L_4041d0

            test AL,AL
            jne .L_43eaea

            mov RSI,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [RBX+96]
            call .L_404a30

            mov RDI,QWORD PTR [RBX+144]
            call .L_4033b0

            xor EAX,EAX
            mov QWORD PTR [RBX+144],0
            mov WORD PTR [RBX+138],AX
            jmp .L_43eaea
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43eb68:

            cmp EBP,15
            je .L_43ea60
.L_43eb71:

            lea RCX,QWORD PTR [RIP+.L_45ab80]
            lea RSI,QWORD PTR [RIP+.L_45ab24]
            lea RDI,QWORD PTR [RIP+.L_458070]
            mov EDX,940
            call __assert_fail@PLT
.L_43eb90:

            test EBP,EBP
            jne .L_43eb71

            mov RAX,QWORD PTR [R13]
            test BYTE PTR [RAX],32
            je .L_43ea60

            mov BYTE PTR [R15+27],0
            jmp .L_43ea60
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ebb0:

            and BYTE PTR [RDI+78],191
            xor ESI,ESI
            mov RDI,QWORD PTR [RBX+144]
            call .L_403550

            test R15,R15
            je .L_43eaa0

            mov RAX,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [R15+34]
            mov EDX,128
            movzx ESI,BYTE PTR [RAX+79]
            shr SIL,3
            and ESI,1
            call .L_412ed0

            jmp .L_43eaa0
.L_43ebf0:

            and BYTE PTR [RDI+79],247
            mov RDI,QWORD PTR [RBX+144]
            movzx ESI,WORD PTR [RDI+58]
            mov WORD PTR [RBX+138],SI
            jmp .L_43ea91
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ec10:

            add DWORD PTR [RBX+232],1
            jmp .L_43eae4
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43ec20:

            mov RDI,R12
            call .L_41ad90

            test BYTE PTR [RAX+26],7
            lea RDI,QWORD PTR [RBX+264]
            jne .L_43ec78

            call .L_412380

            mov RDI,R12
            call .L_415e50

            mov RDI,QWORD PTR [RBX+144]
            jmp .L_43eac8
          .byte 0x66
          .byte 0x90
.L_43ec50:

            mov BYTE PTR [RBX+185],1
            call .L_401240

            lea RDI,QWORD PTR [RBX+48]
            mov EDX,300
            mov ESI,EAX
            call .L_430d50

            jmp .L_43eaea
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ec78:

            mov ESI,EBP
            call .L_4127a0

            mov RDI,QWORD PTR [RBX+144]
            jmp .L_43eac8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ec90:

            mov RSI,R15
            mov RDI,R12
            call .L_420c20

            jmp .L_43ea60
.L_43eca0:

            call __stack_chk_fail@PLT
.L_43eca5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ecb0:

            push RBP
            push RBX
            mov EBP,EDX
            mov RBX,RSI
            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            add RSP,8
            mov EDX,EBP
            mov RSI,RBX
            pop RBX
            pop RBP
            mov RDI,RAX
            jmp .L_43e9a0
.L_43ecdb:

            nop
            nop
            nop
            nop
            nop
.L_43ece0:

            test ESI,ESI
            mov EAX,4294967295
            cmove ESI,EAX
            mov DWORD PTR [RDI+212],ESI
            ret 
.L_43ecf1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ed00:

            push R12
            push RBP
            push RBX
.L_43ed04:

            mov RBX,RDI
            call .L_430af0

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+216]
            mov EDX,DWORD PTR [RBX+212]
            add EAX,1
            jmp .L_43ed36
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ed28:

            test DL,1
            lea ECX,DWORD PTR [RAX+1]
            jne .L_43edc0

            mov EAX,ECX
.L_43ed36:

            shr EDX,1
            cmp AL,26
            jbe .L_43ed28

            mov RSI,QWORD PTR [RBX+144]
            lea RDI,QWORD PTR [RBX+96]
            mov DWORD PTR [RBX+212],EDX
            mov BYTE PTR [RBX+216],AL
            lea R12,QWORD PTR [RBP+1560]
            call .L_404a30

            mov RDI,QWORD PTR [RBX+144]
            call .L_4033b0

            movzx ESI,BYTE PTR [RBX+217]
            mov RDI,R12
            mov QWORD PTR [RBX+144],0
            call .L_405ba0

            movzx ESI,WORD PTR [RBX+218]
            mov RDI,R12
            call .L_405a50

            lea RDI,QWORD PTR [RBP+2568]
            mov BYTE PTR [RBX+220],0
            call .L_415150
.L_43eda7:

            mov BYTE PTR [RBX+185],0
            lea RDI,QWORD PTR [RBX+192]
            pop RBX
.L_43edb6:

            pop RBP
            pop R12
            jmp .L_404bc0
          .byte 0x66
          .byte 0x90
.L_43edc0:

            mov BYTE PTR [RBX+216],AL
            mov RAX,QWORD PTR [RBX+144]
            mov DWORD PTR [RBX+212],EDX
            or BYTE PTR [RAX+78],64
            jmp .L_43eda7
.L_43edd9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ede0:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            add RSP,8
            mov RDI,RAX
            jmp .L_43ed00
.L_43edfd:

            nop
            nop
            nop
.L_43ee00:

            push R13
            lea R13,QWORD PTR [RDI+128]
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov RDI,R13
            sub RSP,8
.L_43ee17:

            call .L_404570

            test RAX,RAX
            je .L_43ee55

            mov RBX,RAX
            nop
            nop
            nop
            nop
.L_43ee28:

            mov RDI,RBX
            call .L_4033c0

            mov RSI,RBX
            mov RDI,R13
            mov R12,RAX
            call .L_404640

            add DWORD PTR [RBP+236],1
            mov RDI,RBX
            mov RBX,R12
            call .L_4033b0

            test R12,R12
            jne .L_43ee28
.L_43ee55:

            add RSP,8
.L_43ee59:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43ee60:

            push R13
            lea R13,QWORD PTR [RDI+128]
            push R12
            push RBP
            push RBX
            mov R12,RDI
            mov RDI,R13
            sub RSP,8
.L_43ee77:

            call .L_404570

            test RAX,RAX
            mov RBX,RAX
            jne .L_43ee9e

            jmp .L_43eed5
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ee90:

            sub EAX,1
            test RBP,RBP
            mov BYTE PTR [RBX+74],AL
            mov RBX,RBP
            je .L_43eed5
.L_43ee9e:

            mov RDI,RBX
            call .L_4033c0

            mov RBP,RAX
            movzx EAX,BYTE PTR [RBX+74]
            test AL,AL
            jne .L_43ee90

            mov RSI,RBX
            mov RDI,R13
            call .L_404640

            add DWORD PTR [R12+236],1
            mov RDI,RBX
            mov RBX,RBP
            call .L_4033b0

            test RBP,RBP
            jne .L_43ee9e
.L_43eed5:

            mov RDI,R13
            call .L_404570

            test RAX,RAX
            je .L_43ef08

            call .L_401240

            add RSP,8
.L_43eeeb:

            lea RDI,QWORD PTR [R12+72]
            mov EDX,1000
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov ESI,EAX
            jmp .L_430d50
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43ef08:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_43ef13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43ef20:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            add RSP,8
            mov RDI,RAX
            jmp .L_43ee60
.L_43ef3d:

            nop
            nop
            nop
.L_43ef40:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            sub RSP,8
            call .L_430af0

            add DWORD PTR [RBP+228],1
            mov RBX,RAX
            mov RDI,RAX
            call .L_430ad0

            movsx ECX,BYTE PTR [RBX+24]
            add RSP,8
            mov R8,R13
            mov RDX,RBX
            mov RSI,R12
            xor R9D,R9D
            pop RBX
            pop RBP
            pop R12
            pop R13
            mov RDI,RAX
            jmp .L_40e470
.L_43ef8c:

            nop
            nop
            nop
            nop
.L_43ef90:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R13,R9
            push RBP
            push RBX
            mov RBP,RDI
            mov R12,RSI
            mov EBX,EDX
            sub RSP,40
.L_43efac:

            mov QWORD PTR [RSP],RCX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_430af0

            lea RDI,QWORD PTR [RSP+19]
            movzx EDX,BL
            mov RSI,R12
            mov R14,RAX
            mov DWORD PTR [RSP+19],192
            mov BYTE PTR [RSP+23],0
            call .L_43d460

            test EAX,EAX
            jne .L_43f0d5

            movzx EAX,WORD PTR [RSP+19]
            rol AX,8
            test AH,32
            je .L_43f100

            sub EBX,5
            cmp BYTE PTR [RSP+23],0
            lea RAX,QWORD PTR [R12+5]
            mov QWORD PTR [RSP+8],RAX
            jne .L_43f118
.L_43f017:

            mov RDI,RBP
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403740

            test RAX,RAX
            mov R12,RAX
            je .L_43f0d5

            movzx EDX,BYTE PTR [R13+5]
            movzx EAX,BYTE PTR [RAX+78]
            lea RDI,QWORD PTR [R12+64]
            shl EDX,7
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [R12+78],AL
            movzx EAX,WORD PTR [R13]
            mov WORD PTR [R12+76],AX
            movsx ESI,BYTE PTR [R13+3]
            call .L_412f10

            sub RSP,8
.L_43f06f:

            lea RDI,QWORD PTR [R14+1552]
            mov RCX,R15
            movzx EAX,WORD PTR [RSP+27]
            movzx R9D,BL
            mov RSI,R12
            rol AX,8
            and EAX,2047
            push RAX
            mov R8,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RSP+16]
            call .L_43d100

            mov R15D,EAX
            test R15D,R15D
            pop RAX
            pop RDX
.L_43f0a6:

            jle .L_43f0cd

            movzx ESI,WORD PTR [RSP+19]
            movzx EAX,WORD PTR [R12+60]
            sub EBX,R15D
            movzx EBX,BL
            rol SI,8
            add EAX,EBX
            and ESI,2047
            cmp ESI,EAX
            jge .L_43f220
.L_43f0cd:

            mov RDI,R12
            call .L_4033b0
.L_43f0d5:

            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43f30a

            add RSP,40
.L_43f0ed:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f100:

            lea RAX,QWORD PTR [R12+4]
            sub EBX,4
            mov QWORD PTR [RSP+8],RAX
            jmp .L_43f017
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f118:

            lea R15,QWORD PTR [RBP+128]
            mov RDI,R15
            call .L_404570

            test RAX,RAX
            mov R12,RAX
            jne .L_43f14c

            jmp .L_43f1f0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_43f138:

            mov RDI,R12
            call .L_4033c0

            test RAX,RAX
            mov R12,RAX
            je .L_43f1f0
.L_43f14c:

            movzx EAX,WORD PTR [RSP+19]
            movzx EDX,WORD PTR [R12+58]
            rol AX,8
            mov ECX,EAX
            and CX,2047
            cmp DX,CX
            jne .L_43f138

            movzx ECX,WORD PTR [RSP+21]
            rol CX,8
            cmp WORD PTR [R12+62],CX
            jne .L_43f138

            xor ESI,ESI
            test AH,32
            movzx ECX,WORD PTR [R12+60]
            je .L_43f18d

            movzx ESI,BYTE PTR [RSP+23]
            shl ESI,3
.L_43f18d:

            cmp CX,SI
            jne .L_43f138

            movzx R14D,BL
            add ECX,R14D
            cmp ECX,EDX
            jg .L_43f138

            movzx EAX,BYTE PTR [R12+78]
            shr AL,7
            cmp BYTE PTR [R13+5],AL
            jne .L_43f138

            mov RDI,RBP
            call .L_430af0

            movzx ESI,WORD PTR [R12+60]
            mov RCX,QWORD PTR [RSP+8]
            mov EDX,R14D
            mov RDI,R12
            call .L_403ac0

            mov ESI,R14D
            mov RDI,R12
            call .L_4034e0

            movsx ESI,BYTE PTR [R13+3]
            lea RDI,QWORD PTR [R12+64]
            call .L_412f10

            jmp .L_43f2c0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f1f0:

            mov RDI,RBP
            call .L_430af0

            test BYTE PTR [RAX+1564],64
            jne .L_43f0d5

            cmp BYTE PTR [R13+5],0
            je .L_43f0d5

            mov RDI,RBP
            call .L_43ee00

            jmp .L_43f0d5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43f220:

            mov RDI,R12
            call .L_403420

            test EAX,EAX
            jne .L_43f0cd

            movzx EAX,WORD PTR [RSP+21]
            movzx ESI,WORD PTR [R12+60]
            movsxd RCX,R15D
            add RCX,QWORD PTR [RSP+8]
            mov EDX,EBX
            mov RDI,R12
            mov BYTE PTR [R12+74],5
            rol AX,8
            mov WORD PTR [R12+62],AX
            call .L_403ac0

            mov ESI,EBX
            mov RDI,R12
            call .L_4034e0

            lea RDI,QWORD PTR [R14+1360]
            mov RSI,R12
            call .L_40f480

            test AL,AL
            je .L_43f0cd

            mov RDI,RBP
            call .L_430af0

            test BYTE PTR [RAX+1564],64
            jne .L_43f29f

            cmp BYTE PTR [R12+78],0
            jns .L_43f29f

            mov RDI,RBP
            call .L_43ee00
.L_43f29f:

            lea R15,QWORD PTR [RBP+128]
            mov EDX,1
            mov RSI,R12
            lea RBX,QWORD PTR [RBP+72]
            mov RDI,R15
            call .L_404580

            cmp RBX,QWORD PTR [RBP+88]
            je .L_43f2f4
.L_43f2c0:

            movzx EAX,WORD PTR [R12+60]
            cmp WORD PTR [R12+58],AX
            ja .L_43f0d5

            mov RSI,R12
            mov RDI,R15
            call .L_404640

            mov RCX,QWORD PTR [RSP]
            mov RDX,R13
            mov RSI,R12
            mov RDI,RBP
            call .L_43ef40

            jmp .L_43f0d5
.L_43f2f4:

            call .L_401240

            mov EDX,1000
            mov ESI,EAX
            mov RDI,RBX
            call .L_430d50

            jmp .L_43f2c0
.L_43f30a:

            call __stack_chk_fail@PLT
.L_43f30f:

            nop
.L_43f310:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R12D,EDX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,R9
            sub RSP,24
.L_43f32a:

            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RCX
            call .L_430af0

            mov RDI,RBX
            mov R13,RAX
            call .L_430ac0

            lea RDI,QWORD PTR [RAX+24624]
            xor EDX,EDX
            xor ESI,ESI
            call .L_403740

            test RAX,RAX
            je .L_43f440

            mov R14,RAX
            movzx EAX,BYTE PTR [RBP+5]
            lea RDI,QWORD PTR [R14+64]
            shl EAX,7
            mov EDX,EAX
            movzx EAX,BYTE PTR [R14+78]
            and EAX,127
            or EAX,EDX
            mov BYTE PTR [R14+78],AL
            movzx EAX,WORD PTR [RBP]
            mov WORD PTR [R14+76],AX
            movsx ESI,BYTE PTR [RBP+3]
            call .L_412f10

            sub RSP,8
.L_43f390:

            lea RDI,QWORD PTR [R13+1552]
            mov RCX,R15
            push 0
            mov R8,QWORD PTR [RSP+16]
            movzx R9D,R12B
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R14
            call .L_43d100

            mov R15D,EAX
            test R15D,R15D
            pop RAX
            pop RDX
            jg .L_43f3d8
.L_43f3bc:

            add RSP,24
            mov RDI,R14
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_4033b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f3d8:

            sub R12D,R15D
            mov RDI,R14
            movzx ESI,R12B
            add SI,WORD PTR [R14+58]
            movzx ESI,SI
            call .L_403420

            test EAX,EAX
            jne .L_43f3bc

            movzx ESI,WORD PTR [R14+60]
            movsxd RCX,R15D
            add RCX,QWORD PTR [RSP]
            movzx EDX,R12B
            mov RDI,R14
            call .L_403ac0

            lea RDI,QWORD PTR [R13+1360]
            mov RSI,R14
            call .L_40f480

            test AL,AL
            je .L_43f3bc

            mov RCX,QWORD PTR [RSP+8]
            add RSP,24
.L_43f427:

            mov RDX,RBP
            mov RSI,R14
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_43ef40
          .byte 0x90
.L_43f440:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_43f44f:

            nop
.L_43f450:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,72
.L_43f464:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            call .L_430af0

            cmp BYTE PTR [RBX+208],0
            mov DWORD PTR [RSP+40],0
            mov DWORD PTR [RSP+52],0
            jne .L_43f4b8
.L_43f492:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43f647

            add RSP,72
.L_43f4aa:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43f4b8:

            lea R13,QWORD PTR [RSP+44]
            mov RDI,RBP
            mov R12,RAX
            mov RSI,R13
            call .L_408800

            test EAX,EAX
            jne .L_43f492

            lea R14,QWORD PTR [RSP+32]
            mov RDI,RBP
            mov RSI,R14
            call .L_4085a0

            test EAX,EAX
            jne .L_43f492

            lea RAX,QWORD PTR [RSP+26]
            mov RDI,RBP
            mov RSI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_408760

            movzx EAX,BYTE PTR [RBP+9]
            mov RDI,RBP
            mov BYTE PTR [RSP+28],AL
            movzx EAX,BYTE PTR [RBP+10]
            mov BYTE PTR [RSP+29],AL
            movzx EAX,BYTE PTR [RBP+11]
            mov BYTE PTR [RSP+30],AL
            mov RAX,QWORD PTR [RBP]
            movzx EAX,BYTE PTR [RAX]
            shr AL,3
            and EAX,1
            mov BYTE PTR [RSP+31],AL
            call .L_4091e0

            mov RDI,RBP
            mov R15,RAX
            call .L_409160

            movzx EDX,BYTE PTR [RSP+31]
            lea RDI,QWORD PTR [R12+11264]
            mov RSI,R13
            mov BYTE PTR [RSP+7],AL
            call .L_42c6b0

            lea RDI,QWORD PTR [RBX+264]
            mov RSI,RBP
            call .L_412730

            mov RDX,QWORD PTR [RBP]
            movzx EAX,BYTE PTR [RSP+7]
            movzx EDX,BYTE PTR [RDX]
            and EDX,7
            cmp DL,1
            je .L_43f5b0

            cmp DL,3
            jne .L_43f492

            lea RSI,QWORD PTR [RSP+25]
            mov RDI,RBP
            call .L_409070

            cmp BYTE PTR [RSP+25],4
            jne .L_43f492

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,RBX
            call .L_4141d0

            jmp .L_43f492
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43f5b0:

            cmp AL,5
            jbe .L_43f602

            movzx EDX,BYTE PTR [R15]
            and EDX,4294967232
            cmp DL,128
            je .L_43f60e
.L_43f5c0:

            movzx EDX,WORD PTR [R15]
            rol DX,8
            and DX,55296
            cmp DX,49152
            je .L_43f629
.L_43f5d4:

            movzx EDX,BYTE PTR [R15]
            and EDX,4294967264
            cmp DL,96
            jne .L_43f492

            mov R9,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov R8,R14
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_43f310

            jmp .L_43f492
.L_43f602:

            je .L_43f5c0

            test AL,AL
            je .L_43f492

            jmp .L_43f5d4
.L_43f60e:

            mov R8,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_4148c0

            jmp .L_43f492
.L_43f629:

            mov R9,QWORD PTR [RSP+8]
            movzx EDX,AL
            mov R8,R14
            mov RCX,R13
            mov RSI,R15
            mov RDI,RBX
            call .L_43ef90

            jmp .L_43f492
.L_43f647:

            call __stack_chk_fail@PLT
.L_43f64c:

            nop
            nop
            nop
            nop
.L_43f650:

            push RBX
            mov RBX,RSI
            call .L_402840

            mov RDI,RAX
            call .L_402a00

            mov RSI,RBX
            mov RDI,RAX
            pop RBX
            jmp .L_43f450
.L_43f66d:

            nop
            nop
            nop
.L_43f670:

            ret 
.L_43f672:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f680:

            mov EAX,4294967295
            push RBX

            mov RBX,RDI
            mov WORD PTR [RDI+20],AX
            lea RAX,QWORD PTR [RIP+.L_43fb10]
            mov DWORD PTR [RDI+16],0
            mov DWORD PTR [RDI+32],0
            mov QWORD PTR [RDI+24],RAX
            lea RAX,QWORD PTR [RDI+24]
            mov QWORD PTR [RDI+40],RAX
            lea RAX,QWORD PTR [RIP+.L_45aa4d]
            mov QWORD PTR [RDI+48],RAX
            lea RAX,QWORD PTR [RIP+.L_43f850]
            mov QWORD PTR [RDI+56],RAX
            mov QWORD PTR [RBX+64],RDI
            mov QWORD PTR [RDI+72],0
            call .L_430af0

            lea RSI,QWORD PTR [RBX+48]
            lea RDI,QWORD PTR [RAX+216]
            pop RBX

            jmp .L_42d6f0
.L_43f6e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f6f0:

            push R14
            push R13
            xor R8D,R8D
            push R12
            push RBP
            push RBX
            sub RSP,80
.L_43f6ff:

            movdqu XMM0,XMMWORD PTR [RCX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            xor EAX,EAX
            cmp BYTE PTR [RSI+1],2
            mov WORD PTR [RSP+8],R8W
            movdqu XMM0,XMMWORD PTR [RCX+16]
            mov WORD PTR [RSP+4],AX
            movaps XMMWORD PTR [RSP+32],XMM0
            movdqu XMM0,XMMWORD PTR [RCX+32]
            movaps XMMWORD PTR [RSP+48],XMM0
            je .L_43f760
.L_43f73f:

            mov RAX,QWORD PTR [RSP+72]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43f848

            add RSP,80
.L_43f757:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_43f760:

            lea R14,QWORD PTR [RSP+8]
            mov R12,RDX
            mov R13,RDI
            mov RBP,RSI
            mov RBX,RCX
            mov EDX,8
            mov RCX,R14
            mov ESI,53
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43f73f

            cmp BYTE PTR [RSP+9],6
            jne .L_43f73f

            cmp BYTE PTR [RSP+10],0
            jne .L_43f73f

            cmp BYTE PTR [RSP+11],4
            jne .L_43f73f

            lea RCX,QWORD PTR [RSP+4]
            mov EDX,4
            mov ESI,1
            mov RDI,R12
            call .L_430f70

            test EAX,EAX
            jne .L_43f73f

            cmp BYTE PTR [RSP+5],2
            jne .L_43f73f

            mov RDI,R14
            call .L_437d30

            mov DWORD PTR [R13+16],EAX
            movzx EAX,WORD PTR [RSP+6]
            movdqu XMM0,XMMWORD PTR [RBX+16]
            movups XMMWORD PTR [R13],XMM0
            rol AX,8
            mov WORD PTR [R13+20],AX
            call .L_401240

            lea RDI,QWORD PTR [R13+24]
            mov EDX,1000
            mov ESI,EAX
            call .L_430d50

            test BYTE PTR [RBP],48
            jne .L_43f73f

            mov RDI,RBX
            call .L_40ee50

            test AL,AL
            jne .L_43f73f

            mov RDI,R13
            call .L_430af0

            test BYTE PTR [RBP],48
            jne .L_43f73f

            lea RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+216]
            mov RDX,RBP
            mov ESI,68
            call .L_42e970

            jmp .L_43f73f
.L_43f848:

            call __stack_chk_fail@PLT
.L_43f84d:

            nop
            nop
            nop
.L_43f850:

            jmp .L_43f6f0
.L_43f855:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43f860:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,240
.L_43f872:

            lea R14,QWORD PTR [RSP+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            call .L_430af0

            pxor XMM0,XMM0
            xor ESI,ESI
            xor ECX,ECX
            mov EDX,2
            mov RDI,R14
            mov WORD PTR [RSP+20],SI
            xor ESI,ESI
            mov WORD PTR [RSP+24],CX
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RBP,RAX
            movaps XMMWORD PTR [RSP+48],XMM0
            lea R12,QWORD PTR [RBP+216]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_42f0e0

            mov RDI,R14
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45aa48]
            mov RDI,R14
            call .L_42f620

            mov RDI,R14
            call .L_42f8d0

            xor EDX,EDX
            mov RSI,R14
            mov RDI,R12
            call .L_42d7b0

            mov R14,RAX
            mov EAX,3
            test R14,R14
            je .L_43f9a3

            mov EDX,DWORD PTR [RBX+16]
            lea RSI,QWORD PTR [RSP+24]
            mov RDI,R14
            mov DWORD PTR [RSP+24],67110453
            lea EAX,DWORD PTR [RDX+RDX*1]
            shr EDX,1
            and EDX,1431655765
            and EAX,2863311530
            or EAX,EDX
            lea EDX,DWORD PTR [RAX*4]
            shr EAX,2
            and EAX,858993459
            and EDX,3435973836
            or EDX,EAX
            mov EAX,EDX
            shr EDX,4
            shl EAX,4
            and EDX,252645135
            and EAX,4042322160
            or EAX,EDX
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+28],EAX
            call .L_403d30

            test EAX,EAX
            je .L_43f9d0
.L_43f993:

            mov RDI,R14
            mov DWORD PTR [RSP+12],EAX
            call .L_4033b0

            mov EAX,DWORD PTR [RSP+12]
.L_43f9a3:

            mov RBX,QWORD PTR [RSP+232]
            xor RBX,QWORD PTR FS:[40]
            jne .L_43fa4a

            add RSP,240
.L_43f9c1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_43f9d0:

            movzx EAX,WORD PTR [RBX+20]
            mov EDX,513
            lea RSI,QWORD PTR [RSP+20]
            mov WORD PTR [RSP+20],DX
            mov RDI,R14
            mov EDX,4
            rol AX,8
            mov WORD PTR [RSP+22],AX
            call .L_403d30

            test EAX,EAX
            jne .L_43f993

            lea RDI,QWORD PTR [RBP+2568]
            lea R13,QWORD PTR [RSP+32]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            xor R8D,R8D
            mov EAX,4294963391
            xor ECX,ECX
            mov RDX,R13
            movaps XMMWORD PTR [RSP+32],XMM0
            mov RSI,R14
            mov RDI,R12
            mov WORD PTR [RSP+66],AX
            movdqu XMM0,XMMWORD PTR [RBX]
            movaps XMMWORD PTR [RSP+48],XMM0
            call .L_42e6e0

            test EAX,EAX
            je .L_43f9a3

            jmp .L_43f993
.L_43fa4a:

            call __stack_chk_fail@PLT
.L_43fa4f:

            nop
.L_43fa50:

            push RBP
            push RBX
            mov RBP,RDI
            sub RSP,24
.L_43fa59:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            test RSI,RSI
            je .L_43faa0

            mov RBX,RSI
            lea RSI,QWORD PTR [RSP+6]
            mov RDI,RBX
            call .L_408760

            movzx EAX,WORD PTR [RSP+6]
            cmp WORD PTR [RBP+20],AX
            je .L_43fab0
.L_43fa89:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43fac0

            add RSP,24
.L_43fa9d:

            pop RBX
            pop RBP
            ret 
.L_43faa0:

            mov EAX,DWORD PTR [RDI+16]
            test EAX,EAX
            je .L_43fa89

            call .L_43f860

            jmp .L_43fa89
          .byte 0x66
          .byte 0x90
.L_43fab0:

            movzx ECX,BYTE PTR [RBX+9]
            mov EAX,1
            shl EAX,CL
            or DWORD PTR [RBP+16],EAX
            jmp .L_43fa89
.L_43fac0:

            call __stack_chk_fail@PLT
.L_43fac5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43fad0:

            jmp .L_43fa50
.L_43fad5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43fae0:

            push RBX
            mov RBX,RDI
            call .L_430af0

            mov ESI,DWORD PTR [RBX+16]
            lea RDI,QWORD PTR [RAX+1560]
            lea RCX,QWORD PTR [RIP+.L_43fad0]
            mov R8,RBX
            xor EDX,EDX
            call .L_405c90

            mov DWORD PTR [RBX+16],0
            pop RBX
            ret 
.L_43fb0d:

            nop
            nop
            nop
.L_43fb10:

            sub RSP,8
            call .L_402840

            mov RDI,RAX
            call .L_402ad0

            add RSP,8
            mov RDI,RAX
            jmp .L_43fae0
.L_43fb2a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_43fb30:

            push R15
            push R14
            push R13
            push R12
            mov R13D,R8D
            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,ESI
            mov R12D,ECX
            mov RSI,RDX
            sub RSP,184
.L_43fb4f:

            movzx EDX,CX
            mov ECX,34
            mov RAX,QWORD PTR [RSP+240]
            lea R14,QWORD PTR [RSP+128]
            mov WORD PTR [RSP+14],R9W
            mov DWORD PTR [RSP+8],R9D
            mov RDI,R14
            mov QWORD PTR [RSP+16],RAX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            call __memcpy_chk@PLT

            test R13B,1
            mov R9D,DWORD PTR [RSP+8]
            jne .L_43fe18

            test R9W,R9W
            jne .L_43fbd0
.L_43fba7:

            mov RAX,QWORD PTR [RSP+168]
            xor RAX,QWORD PTR FS:[40]
            jne .L_43fe37

            add RSP,184
.L_43fbc5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_43fbd0:

            movzx R12D,R12W
            mov EDI,R13D
            lea R13,QWORD PTR [RSP+96]
            lea EAX,DWORD PTR [R12+3]
            lea ESI,DWORD PTR [R12+4]
            lea ECX,DWORD PTR [R12+1]
            lea EDX,DWORD PTR [R12+2]
            shr EDI,1
            mov QWORD PTR [RSP+72],R14
            cdqe 
            movsxd RSI,ESI
            movsxd RCX,ECX
            mov QWORD PTR [RSP+56],RAX
            lea RAX,QWORD PTR [RSP+112]
            mov QWORD PTR [RSP+32],RSI
            movsxd RDX,EDX
            movsxd RSI,R12D
            lea R12,QWORD PTR [RSP+80]
            movzx EBX,BX
            mov DWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+40],RSI
            mov QWORD PTR [RSP+64],RCX
            mov QWORD PTR [RSP+48],RDX
            mov R14D,EDI
            mov QWORD PTR [RSP+24],RAX
.L_43fc3b:

            add DWORD PTR [RSP+8],1
            mov RSI,QWORD PTR [RSP+40]
            mov EDI,DWORD PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+64]
            mov RDX,QWORD PTR [RSP+56]
            mov R15,QWORD PTR [RSP+24]
            mov EAX,EDI
            shr EAX,24
            mov R8,R15
            mov BYTE PTR [RSP+RSI*1+128],AL
            mov RSI,QWORD PTR [RSP+48]
            mov EAX,EDI
            shr EAX,16
            mov BYTE PTR [RSP+RCX*1+128],AL
            mov EAX,EDI
            mov RCX,QWORD PTR [RSP+32]
            mov BYTE PTR [RSP+RSI*1+128],AH
            mov BYTE PTR [RSP+RDX*1+128],DIL
            mov RSI,RBX
            mov RDX,QWORD PTR [RSP+72]
            mov RDI,RBP
            call .L_4425f0

            mov R8,R12
            mov ECX,16
            mov RDX,R15
            mov RSI,RBX
            mov RDI,RBP
            call .L_4425f0

            mov RAX,QWORD PTR [RSP+80]
            xor QWORD PTR [RSP+112],RAX
            mov RAX,QWORD PTR [RSP+88]
            xor QWORD PTR [RSP+120],RAX
            cmp R14D,1
            jbe .L_43fd35

            mov R15D,1
            nop
            nop
            nop
            nop
.L_43fcd8:

            mov R8,R13
            mov ECX,16
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            add R15D,1
            call .L_4425f0

            mov R8,R12
            mov ECX,16
            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBP
            call .L_4425f0

            mov RAX,QWORD PTR [RSP+112]
            xor RAX,QWORD PTR [RSP+80]
            xor RAX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+112],RAX
            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR [RSP+88]
            xor RAX,QWORD PTR [RSP+104]
            cmp R14D,R15D
            mov QWORD PTR [RSP+120],RAX
            jne .L_43fcd8
.L_43fd35:

            movzx ECX,WORD PTR [RSP+14]
            mov EAX,16
            cmp CX,16
            cmovbe EAX,ECX
            movzx ESI,AX
            cmp ESI,8
            jae .L_43fda8

            test SIL,4
            jne .L_43fdfb

            test ESI,ESI
            je .L_43fd90

            mov RCX,QWORD PTR [RSP+24]
            test SIL,2
            movzx EDX,BYTE PTR [RCX]
            mov RCX,QWORD PTR [RSP+16]
            mov BYTE PTR [RCX],DL
            je .L_43fd90

            mov RCX,QWORD PTR [RSP+24]
            mov EDX,ESI
            mov RDI,QWORD PTR [RSP+16]
            movzx ECX,WORD PTR [RCX+RDX*1-2]
            mov WORD PTR [RDI+RDX*1-2],CX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43fd90:

            add QWORD PTR [RSP+16],RSI
            sub WORD PTR [RSP+14],AX
            je .L_43fba7

            jmp .L_43fc3b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_43fda8:

            mov R11,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [R11]
            mov QWORD PTR [RDI],RDX
            mov EDX,ESI
            mov RCX,QWORD PTR [R11+RDX*1-8]
            mov QWORD PTR [RDI+RDX*1-8],RCX
            lea RCX,QWORD PTR [RDI+8]
            and RCX,-8
            sub RDI,RCX
            mov RDX,RDI
            sub R11,RDI
            add EDX,ESI
            mov R9,R11
            and EDX,4294967288
            cmp EDX,8
            jb .L_43fd90

            and EDX,4294967288
            xor EDI,EDI
.L_43fde7:

            mov R8D,EDI
            add EDI,8
            mov R10,QWORD PTR [R9+R8*1]
            cmp EDI,EDX
            mov QWORD PTR [RCX+R8*1],R10
            jb .L_43fde7

            jmp .L_43fd90
.L_43fdfb:

            mov RCX,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov EDX,DWORD PTR [RCX]
            mov DWORD PTR [RDI],EDX
            mov EDX,ESI
            mov ECX,DWORD PTR [RCX+RDX*1-4]
            mov DWORD PTR [RDI+RDX*1-4],ECX
            jmp .L_43fd90
.L_43fe18:

            lea RCX,QWORD PTR [RIP+.L_45ad00]
            lea RSI,QWORD PTR [RIP+.L_45acb8]
            lea RDI,QWORD PTR [RIP+.L_45accf]
            mov EDX,62
            call __assert_fail@PLT
.L_43fe37:

            call __stack_chk_fail@PLT
.L_43fe3c:

            nop
            nop
            nop
            nop
.L_43fe40:

            ret 
.L_43fe42:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_43fe50:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            xor R9D,R9D
            push R12
            push RBP
            xor R10D,R10D
            push RBX
            xor R11D,R11D
            mov R13,R8
            xor R8D,R8D
            mov R14D,EDX
            mov RBX,RDI
            sub RSP,264
.L_43fe7a:

            mov EBP,ESI
            mov R15D,ECX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+248],RAX
            xor EAX,EAX
            mov WORD PTR [RSP+32],R8W
            mov WORD PTR [RSP+40],R9W
            mov WORD PTR [RSP+29],R10W
            mov WORD PTR [RSP+36],R11W
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM0
            call .L_430af0

            mov EDX,13
            cmp DWORD PTR [RAX+8128],2
            je .L_43ff00
.L_43fecc:

            mov RCX,QWORD PTR [RSP+248]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EDX
            jne .L_44012a

            add RSP,264
.L_43feec:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ff00:

            mov RDI,R13
            lea R12,QWORD PTR [RSP+96]
            call .L_40ee50

            xor ESI,ESI
            test AL,AL
            mov EDX,2
            setne SIL
            mov RDI,R12
            shl ESI,4
            call .L_42f0e0

            mov RDI,R12
            mov ESI,2
            call .L_42f900

            lea RSI,QWORD PTR [RIP+.L_45aae0]
            mov RDI,R12
            call .L_42f620

            mov RDI,R12
            call .L_42f8d0

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+216]
            xor EDX,EDX
            mov RSI,R12
            call .L_42d7b0

            test RAX,RAX
            mov R12,RAX
            mov EDX,3
            je .L_43fecc

            mov ESI,523
            mov RDI,RBX
            mov WORD PTR [RSP+32],SI
            call .L_430af0

            lea RDI,QWORD PTR [RAX+8128]
            call .L_431ec0

            lea RSI,QWORD PTR [RSP+32]
            rol AX,8
            mov EDX,4
            mov RDI,R12
            mov WORD PTR [RSP+34],AX
            call .L_403d30

            test EAX,EAX
            mov EDX,EAX
            je .L_43ffd0
.L_43ffb2:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EDX
            call .L_4033b0

            mov EDX,DWORD PTR [RSP+12]
            jmp .L_43fecc
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_43ffd0:

            lea EAX,DWORD PTR [RBP+RBP*1]
            shr EBP,1
            lea RSI,QWORD PTR [RSP+40]
            and EBP,1431655765
            mov RDI,R12
            mov DWORD PTR [RSP+40],67110453
            and EAX,2863311530
            or EBP,EAX
            lea EAX,DWORD PTR [RBP*4]
            shr EBP,2
            and EBP,858993459
            and EAX,3435973836
            or EBP,EAX
            mov EAX,EBP
            shr EBP,4
            shl EAX,4
            and EBP,252645135
            and EAX,4042322160
            or EAX,EBP
            bswap EAX
            mov EDX,EAX
            mov ECX,EAX
            shr ECX,24
            shl EDX,24
            or EDX,ECX
            mov ECX,EAX
            shr EAX,8
            shl ECX,8
            and EAX,65280
            and ECX,16711680
            or EDX,ECX
            or EAX,EDX
            mov EDX,8
            mov DWORD PTR [RSP+44],EAX
            call .L_403d30

            test EAX,EAX
            mov EDX,EAX
            jne .L_43ffb2

            lea RSI,QWORD PTR [RSP+29]
            mov ECX,310
            mov EDX,3
            mov RDI,R12
            mov WORD PTR [RSP+29],CX
            mov BYTE PTR [RSP+31],R14B
            call .L_403d30

            test EAX,EAX
            mov EDX,EAX
            jne .L_43ffb2

            mov EDX,567
            lea RSI,QWORD PTR [RSP+36]
            rol R15W,8
            mov WORD PTR [RSP+36],DX
            mov RDI,R12
            mov EDX,4
            mov WORD PTR [RSP+38],R15W
            call .L_403d30

            test EAX,EAX
            mov EDX,EAX
            jne .L_43ffb2

            mov RDI,RBX
            call .L_430af0

            lea RDI,QWORD PTR [RAX+2568]
            call .L_415f60

            movdqu XMM0,XMMWORD PTR [RAX]
            mov RDI,RBX
            mov EAX,4294963391
            movaps XMMWORD PTR [RSP+48],XMM0
            mov WORD PTR [RSP+82],AX
            movdqu XMM0,XMMWORD PTR [R13]
            movaps XMMWORD PTR [RSP+64],XMM0
            call .L_430af0

            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+24]
            mov BYTE PTR [RSP+84],AL
            call .L_430af0

            lea RDX,QWORD PTR [RSP+48]
            lea RDI,QWORD PTR [RAX+216]
            xor R8D,R8D
            xor ECX,ECX
            mov RSI,R12
            call .L_42e6e0

            test EAX,EAX
            mov EDX,EAX
            jne .L_43ffb2

            jmp .L_43fecc
.L_44012a:

            call __stack_chk_fail@PLT
.L_44012f:

            nop
.L_440130:

            lea RAX,QWORD PTR [RIP+.L_45ad78]
            ret 
.L_440138:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440140:

            test RDI,RDI
            mov RDX,RDI
            je .L_440190

            lea RSI,QWORD PTR [RIP+.L_45ad64]
            mov ECX,7
            lea RAX,QWORD PTR [RIP+.L_6769a0]

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta CL
            sbb CL,0
            test CL,CL
            je .L_440192

            lea RSI,QWORD PTR [RIP+.L_45ad6b]
            mov RDI,RDX
            mov ECX,7
            mov EDX,0

            repe cmpsb BYTE PTR [RSI],BYTE PTR [RDI]

            seta AL
            sbb AL,0
            test AL,AL
            lea RAX,QWORD PTR [RIP+.L_676940]
            cmovne RAX,RDX
            ret 
.L_440190:

            xor EAX,EAX
.L_440192:

            ret 
.L_440194:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4401a0:

            cmp EDI,5
            lea RAX,QWORD PTR [RIP+.L_6769a0]
            je .L_4401bf

            lea RAX,QWORD PTR [RIP+.L_676940]
            cmp EDI,6
            mov EDX,0
            cmovne RAX,RDX
.L_4401bf:

            ret 
.L_4401c1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4401d0:

            pxor XMM0,XMM0
            mov QWORD PTR [RDI+16],0
            movups XMMWORD PTR [RDI],XMM0
            ret 
.L_4401e0:

            test RDI,RDI
            je .L_440250

            push RBX

            mov RAX,QWORD PTR [RDI]
            mov RBX,RDI
            test RAX,RAX
            je .L_44024c

            mov RDI,QWORD PTR [RDI+8]
            test RDI,RDI
            je .L_4401fd

            call QWORD PTR [RAX+64]
.L_4401fd:

            mov RDI,QWORD PTR [RBX+16]
            test RDI,RDI
            je .L_440236

            mov RAX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RAX+20]
            add EAX,EAX
            cdqe 
            test RAX,RAX
            je .L_440230

            add RAX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440220:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_440220

            mov RDI,QWORD PTR [RBX+16]
.L_440230:

            call QWORD PTR [RIP+.L_677120]
.L_440236:

            lea RAX,QWORD PTR [RBX+24]
            nop
            nop
            nop
            nop
            nop
            nop
.L_440240:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RAX,RBX
            jne .L_440240
.L_44024c:

            pop RBX

            ret 
          .byte 0x66
          .byte 0x90
.L_440250:

            ret 
.L_440252:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440260:

            test RDI,RDI
            je .L_440298

            test RSI,RSI
            mov RAX,QWORD PTR [RDI]
            je .L_440298

            test RAX,RAX
            je .L_440298

            mov RDX,QWORD PTR [RSI]
            cmp RAX,RDX
            jne .L_440298

            test RDX,RDX
            je .L_440298

            sub RSP,8
            mov RSI,QWORD PTR [RSI+8]
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+72]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440298:

            mov EAX,4294946560
            ret 
.L_44029e:

            nop
            nop
.L_4402a0:

            test RSI,RSI
            je .L_440305

            test RDI,RDI
            je .L_440305

            push R12
            mov R12D,EDX
            push RBP
            mov RBP,RDI
            push RBX
            mov RBX,RSI
            call QWORD PTR [RSI+56]

            test RAX,RAX
            mov QWORD PTR [RBP+8],RAX
            je .L_4402fe

            test R12D,R12D
            je .L_4402e0

            movsxd RSI,DWORD PTR [RBX+20]
            mov EDI,2
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBP+16],RAX
            je .L_4402f0
.L_4402e0:

            mov QWORD PTR [RBP],RBX
            xor EAX,EAX
.L_4402e6:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4402f0:

            mov RDI,QWORD PTR [RBP+8]
            call QWORD PTR [RBX+64]

            mov EAX,4294946432
            jmp .L_4402e6
.L_4402fe:

            mov EAX,4294946432
            jmp .L_4402e6
.L_440305:

            mov EAX,4294946560
            ret 
.L_44030b:

            nop
            nop
            nop
            nop
            nop
.L_440310:

            mov EDX,1
            jmp .L_4402a0
.L_440317:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440320:

            test RDI,RDI
            je .L_440340

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_440340

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+24]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_440340:

            mov EAX,4294946560
            ret 
.L_440346:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440350:

            test RDI,RDI
            je .L_440370

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_440370

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_440370:

            mov EAX,4294946560
            ret 
.L_440376:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440380:

            test RDI,RDI
            je .L_4403a0

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_4403a0

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+40]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_4403a0:

            mov EAX,4294946560
            ret 
.L_4403a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4403b0:

            test RDI,RDI
            mov RAX,RDI
            je .L_4403cf

            sub RSP,8
            mov RDI,RSI
            mov RSI,RDX
            mov RDX,RCX
            call QWORD PTR [RAX+48]

            xor EAX,EAX
            add RSP,8
            ret 
.L_4403cf:

            mov EAX,4294946560
            ret 
.L_4403d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4403e0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_4403ee:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_44051c

            mov RAX,QWORD PTR [RDI]
            mov R12,RDI
            test RAX,RAX
            je .L_44051c

            mov RBP,QWORD PTR [RDI+16]
            test RBP,RBP
            je .L_44051c

            mov R15,RDX
            movsxd RDX,DWORD PTR [RAX+20]
            mov R13,RSI
            mov RBX,RSP
            cmp RDX,R15
            jae .L_440474

            mov RDI,QWORD PTR [RDI+8]
            mov RBX,RSP
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [R12]
            mov RDX,R15
            mov RSI,R13
            mov RDI,QWORD PTR [R12+8]
            mov R13,RBX
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            mov RSI,RBX
            call QWORD PTR [RAX+40]

            mov RAX,QWORD PTR [R12]
            mov RBP,QWORD PTR [R12+16]
            movsxd R15,DWORD PTR [RAX+16]
            movsxd RDX,DWORD PTR [RAX+20]
.L_440474:

            mov ESI,54
            mov RDI,RBP
            lea R14,QWORD PTR [RBP+RDX*1]
            call memset@PLT

            mov RAX,QWORD PTR [R12]
            mov ESI,92
            mov RDI,R14
            movsxd RDX,DWORD PTR [RAX+20]
            call memset@PLT

            test R15,R15
            je .L_4404c5

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_4404a8:

            movzx EDX,BYTE PTR [R13+RAX*1]
            xor BYTE PTR [RBP+RAX*1],DL
            movzx EDX,BYTE PTR [R13+RAX*1]
            xor BYTE PTR [R14+RAX*1],DL
            add RAX,1
            cmp R15,RAX
            jne .L_4404a8
.L_4404c5:

            lea RAX,QWORD PTR [RBX+32]
            mov RSI,RBX
            nop
            nop
            nop
            nop
.L_4404d0:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RAX
            jne .L_4404d0

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [R12]
            mov RDI,QWORD PTR [R12+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
.L_4404fd:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_440523

            add RSP,56
.L_440511:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44051c:

            mov EAX,4294946560
            jmp .L_4404fd
.L_440523:

            call __stack_chk_fail@PLT
.L_440528:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440530:

            test RDI,RDI
            je .L_440560

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_440560

            cmp QWORD PTR [RDI+16],0
            je .L_440560

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440560:

            mov EAX,4294946560
            ret 
.L_440566:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440570:

            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_44057a:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_440618

            mov RAX,QWORD PTR [RDI]
            mov RBX,RDI
            test RAX,RAX
            je .L_440618

            mov RDX,QWORD PTR [RDI+16]
            test RDX,RDX
            je .L_440618

            movsxd RBP,DWORD PTR [RAX+20]
            mov R13,RSP
            mov R12,RSI
            mov RDI,QWORD PTR [RDI+8]
            mov RSI,R13
            add RBP,RDX
            call QWORD PTR [RAX+40]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,R13
            movsxd RDX,DWORD PTR [RAX+16]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,R12
            call QWORD PTR [RAX+40]

            xor EAX,EAX
.L_4405f9:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44061f

            add RSP,56
.L_44060d:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_440618:

            mov EAX,4294946560
            jmp .L_4405f9
.L_44061f:

            call __stack_chk_fail@PLT
.L_440624:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440630:

            test RDI,RDI
            je .L_440670

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_440670

            push RBP
            push RBX
            sub RSP,8
            mov RBP,QWORD PTR [RDI+16]
            test RBP,RBP
            je .L_440676

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+24]

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+8]
            mov RSI,RBP
            movsxd RDX,DWORD PTR [RAX+20]
            call QWORD PTR [RAX+32]

            xor EAX,EAX
.L_440669:

            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_440670:

            mov EAX,4294946560
            ret 
.L_440676:

            mov EAX,4294946560
            jmp .L_440669
.L_44067d:

            nop
            nop
            nop
.L_440680:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_44068e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+8],RCX
            je .L_440758

            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+16]
            mov R12,RSI
            mov R13,RDX
            mov RSI,RDI
            mov EDX,1
            mov RDI,RBX
            mov R15,R8
            mov RBP,R9
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+32],0
            call .L_4402a0

            test EAX,EAX
            mov R14D,EAX
            je .L_440710
.L_4406e6:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_440760

            add RSP,56
.L_4406fd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440710:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_4403e0

            mov RAX,QWORD PTR [RSP+16]
            test RAX,RAX
            je .L_440740

            cmp QWORD PTR [RSP+32],0
            je .L_440740

            mov RDX,R15
            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            call QWORD PTR [RAX+32]
.L_440740:

            mov RDI,RBX
            mov RSI,RBP
            call .L_440570

            mov RDI,RBX
            call .L_4401e0

            jmp .L_4406e6
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440758:

            mov R14D,4294946560
            jmp .L_4406e6
.L_440760:

            call __stack_chk_fail@PLT
.L_440765:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440770:

            test RDI,RDI
            je .L_440790

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_440790

            sub RSP,8
            mov RDI,QWORD PTR [RDI+8]
            call QWORD PTR [RAX+80]

            xor EAX,EAX
            add RSP,8
            ret 
          .byte 0x90
.L_440790:

            mov EAX,4294946560
            ret 
.L_440796:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4407a0:

            xor EAX,EAX
            test RDI,RDI
            je .L_4407ab

            movzx EAX,BYTE PTR [RDI+16]
.L_4407ab:

            ret 
.L_4407ad:

            nop
            nop
            nop
.L_4407b0:

            xor EAX,EAX
            test RDI,RDI
            je .L_4407b9

            mov EAX,DWORD PTR [RDI]
.L_4407b9:

            ret 
.L_4407bb:

            nop
            nop
            nop
            nop
            nop
.L_4407c0:

            test RDI,RDI
            je .L_4407d0

            mov RAX,QWORD PTR [RDI+8]
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4407d0:

            xor EAX,EAX
            ret 
.L_4407d3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4407e0:

            jmp .L_440a40
.L_4407e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4407f0:

            jmp .L_440960
.L_4407f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440800:

            push RBX
            mov RBX,RDI
            call .L_440940

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_440813:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440820:

            sub RSP,24
            mov ESI,108
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_44084b

            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_440910

            mov RAX,QWORD PTR [RSP+8]
.L_44084b:

            add RSP,24
            ret 
.L_440850:

            mov ECX,1
            jmp .L_441020
.L_44085a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_440860:

            xor ECX,ECX
            jmp .L_441020
.L_440867:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440870:

            jmp .L_440e70
.L_440875:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440880:

            jmp .L_440e50
.L_440885:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440890:

            mov ESI,1
            jmp .L_4409b0
.L_44089a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4408a0:

            xor ESI,ESI
            jmp .L_4409b0
.L_4408a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4408b0:

            xor EAX,EAX
            ret 
.L_4408b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4408c0:

            ret 
.L_4408c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4408d0:

            mov QWORD PTR [RIP+.L_677128],RDI
            mov QWORD PTR [RIP+.L_677120],RSI
            xor EAX,EAX
            ret 
.L_4408e1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4408f0:

            xor EAX,EAX
            ret 
.L_4408f3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440900:

            ret 
.L_440902:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440910:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+100],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,108
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_440939:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440940:

            test RDI,RDI
            je .L_44095c

            lea RAX,QWORD PTR [RDI+108]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440950:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RAX,RDI
            jne .L_440950
.L_44095c:

            ret 
.L_44095e:

            nop
            nop
.L_440960:

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDI],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDI+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            movups XMMWORD PTR [RDI+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+48]
            movups XMMWORD PTR [RDI+48],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+64]
            movups XMMWORD PTR [RDI+64],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+80]
            movups XMMWORD PTR [RDI+80],XMM0
            mov RAX,QWORD PTR [RSI+96]
            mov QWORD PTR [RDI+96],RAX
            mov EAX,DWORD PTR [RSI+104]
            mov DWORD PTR [RDI+104],EAX
            ret 
.L_4409a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4409b0:

            test ESI,ESI
            mov QWORD PTR [RDI],0
            je .L_440a00

            movabs RAX,3926247204440088280
            mov DWORD PTR [RDI+104],ESI
            mov QWORD PTR [RDI+8],RAX
            movabs RAX,-644479594506691305
            mov QWORD PTR [RDI+16],RAX
            movabs RAX,7518782744944446257
            mov QWORD PTR [RDI+24],RAX
            movabs RAX,-4685344894838272089
            mov QWORD PTR [RDI+32],RAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440a00:

            movabs RAX,-4942790177982912921
            mov DWORD PTR [RDI+104],ESI
            mov QWORD PTR [RDI+8],RAX
            movabs RAX,-6534734903820487822
            mov QWORD PTR [RDI+16],RAX
            movabs RAX,-7276294671082564993
            mov QWORD PTR [RDI+24],RAX
            movabs RAX,6620516960021240235
            mov QWORD PTR [RDI+32],RAX
            ret 
.L_440a3c:

            nop
            nop
            nop
            nop
.L_440a40:

            push R15
            push R14
            mov RCX,RDI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,344
.L_440a54:

            lea RBX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+16],RDI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+24],RBX
            mov RDI,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440a80:

            mov EDX,DWORD PTR [RCX+RAX*1+8]
            mov DWORD PTR [RDI+RAX*1],EDX
            add RAX,4
            cmp RAX,32
            jne .L_440a80

            lea RAX,QWORD PTR [RSP+64]
            mov R15D,DWORD PTR [RSP+60]
            mov R11D,DWORD PTR [RSP+48]
            mov EBP,DWORD PTR [RSP+56]
            mov R13D,DWORD PTR [RSP+52]
            xor R9D,R9D
            mov R10D,DWORD PTR [RSP+32]
            mov EBX,DWORD PTR [RSP+36]
            mov EDX,1116352408
            mov R12D,DWORD PTR [RSP+40]
            mov R14D,DWORD PTR [RSP+44]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_440bad
          .byte 0x66
          .byte 0x90
.L_440ad0:

            lea EAX,DWORD PTR [R9-2]
            mov EDI,DWORD PTR [RSP+RAX*4+64]
            lea EAX,DWORD PTR [R9-15]
            mov R8D,DWORD PTR [RSP+RAX*4+64]
            mov ECX,EDI
            mov EAX,EDI
            shr EDI,10
            rol EAX,15
            rol ECX,13
            xor ECX,EAX
            lea EAX,DWORD PTR [R9-7]
            xor ECX,EDI
            lea EDI,DWORD PTR [R9-16]
            mov EDI,DWORD PTR [RSP+RDI*4+64]
            add EDI,DWORD PTR [RSP+RAX*4+64]
            mov EAX,R8D
            rol EAX,14
            add ECX,EDI
            mov EDI,R8D
            shr R8D,3
            ror EDI,7
            xor EAX,EDI
            mov RDI,QWORD PTR [RSP+8]
            xor EAX,R8D
            add EAX,ECX
            mov DWORD PTR [RDI+R9*4],EAX
.L_440b24:

            mov ECX,R11D
            mov EDI,R11D
            add R9,1
            ror EDI,11
            ror ECX,6
            xor ECX,EDI
            mov EDI,R11D
            rol EDI,7
            xor EDI,ECX
            mov ECX,R13D
            xor ECX,EBP
            and ECX,R11D
            xor ECX,EBP
            add ECX,EDI
            add ECX,EAX
            mov EAX,R10D
            add R15D,ECX
            ror EAX,2
            mov ECX,EBX
            add EDX,R15D
            mov R15D,R10D
            and ECX,R10D
            ror R15D,13
            lea R8D,DWORD PTR [RDX+R14*1]
            xor EAX,R15D
            mov R15D,R10D
            rol R15D,10
            xor R15D,EAX
            mov EAX,EBX
            or EAX,R10D
            and EAX,R12D
            or EAX,ECX
            add EAX,R15D
            add EAX,EDX
            cmp R9,64
            je .L_440bf0

            lea RDX,QWORD PTR [RIP+.L_45ade0]
            mov R15D,EBP
            mov R14D,R12D
            mov EBP,R13D
            mov R12D,EBX
            mov R13D,R11D
            mov EDX,DWORD PTR [RDX+R9*4]
            mov EBX,R10D
            mov R11D,R8D
            mov R10D,EAX
.L_440bad:

            cmp R9,15
            ja .L_440ad0

            movzx ECX,BYTE PTR [RSI+R9*4]
            movzx EAX,BYTE PTR [RSI+R9*4+1]
            mov RDI,QWORD PTR [RSP+8]
            shl EAX,16
            shl ECX,24
            or ECX,EAX
            movzx EAX,BYTE PTR [RSI+R9*4+3]
            or ECX,EAX
            movzx EAX,BYTE PTR [RSI+R9*4+2]
            shl EAX,8
            or EAX,ECX
            mov DWORD PTR [RDI+R9*4],EAX
            jmp .L_440b24
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440bf0:

            mov ECX,EAX
            mov DWORD PTR [RSP+32],EAX
            mov DWORD PTR [RSP+60],EBP
            mov DWORD PTR [RSP+48],R8D
            mov DWORD PTR [RSP+56],R13D
            xor EAX,EAX
            mov DWORD PTR [RSP+52],R11D
            mov DWORD PTR [RSP+36],R10D
            mov DWORD PTR [RSP+40],EBX
            mov DWORD PTR [RSP+44],R12D
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+24]
            jmp .L_440c2b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_440c28:

            mov ECX,DWORD PTR [RSI+RAX*1]
.L_440c2b:

            add DWORD PTR [RDX+RAX*1+8],ECX
            add RAX,4
            cmp RAX,32
            jne .L_440c28

            mov RAX,QWORD PTR [RSP+328]
            xor RAX,QWORD PTR FS:[40]
            jne .L_440c5e

            add RSP,344
.L_440c53:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_440c5e:

            call __stack_chk_fail@PLT
.L_440c63:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440c70:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RDX
            push RBX
.L_440c7b:

            mov EAX,DWORD PTR [RDI]
            mov EDX,64
            mov RBP,RDI
            mov RBX,RSI
            mov R13D,EAX
            and R13D,63
            sub EDX,R13D
            add EAX,R12D
            mov R14D,EDX
            mov DWORD PTR [RDI],EAX
            jae .L_440ca0

            add DWORD PTR [RDI+4],1
.L_440ca0:

            test R13D,R13D
            je .L_440caa

            cmp R14,R12
            jbe .L_440cf0
.L_440caa:

            cmp R12,63
            jbe .L_440cd8

            lea RAX,QWORD PTR [R12-64]
            and RAX,-64
            lea R14,QWORD PTR [RBX+RAX*1+64]
            nop
            nop
.L_440cc0:

            mov RSI,RBX
            mov RDI,RBP
            add RBX,64
            call .L_440a40

            cmp RBX,R14
            jne .L_440cc0

            and R12D,63
.L_440cd8:

            test R12,R12
            jne .L_440d38
.L_440cdd:

            pop RBX
.L_440cde:

            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_440cf0:

            lea RSI,QWORD PTR [RBP+40]
            add R13,RSI
            cmp EDX,8
            jae .L_440dc8

            test DL,4
            jne .L_440e27

            test EDX,EDX
            je .L_440d1d

            movzx EAX,BYTE PTR [RBX]
            and EDX,2
            mov BYTE PTR [R13],AL
            jne .L_440e3c
.L_440d1d:

            mov RDI,RBP
            add RBX,R14
            sub R12,R14
            call .L_440a40

            xor R13D,R13D
            jmp .L_440caa
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440d38:

            cmp R12D,8
            lea RCX,QWORD PTR [RBP+R13*1+40]
            mov EAX,R12D
            jb .L_440d98

            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RCX],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [RBX+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            lea RDX,QWORD PTR [RCX+8]
            and RDX,-8
            sub RCX,RDX
            lea EAX,DWORD PTR [R12+RCX*1]
            sub RBX,RCX
            and EAX,4294967288
            cmp EAX,8
            jb .L_440cdd

            and EAX,4294967288
            xor ECX,ECX
.L_440d7c:

            mov ESI,ECX
            add ECX,8
            mov RDI,QWORD PTR [RBX+RSI*1]
            cmp ECX,EAX
            mov QWORD PTR [RDX+RSI*1],RDI
            jb .L_440d7c

            jmp .L_440cdd
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440d98:

            and R12D,4
            jne .L_440e14

            test EAX,EAX
            je .L_440cdd

            movzx EDX,BYTE PTR [RBX]
            test AL,2
            mov BYTE PTR [RCX],DL
            je .L_440cdd

            mov EDX,EAX
            movzx EAX,WORD PTR [RBX+RDX*1-2]
            mov WORD PTR [RCX+RDX*1-2],AX
            jmp .L_440cdd
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_440dc8:

            mov RAX,QWORD PTR [RBX]
            mov R8,RBX
            mov QWORD PTR [R13],RAX
            mov RAX,QWORD PTR [RBX+R14*1-8]
            mov QWORD PTR [R13+R14*1-8],RAX
            lea RAX,QWORD PTR [R13+8]
            and RAX,-8
            sub R13,RAX
            add EDX,R13D
            sub R8,R13
            and EDX,4294967288
            cmp EDX,8
            jb .L_440d1d

            and EDX,4294967288
            xor ECX,ECX
.L_440dfe:

            mov EDI,ECX
            add ECX,8
            mov R9,QWORD PTR [R8+RDI*1]
            cmp ECX,EDX
            mov QWORD PTR [RAX+RDI*1],R9
            jb .L_440dfe

            jmp .L_440d1d
.L_440e14:

            mov EDX,DWORD PTR [RBX]
            mov DWORD PTR [RCX],EDX
            mov EDX,EAX
            mov EAX,DWORD PTR [RBX+RDX*1-4]
            mov DWORD PTR [RCX+RDX*1-4],EAX
            jmp .L_440cdd
.L_440e27:

            mov EAX,DWORD PTR [RBX]
            mov DWORD PTR [R13],EAX
            mov EAX,DWORD PTR [RBX+R14*1-4]
            mov DWORD PTR [R13+R14*1-4],EAX
            jmp .L_440d1d
.L_440e3c:

            movzx EAX,WORD PTR [RBX+R14*1-2]
            mov WORD PTR [R13+R14*1-2],AX
            jmp .L_440d1d
.L_440e4d:

            nop
            nop
            nop
.L_440e50:

            test RDX,RDX
            je .L_440e60

            jmp .L_440c70
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_440e60:

            ret 
.L_440e62:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_440e70:

            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,RSI
            sub RSP,24
.L_440e7c:

            mov EDI,DWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RBX+4]
            mov ECX,EDI
            shr ECX,29
            shl EAX,3
            or EAX,ECX
            lea ECX,DWORD PTR [RDI*8]
            and EDI,63
            mov ESI,EAX
            mov BYTE PTR [RSP+2],AH
            mov BYTE PTR [RSP+3],AL
            shr ESI,24
            mov BYTE PTR [RSP+6],CH
            mov BYTE PTR [RSP+7],CL
            mov BYTE PTR [RSP],SIL
            mov ESI,EAX
            mov EAX,ECX
            shr EAX,24
            shr ESI,16
            mov BYTE PTR [RSP+4],AL
            mov EAX,ECX
            mov BYTE PTR [RSP+1],SIL
            shr EAX,16
            cmp EDI,55
            mov BYTE PTR [RSP+5],AL
            ja .L_441000

            mov EAX,56
            sub EAX,EDI
            mov EDX,EAX
.L_440eec:

            lea RSI,QWORD PTR [RIP+.L_45ada0]
            mov RDI,RBX
            call .L_440c70

            mov RSI,RSP
            mov EDX,8
            mov RDI,RBX
            call .L_440c70

            movzx EAX,BYTE PTR [RBX+11]
            mov BYTE PTR [RBP],AL
            movzx EAX,WORD PTR [RBX+10]
            mov BYTE PTR [RBP+1],AL
            mov EAX,DWORD PTR [RBX+8]
            mov BYTE PTR [RBP+2],AH
            mov EAX,DWORD PTR [RBX+8]
            mov BYTE PTR [RBP+3],AL
            movzx EAX,BYTE PTR [RBX+15]
            mov BYTE PTR [RBP+4],AL
            movzx EAX,WORD PTR [RBX+14]
            mov BYTE PTR [RBP+5],AL
            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBP+6],AH
            mov EAX,DWORD PTR [RBX+12]
            mov BYTE PTR [RBP+7],AL
            movzx EAX,BYTE PTR [RBX+19]
            mov BYTE PTR [RBP+8],AL
            movzx EAX,WORD PTR [RBX+18]
            mov BYTE PTR [RBP+9],AL
            mov EAX,DWORD PTR [RBX+16]
            mov BYTE PTR [RBP+10],AH
            mov EAX,DWORD PTR [RBX+16]
            mov BYTE PTR [RBP+11],AL
            movzx EAX,BYTE PTR [RBX+23]
            mov BYTE PTR [RBP+12],AL
            movzx EAX,WORD PTR [RBX+22]
            mov BYTE PTR [RBP+13],AL
            mov EAX,DWORD PTR [RBX+20]
            mov BYTE PTR [RBP+14],AH
            mov EAX,DWORD PTR [RBX+20]
            mov BYTE PTR [RBP+15],AL
            movzx EAX,BYTE PTR [RBX+27]
            mov BYTE PTR [RBP+16],AL
            movzx EAX,WORD PTR [RBX+26]
            mov BYTE PTR [RBP+17],AL
            mov EAX,DWORD PTR [RBX+24]
            mov BYTE PTR [RBP+18],AH
            mov EAX,DWORD PTR [RBX+24]
            mov BYTE PTR [RBP+19],AL
            movzx EAX,BYTE PTR [RBX+31]
            mov BYTE PTR [RBP+20],AL
            movzx EAX,WORD PTR [RBX+30]
            mov BYTE PTR [RBP+21],AL
            mov EAX,DWORD PTR [RBX+28]
            mov BYTE PTR [RBP+22],AH
            mov EAX,DWORD PTR [RBX+28]
            mov BYTE PTR [RBP+23],AL
            movzx EAX,BYTE PTR [RBX+35]
            mov BYTE PTR [RBP+24],AL
            movzx EAX,WORD PTR [RBX+34]
            mov BYTE PTR [RBP+25],AL
            mov EAX,DWORD PTR [RBX+32]
            mov BYTE PTR [RBP+26],AH
            mov EAX,DWORD PTR [RBX+32]
            mov BYTE PTR [RBP+27],AL
            mov EAX,DWORD PTR [RBX+104]
            test EAX,EAX
            jne .L_440fe2

            movzx EAX,BYTE PTR [RBX+39]
            mov BYTE PTR [RBP+28],AL
            movzx EAX,WORD PTR [RBX+38]
            mov BYTE PTR [RBP+29],AL
            mov EAX,DWORD PTR [RBX+36]
            mov BYTE PTR [RBP+30],AH
            mov EAX,DWORD PTR [RBX+36]
            mov BYTE PTR [RBP+31],AL
.L_440fe2:

            mov RAX,QWORD PTR [RSP+8]
            xor RAX,QWORD PTR FS:[40]
            jne .L_44100e

            add RSP,24
.L_440ff6:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_441000:

            mov EAX,120
            sub EAX,EDI
            mov EDX,EAX
            jmp .L_440eec
.L_44100e:

            call __stack_chk_fail@PLT
.L_441013:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441020:

            push RBP
            push RBX
            mov RBP,RDX
            mov EDX,ECX
            mov R8,RDI
            mov ECX,13
            sub RSP,136
.L_441036:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RBX,RSP
            test EDX,EDX
            mov RDI,RBX

            rep stosq QWORD PTR [RDI]

            jne .L_4410e6

            movabs RAX,-4942790177982912921
            mov QWORD PTR [RSP+8],RAX
            movabs RAX,-6534734903820487822
            mov QWORD PTR [RSP+16],RAX
            movabs RAX,-7276294671082564993
            mov QWORD PTR [RSP+24],RAX
            movabs RAX,6620516960021240235
            mov QWORD PTR [RSP+32],RAX
.L_441093:

            test RSI,RSI
            mov DWORD PTR [RSP+104],EDX
            je .L_4410aa

            mov RDX,RSI
            mov RDI,RBX
            mov RSI,R8
            call .L_440c70
.L_4410aa:

            mov RDI,RBX
            mov RSI,RBP
            call .L_440e70

            lea RAX,QWORD PTR [RBX+108]
            mov RDI,RBX
            nop
            nop
            nop
            nop
.L_4410c0:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_4410c0

            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR FS:[40]
            jne .L_441127

            add RSP,136
.L_4410e3:

            pop RBX
            pop RBP
            ret 
.L_4410e6:

            movabs RAX,3926247204440088280
            mov QWORD PTR [RSP+8],RAX
            movabs RAX,-644479594506691305
            mov QWORD PTR [RSP+16],RAX
            movabs RAX,7518782744944446257
            mov QWORD PTR [RSP+24],RAX
            movabs RAX,-4685344894838272089
            mov QWORD PTR [RSP+32],RAX
            jmp .L_441093
.L_441127:

            call __stack_chk_fail@PLT
.L_44112c:

            nop
            nop
            nop
            nop
.L_441130:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+280],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,288
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44115f:

            nop
.L_441160:

            test RDI,RDI
            je .L_44117c

            lea RAX,QWORD PTR [RDI+288]
            nop
            nop
            nop
            nop
.L_441170:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RAX,RDI
            jne .L_441170
.L_44117c:

            ret 
.L_44117e:

            nop
            nop
.L_441180:

            cmp EDX,192
            je .L_441240

            cmp EDX,256
            je .L_441230

            cmp EDX,128
            je .L_4411b0

            mov EAX,4294967264
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4411b0:

            mov DWORD PTR [RDI],10
.L_4411b6:

            lea RAX,QWORD PTR [RDI+16]
            push RBP
            shr EDX,5
            push RBX
.L_4411bf:

            xor R8D,R8D
            mov QWORD PTR [RDI+8],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4411d0:

            movzx ECX,BYTE PTR [RSI+R8*4+1]
            movzx R9D,BYTE PTR [RSI+R8*4+2]
            shl ECX,8
            shl R9D,16
            or ECX,R9D
            movzx R9D,BYTE PTR [RSI+R8*4]
            or ECX,R9D
            movzx R9D,BYTE PTR [RSI+R8*4+3]
            shl R9D,24
            or ECX,R9D
            mov DWORD PTR [RAX+R8*4],ECX
            add R8,1
            cmp EDX,R8D
            ja .L_4411d0

            mov EDX,DWORD PTR [RDI]
            cmp EDX,12
            je .L_441250

            cmp EDX,14
            je .L_441378

            cmp EDX,10
            je .L_4412f0

            xor EAX,EAX
            pop RBX
.L_441224:

            pop RBP
            ret 
          .byte 0x66

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441230:

            mov DWORD PTR [RDI],14
            jmp .L_4411b6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441240:

            mov DWORD PTR [RDI],12
            jmp .L_4411b6
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441250:

            lea RSI,QWORD PTR [RIP+.L_45aee0]
            add RDI,208
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_45d020]
            jmp .L_441273
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_441270:

            mov R9D,DWORD PTR [RSI]
.L_441273:

            mov EBX,DWORD PTR [RAX+20]
            add RAX,24
            add RSI,4
            mov R8D,EBX
            movzx EDX,BH
            shr R8D,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,16
            xor EDX,R8D
            movzx R8D,BL
            xor EDX,DWORD PTR [RAX-24]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,24
            xor EDX,R8D
            mov R8D,EBX
            shr R8D,16
            movzx R8D,R8B
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,8
            xor EDX,R8D
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-20]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-16]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+12],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+16],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+20],EDX
            cmp RAX,RDI
            jne .L_441270

            xor EAX,EAX
            pop RBX
.L_4412ec:

            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_4412f0:

            lea RDI,QWORD PTR [RIP+.L_45aee4]
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_45d020]
            lea R8,QWORD PTR [RDI+36]
            jmp .L_441317
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441310:

            mov R9D,DWORD PTR [RDI]
            add RDI,4
.L_441317:

            mov EBX,DWORD PTR [RAX+12]
            add RAX,16
            mov ESI,EBX
            movzx EDX,BH
            shr ESI,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,16
            xor EDX,ESI
            movzx ESI,BL
            xor EDX,DWORD PTR [RAX-16]
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,24
            xor EDX,ESI
            mov ESI,EBX
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RCX+RSI*1]
            shl ESI,8
            xor EDX,ESI
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+12],EDX
            cmp R8,RDI
            jne .L_441310

            xor EAX,EAX
            pop RBX
.L_441372:

            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_441378:

            lea RSI,QWORD PTR [RIP+.L_45aee0]
            add RDI,240
            mov R9D,1
            lea RCX,QWORD PTR [RIP+.L_45d020]
            jmp .L_44139b
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_441398:

            mov R9D,DWORD PTR [RSI]
.L_44139b:

            mov EBX,DWORD PTR [RAX+28]
            add RAX,32
            add RSI,4
            mov R8D,EBX
            movzx EDX,BH
            shr R8D,24
            movzx EDX,BYTE PTR [RCX+RDX*1]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,16
            xor EDX,R8D
            movzx R8D,BL
            xor EDX,DWORD PTR [RAX-32]
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,24
            xor EDX,R8D
            mov R8D,EBX
            shr R8D,16
            movzx R8D,R8B
            movzx R8D,BYTE PTR [RCX+R8*1]
            shl R8D,8
            xor EDX,R8D
            xor EDX,R9D
            mov DWORD PTR [RAX],EDX
            xor EDX,DWORD PTR [RAX-28]
            mov DWORD PTR [RAX+4],EDX
            xor EDX,DWORD PTR [RAX-24]
            mov DWORD PTR [RAX+8],EDX
            xor EDX,DWORD PTR [RAX-20]
            mov R9D,EDX
            movzx R8D,DL
            mov DWORD PTR [RAX+12],EDX
            shr R9D,24
            movzx R8D,BYTE PTR [RCX+R8*1]
            movzx EBP,DH
            movzx R9D,BYTE PTR [RCX+R9*1]
            xor R8D,DWORD PTR [RAX-16]
            shr EDX,16
            movzx EDX,DL
            movzx EDX,BYTE PTR [RCX+RDX*1]
            shl R9D,24
            xor R8D,R9D
            movzx R9D,BYTE PTR [RCX+RBP*1]
            shl EDX,16
            shl R9D,8
            xor R8D,R9D
            xor EDX,R8D
            mov DWORD PTR [RAX+16],EDX
            xor EDX,DWORD PTR [RAX-12]
            mov DWORD PTR [RAX+20],EDX
            xor EDX,DWORD PTR [RAX-8]
            mov DWORD PTR [RAX+24],EDX
            xor EDX,EBX
            mov DWORD PTR [RAX+28],EDX
            cmp RAX,RDI
            jne .L_441398

            xor EAX,EAX
            pop RBX
.L_441460:

            pop RBP
            ret 
.L_441462:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441470:

            push R15
            push R14
            mov R11,RDI
            push R13
            push R12
            mov ECX,36
            push RBP
            push RBX
            sub RSP,328
.L_441489:

            lea R10,QWORD PTR [RSP+16]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+312],RAX
            xor EAX,EAX
            mov RDI,R10

            rep stosq QWORD PTR [RDI]

            lea RAX,QWORD PTR [R11+16]
            mov RDI,R10
            mov QWORD PTR [R11+8],RAX
            call .L_441180

            test EAX,EAX
            mov DWORD PTR [RSP+8],EAX
            jne .L_4415d8

            mov EDX,DWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+24]
            lea R14,QWORD PTR [R11+32]
            lea ECX,DWORD PTR [RDX*4]
            mov DWORD PTR [R11],EDX
            movsxd RCX,ECX
            lea R13,QWORD PTR [RSI+RCX*4]
            mov ECX,DWORD PTR [R13]
            sub R13,16
            mov DWORD PTR [R11+16],ECX
            mov ECX,DWORD PTR [R13+20]
            mov DWORD PTR [R11+20],ECX
            mov ECX,DWORD PTR [R13+24]
            mov DWORD PTR [R11+24],ECX
            mov ECX,DWORD PTR [R13+28]
            cmp EDX,1
            mov DWORD PTR [R11+28],ECX
            jle .L_4415b9

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_45bb20]
            lea RDI,QWORD PTR [RIP+.L_45d020]
            mov DWORD PTR [RSP+12],EDX
            not RDX
            lea RBP,QWORD PTR [RIP+.L_45af20]
            shl RDX,4
            lea RBX,QWORD PTR [RIP+.L_45b720]
            lea R11,QWORD PTR [RIP+.L_45b320]
            lea RAX,QWORD PTR [R13+RDX*1]
            mov R8,R13
            mov R9,R14
            mov QWORD PTR [RSP],RAX
            nop
            nop
.L_441550:

            xor ECX,ECX
.L_441552:

            mov EAX,DWORD PTR [R8+RCX*1]
            movzx EDX,AL
            movzx ESI,BYTE PTR [RDI+RDX*1]
            mov EDX,EAX
            shr EDX,24
            movzx R15D,BYTE PTR [RDI+RDX*1]
            mov EDX,DWORD PTR [R12+RSI*4]
            movzx ESI,AH
            shr EAX,16
            movzx ESI,BYTE PTR [RDI+RSI*1]
            movzx EAX,AL
            movzx EAX,BYTE PTR [RDI+RAX*1]
            xor EDX,DWORD PTR [RBP+R15*4]
            xor EDX,DWORD PTR [RBX+RSI*4]
            xor EDX,DWORD PTR [R11+RAX*4]
            mov DWORD PTR [R9+RCX*1],EDX
            add RCX,4
            cmp RCX,16
            jne .L_441552

            add R9,16
            sub R8,16
            cmp R8,QWORD PTR [RSP]
            jne .L_441550

            mov EDX,DWORD PTR [RSP+12]
            add RDX,1
            mov RCX,RDX
            shl RCX,4
            sub R13,RCX
            add R14,RCX
.L_4415b9:

            mov EDX,DWORD PTR [R13]
            mov DWORD PTR [R14],EDX
            mov EDX,DWORD PTR [R13+4]
            mov DWORD PTR [R14+4],EDX
            mov EDX,DWORD PTR [R13+8]
            mov DWORD PTR [R14+8],EDX
            mov EDX,DWORD PTR [R13+12]
            mov DWORD PTR [R14+12],EDX
.L_4415d8:

            lea RDX,QWORD PTR [R10+288]
            nop
.L_4415e0:

            mov BYTE PTR [R10],0
            add R10,1
            cmp R10,RDX
            jne .L_4415e0

            mov RBX,QWORD PTR [RSP+312]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_441616

            add RSP,328
.L_44160b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_441616:

            call __stack_chk_fail@PLT
.L_44161b:

            nop
            nop
            nop
            nop
            nop
.L_441620:

            push R15
            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            push RBX
.L_44162d:

            mov RDX,QWORD PTR [RDI+8]
            mov R8D,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RSI+4]
            mov ECX,DWORD PTR [RSI+8]
            mov ESI,DWORD PTR [RSI+12]
            xor R8D,DWORD PTR [RDX]
            xor EAX,DWORD PTR [RDX+4]
            lea R14,QWORD PTR [RDX+16]
            xor ECX,DWORD PTR [RDX+8]
            xor ESI,DWORD PTR [RDX+12]
            mov EDX,DWORD PTR [RDI]
            sar EDX,1
            cmp EDX,1
            jle .L_441a48

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_45cc20]
            lea RBP,QWORD PTR [RIP+.L_45c020]
            mov DWORD PTR [RSP-12],EDX
            add RDX,1
            lea R11,QWORD PTR [RIP+.L_45c820]
            shl RDX,5
            lea R10,QWORD PTR [RIP+.L_45c420]
            mov QWORD PTR [RSP-8],R13
            lea RDI,QWORD PTR [R14+RDX*1]
            mov R9,R14
            mov R13,RDI
            nop
            nop
            nop
            nop
.L_441698:

            mov EDX,ESI
            movzx EDI,R8B
            mov EBX,R8D
            shr EDX,24
            mov EDI,DWORD PTR [R12+RDI*4]
            shr EBX,24
            xor EDI,DWORD PTR [RBP+RDX*4]
            movzx EDX,AH
            mov R15D,EAX
            xor EDI,DWORD PTR [R9]
            shr R15D,24
            xor EDI,DWORD PTR [R11+RDX*4]
            mov EDX,ECX
            shr EDX,16
            movzx EDX,DL
            xor EDI,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            shr EAX,16
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RBX*4]
            movzx EBX,CH
            xor EDX,DWORD PTR [R9+4]
            movzx EAX,AL
            xor EDX,DWORD PTR [R11+RBX*4]
            mov EBX,ESI
            shr EBX,16
            movzx EBX,BL
            xor EDX,DWORD PTR [R10+RBX*4]
            movzx EBX,CL
            shr ECX,24
            mov EBX,DWORD PTR [R12+RBX*4]
            xor EBX,DWORD PTR [RBP+R15*4]
            mov R15D,R8D
            xor EBX,DWORD PTR [R9+8]
            shr R15D,16
            movzx R15D,R15B
            mov DWORD PTR [RSP-16],EDX
            mov EDX,ESI
            movzx ESI,SIL
            movzx EDX,DH
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RCX*4]
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            xor ESI,DWORD PTR [R9+12]
            movzx ECX,DH
            xor EBX,DWORD PTR [R10+R15*4]
            mov EDX,DWORD PTR [RSP-16]
            xor ESI,DWORD PTR [R11+RCX*4]
            movzx ECX,DIL
            xor ESI,DWORD PTR [R10+RAX*4]
            mov R8D,DWORD PTR [R12+RCX*4]
            mov ECX,EDI
            shr ECX,24
            mov R15D,EDX
            mov EAX,ESI
            shr EAX,24
            xor R8D,DWORD PTR [RBP+RAX*4]
            movzx EAX,DH
            xor R8D,DWORD PTR [R9+16]
            xor R8D,DWORD PTR [R11+RAX*4]
            mov EAX,EBX
            shr EAX,16
            movzx EAX,AL
            xor R8D,DWORD PTR [R10+RAX*4]
            movzx EAX,DL
            mov EDX,ESI
            mov EAX,DWORD PTR [R12+RAX*4]
            xor EAX,DWORD PTR [RBP+RCX*4]
            movzx ECX,BH
            xor EAX,DWORD PTR [R9+20]
            shr R15D,24
            movzx EDX,DH
            xor EAX,DWORD PTR [R11+RCX*4]
            mov ECX,ESI
            movzx ESI,SIL
            shr ECX,16
            add R9,32
            movzx ECX,CL
            xor EAX,DWORD PTR [R10+RCX*4]
            movzx ECX,BL
            shr EBX,24
            mov ECX,DWORD PTR [R12+RCX*4]
            xor ECX,DWORD PTR [RBP+R15*4]
            mov R15D,EDI
            xor ECX,DWORD PTR [R9-8]
            mov ESI,DWORD PTR [R12+RSI*4]
            shr R15D,16
            xor ECX,DWORD PTR [R11+RDX*4]
            mov EDX,DWORD PTR [RSP-16]
            movzx R15D,R15B
            xor ESI,DWORD PTR [RBP+RBX*4]
            mov EBX,EDI
            xor ECX,DWORD PTR [R10+R15*4]
            xor ESI,DWORD PTR [R9-4]
            movzx EDI,BH
            shr EDX,16
            xor ESI,DWORD PTR [R11+RDI*4]
            movzx EDX,DL
            xor ESI,DWORD PTR [R10+RDX*4]
            cmp R13,R9
            jne .L_441698

            mov EDX,DWORD PTR [RSP-12]
            mov R13,QWORD PTR [RSP-8]
            add RDX,1
            shl RDX,5
            add R14,RDX
.L_44180f:

            mov EDX,ESI
            movzx EDI,R8B
            mov R9D,R8D
            shr EDX,24
            mov EDI,DWORD PTR [R12+RDI*4]
            shr R9D,24
            xor EDI,DWORD PTR [RBP+RDX*4]
            movzx EDX,AH
            movzx EBX,CH
            xor EDI,DWORD PTR [R14]
            xor EDI,DWORD PTR [R11+RDX*4]
            mov EDX,ECX
            shr EDX,16
            movzx EDX,DL
            xor EDI,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+R9*4]
            mov R9D,ESI
            xor EDX,DWORD PTR [R14+4]
            shr R9D,16
            xor EDX,DWORD PTR [R11+RBX*4]
            movzx R9D,R9B
            movzx EBX,CL
            xor EDX,DWORD PTR [R10+R9*4]
            mov R9D,EAX
            mov EBX,DWORD PTR [R12+RBX*4]
            shr R9D,24
            shr ECX,24
            shr EAX,16
            xor EBX,DWORD PTR [RBP+R9*4]
            movzx EAX,AL
            mov R9D,R8D
            xor EBX,DWORD PTR [R14+8]
            shr R9D,16
            movzx R9D,R9B
            mov R15D,EBX
            mov EBX,ESI
            movzx ESI,SIL
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RCX*4]
            movzx EBX,BH
            mov ECX,DWORD PTR [R14+12]
            mov EBX,DWORD PTR [R11+RBX*4]
            xor ECX,ESI
            xor EBX,R15D
            xor EBX,DWORD PTR [R10+R9*4]
            mov ESI,ECX
            mov ECX,R8D
            movzx ECX,CH
            xor ESI,DWORD PTR [R11+RCX*4]
            mov ECX,ESI
            xor ECX,DWORD PTR [R10+RAX*4]
            lea RAX,QWORD PTR [RIP+.L_45d020]
            movzx ESI,DIL
            mov R10D,EDX
            movzx R9D,BYTE PTR [RAX+RSI*1]
            xor R9D,DWORD PTR [R14+16]
            mov ESI,ECX
            movzx EBP,CH
            shr ESI,24
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R9D,ESI
            movzx ESI,DH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R9D,ESI
            mov ESI,EBX
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R9D,ESI
            movzx ESI,DL
            shr R10D,24
            movzx R8D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDI
            shr EDX,16
            shr ESI,24
            xor R8D,DWORD PTR [R14+20]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R8D,ESI
            movzx ESI,BH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R8D,ESI
            mov ESI,ECX
            movzx ECX,CL
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R8D,ESI
            movzx ESI,BL
            shr EBX,24
            movzx ESI,BYTE PTR [RAX+RSI*1]
            xor ESI,DWORD PTR [R14+24]
            movzx R10D,BYTE PTR [RAX+R10*1]
            movzx ECX,BYTE PTR [RAX+RCX*1]
            xor ECX,DWORD PTR [R14+28]
            mov BYTE PTR [R13],R9B
            mov BYTE PTR [R13+4],R8B
            shl R10D,24
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBP*1]
            shl R10D,8
            xor ESI,R10D
            mov R10D,EDI
            shr R10D,16
            movzx R10D,R10B
            movzx R10D,BYTE PTR [RAX+R10*1]
            shl R10D,16
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBX*1]
            mov EBX,EDI
            movzx EDI,BH
            mov EBX,R9D
            mov BYTE PTR [R13+8],SIL
            movzx EDI,BYTE PTR [RAX+RDI*1]
            movzx EAX,BYTE PTR [RAX+RDX*1]
            mov EDX,R9D
            shr EDX,16
            movzx EBX,BH
            shr R9D,24
            mov BYTE PTR [R13+2],DL
            shl R10D,24
            mov EDX,R8D
            mov BYTE PTR [R13+1],BL
            shr EDX,16
            xor ECX,R10D
            shl EDI,8
            mov EBX,R8D
            mov BYTE PTR [R13+6],DL
            xor ECX,EDI
            shl EAX,16
            movzx EBX,BH
            mov EDX,ESI
            mov BYTE PTR [R13+5],BL
            xor EAX,ECX
            shr R8D,24
            mov EBX,ESI
            shr EDX,16
            mov BYTE PTR [R13+10],DL
            movzx EBX,BH
            mov EDX,EAX
            mov BYTE PTR [R13+9],BL
            mov BYTE PTR [R13+12],AL
            movzx EBX,AH
            shr ESI,24
            shr EAX,24
            shr EDX,16
            mov BYTE PTR [R13+15],AL
            mov BYTE PTR [R13+3],R9B
            xor EAX,EAX
            mov BYTE PTR [R13+7],R8B
            mov BYTE PTR [R13+11],SIL
            mov BYTE PTR [R13+13],BL
            mov BYTE PTR [R13+14],DL
            pop RBX
.L_441a39:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441a48:

            lea R12,QWORD PTR [RIP+.L_45cc20]
            lea RBP,QWORD PTR [RIP+.L_45c020]
            lea R11,QWORD PTR [RIP+.L_45c820]
            lea R10,QWORD PTR [RIP+.L_45c420]
            jmp .L_44180f
.L_441a69:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441a70:

            jmp .L_441620
.L_441a75:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441a80:

            push R15
            push R14
            push R13
            mov R13,RDX
            push R12
            push RBP
            push RBX
.L_441a8d:

            mov RDX,QWORD PTR [RDI+8]
            mov ECX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RSI+4]
            mov R8D,DWORD PTR [RSI+8]
            mov ESI,DWORD PTR [RSI+12]
            xor ECX,DWORD PTR [RDX]
            xor EAX,DWORD PTR [RDX+4]
            lea R14,QWORD PTR [RDX+16]
            xor R8D,DWORD PTR [RDX+8]
            xor ESI,DWORD PTR [RDX+12]
            mov EDX,DWORD PTR [RDI]
            sar EDX,1
            cmp EDX,1
            jle .L_441eb0

            sub EDX,2
            lea R12,QWORD PTR [RIP+.L_45bb20]
            lea RBP,QWORD PTR [RIP+.L_45af20]
            mov DWORD PTR [RSP-12],EDX
            add RDX,1
            lea R11,QWORD PTR [RIP+.L_45b720]
            shl RDX,5
            lea R10,QWORD PTR [RIP+.L_45b320]
            mov QWORD PTR [RSP-8],R13
            lea RBX,QWORD PTR [R14+RDX*1]
            mov R9,R14
            mov R13,RBX
            nop
            nop
            nop
            nop
.L_441af8:

            mov EDX,EAX
            movzx EDI,CL
            mov R15D,ESI
            shr EDX,24
            mov EBX,DWORD PTR [R12+RDI*4]
            mov EDI,R8D
            xor EBX,DWORD PTR [RBP+RDX*4]
            mov EDX,ESI
            shr EDI,24
            xor EBX,DWORD PTR [R9]
            movzx EDX,DH
            shr R15D,24
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            shr EDX,16
            movzx EDX,DL
            xor EBX,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RDI*4]
            movzx EDI,CH
            xor EDX,DWORD PTR [R9+4]
            xor EDX,DWORD PTR [R11+RDI*4]
            mov EDI,ESI
            movzx ESI,SIL
            shr EDI,16
            mov ESI,DWORD PTR [R12+RSI*4]
            movzx EDI,DIL
            xor EDX,DWORD PTR [R10+RDI*4]
            movzx EDI,R8B
            mov EDI,DWORD PTR [R12+RDI*4]
            xor EDI,DWORD PTR [RBP+R15*4]
            mov R15D,ECX
            shr ECX,24
            xor EDI,DWORD PTR [R9+8]
            shr R15D,16
            xor ESI,DWORD PTR [RBP+RCX*4]
            mov ECX,R8D
            movzx R15D,R15B
            xor ESI,DWORD PTR [R9+12]
            mov DWORD PTR [RSP-16],EDX
            movzx ECX,CH
            movzx EDX,AH
            shr EAX,16
            xor ESI,DWORD PTR [R11+RCX*4]
            xor EDI,DWORD PTR [R11+RDX*4]
            movzx EAX,AL
            mov EDX,DWORD PTR [RSP-16]
            xor ESI,DWORD PTR [R10+RAX*4]
            xor EDI,DWORD PTR [R10+R15*4]
            movzx ECX,BL
            mov ECX,DWORD PTR [R12+RCX*4]
            mov EAX,EDX
            movzx EDX,BH
            shr EAX,24
            xor ECX,DWORD PTR [RBP+RAX*4]
            mov EAX,ESI
            mov R8D,EDI
            xor ECX,DWORD PTR [R9+16]
            movzx EAX,AH
            shr R8D,24
            xor ECX,DWORD PTR [R11+RAX*4]
            mov EAX,EDI
            mov R15D,ESI
            shr EAX,16
            movzx EAX,AL
            xor ECX,DWORD PTR [R10+RAX*4]
            movzx EAX,BYTE PTR [RSP-16]
            mov EAX,DWORD PTR [R12+RAX*4]
            xor EAX,DWORD PTR [RBP+R8*4]
            mov R8D,ESI
            xor EAX,DWORD PTR [R9+20]
            shr R8D,16
            shr R15D,24
            xor EAX,DWORD PTR [R11+RDX*4]
            movzx R8D,R8B
            movzx ESI,SIL
            xor EAX,DWORD PTR [R10+R8*4]
            mov EDX,DWORD PTR [RSP-16]
            movzx R8D,DIL
            mov R8D,DWORD PTR [R12+R8*4]
            xor R8D,DWORD PTR [RBP+R15*4]
            mov R15D,EBX
            xor R8D,DWORD PTR [R9+24]
            shr EBX,24
            add R9,32
            movzx EDX,DH
            mov ESI,DWORD PTR [R12+RSI*4]
            xor ESI,DWORD PTR [RBP+RBX*4]
            xor R8D,DWORD PTR [R11+RDX*4]
            mov EDX,DWORD PTR [RSP-16]
            mov EBX,EDI
            shr R15D,16
            xor ESI,DWORD PTR [R9-4]
            movzx EDI,BH
            xor ESI,DWORD PTR [R11+RDI*4]
            movzx R15D,R15B
            shr EDX,16
            xor R8D,DWORD PTR [R10+R15*4]
            movzx EDX,DL
            xor ESI,DWORD PTR [R10+RDX*4]
            cmp R13,R9
            jne .L_441af8

            mov EDX,DWORD PTR [RSP-12]
            mov R13,QWORD PTR [RSP-8]
            add RDX,1
            shl RDX,5
            add R14,RDX
.L_441c7c:

            mov EDX,EAX
            movzx EDI,CL
            mov R9D,ESI
            shr EDX,24
            mov EBX,DWORD PTR [R12+RDI*4]
            mov EDI,R8D
            xor EBX,DWORD PTR [RBP+RDX*4]
            mov EDX,ESI
            shr EDI,24
            xor EBX,DWORD PTR [R14]
            movzx EDX,DH
            shr R9D,24
            xor EBX,DWORD PTR [R11+RDX*4]
            mov EDX,R8D
            shr EDX,16
            movzx EDX,DL
            xor EBX,DWORD PTR [R10+RDX*4]
            movzx EDX,AL
            mov EDX,DWORD PTR [R12+RDX*4]
            xor EDX,DWORD PTR [RBP+RDI*4]
            movzx EDI,CH
            xor EDX,DWORD PTR [R14+4]
            xor EDX,DWORD PTR [R11+RDI*4]
            mov EDI,ESI
            movzx ESI,SIL
            shr EDI,16
            mov ESI,DWORD PTR [R12+RSI*4]
            movzx EDI,DIL
            xor EDX,DWORD PTR [R10+RDI*4]
            movzx EDI,R8B
            mov EDI,DWORD PTR [R12+RDI*4]
            xor EDI,DWORD PTR [RBP+R9*4]
            mov R9D,ECX
            shr ECX,24
            xor EDI,DWORD PTR [R14+8]
            shr R9D,16
            xor ESI,DWORD PTR [RBP+RCX*4]
            mov ECX,DWORD PTR [R14+12]
            movzx R9D,R9B
            movzx EBP,DH
            mov R15D,EDI
            movzx EDI,AH
            shr EAX,16
            xor ECX,ESI
            mov EDI,DWORD PTR [R11+RDI*4]
            movzx EAX,AL
            mov ESI,ECX
            mov ECX,R8D
            movzx ECX,CH
            xor ESI,DWORD PTR [R11+RCX*4]
            xor EDI,R15D
            xor EDI,DWORD PTR [R10+R9*4]
            mov ECX,ESI
            xor ECX,DWORD PTR [R10+RAX*4]
            lea RAX,QWORD PTR [RIP+.L_45bf20]
            movzx ESI,BL
            movzx R9D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDX
            shr ESI,24
            xor R9D,DWORD PTR [R14+16]
            movzx ESI,BYTE PTR [RAX+RSI*1]
            mov R10D,ECX
            shl ESI,24
            xor R9D,ESI
            movzx ESI,CH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R9D,ESI
            mov ESI,EDI
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R9D,ESI
            movzx ESI,DL
            shr R10D,24
            movzx R8D,BYTE PTR [RAX+RSI*1]
            mov ESI,EDI
            shr EDX,16
            shr ESI,24
            xor R8D,DWORD PTR [R14+20]
            movzx EDX,DL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,24
            xor R8D,ESI
            movzx ESI,BH
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,8
            xor R8D,ESI
            mov ESI,ECX
            movzx ECX,CL
            shr ESI,16
            movzx ESI,SIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            shl ESI,16
            xor R8D,ESI
            movzx ESI,DIL
            movzx ESI,BYTE PTR [RAX+RSI*1]
            xor ESI,DWORD PTR [R14+24]
            movzx R10D,BYTE PTR [RAX+R10*1]
            movzx ECX,BYTE PTR [RAX+RCX*1]
            xor ECX,DWORD PTR [R14+28]
            mov BYTE PTR [R13],R9B
            mov BYTE PTR [R13+4],R8B
            shl R10D,24
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBP*1]
            shl R10D,8
            xor ESI,R10D
            mov R10D,EBX
            shr EBX,24
            shr R10D,16
            movzx R10D,R10B
            movzx R10D,BYTE PTR [RAX+R10*1]
            shl R10D,16
            xor ESI,R10D
            movzx R10D,BYTE PTR [RAX+RBX*1]
            mov EBX,EDI
            movzx EDI,BH
            mov EBX,R9D
            mov BYTE PTR [R13+8],SIL
            movzx EDI,BYTE PTR [RAX+RDI*1]
            movzx EAX,BYTE PTR [RAX+RDX*1]
            mov EDX,R9D
            shr EDX,16
            movzx EBX,BH
            shr R9D,24
            mov BYTE PTR [R13+2],DL
            shl R10D,24
            mov EDX,R8D
            mov BYTE PTR [R13+1],BL
            shr EDX,16
            xor ECX,R10D
            shl EDI,8
            mov EBX,R8D
            mov BYTE PTR [R13+6],DL
            xor ECX,EDI
            shl EAX,16
            movzx EBX,BH
            mov EDX,ESI
            mov BYTE PTR [R13+5],BL
            xor EAX,ECX
            shr R8D,24
            mov EBX,ESI
            shr EDX,16
            mov BYTE PTR [R13+10],DL
            movzx EBX,BH
            mov EDX,EAX
            mov BYTE PTR [R13+9],BL
            mov BYTE PTR [R13+12],AL
            movzx EBX,AH
            shr ESI,24
            shr EAX,24
            shr EDX,16
            mov BYTE PTR [R13+15],AL
            mov BYTE PTR [R13+3],R9B
            xor EAX,EAX
            mov BYTE PTR [R13+7],R8B
            mov BYTE PTR [R13+11],SIL
            mov BYTE PTR [R13+13],BL
            mov BYTE PTR [R13+14],DL
            pop RBX
.L_441ea3:

            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_441eb0:

            lea R12,QWORD PTR [RIP+.L_45bb20]
            lea RBP,QWORD PTR [RIP+.L_45af20]
            lea R11,QWORD PTR [RIP+.L_45b720]
            lea R10,QWORD PTR [RIP+.L_45b320]
            jmp .L_441c7c
.L_441ed1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441ee0:

            jmp .L_441a80
.L_441ee5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441ef0:

            mov RAX,RDX
            cmp ESI,1
            mov RDX,RCX
            mov RSI,RAX
            je .L_441f08

            jmp .L_441a80
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_441f08:

            jmp .L_441620
.L_441f0d:

            nop
            nop
            nop
.L_441f10:

            cmp RDX,16
            je .L_441f60

            cmp RDX,8
            mov R9D,27
            jne .L_441f68
.L_441f22:

            lea EAX,DWORD PTR [RDX-1]
            xor ECX,ECX
            cdqe 
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_441f30:

            movzx R8D,BYTE PTR [RSI+RAX*1]
            add R8D,R8D
            or ECX,R8D
            mov BYTE PTR [RDI+RAX*1],CL
            movzx ECX,BYTE PTR [RSI+RAX*1]
            sub RAX,1
            shr CL,7
            test EAX,EAX
            jns .L_441f30

            movzx EAX,BYTE PTR [RSI]
            sar AL,7
            and EAX,R9D
            xor BYTE PTR [RDI+RDX*1-1],AL
            xor EAX,EAX
            ret 

            nop
            nop
            nop
.L_441f60:

            mov R9D,4294967175
            jmp .L_441f22
.L_441f68:

            mov EAX,4294942464
            ret 
.L_441f6e:

            nop
            nop
.L_441f70:

            push RBP
            push RBX
            sub RSP,8
.L_441f76:

            test RDI,RDI
            je .L_441fe5

            cmp QWORD PTR [RDI],0
            je .L_441fe5

            test RSI,RSI
            je .L_441fe5

            mov ECX,1
            mov RBX,RDI
            call .L_452fa0

            test EAX,EAX
            mov EBP,EAX
            jne .L_441fdc

            mov RAX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RAX]
            cmp EAX,36
            ja .L_441fe5

            movabs RDX,68719476764
            bt RDX,RAX
            jae .L_441fe5

            mov ESI,40
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_441fec

            lea RDX,QWORD PTR [RAX+16]
            mov QWORD PTR [RBX+72],RAX
.L_441fd0:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_441fd0
.L_441fdc:

            add RSP,8
.L_441fe0:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_441fe5:

            mov EBP,4294942464
            jmp .L_441fdc
.L_441fec:

            mov EBP,4294942336
            jmp .L_441fdc
.L_441ff3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442000:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,40
.L_44200e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            test RDI,RDI
            je .L_4421a7

            mov RAX,QWORD PTR [RDI]
            mov R12,RDI
            test RAX,RAX
            je .L_4421a7

            test RSI,RSI
            mov R13,RSI
            je .L_4421a7

            mov RBX,QWORD PTR [RDI+72]
            test RBX,RBX
            je .L_4421a7

            mov R15D,DWORD PTR [RAX+32]
            mov RAX,QWORD PTR [RBX+32]
            mov RBP,RDX
            test RAX,RAX
            jne .L_442110
.L_442063:

            lea RAX,QWORD PTR [R15+RBP*1-1]
            xor EDX,EDX
            lea RDI,QWORD PTR [RSP+16]
            mov R14D,1
            div R15
            mov QWORD PTR [RSP],RDI
            cmp RAX,1
            mov QWORD PTR [RSP+8],RAX
            jbe .L_4420de

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442090:

            xor EDX,EDX
            test R15,R15
            je .L_4420b2

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4420a0:

            movzx EAX,BYTE PTR [R13+RDX*1]
            xor BYTE PTR [RBX+RDX*1],AL
            add RDX,1
            cmp R15,RDX
            jne .L_4420a0
.L_4420b2:

            mov R8,QWORD PTR [RSP]
            mov RCX,RBX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R12
            call .L_453130

            test EAX,EAX
            mov ECX,EAX
            jne .L_4420e9

            sub RBP,R15
            add R13,R15
            add R14,1
            cmp QWORD PTR [RSP+8],R14
            jne .L_442090
.L_4420de:

            xor ECX,ECX
            test RBP,RBP
            jne .L_442184
.L_4420e9:

            mov RSI,QWORD PTR [RSP+24]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_4421b1

            add RSP,40
.L_442103:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_442110:

            mov RDX,R15
            sub RDX,RAX
            cmp RDX,RBP
            jae .L_442063

            lea RDI,QWORD PTR [RBX+RAX*1+16]
            call memcpy@PLT

            test R15,R15
            lea RCX,QWORD PTR [RBX+16]
            je .L_442148

            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_442138:

            movzx EDX,BYTE PTR [RCX+RAX*1]
            xor BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp R15,RAX
            jne .L_442138
.L_442148:

            lea R8,QWORD PTR [RSP+16]
            mov RCX,RBX
            mov RDX,R15
            mov RSI,RBX
            mov RDI,R12
            call .L_453130

            test EAX,EAX
            mov ECX,EAX
            jne .L_4420e9

            mov RAX,QWORD PTR [RBX+32]
            mov RDX,R15
            mov QWORD PTR [RBX+32],0
            sub RDX,RAX
            add RBP,RAX
            add R13,RDX
            sub RBP,R15
            jmp .L_442063
.L_442184:

            mov RAX,QWORD PTR [RBX+32]
            mov RDX,RBP
            mov RSI,R13
            mov DWORD PTR [RSP],ECX
            lea RDI,QWORD PTR [RBX+RAX*1+16]
            call memcpy@PLT

            add QWORD PTR [RBX+32],RBP
            mov ECX,DWORD PTR [RSP]
            jmp .L_4420e9
.L_4421a7:

            mov ECX,4294942464
            jmp .L_4420e9
.L_4421b1:

            call __stack_chk_fail@PLT
.L_4421b6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4421c0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_4421ce:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+24],RSI
            je .L_44247c

            mov RCX,QWORD PTR [RDI]
            mov R11,RDI
            test RCX,RCX
            je .L_44247c

            mov R14,QWORD PTR [RDI+72]
            test R14,R14
            je .L_44247c

            test RSI,RSI
            je .L_44247c

            lea RBX,QWORD PTR [RSP+48]
            mov R10D,DWORD PTR [RCX+32]
            mov R12,R14
            lea RDX,QWORD PTR [RBX+16]
            mov RAX,RBX
            nop
            nop
            nop
            nop
.L_442228:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_442228

            lea RBP,QWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RBP+16]
            mov RAX,RBP
.L_442240:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_442240

            lea R15,QWORD PTR [RSP+80]
            lea RDX,QWORD PTR [R15+16]
            mov RAX,R15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442260:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_442260

            mov R13D,DWORD PTR [RCX+32]
            lea RAX,QWORD PTR [RSP+40]
            mov RDI,R11
            mov RCX,R15
            mov RSI,R15
            mov QWORD PTR [RSP+16],R10
            mov R8,RAX
            mov QWORD PTR [RSP+8],R11
            mov QWORD PTR [RSP],RAX
            mov RDX,R13
            call .L_453130

            test EAX,EAX
            mov R11,QWORD PTR [RSP+8]
            mov R10,QWORD PTR [RSP+16]
            je .L_442438
.L_4422a9:

            lea RDX,QWORD PTR [R15+16]
            mov RAX,R15
.L_4422b0:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_4422b0

            mov RDX,QWORD PTR [R14+32]
            lea R9,QWORD PTR [R14+16]
            xor EAX,EAX
            mov R13,R9
            cmp RDX,R10
            jb .L_4423da

            test R10,R10
            je .L_442312

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4422e0:

            movzx EDX,BYTE PTR [R9+RAX*1]
            xor DL,BYTE PTR [RBX+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_4422e0
.L_4422f5:

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442300:

            movzx EDX,BYTE PTR [R15+RAX*1]
            xor BYTE PTR [R14+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_442300
.L_442312:

            mov R8,QWORD PTR [RSP]
            mov RDX,R10
            mov RCX,R14
            mov RSI,R14
            mov RDI,R11
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP],R10
            call .L_453130

            test EAX,EAX
            mov R15D,EAX
            mov R10,QWORD PTR [RSP]
            mov R9,QWORD PTR [RSP+8]
            je .L_442418
.L_442344:

            lea RAX,QWORD PTR [RBX+16]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442350:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_442350

            lea RAX,QWORD PTR [RBP+16]
.L_442360:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RBP,RAX
            jne .L_442360

            mov QWORD PTR [R14+32],0
            add R14,32
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442380:

            mov BYTE PTR [R13],0
            add R13,1
            cmp R13,R14
            jne .L_442380

            nop
            nop
.L_442390:

            mov BYTE PTR [R12],0
            add R12,1
            cmp R12,R9
            jne .L_442390
.L_44239e:

            mov RDI,QWORD PTR [RSP+104]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_442491

            add RSP,120
.L_4423b9:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4423c8:

            movzx ECX,BYTE PTR [R9+RAX*1]
            mov BYTE PTR [R15+RAX*1],CL
.L_4423d1:

            add RAX,1
            cmp R10,RAX
            je .L_4423f3
.L_4423da:

            cmp RDX,RAX
            ja .L_4423c8

            je .L_442487

            mov BYTE PTR [R15+RAX*1],0
            add RAX,1
            cmp R10,RAX
            jne .L_4423da
.L_4423f3:

            xor EAX,EAX
            nop
            nop
            nop
.L_4423f8:

            movzx EDX,BYTE PTR [R15+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp R10,RAX
            jne .L_4423f8

            jmp .L_4422f5
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442418:

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R10
            mov RSI,R14
            mov QWORD PTR [RSP],R9
            call memcpy@PLT

            mov R9,QWORD PTR [RSP]
            jmp .L_442344
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_442438:

            mov RDX,R13
            mov RSI,R15
            mov RDI,RBX
            mov QWORD PTR [RSP+16],R11
            mov QWORD PTR [RSP+8],R10
            call .L_441f10

            test EAX,EAX
            mov R10,QWORD PTR [RSP+8]
            mov R11,QWORD PTR [RSP+16]
            jne .L_4422a9

            mov RSI,RBX
            mov RDI,RBP
            call .L_441f10

            mov R11,QWORD PTR [RSP+16]
            mov R10,QWORD PTR [RSP+8]
            jmp .L_4422a9
.L_44247c:

            mov R15D,4294942464
            jmp .L_44239e
.L_442487:

            mov BYTE PTR [R15+RDX*1],128
            jmp .L_4423d1
.L_442491:

            call __stack_chk_fail@PLT
.L_442496:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4424a0:

            test RDI,RDI
            je .L_4424ef

            cmp QWORD PTR [RDI],0
            je .L_4424ef

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_4424ef

            lea RCX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+32]
            mov QWORD PTR [RAX+32],0
            mov RDX,RCX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4424d0:

            mov BYTE PTR [RDX],0
            add RDX,1
            cmp RSI,RDX
            jne .L_4424d0

            nop
            nop
            nop
            nop
.L_4424e0:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RCX,RAX
            jne .L_4424e0

            xor EAX,EAX
            ret 
.L_4424ef:

            mov EAX,4294942464
            ret 
.L_4424f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442500:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_44250e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            test RDI,RDI
            mov QWORD PTR [RSP+8],R8
            je .L_4425e0

            test RSI,RSI
            mov R14,RSI
            je .L_4425e0

            test RCX,RCX
            mov R12,RCX
            je .L_4425e0

            test R9,R9
            mov R13,R9
            je .L_4425e0

            lea RBX,QWORD PTR [RSP+16]
            mov RBP,RDI
            mov R15,RDX
            mov RDI,RBX
            call .L_452ec0

            mov RSI,RBP
            mov RDI,RBX
            call .L_452f40

            test EAX,EAX
            mov EBP,EAX
            je .L_4425a0
.L_442574:

            mov RDI,RBX
            call .L_452ee0
.L_44257c:

            mov RCX,QWORD PTR [RSP+104]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_4425e7

            add RSP,120
.L_442592:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4425a0:

            mov RDX,R15
            mov RSI,R14
            mov RDI,RBX
            call .L_441f70

            test EAX,EAX
            mov EBP,EAX
            jne .L_442574

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,RBX
            call .L_442000

            test EAX,EAX
            mov EBP,EAX
            jne .L_442574

            mov RSI,R13
            mov RDI,RBX
            call .L_4421c0

            mov EBP,EAX
            jmp .L_442574
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4425e0:

            mov EBP,4294942464
            jmp .L_44257c
.L_4425e7:

            call __stack_chk_fail@PLT
.L_4425ec:

            nop
            nop
            nop
            nop
.L_4425f0:

            push R15
            push R14
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            sub RSP,72
.L_442601:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test RDX,RDX
            mov QWORD PTR [RSP+8],RSI
            sete DL
            test R8,R8
            sete AL
            or DL,AL
            jne .L_442704

            test RDI,RDI
            mov R12,RDI
            je .L_442704

            mov EDI,2
            mov R15,RCX
            mov R14,R8
            call .L_452de0

            test RAX,RAX
            mov RBP,RAX
            je .L_4426f8

            mov RSI,QWORD PTR [RSP+8]
            cmp RSI,16
            jne .L_4426c0

            movdqu XMM0,XMMWORD PTR [R12]
            lea RBX,QWORD PTR [RSP+32]
            movaps XMMWORD PTR [RSP+32],XMM0
.L_44266d:

            mov R9,R14
            mov R8,R15
            mov RCX,R13
            mov EDX,128
            mov RSI,RBX
            mov RDI,RBP
            call .L_442500
.L_442686:

            lea RDX,QWORD PTR [RBX+16]
            mov RSI,RBX
            nop
            nop
            nop
.L_442690:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RDX
            jne .L_442690
.L_44269c:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44270b

            add RSP,72
.L_4426b0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4426c0:

            lea RAX,QWORD PTR [RSP+16]
            pxor XMM0,XMM0
            lea RBX,QWORD PTR [RSP+32]
            mov R8,RSI
            mov RCX,R12
            mov EDX,128
            mov RSI,RAX
            mov RDI,RBP
            mov R9,RBX
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_442500

            test EAX,EAX
            jne .L_442686

            jmp .L_44266d
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4426f8:

            mov EAX,4294942592
            lea RBX,QWORD PTR [RSP+32]
            jmp .L_442686
.L_442704:

            mov EAX,4294942464
            jmp .L_44269c
.L_44270b:

            call __stack_chk_fail@PLT
.L_442710:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,856
.L_442721:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+840],RAX
            xor EAX,EAX
            cmp RDX,384
            ja .L_442919

            mov RBP,RDI
            lea RDI,QWORD PTR [RSP+416]
            mov ECX,52
            lea RBX,QWORD PTR [RSP+32]
            mov R12,RDX
            mov R13,RSI
            mov QWORD PTR [RSP+16],RDI

            rep stosq QWORD PTR [RDI]

            mov RDI,RBX
            call .L_441130

            mov RDI,QWORD PTR [RSP+16]
            mov RAX,R12
            mov RSI,R13
            shr RAX,8
            mov ECX,392
            mov RDX,R12
            mov BYTE PTR [RSP+434],AL
            mov BYTE PTR [RSP+435],R12B
            add RDI,24
            mov BYTE PTR [RSP+439],48
            call __memcpy_chk@PLT

            lea RAX,QWORD PTR [R12+25]
            lea RSI,QWORD PTR [RSP+336]
            mov BYTE PTR [RSP+R12*1+440],128
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
.L_4427c0:

            mov BYTE PTR [RSI+RAX*1],AL
            add RAX,1
            cmp RAX,32
            jne .L_4427c0

            mov EDX,256
            mov RDI,RBX
            lea R15,QWORD PTR [RSP+320]
            call .L_441180

            movzx EAX,BYTE PTR [RSP+419]
            xor R12D,R12D
            add EAX,1
            mov BYTE PTR [RSP+7],AL
            lea RAX,QWORD PTR [RSP+368]
            mov QWORD PTR [RSP+8],RAX
.L_442801:

            pxor XMM0,XMM0
            mov R14,QWORD PTR [RSP+24]
            mov R13,QWORD PTR [RSP+16]
            xor EDX,EDX
            movaps XMMWORD PTR [R15],XMM0
            nop
            nop
            nop
.L_442818:

            xor EAX,EAX
            jmp .L_442825
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_442820:

            movzx EDX,BYTE PTR [R15+RAX*1]
.L_442825:

            xor DL,BYTE PTR [R13+RAX*1]
            mov BYTE PTR [R15+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_442820

            add R13,16
            cmp R14,16
            mov RCX,R15
            cmovbe RAX,R14
            mov RDX,R15
            mov ESI,1
            sub R14,RAX
            mov RDI,RBX
            call .L_441ef0

            test R14,R14
            je .L_442870

            movzx EDX,BYTE PTR [RSP+320]
            jmp .L_442818
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442870:

            mov RAX,QWORD PTR [RSP+8]
            movdqa XMM0,XMMWORD PTR [RSP+320]
            movaps XMMWORD PTR [RAX+R12*1],XMM0
            movzx EAX,BYTE PTR [RSP+7]
            add R12,16
            mov BYTE PTR [RSP+419],AL
            add EAX,1
            cmp R12,48
            mov BYTE PTR [RSP+7],AL
            jne .L_442801

            mov R13,QWORD PTR [RSP+8]
            lea R12,QWORD PTR [RBP+48]
            mov EDX,256
            mov RDI,RBX
            mov RSI,R13
            add R13,32
            call .L_441180
.L_4428c1:

            mov RCX,R13
            mov RDX,R13
            mov ESI,1
            mov RDI,RBX
            add RBP,16
            call .L_441ef0

            movdqa XMM0,XMMWORD PTR [RSP+400]
            movaps XMMWORD PTR [RBP-16],XMM0
            cmp R12,RBP
            jne .L_4428c1

            mov RDI,RBX
            call .L_441160

            xor EAX,EAX
.L_4428f4:

            mov RCX,QWORD PTR [RSP+840]
            xor RCX,QWORD PTR FS:[40]
            jne .L_442920

            add RSP,856
.L_44290e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_442919:

            mov EAX,4294967240
            jmp .L_4428f4
.L_442920:

            call __stack_chk_fail@PLT
.L_442925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442930:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R14,RSI
            push R12
            push RBP
            mov R12,RDI
            push RBX
            lea RBX,QWORD PTR [RDI+40]
            sub RSP,72
.L_44294c:

            mov RBP,RSP
            movaps XMMWORD PTR [RSP],XMM0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            lea R13,QWORD PTR [RBP+48]
            mov R15,RBP
            movaps XMMWORD PTR [RSP+32],XMM0
.L_442974:

            mov EAX,15
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442980:

            test EAX,EAX
            setne CL
            movzx ESI,BYTE PTR [R12+RAX*1]
            lea EDX,DWORD PTR [RSI+1]
            test DL,DL
            mov BYTE PTR [R12+RAX*1],DL
            sete DL
            sub RAX,1
            test CL,DL
            jne .L_442980

            mov RCX,R15
            mov RDX,R12
            mov ESI,1
            mov RDI,RBX
            add R15,16
            call .L_441ef0

            cmp R15,R13
            jne .L_442974

            xor EAX,EAX
            nop
            nop
            nop
            nop
.L_4429c0:

            movzx EDX,BYTE PTR [RBP+RAX*1]
            xor DL,BYTE PTR [R14+RAX*1]
            mov BYTE PTR [RBP+RAX*1],DL
            add RAX,1
            cmp RAX,48
            jne .L_4429c0

            mov RDI,RBX
            mov EDX,256
            mov RSI,RBP
            call .L_441180

            movdqa XMM0,XMMWORD PTR [RSP+32]
            xor EAX,EAX
            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            movups XMMWORD PTR [R12],XMM0
            jne .L_442a13

            add RSP,72
.L_442a08:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_442a13:

            call __stack_chk_fail@PLT
.L_442a18:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442a20:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+336],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,344
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_442a4f:

            nop
.L_442a50:

            test RDI,RDI
            je .L_442a7e

            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+40]
            call .L_441160

            lea RAX,QWORD PTR [RBX+344]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442a70:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RAX,RBX
            jne .L_442a70

            pop RBX
            ret 
.L_442a7e:

            ret 
.L_442a80:

            mov DWORD PTR [RDI+20],ESI
            ret 
.L_442a84:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442a90:

            mov QWORD PTR [RDI+24],RSI
            ret 
.L_442a95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442aa0:

            mov DWORD PTR [RDI+32],ESI
            ret 
.L_442aa4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442ab0:

            push RBP
            push RBX
            sub RSP,72
.L_442ab6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            test RDX,RDX
            je .L_442af4

            cmp RDX,384
            mov EAX,384
            mov RBX,RSP
            mov RBP,RDI
            cmova RDX,RAX
            mov RDI,RBX
            call .L_442710

            mov RSI,RBX
            mov RDI,RBP
            call .L_442930
.L_442af4:

            mov RAX,QWORD PTR [RSP+56]
            xor RAX,QWORD PTR FS:[40]
            jne .L_442b0b

            add RSP,72
.L_442b08:

            pop RBX
            pop RBP
            ret 
.L_442b0b:

            call __stack_chk_fail@PLT
.L_442b10:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDX
            push RBP
            push RBX
            sub RSP,408
.L_442b24:

            mov RDX,QWORD PTR [RDI+24]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            cmp RDX,384
            ja .L_442bf8

            mov EAX,384
            sub RAX,RDX
            cmp RAX,R12
            jb .L_442bf8

            mov RBX,RSP
            mov RBP,RDI
            xor EAX,EAX
            mov ECX,48
            mov RDI,RBX
            mov R15,RSI

            rep stosq QWORD PTR [RDI]

            mov RSI,RBX
            mov RDI,QWORD PTR [RBP+336]
            call QWORD PTR [RBP+328]

            test EAX,EAX
            mov R13D,EAX
            jne .L_442c00

            test R15,R15
            mov R14,QWORD PTR [RBP+24]
            je .L_442b94

            test R12,R12
            jne .L_442be0
.L_442b94:

            mov RDX,R14
            mov RSI,RBX
            mov RDI,RBX
            call .L_442710

            mov RSI,RBX
            mov RDI,RBP
            call .L_442930

            mov DWORD PTR [RBP+16],1
.L_442bb4:

            mov RCX,QWORD PTR [RSP+392]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_442c08

            add RSP,408
.L_442bd1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_442be0:

            lea RDI,QWORD PTR [RBX+R14*1]
            mov RDX,R12
            mov RSI,R15
            add R14,R12
            call memcpy@PLT

            jmp .L_442b94
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_442bf8:

            mov R13D,4294967240
            jmp .L_442bb4
.L_442c00:

            mov R13D,4294967244
            jmp .L_442bb4
.L_442c08:

            call __stack_chk_fail@PLT
.L_442c0d:

            nop
            nop
            nop
.L_442c10:

            push R15
            pxor XMM0,XMM0
            push R14
            push R13
            mov R15,R9
            push R12
            push RBP
            lea RBP,QWORD PTR [RDI+40]
            push RBX
            mov RBX,RDI
            mov R12,RCX
            mov RDI,RBP
            mov R13,R8
            sub RSP,72
.L_442c35:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            movaps XMMWORD PTR [RSP+16],XMM0
            mov QWORD PTR [RSP+8],RSI
            mov QWORD PTR [RSP],RDX
            lea R14,QWORD PTR [RSP+16]
            movaps XMMWORD PTR [RSP+32],XMM0
            call .L_441130

            mov RDI,RBP
            mov RSI,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [RSP]
            mov QWORD PTR [RBX+24],R15
            mov DWORD PTR [RBX+32],10000
            mov QWORD PTR [RBX+328],RSI
            mov QWORD PTR [RBX+336],RDX
            mov RSI,R14
            mov EDX,256
            call .L_441180

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_442b10

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_442cc1

            add RSP,72
.L_442cb6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_442cc1:

            call __stack_chk_fail@PLT
.L_442cc6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_442cd0:

            mov R9D,32
            jmp .L_442c10
.L_442cdb:

            nop
            nop
            nop
            nop
            nop
.L_442ce0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_442cee:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp RDX,1024
            ja .L_442ed1

            cmp R8,256
            ja .L_442ec7

            lea RAX,QWORD PTR [RSP+32]
            pxor XMM0,XMM0
            mov RBX,RDI
            mov R15,RSI
            mov R14,RDX
            mov QWORD PTR [RSP+8],RAX
            mov EAX,DWORD PTR [RDI+32]
            cmp DWORD PTR [RDI+16],EAX
            movaps XMMWORD PTR [RSP+32],XMM0
            movaps XMMWORD PTR [RSP+48],XMM0
            movaps XMMWORD PTR [RSP+64],XMM0
            jg .L_442d51

            mov EAX,DWORD PTR [RDI+20]
            test EAX,EAX
            je .L_442e70
.L_442d51:

            mov RDX,R8
            mov RSI,RCX
            mov RDI,RBX
            call .L_442b10

            test EAX,EAX
            jne .L_442df6
.L_442d67:

            test R14,R14
            je .L_442de3

            lea R12,QWORD PTR [RBX+40]
            lea R13,QWORD PTR [RSP+16]
            mov EBP,16
.L_442d7a:

            mov EAX,15
            nop
.L_442d80:

            movzx EDI,BYTE PTR [RBX+RAX*1]
            lea EDX,DWORD PTR [RDI+1]
            test DL,DL
            mov BYTE PTR [RBX+RAX*1],DL
            sete CL
            test EAX,EAX
            setne DL
            sub RAX,1
            test CL,DL
            jne .L_442d80

            mov RCX,R13
            mov RDX,RBX
            mov ESI,1
            mov RDI,R12
            call .L_441ef0

            cmp R14,16
            mov RAX,RBP
            cmovbe RAX,R14
            cmp EAX,8
            jae .L_442e20

            test AL,4
            jne .L_442e9c

            test EAX,EAX
            je .L_442ddb

            movzx EDX,BYTE PTR [R13]
            test AL,2
            mov BYTE PTR [R15],DL
            jne .L_442eb4
.L_442ddb:

            add R15,RAX
            sub R14,RAX
            jne .L_442d7a
.L_442de3:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_442930

            add DWORD PTR [RBX+16],1
            xor EAX,EAX
.L_442df6:

            mov RSI,QWORD PTR [RSP+88]
            xor RSI,QWORD PTR FS:[40]
            jne .L_442edb

            add RSP,104
.L_442e0e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_442e20:

            mov RDX,QWORD PTR [R13]
            mov R9,R13
            mov QWORD PTR [R15],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [R13+RDX*1-8]
            mov QWORD PTR [R15+RDX*1-8],RCX
            lea RCX,QWORD PTR [R15+8]
            mov RDX,R15
            and RCX,-8
            sub RDX,RCX
            sub R9,RDX
            add EDX,EAX
            and EDX,4294967288
            cmp EDX,8
            jb .L_442ddb

            and EDX,4294967288
            xor ESI,ESI
.L_442e56:

            mov EDI,ESI
            add ESI,8
            mov R10,QWORD PTR [R9+RDI*1]
            cmp ESI,EDX
            mov QWORD PTR [RCX+RDI*1],R10
            jb .L_442e56

            jmp .L_442ddb
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_442e70:

            test R8,R8
            je .L_442d67

            mov RBP,QWORD PTR [RSP+8]
            mov RSI,RCX
            mov RDX,R8
            mov RDI,RBP
            call .L_442710

            mov RSI,RBP
            mov RDI,RBX
            call .L_442930

            jmp .L_442d67
.L_442e9c:

            mov EDX,DWORD PTR [R13]
            mov DWORD PTR [R15],EDX
            mov EDX,EAX
            mov ECX,DWORD PTR [R13+RDX*1-4]
            mov DWORD PTR [R15+RDX*1-4],ECX
            jmp .L_442ddb
.L_442eb4:

            mov EDX,EAX
            movzx ECX,WORD PTR [R13+RDX*1-2]
            mov WORD PTR [R15+RDX*1-2],CX
            jmp .L_442ddb
.L_442ec7:

            mov EAX,4294967240
            jmp .L_442df6
.L_442ed1:

            mov EAX,4294967242
            jmp .L_442df6
.L_442edb:

            call __stack_chk_fail@PLT
.L_442ee0:

            xor R8D,R8D
            xor ECX,ECX
            jmp .L_442ce0
.L_442eea:

            nop
            nop
            nop
            nop
            nop
            nop
.L_442ef0:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,600
.L_442f04:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+584],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [R9+8]
            mov DWORD PTR [RSP+60],ECX
            mov QWORD PTR [RSP+40],RDI
            mov DWORD PTR [RSP+56],ESI
            mov QWORD PTR [RSP+48],RDX
            mov RCX,QWORD PTR [R9+16]
            mov RBX,RAX
            sub RBX,1
            mov QWORD PTR [RSP+32],RBX
            je .L_442f71

            mov RDX,QWORD PTR [RCX+RBX*8]
            mov RSI,QWORD PTR [RSP+32]
            test RDX,RDX
            je .L_442f68

            jmp .L_443239
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442f58:

            mov RDX,QWORD PTR [RCX+RAX*8]
            test RDX,RDX
            jne .L_4431f0

            mov RSI,RAX
.L_442f68:

            mov RAX,RSI
            sub RAX,1
            jne .L_442f58
.L_442f71:

            mov RDX,QWORD PTR [RCX]
            mov ESI,1
            mov QWORD PTR [RSP+32],1
            xor ECX,ECX
.L_442f84:

            mov EAX,63
            jmp .L_442f98
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_442f90:

            sub EAX,1
            cmp EAX,-1
            je .L_442fa1
.L_442f98:

            bt RDX,RAX
            jae .L_442f90

            lea ECX,DWORD PTR [RAX+RSI*1]
.L_442fa1:

            lea RBX,QWORD PTR [RSP+64]
            sub RSP,8
.L_442faa:

            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45d120]
            mov EDX,1
            mov ESI,512
            mov QWORD PTR [RSP+24],RBX
            push RCX
            mov RDI,RBX
            mov ECX,512
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RSP+56]
            mov ECX,DWORD PTR [RSP+76]
            mov R8,RBX
            mov RDX,QWORD PTR [RSP+64]
            mov ESI,DWORD PTR [RSP+72]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pop RAX
            pop RDX
.L_442ff4:

            mov RAX,QWORD PTR [RSP+32]
            test RAX,RAX
            je .L_443202

            lea RAX,QWORD PTR [RAX*8-8]
            xor R14D,R14D
            mov DWORD PTR [RSP+24],0
            mov R8D,1
            mov QWORD PTR [RSP+8],RAX
            mov RAX,R15
            mov R15,R14
            mov R14,RAX
            jmp .L_443058
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_443030:

            mov RAX,QWORD PTR [R14+16]
            mov RBX,QWORD PTR [RSP+8]
            mov RAX,QWORD PTR [RAX+RBX*1]
            test RAX,RAX
            jne .L_4431b0
.L_443046:

            sub QWORD PTR [RSP+8],8
            sub QWORD PTR [RSP+32],1
            je .L_44313b
.L_443058:

            test R8D,R8D
            jne .L_443030
.L_44305d:

            mov R12D,7
.L_443063:

            mov R13D,DWORD PTR [RSP+24]
            lea EBP,DWORD PTR [R12*8]
            mov EBX,R12D
            mov DWORD PTR [RSP+28],R12D
            mov R12D,R13D
            mov R13,QWORD PTR [RSP+16]
.L_443080:

            mov ESI,512
            lea RDI,QWORD PTR [R13+R15*1]
            sub RSI,R15
            test R12B,15
            jne .L_4430d0

            test R12D,R12D
            je .L_4430d0

            lea RDX,QWORD PTR [RIP+.L_45d17a]
            xor EAX,EAX
            xor R15D,R15D
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+40]
            mov ESI,DWORD PTR [RSP+56]
            mov R8,R13
            mov ECX,DWORD PTR [RSP+60]
            mov RDX,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            mov RDI,R13
            mov ESI,512
.L_4430d0:

            mov RAX,QWORD PTR [R14+16]
            mov RDX,QWORD PTR [RSP+8]
            mov ECX,EBP
            lea R8,QWORD PTR [RIP+.L_45d13d]
            add R15,3
            add R12D,1
            sub EBP,8
            mov R9,QWORD PTR [RAX+RDX*1]
            xor EAX,EAX
            mov EDX,1
            shr R9,CL
            mov RCX,-1
            movzx R9D,R9B
            call __snprintf_chk@PLT

            sub EBX,1
            jns .L_443080

            mov EAX,DWORD PTR [RSP+24]
            mov R12D,DWORD PTR [RSP+28]
            xor R8D,R8D
            sub QWORD PTR [RSP+8],8
            sub QWORD PTR [RSP+32],1
            lea EAX,DWORD PTR [R12+RAX*1+1]
            mov DWORD PTR [RSP+24],EAX
            jne .L_443058
.L_44313b:

            mov RAX,QWORD PTR [RSP+16]
            mov ESI,512
            sub RSI,R15
            cmp R8D,1
            lea RDI,QWORD PTR [RAX+R15*1]
            je .L_44324d
.L_443156:

            lea RDX,QWORD PTR [RIP+.L_45d17a]
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+40]
            mov R8,QWORD PTR [RSP+16]
            mov ECX,DWORD PTR [RSP+60]
            mov RDX,QWORD PTR [RSP+48]
            mov ESI,DWORD PTR [RSP+56]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            mov RAX,QWORD PTR [RSP+584]
            xor RAX,QWORD PTR FS:[40]
            jne .L_443254

            add RSP,600
.L_4431a3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x90
.L_4431b0:

            mov RDX,RAX
            shr RDX,56
            test RDX,RDX
            jne .L_44305d

            mov R12D,6
.L_4431c6:

            lea ECX,DWORD PTR [R12*8]
            mov RDX,RAX
            shr RDX,CL
            test DL,DL
            jne .L_443063

            sub R12D,1
            cmp R12D,-1
            jne .L_4431c6

            jmp .L_443046
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4431f0:

            mov ECX,EAX
            mov QWORD PTR [RSP+32],RSI
            shl ECX,6
            lea ESI,DWORD PTR [RCX+1]
            jmp .L_442f84
.L_443202:

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,512
.L_44320c:

            lea RDX,QWORD PTR [RIP+.L_45d143]
            xor EAX,EAX
            call snprintf@PLT

            mov RAX,QWORD PTR [RSP+32]
            mov RBX,QWORD PTR [RSP+16]
            mov ESI,512
            add RAX,3
            sub RSI,RAX
            lea RDI,QWORD PTR [RBX+RAX*1]
            jmp .L_443156
.L_443239:

            mov ECX,DWORD PTR [RSP+32]
            mov QWORD PTR [RSP+32],RAX
            shl ECX,6
            lea ESI,DWORD PTR [RCX+1]
            jmp .L_442f84
.L_44324d:

            mov QWORD PTR [RSP+32],R15
            jmp .L_44320c
.L_443254:

            call __stack_chk_fail@PLT
.L_443259:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443260:

            mov DWORD PTR [RIP+.L_67e5e8],EDI
            ret 
.L_443267:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443270:

            push R14
            push R13
            mov R13D,ECX
            push R12
            push RBP
            mov R12,RDX
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,736
.L_44328a:

            test AL,AL
            mov QWORD PTR [RSP+600],R9
            je .L_4432d6

            movaps XMMWORD PTR [RSP+608],XMM0
            movaps XMMWORD PTR [RSP+624],XMM1
            movaps XMMWORD PTR [RSP+640],XMM2
            movaps XMMWORD PTR [RSP+656],XMM3
            movaps XMMWORD PTR [RSP+672],XMM4
            movaps XMMWORD PTR [RSP+688],XMM5
            movaps XMMWORD PTR [RSP+704],XMM6
            movaps XMMWORD PTR [RSP+720],XMM7
.L_4432d6:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+552],RAX
            xor EAX,EAX
            test RBX,RBX
            je .L_443305

            mov RAX,QWORD PTR [RBX]
            test RAX,RAX
            je .L_443305

            cmp QWORD PTR [RAX+32],0
            je .L_443305

            cmp DWORD PTR [RIP+.L_67e5e8],EBP
            jge .L_443330
.L_443305:

            mov RAX,QWORD PTR [RSP+552]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4433ae

            add RSP,736
.L_443323:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_443330:

            lea RAX,QWORD PTR [RSP+784]
            lea R14,QWORD PTR [RSP+32]
            lea R9,QWORD PTR [RSP+8]
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov QWORD PTR [RSP+16],RAX
            lea RAX,QWORD PTR [RSP+560]
            mov RDI,R14
            mov DWORD PTR [RSP+8],40
            mov DWORD PTR [RSP+12],48
            mov QWORD PTR [RSP+24],RAX
            call __vsnprintf_chk@PLT

            cmp EAX,510
            ja .L_443394

            movsxd RDX,EAX
            add EAX,1
            cdqe 
            mov BYTE PTR [RSP+RDX*1+32],10
            mov BYTE PTR [RSP+RAX*1+32],0
.L_443394:

            mov RAX,QWORD PTR [RBX]
            mov R8,R14
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            jmp .L_443305
.L_4433ae:

            call __stack_chk_fail@PLT
.L_4433b3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4433c0:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,528
.L_4433cf:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+520],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_443408

            cmp QWORD PTR [RAX+32],0
            je .L_443408

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            mov EBP,ESI
            jl .L_443408

            cmp R9D,4294940416
            jne .L_443430

            nop
            nop
            nop
            nop
.L_443408:

            mov RAX,QWORD PTR [RSP+520]
            xor RAX,QWORD PTR FS:[40]
            jne .L_443480

            add RSP,528
.L_443422:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_443430:

            mov EAX,R9D
            mov R14,RSP
            mov RBX,RDI
            neg EAX
            mov R12,RDX
            mov R13D,ECX
            push RAX
            push R9
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45d147]
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov RDI,R14
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RBX]
            mov RDX,R12
            mov R8,R14
            mov ECX,R13D
            mov ESI,EBP
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pop RAX
            pop RDX
            jmp .L_443408
.L_443480:

            call __stack_chk_fail@PLT
.L_443485:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443490:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,600
.L_4434a1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+584],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            mov DWORD PTR [RSP+8],ESI
            mov QWORD PTR [RSP],RDX
            mov DWORD PTR [RSP+12],ECX
            test RAX,RAX
            je .L_4434d7

            cmp QWORD PTR [RAX+32],0
            je .L_4434d7

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            jge .L_443500
.L_4434d7:

            mov RAX,QWORD PTR [RSP+584]
            xor RAX,QWORD PTR FS:[40]
            jne .L_443722

            add RSP,600
.L_4434f5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_443500:

            lea RBX,QWORD PTR [RSP+64]
            sub RSP,8
            mov R12,R9
            mov EAX,DWORD PTR [RSP+664]
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45d163]
            mov R14,RDI
            mov ECX,512
            mov EDX,1
            mov ESI,512
            mov RDI,RBX
            push RAX
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [R14]
            mov ECX,DWORD PTR [RSP+28]
            mov R8,RBX
            mov RDX,QWORD PTR [RSP+16]
            mov ESI,DWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pxor XMM0,XMM0
            mov BYTE PTR [RSP+64],0
            movaps XMMWORD PTR [RSP+48],XMM0
            pop RAX
            pop RDX
            cmp QWORD PTR [RSP+656],0
            je .L_4434d7

            lea RAX,QWORD PTR [RSP+32]
            xor R13D,R13D
            mov QWORD PTR [RSP+16],R14
            xor R15D,R15D
            mov EBP,512
            mov R14,R13
            mov QWORD PTR [RSP+24],RAX
            jmp .L_4435a5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_443598:

            cmp R15,4096
            je .L_44371b
.L_4435a5:

            mov RSI,RBP
            mov R13,R15
            lea RDI,QWORD PTR [RBX+R14*1]
            sub RSI,R14
            and R13D,15
            jne .L_443644

            test R15,R15
            je .L_443619

            mov R14,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RIP+.L_45d17c]
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            mov R9,R14
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [RSP+16]
            mov ESI,DWORD PTR [RSP+8]
            mov R8,RBX
            mov ECX,DWORD PTR [RSP+12]
            mov RDX,QWORD PTR [RSP]
            mov RAX,QWORD PTR [RAX]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            pxor XMM0,XMM0
            mov BYTE PTR [R14+16],0
            mov RDI,RBX
            mov ESI,512
            movaps XMMWORD PTR [R14],XMM0
            xor R14D,R14D
.L_443619:

            lea R8,QWORD PTR [RIP+.L_45d182]
            add R14,6
            mov R9D,R15D
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R14*1]
            sub RSI,R14
.L_443644:

            movzx R9D,BYTE PTR [R12+R15*1]
            lea R8,QWORD PTR [RIP+.L_45d13d]
            mov EDX,1
            xor EAX,EAX
            mov RCX,-1
            add R14,3
            call __snprintf_chk@PLT

            movzx EAX,BYTE PTR [R12+R15*1]
            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R14*1]
            lea EDX,DWORD PTR [RAX-32]
            cmp DL,95
            mov EDX,46
            cmovae EAX,EDX
            add R15,1
            sub RSI,R14
            cmp QWORD PTR [RSP+656],R15
            mov BYTE PTR [RSP+R13*1+32],AL
            jne .L_443598

            test R15B,15
            mov R13,R14
            mov EBP,512
            mov R14,QWORD PTR [RSP+16]
            je .L_4436de
.L_4436ae:

            lea RDI,QWORD PTR [RBX+R13*1]
            mov RSI,RBP
            lea RDX,QWORD PTR [RIP+.L_45d189]
            sub RSI,R13
            xor EAX,EAX
            add R15,1
            call snprintf@PLT

            add R13,3
            test R15B,15
            jne .L_4436ae

            mov RSI,RBP
            lea RDI,QWORD PTR [RBX+R13*1]
            sub RSI,R13
.L_4436de:

            mov R9,QWORD PTR [RSP+24]
            lea R8,QWORD PTR [RIP+.L_45d17c]
            mov RCX,-1
            mov EDX,1
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov RAX,QWORD PTR [R14]
            mov R8,RBX
            mov ECX,DWORD PTR [RSP+12]
            mov RDX,QWORD PTR [RSP]
            mov ESI,DWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+32]

            jmp .L_4434d7
.L_44371b:

            mov R14,QWORD PTR [RSP+16]
            jmp .L_4436de
.L_443722:

            call __stack_chk_fail@PLT
.L_443727:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443730:

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_44374c

            cmp QWORD PTR [RAX+32],0
            je .L_44374c

            test R9,R9
            je .L_44374c

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            jge .L_443750
.L_44374c:

            ret 
          .byte 0x66
          .byte 0x90
.L_443750:

            jmp .L_442ef0
.L_443755:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443760:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,552
.L_443771:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+536],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_44379d

            cmp QWORD PTR [RAX+32],0
            je .L_44379d

            cmp DWORD PTR [RIP+.L_67e5e8],ESI
            mov EBP,ESI
            jge .L_4437d0
.L_44379d:

            mov RAX,QWORD PTR [RSP+536]
            xor RAX,QWORD PTR FS:[40]
            jne .L_443863

            add RSP,552
.L_4437bb:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4437d0:

            lea R15,QWORD PTR [RSP+16]
            mov R14,R9
            mov QWORD PTR [RSP+8],R8
            mov R9,R8
            lea R8,QWORD PTR [RIP+.L_45d18d]
            mov RBX,RDI
            mov R12,RDX
            mov R13D,ECX
            mov RDI,R15
            mov ECX,512
            mov EDX,1
            mov ESI,512
            xor EAX,EAX
            call __snprintf_chk@PLT

            mov R9,R14
            mov R8,R15
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,RBX
            call .L_443730

            mov R10,QWORD PTR [RSP+8]
            lea R8,QWORD PTR [RIP+.L_45d193]
            mov RDI,R15
            mov ECX,512
            mov EDX,1
            mov ESI,512
            xor EAX,EAX
            mov R9,R10
            call __snprintf_chk@PLT

            lea R9,QWORD PTR [R14+24]
            mov R8,R15
            mov ECX,R13D
            mov RDX,R12
            mov ESI,EBP
            mov RDI,RBX
            call .L_443730

            jmp .L_44379d
.L_443863:

            call __stack_chk_fail@PLT
.L_443868:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443870:

            push R14
            push R13
            mov R13D,ESI
            push R12
            push RBP
            mov R12,RDX
            push RBX
            mov RBP,RDI
            mov RBX,RCX
            sub RSP,64
.L_443888:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            cmp RCX,32
            mov EAX,ECX
            jbe .L_4438c2

            lea R14,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,R12
            xor ECX,ECX
            mov EBX,32
            mov RDX,R14
            mov R12,R14
            call .L_441020

            mov EAX,32
.L_4438c2:

            lea RSI,QWORD PTR [RSP+14]
            mov EDX,2
            mov RDI,RBP
            mov BYTE PTR [RSP+15],AL
            mov BYTE PTR [RSP+14],R13B
            call .L_440e50

            mov RDX,RBX
            mov RSI,R12
            mov RDI,RBP
            call .L_440e50

            xor EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44390a

            add RSP,64
.L_443901:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_44390a:

            call __stack_chk_fail@PLT
.L_44390f:

            nop
.L_443910:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,184
.L_443921:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+168],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            jle .L_443a08

            mov R12,RDI
            lea RBX,QWORD PTR [RDI+112]
            xor EBP,EBP
            xor R14D,R14D
            lea R15,QWORD PTR [RSP+24]
            lea R13,QWORD PTR [RSP+32]
            jmp .L_44396f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443960:

            add R14D,1
            add RBX,40
            cmp R14D,DWORD PTR [R12+108]
            jge .L_4439d6
.L_44396f:

            cmp DWORD PTR [RBX+32],1
            mov EAX,1
            mov QWORD PTR [RSP+24],0
            mov RDI,QWORD PTR [RBX+8]
            mov RCX,R15
            mov EDX,128
            mov RSI,R13
            cmove EBP,EAX
            call QWORD PTR [RBX]

            test EAX,EAX
            mov R9D,EAX
            jne .L_4439da

            mov RCX,QWORD PTR [RSP+24]
            test RCX,RCX
            je .L_443960

            movzx ESI,R14B
            mov RDX,R13
            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            add R14D,1
            call .L_443870

            mov RAX,QWORD PTR [RSP+24]
            add QWORD PTR [RBX+16],RAX
            add RBX,40
            cmp R14D,DWORD PTR [R12+108]
            mov R9D,DWORD PTR [RSP+12]
            jl .L_44396f
.L_4439d6:

            test EBP,EBP
            je .L_443a08
.L_4439da:

            mov RDX,QWORD PTR [RSP+168]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R9D
            jne .L_443a10

            add RSP,184
.L_4439f7:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_443a08:

            mov R9D,4294967235
            jmp .L_4439da
.L_443a10:

            call __stack_chk_fail@PLT
.L_443a15:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443a20:

            mov RDX,RDI
            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+144],0
            lea RDI,QWORD PTR [RDI+8]
            mov RCX,RDX
            xor EAX,EAX
            xor ESI,ESI
            and RDI,-8
            sub RCX,RDI
            add ECX,152
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,RDX
            jmp .L_4409b0
.L_443a5b:

            nop
            nop
            nop
            nop
            nop
.L_443a60:

            lea RAX,QWORD PTR [RDI+152]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443a70:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_443a70

            ret 
.L_443a7e:

            nop
            nop
.L_443a80:

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            jg .L_443ab8

            movsxd R9,EAX
            add EAX,1
            lea R9,QWORD PTR [R9+R9*4]
            lea R9,QWORD PTR [RDI+R9*8]
            mov QWORD PTR [R9+112],RSI
            mov QWORD PTR [R9+120],RDX
            mov QWORD PTR [R9+136],RCX
            mov DWORD PTR [R9+144],R8D
            mov DWORD PTR [RDI+108],EAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443ab8:

            mov EAX,4294967234
            ret 
.L_443abe:

            nop
            nop
.L_443ac0:

            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            jmp .L_443870
.L_443ad0:

            mov EAX,DWORD PTR [RDI+108]
            test EAX,EAX
            je .L_443ae0

            jmp .L_443910
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_443ae0:

            mov EAX,4294967232
            ret 
.L_443ae6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443af0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,56
.L_443afe:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp RDX,32
            ja .L_443b8c

            mov R14,RDI
            mov EDI,DWORD PTR [RDI+108]
            mov R13,RSI
            lea RBP,QWORD PTR [R14+168]
            mov R12,RDX
            mov EBX,257
            nop
            nop
            nop
            nop
.L_443b30:

            test EDI,EDI
            je .L_443bbe

            mov RDI,R14
            call .L_443910

            test EAX,EAX
            mov R15D,EAX
            jne .L_443b98

            mov EDI,DWORD PTR [R14+108]
            test EDI,EDI
            jle .L_443bd0

            lea EDX,DWORD PTR [RDI-1]
            lea RAX,QWORD PTR [R14+128]
            xor ECX,ECX
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RSI,QWORD PTR [RBP+RDX*8]
            mov EDX,1
            nop
            nop
            nop
.L_443b70:

            mov R8,QWORD PTR [RAX+8]
            cmp QWORD PTR [RAX],R8
            cmovb EDX,ECX
            add RAX,40
            cmp RAX,RSI
            jne .L_443b70

            test EDX,EDX
            jne .L_443bd0

            sub EBX,1
            jne .L_443b30
.L_443b8c:

            mov R15D,4294967236
            nop
            nop
            nop
            nop
            nop
            nop
.L_443b98:

            mov RBX,QWORD PTR [RSP+40]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_443c83

            add RSP,56
.L_443bb3:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_443bbe:

            mov R15D,4294967232
            jmp .L_443b98
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443bd0:

            pxor XMM0,XMM0
            mov RBX,RSP
            mov RSI,RBX
            mov RDI,R14
            movaps XMMWORD PTR [RSP],XMM0
            movaps XMMWORD PTR [RSP+16],XMM0
            call .L_440e70

            lea RDI,QWORD PTR [R14+8]
            mov RCX,R14
            xor EAX,EAX
            xor ESI,ESI
            and RDI,-8
            mov QWORD PTR [R14],0
            mov QWORD PTR [R14+100],0
            sub RCX,RDI
            add ECX,108
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,R14
            call .L_4409b0

            mov EDX,32
            mov RSI,RBX
            mov RDI,R14
            call .L_440e50

            xor ECX,ECX
            mov RDX,RBX
            mov ESI,32
            mov RDI,RBX
            call .L_441020

            mov EDX,DWORD PTR [R14+108]
            test EDX,EDX
            jle .L_443c70

            sub EDX,1
            lea RAX,QWORD PTR [R14+128]
            lea RDX,QWORD PTR [RDX+RDX*4]
            lea RDX,QWORD PTR [R14+RDX*8+168]
            nop
            nop
            nop
.L_443c60:

            mov QWORD PTR [RAX],0
            add RAX,40
            cmp RAX,RDX
            jne .L_443c60
.L_443c70:

            mov RDX,R12
            mov RSI,RBX
            mov RDI,R13
            call memcpy@PLT

            jmp .L_443b98
.L_443c83:

            call __stack_chk_fail@PLT
.L_443c88:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443c90:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,48
.L_443c9c:

            sub RCX,QWORD PTR [RDX]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            cmp RCX,27
            jbe .L_443d50

            mov RBX,RDI
            mov R14,RSI
            mov RBP,RDX
            mov R12,R8
            mov R13,R9
            call .L_440630

            test EAX,EAX
            jne .L_443d48

            mov EDX,4
            mov RSI,R14
            mov RDI,RBX
            call .L_440530

            test EAX,EAX
            jne .L_443d48

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_440530

            test EAX,EAX
            jne .L_443d48

            mov RSI,RSP
            mov RDI,RBX
            call .L_440570

            test EAX,EAX
            jne .L_443d48

            mov RDX,QWORD PTR [RBP]
            movdqa XMM0,XMMWORD PTR [RSP]
            movups XMMWORD PTR [RDX],XMM0
            mov RCX,QWORD PTR [RSP+16]
            mov QWORD PTR [RDX+16],RCX
            mov ECX,DWORD PTR [RSP+24]
            mov DWORD PTR [RDX+24],ECX
            add QWORD PTR [RBP],28
.L_443d27:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            jne .L_443d57

            add RSP,48
.L_443d3b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_443d48:

            mov EAX,4294939648
            jmp .L_443d27

            nop
.L_443d50:

            mov EAX,4294940160
            jmp .L_443d27
.L_443d57:

            call __stack_chk_fail@PLT
.L_443d5c:

            nop
            nop
            nop
            nop
.L_443d60:

            push RBX
            mov RBX,RDI
            call .L_4401d0

            mov QWORD PTR [RBX+24],0
            mov QWORD PTR [RBX+32],60
            pop RBX
            ret 
.L_443d7b:

            nop
            nop
            nop
            nop
            nop
.L_443d80:

            mov QWORD PTR [RDI+32],RSI
            ret 
.L_443d85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443d90:

            push RBX
            mov RBX,RDI
            call .L_4401e0

            lea RAX,QWORD PTR [RBX+40]
            nop
            nop
            nop
.L_443da0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_443da0

            pop RBX
            ret 
.L_443dae:

            nop
            nop
.L_443db0:

            push RBP
            push RBX
            mov RAX,RSI
            mov RBP,RDI
            mov RDI,RDX
            mov EDX,32
            sub RSP,56
            mov RBX,RSP
            mov RCX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RCX
            xor ECX,ECX
            mov RSI,RBX
            call RAX

            test EAX,EAX
            je .L_443e00
.L_443de0:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_443e4e

            add RSP,56
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443e00:

            mov EDI,5
            call .L_4401a0

            mov EDX,1
            mov RSI,RAX
            mov RDI,RBP
            call .L_4402a0

            test EAX,EAX
            jne .L_443de0

            mov EDX,32
            mov RSI,RBX
            mov RDI,RBP
            call .L_4403e0

            test EAX,EAX
            jne .L_443de0

            lea RDX,QWORD PTR [RBX+32]
            mov RSI,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443e40:

            mov BYTE PTR [RSI],0
            add RSI,1
            cmp RSI,RDX
            jne .L_443e40

            jmp .L_443de0
.L_443e4e:

            call __stack_chk_fail@PLT
.L_443e53:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443e60:

            test RDI,RDI
            mov RAX,RSI
            je .L_443ee0

            test RCX,RCX
            je .L_443ee0

            mov R10,QWORD PTR [RSI]
            mov RSI,RDX
            sub RSI,R10
            cmp RSI,31
            jbe .L_443ed0

            mov RSI,QWORD PTR [RDI+24]
            lea R9,QWORD PTR [RSI+1]
            mov QWORD PTR [RDI+24],R9
            mov R9,RSI
            shr R9,24
            mov BYTE PTR [R10],R9B
            mov R9,QWORD PTR [RAX]
            mov R10,RSI
            shr R10,16
            mov BYTE PTR [R9+1],R10B
            mov R9,QWORD PTR [RAX]
            mov R10,RSI
            shr R10,8
            mov BYTE PTR [R9+2],R10B
            mov R9,QWORD PTR [RAX]
            mov BYTE PTR [R9+3],SIL
            mov RSI,QWORD PTR [RAX]
            lea R9,QWORD PTR [RSI+4]
            mov QWORD PTR [RAX],R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RAX
            jmp .L_443c90
.L_443ed0:

            mov EAX,4294940160
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443ee0:

            mov EAX,4294938368
            ret 
.L_443ee6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443ef0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
            sub RSP,64
.L_443efb:

            lea RBX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RDI
            xor EDI,EDI
            test R12,R12
            mov QWORD PTR [RSP+8],RBX
            je .L_443fb6

            test RCX,RCX
            mov RAX,RCX
            je .L_443fb6

            cmp RDX,32
            jne .L_443faf

            lea RCX,QWORD PTR [RBX+28]
            lea RDX,QWORD PTR [RSP+8]
            mov R9,R8
            mov RDI,R12
            mov R8,RAX
            mov RBP,RSI
            call .L_443c90

            test EAX,EAX
            jne .L_443faf

            xor ESI,ESI
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
.L_443f58:

            movzx ECX,BYTE PTR [RBP+RDX*1+4]
            xor CL,BYTE PTR [RBX+RDX*1]
            add RDX,1
            or ESI,ECX
            cmp RDX,28
            jne .L_443f58

            test SIL,SIL
            jne .L_443faf

            mov RCX,QWORD PTR [R12+32]
            mov EDX,DWORD PTR [RBP]
            test RCX,RCX
            bswap EDX
            jne .L_443fa0
.L_443f80:

            mov RDI,QWORD PTR [RSP+56]
            xor RDI,QWORD PTR FS:[40]
            jne .L_443fbd

            add RSP,64
.L_443f94:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_443fa0:

            mov RSI,QWORD PTR [R12+24]
            mov EDX,EDX
            sub RSI,RDX
            cmp RCX,RSI
            jae .L_443f80
.L_443faf:

            mov EAX,4294967295
            jmp .L_443f80
.L_443fb6:

            mov EAX,4294938368
            jmp .L_443f80
.L_443fbd:

            call __stack_chk_fail@PLT
.L_443fc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_443fd0:

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            je .L_444037

            push R12
            push RBP
            mov RBP,RDX
            push RBX
.L_443fe3:

            mov R12,RSI
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+360]
            call QWORD PTR [RIP+.L_677120]

            mov RSI,RBP
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+360],RAX
            je .L_444030

            mov RDX,RBP
            mov RSI,R12
            mov RDI,RAX
            call memcpy@PLT

            mov QWORD PTR [RBX+368],RBP
            xor EAX,EAX
.L_444027:

            pop RBX
.L_444028:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_444030:

            mov EAX,4294934784
            jmp .L_444027
.L_444037:

            mov EAX,4294938368
            ret 
.L_44403d:

            nop
            nop
            nop
.L_444040:

            mov QWORD PTR [RDI+88],RSI
            mov QWORD PTR [RDI+96],RDX
            mov QWORD PTR [RDI+104],RCX
            ret 
.L_44404d:

            nop
            nop
            nop
.L_444050:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_44405e:

            mov R9D,DWORD PTR [RDI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            cmp R9D,16
            je .L_444b80

            cmp QWORD PTR [RDI+88],0
            mov R14,RDI
            je .L_444b80

            lea R8,QWORD PTR [RIP+.L_45d199]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,4016
            mov ESI,2
            call .L_443270

            mov RDI,R14
            call .L_447390

            test EAX,EAX
            mov EBX,EAX
            jne .L_444530

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_4440d6

            mov RAX,QWORD PTR [R14+88]
            cmp BYTE PTR [RAX+756],1
            je .L_444558
.L_4440d6:

            mov EBP,DWORD PTR [R14+8]
            cmp EBP,18
            ja .L_444b50

            lea RCX,QWORD PTR [RIP+.L_45dc6c]
            mov EDX,EBP
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4440f8:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d40c]
            xor EAX,EAX
            mov ECX,2381
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14]
            movzx EDX,BYTE PTR [RAX+152]
            test DL,2
            je .L_44413a

            mov RCX,QWORD PTR [R14+88]
            cmp BYTE PTR [RCX+736],0
            jne .L_444f10
.L_44413a:

            cmp QWORD PTR [RAX+48],0
            je .L_445eae

            mov RBP,QWORD PTR [R14+320]
            mov ESI,DWORD PTR [R14+16]
            shr DL,1
            mov EDI,DWORD PTR [R14+12]
            and EDX,1
            lea RCX,QWORD PTR [RBP+4]
            lea R12,QWORD PTR [RBP+6]
            call .L_44c0d0

            movzx EAX,BYTE PTR [RBP+5]
            sub RSP,8
.L_44416e:

            lea R8,QWORD PTR [RIP+.L_45d9e8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2415
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBP+4]
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov EDX,4
            mov RSI,R12
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            pop R13
            pop R15
            jne .L_444530

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [RBP+10]
            mov EDX,28
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_444530

            mov RAX,QWORD PTR [R14+88]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45d4d6]
            movdqu XMM0,XMMWORD PTR [RBP+6]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9,R12
            mov ECX,2439
            mov ESI,3
            movups XMMWORD PTR [RAX+984],XMM0
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [RBP+22]
            movups XMMWORD PTR [RAX+1000],XMM0
            push 32
            call .L_443490

            mov RAX,QWORD PTR [R14+88]
            pop R10
            pop R11
.L_444220:

            mov EBX,DWORD PTR [RAX+1048]
            test EBX,EBX
            jne .L_444e98

            mov RSI,QWORD PTR [R14+80]
            mov RAX,QWORD PTR [R14]
            cmp QWORD PTR [RSI+8],0
            je .L_444271

            mov RDX,QWORD PTR [RAX+64]
            test RDX,RDX
            je .L_444271

            mov RDI,QWORD PTR [RAX+80]
            call RDX

            test EAX,EAX
            je .L_444e6a

            mov RDX,QWORD PTR [R14+88]
            mov RSI,QWORD PTR [R14+80]
            mov R9D,DWORD PTR [RDX+1048]
            mov RAX,RSI
            test R9D,R9D
            jne .L_444e9c

            mov RAX,QWORD PTR [R14]
.L_444271:

            add DWORD PTR [R14+8],1
            add RSI,16
            mov QWORD PTR [RSI-8],32
            mov RDI,QWORD PTR [RAX+56]
            mov EDX,32
            mov R13D,32
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_444530
.L_44429e:

            mov RAX,QWORD PTR [R14+80]
            lea R12,QWORD PTR [RBP+39]
            mov RDI,R12
            mov RAX,QWORD PTR [RAX+8]
            mov BYTE PTR [RBP+38],AL
            mov RAX,QWORD PTR [R14+80]
            mov RDX,QWORD PTR [RAX+8]
            lea RSI,QWORD PTR [RAX+16]
            call memcpy@PLT

            mov RAX,QWORD PTR [R14+80]
            lea R8,QWORD PTR [RIP+.L_45da40]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9,R13
            mov ECX,2512
            mov ESI,3
            mov RDI,R14
            mov RBX,QWORD PTR [RAX+8]
            xor EAX,EAX
            call .L_443270

            sub RSP,8
.L_4442f2:

            lea R8,QWORD PTR [RIP+.L_45d509]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            push R13
            mov R9,R12
            mov ECX,2513
            mov ESI,3
            mov RDI,R14
            add RBX,R12
            call .L_443490

            mov RAX,QWORD PTR [R14+88]
            lea R9,QWORD PTR [RIP+.L_4583e5]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            pop RSI
            pop RDI
.L_44432e:

            mov R8D,DWORD PTR [RAX+1048]
            lea RAX,QWORD PTR [RIP+.L_4599ba]
            mov ECX,2515
            mov ESI,3
            mov RDI,R14
            lea R12,QWORD PTR [RBX+3]
            test R8D,R8D
            lea R8,QWORD PTR [RIP+.L_45d522]
            cmovne R9,RAX
            xor EAX,EAX
            xor R15D,R15D
            call .L_443270

            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX]
            mov BYTE PTR [RBX],AH
            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX]
            mov BYTE PTR [RBX+1],AL
            mov RAX,QWORD PTR [R14+80]
            mov EAX,DWORD PTR [RAX+4]
            mov BYTE PTR [RBX+2],AL
            mov RAX,QWORD PTR [R14+80]
            mov EDI,DWORD PTR [RAX]
            call .L_454f70

            lea R8,QWORD PTR [RIP+.L_45da68]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9,RAX
            mov ECX,2522
            xor EAX,EAX
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+80]
            lea R8,QWORD PTR [RIP+.L_45da90]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2524
            mov ESI,3
            mov RDI,R14
            mov R9D,DWORD PTR [RAX+4]
            xor EAX,EAX
            call .L_443270

            cmp DWORD PTR [R14+376],1
            lea RAX,QWORD PTR [RBX+5]
            mov R11D,2
            mov QWORD PTR [RSP+8],RAX
            je .L_445bb8
.L_4443f7:

            mov RAX,QWORD PTR [R14+80]
            lea R13,QWORD PTR [R12+R11*1]
            cmp BYTE PTR [RAX+100],0
            je .L_444444

            lea R8,QWORD PTR [RIP+.L_45dae8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,2184
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov DWORD PTR [R13],16777472
            mov RAX,QWORD PTR [R14+80]
            movzx EAX,BYTE PTR [RAX+100]
            mov BYTE PTR [R13+4],AL
            lea R13,QWORD PTR [R12+R15*1+7]
            add R15,5
.L_444444:

            mov RAX,QWORD PTR [R14+88]
            test BYTE PTR [RAX+1060],1
            je .L_44448e

            lea R8,QWORD PTR [RIP+.L_45db18]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2214
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov ECX,1
            mov DWORD PTR [R13],33557248
            mov WORD PTR [R13+4],CX
            lea R13,QWORD PTR [R12+R15*1+8]
            add R15,6
.L_44448e:

            mov RAX,QWORD PTR [R14+120]
            mov RAX,QWORD PTR [RAX]
            cmp DWORD PTR [RAX+24],11
            je .L_445bf7
.L_44449f:

            lea R8,QWORD PTR [RIP+.L_45db90]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov R9,R15
            mov ECX,2579
            mov ESI,3
            mov RDI,R14
            call .L_443270

            test R15,R15
            je .L_4444df

            mov R12,QWORD PTR [RSP+8]
            mov RAX,R15
            mov BYTE PTR [RBX+4],R15B
            shr RAX,8
            mov BYTE PTR [RBX+3],AL
            add R12,R15
.L_4444df:

            mov RAX,QWORD PTR [R14+320]
            sub R12,RBP
            mov DWORD PTR [R14+328],22
            mov QWORD PTR [R14+336],R12
            mov RDI,R14
            mov BYTE PTR [RAX],2
            call .L_447720

            lea R8,QWORD PTR [RIP+.L_45d422]
            mov EBX,EAX
            mov ECX,2598
            nop
            nop
            nop
            nop
.L_444518:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            nop
            nop
.L_444530:

            mov RSI,QWORD PTR [RSP+72]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_445d92

            add RSP,88
.L_44454a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_444558:

            mov RDI,R14
            call .L_448070

            test EAX,EAX
            je .L_4440d6

            mov EBX,EAX
            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_444570:

            mov EBX,4294940032
            jmp .L_444530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444580:

            mov DWORD PTR [R14+8],1
            mov EBX,EBP
            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_444590:

            lea R8,QWORD PTR [RIP+.L_45d1aa]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1190
            mov ESI,2
            mov RDI,R14
            call .L_443270

            lea RAX,QWORD PTR [RSP+60]
            lea R13,QWORD PTR [RIP+.L_45e175]
            lea R12,QWORD PTR [RIP+.L_45d6a8]
            lea R15,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_444755
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4445d8:

            mov RAX,QWORD PTR [R14]
            mov RBX,QWORD PTR [R14+168]
            mov R8,R13
            mov ECX,1222
            mov RDX,R12
            mov ESI,4
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            mov R9,RBX
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
.L_44460b:

            and RAX,-8
            add RAX,13
            push RAX
            call .L_443490

            movzx R9D,BYTE PTR [RBX]
            lea R8,QWORD PTR [RIP+.L_45d6c8]
            mov RDI,R14
            xor EAX,EAX
            mov ECX,1234
            mov RDX,R12
            mov ESI,3
            call .L_443270

            cmp BYTE PTR [RBX],22
            pop RDI
            pop R8
.L_444641:

            jne .L_4450d6

            mov RAX,QWORD PTR [R14+176]
            lea R8,QWORD PTR [RIP+.L_45d6f0]
            mov ECX,1243
            mov RDX,R12
            mov ESI,3
            mov RDI,R14
            movzx R9D,WORD PTR [RAX]
            xor EAX,EAX
            rol R9W,8
            movzx R9D,R9W
            call .L_443270

            movzx EAX,BYTE PTR [RBX+2]
            sub RSP,8
.L_444681:

            lea R8,QWORD PTR [RIP+.L_45d718]
            mov ECX,1246
            mov RDX,R12
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBX+1]
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [RSP+24]
            lea RCX,QWORD PTR [RBX+1]
            mov RSI,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_44c100

            pop RCX
            pop RSI
.L_4446c7:

            cmp DWORD PTR [RSP+60],2
            jle .L_444e30

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_444c35

            mov RAX,QWORD PTR [R14+160]
            cmp BYTE PTR [RAX],0
            jne .L_444e5c

            cmp BYTE PTR [RAX+1],0
            jne .L_444e5c

            mov ECX,DWORD PTR [RAX+2]
            mov RDX,QWORD PTR [R14+288]
            mov RDI,R14
            mov DWORD PTR [RDX+2],ECX
            movzx EAX,WORD PTR [RAX+6]
            mov WORD PTR [RDX+6],AX
            call .L_4490e0

            test EAX,EAX
            je .L_444c2d

            lea R8,QWORD PTR [RIP+.L_45d1f1]
            mov ECX,1281
            mov RDX,R12
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov QWORD PTR [R14+240],0
            mov QWORD PTR [R14+224],0
.L_444755:

            mov ESI,5
            mov RDI,R14
            call .L_448260

            test EAX,EAX
            mov EBX,EAX
            je .L_4445d8

            lea R8,QWORD PTR [RIP+.L_45d1c0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,1207
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_444798:

            mov RDI,R14
            call .L_44a350

            mov EBX,EAX
            jmp .L_444530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4447b0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45d54f]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2845
            mov ESI,2
            mov RDI,R14
            mov RBX,QWORD PTR [R14+320]
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov EAX,4
            cmp DWORD PTR [RBP+24],11
            je .L_444b8a
.L_4447ef:

            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov RDI,R14
            mov DWORD PTR [R14+328],22
            mov BYTE PTR [RAX],12
            add DWORD PTR [R14+8],1
            call .L_447720

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45d56c]
            mov ECX,3245
            je .L_444518

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3241
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444860:

            mov RAX,QWORD PTR [R14+120]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d589]
            mov ECX,2614
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov EAX,DWORD PTR [RBP+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_44489d

            cmp EAX,11
            jne .L_445eeb
.L_44489d:

            lea R8,QWORD PTR [RIP+.L_45dbe0]
            mov ECX,2622
.L_4448a9:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            add DWORD PTR [R14+8],1
            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4448d0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45d5dc]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,3492
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov RDI,R14
            call .L_44a210

            test EAX,EAX
            mov EBX,EAX
            jne .L_444c05

            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [R14+192]
            mov RDX,QWORD PTR [R14+264]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp DWORD PTR [R14+208],22
            lea RSI,QWORD PTR [RCX+RAX*1]
            jne .L_445d81

            cmp BYTE PTR [RCX],16
            jne .L_445cd4

            cmp DWORD PTR [RBP+24],11
            jne .L_445ca8

            mov RDI,QWORD PTR [R14+88]
            sub RDX,RAX
            call .L_454240

            test EAX,EAX
            jne .L_445d54

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,32
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            lea RCX,QWORD PTR [RDI+944]
            lea RSI,QWORD PTR [RDI+1016]
            call .L_4545e0

            test EAX,EAX
            mov EBX,EAX
            jne .L_444bdd

            mov RDI,R14
            call .L_446bd0

            test EAX,EAX
            mov EBX,EAX
            jne .L_444ee8

            add DWORD PTR [R14+8],1
            lea R8,QWORD PTR [RIP+.L_45d62f]
            mov ECX,3729
            jmp .L_444518
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4449c8:

            mov RAX,QWORD PTR [R14+120]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d64c]
            mov ECX,3745
            mov ESI,2
            mov RDI,R14
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov EAX,DWORD PTR [RBP+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_444a05

            cmp EAX,11
            jne .L_445e7b
.L_444a05:

            lea R8,QWORD PTR [RIP+.L_45dc48]
            mov ECX,3753
            jmp .L_4448a9
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444a20:

            mov RDI,R14
            call .L_44a570

            mov EBX,EAX
            jmp .L_444530
          .byte 0x90
.L_444a30:

            mov RDI,R14
            call .L_44aba0

            mov EBX,EAX
            jmp .L_444530
          .byte 0x90
.L_444a40:

            mov RDI,R14
            call .L_44a4b0

            mov EBX,EAX
            jmp .L_444530
          .byte 0x90
.L_444a50:

            mov RDI,R14
            call .L_44a950

            mov EBX,EAX
            jmp .L_444530
          .byte 0x90
.L_444a60:

            lea R8,QWORD PTR [RIP+.L_45d668]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,4121
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov DWORD PTR [R14+8],15
            jmp .L_444530
          .byte 0x90
.L_444a90:

            mov RDI,R14
            call .L_44a810

            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_444aa0:

            lea R8,QWORD PTR [RIP+.L_45d5a6]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,3254
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+320]
            mov QWORD PTR [R14+336],4
            mov DWORD PTR [R14+328],22
            mov BYTE PTR [RAX],14
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_444bd0
.L_444af7:

            mov RDI,R14
            call .L_447720

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45d5c1]
            mov ECX,3273
            je .L_444518

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3269
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_444b40:

            mov RDI,R14
            call .L_44a400

            mov EBX,EAX
            jmp .L_444530
          .byte 0x90
.L_444b50:

            lea R8,QWORD PTR [RIP+.L_45d678]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EBP
            mov ECX,4130
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294938368
            call .L_443270

            jmp .L_444530
          .byte 0x90
.L_444b80:

            mov EBX,4294938368
            jmp .L_444530
.L_444b8a:

            lea RSI,QWORD PTR [RBX+4]
            mov RAX,QWORD PTR [R14]
            mov RBX,QWORD PTR [R14+320]
            mov RDI,QWORD PTR [R14+88]
            lea RCX,QWORD PTR [RSP+64]
            lea RDX,QWORD PTR [RBX+768]
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            sub RDX,RSI
            call .L_454390

            test EAX,EAX
            mov EBX,EAX
            jne .L_4450e7

            mov RAX,QWORD PTR [RSP+64]
            add RAX,4
            jmp .L_4447ef
.L_444bd0:

            mov RDI,R14
            call .L_447690

            jmp .L_444af7
.L_444bdd:

            lea R8,QWORD PTR [RIP+.L_45d611]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3710
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_444c05:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3496
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_444c2d:

            mov RDI,R14
            call .L_449160
.L_444c35:

            mov RAX,QWORD PTR [R14+176]
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            cmp AX,768
            movzx R12D,AX
            ja .L_445fdb

            mov RAX,QWORD PTR [R14]
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RSI,QWORD PTR [R12+RAX*1+13]
            call .L_448260

            test EAX,EAX
            mov EBX,EAX
            jne .L_4458ba

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_44510f

            lea RAX,QWORD PTR [R12+13]
            mov QWORD PTR [R14+240],RAX
.L_444c9a:

            mov R15,QWORD PTR [R14+192]
            sub RSP,8
.L_444ca5:

            lea R8,QWORD PTR [RIP+.L_45d20d]
            push R12
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1328
            mov ESI,4
            mov RDI,R14
            mov R9,R15
            call .L_443490

            mov RAX,QWORD PTR [R14+88]
            mov RDX,R12
            mov RSI,R15
            mov RDI,R14
            call QWORD PTR [RAX+912]

            mov RAX,QWORD PTR [R14]
            pop R13
            pop RDX
.L_444ce3:

            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp R12,RAX
            jb .L_445fca

            movzx R9D,BYTE PTR [R15]
            lea R8,QWORD PTR [RIP+.L_45d748]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1346
            xor EAX,EAX
            mov ESI,3
            mov RDI,R14
            call .L_443270

            cmp BYTE PTR [R15],1
            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1350
            jne .L_444e3c

            movzx EAX,BYTE PTR [R15+1]
            movzx R9D,BYTE PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_45d770]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1355
            mov ESI,3
            mov RDI,R14
            shl R9D,8
            shl EAX,16
            or EAX,R9D
            movzx R9D,BYTE PTR [R15+3]
            or R9D,EAX
            xor EAX,EAX
            call .L_443270

            cmp BYTE PTR [R15+1],0
            jne .L_445e8c

            movzx EAX,WORD PTR [R15+2]
            mov RDX,QWORD PTR [R14]
            rol AX,8
            test BYTE PTR [RDX+152],2
            movzx EAX,AX
            je .L_44511f

            add RAX,12
            cmp R12,RAX
            jne .L_445e8c

            mov RAX,QWORD PTR [R14+192]
            mov RCX,QWORD PTR [R14+88]
            movzx EDX,WORD PTR [RAX+4]
            rol DX,8
            movzx EDX,DX
            mov DWORD PTR [RCX+720],EDX
            add EDX,1
            mov DWORD PTR [RCX+724],EDX
            cmp BYTE PTR [RAX+6],0
            jne .L_444dfa

            cmp BYTE PTR [RAX+7],0
            jne .L_444dfa

            cmp BYTE PTR [RAX+8],0
            jne .L_444dfa

            movzx ESI,WORD PTR [RAX+9]
            lea RCX,QWORD PTR [RAX+1]
            cmp WORD PTR [RAX+1],SI
            je .L_445c68
.L_444dfa:

            lea R8,QWORD PTR [RIP+.L_45d798]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1405
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294938496
            jmp .L_444530
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_444e30:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1256
.L_444e3c:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_443270

            jmp .L_444530
.L_444e5c:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1272
            jmp .L_444e3c
.L_444e6a:

            lea R8,QWORD PTR [RIP+.L_45da10]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2454
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+88]
            mov DWORD PTR [RAX+1048],1
.L_444e98:

            mov RAX,QWORD PTR [R14+80]
.L_444e9c:

            mov R13,QWORD PTR [RAX+8]
            mov RDI,R14
            mov DWORD PTR [R14+8],12
            call .L_446bd0

            test EAX,EAX
            mov EBX,EAX
            je .L_44429e

            lea R8,QWORD PTR [RIP+.L_45d4f1]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EBX
            mov ECX,2495
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_444ee8:

            lea R8,QWORD PTR [RIP+.L_45d4f1]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3723
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_444f10:

            lea R8,QWORD PTR [RIP+.L_45d9c0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,2387
            mov ESI,2
            mov RDI,R14
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45d422]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,2388
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+320]
            lea R8,QWORD PTR [RIP+.L_45d438]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2316
            mov ESI,2
            mov RDI,R14
            add RAX,4
            mov QWORD PTR [RSP+64],RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [RSP+64]
            mov ESI,DWORD PTR [R14+16]
            mov EDI,DWORD PTR [R14+12]
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_44c0d0

            sub RSP,8
.L_444fab:

            lea R8,QWORD PTR [RIP+.L_45f155]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            push 2
            mov R9,QWORD PTR [RSP+80]
            mov ECX,2329
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RBP,QWORD PTR [RSP+80]
            mov RDI,QWORD PTR [R14]
            lea RAX,QWORD PTR [RBP+2]
            mov QWORD PTR [RSP+80],RAX
            mov RAX,QWORD PTR [RDI+88]
            pop RCX
            pop RSI
.L_444fe9:

            test RAX,RAX
            je .L_446073

            mov RSI,QWORD PTR [R14+280]
            lea R12,QWORD PTR [RBP+3]
            mov RCX,QWORD PTR [R14+360]
            mov R8,QWORD PTR [R14+368]
            mov QWORD PTR [RSP+64],R12
            mov RDI,QWORD PTR [RDI+104]
            lea RDX,QWORD PTR [RSI+813]
            lea RSI,QWORD PTR [RSP+64]
            call RAX

            test EAX,EAX
            mov EBX,EAX
            jne .L_4458f3

            mov RAX,QWORD PTR [RSP+64]
            sub RSP,8
.L_445035:

            lea R8,QWORD PTR [RIP+.L_45d483]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2352
            mov R9,R12
            mov ESI,3
            mov RDI,R14
            sub RAX,R12
            mov BYTE PTR [RBP+2],AL
            movzx EAX,AL
            push RAX
.L_44505d:

            call .L_443490

            mov RAX,QWORD PTR [RSP+80]
            mov RDX,QWORD PTR [R14+320]
            mov RDI,R14
            mov DWORD PTR [R14+328],22
            sub RAX,RDX
            mov QWORD PTR [R14+336],RAX
            mov BYTE PTR [RDX],3
            mov DWORD PTR [R14+8],18
            call .L_447720

            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45d4a8]
            mov ECX,2366
            test EBX,EBX
            pop RAX
.L_4450a7:

            pop RDX
.L_4450a8:

            je .L_444518

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EBX
            mov ECX,2362
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_4450d6:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1238
            jmp .L_444e3c
.L_4450e7:

            lea R8,QWORD PTR [RIP+.L_45dbc0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,2892
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_44510f:

            mov QWORD PTR [R14+224],0
            jmp .L_444c9a
.L_44511f:

            add RAX,4
            cmp R12,RAX
            jne .L_445e8c

            mov EAX,4
.L_445131:

            mov RBX,R12
            add R15,RAX
            sub RBX,RAX
            cmp RBX,37
            jbe .L_445f70

            sub RSP,8
.L_445148:

            lea R8,QWORD PTR [RIP+.L_45d21d]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            push 2
.L_445158:

            mov R9,R15
            mov ECX,1444
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R14+16]
            lea RDI,QWORD PTR [R14+12]
            mov RCX,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_44c100

            mov RAX,QWORD PTR [R14+88]
            mov R9D,DWORD PTR [R14+12]
            mov EDX,DWORD PTR [R14+16]
            mov DWORD PTR [RAX+1052],R9D
            mov DWORD PTR [RAX+1056],EDX
            mov RAX,QWORD PTR [R14]
            pop R11
.L_4451aa:

            pop R12
.L_4451ac:

            movzx ESI,BYTE PTR [RAX+150]
            movzx ECX,BYTE PTR [RAX+151]
            cmp R9D,ESI
            jl .L_445f81

            cmp EDX,ECX
            jl .L_445f81

            movzx ECX,BYTE PTR [RAX+148]
            movzx EAX,BYTE PTR [RAX+149]
            cmp R9D,ECX
            jle .L_4458e2

            mov DWORD PTR [R14+12],ECX
            mov DWORD PTR [R14+16],EAX
.L_4451ea:

            sub RSP,8
.L_4451ee:

            lea R12,QWORD PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_45d233]
            push 32
.L_4451fb:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1475
            mov R9,R12
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RAX,QWORD PTR [R14+88]
            movdqu XMM0,XMMWORD PTR [R15+2]
            movups XMMWORD PTR [RAX+952],XMM0
            movdqu XMM0,XMMWORD PTR [R15+18]
            movups XMMWORD PTR [RAX+968],XMM0
            movzx R12D,BYTE PTR [R15+34]
            pop R9
.L_44523c:

            cmp R12,32
            pop R10
            ja .L_445eda

            lea R13,QWORD PTR [R12+36]
            cmp RBX,R13
            jb .L_445eda

            sub RSP,8
            lea R10,QWORD PTR [R15+35]
            lea R8,QWORD PTR [RIP+.L_45d24e]
            push R12
.L_445267:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1493
            mov R9,R10
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RSP+24],R10
            call .L_443490

            mov RAX,QWORD PTR [R14+80]
            pxor XMM0,XMM0
            mov R10,QWORD PTR [RSP+24]
            mov QWORD PTR [RAX+8],R12
            movups XMMWORD PTR [RAX+16],XMM0
            mov RSI,R10
            movups XMMWORD PTR [RAX+32],XMM0
            mov RAX,QWORD PTR [R14+80]
            mov RDX,QWORD PTR [RAX+8]
            lea RDI,QWORD PTR [RAX+16]
            call memcpy@PLT

            mov RDX,QWORD PTR [R14]
            lea RAX,QWORD PTR [R12+35]
            pop RDI
.L_4452be:

            lea RCX,QWORD PTR [R15+RAX*1]
            test BYTE PTR [RDX+152],2
            pop R8
            je .L_445387

            movzx R10D,BYTE PTR [RCX]
            lea R12,QWORD PTR [R10+RAX*1]
            lea RAX,QWORD PTR [R12+3]
            cmp RBX,RAX
            jb .L_44609d

            sub RSP,8
            add R13,R15
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            push R10
            lea R8,QWORD PTR [RIP+.L_45d267]
            mov ECX,1519
            mov ESI,3
            mov R9,R13
            mov RDI,R14
            mov QWORD PTR [RSP+24],R10
            call .L_443490

            mov RDX,QWORD PTR [R14]
            pop RCX
            pop RSI
.L_44531d:

            mov RAX,QWORD PTR [RDX+96]
            mov R10,QWORD PTR [RSP+8]
            test RAX,RAX
            je .L_445fec

            mov RDI,QWORD PTR [RDX+104]
            mov RCX,QWORD PTR [R14+360]
            mov RDX,R10
            mov R8,QWORD PTR [R14+368]
            mov RSI,R13
            call RAX

            test EAX,EAX
            je .L_445b86

            lea R8,QWORD PTR [RIP+.L_45d27c]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1532
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],1
.L_44537e:

            lea RAX,QWORD PTR [R12+1]
            lea RCX,QWORD PTR [R15+RAX*1]
.L_445387:

            movzx ECX,BYTE PTR [RCX]
            movzx EDX,BYTE PTR [R15+RAX*1+1]
            shl ECX,8
            or EDX,ECX
            movsxd RSI,EDX
            cmp EDX,1
            mov QWORD PTR [RSP+32],RSI
            jle .L_445d97

            lea R12,QWORD PTR [RAX+RSI*1]
            lea R13,QWORD PTR [R12+3]
            cmp RBX,R13
            jb .L_445d97

            and EDX,1
            jne .L_445d97

            lea RAX,QWORD PTR [R15+RAX*1+2]
            sub RSP,8
.L_4453ca:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d2ce]
            mov ECX,1578
            mov ESI,3
            mov QWORD PTR [RSP+48],RAX
            push QWORD PTR [RSP+40]
            mov R9,RAX
            mov RDI,R14
            call .L_443490

            movzx EDX,BYTE PTR [R15+R12*1+2]
            lea RAX,QWORD PTR [R12+2]
            pop R11
            pop R12
            lea RCX,QWORD PTR [RDX-1]
            cmp RCX,15
            ja .L_445e9d

            lea R12,QWORD PTR [RAX+RDX*1]
            lea RAX,QWORD PTR [R12+1]
            cmp RBX,RAX
            jb .L_445e9d

            mov QWORD PTR [RSP+8],RAX
            sub RSP,8
            lea R9,QWORD PTR [R15+R13*1]
            push RDX
            lea R8,QWORD PTR [RIP+.L_45d2ec]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1598
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RDX,QWORD PTR [R14+80]
            mov DWORD PTR [RDX+4],0
            lea RDX,QWORD PTR [R12+3]
            pop R9
            pop R10
.L_445467:

            mov RAX,QWORD PTR [RSP+8]
            cmp RBX,RAX
            jbe .L_445955

            cmp RBX,RDX
            jb .L_4460ec

            movzx R13D,BYTE PTR [R15+R12*1+1]
            movzx EAX,BYTE PTR [R15+R12*1+2]
            shl R13D,8
            or R13D,EAX
            movsxd R13,R13D
            lea RAX,QWORD PTR [R13-1]
            cmp RAX,2
            jbe .L_445f21

            lea RAX,QWORD PTR [R13+RDX*1]
            cmp RBX,RAX
            jne .L_445f21

            sub RSP,8
.L_4454b4:

            add R15,RDX
            lea R8,QWORD PTR [RIP+.L_45d306]
            push R13
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov RDI,R14
            mov R9,R15
            mov ECX,1653
            mov ESI,3
            call .L_443490

            pop RDI
            pop R8
.L_4454df:

            nop
.L_4454e0:

            test R13,R13
            je .L_445981

            movzx R11D,WORD PTR [R15+2]
            movzx R9D,WORD PTR [R15]
            rol R11W,8
            rol R9W,8
            movzx R11D,R11W
            movzx R9D,R9W
            lea R12D,DWORD PTR [R11+4]
            cmp R12,R13
            ja .L_445b75

            cmp R9D,11
            je .L_445703

            jg .L_445698

            cmp R9D,1
            je .L_4457b5

            cmp R9D,10
            jne .L_44578e

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d828]
            xor EAX,EAX
            mov ECX,1711
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_443270

            movzx EAX,WORD PTR [R15+4]
            movsxd R11,DWORD PTR [RSP+8]
            rol AX,8
            movzx EBX,AX
            lea RDX,QWORD PTR [RBX+2]
            cmp R11,RDX
            jne .L_445e59

            test AL,1
            jne .L_445e59

            mov RAX,QWORD PTR [R14+88]
            cmp QWORD PTR [RAX+712],0
            jne .L_445e6a

            mov R8,RBX
            mov EAX,12
            mov ESI,8
            shr R8,1
            add R8,1
            cmp R8,12
            mov QWORD PTR [RSP+8],R8
            cmovbe RAX,R8
            mov QWORD PTR [RSP+24],RAX
            mov RDI,RAX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov RCX,RAX
            mov R8,QWORD PTR [RSP+8]
            je .L_446057

            mov RAX,QWORD PTR [R14+88]
            test RBX,RBX
            lea RDX,QWORD PTR [R15+6]
            mov QWORD PTR [RAX+712],RCX
            je .L_445640

            cmp R8,1
            ja .L_4455f8

            jmp .L_445640
.L_4455f0:

            cmp QWORD PTR [RSP+24],1
            jbe .L_445640
.L_4455f8:

            movzx EDI,BYTE PTR [RDX]
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+8],RDX
            mov EAX,EDI
            movzx EDI,BYTE PTR [RDX+1]
            shl EAX,8
            or EDI,EAX
            movzx EDI,DI
            call .L_44d030

            test RAX,RAX
            mov RDX,QWORD PTR [RSP+8]
            mov RCX,QWORD PTR [RSP+16]
            je .L_445634

            sub QWORD PTR [RSP+24],1
            mov QWORD PTR [RCX],RAX
            add RCX,8
.L_445634:

            add RDX,2
            sub RBX,2
            jne .L_4455f0

            nop
            nop
.L_445640:

            sub R13,R12
            add R15,R12
            lea RAX,QWORD PTR [R13-1]
            cmp RAX,2
            ja .L_4454e0

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1809
.L_445660:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_443270

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_444530
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_445698:

            cmp R9D,256
            mov DWORD PTR [RSP+8],R11D
            je .L_445804

            cmp R9D,65281
            jne .L_44578e

            lea R8,QWORD PTR [RIP+.L_45d31e]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1684
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov R11D,DWORD PTR [RSP+8]
            cmp R11D,1
            jne .L_445da8

            cmp BYTE PTR [R15+4],0
            jne .L_445da8

            mov DWORD PTR [R14+376],1
            jmp .L_445640
.L_445703:

            lea R8,QWORD PTR [RIP+.L_45d858]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1719
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_443270

            mov RSI,QWORD PTR [R14+88]
            movsxd R11,DWORD PTR [RSP+8]
            or DWORD PTR [RSI+1060],1
            movzx ECX,BYTE PTR [R15+4]
            lea RAX,QWORD PTR [RCX+1]
            cmp R11,RAX
            jne .L_446028

            test RCX,RCX
            lea RDI,QWORD PTR [R15+5]
            je .L_445640

            movzx EDX,BYTE PTR [R15+5]
            add RCX,RDI
            lea RAX,QWORD PTR [R15+6]
            cmp DL,1
            ja .L_445781

            jmp .L_445862
          .byte 0x90
.L_445770:

            add RAX,1
            movzx EDX,BYTE PTR [RAX-1]
            cmp DL,1
            jbe .L_445862
.L_445781:

            cmp RAX,RCX
            mov RDI,RAX
            jne .L_445770

            jmp .L_445640
.L_44578e:

            lea R8,QWORD PTR [RIP+.L_45d8c8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1801
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_445640
.L_4457b5:

            lea R8,QWORD PTR [RIP+.L_45d8a0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1741
            mov ESI,3
            mov RDI,R14
            mov DWORD PTR [RSP+8],R11D
            call .L_443270

            mov R11D,DWORD PTR [RSP+8]
            cmp R11D,1
            jne .L_445de6

            movzx EAX,BYTE PTR [R15+4]
            cmp AL,4
            ja .L_445de6

            mov RDX,QWORD PTR [R14+80]
            mov BYTE PTR [RDX+100],AL
            jmp .L_445640
.L_445804:

            lea R8,QWORD PTR [RIP+.L_45d356]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1731
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RDI,QWORD PTR [R14+88]
            call .L_453f10

            test EAX,EAX
            mov R11D,DWORD PTR [RSP+8]
            jne .L_445893

            mov RDI,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [R15+4]
            movsxd RDX,R11D
            call .L_453f40

            test EAX,EAX
            mov EBX,EAX
            jne .L_44591b

            mov RAX,QWORD PTR [R14+88]
            or DWORD PTR [RAX+1060],2
            jmp .L_445640
.L_445862:

            mov DWORD PTR [RSI+260],EDX
            movzx R9D,BYTE PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_45d33c]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,362
            mov ESI,4
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_445640
.L_445893:

            lea R8,QWORD PTR [RIP+.L_45d373]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,384
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_445640
.L_4458ba:

            lea R8,QWORD PTR [RIP+.L_45d1c0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,1313
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_4458e2:

            cmp EDX,EAX
            jle .L_4451ea

            mov DWORD PTR [R14+16],EAX
            jmp .L_4451ea
.L_4458f3:

            lea R8,QWORD PTR [RIP+.L_45d474]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,2346
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_444530
.L_44591b:

            lea R8,QWORD PTR [RIP+.L_45d880]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov RDI,R14
            mov R9D,EAX
            mov ECX,391
            mov ESI,1
            call .L_4433c0

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_444530
.L_445955:

            sub RSP,8
.L_445959:

            lea R9,QWORD PTR [R15+RDX*1]
            lea R8,QWORD PTR [RIP+.L_45d306]
            push 0
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1653
            mov ESI,3
            mov RDI,R14
            call .L_443490

            pop RAX
            pop RDX
.L_445981:

            xor EAX,EAX
.L_445983:

            mov RSI,QWORD PTR [RSP+40]
            cmp BYTE PTR [RSI+RAX*1],0
            jne .L_445999

            cmp BYTE PTR [RSI+RAX*1+1],255
            je .L_445e24
.L_445999:

            add RAX,2
            cmp QWORD PTR [RSP+32],RAX
            ja .L_445983

            cmp DWORD PTR [R14+376],1
            mov RAX,QWORD PTR [R14]
            je .L_4459c4

            movzx EDX,BYTE PTR [RAX+152]
            and EDX,48
            cmp DL,32
            je .L_4460db
.L_4459c4:

            movsxd RDX,DWORD PTR [R14+16]
            mov R13,QWORD PTR [RAX+RDX*8]
            mov EAX,DWORD PTR [R13]
            test EAX,EAX
            je .L_445f32

            xor EDX,EDX
.L_4459da:

            xor EBX,EBX
            jmp .L_4459f3
          .byte 0x66
          .byte 0x90
.L_4459e0:

            add RBX,2
            cmp QWORD PTR [RSP+32],RBX
            jbe .L_445b21

            mov EAX,DWORD PTR [R13]
.L_4459f3:

            mov RSI,QWORD PTR [RSP+40]
            movzx ECX,BYTE PTR [RSI+RBX*1]
            cmp AH,CL
            jne .L_4459e0

            cmp BYTE PTR [RSI+RBX*1+1],AL
            jne .L_4459e0

            mov EDI,EAX
            call .L_454f50

            test RAX,RAX
            mov R12,RAX
            je .L_446046

            mov R9,QWORD PTR [RAX+8]
            lea R8,QWORD PTR [RIP+.L_45d3a3]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,799
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov EAX,DWORD PTR [R14+16]
            cmp DWORD PTR [R12+32],EAX
            jg .L_445af8

            cmp EAX,DWORD PTR [R12+40]
            jg .L_445af8

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_445a71

            test BYTE PTR [R12+44],4
            jne .L_445ca1
.L_445a71:

            cmp DWORD PTR [R12+24],11
            je .L_445c7f
.L_445a7d:

            mov R9,QWORD PTR [R12+8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45d689]
            xor EAX,EAX
            mov ECX,1972
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov EDX,DWORD PTR [R13]
            mov RAX,QWORD PTR [R14+80]
            mov DWORD PTR [RAX],EDX
            mov RAX,QWORD PTR [R14+120]
            mov QWORD PTR [RAX],R12
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_446039
.L_445aca:

            lea R8,QWORD PTR [RIP+.L_45d3f6]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2006
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            xor EBX,EBX
            jmp .L_444530
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_445af8:

            lea R8,QWORD PTR [RIP+.L_45d3ba]
            mov ECX,804
.L_445b04:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,EBP
            jmp .L_4459e0
.L_445b21:

            add R13,4
            mov EAX,DWORD PTR [R13]
            test EAX,EAX
            jne .L_4459da

            test EDX,EDX
            je .L_445f32

            lea R8,QWORD PTR [RIP+.L_45d988]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1958
            mov ESI,1
            mov RDI,R14
            mov EBX,4294940288
            call .L_443270

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_444530
.L_445b75:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1664
            jmp .L_445660
.L_445b86:

            lea R8,QWORD PTR [RIP+.L_45d297]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1537
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],0
            jmp .L_44537e
.L_445bb8:

            lea R8,QWORD PTR [RIP+.L_45dab8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2143
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            lea R15,QWORD PTR [RBX+10]
            sub R15,QWORD PTR [RSP+8]
            mov DWORD PTR [RBX+5],16777727
            mov BYTE PTR [RBX+9],0
            lea R11,QWORD PTR [R15+2]
            jmp .L_4443f7
.L_445bf7:

            mov RAX,QWORD PTR [R14+320]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            lea R8,QWORD PTR [RIP+.L_45db48]
            mov ECX,2246
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RSP+16],RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RAX+768]
            mov RAX,RDX
            sub RAX,R13
            cmp RAX,3
            jg .L_445d00

            lea R8,QWORD PTR [RIP+.L_45d53e]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2250
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_44449f
.L_445c68:

            movzx EAX,BYTE PTR [RAX+11]
            cmp BYTE PTR [RCX+2],AL
            jne .L_444dfa

            mov EAX,12
            jmp .L_445131
.L_445c7f:

            mov RAX,QWORD PTR [R14+88]
            test BYTE PTR [RAX+1060],2
            jne .L_445a7d

            lea R8,QWORD PTR [RIP+.L_45d948]
            mov ECX,828
            jmp .L_445b04
.L_445ca1:

            mov EDX,EBP
            jmp .L_4459e0
.L_445ca8:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,3717
.L_445cb4:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294939648
            call .L_443270

            jmp .L_444530
.L_445cd4:

            lea R8,QWORD PTR [RIP+.L_45dc08]
            mov ECX,3511
.L_445ce0:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294935552
            call .L_443270

            jmp .L_444530
.L_445d00:

            mov WORD PTR [R13],1
            mov RAX,QWORD PTR [R14]
            sub RDX,R13
            mov RDI,QWORD PTR [R14+88]
            lea RCX,QWORD PTR [RSP+64]
            lea RSI,QWORD PTR [R13+4]
            sub RDX,4
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            call .L_454030

            test EAX,EAX
            mov R9D,EAX
            jne .L_445efc

            mov RAX,QWORD PTR [RSP+64]
            mov RDX,RAX
            mov BYTE PTR [R13+3],AL
            lea R15,QWORD PTR [RAX+R15*1+4]
            shr RDX,8
            mov BYTE PTR [R13+2],DL
            jmp .L_44449f
.L_445d54:

            lea R8,QWORD PTR [RIP+.L_45dc28]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov R9D,EAX
            mov ECX,3701
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            mov EBX,4294935808
            jmp .L_444530
.L_445d81:

            lea R8,QWORD PTR [RIP+.L_45dc08]
            mov ECX,3505
            jmp .L_445ce0
.L_445d92:

            call __stack_chk_fail@PLT
.L_445d97:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1571
            jmp .L_445660
.L_445da8:

            lea R8,QWORD PTR [RIP+.L_45d800]
            mov ECX,175
.L_445db4:

            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936320
            call .L_443270

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_444530
.L_445de6:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,411
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294936320
            jmp .L_444530
.L_445e24:

            lea R8,QWORD PTR [RIP+.L_45d8f0]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            xor EAX,EAX
            mov ECX,1869
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov DWORD PTR [R14+376],1
            mov RAX,QWORD PTR [R14]
            jmp .L_4459c4
.L_445e59:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,286
            jmp .L_445660
.L_445e6a:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,295
            jmp .L_445660
.L_445e7b:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,3758
            jmp .L_445cb4
.L_445e8c:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1361
            jmp .L_444e3c
.L_445e9d:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1591
            jmp .L_445660
.L_445eae:

            lea R8,QWORD PTR [RIP+.L_45d4c6]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2396
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294937600
            jmp .L_444530
.L_445eda:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1487
            jmp .L_445660
.L_445eeb:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,2627
            jmp .L_445cb4
.L_445efc:

            lea R8,QWORD PTR [RIP+.L_45db70]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2262
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_44449f
.L_445f21:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1643
            jmp .L_445660
.L_445f32:

            lea R8,QWORD PTR [RIP+.L_45d3d8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1965
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294937728
            jmp .L_444530
.L_445f70:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1437
            jmp .L_444e3c
.L_445f81:

            sub RSP,8
.L_445f85:

            lea R8,QWORD PTR [RIP+.L_45d7c0]
            mov RDI,R14
            push RCX
            push RSI
            mov ECX,1458
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ESI,1
            xor EAX,EAX
            mov EBX,4294939008
            call .L_443270

            add RSP,32
            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_444530
.L_445fca:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1342
            jmp .L_444e3c
.L_445fdb:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1306
            jmp .L_444e3c
.L_445fec:

            test R10,R10
            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1548
            jne .L_444e3c

            lea R8,QWORD PTR [RIP+.L_45d2b2]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1552
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_44537e
.L_446028:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,344
            jmp .L_445660
.L_446039:

            mov RDI,R14
            call .L_4475d0

            jmp .L_445aca
.L_446046:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,795
            jmp .L_445cb4
.L_446057:

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294934784
            jmp .L_444530
.L_446073:

            lea R8,QWORD PTR [RIP+.L_45d456]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,2335
            mov ESI,1
            mov RDI,R14
            mov EBX,4294939648
            call .L_443270

            jmp .L_444530
.L_44609d:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            lea RDX,QWORD PTR [RIP+.L_45d6a8]
            mov ECX,1512
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294936320
            jmp .L_444530
.L_4460db:

            lea R8,QWORD PTR [RIP+.L_45d918]
            mov ECX,1891
            jmp .L_445db4
.L_4460ec:

            lea R8,QWORD PTR [RIP+.L_45d1d8]
            mov ECX,1631
            jmp .L_445660
.L_4460fd:

            nop
            nop
            nop
.L_446100:

            mov EAX,4294938496
            ret 
.L_446106:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446110:

            mov EAX,4294938496
            ret 
.L_446116:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446120:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDI
            mov EBX,EDX
            sub RSP,168
.L_446139:

            mov R13,QWORD PTR [RDI+80]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            test R13,R13
            je .L_4462a3
.L_446159:

            mov R12,RSP
            lea R15,QWORD PTR [RIP+.L_45dcb8]
            mov RDI,R12
            call .L_440910

            lea R8,QWORD PTR [RIP+.L_45dcd8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5077
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBP
            call .L_443270

            mov RAX,QWORD PTR [RBP+88]
            mov RDI,R12
            lea RSI,QWORD PTR [RAX+800]
            call .L_440960

            sub RSP,8
.L_4461a4:

            lea R9,QWORD PTR [R12+8]
            lea R8,QWORD PTR [RIP+.L_45dcf5]
            push 32
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5089
            mov ESI,4
            mov RDI,RBP
            call .L_443490

            pop RAX
            pop RDX
            test EBX,EBX
            lea RDX,QWORD PTR [RIP+.L_45dcc8]
            mov RDI,R12
            cmovne R15,RDX
            lea RBX,QWORD PTR [RSP+112]
            mov RSI,RBX
            call .L_440e70

            mov RAX,QWORD PTR [RBP+88]
            sub RSP,8
            lea RDI,QWORD PTR [R13+48]
            push 12
.L_4461f8:

            mov R9,R14
            mov R8D,32
            mov RCX,RBX
            mov RDX,R15
            mov ESI,48
            call QWORD PTR [RAX+936]

            lea R8,QWORD PTR [RIP+.L_45dd09]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5101
            mov ESI,3
            mov R9,R14
            mov RDI,RBP
            mov QWORD PTR [RSP],12
            call .L_443490

            mov RDI,R12
            call .L_440940

            pop RCX
.L_446246:

            pop RSI
.L_446247:

            lea RAX,QWORD PTR [RBX+32]
            mov RCX,RBX
            nop
            nop
.L_446250:

            mov BYTE PTR [RCX],0
            add RCX,1
            cmp RCX,RAX
            jne .L_446250

            lea R8,QWORD PTR [RIP+.L_45dd1e]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,5107
            mov ESI,2
            mov RDI,RBP
            call .L_443270

            mov RAX,QWORD PTR [RSP+152]
            xor RAX,QWORD PTR FS:[40]
            jne .L_4462ac

            add RSP,168
.L_446298:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4462a3:

            mov R13,QWORD PTR [RDI+72]
            jmp .L_446159
.L_4462ac:

            call __stack_chk_fail@PLT
.L_4462b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4462c0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
            mov R12,RSI
            add RSP,-128
.L_4462ce:

            mov RBX,RSP
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            call .L_440910

            lea R8,QWORD PTR [RIP+.L_45dd30]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,1046
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBP
            call .L_443270

            mov RAX,QWORD PTR [RBP+88]
            mov RDI,RBX
            lea RSI,QWORD PTR [RAX+800]
            call .L_440960

            mov RSI,R12
            mov RDI,RBX
            call .L_440e70

            sub RSP,8
.L_44632d:

            lea R8,QWORD PTR [RIP+.L_45dd46]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push 32
.L_44633d:

            mov R9,R12
            mov ECX,1051
            mov ESI,3
            mov RDI,RBP
            call .L_443490

            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45dd5f]
            xor EAX,EAX
            mov ECX,1052
            mov ESI,2
            mov RDI,RBP
            call .L_443270

            mov RDI,RBX
            call .L_440940

            pop RAX
.L_44637d:

            pop RDX
            mov RAX,QWORD PTR [RSP+120]
            xor RAX,QWORD PTR FS:[40]
            jne .L_446397

            sub RSP,-128
            pop RBX
            pop RBP
            pop R12
            ret 
.L_446397:

            call __stack_chk_fail@PLT
.L_44639c:

            nop
            nop
            nop
            nop
.L_4463a0:

            mov RAX,QWORD PTR [RDI+88]
            mov RAX,QWORD PTR [RAX+784]
            cmp QWORD PTR [RDI+104],RAX
            je .L_446450

            push RBX
.L_4463b6:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45dd73]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,2548
            mov ESI,3
            call .L_443270

            mov RAX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX+104]
            mov RCX,QWORD PTR [RAX+784]
            mov QWORD PTR [RBX+104],RCX
            mov QWORD PTR [RAX+784],RDX
            mov RDX,QWORD PTR [RBX+288]
            mov RAX,QWORD PTR [RAX+792]
            mov RCX,QWORD PTR [RDX]
            mov QWORD PTR [RDX],RAX
            mov RAX,QWORD PTR [RBX+88]
            mov QWORD PTR [RAX+792],RCX
            mov RDX,QWORD PTR [RBX+104]
            mov RAX,QWORD PTR [RBX+312]
            test RDX,RDX
            je .L_446440

            cmp DWORD PTR [RBX+16],1
            jle .L_446440

            add RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            mov QWORD PTR [RBX+320],RAX
            pop RBX
.L_446437:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_446440:

            mov QWORD PTR [RBX+320],RAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_446450:

            lea R8,QWORD PTR [RIP+.L_45dd6e]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2544
            mov ESI,3
            xor EAX,EAX
            jmp .L_443270
.L_44646f:

            nop
.L_446470:

            mov RDI,QWORD PTR [RDI+88]
            add RDI,800
            jmp .L_440e50
.L_446480:

            jmp .L_446470
.L_446482:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446490:

            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45dd7f]
            mov RBP,RDI
            mov EBX,ESI
            sub RSP,8
            mov R9D,ESI
            xor EAX,EAX
            mov ESI,3
            mov ECX,82
            call .L_443270

            mov RDI,QWORD PTR [RBP+128]
            mov RAX,QWORD PTR [RBP+136]
            add RSP,8
            mov ESI,EBX
            mov EDX,EBX
            pop RBX
            pop RBP
            shr ESI,2
            jmp RAX
.L_4464da:

            nop
            nop
            nop
            nop
            nop
            nop
.L_4464e0:

            mov RAX,QWORD PTR [RDI+144]
            test RAX,RAX
            je .L_446508

            push RBX
            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+128]
            call RAX

            cmp EAX,2
            je .L_44650b

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_446508:

            xor EAX,EAX
            ret 
.L_44650b:

            lea R8,QWORD PTR [RIP+.L_45dd92]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,96
            mov ESI,3
            call .L_443270

            mov EAX,4294967295
            pop RBX
            ret 
.L_446534:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446540:

            push RBX

            mov RBX,RDI
            lea RDI,QWORD PTR [RDI+128]
            call .L_452ee0

            lea RDI,QWORD PTR [RBX+208]
            call .L_452ee0

            lea RDI,QWORD PTR [RBX+80]
            call .L_4401e0

            lea RDI,QWORD PTR [RBX+104]
            call .L_4401e0

            lea RAX,QWORD PTR [RBX+288]
            nop
            nop
            nop
.L_446578:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_446578

            pop RBX

            ret 
.L_446586:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446590:

            push R12
            push RBP
            push RBX
.L_446594:

            mov RBX,RDI
            add RDI,800
            call .L_440940

            mov RDI,RBX
            call .L_453e60

            mov RDI,QWORD PTR [RBX+696]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+712]
            mov QWORD PTR [RBX+696],0
            mov QWORD PTR [RBX+704],0
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+728]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+744]
            call QWORD PTR [RIP+.L_677120]

            mov RBP,QWORD PTR [RBX+760]
            test RBP,RBP
            je .L_446627

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446608:

            mov R12,QWORD PTR [RBP+24]
            mov RDI,QWORD PTR [RBP]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,RBP
            call QWORD PTR [RIP+.L_677120]

            test R12,R12
            mov RBP,R12
            jne .L_446608
.L_446627:

            lea RAX,QWORD PTR [RBX+1064]
            nop
            nop
.L_446630:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_446630

            pop RBX
.L_44663d:

            pop RBP
            pop R12
            ret 
.L_446641:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446650:

            push RBX

            lea R8,QWORD PTR [RIP+.L_45e588]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,5163
            mov ESI,3
            call .L_443270

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_446685

            call .L_446590

            mov RDI,QWORD PTR [RBX+88]
.L_446685:

            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+112]
            mov QWORD PTR [RBX+88],0
            test RDI,RDI
            je .L_4466ab

            call .L_446540

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]
.L_4466ab:

            mov RAX,QWORD PTR [RBX+120]
            mov RDI,RBX
            mov QWORD PTR [RBX+120],0
            lea R8,QWORD PTR [RIP+.L_45e5a8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5183
            mov ESI,3
            mov QWORD PTR [RBX+112],RAX
            xor EAX,EAX
            pop RBX

            jmp .L_443270
.L_4466de:

            nop
            nop
.L_4466e0:

            lea RAX,QWORD PTR [RDI+104]
            nop
            nop
            nop
            nop
.L_4466e8:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_4466e8

            ret 
.L_4466f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446700:

            push R12
            push RBP
            push RBX
.L_446704:

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+120]
            test RDI,RDI
            je .L_446715

            call .L_446540
.L_446715:

            mov RDI,QWORD PTR [RBX+80]
            test RDI,RDI
            je .L_446723

            call .L_4466e0
.L_446723:

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_446731

            call .L_446590
.L_446731:

            cmp QWORD PTR [RBX+120],0
            jne .L_44674c

            mov ESI,288
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [RBX+120],RAX
.L_44674c:

            cmp QWORD PTR [RBX+80],0
            jne .L_446767

            mov ESI,104
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [RBX+80],RAX
.L_446767:

            cmp QWORD PTR [RBX+88],0
            jne .L_44678b

            mov ESI,1064
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+88],RAX
            je .L_4468e8
.L_44678b:

            cmp QWORD PTR [RBX+120],0
            je .L_4468e8

            mov RCX,QWORD PTR [RBX+80]
            test RCX,RCX
            je .L_4468e8

            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+96],0
            xor R12D,R12D
            and RDI,-8
            mov RAX,R12
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RBP,QWORD PTR [RBX+120]
            lea RDI,QWORD PTR [RBP+8]
            mov RCX,RBP
            mov QWORD PTR [RBP],0
            mov QWORD PTR [RBP+280],0
            and RDI,-8
            sub RCX,RDI
            add ECX,288
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            lea RDI,QWORD PTR [RBP+128]
            call .L_452ec0

            lea RDI,QWORD PTR [RBP+208]
            call .L_452ec0

            lea RDI,QWORD PTR [RBP+80]
            call .L_4401d0

            lea RDI,QWORD PTR [RBP+104]
            call .L_4401d0

            mov RBP,QWORD PTR [RBX+88]
            mov RAX,R12
            lea RDI,QWORD PTR [RBP+8]
            mov RCX,RBP
            mov QWORD PTR [RBP],0
            mov QWORD PTR [RBP+1056],0
            lea R12,QWORD PTR [RBP+800]
            and RDI,-8
            sub RCX,RDI
            add ECX,1064
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,R12
            call .L_440910

            xor ESI,ESI
            mov RDI,R12
            call .L_4409b0

            lea RAX,QWORD PTR [RIP+.L_446470]
            mov RDI,RBP
            mov QWORD PTR [RBP+912],RAX
            call .L_453dc0

            mov RAX,QWORD PTR [RBX]
            mov QWORD PTR [RBP+696],0
            mov QWORD PTR [RBP+704],0
            movzx EAX,BYTE PTR [RAX+152]
            test AL,2
            je .L_4468dc

            mov RDX,QWORD PTR [RBX+88]
            and EAX,1
            mov RCX,QWORD PTR [RBX+104]
            add EAX,EAX
            mov BYTE PTR [RDX+756],AL
            cmp QWORD PTR [RBX+136],0
            mov QWORD PTR [RDX+784],RCX
            je .L_4468dc

            xor ESI,ESI
            mov RDI,RBX
            call .L_446490
.L_4468dc:

            xor EAX,EAX
.L_4468de:

            pop RBX
.L_4468df:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4468e8:

            lea R8,QWORD PTR [RIP+.L_45e5c8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,5549
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RDI,QWORD PTR [RBX+88]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+120]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+80]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+88],0
            mov QWORD PTR [RBX+120],0
            mov EAX,4294934784
            mov QWORD PTR [RBX+80],0
            jmp .L_4468de
.L_446947:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446950:

            push R15
            push R14
            mov R15,R8
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            sub RSP,280
.L_446967:

            lea RBP,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP+48],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+264],RAX
            xor EAX,EAX
            mov RDI,RBP
            mov QWORD PTR [RSP+16],RCX
            mov QWORD PTR [RSP+8],R9
            call .L_4401d0

            mov EDI,6
            call .L_4401a0

            test RAX,RAX
            je .L_446bb4

            mov RDI,RAX
            mov R13,RAX
            call .L_4407a0

            mov RDI,R14
            movzx R12D,AL
            call strlen@PLT

            lea RCX,QWORD PTR [R12+RAX*1]
            mov R8,RAX
            lea RAX,QWORD PTR [R15+RCX*1]
            mov QWORD PTR [RSP+24],RCX
            cmp RAX,128
            ja .L_446ba9

            lea RBX,QWORD PTR [RSP+128]
            mov RDX,R8
            mov RSI,R14
            mov QWORD PTR [RSP+32],R8
            lea RDI,QWORD PTR [RBX+R12*1]
            mov QWORD PTR [RSP+56],RDI
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [RSP+16]
            mov RDX,R15
            lea RDI,QWORD PTR [RBX+RCX*1]
            call memcpy@PLT

            mov EDX,1
            mov RSI,R13
            mov RDI,RBP
            call .L_4402a0

            test EAX,EAX
            mov R14D,EAX
            mov R8,QWORD PTR [RSP+32]
            je .L_446a60
.L_446a34:

            mov RSI,QWORD PTR [RSP+264]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_446bbf

            add RSP,280
.L_446a55:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_446a60:

            mov RDX,QWORD PTR [RSP+48]
            mov RSI,QWORD PTR [RSP+40]
            mov RDI,RBP
            add R15,R8
            lea R13,QWORD PTR [RSP+96]
            call .L_4403e0

            mov RSI,QWORD PTR [RSP+56]
            mov RDX,R15
            mov RDI,RBP
            call .L_440530

            mov RSI,RBX
            mov RDI,RBP
            call .L_440570

            cmp QWORD PTR [RSP+336],0
            je .L_446b6c

            lea RAX,QWORD PTR [R12+R15*1]
            mov RSI,QWORD PTR [RSP+8]
            mov R15,QWORD PTR [RSP+336]
            lea R13,QWORD PTR [RSP+96]
            mov DWORD PTR [RSP+32],R14D
            mov QWORD PTR [RSP+16],RAX
            mov RAX,R12
            sub RAX,RSI
            mov R14,RSI
            mov QWORD PTR [RSP+24],RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_446ad8:

            mov RDI,RBP
            call .L_440630

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov RDI,RBP
            call .L_440530

            mov RSI,R13
            mov RDI,RBP
            call .L_440570

            mov RDI,RBP
            call .L_440630

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_440530

            mov RSI,RBX
            mov RDI,RBP
            call .L_440570

            mov RAX,QWORD PTR [RSP+24]
            mov RDX,R12
            add RAX,R14
            cmp R15,RAX
            jae .L_446b34

            mov RAX,R15
            xor EDX,EDX
            div R12
.L_446b34:

            test RDX,RDX
            je .L_446b53

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
.L_446b40:

            movzx ECX,BYTE PTR [R13+RAX*1]
            mov BYTE PTR [R14+RAX*1],CL
            add RAX,1
            cmp RAX,RDX
            jne .L_446b40
.L_446b53:

            add R14,R12
            mov RAX,R14
            sub RAX,QWORD PTR [RSP+8]
            cmp R15,RAX
            ja .L_446ad8

            mov R14D,DWORD PTR [RSP+32]
.L_446b6c:

            mov RDI,RBP
            call .L_4401e0

            lea RAX,QWORD PTR [RBX+128]
            nop
            nop
            nop
            nop
            nop
.L_446b80:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_446b80

            lea RDX,QWORD PTR [R13+32]
            mov RAX,R13
            nop
            nop
            nop
            nop
            nop
.L_446b98:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_446b98

            jmp .L_446a34
.L_446ba9:

            mov R14D,4294938368
            jmp .L_446a34
.L_446bb4:

            mov R14D,4294939648
            jmp .L_446a34
.L_446bbf:

            call __stack_chk_fail@PLT
.L_446bc4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_446bd0:

            push R15
            push R14
            lea R8,QWORD PTR [RIP+.L_45dda0]
            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RBP
            push RBX
            mov ECX,501
            mov ESI,2
            mov R12,RDI
            sub RSP,392
.L_446bfc:

            mov R13,QWORD PTR [RDI+120]
            mov R15,QWORD PTR [RDI+88]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+376],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+80]
            mov QWORD PTR [RSP+16],RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R13]
            mov EDI,DWORD PTR [RAX+16]
            call .L_452de0

            test RAX,RAX
            je .L_44731c

            mov R14,RAX
            mov RAX,QWORD PTR [R13]
            mov EDI,DWORD PTR [RAX+20]
            call .L_4401a0

            test RAX,RAX
            mov QWORD PTR [RSP+24],RAX
            je .L_447351

            cmp DWORD PTR [R12+16],3
            jne .L_4472df

            lea RAX,QWORD PTR [RIP+.L_446950]
            mov R10D,DWORD PTR [R15+1048]
            lea RBX,QWORD PTR [R15+952]
            mov QWORD PTR [R15+936],RAX
            lea RAX,QWORD PTR [RIP+.L_4462c0]
            mov QWORD PTR [R15+920],RAX
            lea RAX,QWORD PTR [RIP+.L_446120]
            mov QWORD PTR [R15+928],RAX
            mov RAX,QWORD PTR [RSP+16]
            add RAX,48
            test R10D,R10D
            mov QWORD PTR [RSP+8],RAX
            je .L_447060

            lea R8,QWORD PTR [RIP+.L_45e618]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,636
            mov ESI,3
            mov RDI,R12
            xor EAX,EAX
            call .L_443270
.L_446cd6:

            movdqu XMM1,XMMWORD PTR [R15+952]
            lea RAX,QWORD PTR [RSP+48]
            lea RDX,QWORD PTR [RSP+112]
            movdqu XMM3,XMMWORD PTR [R15+984]
            movdqu XMM0,XMMWORD PTR [R15+968]
            movdqu XMM2,XMMWORD PTR [R15+1000]
            movups XMMWORD PTR [R15+952],XMM3
            movaps XMMWORD PTR [RSP+48],XMM1
            movups XMMWORD PTR [RBX+16],XMM2
            movaps XMMWORD PTR [RSP+64],XMM0
            movaps XMMWORD PTR [RSP+80],XMM3
            movaps XMMWORD PTR [RSP+96],XMM2
            movups XMMWORD PTR [R15+984],XMM1
            movups XMMWORD PTR [R15+1000],XMM0
            nop
            nop
            nop
            nop
.L_446d38:

            add RAX,1
            mov BYTE PTR [RAX-1],0
            cmp RAX,RDX
            jne .L_446d38

            lea RBP,QWORD PTR [RSP+112]
            sub RSP,8
.L_446d4e:

            mov ESI,48
            push 256
            mov R8D,64
            mov RDI,QWORD PTR [RSP+24]
            mov R9,RBP
            mov RCX,RBX
            lea RDX,QWORD PTR [RIP+.L_45dde1]
            call QWORD PTR [R15+936]

            test EAX,EAX
            pop RSI
            pop RDI
            jne .L_4470f2

            mov RAX,QWORD PTR [RSP+16]
            mov EDI,DWORD PTR [RAX]
            call .L_454f70

            lea R8,QWORD PTR [RIP+.L_45ddef]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,RAX
            mov ECX,667
            xor EAX,EAX
            mov ESI,3
            mov RDI,R12
            call .L_443270

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45ddcf]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push 48
.L_446dc6:

            mov R9,QWORD PTR [RSP+24]
            mov ECX,668
            mov ESI,3
            mov RDI,R12
            call .L_443490

            lea R8,QWORD PTR [RIP+.L_45d4e4]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,RBX
            mov ECX,669
            mov ESI,4
            mov RDI,R12
            mov QWORD PTR [RSP],64
            call .L_443490

            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45de00]
            mov ECX,670
            mov R9,RBP
            mov ESI,4
            mov RDI,R12
            mov QWORD PTR [RSP],256
            call .L_443490

            pop RDX
.L_446e34:

            pop RCX
.L_446e35:

            lea R10,QWORD PTR [R15+1016]
            nop
            nop
            nop
            nop
.L_446e40:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp R10,RBX
            jne .L_446e40

            mov EAX,DWORD PTR [R14+4]
            mov R9D,DWORD PTR [R14+8]
            sub EAX,6
            shr R9D,3
            and EAX,4294967293
            mov DWORD PTR [R13+8],R9D
            jne .L_4471d4

            mov RAX,QWORD PTR [R13]
            mov QWORD PTR [R13+40],0
            mov EDI,12
            mov QWORD PTR [R13+24],12
            mov QWORD PTR [R13+32],4
            movzx EAX,BYTE PTR [RAX+44]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            xor ESI,ESI
            and EAX,8
            add RAX,16
            mov QWORD PTR [R13+16],RAX
.L_446ea2:

            sub RSP,8
.L_446ea6:

            lea R8,QWORD PTR [RIP+.L_45e638]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RSI
            push RDI
            mov ECX,767
            push RAX
            mov ESI,3
            xor EAX,EAX
            mov RDI,R12
            call .L_443270

            mov RAX,QWORD PTR [R12]
            add RSP,32
.L_446ed3:

            test BYTE PTR [RAX+152],1
            je .L_44714a

            mov R8,QWORD PTR [R13+40]
            mov ECX,DWORD PTR [R13+8]
            lea RAX,QWORD PTR [R8+R8*1]
            add R8,RBP
            lea RBX,QWORD PTR [RAX+RCX*1]
            add RAX,RBP
            mov QWORD PTR [RSP+32],RAX
            lea RSI,QWORD PTR [RBP+RBX*1]
            mov RBX,QWORD PTR [R13+32]
            mov QWORD PTR [RSP+24],RSI
            test RBX,RBX
            jne .L_446f12

            mov RBX,QWORD PTR [R13+24]
.L_446f12:

            mov R15,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+64]
            mov RDX,RBX
            mov QWORD PTR [RSP+40],R8
            mov QWORD PTR [RSP+16],RCX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+48]
            mov RDX,RBX
            add RCX,RBX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov R8,QWORD PTR [RSP+40]
            mov QWORD PTR [RSP+16],RBP
.L_446f53:

            mov EAX,DWORD PTR [R12+16]
            test EAX,EAX
            jle .L_447367

            mov RDX,QWORD PTR [R13+40]
            lea RDI,QWORD PTR [R13+80]
            mov RSI,R8
            call .L_4403e0

            mov RDX,QWORD PTR [R13+40]
            mov RSI,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [R13+104]
            call .L_4403e0

            mov RDX,QWORD PTR [R12]
            mov RAX,QWORD PTR [RDX+112]
            test RAX,RAX
            je .L_446fa8

            mov R8D,DWORD PTR [R13+8]
            mov RDI,QWORD PTR [RDX+120]
            mov R9,RBX
            mov RCX,QWORD PTR [R13+40]
            mov RDX,RBP
            mov RSI,QWORD PTR [RSP+8]
            call RAX
.L_446fa8:

            lea R15,QWORD PTR [R13+128]
            mov RSI,R14
            mov RDI,R15
            call .L_452f40

            test EAX,EAX
            jne .L_4471bc

            add R13,208
            mov RSI,R14
            mov RDI,R13
            call .L_452f40

            test EAX,EAX
            jne .L_44723b

            mov EDX,DWORD PTR [R14+8]
            mov RSI,QWORD PTR [RSP+24]
            mov ECX,1
            mov RDI,R15
            call .L_452fa0

            test EAX,EAX
            jne .L_44726c

            mov EDX,DWORD PTR [R14+8]
            mov RSI,QWORD PTR [RSP+32]
            xor ECX,ECX
            mov RDI,R13
            call .L_452fa0

            mov R11D,EAX
            lea RAX,QWORD PTR [RBP+256]
            test R11D,R11D
            jne .L_447253
.L_447020:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RBP,RAX
            jne .L_447020

            lea R8,QWORD PTR [RIP+.L_45de46]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,957
            mov ESI,2
            mov RDI,R12
            xor EAX,EAX
            mov DWORD PTR [RSP+8],R11D
            call .L_443270

            mov R11D,DWORD PTR [RSP+8]
            jmp .L_44711e
          .byte 0x66
          .byte 0x90
.L_447060:

            lea RBP,QWORD PTR [R15+1016]
            sub RSP,8
.L_44706b:

            lea R8,QWORD PTR [RIP+.L_45ddcc]
            push QWORD PTR [R15+944]
.L_447079:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,579
            mov R9,RBP
            mov ESI,3
            mov RDI,R12
            call .L_443490

            mov R9,QWORD PTR [RSP+24]
            mov RSI,QWORD PTR [R15+944]
            mov R8D,64
            mov QWORD PTR [RSP],48
            mov RCX,RBX
            lea RDX,QWORD PTR [RIP+.L_45ddcf]
            mov RDI,RBP
            call QWORD PTR [R15+936]

            mov R11D,EAX
            lea RAX,QWORD PTR [R15+1048]
            test R11D,R11D
            pop R8
.L_4470d2:

            pop R9
.L_4470d4:

            jne .L_447222

            nop
            nop
            nop
            nop
            nop
            nop
.L_4470e0:

            mov BYTE PTR [RBP],0
            add RBP,1
            cmp RAX,RBP
            jne .L_4470e0

            jmp .L_446cd6
.L_4470f2:

            lea R8,QWORD PTR [RIP+.L_45dddd]
            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            mov ECX,662
.L_447105:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,R12
            call .L_4433c0

            mov R11D,DWORD PTR [RSP+8]
.L_44711e:

            mov RCX,QWORD PTR [RSP+376]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R11D
            jne .L_447389

            add RSP,392
.L_44713f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44714a:

            mov RDX,QWORD PTR [R13+40]
            mov RBX,QWORD PTR [R13+32]
            lea RAX,QWORD PTR [RDX+RDX*1]
            lea RCX,QWORD PTR [RBP+RAX*1]
            mov QWORD PTR [RSP+24],RCX
            mov ECX,DWORD PTR [R13+8]
            add RAX,RCX
            add RAX,RBP
            test RBX,RBX
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RBP+RDX*1]
            mov QWORD PTR [RSP+16],RAX
            jne .L_447182

            mov RBX,QWORD PTR [R13+24]
.L_447182:

            mov R15,QWORD PTR [RSP+32]
            lea RDI,QWORD PTR [R13+48]
            mov RDX,RBX
            mov QWORD PTR [RSP+40],RCX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov RCX,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [R13+64]
            mov RDX,RBX
            add RCX,RBX
            lea RSI,QWORD PTR [R15+RCX*1]
            call memcpy@PLT

            mov R8,RBP
            jmp .L_446f53
.L_4471bc:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_45de1b]
            mov ECX,877
            jmp .L_447105
.L_4471d4:

            mov RBX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [R13+80]
            mov EDX,1
            mov RSI,RBX
            call .L_4402a0

            test EAX,EAX
            mov R11D,EAX
            jne .L_447209

            lea RDI,QWORD PTR [R13+104]
            mov EDX,1
            mov RSI,RBX
            call .L_4402a0

            test EAX,EAX
            mov R11D,EAX
            je .L_447284
.L_447209:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_45de0a]
            mov ECX,699
            jmp .L_447105
.L_447222:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_45dddd]
            mov ECX,629
            jmp .L_447105
.L_44723b:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_45de1b]
            mov ECX,884
            jmp .L_447105
.L_447253:

            mov R9D,R11D
            mov DWORD PTR [RSP+8],R11D
            lea R8,QWORD PTR [RIP+.L_45de30]
            mov ECX,900
            jmp .L_447105
.L_44726c:

            mov R9D,EAX
            mov DWORD PTR [RSP+8],EAX
            lea R8,QWORD PTR [RIP+.L_45de30]
            mov ECX,892
            jmp .L_447105
.L_447284:

            mov RDI,QWORD PTR [RSP+24]
            call .L_4407a0

            mov EDI,DWORD PTR [R14+24]
            cmp DWORD PTR [R14+4],7
            movzx ESI,AL
            mov QWORD PTR [R13+40],RSI
            mov QWORD PTR [R13+24],RDI
            je .L_44730c

            mov R8D,DWORD PTR [R14+32]
            xor EDX,EDX
            mov RAX,RSI
            div R8
            lea RCX,QWORD PTR [RSI+R8*1]
            mov RAX,RCX
            mov ECX,DWORD PTR [R12+16]
            sub RAX,RDX
            lea EDX,DWORD PTR [RCX-2]
            mov QWORD PTR [R13+16],RAX
            cmp EDX,1
            ja .L_447378

            add RAX,RDI
            mov R9D,DWORD PTR [R13+8]
            mov QWORD PTR [R13+16],RAX
            jmp .L_446ea2
.L_4472df:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,562
.L_4472eb:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,R12
            xor EAX,EAX
            call .L_443270

            mov R11D,4294939648
            jmp .L_44711e
.L_44730c:

            mov QWORD PTR [R13+16],RSI
            mov R9D,DWORD PTR [R13+8]
            mov RAX,RSI
            jmp .L_446ea2
.L_44731c:

            mov RAX,QWORD PTR [R13]
            lea R8,QWORD PTR [RIP+.L_45ddaf]
            mov ECX,507
            mov R9D,DWORD PTR [RAX+16]
.L_447330:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,R12
            xor EAX,EAX
            call .L_443270

            mov R11D,4294938368
            jmp .L_44711e
.L_447351:

            mov RAX,QWORD PTR [R13]
            lea R8,QWORD PTR [RIP+.L_45e5f0]
            mov ECX,515
            mov R9D,DWORD PTR [RAX+20]
            jmp .L_447330
.L_447367:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,841
            jmp .L_4472eb
.L_447378:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,759
            jmp .L_4472eb
.L_447389:

            call __stack_chk_fail@PLT
.L_44738e:

            nop
            nop
.L_447390:

            push R12
            lea R8,QWORD PTR [RIP+.L_45de55]
            push RBP
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RBX
.L_4473a2:

            xor EAX,EAX
            mov RBX,RDI
            mov ECX,2416
            mov ESI,2
            call .L_443270

            cmp QWORD PTR [RBX+24],0
            je .L_44756e

            mov RAX,QWORD PTR [RBX+344]
            lea R12,QWORD PTR [RIP+.L_45e568]
            test RAX,RAX
            jne .L_4473fa

            jmp .L_447538
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4473e0:

            mov RAX,QWORD PTR [RBX+344]
            sub RAX,RBP
            test RAX,RAX
            mov QWORD PTR [RBX+344],RAX
            je .L_4474b0
.L_4473fa:

            mov RDX,QWORD PTR [RBX]
            mov RCX,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_45e6a8]
            mov ESI,2
            mov RDI,RBX
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            cmp DL,1
            sbb RDX,RDX
            sub RSP,8
.L_447427:

            and RDX,-8
            push RAX
            xor EAX,EAX
            lea R9,QWORD PTR [RDX+RCX*1+13]
            mov ECX,2435
            mov RDX,R12
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            mov RDI,QWORD PTR [RBX+48]
            pop RDX
            mov RDX,QWORD PTR [RBX+344]
            movzx EAX,BYTE PTR [RAX+152]
            pop RCX
.L_447457:

            and EAX,2
            cmp AL,1
            mov RAX,QWORD PTR [RBX+336]
            sbb RCX,RCX
            and RCX,-8
            sub RAX,RDX
            lea RSI,QWORD PTR [RCX+RAX*1+13]
            add RSI,QWORD PTR [RBX+296]
            call QWORD PTR [RBX+24]

            lea R8,QWORD PTR [RIP+.L_45de75]
            movsxd RBP,EAX
            mov ECX,2441
            mov R9D,EBP
            mov RDX,R12
            mov ESI,2
            mov RDI,RBX
            call .L_4433c0

            test EBP,EBP
            jg .L_4473e0
.L_4474a6:

            mov EAX,EBP
            pop RBX
.L_4474a9:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4474b0:

            mov EDI,8
            jmp .L_4474d8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4474c0:

            mov RDX,QWORD PTR [RBX+288]
            lea RCX,QWORD PTR [RDX+RSI*1-1]
            add BYTE PTR [RCX],1
            jne .L_447560

            sub EDI,1
.L_4474d8:

            mov RDX,QWORD PTR [RBX]
            xor ECX,ECX
            movzx ESI,DIL
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            setne CL
            add RCX,RCX
            cmp RSI,RCX
            ja .L_4474c0

            test DL,DL
            je .L_4474ff
.L_4474fa:

            mov EAX,2
.L_4474ff:

            cmp RSI,RAX
            je .L_44759a
.L_447508:

            lea R8,QWORD PTR [RIP+.L_45de65]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            xor EBP,EBP
            mov ECX,2460
            mov ESI,2
            call .L_443270

            mov EAX,EBP
            pop RBX
.L_44752f:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447538:

            lea R8,QWORD PTR [RIP+.L_45de65]
            mov RDX,R12
            mov RDI,RBX
            xor EBP,EBP
            mov ECX,2428
            mov ESI,2
            call .L_443270

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447560:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_4474fa

            jmp .L_447508
.L_44756e:

            lea R8,QWORD PTR [RIP+.L_45e668]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2421
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EBP,4294938368
            jmp .L_4474a6
.L_44759a:

            lea R8,QWORD PTR [RIP+.L_45e6d0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2456
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EBP,4294939776
            jmp .L_4474a6
.L_4475c6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4475d0:

            push R12
            push RBP
            mov R12,RDI
            push RBX
.L_4475d7:

            mov RAX,QWORD PTR [RDI+88]
            mov RBX,QWORD PTR [RAX+760]
            test RBX,RBX
            je .L_447613

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4475f0:

            mov RBP,QWORD PTR [RBX+24]
            mov RDI,QWORD PTR [RBX]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,RBX
            call QWORD PTR [RIP+.L_677120]

            test RBP,RBP
            mov RBX,RBP
            jne .L_4475f0

            mov RAX,QWORD PTR [R12+88]
.L_447613:

            cmp QWORD PTR [R12+136],0
            mov EDX,DWORD PTR [RAX+724]
            mov QWORD PTR [RAX+760],0
            mov QWORD PTR [RAX+768],0
            mov DWORD PTR [RAX+776],EDX
            je .L_44764f

            xor ESI,ESI
            mov RDI,R12
            call .L_446490

            mov RAX,QWORD PTR [R12+88]
.L_44764f:

            cmp DWORD PTR [R12+208],22
            je .L_447670
.L_44765a:

            mov BYTE PTR [RAX+756],0
            pop RBX
.L_447662:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447670:

            mov RDX,QWORD PTR [R12+192]
            cmp BYTE PTR [RDX],20
            jne .L_44765a

            mov BYTE PTR [RAX+756],3
            pop RBX
            pop RBP
            pop R12
            ret 
.L_447689:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447690:

            push RBX
.L_447691:

            mov RAX,QWORD PTR [RDI]
            lea R8,QWORD PTR [RIP+.L_45e6f8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            mov ECX,135
            mov ESI,3
            mov R9D,DWORD PTR [RAX+140]
            mov RAX,QWORD PTR [RDI+88]
            mov DWORD PTR [RAX+752],R9D
            xor EAX,EAX
            call .L_443270

            cmp QWORD PTR [RBX+136],0
            mov RAX,QWORD PTR [RBX+88]
            je .L_4476e8

            mov ESI,DWORD PTR [RAX+752]
            mov RDI,RBX
            call .L_446490

            mov RAX,QWORD PTR [RBX+88]
.L_4476e8:

            cmp DWORD PTR [RBX+208],22
            je .L_447700
.L_4476f1:

            mov BYTE PTR [RAX+756],2
            pop RBX
.L_4476f9:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447700:

            mov RDX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RDX],20
            jne .L_4476f1

            mov BYTE PTR [RAX+756],3
            pop RBX
            ret 
.L_447715:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_447720:

            push R15
            push R14
            lea R8,QWORD PTR [RIP+.L_45de81]
            push R13
            push R12
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RBP
            push RBX
            mov ECX,2701
            mov RBX,RDI
            mov ESI,2
            sub RSP,56
.L_447749:

            mov RBP,QWORD PTR [RDI+336]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4479a0

            mov RDX,QWORD PTR [RBX+88]
            mov EAX,DWORD PTR [RBX+328]
            test RDX,RDX
            je .L_447c50

            cmp BYTE PTR [RDX+756],1
            je .L_44779a

            cmp EAX,22
            je .L_4479af
.L_44779a:

            cmp BYTE PTR [RDX+756],1
            je .L_4477b8

            mov EDX,EAX
            and EDX,4294967293
            cmp EDX,20
            je .L_447ca0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4477b8:

            mov ECX,EBP
.L_4477ba:

            mov RDX,QWORD PTR [RBX+296]
            mov BYTE PTR [RDX],AL
            mov RDI,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RBX+296]
            mov ESI,DWORD PTR [RBX+16]
            mov EDX,DWORD PTR [RBX+12]
            test BYTE PTR [RDI+152],2
            jne .L_447d48

            mov BYTE PTR [RAX+1],DL
            mov BYTE PTR [RAX+2],SIL
.L_4477e7:

            mov RAX,QWORD PTR [RBX+304]
            shr RBP,8
            mov BYTE PTR [RAX],BPL
            mov RAX,QWORD PTR [RBX+304]
            mov BYTE PTR [RAX+1],CL
            cmp QWORD PTR [RBX+104],0
            je .L_447ac6

            lea R8,QWORD PTR [RIP+.L_45deb9]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,1258
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            cmp QWORD PTR [RBX+64],0
            je .L_447fcc

            mov RAX,QWORD PTR [RBX+104]
            test RAX,RAX
            je .L_447fcc

            mov RAX,QWORD PTR [RAX+128]
            mov RDX,QWORD PTR [RBX+336]
            mov R9,QWORD PTR [RBX+320]
            test RAX,RAX
            je .L_447c10

            mov EBP,DWORD PTR [RAX+4]
            sub RSP,8
.L_447869:

            lea R8,QWORD PTR [RIP+.L_45e720]
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,1269
            mov ESI,4
            mov RDI,RBX
            sub EBP,6
            call .L_443490

            and EBP,4294967293
            pop R11
            pop R12
.L_447894:

            jne .L_447c37

            mov RAX,QWORD PTR [RBX+104]
            mov RCX,QWORD PTR [RBX]
            mov EDX,DWORD PTR [RBX+16]
            mov RAX,QWORD PTR [RAX]
            movzx EAX,BYTE PTR [RAX+44]
            and EAX,2
            cmp AL,1
            mov RAX,QWORD PTR [RBX+288]
            sbb R13D,R13D
            and R13D,8
            mov RAX,QWORD PTR [RAX]
            add R13D,8
            test BYTE PTR [RCX+152],2
            mov QWORD PTR [RSP+27],RAX
            mov EAX,DWORD PTR [RBX+328]
            mov BYTE PTR [RSP+35],AL
            mov EAX,DWORD PTR [RBX+12]
            jne .L_447e88

            mov BYTE PTR [RSP+36],AL
            mov BYTE PTR [RSP+37],DL
.L_4478ec:

            mov RAX,QWORD PTR [RBX+336]
            lea R12,QWORD PTR [RSP+27]
            sub RSP,8
.L_4478fc:

            lea R8,QWORD PTR [RIP+.L_45dec8]
            mov ECX,1371
            mov ESI,4
            mov R9,R12
            mov RDI,RBX
            mov RDX,RAX
            mov BYTE PTR [RSP+47],AL
            shr RDX,8
            mov BYTE PTR [RSP+46],DL
            push 13
            lea RDX,QWORD PTR [RIP+.L_45e568]
            call .L_443490

            mov RDX,QWORD PTR [RBX+104]
            pop R9
            pop R10
.L_447938:

            mov RCX,QWORD PTR [RDX+32]
            mov RAX,QWORD PTR [RDX+24]
            sub RAX,RCX
            cmp RAX,8
            je .L_447d70

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1379
.L_447959:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_443270
.L_447974:

            lea R8,QWORD PTR [RIP+.L_45df2c]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EBP
            mov ECX,2824
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_447bc0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4479a0:

            mov EAX,DWORD PTR [RBX+328]
            cmp EAX,22
            jne .L_4477b8
.L_4479af:

            mov RAX,QWORD PTR [RBX+320]
            movzx R12D,BYTE PTR [RAX]
            test R12D,R12D
            jne .L_447c60
.L_4479c3:

            lea RDX,QWORD PTR [RBP-4]
            lea ESI,DWORD PTR [RBP-4]
            mov RCX,RDX
            shr RCX,16
            mov BYTE PTR [RAX+1],CL
            mov RAX,QWORD PTR [RBX+320]
            mov RCX,RDX
            shr RCX,8
            mov BYTE PTR [RAX+2],CL
            mov RAX,QWORD PTR [RBX+320]
            mov ECX,EBP
            mov BYTE PTR [RAX+3],SIL
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_447eb0

            test R12D,R12D
            je .L_447fb0
.L_447a0b:

            mov RAX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RBX+320]
            mov RDX,RBP
            mov RDI,RBX
            call QWORD PTR [RAX+912]
.L_447a22:

            mov RDX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RBX+328]
            test BYTE PTR [RDX+152],2
            je .L_4477b8

            mov RDX,QWORD PTR [RBX+88]
            test RDX,RDX
            je .L_4477b8

            jmp .L_44779a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447a50:

            add QWORD PTR [RBX+336],R13
            sub RSP,8
.L_447a5b:

            lea R8,QWORD PTR [RIP+.L_45df0a]
            push R13
.L_447a64:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,R15
            mov ECX,1426
            mov ESI,4
            mov RDI,RBX
            call .L_443490

            lea R8,QWORD PTR [RIP+.L_45df1d]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,1560
            mov RDI,RBX
            xor EAX,EAX
            mov ESI,2
            call .L_443270

            mov RAX,QWORD PTR [RBX+336]
            mov RDX,QWORD PTR [RBX+304]
            mov RCX,RAX
            shr RCX,8
            mov BYTE PTR [RDX],CL
            mov RDX,QWORD PTR [RBX+304]
            mov BYTE PTR [RDX+1],AL
            pop RDI
.L_447ac4:

            pop R8
.L_447ac6:

            mov RAX,QWORD PTR [RBX]
            mov RDX,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_45e780]
            mov ECX,2838
            mov ESI,3
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
            and RAX,-8
            lea RAX,QWORD PTR [RAX+RDX*1+13]
            mov RDX,QWORD PTR [RBX+296]
            mov QWORD PTR [RBX+344],RAX
            mov RAX,QWORD PTR [RBX+304]
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            movzx EAX,AX
            push RAX
            movzx EAX,BYTE PTR [RDX+2]
            push RAX
            movzx EAX,BYTE PTR [RDX+1]
            push RAX
            movzx R9D,BYTE PTR [RDX]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            add RSP,24
.L_447b43:

            mov RDX,QWORD PTR [RBX+336]
            mov R9,QWORD PTR [RBX+296]
            lea R8,QWORD PTR [RIP+.L_45df3c]
            mov ECX,2841
            mov ESI,4
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RAX,QWORD PTR [RAX+RDX*1+13]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RAX
.L_447b85:

            call .L_443490

            mov RDI,RBX
            call .L_447390

            test EAX,EAX
            mov EBP,EAX
            pop RCX
            pop RSI
.L_447b98:

            jne .L_447be8

            lea R8,QWORD PTR [RIP+.L_45df73]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2850
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_447bc0:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_44803d

            add RSP,56
.L_447bda:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447be8:

            lea R8,QWORD PTR [RIP+.L_45df5a]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,2846
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_447bc0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447c10:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45e720]
            mov ECX,1269
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,4
            mov RDI,RBX
            call .L_443490

            pop RAX
            pop RDX
.L_447c37:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1549
            jmp .L_447959
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447c50:

            cmp EAX,22
            jne .L_4477b8

            jmp .L_4479af
          .byte 0x66
          .byte 0x90
.L_447c60:

            cmp QWORD PTR [RBX+88],0
            jne .L_4479c3

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2719
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EBP,4294939648
            jmp .L_447bc0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447ca0:

            mov ESI,32
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_448042

            mov RSI,QWORD PTR [RBX+336]
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [R12],RAX
            je .L_447fdd

            mov RSI,QWORD PTR [RBX+320]
            mov RDX,QWORD PTR [RBX+336]
            mov RDI,RAX
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+336]
            mov EDX,DWORD PTR [RBX+328]
            mov ECX,EBP
            mov QWORD PTR [R12+24],0
            mov BYTE PTR [R12+16],DL
            mov QWORD PTR [R12+8],RAX
            mov EAX,EDX
            mov RDX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RDX+760]
            test RSI,RSI
            jne .L_447d33

            jmp .L_447fc0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447d30:

            mov RSI,RDX
.L_447d33:

            mov RDX,QWORD PTR [RSI+24]
            test RDX,RDX
            jne .L_447d30

            mov QWORD PTR [RSI+24],R12
            jmp .L_4477ba
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447d48:

            mov EDI,ESI
            neg EDI
            cmp ESI,2
            mov ESI,4294967295
            cmovne ESI,EDI
            sub EDX,2
            not EDX
            mov BYTE PTR [RAX+2],SIL
            mov BYTE PTR [RAX+1],DL
            jmp .L_4477e7
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447d70:

            mov RAX,QWORD PTR [RBX+288]
            sub RSP,8
.L_447d7b:

            lea R8,QWORD PTR [RIP+.L_45dee6]
            mov ESI,4
            mov RDI,RBX
            movzx R13D,R13B
            mov RAX,QWORD PTR [RAX]
            mov QWORD PTR [RDX+RCX*1+48],RAX
            mov RDX,QWORD PTR [RBX+288]
            mov ECX,1388
            mov RAX,QWORD PTR [RBX+312]
            mov RDX,QWORD PTR [RDX]
            mov QWORD PTR [RAX],RDX
            mov RDX,QWORD PTR [RBX+104]
            mov R9,QWORD PTR [RBX+312]
            mov RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RAX
.L_447dca:

            call .L_443490

            mov RAX,QWORD PTR [RBX+104]
            mov R14,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_45e740]
            mov R10,QWORD PTR [RBX+320]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,1400
            mov ESI,3
            mov RDI,RBX
            mov R9,QWORD PTR [RAX+24]
            mov QWORD PTR [RSP+24],R10
            add R9,R14
            sub R9,QWORD PTR [RAX+32]
            xor EAX,EAX
            mov DWORD PTR [RSP],0
            mov QWORD PTR [RBX+336],R9
            call .L_443270

            mov R10,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RBX+104]
            mov R8D,13
            mov RCX,R12
            lea R15,QWORD PTR [R10+R14*1]
            mov RDX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSP],R13
            lea RSI,QWORD PTR [RDI+48]
            mov R9,R10
            sub RDI,-128
            push R15
.L_447e4c:

            lea RAX,QWORD PTR [RSP+40]
            push RAX
            push R10
            push R14
            call .L_4532d0

            add RSP,48
            test EAX,EAX
            mov EBP,EAX
            jne .L_447f40

            cmp R14,QWORD PTR [RSP+16]
            je .L_447a50

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1419
            jmp .L_447959
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447e88:

            mov ECX,EDX
            neg ECX
            cmp EDX,2
            mov EDX,4294967295
            cmovne EDX,ECX
            sub EAX,2
            not EAX
            mov BYTE PTR [RSP+37],DL
            mov BYTE PTR [RSP+36],AL
            jmp .L_4478ec
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447eb0:

            mov RDI,QWORD PTR [RBX+320]
            add RBP,8
            lea RSI,QWORD PTR [RDI+4]
            add RDI,12
            call memmove@PLT

            add QWORD PTR [RBX+336],8
            test R12D,R12D
            mov RAX,QWORD PTR [RBX+320]
            je .L_447f70

            mov RDX,QWORD PTR [RBX+88]
            xor R14D,R14D
            mov EDX,DWORD PTR [RDX+720]
            mov BYTE PTR [RAX+4],DH
            mov RDX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RBX+320]
            mov EDX,DWORD PTR [RDX+720]
            mov BYTE PTR [RAX+5],DL
            mov RAX,QWORD PTR [RBX+88]
            add DWORD PTR [RAX+720],1
            mov RAX,QWORD PTR [RBX+320]
            mov WORD PTR [RAX+6],R14W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+320]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            jmp .L_447a0b
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_447f40:

            lea R8,QWORD PTR [RIP+.L_45deee]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,1413
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_447974
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_447f70:

            mov BYTE PTR [RAX+4],0
            mov RAX,QWORD PTR [RBX+320]
            xor R13D,R13D
            mov BYTE PTR [RAX+5],0
            mov RAX,QWORD PTR [RBX+320]
            mov WORD PTR [RAX+6],R13W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+320]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            jmp .L_447a22
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_447fb0:

            movzx EAX,BYTE PTR [RBX+328]
            jmp .L_4477ba
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_447fc0:

            mov QWORD PTR [RDX+760],R12
            jmp .L_4477ba
.L_447fcc:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1262
            jmp .L_447959
.L_447fdd:

            mov R9,QWORD PTR [RBX+336]
            lea R8,QWORD PTR [RIP+.L_45de91]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ECX,2486
            mov ESI,1
            call .L_443270

            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]
.L_44800d:

            lea R8,QWORD PTR [RIP+.L_45dea7]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,4294934784
            mov ECX,2775
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            mov EBP,4294934784
            jmp .L_447bc0
.L_44803d:

            call __stack_chk_fail@PLT
.L_448042:

            lea R8,QWORD PTR [RIP+.L_45de91]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,32
            mov ECX,2480
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            jmp .L_44800d
.L_44806c:

            nop
            nop
            nop
            nop
.L_448070:

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_45df83]
            push RBX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,2591
            mov ESI,2
            sub RSP,16
.L_448095:

            call .L_443270

            mov RAX,QWORD PTR [RBX+88]
            cmp BYTE PTR [RAX+756],1
            je .L_4480ee

            lea R8,QWORD PTR [RIP+.L_45df99]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2595
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [RBX+88]
            mov RDI,RBX
            mov RDX,QWORD PTR [RAX+760]
            mov QWORD PTR [RAX+768],RDX
            call .L_4463a0

            mov RAX,QWORD PTR [RBX+88]
            mov BYTE PTR [RAX+756],1
.L_4480ee:

            lea R12,QWORD PTR [RIP+.L_45e7c0]
            jmp .L_448173
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448100:

            mov RDI,QWORD PTR [RBX+320]
            mov RDX,QWORD PTR [RBP+8]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP+8]
            mov RDX,QWORD PTR [RBP+24]
            sub RSP,8
.L_44811c:

            mov R9,QWORD PTR [RBX+320]
            mov ECX,2623
            mov R8,R12
            mov ESI,3
            mov RDI,RBX
            mov QWORD PTR [RBX+336],RAX
            movzx EAX,BYTE PTR [RBP+16]
            mov DWORD PTR [RBX+328],EAX
            mov RAX,QWORD PTR [RBX+88]
            mov QWORD PTR [RAX+768],RDX
            push 12
            lea RDX,QWORD PTR [RIP+.L_45e568]
            call .L_443490

            mov RDI,RBX
            call .L_447720

            test EAX,EAX
            pop RDX
            pop RCX
.L_448169:

            jne .L_448210

            mov RAX,QWORD PTR [RBX+88]
.L_448173:

            mov RBP,QWORD PTR [RAX+768]
            test RBP,RBP
            je .L_4481b0

            cmp BYTE PTR [RBP+16],22
            mov RSI,QWORD PTR [RBP]
            jne .L_448100

            cmp BYTE PTR [RSI],20
            jne .L_448100

            mov RDI,RBX
            call .L_4463a0

            mov RSI,QWORD PTR [RBP]
            jmp .L_448100
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4481b0:

            cmp DWORD PTR [RBX+8],16
            je .L_448248

            mov BYTE PTR [RAX+756],2
            cmp QWORD PTR [RBX+136],0
            je .L_4481d9

            mov ESI,DWORD PTR [RAX+752]
            mov RDI,RBX
            call .L_446490
.L_4481d9:

            lea R8,QWORD PTR [RIP+.L_45dfae]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2640
            mov ESI,2
            call .L_443270

            add RSP,16
.L_4481ff:

            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448210:

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,2627
            mov ESI,1
            mov DWORD PTR [RSP+12],EAX
            call .L_4433c0

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_448248:

            mov BYTE PTR [RAX+756],3
            jmp .L_4481d9
.L_448251:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448260:

            push R13
            push R12
            lea R8,QWORD PTR [RIP+.L_45dfc4]
            push RBP
            push RBX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            mov R12,RSI
            sub RSP,8
.L_448280:

            mov ECX,2208
            mov ESI,2
            call .L_443270

            cmp QWORD PTR [RBX+32],0
            je .L_4485f8
.L_44829a:

            mov RDX,QWORD PTR [RBX+168]
            sub RDX,QWORD PTR [RBX+152]
            mov EAX,813
            sub RAX,RDX
            cmp RAX,R12
            jb .L_44878e

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_448470

            cmp QWORD PTR [RBX+136],0
            je .L_4487cb

            cmp QWORD PTR [RBX+144],0
            je .L_4487cb

            mov RAX,QWORD PTR [RBX+240]
            mov R9,QWORD PTR [RBX+224]
            test RAX,RAX
            je .L_44831f

            cmp RAX,R9
            ja .L_4487e6

            sub R9,RAX
            test R9,R9
            mov QWORD PTR [RBX+224],R9
            jne .L_448720
.L_448314:

            mov QWORD PTR [RBX+240],0
.L_44831f:

            sub RSP,8
.L_448323:

            lea R8,QWORD PTR [RIP+.L_45dfd3]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push R12
            xor EAX,EAX
            mov ECX,2269
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_45dfec]
            mov ECX,2276
            pop R9
            pop R10
.L_44835e:

            cmp RAX,R12
            jae .L_448444

            test RAX,RAX
            jne .L_44879f

            mov RDI,RBX
            call .L_4464e0

            test EAX,EAX
            jne .L_448630

            mov RAX,QWORD PTR [RBX+168]
            sub RAX,QWORD PTR [RBX+152]
            mov EDX,813
            sub RDX,RAX
            cmp DWORD PTR [RBX+8],16
            mov RBP,RDX
            je .L_448708

            mov RAX,QWORD PTR [RBX+88]
            mov R12D,DWORD PTR [RAX+752]
.L_4483ae:

            lea R8,QWORD PTR [RIP+.L_45dffb]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ESI,3
            mov RDI,RBX
            mov R9D,R12D
            mov ECX,2307
            call .L_443270

            mov RAX,QWORD PTR [RBX+40]
            mov RSI,QWORD PTR [RBX+168]
            mov RDI,QWORD PTR [RBX+48]
            test RAX,RAX
            je .L_448780

            mov RDX,RBP
            mov ECX,R12D
            call RAX

            movsxd RBP,EAX
.L_4483f6:

            lea R8,QWORD PTR [RIP+.L_45e011]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EBP
            mov ECX,2315
            mov ESI,2
            mov RDI,RBX
            call .L_4433c0

            test EBP,EBP
            je .L_448770

            cmp EBP,4294940672
            je .L_448630

            test EBP,EBP
            js .L_44845c

            mov QWORD PTR [RBX+224],RBP
.L_448438:

            lea R8,QWORD PTR [RIP+.L_45dfec]
            mov ECX,2403
.L_448444:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            xor EBP,EBP
            call .L_443270
.L_44845c:

            add RSP,8
.L_448460:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448470:

            sub RSP,8
            mov R9,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_45dfd3]
            push R12
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2366
            mov ESI,2
            call .L_443270

            mov RBP,QWORD PTR [RBX+224]
            pop RDI
            pop R8
.L_4484a9:

            cmp R12,RBP
            jbe .L_448438

            lea R13,QWORD PTR [RIP+.L_45dfd3]
            jmp .L_448568
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4484c0:

            mov RAX,QWORD PTR [RBX+40]
            mov RDX,R12
            mov RSI,QWORD PTR [RBX+224]
            sub RDX,RBP
            add RSI,QWORD PTR [RBX+168]
            mov RDI,QWORD PTR [RBX+48]
            test RAX,RAX
            je .L_4485e8

            mov RCX,QWORD PTR [RBX]
            mov ECX,DWORD PTR [RCX+136]
            call RAX

            movsxd RBP,EAX
.L_4484f3:

            sub RSP,8
.L_4484f7:

            mov R9,QWORD PTR [RBX+224]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push R12
            xor EAX,EAX
            mov R8,R13
            mov ECX,2390
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45e011]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2391
            mov ESI,2
            mov R9D,EBP
            mov RDI,RBX
            call .L_4433c0

            test EBP,EBP
            pop RCX
            pop RSI
            je .L_448770

            js .L_44845c

            add RBP,QWORD PTR [RBX+224]
            cmp RBP,R12
            mov QWORD PTR [RBX+224],RBP
            jae .L_448438
.L_448568:

            mov RDI,RBX
            call .L_4464e0

            test EAX,EAX
            je .L_4484c0

            sub RSP,8
            mov R9,QWORD PTR [RBX+224]
            lea R8,QWORD PTR [RIP+.L_45dfd3]
            push R12
.L_44858c:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,2390
            mov ESI,2
            call .L_443270

            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45e011]
            mov RDI,RBX
            mov R9D,4294940672
            mov ECX,2391
            mov ESI,2
            call .L_4433c0

            pop RAX
.L_4485ce:

            pop RDX
            mov EBP,4294940672
            mov EAX,EBP
            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4485e8:

            call QWORD PTR [RBX+32]

            movsxd RBP,EAX
            jmp .L_4484f3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4485f8:

            cmp QWORD PTR [RBX+40],0
            jne .L_44829a

            lea R8,QWORD PTR [RIP+.L_45e668]
            mov ECX,2213
.L_44860f:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294938368
            call .L_443270

            jmp .L_44845c
          .byte 0x90
.L_448630:

            lea R8,QWORD PTR [RIP+.L_45e031]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,2323
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            cmp QWORD PTR [RBX+136],0
            je .L_448666

            xor ESI,ESI
            mov RDI,RBX
            call .L_446490
.L_448666:

            cmp DWORD PTR [RBX+8],16
            mov EBP,4294940672
            je .L_44845c

            mov RCX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX]
            mov EAX,DWORD PTR [RCX+752]
            mov R9D,DWORD PTR [RDX+144]
            cmp EAX,R9D
            jae .L_4487f4

            lea EDX,DWORD PTR [RAX+RAX*1]
            cmp EAX,EDX
            ja .L_4486a0

            cmp R9D,EDX
            cmovae R9D,EDX
.L_4486a0:

            lea R8,QWORD PTR [RIP+.L_45e6f8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov DWORD PTR [RCX+752],R9D
            xor EAX,EAX
            mov ECX,126
            mov ESI,3
            mov RDI,RBX
            call .L_443270

            mov RDI,RBX
            call .L_448070

            test EAX,EAX
            mov EBP,EAX
            je .L_4487dc

            lea R8,QWORD PTR [RIP+.L_45dfb1]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,2336
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_44845c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448708:

            mov RAX,QWORD PTR [RBX]
            mov R12D,DWORD PTR [RAX+136]
            jmp .L_4483ae
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448720:

            lea R8,QWORD PTR [RIP+.L_45e838]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,RAX
            mov ECX,2259
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov RDI,QWORD PTR [RBX+168]
            mov RSI,QWORD PTR [RBX+240]
            mov RDX,QWORD PTR [RBX+224]
            add RSI,RDI
            call memmove@PLT

            mov R9,QWORD PTR [RBX+224]
            jmp .L_448314
          .byte 0x66
          .byte 0x90
.L_448770:

            mov EBP,4294937984
            jmp .L_44845c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448780:

            mov RDX,RBP
            call QWORD PTR [RBX+32]

            movsxd RBP,EAX
            jmp .L_4483f6
.L_44878e:

            lea R8,QWORD PTR [RIP+.L_45e7e0]
            mov ECX,2219
            jmp .L_44860f
.L_44879f:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,2287
.L_4487ab:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_443270

            jmp .L_44845c
.L_4487cb:

            lea R8,QWORD PTR [RIP+.L_45e800]
            mov ECX,2232
            jmp .L_44860f
.L_4487dc:

            mov EBP,4294940416
            jmp .L_44845c
.L_4487e6:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,2250
            jmp .L_4487ab
.L_4487f4:

            lea R8,QWORD PTR [RIP+.L_45e027]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2330
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            jmp .L_44845c
.L_44881b:

            nop
            nop
            nop
            nop
            nop
.L_448820:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,24
.L_448831:

            mov RAX,QWORD PTR [RDI]
            mov R9,QWORD PTR [RDI+216]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RDX,RDX
            and RDX,-8
            add RDX,12
            cmp R9,RDX
            jb .L_448ee0

            mov RCX,QWORD PTR [RDI+192]
            lea R8,QWORD PTR [RIP+.L_45e888]
            movzx EAX,BYTE PTR [RCX+1]
            movzx ESI,BYTE PTR [RCX+2]
            shl EAX,16
            shl ESI,8
            or EAX,ESI
            movzx ESI,BYTE PTR [RCX+3]
            or EAX,ESI
            mov ESI,3
            cdqe 
            add RAX,RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov QWORD PTR [RDI+264],RAX
            push RAX
.L_448898:

            movzx EAX,BYTE PTR [RCX]
            mov ECX,3089
            push RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            pop R13
            pop R14
.L_4488af:

            test BYTE PTR [RAX+152],2
            je .L_448980

            mov RDX,QWORD PTR [RBX+88]
            mov RCX,QWORD PTR [RBX+192]
            test RDX,RDX
            je .L_4489a8

            movzx EAX,WORD PTR [RCX+4]
            mov ESI,DWORD PTR [RDX+724]
            rol AX,8
            movzx EAX,AX
            cmp ESI,EAX
            je .L_4489a8

            mov EDX,DWORD PTR [RDX+776]
            lea R9D,DWORD PTR [RDX-1]
            cmp R9D,EAX
            jne .L_448f09

            cmp BYTE PTR [RCX],3
            je .L_448f09

            sub RSP,8
.L_448909:

            lea R8,QWORD PTR [RIP+.L_45e8c0]
            xor EAX,EAX
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,3110
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov RDI,RBX
            call .L_448070

            test EAX,EAX
            pop RBP
            pop R12
            je .L_448f41

            lea R8,QWORD PTR [RIP+.L_45dfb1]
            mov R9D,EAX
            mov DWORD PTR [RSP],EAX
            mov ECX,3114
.L_448951:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ESI,1
            call .L_4433c0

            mov EAX,DWORD PTR [RSP]
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448980:

            mov RAX,QWORD PTR [RBX+264]
            cmp QWORD PTR [RBX+216],RAX
            jb .L_448f4b

            xor EAX,EAX
.L_448996:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_4489a8:

            mov RAX,QWORD PTR [RBX+264]
            cmp QWORD PTR [RBX+216],RAX
            jb .L_4489e0

            movzx EDI,WORD PTR [RIP+.L_45ef00]
            cmp WORD PTR [RCX+6],DI
            jne .L_4489e0

            movzx EDI,BYTE PTR [RIP+.L_45ef02]
            cmp BYTE PTR [RCX+8],DIL
            je .L_448da0

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4489e0:

            lea R8,QWORD PTR [RIP+.L_45e958]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3137
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX+88]
            mov R14,QWORD PTR [RBX+264]
            test RAX,RAX
            lea R12,QWORD PTR [R14-12]
            je .L_44901a

            mov R11,QWORD PTR [RAX+744]
            test R11,R11
            je .L_448e08

            mov RAX,QWORD PTR [RBX+192]
            mov EDI,DWORD PTR [R11]
            cmp DWORD PTR [RAX],EDI
            jne .L_448dd9
.L_448a3c:

            movzx R15D,BYTE PTR [RAX+6]
            movzx EDX,BYTE PTR [RAX+7]
            add R14,R11
            movzx EBP,BYTE PTR [RAX+9]
            shl EDX,8
            shl R15D,16
            or R15D,EDX
            movzx EDX,BYTE PTR [RAX+8]
            shl EBP,16
            or R15D,EDX
            movzx EDX,BYTE PTR [RAX+10]
            movsxd R13,R15D
            shl EDX,8
            or EBP,EDX
            movzx EDX,BYTE PTR [RAX+11]
            or EBP,EDX
            movsxd RBP,EBP
            lea RAX,QWORD PTR [R13+RBP*1]
            cmp R12,RAX
            jb .L_448fda

            lea RAX,QWORD PTR [RBP+12]
            mov RDI,RAX
            mov QWORD PTR [RSP],RAX
            mov RAX,QWORD PTR [RBX+216]
            cmp RDI,RAX
            ja .L_448f77

            mov QWORD PTR [RSP+8],R11
            sub RSP,8
.L_448aa7:

            lea R8,QWORD PTR [RIP+.L_45ea38]
            push RBP
.L_448aaf:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,3008
            xor EAX,EAX
            mov R9,R13
            mov ESI,2
            mov RDI,RBX
            and R15D,7
            call .L_443270

            mov R11,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RBX+192]
            mov RDX,RBP
            lea RDI,QWORD PTR [R11+R13*1+12]
            lea RSI,QWORD PTR [RAX+12]
            call memcpy@PLT

            mov EAX,8
            mov RDI,R13
            sub EAX,R15D
            shr RDI,3
            cmp EAX,8
            pop RCX
.L_448b01:

            pop RSI
.L_448b02:

            je .L_448b73

            mov EDX,EAX
            cmp RBP,RDX
            ja .L_448b40

            test RBP,RBP
            je .L_448bc5

            add RDI,R14
            mov ESI,1
            movzx EDX,BYTE PTR [RDI]
            nop
.L_448b20:

            mov ECX,EAX
            mov R10D,ESI
            sub ECX,EBP
            shl R10D,CL
            or EDX,R10D
            sub RBP,1
            jne .L_448b20

            mov BYTE PTR [RDI],DL
            jmp .L_448bc5
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448b40:

            add RDI,R14
            add R13,RDX
            sub RBP,RDX
            movzx EDX,BYTE PTR [RDI]
            mov ESI,1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_448b58:

            sub EAX,1
            mov R10D,ESI
            mov ECX,EAX
            shl R10D,CL
            or EDX,R10D
            test EAX,EAX
            jne .L_448b58

            mov BYTE PTR [RDI],DL
            mov RDI,R13
            shr RDI,3
.L_448b73:

            mov ESI,EBP
            and ESI,7
            je .L_448bb1

            lea R10,QWORD PTR [RBP+R13*1]
            mov EAX,ESI
            mov ECX,8
            sub RBP,RAX
            sub ECX,ESI
            mov R8D,1
            shr R10,3
            lea RAX,QWORD PTR [R14+R10*1]
            movzx EDX,BYTE PTR [RAX]
            nop
            nop
            nop
            nop
.L_448ba0:

            mov ESI,R8D
            shl ESI,CL
            add ECX,1
            or EDX,ESI
            cmp ECX,8
            jne .L_448ba0

            mov BYTE PTR [RAX],DL
.L_448bb1:

            mov RDX,RBP
            add RDI,R14
            mov ESI,255
            shr RDX,3
            call memset@PLT
.L_448bc5:

            mov RCX,R12
            shr RCX,3
            test RCX,RCX
            je .L_448bfb

            cmp BYTE PTR [R14],255
            jne .L_448d58

            lea RAX,QWORD PTR [R14+1]
            lea RDX,QWORD PTR [R14+RCX*1]
            jmp .L_448bf6
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_448be8:

            add RAX,1
            cmp BYTE PTR [RAX-1],255
            jne .L_448d58
.L_448bf6:

            cmp RAX,RDX
            jne .L_448be8
.L_448bfb:

            and R12D,7
            je .L_448c33

            movzx ESI,BYTE PTR [R14+RCX*1]
            test SIL,SIL
            jns .L_448d58

            mov EDX,7
            mov ECX,6
            sub EDX,R12D
            jmp .L_448c2f
          .byte 0x66
          .byte 0x90
.L_448c20:

            mov EAX,ESI
            sar EAX,CL
            sub ECX,1
            test AL,1
            je .L_448d58
.L_448c2f:

            cmp ECX,EDX
            jne .L_448c20
.L_448c33:

            lea R8,QWORD PTR [RIP+.L_45e0de]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3023
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RSP]
            cmp RAX,QWORD PTR [RBX+216]
            jb .L_448fee

            mov RAX,QWORD PTR [RBX+224]
            mov R8,QWORD PTR [RBX+240]
            mov RDI,QWORD PTR [RBX+192]
            mov RDX,QWORD PTR [RBX+264]
            cmp RAX,R8
            jbe .L_448cde

            mov RCX,QWORD PTR [RBX+168]
            sub RAX,R8
            add RDI,RDX
            mov RDX,RAX
            mov RAX,RDI
            sub RAX,RCX
            lea RSI,QWORD PTR [RCX+R8*1]
            sub RCX,QWORD PTR [RBX+152]
            mov R8D,813
            mov QWORD PTR [RBX+240],RAX
            add RAX,RDX
            mov QWORD PTR [RBX+224],RAX
            sub R8,RCX
            cmp RAX,R8
            ja .L_448fae

            call memmove@PLT

            mov RDX,QWORD PTR [RBX+264]
            mov RDI,QWORD PTR [RBX+192]
.L_448cde:

            mov RAX,QWORD PTR [RBX+88]
            mov RSI,QWORD PTR [RAX+744]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+88]
            mov RDI,QWORD PTR [RAX+744]
            call QWORD PTR [RIP+.L_677120]

            mov RAX,QWORD PTR [RBX+88]
            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_448d0e:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45e086]
            mov RDI,RBX
            mov ECX,3067
            mov ESI,3
            mov QWORD PTR [RAX+744],0
            push QWORD PTR [RBX+264]
            call .L_443490

            pop RAX
            pop RDX
            xor EAX,EAX
            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_448d58:

            lea R8,QWORD PTR [RIP+.L_45e0c2]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3019
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov EAX,4294940416
.L_448d7f:

            mov R9D,EAX
            mov DWORD PTR [RSP],EAX
            lea R8,QWORD PTR [RIP+.L_45e0a4]
            mov ECX,3141
            jmp .L_448951
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_448da0:

            movzx EDI,WORD PTR [RCX+1]
            cmp WORD PTR [RCX+9],DI
            jne .L_4489e0

            movzx EAX,BYTE PTR [RCX+3]
            cmp BYTE PTR [RCX+11],AL
            jne .L_4489e0

            xor EAX,EAX
            test RDX,RDX
            je .L_448996

            cmp QWORD PTR [RDX+744],0
            jne .L_4489e0

            jmp .L_448996
.L_448dd9:

            lea R8,QWORD PTR [RIP+.L_45e06d]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,2975
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294938112
            jmp .L_448d7f
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_448e08:

            lea R8,QWORD PTR [RIP+.L_45e9b0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov R9,R12
            mov ECX,2945
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            cmp QWORD PTR [RBX+264],768
            ja .L_449071

            xor EBP,EBP
            mov RAX,R12
            test R12B,7
            setne BPL
            mov R13,QWORD PTR [RBX+88]
            shr RAX,3
            add RAX,R14
            mov EDI,1
            add RBP,RAX
            mov RSI,RBP
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [R13+744],RAX
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            test RAX,RAX
            je .L_449044

            mov RDX,QWORD PTR [RBX+192]
            xor R9D,R9D
            mov ECX,DWORD PTR [RDX]
            mov DWORD PTR [RAX],ECX
            movzx EDX,WORD PTR [RDX+4]
            mov WORD PTR [RAX+4],DX
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            mov WORD PTR [RAX+6],R9W
            mov BYTE PTR [RAX+8],0
            mov RAX,QWORD PTR [RBX+88]
            mov RAX,QWORD PTR [RAX+744]
            movzx EDX,WORD PTR [RAX+1]
            mov WORD PTR [RAX+9],DX
            movzx EDX,BYTE PTR [RAX+3]
            mov BYTE PTR [RAX+11],DL
            mov RAX,QWORD PTR [RBX+88]
            mov R11,QWORD PTR [RAX+744]
            mov RAX,QWORD PTR [RBX+192]
            jmp .L_448a3c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_448ee0:

            lea R8,QWORD PTR [RIP+.L_45e868]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3078
            mov ESI,1
            call .L_443270

            mov EAX,4294938112
            jmp .L_448996
.L_448f09:

            sub RSP,8
.L_448f0d:

            lea R8,QWORD PTR [RIP+.L_45e910]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RSI
            mov R9D,EAX
            mov ECX,3123
            xor EAX,EAX
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            pop R10
            mov EAX,4294940416
            pop R11
            jmp .L_448996
.L_448f41:

            mov EAX,4294940416
            jmp .L_448996
.L_448f4b:

            lea R8,QWORD PTR [RIP+.L_45eac0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3151
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294938496
            jmp .L_448996
.L_448f77:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45ea10]
            mov R9,RBP
            push RAX
            mov ECX,3003
.L_448f8b:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ESI,1
            call .L_443270

            pop RDI
            mov EAX,4294938112
            pop R8
            jmp .L_448d7f
.L_448fae:

            lea R8,QWORD PTR [RIP+.L_45ea90]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3054
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294940160
            jmp .L_448d7f
.L_448fda:

            push R12
            mov R9,R13
            push RBP
            lea R8,QWORD PTR [RIP+.L_45e9e0]
            mov ECX,2996
            jmp .L_448f8b
.L_448fee:

            lea R8,QWORD PTR [RIP+.L_45ea68]
            mov ECX,3032
.L_448ffa:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294938496
            jmp .L_448d7f
.L_44901a:

            lea R8,QWORD PTR [RIP+.L_45e980]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2933
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294938496
            jmp .L_448d7f
.L_449044:

            lea R8,QWORD PTR [RIP+.L_45e055]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,RBP
            mov ECX,2959
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294934784
            jmp .L_448d7f
.L_449071:

            lea R8,QWORD PTR [RIP+.L_45e039]
            mov ECX,2949
            jmp .L_448ffa
.L_449082:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449090:

            cmp DWORD PTR [RDI+8],16
            push RBX
            mov RBX,RDI
            je .L_4490b7

            mov RAX,QWORD PTR [RDI+88]
            test RAX,RAX
            je .L_4490d3

            mov RDX,QWORD PTR [RDI+264]
            mov RSI,QWORD PTR [RDI+192]
            call QWORD PTR [RAX+912]
.L_4490b7:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4490d3

            mov RAX,QWORD PTR [RBX+88]
            test RAX,RAX
            je .L_4490d3

            add DWORD PTR [RAX+724],1
.L_4490d3:

            pop RBX
            ret 
.L_4490d5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4490e0:

            mov RDX,QWORD PTR [RDI]
            xor EAX,EAX
            test BYTE PTR [RDX+153],2
            je .L_44915a

            mov RCX,QWORD PTR [RDI+160]
            movzx EDX,BYTE PTR [RCX+2]
            movzx ESI,BYTE PTR [RCX+3]
            shl RDX,40
            shl RSI,32
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+7]
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+4]
            shl RSI,24
            or RDX,RSI
            movzx ESI,BYTE PTR [RCX+5]
            movzx ECX,BYTE PTR [RCX+6]
            shl RSI,16
            shl RCX,8
            or RDX,RSI
            or RDX,RCX
            mov RCX,QWORD PTR [RDI+248]
            cmp RCX,RDX
            jb .L_44915a

            sub RCX,RDX
            cmp RCX,63
            ja .L_449155

            mov RAX,QWORD PTR [RDI+256]
            shr RAX,CL
            and EAX,1
            neg EAX
            ret 
.L_449155:

            mov EAX,4294967295
.L_44915a:

            ret 
.L_44915c:

            nop
            nop
            nop
            nop
.L_449160:

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+153],2
            je .L_449208

            mov RDX,QWORD PTR [RDI+160]
            movzx EAX,BYTE PTR [RDX+2]
            movzx ECX,BYTE PTR [RDX+3]
            shl RAX,40
            shl RCX,32
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+7]
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+4]
            shl RCX,24
            or RAX,RCX
            movzx ECX,BYTE PTR [RDX+5]
            movzx EDX,BYTE PTR [RDX+6]
            shl RCX,16
            shl RDX,8
            or RAX,RCX
            mov RCX,QWORD PTR [RDI+248]
            or RAX,RDX
            cmp RCX,RAX
            jae .L_4491f0

            mov RSI,RAX
            sub RSI,RCX
            cmp RSI,63
            mov RCX,RSI
            ja .L_449210

            mov RDX,QWORD PTR [RDI+256]
            mov QWORD PTR [RDI+248],RAX
            shl RDX,CL
            or RDX,1
            mov QWORD PTR [RDI+256],RDX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4491f0:

            sub RCX,RAX
            cmp RCX,63
            ja .L_449208

            mov EAX,1
            shl RAX,CL
            or QWORD PTR [RDI+256],RAX
.L_449208:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_449210:

            mov QWORD PTR [RDI+256],1
            mov QWORD PTR [RDI+248],RAX
            ret 
.L_449223:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449230:

            push RBX
            mov EDX,DWORD PTR [RDI+208]
            mov RBX,RDI
            cmp EDX,22
            je .L_4492d8
.L_449243:

            xor EAX,EAX
            cmp EDX,21
            je .L_449250
.L_44924a:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449250:

            mov RAX,QWORD PTR [RBX+192]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45eaf0]
            mov ECX,4072
            mov ESI,2
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+1]
            push RDX
            movzx R9D,BYTE PTR [RAX]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            call .L_443270

            mov RCX,QWORD PTR [RBX+192]
            pop RAX
            pop RSI
.L_44928f:

            movzx EDX,BYTE PTR [RCX]
            cmp DL,2
            je .L_4492f0

            cmp DL,1
            mov EAX,4294941056
            jne .L_44924a

            movzx EDX,BYTE PTR [RCX+1]
            test DL,DL
            je .L_44931e

            cmp DL,100
            jne .L_44924a

            lea R8,QWORD PTR [RIP+.L_45e114]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4095
            mov ESI,2
            call .L_443270

            xor EAX,EAX
            pop RBX
.L_4492d3:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4492d8:

            call .L_448820

            test EAX,EAX
            jne .L_44924a

            mov EDX,DWORD PTR [RBX+208]
            jmp .L_449243
.L_4492f0:

            movzx R9D,BYTE PTR [RCX+1]
            lea R8,QWORD PTR [RIP+.L_45eb18]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4080
            mov ESI,1
            call .L_443270

            mov EAX,4294936704
            pop RBX
.L_44931d:

            ret 
.L_44931e:

            lea R8,QWORD PTR [RIP+.L_45e0fa]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4087
            mov ESI,2
            call .L_443270

            mov EAX,4294936448
            pop RBX
            ret 
.L_449347:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449350:

            test RDI,RDI
            push R12
            push RBP
            push RBX
            je .L_449450

            cmp QWORD PTR [RDI],0
            je .L_449450

            mov EBP,EDX
            lea R8,QWORD PTR [RIP+.L_45e127]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R12D,ESI
            xor EAX,EAX
            mov ECX,4143
            mov ESI,2
            mov RBX,RDI
            call .L_443270

            sub RSP,8
            movzx EAX,BPL
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RAX
.L_44939e:

            lea R8,QWORD PTR [RIP+.L_45eb40]
            xor EAX,EAX
            movzx R9D,R12B
            mov ECX,4144
            mov ESI,3
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX+320]
            mov DWORD PTR [RBX+328],21
            mov RDI,RBX
            mov QWORD PTR [RBX+336],2
            mov BYTE PTR [RAX],R12B
            mov RAX,QWORD PTR [RBX+320]
            mov BYTE PTR [RAX+1],BPL
            call .L_447720

            mov EBP,EAX
            test EBP,EBP
            pop RAX
.L_4493f4:

            pop RDX
            jne .L_449420

            lea R8,QWORD PTR [RIP+.L_45e13d]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4156
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_449419:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
.L_449420:

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EBP
            mov RDI,RBX
            mov ECX,4153
            mov ESI,1
            call .L_4433c0

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_449450:

            mov EBP,4294938368
            jmp .L_449419
.L_449457:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_449460:

            mov EDX,40
            mov ESI,2
            jmp .L_449350
.L_44946f:

            nop
.L_449470:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            sub RSP,56
.L_449481:

            mov RSI,QWORD PTR [RDI+264]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+200]
            test RSI,RSI
            je .L_4497e0

            test RAX,RAX
            jne .L_449fcf

            mov RDX,QWORD PTR [RDI+216]
            cmp RSI,RDX
            jb .L_449f00

            mov QWORD PTR [RDI+216],0
            mov QWORD PTR [RDI+264],0
.L_4494d7:

            lea RAX,QWORD PTR [RSP+27]
            mov QWORD PTR [RSP],RAX
            lea RAX,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_449676
          .byte 0x90
.L_4494f0:

            mov RAX,QWORD PTR [RAX+16]
            cmp R8,RAX
            jb .L_44a0dc

            mov R14D,DWORD PTR [RBX+16]
            test R14D,R14D
            jle .L_449515

            add RAX,1024
            cmp R8,RAX
            ja .L_44a0ed
.L_449515:

            test BYTE PTR [RCX+152],2
            je .L_449ce0

            mov RAX,QWORD PTR [RBX+160]
            movzx EBP,WORD PTR [RAX]
            rol BP,8
            cmp ESI,20
            movzx EBP,BP
            je .L_449d20

            cmp ESI,23
            jne .L_44954b

            cmp DWORD PTR [RBX+8],16
            jne .L_44a0fe
.L_44954b:

            movzx R9D,WORD PTR [RBX+232]
            cmp EBP,R9D
            je .L_449870

            sub RSP,8
.L_449560:

            lea R8,QWORD PTR [RIP+.L_45ec18]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RBP
            xor EAX,EAX
            mov ECX,3602
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            pop R12
            pop R13
.L_44958a:

            movzx EAX,BYTE PTR [RAX+152]
            test AL,1
            je .L_449ee0

            cmp DWORD PTR [RBX+8],16
            jne .L_449ee0

            test EBP,EBP
            jne .L_449ee0

            cmp WORD PTR [RBX+232],1
            jne .L_449ee0

            cmp DWORD PTR [RBX+208],22
            jne .L_449ee0

            cmp QWORD PTR [RBX+224],13
            jbe .L_449ee0

            mov RDX,QWORD PTR [RBX+152]
            cmp BYTE PTR [RDX+13],16
            jne .L_449ee0

            lea R8,QWORD PTR [RIP+.L_45ec50]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3617
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RDI,RBX
            call .L_448070

            test EAX,EAX
            mov EBP,EAX
            je .L_449d70

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4497eb

            cmp EBP,4294940800
            je .L_4497eb

            cmp EBP,4294940928
            jne .L_449842
.L_449641:

            mov RAX,QWORD PTR [RBX+216]
            lea R8,QWORD PTR [RIP+.L_45ebc8]
            mov ECX,3911
            add RAX,13
            mov QWORD PTR [RBX+240],RAX
            nop
.L_449660:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_449676:

            mov RAX,QWORD PTR [RBX]
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,13
            call .L_448260

            test EAX,EAX
            mov EBP,EAX
            jne .L_449f98

            mov RAX,QWORD PTR [RBX]
            mov R9,QWORD PTR [RBX+168]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45e16f]
            mov ECX,3478
            mov ESI,4
            mov RDI,RBX
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            sub RSP,8
.L_4496da:

            and RAX,-8
            add RAX,13
            push RAX
            call .L_443490

            mov RDX,QWORD PTR [RBX+168]
            mov RAX,QWORD PTR [RBX+176]
            mov RCX,QWORD PTR [RBX]
            pop R15
            movzx R9D,BYTE PTR [RDX]
            pop RSI
            mov DWORD PTR [RBX+208],R9D
            movzx EAX,WORD PTR [RAX]
            rol AX,8
            test BYTE PTR [RCX+152],2
            movzx EAX,AX
            mov QWORD PTR [RBX+216],RAX
            jne .L_449cf0

            movzx R12D,BYTE PTR [RDX+1]
            movzx EBP,BYTE PTR [RDX+2]
.L_44972e:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45eb60]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            push RAX
            push RBP
            xor EAX,EAX
            push R12
            mov ESI,3
            mov ECX,3487
            mov RDI,RBX
            call .L_443270

            mov ESI,DWORD PTR [RBX+208]
            add RSP,32
.L_449762:

            lea EAX,DWORD PTR [RSI-20]
            cmp EAX,3
            ja .L_44a031

            cmp DWORD PTR [RBX+12],R12D
            jne .L_449810

            mov RCX,QWORD PTR [RBX]
            movzx EAX,BYTE PTR [RCX+149]
            cmp EAX,EBP
            jl .L_44a0ba

            mov RDX,QWORD PTR [RBX+192]
            sub RDX,QWORD PTR [RBX+152]
            mov EAX,813
            mov R8,QWORD PTR [RBX+216]
            sub RAX,RDX
            cmp R8,RAX
            ja .L_44a0cb

            mov RAX,QWORD PTR [RBX+96]
            test RAX,RAX
            jne .L_4494f0

            lea RAX,QWORD PTR [R8-1]
            cmp RAX,767
            jbe .L_449515

            lea R8,QWORD PTR [RIP+.L_45e1c5]
            mov ECX,3528
            jmp .L_44981c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4497e0:

            test RAX,RAX
            je .L_449ef0
.L_4497e9:

            xor EBP,EBP
.L_4497eb:

            mov RDI,QWORD PTR [RSP+40]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_44a1ea

            add RSP,56
.L_449805:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_449810:

            lea R8,QWORD PTR [RIP+.L_45e197]
            mov ECX,3504
.L_44981c:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44a075
.L_449842:

            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+224],0
            lea R8,QWORD PTR [RIP+.L_45ec80]
            mov ECX,3920
            jmp .L_449660
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449870:

            mov RDI,RBX
            call .L_4490e0

            test EAX,EAX
            jne .L_44a120

            mov ESI,13
.L_449885:

            add RSI,R8
            mov RDI,RBX
            call .L_448260

            test EAX,EAX
            mov EBP,EAX
            jne .L_44a092

            mov RDX,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RBX+216]
            test BYTE PTR [RDX+152],2
            je .L_449cc8

            add RAX,13
            mov QWORD PTR [RBX+240],RAX
.L_4498bc:

            sub RSP,8
.L_4498c0:

            mov R9,QWORD PTR [RBX+168]
            lea R8,QWORD PTR [RIP+.L_45e1e8]
            push RAX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,3668
            mov ESI,4
            mov RDI,RBX
            call .L_443490

            cmp QWORD PTR [RBX+96],0
            pop R10
            pop R11
.L_4498f1:

            je .L_449c5e

            lea R8,QWORD PTR [RIP+.L_45e202]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,1576
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            cmp QWORD PTR [RBX+56],0
            je .L_44a10f

            mov RAX,QWORD PTR [RBX+96]
            test RAX,RAX
            je .L_44a10f

            mov RDX,QWORD PTR [RAX+208]
            mov R9,QWORD PTR [RBX+216]
            mov RCX,QWORD PTR [RAX+16]
            test RDX,RDX
            je .L_449e40

            cmp R9,RCX
            mov EDX,DWORD PTR [RDX+4]
            jb .L_449e49

            sub EDX,6
            and EDX,4294967293
            jne .L_44a131

            mov RDX,QWORD PTR [RAX]
            mov RCX,QWORD PTR [RAX+24]
            movzx EDX,BYTE PTR [RDX+44]
            and EDX,2
            cmp DL,1
            sbb R12,R12
            and R12D,8
            add R12,8
            cmp DL,1
            sbb EDX,EDX
            sub RCX,QWORD PTR [RAX+32]
            and EDX,8
            add EDX,8
            mov RAX,RCX
            lea RCX,QWORD PTR [RCX+R12*1]
            cmp RCX,R9
            ja .L_449da0

            sub R9,RAX
            mov RAX,QWORD PTR [RBX+160]
            mov RCX,QWORD PTR [RBX]
            sub R9,R12
            mov R14,QWORD PTR [RBX+192]
            mov EDX,DWORD PTR [RBX+16]
            mov QWORD PTR [RBX+216],R9
            mov R13,R9
            mov RAX,QWORD PTR [RAX]
            test BYTE PTR [RCX+152],2
            mov QWORD PTR [RSP+27],RAX
            mov EAX,DWORD PTR [RBX+208]
            mov BYTE PTR [RSP+35],AL
            mov EAX,DWORD PTR [RBX+12]
            jne .L_449f70

            mov BYTE PTR [RSP+36],AL
            mov BYTE PTR [RSP+37],DL
.L_4499ed:

            mov RAX,R13
            mov BYTE PTR [RSP+39],R13B
            sub RSP,8
.L_4499f9:

            shr RAX,8
            lea R8,QWORD PTR [RIP+.L_45dec8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov BYTE PTR [RSP+46],AL
            push 13
.L_449a11:

            mov ECX,1654
            mov R9,QWORD PTR [RSP+16]
            mov ESI,4
            mov RDI,RBX
            lea R15,QWORD PTR [R14+R13*1]
            call .L_443490

            mov RAX,QWORD PTR [RBX+96]
            mov RSI,QWORD PTR [RBX+184]
            mov RCX,QWORD PTR [RAX+32]
            mov RDX,QWORD PTR [RAX+24]
            lea RDI,QWORD PTR [RAX+RCX*1+64]
            sub RDX,RCX
            call memcpy@PLT

            mov RAX,QWORD PTR [RBX+96]
            lea R8,QWORD PTR [RIP+.L_45dee6]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            pop RDI
.L_449a5f:

            mov ECX,1661
            mov ESI,4
            mov RDI,RBX
            push QWORD PTR [RAX+24]
.L_449a6f:

            lea R9,QWORD PTR [RAX+64]
            call .L_443490

            lea R8,QWORD PTR [RIP+.L_45e22e]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9,R15
            mov ECX,1662
            mov ESI,4
            mov RDI,RBX
            mov QWORD PTR [RSP],R12
            call .L_443490

            mov RDI,QWORD PTR [RBX+96]
            mov R9,R14
            mov R8D,13
            mov RDX,QWORD PTR [RDI+24]
            mov QWORD PTR [RSP],R12
            lea RSI,QWORD PTR [RDI+64]
            push R15
.L_449aba:

            push QWORD PTR [RSP+32]
            add RDI,208
            push R14
            push R13
            mov RCX,QWORD PTR [RSP+48]
            call .L_453330

            add RSP,48
.L_449ad7:

            test EAX,EAX
            mov R12D,EAX
            jne .L_449e60

            cmp R13,QWORD PTR [RSP+16]
            je .L_449b40

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1686
.L_449af5:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov EBP,4294939648
            call .L_443270
.L_449b10:

            lea R8,QWORD PTR [RIP+.L_45e26f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EBP
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_4497eb
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449b40:

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_449b4b:

            lea R8,QWORD PTR [RIP+.L_45e253]
            push QWORD PTR [RBX+216]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,1912
            mov ESI,4
            mov RDI,RBX
            call .L_443490

            cmp QWORD PTR [RBX+216],0
            pop RCX
            pop RSI
.L_449b7b:

            jne .L_449fc0

            mov EAX,DWORD PTR [RBX+272]
            add EAX,1
            cmp EAX,3
            mov DWORD PTR [RBX+272],EAX
            jg .L_44a142
.L_449b99:

            mov RAX,QWORD PTR [RBX]
            mov ECX,8
            movzx EAX,BYTE PTR [RAX+152]
            test AL,2
            je .L_449bd4

            jmp .L_449bf8
          .byte 0x66
          .byte 0x90
.L_449bb0:

            mov RDX,QWORD PTR [RBX+160]
            lea RSI,QWORD PTR [RCX-1]
            add RDX,RSI
            add BYTE PTR [RDX],1
            mov RAX,QWORD PTR [RBX]
            jne .L_44a080

            movzx EAX,BYTE PTR [RAX+152]
            mov RCX,RSI
.L_449bd4:

            xor EDX,EDX
            and EAX,2
            setne DL
            add RDX,RDX
            cmp RCX,RDX
            ja .L_449bb0

            xor EDX,EDX
            test AL,AL
            je .L_449bef
.L_449bea:

            mov EDX,2
.L_449bef:

            cmp RCX,RDX
            je .L_44a1be
.L_449bf8:

            lea R8,QWORD PTR [RIP+.L_45e27f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,2051
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_449c25:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            push QWORD PTR [RBX+216]
            lea R8,QWORD PTR [RIP+.L_45e28e]
            mov ECX,3695
            mov ESI,4
            mov RDI,RBX
            call .L_443490

            cmp QWORD PTR [RBX+216],768
            pop RAX
            pop RDX
.L_449c58:

            ja .L_449ff8
.L_449c5e:

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4497eb

            mov RDI,RBX
            call .L_449160

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_4497eb

            cmp QWORD PTR [RBX+88],0
            je .L_4497eb

            cmp DWORD PTR [RBX+8],16
            jne .L_4497eb

            cmp DWORD PTR [RBX+208],22
            jne .L_449cb4

            mov RAX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RAX],20
            je .L_44a169
.L_449cb4:

            mov RDI,RBX
            call .L_446650

            jmp .L_4497eb
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449cc8:

            mov QWORD PTR [RBX+224],0
            add RAX,5
            jmp .L_4498bc
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_449ce0:

            mov ESI,5
            jmp .L_449885
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_449cf0:

            movzx ECX,BYTE PTR [RDX+1]
            movzx EDX,BYTE PTR [RDX+2]
            mov EBP,256
            mov R12D,257
            sub EBP,EDX
            sub R12D,ECX
            mov EDX,2
            cmp EBP,1
            cmove EBP,EDX
            jmp .L_44972e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449d20:

            mov EAX,DWORD PTR [RBX+8]
            sub EAX,10
            and EAX,4294967293
            je .L_44954b

            lea R8,QWORD PTR [RIP+.L_45eba0]
            mov ECX,3579
.L_449d3b:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_449641
.L_449d61:

            mov EBP,4294940928
            jmp .L_4497eb
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_449d70:

            mov RAX,QWORD PTR [RBX]
            mov R8,QWORD PTR [RBX+216]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,13
            jmp .L_449885
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449da0:

            movzx EDX,DL
            lea R8,QWORD PTR [RIP+.L_45eca8]
            mov ECX,1637
            push RDX
.L_449db0:

            push RAX
.L_449db1:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            pop R8
            pop R9
.L_449dcb:

            lea R8,QWORD PTR [RIP+.L_45e26f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,4294938240
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44a1f9

            mov R12D,4294938240
.L_449e07:

            mov EAX,DWORD PTR [RBX+8]
            lea EDX,DWORD PTR [RAX-11]
            and EDX,4294967293
            je .L_449ecf

            mov QWORD PTR [RBX+240],0
            mov QWORD PTR [RBX+224],0
            lea R8,QWORD PTR [RIP+.L_45ed48]
            mov ECX,3989
            jmp .L_449660
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_449e40:

            cmp R9,RCX
            jae .L_44a131
.L_449e49:

            sub RSP,8
.L_449e4d:

            lea R8,QWORD PTR [RIP+.L_45e211]
            push RCX
            mov ECX,1589
            jmp .L_449db1
          .byte 0x90
.L_449e60:

            lea R8,QWORD PTR [RIP+.L_45e237]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,1675
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            cmp R12D,4294941952
            je .L_449dcb

            lea R8,QWORD PTR [RIP+.L_45e26f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,R12D
            mov ECX,3690
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_449ecf

            mov EAX,R12D
            and AL,127
            cmp EAX,4294938112
            je .L_449e07
.L_449ecf:

            mov EBP,R12D
            jmp .L_4497eb
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449ee0:

            test AL,2
            jne .L_449641

            jmp .L_449d61
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_449ef0:

            mov QWORD PTR [RDI+216],0
            jmp .L_4494d7
.L_449f00:

            sub RDX,RSI
            mov QWORD PTR [RDI+216],RDX
            mov RDI,QWORD PTR [RDI+192]
            add RSI,RDI
            call memmove@PLT

            mov R9,QWORD PTR [RBX+192]
            sub RSP,8
.L_449f24:

            lea R8,QWORD PTR [RIP+.L_45e153]
            push QWORD PTR [RBX+216]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ECX,3851
            mov ESI,4
            call .L_443490

            mov RAX,QWORD PTR [RBX+216]
            mov QWORD PTR [RBX+264],0
            pop RDI
            pop R8
            test RAX,RAX
            jne .L_4497e9

            jmp .L_4494d7
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_449f70:

            mov ECX,EDX
            neg ECX
            cmp EDX,2
            mov EDX,4294967295
            cmovne EDX,ECX
            sub EAX,2
            not EAX
            mov BYTE PTR [RSP+37],DL
            mov BYTE PTR [RSP+36],AL
            jmp .L_4499ed
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_449f98:

            lea R8,QWORD PTR [RIP+.L_45d1c0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,3894
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_4497eb
.L_449fc0:

            mov DWORD PTR [RBX+272],0
            jmp .L_449b99
.L_449fcf:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,3819
            mov ESI,1
            xor EAX,EAX
            mov EBP,4294939648
            call .L_443270

            jmp .L_4497eb
.L_449ff8:

            lea R8,QWORD PTR [RIP+.L_45e1c5]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3699
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44a075

            mov R12D,4294938112
            jmp .L_449e07
.L_44a031:

            lea R8,QWORD PTR [RIP+.L_45e183]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,3495
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_449350

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_449842
.L_44a075:

            mov EBP,4294938112
            jmp .L_4497eb
          .byte 0x90
.L_44a080:

            test BYTE PTR [RAX+152],2
            jne .L_449bea

            jmp .L_449bf8
.L_44a092:

            lea R8,QWORD PTR [RIP+.L_45d1c0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,3936
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_4497eb
.L_44a0ba:

            lea R8,QWORD PTR [RIP+.L_45e1ae]
            mov ECX,3510
            jmp .L_44981c
.L_44a0cb:

            lea R8,QWORD PTR [RIP+.L_45e1c5]
            mov ECX,3518
            jmp .L_44981c
.L_44a0dc:

            lea R8,QWORD PTR [RIP+.L_45e1c5]
            mov ECX,3536
            jmp .L_44981c
.L_44a0ed:

            lea R8,QWORD PTR [RIP+.L_45e1c5]
            mov ECX,3557
            jmp .L_44981c
.L_44a0fe:

            lea R8,QWORD PTR [RIP+.L_45ebf0]
            mov ECX,3593
            jmp .L_449d3b
.L_44a10f:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1580
            jmp .L_449af5
.L_44a120:

            lea R8,QWORD PTR [RIP+.L_45e1d8]
            mov ECX,3650
            jmp .L_449d3b
.L_44a131:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,1907
            jmp .L_449af5
.L_44a142:

            lea R8,QWORD PTR [RIP+.L_45ece0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2024
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            jmp .L_449dcb
.L_44a169:

            lea R8,QWORD PTR [RIP+.L_45ed68]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,4034
            mov ESI,2
            call .L_443270

            mov RDI,RBX
            call .L_448070

            test EAX,EAX
            mov EBP,EAX
            je .L_44a1ef

            lea R8,QWORD PTR [RIP+.L_45dfb1]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,4038
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_4497eb
.L_44a1be:

            lea R8,QWORD PTR [RIP+.L_45ed20]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,2046
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EBP,4294939776
            jmp .L_449b10
.L_44a1ea:

            call __stack_chk_fail@PLT
.L_44a1ef:

            mov EBP,4294940416
            jmp .L_4497eb
.L_44a1f9:

            mov EBP,4294938240
            jmp .L_4497eb
.L_44a203:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a210:

            push RBX
            lea R8,QWORD PTR [RIP+.L_45e2aa]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,3739
            sub RSP,16
.L_44a22d:

            mov ESI,2
            call .L_443270

            mov EAX,DWORD PTR [RBX+276]
            test EAX,EAX
            jne .L_44a298

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a248:

            mov RDI,RBX
            call .L_449470

            test EAX,EAX
            jne .L_44a2f0

            mov RDI,RBX
            call .L_449230

            cmp EAX,4294941056
            je .L_44a248

            cmp EAX,4294940416
            jne .L_44a328

            cmp QWORD PTR [RBX+216],0
            jne .L_44a248
.L_44a27c:

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_45e2b9]
            mov ECX,3758
            jmp .L_44a303
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a298:

            lea R8,QWORD PTR [RIP+.L_45ed90]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,3769
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov DWORD PTR [RBX+276],0
.L_44a2c4:

            lea R8,QWORD PTR [RIP+.L_45e2d7]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,3773
            mov ESI,2
            call .L_443270

            add RSP,16
.L_44a2ea:

            xor EAX,EAX
            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_44a2f0:

            lea R8,QWORD PTR [RIP+.L_45e2b9]
            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            mov ECX,3747
.L_44a303:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ESI,1
            call .L_4433c0

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a328:

            test EAX,EAX
            jne .L_44a27c

            cmp DWORD PTR [RBX+208],22
            jne .L_44a2c4

            mov RDI,RBX
            call .L_449090

            jmp .L_44a2c4
.L_44a346:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a350:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e2e6]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4176
            mov ESI,2
            sub RSP,8
            mov RAX,QWORD PTR [RDI+120]
            mov RBX,RDI
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov EAX,DWORD PTR [RBP+24]
            cmp EAX,11
            jbe .L_44a3b8
.L_44a387:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4188
            mov ESI,1
            call .L_443270

            add RSP,8
            mov EAX,4294939648
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44a3b8:

            mov EDX,2400
            bt RDX,RAX
            jae .L_44a387

            lea R8,QWORD PTR [RIP+.L_45e2fb]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4183
            mov ESI,2
            call .L_443270

            add DWORD PTR [RBX+8],1
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_44a3f2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a400:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e315]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4196
            mov ESI,2
            sub RSP,8
            mov RAX,QWORD PTR [RDI+120]
            mov RBX,RDI
            mov RBP,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov EAX,DWORD PTR [RBP+24]
            cmp EAX,11
            jbe .L_44a468
.L_44a437:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4208
            mov ESI,1
            call .L_443270

            add RSP,8
            mov EAX,4294939648
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44a468:

            mov EDX,2400
            bt RDX,RAX
            jae .L_44a437

            lea R8,QWORD PTR [RIP+.L_45e32a]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4203
            mov ESI,2
            call .L_443270

            add DWORD PTR [RBX+8],1
            add RSP,8
            xor EAX,EAX
            pop RBX
            pop RBP
            ret 
.L_44a4a2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a4b0:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e344]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_44a4c9:

            mov ECX,4719
            mov ESI,2
            call .L_443270

            mov RAX,QWORD PTR [RBX+320]
            mov DWORD PTR [RBX+328],20
            mov RDI,RBX
            mov QWORD PTR [RBX+336],1
            mov BYTE PTR [RAX],1
            add DWORD PTR [RBX+8],1
            call .L_447720

            test EAX,EAX
            mov EBP,EAX
            jne .L_44a538

            lea R8,QWORD PTR [RIP+.L_45e360]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,4733
            mov ESI,2
            call .L_443270

            add RSP,8
.L_44a52f:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44a538:

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,4729
            mov ESI,1
            call .L_4433c0

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_44a564:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a570:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e37c]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov RBX,RDI
            sub RSP,8
.L_44a589:

            mov ECX,4742
            mov ESI,2
            call .L_443270

            mov RDI,RBX
            call .L_44a210

            test EAX,EAX
            mov EBP,EAX
            jne .L_44a6c8

            cmp DWORD PTR [RBX+208],20
            jne .L_44a740

            cmp QWORD PTR [RBX+216],1
            jne .L_44a6f8

            mov RAX,QWORD PTR [RBX+192]
            cmp BYTE PTR [RAX],1
            jne .L_44a6f8

            lea R8,QWORD PTR [RIP+.L_45edd8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,4770
            mov ESI,3
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+96],RAX
            mov RAX,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+56],RAX
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44a6a0

            movzx EAX,WORD PTR [RBX+232]
            mov QWORD PTR [RBX+248],0
            mov QWORD PTR [RBX+256],0
            add EAX,1
            test AX,AX
            mov WORD PTR [RBX+232],AX
            je .L_44a77e

            cmp DWORD PTR [RBX+16],1
            mov RAX,QWORD PTR [RBX+184]
            jle .L_44a6bb
.L_44a654:

            mov RDX,QWORD PTR [RBX+120]
            add RAX,QWORD PTR [RDX+24]
            sub RAX,QWORD PTR [RDX+32]
            mov QWORD PTR [RBX+192],RAX
.L_44a667:

            add DWORD PTR [RBX+8],1
            lea R8,QWORD PTR [RIP+.L_45e3ae]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4820
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_44a68d:

            add RSP,8
.L_44a691:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a6a0:

            mov RAX,QWORD PTR [RBX+160]
            mov QWORD PTR [RAX],0
            cmp DWORD PTR [RBX+16],1
            mov RAX,QWORD PTR [RBX+184]
            jg .L_44a654
.L_44a6bb:

            mov QWORD PTR [RBX+192],RAX
            jmp .L_44a667
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44a6c8:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,4746
            mov ESI,1
            call .L_4433c0

            add RSP,8
.L_44a6ef:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44a6f8:

            lea R8,QWORD PTR [RIP+.L_45edb8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4760
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EDX,50
            mov ESI,2
            mov RDI,RBX
            call .L_449350

            mov EBP,4294935040
            jmp .L_44a68d
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a740:

            lea R8,QWORD PTR [RIP+.L_45edb8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4752
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_449350

            mov EBP,4294936832
            jmp .L_44a68d
.L_44a77e:

            lea R8,QWORD PTR [RIP+.L_45e398]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4784
            mov ESI,1
            mov RDI,RBX
            mov EBP,4294939776
            call .L_443270

            jmp .L_44a68d
.L_44a7a8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a7b0:

            cmp DWORD PTR [RSI+20],7
            je .L_44a7d0

            mov RAX,QWORD PTR [RDI+88]
            lea RDX,QWORD PTR [RIP+.L_446480]
            mov QWORD PTR [RAX+912],RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a7d0:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,4849
            mov ESI,1
            xor EAX,EAX
            jmp .L_443270
.L_44a7ef:

            nop
.L_44a7f0:

            mov RDI,QWORD PTR [RDI+88]
            xor ESI,ESI
            add RDI,800
            jmp .L_4409b0
.L_44a802:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a810:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e3ca]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            mov ECX,5190
            sub RSP,8
.L_44a82c:

            mov RAX,QWORD PTR [RDI+88]
            mov ESI,3
            mov EBP,DWORD PTR [RAX+1048]
            xor EAX,EAX
            call .L_443270

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_44a85a

            call .L_4466e0

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_44a85a:

            mov RAX,QWORD PTR [RBX]
            mov RSI,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+80],0
            mov RDX,QWORD PTR [RAX+72]
            mov QWORD PTR [RBX+72],RSI
            test RDX,RDX
            je .L_44a892

            cmp QWORD PTR [RSI+8],0
            je .L_44a892

            test EBP,EBP
            jne .L_44a892

            mov RDI,QWORD PTR [RAX+80]
            call RDX

            test EAX,EAX
            jne .L_44a920
.L_44a88f:

            mov RAX,QWORD PTR [RBX]
.L_44a892:

            test BYTE PTR [RAX+152],2
            je .L_44a8e8

            mov RAX,QWORD PTR [RBX+88]
            cmp QWORD PTR [RAX+760],0
            je .L_44a8e8

            cmp QWORD PTR [RBX+136],0
            je .L_44a8bd

            xor ESI,ESI
            mov RDI,RBX
            call .L_446490
.L_44a8bd:

            lea R8,QWORD PTR [RIP+.L_45ee10]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5237
            mov ESI,3
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            jmp .L_44a8f0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44a8e8:

            mov RDI,RBX
            call .L_446650
.L_44a8f0:

            add DWORD PTR [RBX+8],1
            add RSP,8
.L_44a8f8:

            mov RDI,RBX
            pop RBX
            pop RBP
            lea R8,QWORD PTR [RIP+.L_45e3fa]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5245
            mov ESI,3
            xor EAX,EAX
            jmp .L_443270
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44a920:

            lea R8,QWORD PTR [RIP+.L_45e3de]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5225
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            jmp .L_44a88f
.L_44a947:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44a950:

            push RBP
            push RBX
            lea R8,QWORD PTR [RIP+.L_45e40e]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_44a969:

            mov ECX,5252
            mov ESI,2
            call .L_443270

            cmp DWORD PTR [RBX+16],1
            jle .L_44ab70

            mov RAX,QWORD PTR [RBX+120]
            mov RSI,QWORD PTR [RAX+24]
            sub RSI,QWORD PTR [RAX+32]
            add RSI,QWORD PTR [RBX+312]
            mov QWORD PTR [RBX+320],RSI
.L_44a99c:

            mov RAX,QWORD PTR [RBX]
            add RSI,4
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+152]
            mov RAX,QWORD PTR [RBX+88]
            and EDX,1
            call QWORD PTR [RAX+928]

            cmp DWORD PTR [RBX+16],1
            mov DWORD PTR [RBX+328],22
            sbb RAX,RAX
            and EAX,24
            add RAX,16
            mov QWORD PTR [RBX+336],RAX
            mov RAX,QWORD PTR [RBX+320]
            mov BYTE PTR [RAX],20
            mov RAX,QWORD PTR [RBX+88]
            mov ECX,DWORD PTR [RAX+1048]
            test ECX,ECX
            je .L_44ab30

            mov RAX,QWORD PTR [RBX]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,1
            cmp AL,1
            sbb EAX,EAX
            and EAX,5
            add EAX,10
            mov DWORD PTR [RBX+8],EAX
.L_44aa0f:

            lea R8,QWORD PTR [RIP+.L_45ee38]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,5306
            mov ESI,3
            mov RDI,RBX
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            je .L_44aac8

            mov RAX,QWORD PTR [RBX+88]
            mov RDX,QWORD PTR [RBX+104]
            mov QWORD PTR [RAX+784],RDX
            mov RDX,QWORD PTR [RBX+288]
            mov RDX,QWORD PTR [RDX]
            mov QWORD PTR [RAX+792],RDX
            mov RAX,QWORD PTR [RBX+288]
            xor EDX,EDX
            mov DWORD PTR [RAX+2],0
            mov WORD PTR [RAX+6],DX
            mov RDX,QWORD PTR [RBX+288]
            add BYTE PTR [RDX+1],1
            jne .L_44aad6

            mov RDX,QWORD PTR [RBX+288]
            movzx EAX,BYTE PTR [RDX]
            add EAX,1
            test AL,AL
            mov BYTE PTR [RDX],AL
            jne .L_44aad6

            lea R8,QWORD PTR [RIP+.L_45e398]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ECX,5328
            mov ESI,1
            mov EBP,4294939776
            call .L_443270

            add RSP,8
.L_44aabe:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44aac8:

            mov RAX,QWORD PTR [RBX+288]
            mov QWORD PTR [RAX],0
.L_44aad6:

            mov RAX,QWORD PTR [RBX+120]
            mov QWORD PTR [RBX+104],RAX
            mov RAX,QWORD PTR [RBX+80]
            mov QWORD PTR [RBX+64],RAX
            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44ab88
.L_44aaf6:

            mov RDI,RBX
            call .L_447720

            test EAX,EAX
            mov EBP,EAX
            jne .L_44ab40

            lea R8,QWORD PTR [RIP+.L_45e420]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov ECX,5361
            mov ESI,2
            call .L_443270

            add RSP,8
.L_44ab2a:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0x90
.L_44ab30:

            add DWORD PTR [RBX+8],1
            jmp .L_44aa0f
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44ab40:

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,5357
            mov ESI,1
            call .L_4433c0

            add RSP,8
            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44ab70:

            mov RSI,QWORD PTR [RBX+312]
            mov QWORD PTR [RBX+320],RSI
            jmp .L_44a99c
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ab88:

            mov RDI,RBX
            call .L_447690

            jmp .L_44aaf6
.L_44ab95:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44aba0:

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_45e432]
            push RBX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            mov ECX,5378
            mov ESI,2
            sub RSP,32
.L_44abc3:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            lea RBP,QWORD PTR [RSP+12]
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            mov RSI,RBP
            mov RDI,RBX
            movzx EDX,BYTE PTR [RAX+152]
            mov RAX,QWORD PTR [RBX+88]
            and EDX,1
            xor EDX,1
            movzx EDX,DL
            call QWORD PTR [RAX+928]

            mov RDI,RBX
            call .L_44a210

            test EAX,EAX
            mov R12D,EAX
            jne .L_44ad18

            cmp DWORD PTR [RBX+208],22
            jne .L_44ad7c

            mov R9,QWORD PTR [RBX+192]
            cmp BYTE PTR [R9],20
            jne .L_44ad3d

            mov RAX,QWORD PTR [RBX]
            movzx R8D,BYTE PTR [RAX+152]
            mov EDI,R8D
            and EDI,2
            cmp DIL,1
            sbb RDX,RDX
            and RDX,-8
            add RDX,24
            cmp DIL,1
            sbb RSI,RSI
            xor ECX,ECX
            xor EAX,EAX
            and RSI,-8
            cmp QWORD PTR [RBX+264],RDX
            lea RSI,QWORD PTR [R9+RSI*1+12]
            jne .L_44ad3d

            nop
            nop
            nop
            nop
            nop
            nop
.L_44ac78:

            movzx EDX,BYTE PTR [RSI+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            add RAX,1
            or ECX,EDX
            cmp RAX,12
            jne .L_44ac78

            test CL,CL
            jne .L_44adbb

            mov RAX,QWORD PTR [RBX+88]
            mov EAX,DWORD PTR [RAX+1048]
            test EAX,EAX
            jne .L_44acf0

            add DWORD PTR [RBX+8],1
            test DIL,DIL
            jne .L_44ad08
.L_44acab:

            lea R8,QWORD PTR [RIP+.L_45e459]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5446
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_44accd:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_44adc9

            add RSP,32
.L_44ace8:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44acf0:

            and R8D,1
            cmp R8B,1
            sbb EAX,EAX
            and EAX,4294967291
            add EAX,15
            test DIL,DIL
            mov DWORD PTR [RBX+8],EAX
            je .L_44acab
.L_44ad08:

            mov RDI,RBX
            call .L_4475d0

            jmp .L_44acab
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ad18:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,5384
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_44accd
.L_44ad3d:

            lea R8,QWORD PTR [RIP+.L_45e444]
            mov ECX,5407
.L_44ad49:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            mov R12D,4294934912
            call .L_443270

            mov EDX,50
            mov ESI,2
            mov RDI,RBX
            call .L_449350

            jmp .L_44accd
.L_44ad7c:

            lea R8,QWORD PTR [RIP+.L_45e444]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,5390
            mov ESI,1
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270

            mov EDX,10
            mov ESI,2
            mov RDI,RBX
            call .L_449350

            mov R12D,4294936832
            jmp .L_44accd
.L_44adbb:

            lea R8,QWORD PTR [RIP+.L_45e444]
            mov ECX,5416
            jmp .L_44ad49
.L_44adc9:

            call __stack_chk_fail@PLT
.L_44adce:

            nop
            nop
.L_44add0:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+96],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,104
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44adf9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ae00:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+376],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,384
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44ae2f:

            nop
.L_44ae30:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
.L_44ae3c:

            mov QWORD PTR [RDI],RSI
            mov ESI,813
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+152],RAX
            je .L_44af5c

            mov ESI,813
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov QWORD PTR [RBX+280],RAX
            je .L_44af5c

            test BYTE PTR [RBP+152],2
            mov RDX,QWORD PTR [RBX+152]
            lea R8,QWORD PTR [RAX+11]
            lea RSI,QWORD PTR [RAX+13]
            lea RDI,QWORD PTR [RDX+11]
            lea RCX,QWORD PTR [RDX+13]
            jne .L_44af00

            mov QWORD PTR [RBX+288],RAX
            mov QWORD PTR [RBX+160],RDX
            add RAX,8
            add RDX,8
            mov QWORD PTR [RBX+176],RDI
            mov QWORD PTR [RBX+296],RAX
            mov QWORD PTR [RBX+304],R8
            mov QWORD PTR [RBX+312],RSI
            mov RDI,RBX
            mov QWORD PTR [RBX+320],RSI
            mov QWORD PTR [RBX+168],RDX
            mov QWORD PTR [RBX+184],RCX
            mov QWORD PTR [RBX+192],RCX
            add RSP,8
.L_44aef4:

            pop RBX
            pop RBP
            jmp .L_446700
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44af00:

            mov QWORD PTR [RBX+296],RAX
            mov QWORD PTR [RBX+168],RDX
            add RAX,3
            add RDX,3
            mov QWORD PTR [RBX+176],RDI
            mov QWORD PTR [RBX+288],RAX
            mov QWORD PTR [RBX+304],R8
            mov QWORD PTR [RBX+312],RSI
            mov RDI,RBX
            mov QWORD PTR [RBX+320],RSI
            mov QWORD PTR [RBX+160],RDX
            mov QWORD PTR [RBX+184],RCX
            mov QWORD PTR [RBX+192],RCX
            add RSP,8
.L_44af55:

            pop RBX
            pop RBP
            jmp .L_446700
.L_44af5c:

            lea R8,QWORD PTR [RIP+.L_45e46b]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            xor EAX,EAX
            mov R9D,813
            mov ECX,5638
            mov ESI,1
            call .L_443270

            mov RDI,QWORD PTR [RBX+152]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+152],0
            add RSP,8
.L_44afa0:

            mov EAX,4294934784
            pop RBX
            pop RBP
            ret 
.L_44afa8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44afb0:

            push RBX

            cmp QWORD PTR [RDI+136],0
            mov RBX,RDI
            mov DWORD PTR [RDI+8],0
            je .L_44afcc

            xor ESI,ESI
            call .L_446490
.L_44afcc:

            mov RAX,QWORD PTR [RBX+152]
            mov RCX,QWORD PTR [RBX+280]
            mov DWORD PTR [RBX+376],0
            mov QWORD PTR [RBX+200],0
            mov DWORD PTR [RBX+208],0
            mov QWORD PTR [RBX+216],0
            add RAX,13
            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RBX+224],0
            mov QWORD PTR [RBX+192],RAX
            xor EAX,EAX
            mov QWORD PTR [RBX+240],0
            mov WORD PTR [RBX+232],AX
            lea RAX,QWORD PTR [RCX+13]
            and RDI,-8
            mov QWORD PTR [RBX+248],0
            mov QWORD PTR [RBX+256],0
            mov QWORD PTR [RBX+320],RAX
            mov QWORD PTR [RBX+264],0
            xor EAX,EAX
            mov QWORD PTR [RBX+272],0
            mov DWORD PTR [RBX+328],0
            mov QWORD PTR [RBX+336],0
            mov QWORD PTR [RBX+344],0
            mov QWORD PTR [RBX+96],0
            mov QWORD PTR [RBX+104],0
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+805],0
            sub RCX,RDI
            add ECX,813
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RCX,QWORD PTR [RBX+152]
            lea RDI,QWORD PTR [RCX+8]
            mov QWORD PTR [RCX],0
            mov QWORD PTR [RCX+805],0
            and RDI,-8
            sub RCX,RDI
            add ECX,813
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            mov RDI,QWORD PTR [RBX+112]
            test RDI,RDI
            je .L_44b110

            call .L_446540

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+112],0
.L_44b110:

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_44b130

            call .L_4466e0

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+72],0
.L_44b130:

            mov RDI,QWORD PTR [RBX+360]
            call QWORD PTR [RIP+.L_677120]

            mov QWORD PTR [RBX+360],0
            mov QWORD PTR [RBX+368],0
            mov RDI,RBX
            pop RBX

            jmp .L_446700
.L_44b15c:

            nop
            nop
            nop
            nop
.L_44b160:

            mov EAX,ESI
            movzx ESI,BYTE PTR [RDI+152]
            and EAX,1
            and ESI,4294967294
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_44b179:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b180:

            and ESI,1
            lea EAX,DWORD PTR [RSI+RSI*1]
            movzx ESI,BYTE PTR [RDI+152]
            and ESI,4294967293
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_44b19a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44b1a0:

            and ESI,1
            lea EAX,DWORD PTR [RSI+RSI*1]
            movzx ESI,BYTE PTR [RDI+153]
            and ESI,4294967293
            or ESI,EAX
            mov BYTE PTR [RDI+153],SIL
            ret 
.L_44b1ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44b1c0:

            mov DWORD PTR [RDI+140],ESI
            mov DWORD PTR [RDI+144],EDX
            ret 
.L_44b1cd:

            nop
            nop
            nop
.L_44b1d0:

            and ESI,3
            lea EAX,DWORD PTR [RSI*4]
            movzx ESI,BYTE PTR [RDI+152]
            and ESI,4294967283
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_44b1ee:

            nop
            nop
.L_44b1f0:

            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+56],RDX
            ret 
.L_44b1f9:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b200:

            mov QWORD PTR [RDI+32],RSI
            mov QWORD PTR [RDI+40],RDX
            ret 
.L_44b209:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b210:

            mov QWORD PTR [RDI+48],RSI
            mov QWORD PTR [RDI+24],RDX
            mov QWORD PTR [RDI+32],RCX
            mov QWORD PTR [RDI+40],R8
            ret 
.L_44b221:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b230:

            mov DWORD PTR [RDI+136],ESI
            ret 
.L_44b237:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b240:

            test RDX,RDX
            mov QWORD PTR [RDI+128],RSI
            mov QWORD PTR [RDI+136],RDX
            mov QWORD PTR [RDI+144],RCX
            je .L_44b268

            xor ESI,ESI
            jmp .L_446490
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b268:

            ret 
.L_44b26a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44b270:

            mov QWORD PTR [RDI+80],RSI
            mov QWORD PTR [RDI+64],RDX
            mov QWORD PTR [RDI+72],RCX
            ret 
.L_44b27d:

            nop
            nop
            nop
.L_44b280:

            test RDI,RDI
            je .L_44b300

            test RSI,RSI
            je .L_44b300

            mov RDX,QWORD PTR [RDI+80]
            test RDX,RDX
            je .L_44b300

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            jne .L_44b300

            mov RCX,RDI
            sub RSP,8
.L_44b2a6:

            mov RDI,RDX
            call .L_4466e0

            movdqu XMM0,XMMWORD PTR [RSI]
            movups XMMWORD PTR [RDX],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+16]
            movups XMMWORD PTR [RDX+16],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+32]
            movups XMMWORD PTR [RDX+32],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+48]
            movups XMMWORD PTR [RDX+48],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+64]
            movups XMMWORD PTR [RDX+64],XMM0
            movdqu XMM0,XMMWORD PTR [RSI+80]
            movups XMMWORD PTR [RDX+80],XMM0
            mov RAX,QWORD PTR [RSI+96]
            mov QWORD PTR [RDX+96],RAX
            mov RAX,QWORD PTR [RCX+88]
            mov DWORD PTR [RAX+1048],1
            xor EAX,EAX
            add RSP,8
.L_44b2fe:

            ret 
          .byte 0x90
.L_44b300:

            mov EAX,4294938368
            ret 
.L_44b306:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b310:

            mov QWORD PTR [RDI],RSI
            mov QWORD PTR [RDI+8],RSI
            mov QWORD PTR [RDI+16],RSI
            mov QWORD PTR [RDI+24],RSI
            ret 
.L_44b320:

            cmp EDX,3
            je .L_44b330
.L_44b325:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b330:

            cmp ECX,3
            ja .L_44b325

            movsxd RCX,ECX
            mov QWORD PTR [RDI+RCX*8],RSI
            ret 
.L_44b33d:

            nop
            nop
            nop
.L_44b340:

            mov RAX,RDI
            mov RDI,QWORD PTR [RDI+88]
            mov R8,RSI
            mov R9,RDX
            test RDI,RDI
            je .L_44b378

            mov RAX,QWORD PTR [RAX]
            test RAX,RAX
            je .L_44b378

            movzx EAX,BYTE PTR [RAX+152]
            mov ECX,3
            mov EDX,6
            mov ESI,EAX
            and ESI,1
            jmp .L_453e80
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44b378:

            mov EAX,4294938368
            ret 
.L_44b37e:

            nop
            nop
.L_44b380:

            mov QWORD PTR [RDI+128],RSI
            ret 
.L_44b388:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b390:

            mov BYTE PTR [RDI+148],SIL
            mov BYTE PTR [RDI+149],DL
            ret 
.L_44b39e:

            nop
            nop
.L_44b3a0:

            mov BYTE PTR [RDI+150],SIL
            mov BYTE PTR [RDI+151],DL
            ret 
.L_44b3ae:

            nop
            nop
.L_44b3b0:

            and ESI,1
            lea EAX,DWORD PTR [RSI*4]
            movzx ESI,BYTE PTR [RDI+153]
            and ESI,4294967291
            or ESI,EAX
            mov BYTE PTR [RDI+153],SIL
            ret 
.L_44b3ce:

            nop
            nop
.L_44b3d0:

            cmp SIL,4
            ja .L_44b410

            lea RDX,QWORD PTR [RIP+.L_45ef10]
            movzx EAX,SIL
            cmp DWORD PTR [RDX+RAX*4],768
            ja .L_44b410

            movzx EAX,WORD PTR [RDI+152]
            and ESI,7
            shl ESI,6
            and AX,65087
            or ESI,EAX
            xor EAX,EAX
            mov WORD PTR [RDI+152],SI
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b410:

            mov EAX,4294938368
            ret 
.L_44b416:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b420:

            and ESI,3
            mov EAX,ESI
            movzx ESI,BYTE PTR [RDI+152]
            shl EAX,4
            and ESI,4294967247
            or ESI,EAX
            mov BYTE PTR [RDI+152],SIL
            ret 
.L_44b43c:

            nop
            nop
            nop
            nop
.L_44b440:

            mov QWORD PTR [RDI+112],RSI
            mov QWORD PTR [RDI+120],RDX
            ret 
.L_44b449:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b450:

            xor EAX,EAX
            cmp QWORD PTR [RDI+200],0
            je .L_44b463

            mov RAX,QWORD PTR [RDI+216]
.L_44b463:

            ret 
.L_44b465:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b470:

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_44b480

            mov EAX,DWORD PTR [RAX+96]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44b480:

            mov RDX,QWORD PTR [RDI+80]
            mov EAX,4294967295
            test RDX,RDX
            je .L_44b491

            mov EAX,DWORD PTR [RDX+96]
.L_44b491:

            ret 
.L_44b493:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b4a0:

            test RDI,RDI
            je .L_44b4b8

            mov RAX,QWORD PTR [RDI+72]
            test RAX,RAX
            je .L_44b4b8

            mov EDI,DWORD PTR [RAX]
            jmp .L_454f70
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44b4b8:

            xor EAX,EAX
            ret 
.L_44b4bb:

            nop
            nop
            nop
            nop
            nop
.L_44b4c0:

            mov RAX,QWORD PTR [RDI]
            mov EDX,DWORD PTR [RDI+16]
            test BYTE PTR [RAX+152],2
            je .L_44b4f8

            cmp EDX,2
            lea RAX,QWORD PTR [RIP+.L_45e482]
            je .L_44b525

            cmp EDX,3
            lea RAX,QWORD PTR [RIP+.L_45e48b]
            lea RDX,QWORD PTR [RIP+.L_45e494]
            cmovne RAX,RDX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b4f8:

            cmp EDX,1
            lea RAX,QWORD PTR [RIP+.L_45e483]
            je .L_44b525

            jle .L_44b530

            cmp EDX,2
            lea RAX,QWORD PTR [RIP+.L_45e4ab]
            je .L_44b525

            cmp EDX,3
            lea RAX,QWORD PTR [RIP+.L_45e48c]
            je .L_44b525
.L_44b51e:

            lea RAX,QWORD PTR [RIP+.L_45e4b3]
.L_44b525:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b530:

            test EDX,EDX
            lea RAX,QWORD PTR [RIP+.L_45e4a3]
            jne .L_44b51e

            ret 
.L_44b53d:

            nop
            nop
            nop
.L_44b540:

            mov RAX,QWORD PTR [RDI+104]
            test RAX,RAX
            je .L_44b598

            mov RCX,QWORD PTR [RAX+128]
            test RCX,RCX
            je .L_44b5b0

            mov EDX,DWORD PTR [RCX+4]
            cmp EDX,2
            je .L_44b588

            jb .L_44b5b0

            sub EDX,6
            cmp EDX,2
            ja .L_44b5b0

            mov RDX,QWORD PTR [RAX+16]
.L_44b56b:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb EAX,EAX
            and EAX,4294967288
            lea EAX,DWORD PTR [RAX+RDX*1+13]
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44b588:

            mov EDX,DWORD PTR [RCX+32]
            add RDX,QWORD PTR [RAX+40]
            jmp .L_44b56b
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b598:

            mov RAX,QWORD PTR [RDI]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb EAX,EAX
            and EAX,4294967288
            add EAX,13
            ret 
.L_44b5b0:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            sub RSP,8

            xor EAX,EAX
            mov ECX,6489
            mov ESI,1
            call .L_443270

            mov EAX,4294939648
            add RSP,8
            ret 
.L_44b5dd:

            nop
            nop
            nop
.L_44b5e0:

            mov RAX,QWORD PTR [RDI]
            mov RSI,QWORD PTR [RDI+64]
            lea RCX,QWORD PTR [RIP+.L_45ef10]
            movzx EAX,WORD PTR [RAX+152]
            shr AX,6
            and EAX,7
            test RSI,RSI
            mov EAX,DWORD PTR [RCX+RAX*4]
            je .L_44b611

            movzx ESI,BYTE PTR [RSI+100]
            mov ESI,DWORD PTR [RCX+RSI*4]
            cmp EAX,ESI
            cmova RAX,RSI
.L_44b611:

            ret 
.L_44b613:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b620:

            test RDI,RDI
            je .L_44b690

            test RSI,RSI
            je .L_44b690

            mov RDX,QWORD PTR [RDI+72]
            test RDX,RDX
            je .L_44b690

            mov RAX,QWORD PTR [RDI]
            test BYTE PTR [RAX+152],1
            jne .L_44b690

            sub RSP,8
.L_44b643:

            mov RDI,RSI
            call .L_4466e0

            movdqu XMM0,XMMWORD PTR [RDX]
            movups XMMWORD PTR [RSI],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+16]
            movups XMMWORD PTR [RSI+16],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+32]
            movups XMMWORD PTR [RSI+32],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+48]
            movups XMMWORD PTR [RSI+48],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+64]
            movups XMMWORD PTR [RSI+64],XMM0
            movdqu XMM0,XMMWORD PTR [RDX+80]
            movups XMMWORD PTR [RSI+80],XMM0
            mov RAX,QWORD PTR [RDX+96]
            mov QWORD PTR [RSI+96],RAX
            xor EAX,EAX
            add RSP,8
.L_44b68d:

            ret 
          .byte 0x66
          .byte 0x90
.L_44b690:

            mov EAX,4294938368
            ret 
.L_44b696:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b6a0:

            test RDI,RDI
            je .L_44b6e0

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_44b6e0

            push RBX
            test BYTE PTR [RAX+152],1
            mov RBX,RDI
            je .L_44b6c8
.L_44b6ba:

            mov RDI,RBX
            pop RBX
            jmp .L_444050
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44b6c8:

            call .L_455020

            mov RDX,QWORD PTR [RBX]
            test BYTE PTR [RDX+152],1
            jne .L_44b6ba

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44b6e0:

            mov EAX,4294938368
            ret 
.L_44b6e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b6f0:

            push RBP
            push RBX
            sub RSP,8
.L_44b6f6:

            test RDI,RDI
            je .L_44b769

            cmp QWORD PTR [RDI],0
            je .L_44b769

            lea R8,QWORD PTR [RIP+.L_45e4bb]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,6576
            mov ESI,2
            xor EAX,EAX
            mov RBX,RDI
            call .L_443270

            jmp .L_44b736
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44b728:

            mov RDI,RBX
            call .L_44b6a0

            test EAX,EAX
            mov EBP,EAX
            jne .L_44b73e
.L_44b736:

            cmp DWORD PTR [RBX+8],16
            jne .L_44b728

            xor EBP,EBP
.L_44b73e:

            lea R8,QWORD PTR [RIP+.L_45e4c8]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,6586
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_44b760:

            add RSP,8
.L_44b764:

            mov EAX,EBP
            pop RBX
            pop RBP
            ret 
.L_44b769:

            mov EBP,4294938368
            jmp .L_44b760
.L_44b770:

            test RDI,RDI
            je .L_44ba30

            cmp QWORD PTR [RDI],0
            je .L_44ba30

            push R12
            push RBP
            lea R8,QWORD PTR [RIP+.L_45e4d5]
            push RBX
            mov RBP,RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov RBX,RDI
            mov R12,RSI
            sub RSP,16
.L_44b7a4:

            mov ECX,6762
            mov ESI,2
            call .L_443270

            mov RAX,QWORD PTR [RBX]
            test BYTE PTR [RAX+152],2
            jne .L_44b930
.L_44b7c3:

            cmp DWORD PTR [RBX+8],16
            jne .L_44b848
.L_44b7c9:

            mov RSI,QWORD PTR [RBX+200]
            test RSI,RSI
            je .L_44b8a0
.L_44b7d9:

            cmp QWORD PTR [RBX+216],RBP
            mov RDI,R12
            cmovbe RBP,QWORD PTR [RBX+216]
            mov RDX,RBP
            call memcpy@PLT

            sub QWORD PTR [RBX+216],RBP
            jne .L_44b920

            mov QWORD PTR [RBX+200],0
            mov DWORD PTR [RBX+276],0
.L_44b815:

            lea R8,QWORD PTR [RIP+.L_45e510]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,7061
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov EAX,EBP
.L_44b839:

            add RSP,16
.L_44b83d:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44b848:

            mov RDI,RBX
            call .L_44b6f0

            cmp EAX,4294939904
            je .L_44b7c9

            test EAX,EAX
            je .L_44b7c9

            lea R8,QWORD PTR [RIP+.L_45e4dd]
            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            mov ECX,6807
.L_44b876:

            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RDI,RBX
            mov ESI,1
            call .L_4433c0

            mov EAX,DWORD PTR [RSP+12]
            add RSP,16
.L_44b892:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b8a0:

            mov RAX,QWORD PTR [RBX+144]
            test RAX,RAX
            je .L_44b8be

            mov RDI,QWORD PTR [RBX+128]
            call RAX

            cmp EAX,-1
            je .L_44b9a0
.L_44b8be:

            mov RDI,RBX
            call .L_44a210

            test EAX,EAX
            jne .L_44b970

            cmp QWORD PTR [RBX+216],0
            mov EAX,DWORD PTR [RBX+208]
            jne .L_44b9e0

            cmp EAX,23
            je .L_44b9c8

            cmp EAX,21
            jne .L_44ba59
.L_44b8f4:

            lea R8,QWORD PTR [RIP+.L_45ee70]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,7008
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            mov EAX,4294940416
            jmp .L_44b839
.L_44b920:

            add QWORD PTR [RBX+200],RBP
            jmp .L_44b815
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44b930:

            mov RDI,RBX
            call .L_447390

            test EAX,EAX
            jne .L_44b839

            mov RAX,QWORD PTR [RBX+88]
            test RAX,RAX
            je .L_44b7c3

            cmp BYTE PTR [RAX+756],1
            jne .L_44b7c3

            mov RDI,RBX
            call .L_448070

            test EAX,EAX
            je .L_44b7c3

            jmp .L_44b839
          .byte 0x90
.L_44b970:

            cmp EAX,4294937984
            jne .L_44b980
.L_44b977:

            xor EAX,EAX
            jmp .L_44b839
          .byte 0x66
          .byte 0x90
.L_44b980:

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_45d5f9]
            mov ECX,6861
            jmp .L_44b876
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44b9a0:

            cmp QWORD PTR [RBX+136],0
            je .L_44b8be

            mov RAX,QWORD PTR [RBX]
            mov RDI,RBX
            mov ESI,DWORD PTR [RAX+136]
            call .L_446490

            jmp .L_44b8be
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44b9c8:

            mov RDI,RBX
            call .L_44a210

            test EAX,EAX
            jne .L_44ba36

            mov EAX,DWORD PTR [RBX+208]
            nop
            nop
            nop
            nop
            nop
            nop
.L_44b9e0:

            cmp EAX,21
            je .L_44b8f4

            cmp EAX,23
            jne .L_44ba59

            cmp DWORD PTR [RBX+8],16
            mov RSI,QWORD PTR [RBX+192]
            mov QWORD PTR [RBX+200],RSI
            jne .L_44b7d9

            cmp QWORD PTR [RBX+136],0
            je .L_44b7d9

            xor ESI,ESI
            mov RDI,RBX
            call .L_446490

            mov RSI,QWORD PTR [RBX+200]
            jmp .L_44b7d9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ba30:

            mov EAX,4294938368
            ret 
.L_44ba36:

            cmp EAX,4294937984
            je .L_44b977

            mov R9D,EAX
            mov DWORD PTR [RSP+12],EAX
            lea R8,QWORD PTR [RIP+.L_45d5f9]
            mov ECX,6876
            jmp .L_44b876
.L_44ba59:

            lea R8,QWORD PTR [RIP+.L_45e4f3]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,7014
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EAX,4294936832
            jmp .L_44b839
.L_44ba85:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ba90:

            push R13
            push R12
            lea R8,QWORD PTR [RIP+.L_45e518]
            push RBP
            push RBX
            mov R12,RDX
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            sub RSP,8
.L_44bab0:

            mov R13,RSI
            mov ECX,7162
            mov ESI,2
            call .L_443270

            test RBX,RBX
            je .L_44bc50

            mov RDX,QWORD PTR [RBX]
            test RDX,RDX
            je .L_44bc50

            cmp DWORD PTR [RBX+8],16
            je .L_44baf2

            mov RDI,RBX
            call .L_44b6f0

            test EAX,EAX
            mov EBP,EAX
            jne .L_44bbe8

            mov RDX,QWORD PTR [RBX]
.L_44baf2:

            movzx EAX,WORD PTR [RDX+152]
            mov RDI,QWORD PTR [RBX+64]
            lea RSI,QWORD PTR [RIP+.L_45ef10]
            shr AX,6
            and EAX,7
            test RDI,RDI
            mov EAX,DWORD PTR [RSI+RAX*4]
            je .L_44bb20

            movzx EDI,BYTE PTR [RDI+100]
            mov EDI,DWORD PTR [RSI+RDI*4]
            cmp EAX,EDI
            cmova RAX,RDI
.L_44bb20:

            cmp R12,RAX
            jbe .L_44bb35

            test BYTE PTR [RDX+152],2
            jne .L_44bc5a

            mov R12,RAX
.L_44bb35:

            cmp QWORD PTR [RBX+344],0
            je .L_44bb88

            mov RDI,RBX
            call .L_447390

            test EAX,EAX
            mov EBP,EAX
            jne .L_44bc20
.L_44bb51:

            mov EBP,R12D
.L_44bb54:

            lea R8,QWORD PTR [RIP+.L_45e521]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov ECX,7190
            mov ESI,2
            mov RDI,RBX
            xor EAX,EAX
            call .L_443270
.L_44bb76:

            add RSP,8
.L_44bb7a:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44bb88:

            mov RDI,QWORD PTR [RBX+320]
            mov RDX,R12
            mov RSI,R13
            mov QWORD PTR [RBX+336],R12
            mov DWORD PTR [RBX+328],23
            call memcpy@PLT

            mov RDI,RBX
            call .L_447720

            test EAX,EAX
            mov EBP,EAX
            je .L_44bb51

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,7109
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_44bb54
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44bbe8:

            lea R8,QWORD PTR [RIP+.L_45e4dd]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov RDI,RBX
            mov ECX,7179
            mov ESI,1
            call .L_4433c0

            add RSP,8
.L_44bc0f:

            mov EAX,EBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44bc20:

            lea R8,QWORD PTR [RIP+.L_45df5a]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,7097
            mov ESI,1
            mov RDI,RBX
            call .L_4433c0

            jmp .L_44bb54
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44bc50:

            mov EBP,4294938368
            jmp .L_44bb76
.L_44bc5a:

            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_45e568]
            lea R8,QWORD PTR [RIP+.L_45ee98]
            push RAX
            mov R9,R12
            xor EAX,EAX
            mov ECX,7084
            mov ESI,1
            mov RDI,RBX
            call .L_443270

            mov EBP,4294938368
            pop RAX
            pop RDX
            jmp .L_44bb54
.L_44bc90:

            test RDI,RDI
            je .L_44bd60

            cmp QWORD PTR [RDI],0
            je .L_44bd60

            push RBX
            lea R8,QWORD PTR [RIP+.L_45e52a]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov RBX,RDI
            xor EAX,EAX
            mov ECX,7205
            sub RSP,16
.L_44bcc0:

            mov ESI,2
            call .L_443270

            cmp QWORD PTR [RBX+344],0
            jne .L_44bd50

            cmp DWORD PTR [RBX+8],16
            je .L_44bd08
.L_44bcda:

            lea R8,QWORD PTR [RIP+.L_45e540]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,7221
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            xor EAX,EAX
.L_44bcfe:

            add RSP,16
.L_44bd02:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44bd08:

            xor EDX,EDX
            mov ESI,1
            mov RDI,RBX
            call .L_449350

            test EAX,EAX
            je .L_44bcda

            lea R8,QWORD PTR [RIP+.L_45eee0]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            mov R9D,EAX
            mov ECX,7216
            mov ESI,1
            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_4433c0

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_44bcfe
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44bd50:

            add RSP,16
.L_44bd54:

            mov RDI,RBX
            pop RBX
            jmp .L_447390
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44bd60:

            mov EAX,4294938368
            ret 
.L_44bd66:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44bd70:

            test RDI,RDI
            je .L_44bd80

            jmp .L_446540
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44bd80:

            ret 
.L_44bd82:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44bd90:

            test RDI,RDI
            je .L_44bda0

            jmp .L_446590
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44bda0:

            ret 
.L_44bda2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44bdb0:

            test RDI,RDI
            je .L_44bdba

            jmp .L_4466e0
.L_44bdba:

            ret 
.L_44bdbb:

            nop
            nop
            nop
            nop
            nop
.L_44bdc0:

            test RDI,RDI
            je .L_44bf0e

            push RBX
.L_44bdca:

            lea R8,QWORD PTR [RIP+.L_45e556]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov RBX,RDI
            mov ECX,7363
            mov ESI,2
            call .L_443270

            mov RAX,QWORD PTR [RBX+280]
            test RAX,RAX
            je .L_44be19

            lea RDX,QWORD PTR [RAX+813]
            nop
.L_44be00:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_44be00

            mov RDI,QWORD PTR [RBX+280]
            call QWORD PTR [RIP+.L_677120]
.L_44be19:

            mov RAX,QWORD PTR [RBX+152]
            test RAX,RAX
            je .L_44be49

            lea RDX,QWORD PTR [RAX+813]
            nop
            nop
            nop
            nop
.L_44be30:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_44be30

            mov RDI,QWORD PTR [RBX+152]
            call QWORD PTR [RIP+.L_677120]
.L_44be49:

            mov RDI,QWORD PTR [RBX+112]
            test RDI,RDI
            je .L_44be61

            call .L_446540

            mov RDI,QWORD PTR [RBX+112]
            call QWORD PTR [RIP+.L_677120]
.L_44be61:

            mov RDI,QWORD PTR [RBX+88]
            test RDI,RDI
            je .L_44bea9

            call .L_446590

            mov RDI,QWORD PTR [RBX+120]
            test RDI,RDI
            je .L_44be7d

            call .L_446540
.L_44be7d:

            mov RDI,QWORD PTR [RBX+80]
            test RDI,RDI
            je .L_44be8b

            call .L_4466e0
.L_44be8b:

            mov RDI,QWORD PTR [RBX+88]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+120]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [RBX+80]
            call QWORD PTR [RIP+.L_677120]
.L_44bea9:

            mov RDI,QWORD PTR [RBX+72]
            test RDI,RDI
            je .L_44bec1

            call .L_4466e0

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_44bec1:

            mov RDI,QWORD PTR [RBX+360]
            call QWORD PTR [RIP+.L_677120]

            lea R8,QWORD PTR [RIP+.L_45e55e]
            lea RDX,QWORD PTR [RIP+.L_45e568]
            xor EAX,EAX
            mov ECX,7428
            mov ESI,2
            mov RDI,RBX
            call .L_443270

            lea RAX,QWORD PTR [RBX+384]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44bf00:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_44bf00

            pop RBX
.L_44bf0d:

            ret 
.L_44bf0e:

            ret 
.L_44bf10:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+152],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,160
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44bf3f:

            nop
.L_44bf40:

            movzx EAX,BYTE PTR [RDI+152]
            mov R9D,ESI
            mov R8D,EDX
            and R9D,1
            and R8D,1
            add R8D,R8D
            and EAX,4294967292
            or EAX,R9D
            or EAX,R8D
            test ESI,ESI
            mov BYTE PTR [RDI+152],AL
            jne .L_44bf77

            and EAX,4294967283
            or EAX,8
            mov BYTE PTR [RDI+152],AL
.L_44bf77:

            lea RAX,QWORD PTR [RIP+.L_446100]
            or BYTE PTR [RDI+153],6
            cmp ECX,2
            mov QWORD PTR [RDI+88],RAX
            lea RAX,QWORD PTR [RIP+.L_446110]
            mov QWORD PTR [RDI+96],RAX
            movabs RAX,257698037761000
            mov QWORD PTR [RDI+140],RAX
            je .L_44bfe8

            cmp EDX,1
            push RBX
.L_44bfae:

            mov DWORD PTR [RDI+148],16974595
            je .L_44c020
.L_44bfba:

            mov RBX,RDI
            call .L_454f30

            mov QWORD PTR [RBX+24],RAX
            mov QWORD PTR [RBX+16],RAX
            mov QWORD PTR [RBX+8],RAX
            mov QWORD PTR [RBX],RAX
            call .L_44cfe0

            mov QWORD PTR [RBX+128],RAX
            xor EAX,EAX
            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44bfe8:

            lea RAX,QWORD PTR [RIP+.L_677140]
            mov DWORD PTR [RDI+148],50529027
            mov QWORD PTR [RDI+24],RAX
            mov QWORD PTR [RDI+16],RAX
            mov QWORD PTR [RDI+8],RAX
            mov QWORD PTR [RDI],RAX
            lea RAX,QWORD PTR [RIP+.L_677130]
            mov QWORD PTR [RDI+128],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c020:

            mov BYTE PTR [RDI+151],2
            jmp .L_44bfba
.L_44c029:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c030:

            lea RAX,QWORD PTR [RDI+160]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c040:

            mov BYTE PTR [RDI],0
            add RDI,1
            cmp RDI,RAX
            jne .L_44c040

            ret 
.L_44c04e:

            nop
            nop
.L_44c050:

            cmp DIL,3
            mov EAX,5
            je .L_44c06c

            cmp DIL,4
            mov EAX,6
            mov EDX,0
            cmovne EAX,EDX
.L_44c06c:

            ret 
.L_44c06e:

            nop
            nop
.L_44c070:

            cmp EDI,5
            mov EAX,3
            je .L_44c083

            cmp EDI,6
            sete AL
            shl EAX,2
.L_44c083:

            ret 
.L_44c085:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c090:

            mov RAX,QWORD PTR [RDI]
            mov RDX,QWORD PTR [RAX+128]
            test RDX,RDX
            je .L_44c0be

            mov ECX,DWORD PTR [RDX]
            mov EAX,4294967295
            test ECX,ECX
            je .L_44c0ca

            cmp ESI,ECX
            jne .L_44c0b4

            jmp .L_44c0c8
.L_44c0b0:

            cmp EAX,ESI
            je .L_44c0c8
.L_44c0b4:

            add RDX,4
            mov EAX,DWORD PTR [RDX]
            test EAX,EAX
            jne .L_44c0b0
.L_44c0be:

            mov EAX,4294967295
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44c0c8:

            xor EAX,EAX
.L_44c0ca:

            ret 
.L_44c0cc:

            nop
            nop
            nop
            nop
.L_44c0d0:

            cmp EDX,1
            je .L_44c0e0

            mov BYTE PTR [RCX],DIL
            mov BYTE PTR [RCX+1],SIL
            ret 

            nop
            nop
            nop
.L_44c0e0:

            mov EAX,ESI
            mov EDX,4294967295
            neg EAX
            cmp ESI,2
            cmove EAX,EDX
            sub EDI,2
            not EDI
            mov BYTE PTR [RCX+1],AL
            mov BYTE PTR [RCX],DIL
            ret 
.L_44c0fb:

            nop
            nop
            nop
            nop
            nop
.L_44c100:

            cmp EDX,1
            movzx EAX,BYTE PTR [RCX]
            je .L_44c118

            mov DWORD PTR [RDI],EAX
            movzx EAX,BYTE PTR [RCX+1]
            mov DWORD PTR [RSI],EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c118:

            mov EDX,257
            sub EDX,EAX
            mov EAX,256
            mov DWORD PTR [RDI],EDX
            movzx EDX,BYTE PTR [RCX+1]
            sub EAX,EDX
            mov EDX,2
            cmp EAX,1
            cmove EAX,EDX
            mov DWORD PTR [RSI],EAX
            ret 
.L_44c13a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44c140:

            cmp DWORD PTR [RDI+16],3
            jne .L_44c160

            cmp ESI,4
            jne .L_44c160

            mov RAX,QWORD PTR [RDI+88]
            lea RDX,QWORD PTR [RIP+.L_4462c0]
            mov QWORD PTR [RAX+920],RDX
            xor EAX,EAX
            ret 
.L_44c160:

            mov EAX,4294941184
            ret 
.L_44c166:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c170:

            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBX,RSI
            mov R13D,EDX
            add RBX,24
            sub RSP,40
.L_44c187:

            mov RBP,RSP
            mov RDI,RBP
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_44f030

            lea RSI,QWORD PTR [R12+8]
            mov RDX,RBX
            mov RDI,RBP
            call .L_450190

            test EAX,EAX
            mov R12D,EAX
            jne .L_44c1db

            xor ESI,ESI
            mov RDI,RBX
            call .L_44fe30

            xor EDX,EDX
            test EAX,EAX
            mov RSI,RBP
            setne DL
            mov RDI,RBX
            and EDX,R13D
            call .L_44f3a0

            mov R12D,EAX
.L_44c1db:

            mov RDI,RBP
            call .L_44f050

            mov RCX,QWORD PTR [RSP+24]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_44c201

            add RSP,40
.L_44c1fa:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_44c201:

            call __stack_chk_fail@PLT
.L_44c206:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c210:

            push R15
            push R14
            push R13
            push R12
            mov R12D,R8D
            push RBP
            push RBX
            shr R12B,1
            and R12D,63
            mov R13,RSI
            sub RSP,24
.L_44c22b:

            test CL,CL
            mov QWORD PTR [RSP],RDI
            mov DWORD PTR [RSP+12],R8D
            mov BYTE PTR [RSP+11],CL
            je .L_44c2a0

            mov RBX,RDX
            xor EBP,EBP
            lea R14,QWORD PTR [RSI+24]
            jmp .L_44c271
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c250:

            lea RSI,QWORD PTR [RBX+24]
            mov EDX,R15D
            mov RDI,R14
            call .L_44f3a0

            test EAX,EAX
            jne .L_44c28d

            add EBP,1
            add RBX,72
            cmp BYTE PTR [RSP+11],BPL
            je .L_44c2a0
.L_44c271:

            xor R15D,R15D
            cmp R12B,BPL
            mov RSI,RBX
            sete R15B
            mov RDI,R13
            mov EDX,R15D
            call .L_44f3a0

            test EAX,EAX
            je .L_44c250
.L_44c28d:

            add RSP,24
.L_44c291:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44c2a0:

            movzx EDX,BYTE PTR [RSP+12]
            mov RDI,QWORD PTR [RSP]
            add RSP,24
            pop RBX
            mov RSI,R13
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            shr DL,7
            movzx EDX,DL
            jmp .L_44c170
.L_44c2c5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44c2d0:

            cmp QWORD PTR [RSI+200],0
            je .L_44c3c0

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_44c2e5:

            mov EDX,DWORD PTR [RDI]
            mov RBX,RDI
            test EDX,EDX
            js .L_44c390
.L_44c2f2:

            mov RDI,RBX
            call .L_44f690

            mov RCX,QWORD PTR [RBP+176]
            lea RDX,QWORD PTR [RCX+RCX*1]
            cmp RAX,RDX
            ja .L_44c39f

            mov RDI,RBX
            call QWORD PTR [RBP+200]

            add RBP,8
            test EAX,EAX
            mov R12D,EAX
            je .L_44c350
.L_44c322:

            mov EAX,R12D
            pop RBX
.L_44c326:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c330:

            xor ESI,ESI
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            je .L_44c37a

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_450110

            test EAX,EAX
            jne .L_44c3b0
.L_44c350:

            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            js .L_44c330

            mov RSI,RBP
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            js .L_44c322

            nop
            nop
            nop
.L_44c368:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_44ffd0

            test EAX,EAX
            jne .L_44c3b0
.L_44c37a:

            mov RSI,RBP
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            jns .L_44c368

            jmp .L_44c322
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c390:

            xor ESI,ESI
            call .L_44fe30

            test EAX,EAX
            je .L_44c2f2
.L_44c39f:

            mov R12D,4294946944
            jmp .L_44c322
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c3b0:

            mov R12D,EAX
            mov EAX,R12D
            pop RBX
.L_44c3b7:

            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c3c0:

            lea RDX,QWORD PTR [RSI+8]
            mov RSI,RDI
            jmp .L_451320
.L_44c3cc:

            nop
            nop
            nop
            nop
.L_44c3d0:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov R14,RDX
            push RBP
            push RBX
            sub RSP,168
.L_44c3e7:

            lea RBP,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+64]
            lea R12,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RDI,RBP
            mov QWORD PTR [RSP+16],RSI
            lea R13,QWORD PTR [RSP+128]
            call .L_44f030

            mov RDI,RBX
            call .L_44f030

            mov RDI,R12
            call .L_44f030

            mov RDI,R13
            call .L_44f030

            cmp QWORD PTR [R15+48],0
            je .L_44c670

            mov RDX,R14
            mov RSI,R14
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            je .L_44c4a8
.L_44c453:

            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_44f050

            mov RDI,RBX
            call .L_44f050

            mov RDI,R12
            call .L_44f050

            mov RDI,R13
            call .L_44f050

            mov RCX,QWORD PTR [RSP+152]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_44c862

            add RSP,168
.L_44c499:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44c4a8:

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov EDX,3
            mov RSI,RBX
            mov RDI,RBP
            call .L_4508d0

            test EAX,EAX
            jne .L_44c453

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_44c4f8
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c4e0:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            jne .L_44c453
.L_44c4f8:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_44fd30

            test EAX,EAX
            jns .L_44c4e0

            lea RAX,QWORD PTR [R15+32]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44fe30

            test EAX,EAX
            jne .L_44c7a0
.L_44c524:

            lea RAX,QWORD PTR [R14+24]
            mov RDI,R12
            mov RSI,RAX
            mov RDX,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,R12
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov ESI,1
            mov RDI,R12
            call .L_44f8b0

            test EAX,EAX
            je .L_44c584

            jmp .L_44c453
.L_44c56c:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_44ffd0

            test EAX,EAX
            jne .L_44c453
.L_44c584:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_44fd30

            test EAX,EAX
            jns .L_44c56c

            mov RDX,R12
            mov RSI,R14
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov ESI,1
            mov RDI,RBX
            call .L_44f8b0

            test EAX,EAX
            je .L_44c5ec

            jmp .L_44c453
.L_44c5d4:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_44ffd0

            test EAX,EAX
            jne .L_44c453
.L_44c5ec:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            jns .L_44c5d4

            mov RDX,R12
            mov RSI,R12
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov ESI,1
            mov RDI,R13
            call .L_44f8b0

            test EAX,EAX
            jne .L_44c453
.L_44c63b:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_44fd30

            test EAX,EAX
            js .L_44c867

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_44ffd0

            test EAX,EAX
            je .L_44c63b

            jmp .L_44c453
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44c670:

            lea RSI,QWORD PTR [R14+48]
            mov RDI,RBX
            mov RDX,RSI
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R12
            call .L_450110

            test EAX,EAX
            jne .L_44c453

            lea RAX,QWORD PTR [R15+8]
            mov QWORD PTR [RSP+8],RAX
            jmp .L_44c6d8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44c6c0:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_44ffd0

            test EAX,EAX
            jne .L_44c453
.L_44c6d8:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R12
            call .L_44fd30

            test EAX,EAX
            jns .L_44c6c0

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R13
            call .L_450190

            test EAX,EAX
            je .L_44c726

            jmp .L_44c453
.L_44c700:

            xor ESI,ESI
            mov RDI,R13
            call .L_44fe30

            test EAX,EAX
            je .L_44c731

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_450110

            test EAX,EAX
            jne .L_44c453
.L_44c726:

            mov EAX,DWORD PTR [RSP+128]
            test EAX,EAX
            js .L_44c700
.L_44c731:

            mov RDX,R13
            mov RSI,R12
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov EDX,3
            mov RSI,RBX
            mov RDI,RBP
            call .L_4508d0

            test EAX,EAX
            jne .L_44c453
.L_44c772:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_44fd30

            test EAX,EAX
            js .L_44c524

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            je .L_44c772

            jmp .L_44c453
.L_44c7a0:

            lea RSI,QWORD PTR [R14+48]
            mov RDI,RBX
            mov RDX,RSI
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,R12
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,R12
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R12
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_450110

            test EAX,EAX
            jne .L_44c453
.L_44c834:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,RBP
            call .L_44fd30

            test EAX,EAX
            js .L_44c524

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBP
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            je .L_44c834

            jmp .L_44c453
.L_44c862:

            call __stack_chk_fail@PLT
.L_44c867:

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R12
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,R12
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_450190

            test EAX,EAX
            jne .L_44c453
.L_44c8a6:

            cmp DWORD PTR [RSP+96],0
            jns .L_44c8d4

            xor ESI,ESI
            mov RDI,R12
            call .L_44fe30

            test EAX,EAX
            je .L_44c8d4

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_450110

            test EAX,EAX
            je .L_44c8a6

            jmp .L_44c453
.L_44c8d4:

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_450190

            test EAX,EAX
            jne .L_44c453
.L_44c8ea:

            cmp DWORD PTR [RSP+96],0
            jns .L_44c918

            xor ESI,ESI
            mov RDI,R12
            call .L_44fe30

            test EAX,EAX
            je .L_44c918

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R12
            mov RDI,R12
            call .L_450110

            test EAX,EAX
            je .L_44c8ea

            jmp .L_44c453
.L_44c918:

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBX
            call .L_450190

            test EAX,EAX
            jne .L_44c453
.L_44c92e:

            cmp DWORD PTR [RSP+64],0
            jns .L_44c95c

            xor ESI,ESI
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            je .L_44c95c

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_450110

            test EAX,EAX
            je .L_44c92e

            jmp .L_44c453
.L_44c95c:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,RBX
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov RDX,R13
            mov RSI,RBX
            mov RDI,RBX
            call .L_450190

            test EAX,EAX
            jne .L_44c453
.L_44c99b:

            cmp DWORD PTR [RSP+64],0
            jns .L_44c9c9

            xor ESI,ESI
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            je .L_44c9c9

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RBX
            mov RDI,RBX
            call .L_450110

            test EAX,EAX
            je .L_44c99b

            jmp .L_44c453
.L_44c9c9:

            mov RSI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [R14+48]
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44c453

            mov RSI,R15
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            jne .L_44c453

            mov ESI,1
            mov RDI,R13
            call .L_44f8b0

            test EAX,EAX
            jne .L_44c453
.L_44ca0a:

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_44fd30

            test EAX,EAX
            js .L_44ca34

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,R13
            mov RDI,R13
            call .L_44ffd0

            test EAX,EAX
            je .L_44ca0a

            jmp .L_44c453
.L_44ca34:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R12
            call .L_44f260

            test EAX,EAX
            jne .L_44c453

            mov RAX,QWORD PTR [RSP+16]
            mov RSI,RBX
            lea RDI,QWORD PTR [RAX+24]
            call .L_44f260

            test EAX,EAX
            jne .L_44c453

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R13
            add RDI,48
            call .L_44f260

            jmp .L_44c453
.L_44ca78:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ca80:

            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            mov RBP,RSI
            push RBX
            lea RBX,QWORD PTR [RSI+48]
            xor ESI,ESI
            sub RSP,80
            mov RDI,RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_44fe30

            test EAX,EAX
            jne .L_44cad8
.L_44cab4:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44cbc6

            add RSP,80
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44cad8:

            lea R12,QWORD PTR [RSP+16]
            lea R14,QWORD PTR [RSP+48]
            mov RDI,R12
            call .L_44f030

            mov RDI,R14
            call .L_44f030

            lea RDX,QWORD PTR [R13+8]
            mov RSI,RBX
            mov RDI,R12
            call .L_452400

            test EAX,EAX
            je .L_44cb20
.L_44cb05:

            mov RDI,R12
            mov DWORD PTR [RSP+12],EAX
            call .L_44f050

            mov RDI,R14
            call .L_44f050

            mov EAX,DWORD PTR [RSP+12]
            jmp .L_44cab4
          .byte 0x90
.L_44cb20:

            mov RDX,R12
            mov RSI,R12
            mov RDI,R14
            call .L_4502f0

            test EAX,EAX
            jne .L_44cb05

            mov RSI,R13
            mov RDI,R14
            call .L_44c2d0

            test EAX,EAX
            jne .L_44cb05

            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_4502f0

            test EAX,EAX
            jne .L_44cb05

            mov RSI,R13
            mov RDI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44cb05

            add RBP,24
            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_4502f0

            test EAX,EAX
            jne .L_44cb05

            mov RSI,R13
            mov RDI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44cb05

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_4502f0

            test EAX,EAX
            jne .L_44cb05

            mov RSI,R13
            mov RDI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44cb05

            mov ESI,1
            mov RDI,RBX
            call .L_44f530

            jmp .L_44cb05
.L_44cbc6:

            call __stack_chk_fail@PLT
.L_44cbcb:

            nop
            nop
            nop
            nop
            nop
.L_44cbd0:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,152
.L_44cbe4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+136],RAX
            xor EAX,EAX
            cmp RDX,1
            mov QWORD PTR [RSP+8],RDI
            jbe .L_44cf42

            mov RBP,RDX
            mov ESI,24
            mov RDI,RDX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_44cf4f

            lea RDI,QWORD PTR [RSP+48]
            mov QWORD PTR [RSP+32],RDI
            call .L_44f030

            lea RAX,QWORD PTR [RSP+80]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RSP+112]
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_44f030

            mov RAX,QWORD PTR [R14]
            mov RDI,R12
            lea RSI,QWORD PTR [RAX+48]
            call .L_44f260

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            lea R13,QWORD PTR [R12+24]
            mov EBX,1
            jmp .L_44cc83
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44cc80:

            mov RBX,RAX
.L_44cc83:

            mov RAX,QWORD PTR [R14+RBX*8]
            lea RSI,QWORD PTR [R13-24]
            mov RDI,R13
            lea RDX,QWORD PTR [RAX+48]
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            lea RAX,QWORD PTR [RBX+1]
            add R13,24
            cmp RBP,RAX
            jne .L_44cc80

            mov RAX,QWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RBP+RBP*2]
            mov RDI,QWORD PTR [RSP+32]
            shl RCX,3
            lea RDX,QWORD PTR [RAX+8]
            lea RSI,QWORD PTR [R12+RCX*1-24]
            mov QWORD PTR [RSP+40],RCX
            call .L_452400

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RCX,QWORD PTR [RSP+40]
            test RBX,RBX
            lea R14,QWORD PTR [R14+RBP*8-8]
            lea RAX,QWORD PTR [R12+RCX*1-48]
            mov QWORD PTR [RSP+40],RAX
            jne .L_44ce66
.L_44cd15:

            mov RSI,QWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44f260

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0
.L_44cd2f:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RSI
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov R13,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R13
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RDI,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RDI,QWORD PTR [R14]
            mov RSI,R13
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+16]
            lea RDI,QWORD PTR [RAX+24]
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            lea RDI,QWORD PTR [RAX+24]
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [RSP+24]
            lea RDI,QWORD PTR [RAX+24]
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            lea RDI,QWORD PTR [RAX+24]
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RSI,QWORD PTR [R13+16]
            mov RDI,QWORD PTR [R14]
            call .L_44f170

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RSI,QWORD PTR [R13+16]
            lea RDI,QWORD PTR [RAX+24]
            call .L_44f170

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            sub R14,8
            lea RDI,QWORD PTR [RAX+48]
            call .L_44f050

            sub QWORD PTR [RSP+40],24
            test RBX,RBX
            je .L_44ced0

            sub RBX,1
            test RBX,RBX
            je .L_44cd15
.L_44ce66:

            mov R13,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+40]
            mov RDI,QWORD PTR [RSP+24]
            mov RSI,R13
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RAX,QWORD PTR [R14]
            mov RSI,R13
            mov RDI,R13
            lea RDX,QWORD PTR [RAX+48]
            call .L_4502f0

            test EAX,EAX
            mov R15D,EAX
            jne .L_44ced0

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            mov R15D,EAX
            je .L_44cd2f

            nop
            nop
            nop
            nop
            nop
.L_44ced0:

            mov RDI,QWORD PTR [RSP+32]
            mov RBX,R12
            call .L_44f050

            mov RDI,QWORD PTR [RSP+24]
            call .L_44f050

            mov RDI,QWORD PTR [RSP+16]
            call .L_44f050

            lea RDX,QWORD PTR [RBP+RBP*2]
            lea RBP,QWORD PTR [R12+RDX*8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_44cf00:

            mov RDI,RBX
            add RBX,24
            call .L_44f050

            cmp RBP,RBX
            jne .L_44cf00

            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]
.L_44cf1a:

            mov RCX,QWORD PTR [RSP+136]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R15D
            jne .L_44cf57

            add RSP,152
.L_44cf37:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44cf42:

            mov RSI,QWORD PTR [RSI]
            call .L_44ca80

            mov R15D,EAX
            jmp .L_44cf1a
.L_44cf4f:

            mov R15D,4294947456
            jmp .L_44cf1a
.L_44cf57:

            call __stack_chk_fail@PLT
.L_44cf5c:

            nop
            nop
            nop
            nop
.L_44cf60:

            push RBX
            mov RBX,RDI
            call .L_44f030

            lea RDI,QWORD PTR [RBX+24]
            call .L_44f030

            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            jmp .L_44f030
.L_44cf7c:

            nop
            nop
            nop
            nop
.L_44cf80:

            mov QWORD PTR [RDI],0
            mov QWORD PTR [RDI+240],0
            mov RCX,RDI
            lea RDI,QWORD PTR [RDI+8]
            xor EAX,EAX
            and RDI,-8
            sub RCX,RDI
            add ECX,248
            shr ECX,3

            rep stosq QWORD PTR [RDI]

            ret 
.L_44cfaf:

            nop
.L_44cfb0:

            push RBX
            mov RBX,RDI
            call .L_44f050

            lea RDI,QWORD PTR [RBX+24]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            jmp .L_44f050
.L_44cfcc:

            nop
            nop
            nop
            nop
.L_44cfd0:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            ret 
.L_44cfd8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44cfe0:

            mov EAX,DWORD PTR [RIP+.L_67e5f0]
            test EAX,EAX
            jne .L_44d008

            mov DWORD PTR [RIP+.L_67e5f8],3
            mov DWORD PTR [RIP+.L_67e5fc],0
            mov DWORD PTR [RIP+.L_67e5f0],1
.L_44d008:

            lea RAX,QWORD PTR [RIP+.L_67e5f8]
            ret 
.L_44d010:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            cmp EDI,3
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_44d024:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d030:

            lea RAX,QWORD PTR [RIP+.L_676a00]
            cmp DI,23
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_44d045:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d050:

            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [RIP+.L_676a00]
            lea RDI,QWORD PTR [RIP+.L_45ef24]
            sub RSP,8
            jmp .L_44d07e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44d070:

            add RBX,16
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_44d098

            mov RDI,QWORD PTR [RBX+8]
.L_44d07e:

            mov RSI,RBP
            call strcmp@PLT

            test EAX,EAX
            jne .L_44d070

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44d098:

            xor EBX,EBX
            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_44d0a4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d0b0:

            test RDI,RDI
            je .L_44d0c0

            jmp .L_44cf60
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d0c0:

            ret 
.L_44d0c2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d0d0:

            test RDI,RDI
            je .L_44d0e0

            jmp .L_44cf80
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d0e0:

            ret 
.L_44d0e2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d0f0:

            test RDI,RDI
            je .L_44d120

            push RBX
            mov RBX,RDI
            call .L_44cf80

            lea RDI,QWORD PTR [RBX+248]
            call .L_44f030

            lea RDI,QWORD PTR [RBX+272]
            pop RBX
            jmp .L_44cf60
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44d120:

            ret 
.L_44d122:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d130:

            test RDI,RDI
            je .L_44d140

            jmp .L_44cfb0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d140:

            ret 
.L_44d142:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d150:

            test RDI,RDI
            je .L_44d206

            push R12
            push RBP
            push RBX
.L_44d15d:

            cmp DWORD PTR [RDI+192],1
            mov RBX,RDI
            jne .L_44d1d1
.L_44d169:

            mov RAX,QWORD PTR [RBX+232]
            test RAX,RAX
            je .L_44d1b6

            cmp QWORD PTR [RBX+240],0
            je .L_44d1ad

            xor EBP,EBP
            xor R12D,R12D
            nop
            nop
            nop
            nop
.L_44d188:

            mov RDI,RAX
            add RDI,RBP
            je .L_44d19c

            call .L_44cfb0

            mov RAX,QWORD PTR [RBX+232]
.L_44d19c:

            add R12,1
            add RBP,72
            cmp QWORD PTR [RBX+240],R12
            ja .L_44d188
.L_44d1ad:

            mov RDI,RAX
            call QWORD PTR [RIP+.L_677120]
.L_44d1b6:

            lea RAX,QWORD PTR [RBX+248]
            nop
            nop
            nop
.L_44d1c0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_44d1c0

            pop RBX
.L_44d1cd:

            pop RBP
            pop R12
            ret 
.L_44d1d1:

            lea RDI,QWORD PTR [RDI+8]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+32]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+56]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+80]
            call .L_44cfb0

            lea RDI,QWORD PTR [RBX+152]
            call .L_44f050

            jmp .L_44d169
.L_44d206:

            ret 
.L_44d208:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d210:

            test RDI,RDI
            je .L_44d240

            push RBX
            mov RBX,RDI
            call .L_44d150

            lea RDI,QWORD PTR [RBX+248]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+272]
            pop RBX
            jmp .L_44cfb0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44d240:

            ret 
.L_44d242:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d250:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_44f260

            test EAX,EAX
            je .L_44d270
.L_44d265:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44d270:

            lea RSI,QWORD PTR [RBP+24]
            lea RDI,QWORD PTR [RBX+24]
            call .L_44f260

            test EAX,EAX
            jne .L_44d265

            add RSP,8
            lea RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RBX+48]
            pop RBX
            pop RBP
            jmp .L_44f260
.L_44d294:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d2a0:

            mov ESI,DWORD PTR [RSI]
            jmp .L_454db0
.L_44d2a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d2b0:

            push RBX
            mov ESI,1
            mov RBX,RDI
            call .L_44f530

            test EAX,EAX
            je .L_44d2c8
.L_44d2c2:

            pop RBX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44d2c8:

            lea RDI,QWORD PTR [RBX+24]
            mov ESI,1
            call .L_44f530

            test EAX,EAX
            jne .L_44d2c2

            lea RDI,QWORD PTR [RBX+48]
            xor ESI,ESI
            pop RBX
            jmp .L_44f530
.L_44d2e6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44d2f0:

            push R15
            push R14
            mov R14,RDX
            push R13
            push R12
            mov R12,RCX
            push RBP
            push RBX
            lea RBX,QWORD PTR [RDX+48]
            sub RSP,296
.L_44d30b:

            mov QWORD PTR [RSP+48],RDI
            mov QWORD PTR [RSP+8],RSI
            mov RDI,RBX
            xor ESI,ESI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            call .L_44fe30

            test EAX,EAX
            je .L_44d480

            cmp QWORD PTR [R12+64],0
            je .L_44d376

            lea RBP,QWORD PTR [R12+48]
            xor ESI,ESI
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            je .L_44d608

            cmp QWORD PTR [R12+64],0
            je .L_44d376

            mov ESI,1
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            jne .L_44d61a
.L_44d376:

            lea RBP,QWORD PTR [RSP+64]
            lea R13,QWORD PTR [RSP+96]
            lea R15,QWORD PTR [RSP+128]
            mov RDI,RBP
            call .L_44f030

            mov RDI,R13
            call .L_44f030

            mov RDI,R15
            call .L_44f030

            lea RAX,QWORD PTR [RSP+160]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RSP+192]
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RSP+224]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RSP+256]
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_44f030

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,RBP
            call .L_4502f0

            test EAX,EAX
            je .L_44d490
.L_44d40a:

            mov RDI,RBP
            mov DWORD PTR [RSP+8],EAX
            call .L_44f050

            mov RDI,R13
            call .L_44f050

            mov RDI,R15
            call .L_44f050

            mov RDI,QWORD PTR [RSP+24]
            call .L_44f050

            mov RDI,QWORD PTR [RSP+16]
            call .L_44f050

            mov RDI,QWORD PTR [RSP+40]
            call .L_44f050

            mov RDI,QWORD PTR [RSP+32]
            call .L_44f050

            mov EAX,DWORD PTR [RSP+8]
.L_44d452:

            mov RCX,QWORD PTR [RSP+280]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44d624

            add RSP,296
.L_44d470:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d480:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R12
            call .L_44d250

            jmp .L_44d452
          .byte 0x90
.L_44d490:

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            lea RDX,QWORD PTR [R12+24]
            mov RSI,R13
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDX,R14
            mov RSI,RBP
            mov RDI,RBP
            call .L_450190

            test EAX,EAX
            jne .L_44d40a

            mov RAX,QWORD PTR [RSP+48]
            lea R12,QWORD PTR [RAX+8]
            jmp .L_44d56d
.L_44d549:

            xor ESI,ESI
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            je .L_44d574

            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBP
            call .L_450110

            test EAX,EAX
            jne .L_44d40a
.L_44d56d:

            cmp DWORD PTR [RSP+64],0
            js .L_44d549
.L_44d574:

            lea R12,QWORD PTR [R14+24]
            mov RSI,R13
            mov RDI,R13
            mov RDX,R12
            call .L_450190

            test EAX,EAX
            jne .L_44d40a

            mov RAX,QWORD PTR [RSP+48]
            add RAX,8
            mov QWORD PTR [RSP+56],RAX
            jmp .L_44d5c4
.L_44d59e:

            xor ESI,ESI
            mov RDI,R13
            call .L_44fe30

            test EAX,EAX
            je .L_44d5cb

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,R13
            mov RDI,R13
            call .L_450110

            test EAX,EAX
            jne .L_44d40a
.L_44d5c4:

            cmp DWORD PTR [RSP+96],0
            js .L_44d59e
.L_44d5cb:

            xor ESI,ESI
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            jne .L_44d629

            xor ESI,ESI
            mov RDI,R13
            call .L_44fe30

            test EAX,EAX
            jne .L_44d724

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+48]
            mov RDX,R14
            call .L_44c3d0

            jmp .L_44d40a
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44d608:

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R14
            call .L_44d250

            jmp .L_44d452
.L_44d61a:

            mov EAX,4294946944
            jmp .L_44d452
.L_44d624:

            call __stack_chk_fail@PLT
.L_44d629:

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,RBP
            mov RSI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+32]
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,RBP
            mov RSI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov EDX,2
            mov RSI,R15
            mov RDI,RBP
            call .L_4508d0

            test EAX,EAX
            jne .L_44d40a

            mov RAX,QWORD PTR [RSP+48]
            lea RBX,QWORD PTR [RAX+8]
.L_44d6fe:

            mov RSI,RBX
            mov RDI,RBP
            call .L_44fd30

            test EAX,EAX
            js .L_44d733

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            je .L_44d6fe

            jmp .L_44d40a
.L_44d724:

            mov RDI,QWORD PTR [RSP+8]
            call .L_44d2b0

            jmp .L_44d40a
.L_44d733:

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,R13
            mov RSI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+16]
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov R14,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,R14
            mov RDI,R14
            call .L_450190

            test EAX,EAX
            jne .L_44d40a
.L_44d77d:

            cmp DWORD PTR [RSP+192],0
            jns .L_44d7ac

            xor ESI,ESI
            mov RDI,R14
            call .L_44fe30

            test EAX,EAX
            je .L_44d7ac

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_450110

            test EAX,EAX
            je .L_44d77d

            jmp .L_44d40a
.L_44d7ac:

            mov R14,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R14
            mov RDI,R14
            call .L_450190

            test EAX,EAX
            jne .L_44d40a
.L_44d7c9:

            cmp DWORD PTR [RSP+192],0
            jns .L_44d7f8

            xor ESI,ESI
            mov RDI,R14
            call .L_44fe30

            test EAX,EAX
            je .L_44d7f8

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_450110

            test EAX,EAX
            je .L_44d7c9

            jmp .L_44d40a
.L_44d7f8:

            mov RDX,QWORD PTR [RSP+16]
            mov RSI,R15
            mov RDI,R15
            call .L_450190

            test EAX,EAX
            jne .L_44d40a
.L_44d810:

            cmp DWORD PTR [RSP+128],0
            jns .L_44d83f

            xor ESI,ESI
            mov RDI,R15
            call .L_44fe30

            test EAX,EAX
            je .L_44d83f

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R15
            call .L_450110

            test EAX,EAX
            je .L_44d810

            jmp .L_44d40a
.L_44d83f:

            mov RDX,R13
            mov RSI,R15
            mov RDI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,R15
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R12
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            jne .L_44d40a

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44c2d0

            test EAX,EAX
            jne .L_44d40a

            mov R12,QWORD PTR [RSP+40]
            mov RDX,QWORD PTR [RSP+24]
            mov RSI,R15
            mov RDI,R12
            call .L_450190

            test EAX,EAX
            jne .L_44d40a
.L_44d8b6:

            cmp DWORD PTR [RSP+224],0
            jns .L_44d8e5

            xor ESI,ESI
            mov RDI,R12
            call .L_44fe30

            test EAX,EAX
            je .L_44d8e5

            mov RDX,RBX
            mov RSI,R12
            mov RDI,R12
            call .L_450110

            test EAX,EAX
            je .L_44d8b6

            jmp .L_44d40a
.L_44d8e5:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_44f260

            test EAX,EAX
            jne .L_44d40a

            mov RAX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [RAX+24]
            call .L_44f260

            test EAX,EAX
            jne .L_44d40a

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+32]
            add RDI,48
            call .L_44f260

            jmp .L_44d40a
.L_44d92f:

            nop
.L_44d930:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,456
.L_44d941:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+440],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+120],0
            mov QWORD PTR [RSP],RSI
            mov QWORD PTR [RSP+8],RDX
            mov QWORD PTR [RSP+16],R8
            mov QWORD PTR [RSP+24],R9
            je .L_44da92

            lea R14,QWORD PTR [RSP+96]
            lea R15,QWORD PTR [RSP+128]
            mov RBP,RDI
            mov RBX,RCX
            mov RDI,R14
            call .L_44f030

            mov RDI,R15
            call .L_44f030

            lea RAX,QWORD PTR [RBP+152]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_44f590

            cmp EAX,1
            jne .L_44dd2f

            mov R13,QWORD PTR [RBP+184]
            mov ESI,72
            mov EDI,2
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_44dac0

            mov RSI,RBX
            mov RDI,RAX
            lea RBX,QWORD PTR [R12+72]
            call .L_44d250

            test EAX,EAX
            jne .L_44da44

            mov RSI,R12
            mov RDI,RBX
            call .L_44d250

            test EAX,EAX
            jne .L_44da44

            add R13,1
            mov RAX,R13
            shr RAX,1
            mov QWORD PTR [RSP+48],RAX
            je .L_44daf5

            xor R13D,R13D
            mov QWORD PTR [RSP+40],R12
            mov R12,R13
            mov R13,RAX
            jmp .L_44da2d
          .byte 0x90
.L_44da20:

            add R12,1
            cmp R13,R12
            je .L_44daf0
.L_44da2d:

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,RBP
            call .L_44c3d0

            test EAX,EAX
            je .L_44da20

            mov R12,QWORD PTR [RSP+40]
.L_44da44:

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_44cfb0

            test RBX,RBX
            mov EAX,DWORD PTR [RSP+8]
            je .L_44dd09
.L_44da5d:

            mov RDI,RBX
            mov DWORD PTR [RSP+8],EAX
            call .L_44cfb0

            mov EAX,DWORD PTR [RSP+8]
.L_44da6d:

            mov DWORD PTR [RSP+8],EAX
            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]

            mov RDI,R14
            call .L_44f050

            mov RDI,R15
            call .L_44f050

            mov EAX,DWORD PTR [RSP+8]
            test EAX,EAX
            jne .L_44dad5
.L_44da92:

            mov RCX,QWORD PTR [RSP+440]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44dfd7

            add RSP,456
.L_44dab0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44dac0:

            mov RDI,R14
            call .L_44f050

            mov RDI,R15
            call .L_44f050

            mov EAX,4294947456
.L_44dad5:

            mov RDI,QWORD PTR [RSP]
            test RDI,RDI
            je .L_44da92

            mov DWORD PTR [RSP],EAX
            call .L_44cfb0

            mov EAX,DWORD PTR [RSP]
            jmp .L_44da92
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44daf0:

            mov R12,QWORD PTR [RSP+40]
.L_44daf5:

            lea R13,QWORD PTR [RSP+296]
            mov EDX,1
            mov RDI,RBP
            mov QWORD PTR [RSP+296],RBX
            mov RSI,R13
            call .L_44cbd0

            test EAX,EAX
            jne .L_44da44

            mov RCX,RBX
            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBP
            call .L_44d2f0

            test EAX,EAX
            jne .L_44da44

            mov EDX,1
            mov RSI,R13
            mov RDI,RBP
            mov QWORD PTR [RSP+296],RBX
            call .L_44cbd0

            test EAX,EAX
            jne .L_44da44

            mov RDI,QWORD PTR [RSP+8]
            xor ESI,ESI
            call .L_44f590

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R14
            mov R13D,EAX
            call .L_44f260

            test EAX,EAX
            jne .L_44da44

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+32]
            mov RDI,R15
            call .L_450190

            test EAX,EAX
            jne .L_44da44

            xor EAX,EAX
            cmp R13D,1
            mov RSI,R15
            setne AL
            mov RDI,R14
            mov EDX,EAX
            mov DWORD PTR [RSP+32],EAX
            call .L_44f3a0

            test EAX,EAX
            jne .L_44da44

            mov R13,QWORD PTR [RSP+48]
            lea RAX,QWORD PTR [RSP+304]
            xor ESI,ESI
            mov ECX,129
            mov RDI,RAX
            mov QWORD PTR [RSP+56],RAX
            lea RDX,QWORD PTR [R13+1]
            call __memset_chk@PLT

            test R13,R13
            je .L_44dcb7

            mov QWORD PTR [RSP+8],R12
            mov R12,QWORD PTR [RSP+56]
            xor R8D,R8D
            mov QWORD PTR [RSP+64],RBP
            mov QWORD PTR [RSP+72],R15
            mov RBP,R13
            mov QWORD PTR [RSP+40],RBX
            mov R15,R8
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44dc10:

            mov RSI,R15
            mov RDI,R14
            call .L_44f590

            movzx EBX,BYTE PTR [R12+R15*1]
            lea RSI,QWORD PTR [RBP+R15*1]
            mov RDI,R14
            mov R13D,EAX
            call .L_44f590

            add EAX,EAX
            or EBX,EAX
            or R13D,EBX
            mov BYTE PTR [R12+R15*1],R13B
            add R15,1
            cmp RBP,R15
            jne .L_44dc10

            mov R10,QWORD PTR [RSP+56]
            mov R8,R15
            mov R12,QWORD PTR [RSP+8]
            mov RBX,QWORD PTR [RSP+40]
            mov RBP,QWORD PTR [RSP+64]
            xor ESI,ESI
            mov R15,QWORD PTR [RSP+72]
            lea RDI,QWORD PTR [R10+1]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44dc70:

            movzx R11D,BYTE PTR [RDI]
            movzx R9D,BYTE PTR [RDI-1]
            mov ECX,ESI
            add RDI,1
            xor ECX,R11D
            mov EAX,R9D
            and ESI,R11D
            mov EDX,ECX
            mov R13D,ECX
            not EDX
            and EDX,1
            imul EAX,EDX
            movzx EDX,DL
            shl EDX,7
            or EDX,R9D
            xor ECX,EAX
            mov BYTE PTR [RDI-2],DL
            and R13D,EAX
            mov BYTE PTR [RDI-1],CL
            mov RAX,RDI
            or ESI,R13D
            sub RAX,R10
            cmp RAX,R8
            jbe .L_44dc70
.L_44dcb7:

            lea RAX,QWORD PTR [RSP+224]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_44cf60

            mov RAX,QWORD PTR [RSP+48]
            mov RSI,QWORD PTR [RSP]
            mov ECX,2
            mov RDX,R12
            mov RDI,RBP
            movzx R8D,BYTE PTR [RSP+RAX*1+304]
            call .L_44c210

            test EAX,EAX
            je .L_44dd39
.L_44dcf2:

            mov RDI,QWORD PTR [RSP+40]
            mov DWORD PTR [RSP+8],EAX
            call .L_44cfb0

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_44da44
.L_44dd09:

            mov DWORD PTR [RSP+8],EAX
            mov RDI,R12
            call QWORD PTR [RIP+.L_677120]

            mov RDI,R14
            call .L_44f050

            mov RDI,R15
            call .L_44f050

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_44dad5
.L_44dd2f:

            mov EAX,4294946944
            jmp .L_44da92
.L_44dd39:

            mov RAX,QWORD PTR [RSP]
            mov ESI,1
            add RAX,48
            mov RDI,RAX
            mov QWORD PTR [RSP+64],RAX
            call .L_44f530

            test EAX,EAX
            jne .L_44dcf2

            cmp QWORD PTR [RSP+16],0
            je .L_44df20

            mov RAX,QWORD PTR [RBP+176]
            lea R13,QWORD PTR [RSP+160]
            mov RDI,R13
            add RAX,7
            shr RAX,3
            mov QWORD PTR [RSP+88],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RSP+192]
            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_44f030

            lea RAX,QWORD PTR [RBP+8]
            mov DWORD PTR [RSP+84],12
            mov QWORD PTR [RSP+72],RAX
.L_44ddad:

            mov RCX,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RSP+16]
            mov RDI,R13
            mov RSI,QWORD PTR [RSP+88]
            call .L_452390

            test EAX,EAX
            je .L_44dde1

            jmp .L_44de22
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ddd0:

            mov ESI,1
            mov RDI,R13
            call .L_44f9c0

            test EAX,EAX
            jne .L_44de22
.L_44dde1:

            mov RSI,QWORD PTR [RSP+72]
            mov RDI,R13
            call .L_44fd30

            test EAX,EAX
            jns .L_44ddd0

            sub DWORD PTR [RSP+84],1
            je .L_44dfdc

            mov ESI,1
            mov RDI,R13
            call .L_44fe30

            test EAX,EAX
            jle .L_44ddad

            mov RDI,QWORD PTR [RSP+64]
            mov RDX,R13
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            je .L_44de41
.L_44de22:

            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            call .L_44f050

            mov RDI,QWORD PTR [RSP+8]
            call .L_44f050

            mov EAX,DWORD PTR [RSP+16]
            jmp .L_44dcf2
.L_44de41:

            mov RDI,QWORD PTR [RSP+64]
            mov RSI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,R13
            mov RSI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP]
            mov RDX,QWORD PTR [RSP+8]
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP]
            mov RSI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP+8]
            mov RDX,R13
            mov RSI,RDI
            call .L_4502f0

            test EAX,EAX
            jne .L_44de22

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,RBP
            call .L_44c2d0

            test EAX,EAX
            jne .L_44de22

            mov RAX,QWORD PTR [RSP]
            mov RDX,QWORD PTR [RSP+8]
            lea RCX,QWORD PTR [RAX+24]
            mov RSI,RCX
            mov RDI,RCX
            mov QWORD PTR [RSP+16],RCX
            call .L_4502f0

            test EAX,EAX
            mov RCX,QWORD PTR [RSP+16]
            jne .L_44de22

            mov RDI,RCX
            mov RSI,RBP
            call .L_44c2d0

            mov RDI,R13
            mov DWORD PTR [RSP+16],EAX
            call .L_44f050

            mov RDI,QWORD PTR [RSP+8]
            call .L_44f050

            mov EAX,DWORD PTR [RSP+16]
            test EAX,EAX
            jne .L_44dcf2
.L_44df20:

            mov R13,QWORD PTR [RSP+48]
            jmp .L_44df81
.L_44df27:

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            mov RDX,RSI
            call .L_44c3d0

            test EAX,EAX
            jne .L_44dcf2

            mov RAX,QWORD PTR [RSP+56]
            mov RSI,QWORD PTR [RSP+40]
            mov ECX,2
            mov RDX,R12
            mov RDI,RBP
            movzx R8D,BYTE PTR [RAX+R13*1]
            call .L_44c210

            test EAX,EAX
            jne .L_44dcf2

            mov RSI,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RSP+40]
            mov RDI,RBP
            mov RDX,RSI
            call .L_44d2f0

            test EAX,EAX
            jne .L_44dcf2
.L_44df81:

            sub R13,1
            cmp R13,-1
            jne .L_44df27

            mov RDI,QWORD PTR [RSP+40]
            call .L_44cfb0

            mov EDX,DWORD PTR [RSP+32]
            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            call .L_44c170

            test EAX,EAX
            jne .L_44da44

            mov RSI,QWORD PTR [RSP]
            mov RDI,RBP
            call .L_44ca80

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_44cfb0

            test RBX,RBX
            mov EAX,DWORD PTR [RSP+8]
            jne .L_44da5d

            jmp .L_44da6d
.L_44dfd7:

            call __stack_chk_fail@PLT
.L_44dfdc:

            mov EAX,4294947584
            jmp .L_44dcf2
.L_44dfe6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44dff0:

            sub RSP,8
            add RDI,48
            xor ESI,ESI
            call .L_44fe30

            test EAX,EAX
            sete AL
            add RSP,8
            movzx EAX,AL
            ret 
.L_44e00c:

            nop
            nop
            nop
            nop
.L_44e010:

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            call .L_44fd30

            test EAX,EAX
            jne .L_44e050

            lea RSI,QWORD PTR [RBP+24]
            lea RDI,QWORD PTR [RBX+24]
            call .L_44fd30

            test EAX,EAX
            jne .L_44e050

            lea RSI,QWORD PTR [RBP+48]
            lea RDI,QWORD PTR [RBX+48]
            call .L_44fd30

            test EAX,EAX
            jne .L_44e050
.L_44e047:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0x90
.L_44e050:

            mov EAX,4294946944
            jmp .L_44e047
.L_44e057:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e060:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            call .L_450560

            test EAX,EAX
            je .L_44e080
.L_44e075:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e080:

            lea RDI,QWORD PTR [RBX+24]
            mov RDX,R12
            mov ESI,EBP
            call .L_450560

            test EAX,EAX
            jne .L_44e075

            lea RDI,QWORD PTR [RBX+48]
            mov ESI,1
            pop RBX
            pop RBP
            pop R12
            jmp .L_44f530
.L_44e0a4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e0b0:

            cmp EDX,1
            ja .L_44e1a0

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            lea RDI,QWORD PTR [RSI+48]
            mov RBX,RSI
            xor ESI,ESI
            mov R14,R9
            sub RSP,8
            mov R12,R8
            mov EBP,EDX
            call .L_44fe30

            test EAX,EAX
            jne .L_44e110

            test R14,R14
            je .L_44e1b0

            mov BYTE PTR [R12],0
            mov QWORD PTR [R15],1
.L_44e0fc:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e110:

            lea RDI,QWORD PTR [R13+8]
            call .L_44f710

            test EBP,EBP
            mov R13,RAX
            je .L_44e160

            lea RAX,QWORD PTR [RAX+1]
            cmp R14,RAX
            mov QWORD PTR [R15],RAX
            jb .L_44e1b0

            lea RDI,QWORD PTR [RBX+24]
            xor ESI,ESI
            call .L_44f590

            lea RSI,QWORD PTR [R12+1]
            add EAX,2
            mov RDX,R13
            mov BYTE PTR [R12],AL
            mov RDI,RBX
.L_44e14d:

            add RSP,8
.L_44e151:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_44f820
.L_44e160:

            lea RAX,QWORD PTR [RAX+RAX*1+1]
            cmp R14,RAX
            mov QWORD PTR [R15],RAX
            jb .L_44e1b0

            lea RSI,QWORD PTR [R12+1]
            mov BYTE PTR [R12],4
            mov RDX,R13
            mov RDI,RBX
            call .L_44f820

            test EAX,EAX
            jne .L_44e0fc

            lea RSI,QWORD PTR [R12+R13*1+1]
            lea RDI,QWORD PTR [RBX+24]
            mov RDX,R13
            jmp .L_44e14d
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e1a0:

            mov EAX,4294946944
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e1b0:

            mov EAX,4294947072
            jmp .L_44e0fc
.L_44e1ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44e1c0:

            test RCX,RCX
            je .L_44e260

            cmp BYTE PTR [RDX],0
            jne .L_44e1e0

            cmp RCX,1
            jne .L_44e260

            mov RDI,RSI
            jmp .L_44d2b0
.L_44e1e0:

            push R13
            push R12
            add RDI,8
            push RBP
            push RBX
            mov RBP,RDX
            mov RBX,RCX
            mov R12,RSI
            sub RSP,8
            call .L_44f710

            cmp BYTE PTR [RBP],4
            mov R13,RAX
            jne .L_44e280

            lea RAX,QWORD PTR [RAX+RAX*1+1]
            cmp RBX,RAX
            jne .L_44e270

            lea RSI,QWORD PTR [RBP+1]
            mov RDX,R13
            mov RDI,R12
            call .L_44f720

            test EAX,EAX
            je .L_44e230
.L_44e222:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e230:

            lea RSI,QWORD PTR [RBP+R13*1+1]
            lea RDI,QWORD PTR [R12+24]
            mov RDX,R13
            call .L_44f720

            test EAX,EAX
            jne .L_44e222

            add RSP,8
            lea RDI,QWORD PTR [R12+48]
            mov ESI,1
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_44f530
          .byte 0x90
.L_44e260:

            mov EAX,4294946944
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e270:

            mov EAX,4294946944
            jmp .L_44e222
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e280:

            mov EAX,4294947200
            jmp .L_44e222
.L_44e287:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e290:

            cmp RCX,1
            mov R8,RDX
            jbe .L_44e2c8

            mov RAX,QWORD PTR [RDX]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [R8],RDX
            movzx EAX,BYTE PTR [RAX]
            test AL,AL
            je .L_44e2c8

            sub RCX,1
            cmp RAX,RCX
            ja .L_44e2c8

            lea RCX,QWORD PTR [RDX+RAX*1]
            mov QWORD PTR [R8],RCX
            mov RCX,RAX
            jmp .L_44e1c0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e2c8:

            mov EAX,4294946944
            ret 
.L_44e2ce:

            nop
            nop
.L_44e2d0:

            test R9,R9
            je .L_44e308

            push RBP
            push RBX
            mov RBP,R8
            lea R8,QWORD PTR [R8+1]
            sub R9,1
            mov RBX,RCX
            sub RSP,8
            call .L_44e0b0

            test EAX,EAX
            jne .L_44e2fc

            mov RDX,QWORD PTR [RBX]
            mov BYTE PTR [RBP],DL
            add QWORD PTR [RBX],1
.L_44e2fc:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e308:

            mov EAX,4294946944
            ret 
.L_44e30e:

            nop
            nop
.L_44e310:

            cmp RDX,2
            jbe .L_44e360

            mov RAX,QWORD PTR [RSI]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSI],RDX
            cmp BYTE PTR [RAX],3
            jne .L_44e360

            lea RDX,QWORD PTR [RAX+2]
            lea RCX,QWORD PTR [RAX+3]
            mov QWORD PTR [RSI],RDX
            movzx EDX,BYTE PTR [RAX+1]
            mov QWORD PTR [RSI],RCX
            movzx EAX,BYTE PTR [RAX+2]
            shl EDX,8
            or EAX,EDX
            cmp AX,23
            je .L_44e350

            mov EAX,4294947200
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e350:

            mov ESI,3
            jmp .L_454db0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e360:

            mov EAX,4294946944
            ret 
.L_44e366:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e370:

            cmp DWORD PTR [RDI],3
            je .L_44e380

            mov EAX,4294946944
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e380:

            cmp RCX,2
            mov QWORD PTR [RSI],3
            jbe .L_44e3a0

            mov EAX,3
            mov BYTE PTR [RDX+2],23
            mov WORD PTR [RDX],AX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e3a0:

            mov EAX,4294947072
            ret 
.L_44e3a6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e3b0:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            lea RDI,QWORD PTR [RSI+48]
            mov RBX,RSI
            mov ESI,1
            sub RSP,88
.L_44e3cd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            call .L_44fe30

            test EAX,EAX
            jne .L_44e5d0

            cmp QWORD PTR [R12+96],0
            je .L_44e5e0

            cmp QWORD PTR [R12+120],0
            je .L_44e5e0

            xor ESI,ESI
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            js .L_44e5d0

            lea RBP,QWORD PTR [RBX+24]
            xor ESI,ESI
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            js .L_44e5d0

            lea R14,QWORD PTR [R12+8]
            mov RDI,RBX
            mov RSI,R14
            call .L_44fd30

            test EAX,EAX
            jns .L_44e5d0

            mov RSI,R14
            mov RDI,RBP
            call .L_44fd30

            test EAX,EAX
            jns .L_44e5d0

            lea R13,QWORD PTR [RSP+16]
            lea R15,QWORD PTR [RSP+48]
            mov RDI,R13
            call .L_44f030

            mov RDI,R15
            call .L_44f030

            mov RDX,RBP
            mov RSI,RBP
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            je .L_44e4c0
.L_44e481:

            mov RDI,R13
            mov DWORD PTR [RSP+12],EAX
            call .L_44f050

            mov RDI,R15
            call .L_44f050

            mov EAX,DWORD PTR [RSP+12]
.L_44e499:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44e63d

            add RSP,88
.L_44e4b1:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e4c0:

            mov RSI,R12
            mov RDI,R13
            call .L_44c2d0

            test EAX,EAX
            jne .L_44e481

            mov RDX,RBX
            mov RSI,RBX
            mov RDI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44e481

            mov RSI,R12
            mov RDI,R15
            call .L_44c2d0

            test EAX,EAX
            jne .L_44e481

            cmp QWORD PTR [R12+48],0
            je .L_44e5ea

            lea RDX,QWORD PTR [R12+32]
            mov RSI,R15
            mov RDI,R15
            call .L_450110

            test EAX,EAX
            jne .L_44e481

            jmp .L_44e536
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e520:

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_44ffd0

            test EAX,EAX
            jne .L_44e481
.L_44e536:

            mov RSI,R14
            mov RDI,R15
            call .L_44fd30

            test EAX,EAX
            jns .L_44e520
.L_44e545:

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R15
            call .L_4502f0

            test EAX,EAX
            jne .L_44e481

            mov RSI,R12
            mov RDI,R15
            call .L_44c2d0

            test EAX,EAX
            jne .L_44e481

            lea RDX,QWORD PTR [R12+56]
            mov RSI,R15
            mov RDI,R15
            call .L_450110

            test EAX,EAX
            jne .L_44e481

            jmp .L_44e59e
.L_44e588:

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_44ffd0

            test EAX,EAX
            jne .L_44e481
.L_44e59e:

            mov RSI,R14
            mov RDI,R15
            call .L_44fd30

            test EAX,EAX
            jns .L_44e588

            mov RSI,R15
            mov RDI,R13
            call .L_44fd30

            test EAX,EAX
            je .L_44e481

            mov EAX,4294947712
            jmp .L_44e481
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e5d0:

            mov EAX,4294947712
            jmp .L_44e499
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e5e0:

            mov EAX,4294946944
            jmp .L_44e499
.L_44e5ea:

            mov EDX,3
            mov RSI,R15
            mov RDI,R15
            call .L_450280

            test EAX,EAX
            jne .L_44e481

            jmp .L_44e630
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e608:

            xor ESI,ESI
            mov RDI,R15
            call .L_44fe30

            test EAX,EAX
            je .L_44e545

            mov RDX,R14
            mov RSI,R15
            mov RDI,R15
            call .L_450110

            test EAX,EAX
            jne .L_44e481
.L_44e630:

            mov EAX,DWORD PTR [RSP+48]
            test EAX,EAX
            js .L_44e608

            jmp .L_44e545
.L_44e63d:

            call __stack_chk_fail@PLT
.L_44e642:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e650:

            cmp QWORD PTR [RDI+96],0
            je .L_44e6b0

            cmp QWORD PTR [RDI+120],0
            je .L_44e6b0

            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            mov ESI,1
            mov RDI,RBP
            sub RSP,8
            call .L_44fe30

            test EAX,EAX
            js .L_44e6a0

            lea RSI,QWORD PTR [RBX+152]
            mov RDI,RBP
            call .L_44fd30

            xor EDX,EDX
            test EAX,EAX
            jns .L_44e6a0
.L_44e690:

            add RSP,8
            mov EAX,EDX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e6a0:

            mov EDX,4294947712
            jmp .L_44e690
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e6b0:

            mov EDX,4294946944
            mov EAX,EDX
            ret 
.L_44e6b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e6c0:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            mov RBX,RDI
            lea RDI,QWORD PTR [RCX+48]
            mov ESI,1
            mov R12,RDX
            sub RSP,8
            mov RBP,RCX
            mov R14,R8
            call .L_44fe30

            test EAX,EAX
            jne .L_44e750

            mov RSI,R12
            mov RDI,RBX
            call .L_44e650

            test EAX,EAX
            je .L_44e710
.L_44e701:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_44e710:

            mov RSI,RBP
            mov RDI,RBX
            call .L_44e3b0

            test EAX,EAX
            jne .L_44e701

            cmp QWORD PTR [RBX+96],0
            je .L_44e701

            add RSP,8
            mov R9,R15
            mov R8,R14
            mov RCX,RBP
            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            jmp .L_44d930
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44e750:

            mov EAX,4294946944
            jmp .L_44e701
.L_44e757:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e760:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov RBP,RSI
            mov RDI,RDX
            mov ESI,1
            mov RBX,RDX
            sub RSP,8
            mov R12,RCX
            call .L_44fe30

            test EAX,EAX
            je .L_44e7e0

            mov RSI,-1
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            jne .L_44e7b8

            mov RSI,R12
            mov RDI,RBP
            call .L_44d250

            test EAX,EAX
            je .L_44e7f8
.L_44e7a9:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44e7b8:

            add RSP,8
            mov RCX,R12
            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R13
            xor R9D,R9D
            pop RBX
            pop RBP
            pop R12
            pop R13
            xor R8D,R8D
            jmp .L_44e6c0
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e7e0:

            add RSP,8
            mov RSI,R12
            mov RDI,RBP
            pop RBX
            pop RBP
            pop R12
            pop R13
            jmp .L_44d250
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44e7f8:

            add RBP,24
            xor ESI,ESI
            mov RDI,RBP
            call .L_44fe30

            test EAX,EAX
            je .L_44e7a9

            add RSP,8
            lea RSI,QWORD PTR [R13+8]
            mov RDX,RBP
            pop RBX
            mov RDI,RBP
            pop RBP
            pop R12
            pop R13
            jmp .L_450190
.L_44e823:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44e830:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_44e83e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            cmp QWORD PTR [RDI+96],0
            mov QWORD PTR [RSP+8],RCX
            je .L_44e910

            cmp QWORD PTR [RDI+120],0
            mov RBX,RDI
            je .L_44e910

            lea RBP,QWORD PTR [RSP+16]
            mov R12,RDX
            mov R13,RSI
            mov R14,R8
            mov R15,R9
            mov RDI,RBP
            call .L_44cf60

            mov RCX,QWORD PTR [RSP+8]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,RBX
            call .L_44e760

            test EAX,EAX
            mov R12D,EAX
            je .L_44e8d0
.L_44e89f:

            mov RDI,RBP
            call .L_44cfb0
.L_44e8a7:

            mov RDX,QWORD PTR [RSP+88]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_44e918

            add RSP,104
.L_44e8be:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44e8d0:

            mov RCX,R15
            mov RDX,R14
            mov RSI,R13
            mov RDI,RBX
            call .L_44e760

            test EAX,EAX
            mov R12D,EAX
            jne .L_44e89f

            mov RCX,R13
            mov RDX,RBP
            mov RSI,R13
            mov RDI,RBX
            call .L_44d2f0

            test EAX,EAX
            mov R12D,EAX
            jne .L_44e89f

            mov RSI,R13
            mov RDI,RBX
            call .L_44ca80

            mov R12D,EAX
            jmp .L_44e89f
.L_44e910:

            mov R12D,4294947200
            jmp .L_44e8a7
.L_44e918:

            call __stack_chk_fail@PLT
.L_44e91d:

            nop
            nop
            nop
.L_44e920:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,88
.L_44e92e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RDI+184]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP],R9
            add RAX,7
            mov R12,RAX
            shr R12,3
            cmp QWORD PTR [RDI+96],0
            je .L_44ea37

            cmp QWORD PTR [RDI+120],0
            mov R14,RDI
            je .L_44ea37

            and RAX,-8
            lea R13,QWORD PTR [RSP+32]
            mov RBX,RDX
            mov R15,R8
            mov EBP,31
            mov QWORD PTR [RSP+8],RAX
.L_44e990:

            mov RDX,R12
            mov RSI,R13
            mov RDI,QWORD PTR [RSP]
            call R15

            test EAX,EAX
            jne .L_44ea10

            mov RDX,R12
            mov RSI,R13
            mov RDI,RBX
            call .L_44f720

            test EAX,EAX
            jne .L_44ea10

            mov RSI,QWORD PTR [RSP+8]
            sub RSI,QWORD PTR [R14+184]
            mov RDI,RBX
            call .L_44f9c0

            test EAX,EAX
            jne .L_44ea10

            sub EBP,1
            je .L_44ea30

            mov ESI,1
            mov RDI,RBX
            call .L_44fe30

            test EAX,EAX
            js .L_44e990

            lea RSI,QWORD PTR [R14+152]
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            jns .L_44e990

            mov R9,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RSP+16]
            mov R8,R15
            mov RSI,QWORD PTR [RSP+24]
            mov RDX,RBX
            mov RDI,R14
            call .L_44e6c0
.L_44ea10:

            mov RCX,QWORD PTR [RSP+72]
            xor RCX,QWORD PTR FS:[40]
            jne .L_44ea3e

            add RSP,88
.L_44ea24:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_44ea30:

            mov EAX,4294947584
            jmp .L_44ea10
.L_44ea37:

            mov EAX,4294946944
            jmp .L_44ea10
.L_44ea3e:

            call __stack_chk_fail@PLT
.L_44ea43:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ea50:

            mov RAX,RSI
            lea RSI,QWORD PTR [RDI+80]
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RAX
            jmp .L_44e920
.L_44ea68:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ea70:

            push R12
            push RBP
            mov R12,RCX
            push RBX
            mov RBX,RSI
            mov ESI,EDI
            mov RDI,RBX
            mov RBP,RDX
            call .L_454db0

            test EAX,EAX
            je .L_44ea90

            pop RBX
            pop RBP
            pop R12
            ret 
.L_44ea90:

            lea RCX,QWORD PTR [RBX+272]
            lea RDX,QWORD PTR [RBX+248]
            lea RSI,QWORD PTR [RBX+80]
            mov R9,R12
            mov R8,RBP
            mov RDI,RBX
            pop RBX
            pop RBP
            pop R12
            jmp .L_44e920
.L_44eab4:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44eac0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,344
.L_44ead1:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            je .L_44ec20

            cmp EAX,DWORD PTR [RSI]
            mov RBX,RSI
            jne .L_44ec20

            lea R13,QWORD PTR [RSI+272]
            mov RBP,RDI
            lea RDI,QWORD PTR [RDI+272]
            mov RSI,R13
            call .L_44fd30

            test EAX,EAX
            jne .L_44ec20

            lea R14,QWORD PTR [RBX+296]
            lea RDI,QWORD PTR [RBP+296]
            mov RSI,R14
            call .L_44fd30

            test EAX,EAX
            jne .L_44ec20

            lea R15,QWORD PTR [RBX+320]
            lea RDI,QWORD PTR [RBP+320]
            mov RSI,R15
            call .L_44fd30

            test EAX,EAX
            jne .L_44ec20

            lea RBP,QWORD PTR [RSP+80]
            mov R12,RSP
            mov RDI,R12
            call .L_44cf60

            mov RDI,RBP
            call .L_44cf80

            mov ESI,DWORD PTR [RBX]
            mov RDI,RBP
            call .L_454db0

            lea RCX,QWORD PTR [RBX+80]
            lea RDX,QWORD PTR [RBX+248]
            xor R9D,R9D
            xor R8D,R8D
            mov RSI,R12
            mov RDI,RBP
            call .L_44e6c0

            test EAX,EAX
            mov EBX,EAX
            je .L_44ebd8
.L_44eb9a:

            mov RDI,R12
            call .L_44cfb0

            mov RDI,RBP
            call .L_44d150
.L_44ebaa:

            mov RDX,QWORD PTR [RSP+328]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_44ec2a

            add RSP,344
.L_44ebc6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44ebd8:

            mov RSI,R13
            mov RDI,R12
            call .L_44fd30

            test EAX,EAX
            je .L_44ebf0
.L_44ebe7:

            mov EBX,4294946944
            jmp .L_44eb9a
          .byte 0x66
          .byte 0x90
.L_44ebf0:

            lea RDI,QWORD PTR [R12+24]
            mov RSI,R14
            call .L_44fd30

            test EAX,EAX
            jne .L_44ebe7

            lea RDI,QWORD PTR [R12+48]
            mov RSI,R15
            call .L_44fd30

            test EAX,EAX
            mov EBX,EAX
            je .L_44eb9a

            jmp .L_44ebe7
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44ec20:

            mov EBX,4294946944
            jmp .L_44ebaa
.L_44ec2a:

            call __stack_chk_fail@PLT
.L_44ec2f:

            nop
.L_44ec30:

            test RDI,RDI
            je .L_44ec9c

            xor R8D,R8D
            xor ECX,ECX
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ec40:

            mov RAX,QWORD PTR [RDX+RCX*8]
            xor R10D,R10D
            cmp RAX,R8
            setb R10B
            sub RAX,R8
            mov QWORD PTR [RDX+RCX*8],RAX
            mov R9,QWORD PTR [RSI+RCX*8]
            cmp RAX,R9
            adc R10,0
            sub RAX,R9
            mov QWORD PTR [RDX+RCX*8],RAX
            add RCX,1
            mov R8,R10
            cmp RDI,RCX
            jne .L_44ec40

            test R10,R10
            lea RAX,QWORD PTR [RDX+RDI*8]
            jne .L_44ec86

            jmp .L_44ec9e
          .byte 0x66
          .byte 0x90
.L_44ec80:

            mov R8D,1
.L_44ec86:

            mov RDX,QWORD PTR [RAX]
            add RAX,8
            mov RCX,RDX
            sub RCX,R8
            mov QWORD PTR [RAX-8],RCX
            cmp RDX,R8
            jb .L_44ec80
.L_44ec9c:

            ret 
.L_44ec9e:

            ret 
.L_44eca0:

            mov R9,RDI
            push RBX
.L_44eca4:

            mov RDI,RDX
            cmp R9,15
            mov RBX,RCX
            jbe .L_44f020

            mov R11,R9
            mov R10,R9
            xor ECX,ECX
            and R11D,15
.L_44ecc0:

            sub R10,16
            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            cmp R11,R10
            jne .L_44ecc0

            and R9D,15
.L_44eec4:

            cmp R9,7
            jbe .L_44efcd

            sub R9,8
            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
.L_44efcd:

            test R9,R9
            je .L_44f000

            nop
            nop
            nop
            nop
            nop
            nop
.L_44efd8:

            xor R8,R8
            mov RAX,QWORD PTR [RSI]
            mul RBX
            add RSI,8
            add RAX,RCX
            mov RCX,R8
            adc RDX,0
            nop
            add QWORD PTR [RDI],RAX
            adc RCX,RDX
            add RDI,8
            sub R9,1
            jne .L_44efd8
.L_44f000:

            xor EAX,EAX
            add RCX,QWORD PTR [RDI]
            setb AL
            mov QWORD PTR [RDI],RCX
            add RDI,8
            test RAX,RAX
            mov ECX,1
            jne .L_44f000

            pop RBX
.L_44f01a:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f020:

            xor ECX,ECX
            jmp .L_44eec4
.L_44f027:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f030:

            test RDI,RDI
            je .L_44f04b

            mov DWORD PTR [RDI],1
            mov QWORD PTR [RDI+8],0
            mov QWORD PTR [RDI+16],0
.L_44f04b:

            ret 
.L_44f04d:

            nop
            nop
            nop
.L_44f050:

            test RDI,RDI
            je .L_44f0b0

            push RBX

            mov RBX,RDI
            mov RDI,QWORD PTR [RDI+16]
            test RDI,RDI
            je .L_44f093

            mov RDX,QWORD PTR [RBX+8]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_44f08d

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f078:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_44f078
.L_44f08d:

            call QWORD PTR [RIP+.L_677120]
.L_44f093:

            mov DWORD PTR [RBX],1
            mov QWORD PTR [RBX+8],0
            mov QWORD PTR [RBX+16],0
            pop RBX

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f0b0:

            ret 
.L_44f0b2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f0c0:

            cmp RSI,10000
            ja .L_44f16a

            cmp QWORD PTR [RDI+8],RSI
            jae .L_44f160

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_44f0de:

            mov ESI,8
            mov RBX,RDI
            mov RDI,RBP
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_44f163

            mov RSI,QWORD PTR [RBX+16]
            test RSI,RSI
            je .L_44f14b

            mov RAX,QWORD PTR [RBX+8]
            mov RDI,R12
            lea RDX,QWORD PTR [RAX*8]
            call memcpy@PLT

            mov RDX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_44f145

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f130:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_44f130
.L_44f145:

            call QWORD PTR [RIP+.L_677120]
.L_44f14b:

            mov QWORD PTR [RBX+8],RBP
            mov QWORD PTR [RBX+16],R12
            xor EAX,EAX
.L_44f155:

            pop RBX
.L_44f156:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f160:

            xor EAX,EAX
            ret 
.L_44f163:

            mov EAX,4294967280
            jmp .L_44f155
.L_44f16a:

            mov EAX,4294967280
            ret 
.L_44f170:

            mov RDX,QWORD PTR [RDI+8]
            cmp RDX,RSI
            jbe .L_44f240

            mov RAX,RDX
            push R12
            push RBP
            sub RAX,1
            push RBX
.L_44f188:

            je .L_44f1b3

            mov RCX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RCX+RAX*8],0
            je .L_44f1aa

            jmp .L_44f248
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f1a0:

            cmp QWORD PTR [RCX+RDX*8],0
            jne .L_44f1b8

            mov RAX,RDX
.L_44f1aa:

            mov RDX,RAX
            sub RDX,1
            jne .L_44f1a0
.L_44f1b3:

            mov EAX,1
.L_44f1b8:

            cmp RSI,RAX
            mov RBX,RDI
            cmovae RAX,RSI
            mov ESI,8
            mov RBP,RAX
            mov RDI,RAX
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov R12,RAX
            je .L_44f250

            mov RSI,QWORD PTR [RBX+16]
            test RSI,RSI
            je .L_44f22b

            lea RDX,QWORD PTR [RBP*8]
            mov RDI,RAX
            call memcpy@PLT

            mov RDX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_44f225

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f210:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_44f210
.L_44f225:

            call QWORD PTR [RIP+.L_677120]
.L_44f22b:

            mov QWORD PTR [RBX+8],RBP
            mov QWORD PTR [RBX+16],R12
            xor EAX,EAX
.L_44f235:

            pop RBX
.L_44f236:

            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f240:

            jmp .L_44f0c0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f248:

            mov RAX,RDX
            jmp .L_44f1b8
.L_44f250:

            mov EAX,4294967280
            jmp .L_44f235
.L_44f257:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f260:

            push R13
            push R12
            xor R13D,R13D
            push RBP
            push RBX
            sub RSP,8
.L_44f26d:

            cmp RDI,RSI
            je .L_44f2d1

            mov RDX,QWORD PTR [RSI+16]
            mov RBP,RSI
            mov R12,RDI
            test RDX,RDX
            je .L_44f320

            mov RAX,QWORD PTR [RSI+8]
            mov RBX,RAX
            sub RBX,1
            je .L_44f2b3

            cmp QWORD PTR [RDX+RBX*8],0
            je .L_44f2aa

            jmp .L_44f338
          .byte 0x66
          .byte 0x90
.L_44f2a0:

            cmp QWORD PTR [RDX+RAX*8],0
            jne .L_44f2b8

            mov RBX,RAX
.L_44f2aa:

            mov RAX,RBX
            sub RAX,1
            jne .L_44f2a0
.L_44f2b3:

            mov EBX,1
.L_44f2b8:

            mov EAX,DWORD PTR [RBP]
            mov RSI,RBX
            mov RDI,R12
            mov DWORD PTR [R12],EAX
            call .L_44f0c0

            test EAX,EAX
            mov R13D,EAX
            je .L_44f2e0
.L_44f2d1:

            add RSP,8
.L_44f2d5:

            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x90
.L_44f2e0:

            mov RAX,QWORD PTR [R12+8]
            mov RDI,QWORD PTR [R12+16]
            xor ESI,ESI
            lea RDX,QWORD PTR [RAX*8]
            call memset@PLT

            mov RDI,QWORD PTR [R12+16]
            mov RSI,QWORD PTR [RBP+16]
            lea RDX,QWORD PTR [RBX*8]
            call memcpy@PLT

            add RSP,8
            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f320:

            call .L_44f050

            add RSP,8
            mov EAX,R13D
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f338:

            mov RBX,RAX
            jmp .L_44f2b8
.L_44f340:

            sub RSP,40
.L_44f344:

            movdqu XMM1,XMMWORD PTR [RSI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            movdqu XMM0,XMMWORD PTR [RDI]
            mov RAX,QWORD PTR [RDI+16]
            movups XMMWORD PTR [RDI],XMM1
            mov RDX,QWORD PTR [RSI+16]
            movaps XMMWORD PTR [RSP],XMM0
            mov QWORD PTR [RDI+16],RDX
            mov QWORD PTR [RSP+16],RAX
            mov QWORD PTR [RSI+16],RAX
            mov RAX,QWORD PTR [RSP+24]
            xor RAX,QWORD PTR FS:[40]
            movups XMMWORD PTR [RSI],XMM0
            jne .L_44f390

            add RSP,40
.L_44f38f:

            ret 
.L_44f390:

            call __stack_chk_fail@PLT
.L_44f395:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f3a0:

            push R12
            push RBP
            mov RBP,RSI
            push RBX
.L_44f3a7:

            mov RSI,QWORD PTR [RSI+8]
            mov RBX,RDI
            mov R12D,EDX
            call .L_44f0c0

            test EAX,EAX
            jne .L_44f446

            mov ESI,R12D
            mov EDI,1
            neg ESI
            or ESI,R12D
            mov EDX,ESI
            mov ESI,DWORD PTR [RBX]
            shr DL,7
            movzx ECX,DL
            sub EDI,ECX
            imul ECX,DWORD PTR [RBP]
            imul ESI,EDI
            mov R9D,EDI
            add ECX,ESI
            mov DWORD PTR [RBX],ECX
            mov RCX,QWORD PTR [RBP+8]
            test RCX,RCX
            je .L_44f421

            mov RDI,QWORD PTR [RBX+16]
            mov R11,QWORD PTR [RBP+16]
            movsxd R10,R9D
            movzx ESI,DL
            xor ECX,ECX
            nop
            nop
.L_44f400:

            mov RDX,QWORD PTR [RDI+RCX*8]
            mov R8,QWORD PTR [R11+RCX*8]
            imul RDX,R10
            imul R8,RSI
            add RDX,R8
            mov QWORD PTR [RDI+RCX*8],RDX
            add RCX,1
            cmp QWORD PTR [RBP+8],RCX
            ja .L_44f400
.L_44f421:

            cmp QWORD PTR [RBX+8],RCX
            jbe .L_44f446

            mov RDX,QWORD PTR [RBX+16]
            movsxd RDI,R9D
            nop
            nop
.L_44f430:

            mov RSI,QWORD PTR [RDX+RCX*8]
            imul RSI,RDI
            mov QWORD PTR [RDX+RCX*8],RSI
            add RCX,1
            cmp QWORD PTR [RBX+8],RCX
            ja .L_44f430
.L_44f446:

            pop RBX
.L_44f447:

            pop RBP
            pop R12
            ret 
.L_44f44b:

            nop
            nop
            nop
            nop
            nop
.L_44f450:

            cmp RDI,RSI
            je .L_44f520

            push R12
            push RBP
            mov RBP,RSI
            push RBX
            mov RSI,QWORD PTR [RSI+8]
            mov R12D,EDX
            mov RBX,RDI
            call .L_44f0c0

            test EAX,EAX
            je .L_44f480
.L_44f473:

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f480:

            mov RSI,QWORD PTR [RBX+8]
            mov RDI,RBP
            call .L_44f0c0

            test EAX,EAX
            jne .L_44f473

            mov R8D,R12D
            mov ECX,DWORD PTR [RBX]
            mov EDX,DWORD PTR [RBP]
            neg R8D
            mov ESI,1
            or R8D,R12D
            shr R8B,7
            movzx EAX,R8B
            sub ESI,EAX
            mov EDI,ESI
            imul EDX,EAX
            imul EDI,ECX
            add EDX,EDI
            mov DWORD PTR [RBX],EDX
            mov EDX,DWORD PTR [RBP]
            imul EAX,ECX
            imul EDX,ESI
            add EAX,EDX
            cmp QWORD PTR [RBX+8],0
            mov DWORD PTR [RBP],EAX
            je .L_44f517

            mov R9,QWORD PTR [RBX+16]
            mov RDI,QWORD PTR [RBP+16]
            movsxd RSI,ESI
            movzx R8D,R8B
            xor EAX,EAX
            nop
.L_44f4e0:

            mov RDX,QWORD PTR [R9+RAX*8]
            mov RCX,QWORD PTR [RDI+RAX*8]
            mov R10,RDX
            imul RCX,R8
            imul R10,RSI
            imul RDX,R8
            add RCX,R10
            mov QWORD PTR [R9+RAX*8],RCX
            mov RCX,QWORD PTR [RDI+RAX*8]
            imul RCX,RSI
            add RDX,RCX
            mov QWORD PTR [RDI+RAX*8],RDX
            add RAX,1
            cmp QWORD PTR [RBX+8],RAX
            ja .L_44f4e0
.L_44f517:

            pop RBX
.L_44f518:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_44f520:

            xor EAX,EAX
            ret 
.L_44f523:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f530:

            push R12
            push RBP
            mov R12,RSI
            push RBX
.L_44f537:

            mov ESI,1
            mov RBX,RDI
            call .L_44f0c0

            test EAX,EAX
            mov EBP,EAX
            jne .L_44f57a

            mov RAX,QWORD PTR [RBX+8]
            mov RDI,QWORD PTR [RBX+16]
            xor ESI,ESI
            lea RDX,QWORD PTR [RAX*8]
            call memset@PLT

            mov RDX,QWORD PTR [RBX+16]
            mov RAX,R12
            sar RAX,63
            xor R12,RAX
            mov QWORD PTR [RDX],R12
            sub QWORD PTR [RDX],RAX
            or EAX,1
            mov DWORD PTR [RBX],EAX
.L_44f57a:

            mov EAX,EBP
            pop RBX
.L_44f57d:

            pop RBP
            pop R12
            ret 
.L_44f581:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f590:

            mov RDX,QWORD PTR [RDI+8]
            xor EAX,EAX
            shl RDX,6
            cmp RDX,RSI
            jbe .L_44f5b6

            mov RAX,QWORD PTR [RDI+16]
            mov RDX,RSI
            mov ECX,ESI
            shr RDX,6
            mov RAX,QWORD PTR [RAX+RDX*8]
            shr RAX,CL
            and EAX,1
.L_44f5b6:

            ret 
.L_44f5b8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f5c0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            shr R13,6
            sub RSP,8
.L_44f5d1:

            cmp DL,1
            ja .L_44f638

            mov RAX,QWORD PTR [RDI+8]
            movzx R12D,DL
            mov RBX,RSI
            mov RBP,RDI
            shl RAX,6
            cmp RAX,RSI
            jbe .L_44f620
.L_44f5ed:

            mov RAX,QWORD PTR [RBP+16]
            mov RCX,RBX
            and ECX,63
            shl R12,CL
            lea RDX,QWORD PTR [RAX+R13*8]
            mov RAX,-2
            rol RAX,CL
            and RAX,QWORD PTR [RDX]
            or RAX,R12
            mov QWORD PTR [RDX],RAX
            xor EAX,EAX
.L_44f613:

            add RSP,8
.L_44f617:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x90
.L_44f620:

            xor EAX,EAX
            test DL,DL
            je .L_44f613

            lea RSI,QWORD PTR [R13+1]
            call .L_44f0c0

            test EAX,EAX
            je .L_44f5ed

            jmp .L_44f613
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f638:

            mov EAX,4294967292
            jmp .L_44f613
.L_44f63f:

            nop
.L_44f640:

            mov R9,QWORD PTR [RDI+8]
            test R9,R9
            je .L_44f686

            mov R10,QWORD PTR [RDI+16]
            xor ECX,ECX
            xor R8D,R8D
.L_44f652:

            mov RSI,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RCX+64]
            mov RAX,RCX
            jmp .L_44f669
          .byte 0x90
.L_44f660:

            add RAX,1
            cmp RAX,RDI
            je .L_44f678
.L_44f669:

            mov EDX,EAX
            sub EDX,ECX
            bt RSI,RDX
            jae .L_44f660

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f678:

            add R8,1
            cmp R9,R8
            je .L_44f686

            mov RCX,RAX
            jmp .L_44f652
.L_44f686:

            xor EAX,EAX
            ret 
.L_44f689:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f690:

            mov RCX,QWORD PTR [RDI+8]
            xor EAX,EAX
            test RCX,RCX
            je .L_44f700

            mov RAX,RCX
            mov RDX,QWORD PTR [RDI+16]
            sub RAX,1
            jne .L_44f6c6

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f6b0:

            mov RSI,QWORD PTR [RDX]
            mov EDI,64
            jmp .L_44f6d7
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f6c0:

            sub RAX,1
            je .L_44f6b0
.L_44f6c6:

            mov RSI,QWORD PTR [RDX+RAX*8]
            test RSI,RSI
            je .L_44f6c0

            shl RAX,6
            lea RDI,QWORD PTR [RAX+64]
.L_44f6d7:

            xor ECX,ECX
            movabs RDX,-9223372036854775808
            jmp .L_44f6f5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44f6e8:

            add RCX,1
            shr RDX,1
            cmp RCX,64
            je .L_44f708
.L_44f6f5:

            test RDX,RSI
            je .L_44f6e8

            mov RAX,RDI
            sub RAX,RCX
.L_44f700:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f708:

            ret 
.L_44f70a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44f710:

            call .L_44f690

            add RAX,7
            shr RAX,3
            ret 
.L_44f71e:

            nop
            nop
.L_44f720:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            mov RBP,RDX
            sub RSP,8
.L_44f733:

            test RDX,RDX
            je .L_44f800

            cmp BYTE PTR [RSI],0
            jne .L_44f810

            xor EBX,EBX
            jmp .L_44f757
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f750:

            cmp BYTE PTR [R12+RBX*1],0
            jne .L_44f790
.L_44f757:

            add RBX,1
            cmp RBP,RBX
            jne .L_44f750

            xor ESI,ESI
.L_44f762:

            xor EAX,EAX
            test SIL,7
            mov RDI,R13
            setne AL
            shr RSI,3
            add RSI,RAX
            call .L_44f0c0

            test EAX,EAX
            je .L_44f7a0
.L_44f77e:

            add RSP,8
.L_44f782:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f790:

            mov RSI,RBP
            sub RSI,RBX
            jmp .L_44f762
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f7a0:

            xor ESI,ESI
            mov RDI,R13
            call .L_44f530

            test EAX,EAX
            jne .L_44f77e

            cmp RBP,RBX
            jbe .L_44f77e

            mov R9,QWORD PTR [R13+16]
            lea RDI,QWORD PTR [R12+RBP*1-1]
            xor EDX,EDX
            sub RBP,RBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f7c8:

            movzx ESI,BYTE PTR [RDI]
            lea ECX,DWORD PTR [RDX*8]
            mov R8,RDX
            and R8,-8
            add RDX,1
            sub RDI,1
            and ECX,56
            shl RSI,CL
            or QWORD PTR [R9+R8*1],RSI
            cmp RDX,RBP
            jne .L_44f7c8

            add RSP,8
.L_44f7f4:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44f800:

            xor ESI,ESI
            xor EBX,EBX
            jmp .L_44f762
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44f810:

            mov RSI,RDX
            xor EBX,EBX
            jmp .L_44f762
.L_44f81a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44f820:

            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RSI
            sub RSP,8
.L_44f833:

            call .L_44f690

            add RAX,7
            shr RAX,3
            cmp R12,RAX
            jb .L_44f8a0

            mov RBX,RAX
            mov RDX,R12
            xor ESI,ESI
            mov RDI,RBP
            sub R12,RBX
            call memset@PLT

            add RBP,R12
            xor EDX,EDX
            test RBX,RBX
            mov RAX,RBX
            je .L_44f893

            nop
            nop
            nop
.L_44f868:

            mov RDI,QWORD PTR [R13+16]
            mov RSI,RDX
            lea ECX,DWORD PTR [RDX*8]
            and RSI,-8
            add RDX,1
            and ECX,56
            mov RSI,QWORD PTR [RDI+RSI*1]
            shr RSI,CL
            mov BYTE PTR [RBP+RAX*1-1],SIL
            sub RAX,1
            jne .L_44f868
.L_44f893:

            xor EAX,EAX
.L_44f895:

            add RSP,8
.L_44f899:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_44f8a0:

            mov EAX,4294967288
            jmp .L_44f895
.L_44f8a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44f8b0:

            push R12
            push RBP
            mov RBP,RDI
            push RBX
.L_44f8b7:

            mov R8,RSI
            mov RBX,RSI
            mov R12,RSI
            shr RBX,6
            call .L_44f690

            mov RDX,QWORD PTR [RBP+8]
            add RAX,R8
            and R12D,63
            shl RDX,6
            cmp RDX,RAX
            jb .L_44f980
.L_44f8e1:

            test RBX,RBX
            je .L_44f92f

            mov RAX,QWORD PTR [RBP+8]
            cmp RBX,RAX
            jae .L_44f9a8

            mov RCX,QWORD PTR [RBP+16]
            sub RAX,RBX
            lea RAX,QWORD PTR [RCX+RAX*8-8]
            lea RSI,QWORD PTR [RCX-8]
            nop
            nop
            nop
            nop
            nop
.L_44f908:

            mov RDX,QWORD PTR [RAX]
            mov QWORD PTR [RAX+RBX*8],RDX
            sub RAX,8
            cmp RSI,RAX
            jne .L_44f908

            mov RAX,RBX
            nop
            nop
            nop
            nop
            nop
.L_44f920:

            mov QWORD PTR [RCX+RAX*8-8],0
            sub RAX,1
            jne .L_44f920
.L_44f92f:

            test R12,R12
            je .L_44f977

            cmp RBX,QWORD PTR [RBP+8]
            jae .L_44f977

            mov RDI,QWORD PTR [RBP+16]
            mov R8D,64
            mov R9D,R12D
            sub R8D,R12D
            xor ESI,ESI
            nop
            nop
            nop
            nop
.L_44f950:

            mov RDX,QWORD PTR [RDI+RBX*8]
            mov ECX,R9D
            mov RAX,RDX
            shl RAX,CL
            mov ECX,R8D
            or RAX,RSI
            mov RSI,RDX
            mov QWORD PTR [RDI+RBX*8],RAX
            shr RSI,CL
            add RBX,1
            cmp QWORD PTR [RBP+8],RBX
            ja .L_44f950
.L_44f977:

            pop RBX
.L_44f978:

            xor EAX,EAX
            pop RBP
            pop R12
            ret 
          .byte 0x66
          .byte 0x90
.L_44f980:

            xor ESI,ESI
            test AL,63
            mov RDI,RBP
            setne SIL
            shr RAX,6
            add RSI,RAX
            call .L_44f0c0

            test EAX,EAX
            je .L_44f8e1

            pop RBX
            pop RBP
            pop R12
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_44f9a8:

            test RAX,RAX
            je .L_44f92f

            mov RCX,QWORD PTR [RBP+16]
            jmp .L_44f920
.L_44f9ba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_44f9c0:

            mov RAX,QWORD PTR [RDI+8]
            mov RDX,RSI
            shr RDX,6
            cmp RAX,RDX
            jb .L_44fa98

            and ESI,63
            cmp RAX,RDX
            je .L_44fa80

            test RDX,RDX
            je .L_44fa22

            mov RCX,QWORD PTR [RDI+16]
            xor EAX,EAX
            lea R10,QWORD PTR [RCX+RDX*8]
            nop
.L_44f9f0:

            mov R8,QWORD PTR [R10+RAX*8]
            mov QWORD PTR [RCX+RAX*8],R8
            mov R8,QWORD PTR [RDI+8]
            add RAX,1
            mov R9,R8
            sub R9,RDX
            cmp R9,RAX
            ja .L_44f9f0

            cmp R8,RAX
            jbe .L_44fa22
.L_44fa10:

            mov QWORD PTR [RCX+RAX*8],0
            add RAX,1
            cmp QWORD PTR [RDI+8],RAX
            ja .L_44fa10
.L_44fa22:

            test RSI,RSI
            je .L_44fa75

            mov RAX,QWORD PTR [RDI+8]
            test RAX,RAX
            je .L_44fa75

            mov R8,QWORD PTR [RDI+16]
            mov R9D,64
            mov R10D,ESI
            sub R9D,ESI
            xor EDI,EDI
            lea RAX,QWORD PTR [R8+RAX*8-8]
            sub R8,8
            nop
            nop
            nop
            nop
            nop
.L_44fa50:

            mov RSI,QWORD PTR [RAX]
            mov ECX,R10D
            sub RAX,8
            mov RDX,RSI
            shr RDX,CL
            mov ECX,R9D
            or RDX,RDI
            shl RSI,CL
            mov QWORD PTR [RAX+8],RDX
            cmp RAX,R8
            mov RDI,RSI
            jne .L_44fa50
.L_44fa75:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fa80:

            test RSI,RSI
            jne .L_44fa98

            test RAX,RAX
            je .L_44fa75

            xor EAX,EAX
            mov RCX,QWORD PTR [RDI+16]
            jmp .L_44fa10
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44fa98:

            xor ESI,ESI
            jmp .L_44f530
.L_44fa9f:

            nop
.L_44faa0:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_44fad2

            mov RAX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RAX+RDX*8-8],0
            je .L_44facc

            jmp .L_44fb60
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44fac0:

            cmp QWORD PTR [RAX+RDX*8-8],0
            jne .L_44fb60
.L_44facc:

            sub RDX,1
            jne .L_44fac0
.L_44fad2:

            mov RCX,QWORD PTR [RSI+8]
            xor EDX,EDX
            test RCX,RCX
            je .L_44fb54
.L_44fadd:

            mov RSI,QWORD PTR [RSI+16]
            cmp QWORD PTR [RSI+RCX*8-8],0
            je .L_44faf8

            jmp .L_44fb10
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44faf0:

            cmp QWORD PTR [RSI+RCX*8-8],0
            jne .L_44fb10
.L_44faf8:

            sub RCX,1
            jne .L_44faf0

            xor EAX,EAX
            test RDX,RDX
            jne .L_44fb10
.L_44fb05:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fb10:

            cmp RDX,RCX
            mov EAX,1
            ja .L_44fb05

            jb .L_44fb78

            test RDX,RDX
            je .L_44fb54

            mov RCX,QWORD PTR [RDI+16]
            mov RDI,QWORD PTR [RSI+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RDI
            ja .L_44fb05

            mov EAX,4294967295
            jae .L_44fb4e

            jmp .L_44fb7e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44fb40:

            mov RAX,QWORD PTR [RSI+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RAX
            ja .L_44fb6d

            jb .L_44fb78
.L_44fb4e:

            sub RDX,1
            jne .L_44fb40
.L_44fb54:

            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fb60:

            mov RCX,QWORD PTR [RSI+8]
            test RCX,RCX
            jne .L_44fadd
.L_44fb6d:

            mov EAX,1
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44fb78:

            mov EAX,4294967295
            ret 
.L_44fb7e:

            ret 
.L_44fb80:

            mov RAX,QWORD PTR [RCX+8]
            add RAX,1
            cmp RAX,R9
            ja .L_44fd1a

            push R15
            push R14
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            sub RSP,56
.L_44fba2:

            mov RAX,QWORD PTR [RSP+112]
            mov RDI,QWORD PTR [RAX]
            test RDI,RDI
            je .L_44fd20

            mov QWORD PTR [RSP+24],RDX
            lea RDX,QWORD PTR [R9*8]
            mov RBX,RSI
            mov R12,RCX
            xor ESI,ESI
            mov QWORD PTR [RSP+32],R8
            call memset@PLT

            mov RBP,QWORD PTR [R12+8]
            mov RAX,QWORD PTR [RSP+112]
            cmp QWORD PTR [RBX],RBP
            mov R14,QWORD PTR [RAX]
            mov RAX,RBP
            cmovbe RAX,QWORD PTR [RBX]
            test RBP,RBP
            mov QWORD PTR [RSP+40],R14
            mov QWORD PTR [RSP+16],RAX
            je .L_44fd10

            lea RAX,QWORD PTR [RBP*8+8]
            xor R15D,R15D
            mov QWORD PTR [RSP+8],RBP
            mov RBP,R13
            mov R13,R14
            mov R14,R15
            mov QWORD PTR [RSP],RAX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44fc20:

            mov RAX,QWORD PTR [RSP+24]
            mov RDX,QWORD PTR [RBP+16]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RAX]
            mov R15,QWORD PTR [RDX+R14*8]
            mov RDX,R13
            add R14,1
            mov RBX,QWORD PTR [RSI]
            mov RCX,R15
            imul RBX,R15
            add RBX,QWORD PTR [R13]
            imul RBX,QWORD PTR [RSP+32]
            call .L_44eca0

            mov RSI,QWORD PTR [R12+16]
            mov RDX,R13
            add R13,8
            mov RCX,RBX
            mov RBX,QWORD PTR [RSP+8]
            mov RDI,RBX
            call .L_44eca0

            mov RAX,QWORD PTR [RSP]
            cmp RBX,R14
            mov QWORD PTR [R13-8],R15
            mov QWORD PTR [R13+RAX*1],0
            jne .L_44fc20

            mov RAX,QWORD PTR [RSP+40]
            mov RCX,QWORD PTR [RSP]
            mov R13,RBP
            mov RBP,QWORD PTR [RSP+8]
            lea RAX,QWORD PTR [RAX+RCX*1-8]
            mov QWORD PTR [RSP+40],RAX
.L_44fca2:

            mov RDI,QWORD PTR [R13+16]
            mov RDX,QWORD PTR [RSP]
            mov RSI,QWORD PTR [RSP+40]
            call memcpy@PLT

            mov RSI,R12
            mov RDI,R13
            call .L_44faa0

            test EAX,EAX
            js .L_44fce8

            mov RDX,QWORD PTR [R13+16]
            mov RSI,QWORD PTR [R12+16]
            mov RDI,RBP
            call .L_44ec30

            xor EAX,EAX
.L_44fcd6:

            add RSP,56
.L_44fcda:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44fce8:

            mov RAX,QWORD PTR [RSP+112]
            mov RSI,QWORD PTR [R13+16]
            mov RDI,RBP
            mov RDX,QWORD PTR [RAX]
            call .L_44ec30

            add RSP,56
            xor EAX,EAX
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44fd10:

            mov QWORD PTR [RSP],8
            jmp .L_44fca2
.L_44fd1a:

            mov EAX,4294967292
            ret 
.L_44fd20:

            mov EAX,4294967292
            jmp .L_44fcd6
.L_44fd27:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44fd30:

            mov RDX,QWORD PTR [RDI+8]
            test RDX,RDX
            je .L_44fd62

            mov RAX,QWORD PTR [RDI+16]
            cmp QWORD PTR [RAX+RDX*8-8],0
            je .L_44fd5c

            jmp .L_44fdf0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44fd50:

            cmp QWORD PTR [RAX+RDX*8-8],0
            jne .L_44fdf0
.L_44fd5c:

            sub RDX,1
            jne .L_44fd50
.L_44fd62:

            mov RCX,QWORD PTR [RSI+8]
            xor EDX,EDX
            test RCX,RCX
            je .L_44fe08
.L_44fd71:

            mov R8,QWORD PTR [RSI+16]
            cmp QWORD PTR [R8+RCX*8-8],0
            je .L_44fd88

            jmp .L_44fda0
          .byte 0x90
.L_44fd80:

            cmp QWORD PTR [R8+RCX*8-8],0
            jne .L_44fda0
.L_44fd88:

            sub RCX,1
            jne .L_44fd80

            xor EAX,EAX
            test RDX,RDX
            jne .L_44fda0
.L_44fd95:

            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fda0:

            cmp RCX,RDX
            jb .L_44fdfd

            mov ECX,DWORD PTR [RSI]
            ja .L_44fe00

            mov EAX,DWORD PTR [RDI]
            test EAX,EAX
            jle .L_44fe0b

            test ECX,ECX
            js .L_44fe23
.L_44fdb3:

            test RDX,RDX
            je .L_44fe08

            mov RCX,QWORD PTR [RDI+16]
            mov RDI,QWORD PTR [R8+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RDI
            ja .L_44fd95

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44fdd0:

            jb .L_44fe20

            sub RDX,1
            je .L_44fe08

            mov RSI,QWORD PTR [R8+RDX*8-8]
            cmp QWORD PTR [RCX+RDX*8-8],RSI
            jbe .L_44fdd0

            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fdf0:

            mov RCX,QWORD PTR [RSI+8]
            test RCX,RCX
            jne .L_44fd71
.L_44fdfd:

            mov EAX,DWORD PTR [RDI]
            ret 
.L_44fe00:

            mov EAX,ECX
            neg EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44fe08:

            xor EAX,EAX
            ret 
.L_44fe0b:

            test EAX,EAX
            jns .L_44fdb3

            test ECX,ECX
            jle .L_44fdb3

            or EAX,4294967295
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fe20:

            neg EAX
            ret 
.L_44fe23:

            mov EAX,1
            ret 
.L_44fe29:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44fe30:

            sub RSP,56
.L_44fe34:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RSI
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RSI,RAX
            mov QWORD PTR [RSP+32],RSI
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RSI,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_44fd30

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_44fe8e

            add RSP,56
.L_44fe8d:

            ret 
.L_44fe8e:

            call __stack_chk_fail@PLT
.L_44fe93:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44fea0:

            cmp RDI,RDX
            push R14
            push R13
            mov R13,RDI
            push R12
            push RBP
            push RBX
.L_44feae:

            mov RBX,RSI
            je .L_44fec9

            cmp RDI,RSI
            mov R12,RDX
            je .L_44fec6

            call .L_44f260

            test EAX,EAX
            mov EBP,EAX
            jne .L_44ff12
.L_44fec6:

            mov RBX,R12
.L_44fec9:

            mov R12,QWORD PTR [RBX+8]
            mov DWORD PTR [R13],1
            test R12,R12
            je .L_44fefe

            mov RAX,QWORD PTR [RBX+16]
            cmp QWORD PTR [RAX+R12*8-8],0
            je .L_44fef8

            jmp .L_44ff20
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_44fef0:

            cmp QWORD PTR [RAX+R12*8-8],0
            jne .L_44ff20
.L_44fef8:

            sub R12,1
            jne .L_44fef0
.L_44fefe:

            pop RBX
.L_44feff:

            mov RDI,R13
            xor ESI,ESI
            pop RBP
            pop R12
            pop R13
            pop R14
            jmp .L_44f0c0
.L_44ff10:

            mov EBP,EAX
.L_44ff12:

            pop RBX
            mov EAX,EBP
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_44ff20:

            mov RSI,R12
            mov RDI,R13
            call .L_44f0c0

            test EAX,EAX
            mov EBP,EAX
            jne .L_44ff12

            mov RAX,QWORD PTR [R13+16]
            mov RSI,QWORD PTR [RBX+16]
            xor EDX,EDX
            xor EBX,EBX
            nop
            nop
            nop
.L_44ff40:

            xor ECX,ECX
            add RBX,QWORD PTR [RAX]
            setb CL
            add RBX,QWORD PTR [RSI+RDX*8]
            adc RCX,0
            add RDX,1
            mov QWORD PTR [RAX],RBX
            add RAX,8
            cmp R12,RDX
            mov RBX,RCX
            ja .L_44ff40

            test RCX,RCX
            je .L_44ff12

            lea R12,QWORD PTR [RDX*8]
            jmp .L_44ff9c
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_44ff78:

            xor ECX,ECX
            add RBX,QWORD PTR [RAX]
            mov RDX,R14
            setb CL
            mov QWORD PTR [RAX],RBX
            add R12,8
            add RAX,8
            test RCX,RCX
            mov EBX,1
            je .L_44ff12
.L_44ff9c:

            cmp QWORD PTR [R13+8],RDX
            lea R14,QWORD PTR [RDX+1]
            ja .L_44ff78

            mov RSI,R14
            mov RDI,R13
            call .L_44f0c0

            test EAX,EAX
            jne .L_44ff10

            mov RAX,QWORD PTR [R13+16]
            add RAX,R12
            jmp .L_44ff78
.L_44ffc2:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_44ffd0:

            push R14
            push R13
            push R12
            push RBP
            mov R12,RSI
            push RBX
            mov RSI,RDX
            mov RBX,RDI
            mov RDI,R12
            mov RBP,RDX
            sub RSP,32
.L_44ffeb:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            call .L_44faa0

            test EAX,EAX
            js .L_4500f5

            cmp RBP,RBX
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],0
            mov QWORD PTR [RSP+16],0
            je .L_4500d8
.L_45002a:

            cmp R12,RBX
            je .L_450041

            mov RSI,R12
            mov RDI,RBX
            call .L_44f260

            test EAX,EAX
            mov R13D,EAX
            jne .L_45007a
.L_450041:

            mov RDI,QWORD PTR [RBP+8]
            mov DWORD PTR [RBX],1
            mov RSI,QWORD PTR [RBP+16]
            test RDI,RDI
            jne .L_450066

            jmp .L_45006e
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450060:

            sub RDI,1
            je .L_45006e
.L_450066:

            cmp QWORD PTR [RSI+RDI*8-8],0
            je .L_450060
.L_45006e:

            mov RDX,QWORD PTR [RBX+16]
            xor R13D,R13D
            call .L_44ec30
.L_45007a:

            mov RDI,QWORD PTR [RSP+16]
            test RDI,RDI
            je .L_4500b3

            mov RAX,QWORD PTR [RSP+8]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_4500ad

            mov RCX,RDI
            nop
            nop
            nop
.L_450098:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_450098
.L_4500ad:

            call QWORD PTR [RIP+.L_677120]
.L_4500b3:

            mov RBX,QWORD PTR [RSP+24]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_4500fd

            add RSP,32
.L_4500ca:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4500d8:

            mov R14,RSP
            mov RSI,RBP
            mov RDI,R14
            call .L_44f260

            test EAX,EAX
            mov R13D,EAX
            jne .L_45007a

            mov RBP,R14
            jmp .L_45002a
.L_4500f5:

            mov R13D,4294967286
            jmp .L_4500b3
.L_4500fd:

            call __stack_chk_fail@PLT
.L_450102:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450110:

            push RBP
            push RBX
            mov RBP,RDI
            mov R8,RSI
            mov R9,RDX
            sub RSP,8
            mov EBX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RDX]
            imul EAX,EBX
            test EAX,EAX
            jns .L_450158

            mov RSI,RDX
            mov RDI,R8
            call .L_44faa0

            test EAX,EAX
            js .L_450170

            mov RDX,R9
            mov RSI,R8
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            je .L_450161
.L_45014b:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450158:

            call .L_44fea0

            test EAX,EAX
            jne .L_45014b
.L_450161:

            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450170:

            mov RDX,R8
            mov RSI,R9
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            jne .L_45014b

            neg EBX
            mov DWORD PTR [RBP],EBX
            jmp .L_45014b
.L_450189:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450190:

            push RBP
            push RBX
            mov RBP,RDI
            mov R8,RSI
            mov R9,RDX
            sub RSP,8
            mov EBX,DWORD PTR [RSI]
            mov EAX,DWORD PTR [RDX]
            imul EAX,EBX
            test EAX,EAX
            jle .L_4501d8

            mov RSI,RDX
            mov RDI,R8
            call .L_44faa0

            test EAX,EAX
            js .L_4501f0

            mov RDX,R9
            mov RSI,R8
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            je .L_4501e1
.L_4501cb:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4501d8:

            call .L_44fea0

            test EAX,EAX
            jne .L_4501cb
.L_4501e1:

            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4501f0:

            mov RDX,R8
            mov RSI,R9
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            jne .L_4501cb

            neg EBX
            mov DWORD PTR [RBP],EBX
            add RSP,8
            pop RBX
            pop RBP
            ret 
.L_45020e:

            nop
            nop
.L_450210:

            sub RSP,56
.L_450214:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RDX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RDX,RAX
            mov QWORD PTR [RSP+32],RDX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RDX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_450110

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_45026e

            add RSP,56
.L_45026d:

            ret 
.L_45026e:

            call __stack_chk_fail@PLT
.L_450273:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450280:

            sub RSP,56
.L_450284:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RDX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RDX,RAX
            mov QWORD PTR [RSP+32],RDX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RDX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_450190

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4502de

            add RSP,56
.L_4502dd:

            ret 
.L_4502de:

            call __stack_chk_fail@PLT
.L_4502e3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4502f0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R14,RSI
            sub RSP,88
.L_450307:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+72],RAX
            xor EAX,EAX
            cmp RDI,RSI
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            je .L_450510
.L_450354:

            cmp R13,R15
            je .L_450530
.L_45035d:

            mov RBP,QWORD PTR [R14+8]
            test RBP,RBP
            je .L_450386

            mov RAX,QWORD PTR [R14+16]
            cmp QWORD PTR [RAX+RBP*8-8],0
            je .L_450380

            jmp .L_450386
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450378:

            cmp QWORD PTR [RAX+RBP*8-8],0
            jne .L_450386
.L_450380:

            sub RBP,1
            jne .L_450378
.L_450386:

            mov RBX,QWORD PTR [R15+8]
            test RBX,RBX
            je .L_4503b2

            mov RAX,QWORD PTR [R15+16]
            cmp QWORD PTR [RAX+RBX*8-8],0
            je .L_4503ac

            jmp .L_450488
.L_4503a0:

            cmp QWORD PTR [RAX+RBX*8-8],0
            jne .L_450488
.L_4503ac:

            sub RBX,1
            jne .L_4503a0
.L_4503b2:

            mov RSI,RBP
            mov RDI,R13
            call .L_44f0c0

            test EAX,EAX
            mov R12D,EAX
            je .L_4504a0
.L_4503c8:

            mov RDI,QWORD PTR [RSP+64]
            test RDI,RDI
            je .L_450403

            mov RAX,QWORD PTR [RSP+56]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_4503fd

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_4503e8:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4503e8
.L_4503fd:

            call QWORD PTR [RIP+.L_677120]
.L_450403:

            mov RDI,QWORD PTR [RSP+32]
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            test RDI,RDI
            je .L_45045b

            mov RAX,QWORD PTR [RSP+24]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_450455

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450440:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_450440
.L_450455:

            call QWORD PTR [RIP+.L_677120]
.L_45045b:

            mov RSI,QWORD PTR [RSP+72]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,R12D
            jne .L_450550

            add RSP,88
.L_450476:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450488:

            lea RSI,QWORD PTR [RBP+RBX*1]
            mov RDI,R13
            call .L_44f0c0

            test EAX,EAX
            mov R12D,EAX
            jne .L_4503c8
.L_4504a0:

            xor ESI,ESI
            mov RDI,R13
            call .L_44f530

            test EAX,EAX
            mov R12D,EAX
            jne .L_4503c8

            test RBX,RBX
            je .L_4504f7

            lea RAX,QWORD PTR [RBX*8-8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_4504c8:

            mov RDX,QWORD PTR [R15+16]
            mov RSI,QWORD PTR [R14+16]
            mov RDI,RBP
            mov QWORD PTR [RSP+8],RAX
            mov RCX,QWORD PTR [RDX+RAX*1]
            mov RDX,RAX
            add RDX,QWORD PTR [R13+16]
            call .L_44eca0

            mov RAX,QWORD PTR [RSP+8]
            sub RAX,8
            sub RBX,1
            jne .L_4504c8
.L_4504f7:

            mov EAX,DWORD PTR [R14]
            imul EAX,DWORD PTR [R15]
            mov DWORD PTR [R13],EAX
            jmp .L_4503c8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450510:

            lea R14,QWORD PTR [RSP+16]
            mov RSI,RDI
            mov RDI,R14
            call .L_44f260

            test EAX,EAX
            mov R12D,EAX
            jne .L_4503c8

            jmp .L_450354
.L_450530:

            lea R15,QWORD PTR [RSP+48]
            mov RSI,R13
            mov RDI,R15
            call .L_44f260

            test EAX,EAX
            mov R12D,EAX
            jne .L_4503c8

            jmp .L_45035d
.L_450550:

            call __stack_chk_fail@PLT
.L_450555:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450560:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,120
.L_45056e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+104],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_4508a0

            mov EBP,ESI
            mov RBX,RDI
            mov RDI,RDX
            mov R12,RDX
            mov DWORD PTR [RSP+32],1
            mov QWORD PTR [RSP+40],0
            mov QWORD PTR [RSP+48],0
            call strlen@PLT

            cmp EBP,16
            mov R13,RAX
            mov QWORD PTR [RSP+24],RAX
            jne .L_450670

            movabs RAX,4611686018427387903
            cmp R13,RAX
            ja .L_4508a0

            lea RSI,QWORD PTR [R13*4]
            xor EAX,EAX
            mov RDI,RBX
            test SIL,60
            setne AL
            shr RSI,6
            add RSI,RAX
            call .L_44f0c0

            test EAX,EAX
            je .L_4507d0
.L_450600:

            mov RDI,QWORD PTR [RSP+48]
            test RDI,RDI
            je .L_450643

            mov RCX,QWORD PTR [RSP+40]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_450635

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_450620:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_450620
.L_450635:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_450643:

            mov RBX,QWORD PTR [RSP+104]
            xor RBX,QWORD PTR FS:[40]
            jne .L_4508c6

            add RSP,120
.L_45065b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450670:

            xor ESI,ESI
            mov RDI,RBX
            call .L_44f530

            test EAX,EAX
            jne .L_450600

            cmp QWORD PTR [RSP+24],0
            je .L_45086d

            lea RAX,QWORD PTR [RSP+64]
            xor R13D,R13D
            lea R15,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+8],RAX
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+16],RAX
            jmp .L_4506ee
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4506b0:

            mov RDX,QWORD PTR [RSP+8]
            mov RSI,QWORD PTR [RSP+16]
            or EAX,1
            mov RDI,RBX
            mov DWORD PTR [RSP+64],EAX
            mov QWORD PTR [RSP+72],1
            mov QWORD PTR [RSP+80],R15
            call .L_450190

            test EAX,EAX
            jne .L_450600
.L_4506df:

            add R13,1
            cmp QWORD PTR [RSP+24],R13
            je .L_45086d
.L_4506ee:

            test R13,R13
            je .L_4508b0
.L_4506f7:

            movsx EDX,BYTE PTR [R12+R13*1]
            mov R14D,255
            lea ESI,DWORD PTR [RDX-48]
            mov EAX,EDX
            cmp SIL,9
            ja .L_450713

            lea ECX,DWORD PTR [RDX-48]
            movsxd R14,ECX
.L_450713:

            lea ESI,DWORD PTR [RAX-65]
            cmp SIL,5
            ja .L_450722

            lea ECX,DWORD PTR [RDX-55]
            movsxd R14,ECX
.L_450722:

            sub EAX,97
            cmp AL,5
            ja .L_45072f

            lea ECX,DWORD PTR [RDX-87]
            movsxd R14,ECX
.L_45072f:

            movsxd RAX,EBP
            cmp RAX,R14
            jbe .L_45081f

            mov RDX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [RSP+16]
            mov RSI,RBX
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],1
            mov QWORD PTR [RSP+80],R15
            mov QWORD PTR [RSP+96],RAX
            call .L_4502f0

            test EAX,EAX
            jne .L_450600

            mov RAX,R14
            mov ESI,DWORD PTR [RBX]
            sar RAX,63
            mov RDX,RAX
            xor RDX,R14
            sub RDX,RAX
            cmp ESI,1
            mov QWORD PTR [RSP+96],RDX
            jne .L_4506b0

            test R14,R14
            mov EAX,4294967295
            mov RDX,QWORD PTR [RSP+8]
            cmovs ESI,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+72],1
            mov DWORD PTR [RSP+64],ESI
            mov RSI,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+80],R15
            call .L_450110

            test EAX,EAX
            je .L_4506df

            jmp .L_450600
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4507d0:

            xor ESI,ESI
            mov RDI,RBX
            call .L_44f530

            test EAX,EAX
            jne .L_450600

            xor ESI,ESI
            test R13,R13
            je .L_45086d

            nop
            nop
            nop
.L_4507f0:

            cmp R13,1
            je .L_450880
.L_4507fa:

            sub R13,1
            movsx EDI,BYTE PTR [R12+R13*1]
            lea EDX,DWORD PTR [RDI-48]
            mov ECX,EDI
            lea R8D,DWORD PTR [RDI-97]
            cmp DL,9
            jbe .L_450878

            sub ECX,65
            cmp CL,5
            jbe .L_450830

            cmp R8B,5
            jbe .L_45083c
.L_45081f:

            mov EAX,4294967290
            jmp .L_450600
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450830:

            lea EDX,DWORD PTR [RDI-55]
            movsxd RDX,EDX
.L_450836:

            cmp R8B,5
            ja .L_450842
.L_45083c:

            lea EDX,DWORD PTR [RDI-87]
            movsxd RDX,EDX
.L_450842:

            cmp RDX,15
            ja .L_45081f

            lea ECX,DWORD PTR [RSI*4]
            mov RDI,QWORD PTR [RBX+16]
            mov R8,RSI
            shr R8,4
            add RSI,1
            and ECX,60
            shl RDX,CL
            or QWORD PTR [RDI+R8*8],RDX
            test R13,R13
            jne .L_4507f0
.L_45086d:

            xor EAX,EAX
            jmp .L_450600
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_450878:

            lea EDX,DWORD PTR [RDI-48]
            movsxd RDX,EDX
            jmp .L_450836
.L_450880:

            cmp BYTE PTR [R12],45
            jne .L_4507fa

            mov DWORD PTR [RBX],4294967295
            jmp .L_450600
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4508a0:

            mov EAX,4294967292
            jmp .L_450643
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4508b0:

            cmp BYTE PTR [R12],45
            jne .L_4506f7

            mov DWORD PTR [RBX],4294967295
            jmp .L_4506df
.L_4508c6:

            call __stack_chk_fail@PLT
.L_4508cb:

            nop
            nop
            nop
            nop
            nop
.L_4508d0:

            sub RSP,56
.L_4508d4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+32],RDX
            mov RDX,RSP
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov QWORD PTR [RSP+16],RAX
            call .L_4502f0

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            jne .L_450920

            add RSP,56
.L_45091f:

            ret 
.L_450920:

            call __stack_chk_fail@PLT
.L_450925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450930:

            push R15
            push R14
            mov R15,RDI
            push R13
            push R12
            mov RDI,RCX
            push RBP
            push RBX
            mov R12,RDX
            mov RBP,RCX
            sub RSP,360
.L_45094d:

            lea R14,QWORD PTR [RSP+304]
            lea R13,QWORD PTR [RSP+336]
            mov QWORD PTR [RSP+8],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+344],RAX
            xor EAX,EAX
            mov RSI,R14
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_44fd30

            test EAX,EAX
            je .L_451060

            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],0
            mov QWORD PTR [RSP+192],0
            mov DWORD PTR [RSP+208],1
            mov QWORD PTR [RSP+216],0
            mov QWORD PTR [RSP+224],0
            mov DWORD PTR [RSP+240],1
            mov QWORD PTR [RSP+248],0
            mov QWORD PTR [RSP+256],0
            mov DWORD PTR [RSP+272],1
            mov QWORD PTR [RSP+280],0
            mov QWORD PTR [RSP+288],0
            call .L_44faa0

            test EAX,EAX
            jns .L_450cb8

            test R15,R15
            je .L_450c90

            xor ESI,ESI
            mov RDI,R15
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            je .L_450c90

            nop
.L_450a90:

            mov RDI,QWORD PTR [RSP+160]
            test RDI,RDI
            je .L_450ad3

            mov RDX,QWORD PTR [RSP+152]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_450acd

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450ab8:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_450ab8
.L_450acd:

            call QWORD PTR [RIP+.L_677120]
.L_450ad3:

            mov RDI,QWORD PTR [RSP+192]
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            test RDI,RDI
            je .L_450b3b

            mov RDX,QWORD PTR [RSP+184]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_450b35

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_450b20:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_450b20
.L_450b35:

            call QWORD PTR [RIP+.L_677120]
.L_450b3b:

            mov RDI,QWORD PTR [RSP+224]
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],0
            mov QWORD PTR [RSP+192],0
            test RDI,RDI
            je .L_450b9b

            mov RDX,QWORD PTR [RSP+216]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_450b95

            mov RDX,RDI
            nop
.L_450b80:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_450b80
.L_450b95:

            call QWORD PTR [RIP+.L_677120]
.L_450b9b:

            mov RDI,QWORD PTR [RSP+256]
            mov DWORD PTR [RSP+208],1
            mov QWORD PTR [RSP+216],0
            mov QWORD PTR [RSP+224],0
            test RDI,RDI
            je .L_450bfb

            mov RDX,QWORD PTR [RSP+248]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_450bf5

            mov RDX,RDI
            nop
.L_450be0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_450be0
.L_450bf5:

            call QWORD PTR [RIP+.L_677120]
.L_450bfb:

            mov RDI,QWORD PTR [RSP+288]
            mov DWORD PTR [RSP+240],1
            mov QWORD PTR [RSP+248],0
            mov QWORD PTR [RSP+256],0
            test RDI,RDI
            je .L_450c5b

            mov RDX,QWORD PTR [RSP+280]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_450c55

            mov RDX,RDI
            nop
.L_450c40:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_450c40
.L_450c55:

            call QWORD PTR [RIP+.L_677120]
.L_450c5b:

            mov RCX,QWORD PTR [RSP+344]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_451078

            add RSP,360
.L_450c7b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_450c90:

            cmp QWORD PTR [RSP+8],0
            je .L_450caf

            mov RDI,QWORD PTR [RSP+8]
            mov RSI,R12
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90
.L_450caf:

            xor EBX,EBX
            jmp .L_450c5b
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_450cb8:

            lea RDI,QWORD PTR [RSP+144]
            mov RSI,R12
            mov QWORD PTR [RSP+16],RDI
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            lea RAX,QWORD PTR [RSP+176]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RAX,QWORD PTR [R12+8]
            mov DWORD PTR [RSP+176],1
            mov DWORD PTR [RSP+144],1
            lea RSI,QWORD PTR [RAX+2]
            lea RAX,QWORD PTR [RSP+208]
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_44f0c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RDI,QWORD PTR [RSP+32]
            xor ESI,ESI
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            lea RAX,QWORD PTR [RSP+240]
            mov ESI,2
            mov RDI,RAX
            mov QWORD PTR [RSP+104],RAX
            call .L_44f0c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            lea RAX,QWORD PTR [RSP+272]
            mov ESI,3
            mov RDI,RAX
            mov QWORD PTR [RSP+72],RAX
            call .L_44f0c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RDI,QWORD PTR [RSP+24]
            call .L_44f690

            and EAX,63
            cmp RAX,63
            je .L_45106a

            mov EDX,63
            mov RDI,QWORD PTR [RSP+16]
            sub RDX,RAX
            mov RSI,RDX
            mov QWORD PTR [RSP+48],RDX
            call .L_44f8b0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44f8b0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90
.L_450de9:

            mov RAX,QWORD PTR [RSP+152]
            mov RCX,QWORD PTR [RSP+184]
            mov RDI,QWORD PTR [RSP+24]
            mov QWORD PTR [RSP+80],RAX
            mov QWORD PTR [RSP+88],RCX
            sub RAX,1
            sub RCX,1
            mov QWORD PTR [RSP+40],RAX
            sub RAX,RCX
            mov QWORD PTR [RSP+56],RCX
            mov QWORD PTR [RSP+96],RAX
            shl RAX,6
            mov RSI,RAX
            mov QWORD PTR [RSP+64],RAX
            call .L_44f8b0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RDX,QWORD PTR [RSP+96]
            lea RAX,QWORD PTR [RDX*8]
            mov RBX,RAX
            jmp .L_450e78
.L_450e4f:

            mov RAX,QWORD PTR [RSP+224]
            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+24]
            add RAX,RBX
            mov RSI,RDI
            add QWORD PTR [RAX],1
            call .L_450190

            test EAX,EAX
            jne .L_4510d6
.L_450e78:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+16]
            call .L_44fd30

            test EAX,EAX
            jns .L_450e4f

            mov RSI,QWORD PTR [RSP+64]
            mov RDI,QWORD PTR [RSP+24]
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_450a90

            mov RAX,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+136],RBP
            mov RBP,QWORD PTR [RSP+104]
            mov QWORD PTR [RSP+120],R15
            mov DWORD PTR [RSP+116],EBX
            mov QWORD PTR [RSP+128],R12
            shl RAX,3
            mov QWORD PTR [RSP+64],RAX
            mov RAX,QWORD PTR [RSP+80]
            lea RCX,QWORD PTR [RAX*8-16]
            mov RAX,QWORD PTR [RSP+88]
            mov R15,RCX
            imul RSI,RAX,-8
            imul RAX,RAX,-64
            mov QWORD PTR [RSP+96],RSI
            mov QWORD PTR [RSP+88],RAX
.L_450ef7:

            mov RCX,QWORD PTR [RSP+56]
            cmp QWORD PTR [RSP+40],RCX
            jbe .L_45107d

            lea RCX,QWORD PTR [R15+8]
            mov RDX,QWORD PTR [RSP+192]
            mov RAX,QWORD PTR [RSP+160]
            mov R9,QWORD PTR [RSP+224]
            mov QWORD PTR [RSP+80],RCX
            mov RCX,QWORD PTR [RSP+64]
            mov RSI,QWORD PTR [RAX+R15*1+8]
            mov RDX,QWORD PTR [RDX+RCX*1]
            mov RCX,QWORD PTR [RSP+96]
            lea RBX,QWORD PTR [RCX+R15*1+8]
            cmp RSI,RDX
            lea R12,QWORD PTR [R9+RBX*1]
            jb .L_45114a

            mov QWORD PTR [R12],-1
.L_450f55:

            add QWORD PTR [R12],1
            mov R12,QWORD PTR [RSP+64]
            jmp .L_450fa3
.L_450f61:

            mov RCX,QWORD PTR [RDX+R15*1-8]
.L_450f66:

            mov RAX,QWORD PTR [RSP+288]
            mov RSI,QWORD PTR [RSP+72]
            mov RDI,RBP
            mov QWORD PTR [RAX],RCX
            mov RCX,QWORD PTR [RDX+R15*1]
            mov QWORD PTR [RAX+8],RCX
            mov RCX,QWORD PTR [RSP+80]
            mov RDX,QWORD PTR [RDX+RCX*1]
            mov QWORD PTR [RAX+16],RDX
            call .L_44fd30

            test EAX,EAX
            jle .L_45117f

            mov R9,QWORD PTR [RSP+224]
.L_450fa3:

            sub QWORD PTR [R9+RBX*1],1
            xor ESI,ESI
            mov RDI,RBP
            call .L_44f530

            test EAX,EAX
            jne .L_4510d6

            xor ECX,ECX
            cmp QWORD PTR [RSP+56],0
            mov RDX,QWORD PTR [RSP+192]
            je .L_450fd1

            mov RCX,QWORD PTR [RDX+R12*1-8]
.L_450fd1:

            mov RAX,QWORD PTR [RSP+256]
            mov RSI,RBP
            mov RDI,RBP
            mov QWORD PTR [RAX],RCX
            mov RDX,QWORD PTR [RDX+R12*1]
            mov QWORD PTR [RAX+8],RDX
            mov RAX,QWORD PTR [RSP+224]
            mov RDX,R14
            mov RAX,QWORD PTR [RAX+RBX*1]
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            mov QWORD PTR [RSP+336],RAX
            call .L_4502f0

            test EAX,EAX
            jne .L_4510d6

            mov RDI,QWORD PTR [RSP+72]
            xor ESI,ESI
            call .L_44f530

            test EAX,EAX
            jne .L_4510d6

            cmp QWORD PTR [RSP+40],1
            mov RDX,QWORD PTR [RSP+160]
            jne .L_450f61

            xor ECX,ECX
            jmp .L_450f66
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_451060:

            mov EBX,4294967284
            jmp .L_450c5b
.L_45106a:

            mov QWORD PTR [RSP+48],0
            jmp .L_450de9
.L_451078:

            call __stack_chk_fail@PLT
.L_45107d:

            mov R15,QWORD PTR [RSP+120]
            mov EBX,DWORD PTR [RSP+116]
            mov R12,QWORD PTR [RSP+128]
            mov RBP,QWORD PTR [RSP+136]
            test R15,R15
            je .L_4510b7

            mov RSI,QWORD PTR [RSP+32]
            mov RDI,R15
            call .L_44f260

            test EAX,EAX
            jne .L_4510d6

            mov EAX,DWORD PTR [R12]
            imul EAX,DWORD PTR [RBP]
            mov DWORD PTR [R15],EAX
.L_4510b7:

            cmp QWORD PTR [RSP+8],0
            je .L_450a90

            mov RSI,QWORD PTR [RSP+48]
            mov RDI,QWORD PTR [RSP+16]
            call .L_44f9c0

            test EAX,EAX
            je .L_4510dd
.L_4510d6:

            mov EBX,EAX
            jmp .L_450a90
.L_4510dd:

            mov R15,QWORD PTR [RSP+8]
            mov EAX,DWORD PTR [R12]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,R15
            mov DWORD PTR [RSP+144],EAX
            call .L_44f260

            test EAX,EAX
            jne .L_4510d6

            mov RSI,R14
            mov RDI,R15
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_44fd30

            test EAX,EAX
            jne .L_450a90

            mov DWORD PTR [R15],1
            xor EBX,EBX
            jmp .L_450a90
.L_45114a:

            mov RDI,QWORD PTR [RAX+R15*1]
            or RAX,-1
            test RDX,RDX
            je .L_451176

            xor ECX,ECX
            mov QWORD PTR [RSP+104],R9
            call __udivti3@PLT

            mov R9,QWORD PTR [RSP+104]
            test RDX,RDX
            mov RCX,-1
            cmovne RAX,RCX
.L_451176:

            mov QWORD PTR [R12],RAX
            jmp .L_450f55
.L_45117f:

            mov RAX,QWORD PTR [RSP+224]
            mov RSI,QWORD PTR [RSP+24]
            mov RDX,R14
            mov RDI,RBP
            mov RAX,QWORD PTR [RAX+RBX*1]
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            mov QWORD PTR [RSP+336],RAX
            call .L_4502f0

            test EAX,EAX
            jne .L_4510d6

            mov RAX,QWORD PTR [RSP+40]
            mov RCX,QWORD PTR [RSP+88]
            mov RDI,RBP
            shl RAX,6
            lea R12,QWORD PTR [RAX+RCX*1]
            mov RSI,R12
            call .L_44f8b0

            test EAX,EAX
            jne .L_4510d6

            mov RAX,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RAX
            mov RDI,RAX
            call .L_450190

            test EAX,EAX
            jne .L_4510d6

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R14
            mov QWORD PTR [RSP+336],0
            mov DWORD PTR [RSP+304],1
            mov QWORD PTR [RSP+312],1
            mov QWORD PTR [RSP+320],R13
            call .L_44fd30

            test EAX,EAX
            js .L_451255
.L_451246:

            sub QWORD PTR [RSP+40],1
            sub R15,8
            jmp .L_450ef7
.L_451255:

            mov RSI,QWORD PTR [RSP+24]
            mov RDI,RBP
            call .L_44f260

            test EAX,EAX
            jne .L_4510d6

            mov RSI,R12
            mov RDI,RBP
            call .L_44f8b0

            test EAX,EAX
            jne .L_4510d6

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_450110

            test EAX,EAX
            jne .L_4510d6

            add RBX,QWORD PTR [RSP+224]
            sub QWORD PTR [RBX],1
            jmp .L_451246
.L_4512a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4512b0:

            sub RSP,56
.L_4512b4:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RAX,RCX
            mov QWORD PTR [RSP+8],1
            sar RAX,63
            xor RCX,RAX
            mov QWORD PTR [RSP+32],RCX
            sub QWORD PTR [RSP+32],RAX
            or EAX,1
            mov DWORD PTR [RSP],EAX
            lea RAX,QWORD PTR [RSP+32]
            mov RCX,RSP
            mov QWORD PTR [RSP+16],RAX
            call .L_450930

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            jne .L_45130e

            add RSP,56
.L_45130d:

            ret 
.L_45130e:

            call __stack_chk_fail@PLT
.L_451313:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451320:

            push R14
            push R13
            mov R9,RSI
            push R12
            push RBP
            mov RBP,RDX
            push RBX
            mov RBX,RDI
            mov RDI,RDX
            sub RSP,48
.L_451338:

            lea R13,QWORD PTR [RSP+32]
            mov R12,RSP
            mov QWORD PTR [RSP+32],0
            mov RSI,R12
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+16],R13
            call .L_44fd30

            test EAX,EAX
            js .L_451435

            xor EDI,EDI
            mov RCX,RBP
            mov RDX,R9
            mov RSI,RBX
            call .L_450930

            test EAX,EAX
            mov R14D,EAX
            je .L_4513b2

            jmp .L_451410
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4513a0:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_450110

            test EAX,EAX
            jne .L_451430
.L_4513b2:

            mov RSI,R12
            mov RDI,RBX
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP],1
            mov QWORD PTR [RSP+8],1
            mov QWORD PTR [RSP+16],R13
            call .L_44fd30

            test EAX,EAX
            js .L_4513a0

            jmp .L_4513fa
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4513e8:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_450190

            test EAX,EAX
            jne .L_451430
.L_4513fa:

            mov RSI,RBP
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            jns .L_4513e8

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451410:

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,R14D
            jne .L_45143d

            add RSP,48
.L_451427:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
.L_451430:

            mov R14D,EAX
            jmp .L_451410
.L_451435:

            mov R14D,4294967286
            jmp .L_451410
.L_45143d:

            call __stack_chk_fail@PLT
.L_451442:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451450:

            test RDX,RDX
            mov R8,RDX
            je .L_4514f4

            js .L_4514fa

            cmp RDX,1
            je .L_4514e0

            cmp RDX,2
            je .L_4514c8

            mov R9,QWORD PTR [RSI+8]
            test R9,R9
            je .L_4514f0

            mov R10,QWORD PTR [RSI+16]
            xor EDX,EDX
            nop
            nop
            nop
.L_451480:

            mov RCX,QWORD PTR [R10+R9*8-8]
            shl RDX,32
            mov RAX,RCX
            shr RAX,32
            or RAX,RDX
            xor EDX,EDX
            div R8
            mov EAX,ECX
            shl RDX,32
            or RAX,RDX
            xor EDX,EDX
            div R8
            sub R9,1
            jne .L_451480

            mov EAX,DWORD PTR [RSI]
            test EAX,EAX
            jns .L_4514bc

            sub R8,RDX
            test RDX,RDX
            cmovne RDX,R8
.L_4514bc:

            mov QWORD PTR [RDI],RDX
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4514c8:

            mov RAX,QWORD PTR [RSI+16]
            mov RAX,QWORD PTR [RAX]
            and EAX,1
            mov QWORD PTR [RDI],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4514e0:

            mov QWORD PTR [RDI],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4514f0:

            xor EDX,EDX
            jmp .L_4514bc
.L_4514f4:

            mov EAX,4294967284
            ret 
.L_4514fa:

            mov EAX,4294967286
            ret 
.L_451500:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,72
.L_45150e:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+56],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_451610

            movsxd R11,ESI
            mov RBP,RDI
            lea RDI,QWORD PTR [RSP+8]
            mov R12D,ESI
            mov R13,RDX
            mov RSI,RBP
            mov RDX,R11
            call .L_451450

            test EAX,EAX
            mov EBX,EAX
            jne .L_4515d8

            lea R14,QWORD PTR [RSP+16]
            lea R15,QWORD PTR [RSP+48]
            xor ESI,ESI
            mov RDX,RBP
            mov RDI,RBP
            mov QWORD PTR [RSP+48],R11
            mov RCX,R14
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],1
            mov QWORD PTR [RSP+32],R15
            call .L_450930

            test EAX,EAX
            mov EBX,EAX
            jne .L_4515d8

            mov RSI,R14
            mov RDI,RBP
            mov QWORD PTR [RSP+48],0
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],1
            mov QWORD PTR [RSP+32],R15
            call .L_44fd30

            test EAX,EAX
            jne .L_451620
.L_4515b9:

            mov RAX,QWORD PTR [RSP+8]
            mov RDX,QWORD PTR [R13]
            cmp RAX,9
            lea RCX,QWORD PTR [RDX+1]
            jbe .L_451600

            add EAX,55
            mov QWORD PTR [R13],RCX
            mov BYTE PTR [RDX],AL
            nop
            nop
            nop
.L_4515d8:

            mov RCX,QWORD PTR [RSP+56]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_451636

            add RSP,72
.L_4515ee:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451600:

            add EAX,48
            mov QWORD PTR [R13],RCX
            mov BYTE PTR [RDX],AL
            jmp .L_4515d8
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451610:

            mov EBX,4294967292
            jmp .L_4515d8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451620:

            mov RDX,R13
            mov ESI,R12D
            mov RDI,RBP
            call .L_451500

            test EAX,EAX
            je .L_4515b9

            mov EBX,EAX
            jmp .L_4515d8
.L_451636:

            call __stack_chk_fail@PLT
.L_45163b:

            nop
            nop
            nop
            nop
            nop
.L_451640:

            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,48
.L_45164c:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            lea EAX,DWORD PTR [RSI-2]
            cmp EAX,14
            ja .L_451860

            mov R12D,ESI
            mov RBX,RDX
            mov R10,RCX
            mov R9,RDI
            mov RBP,R8
            call .L_44f690

            mov RDX,RAX
            shr RDX,1
            cmp R12D,3
            cmovg RAX,RDX
            mov RDX,RAX
            shr RDX,1
            cmp R12D,16
            cmove RAX,RDX
            lea RDX,QWORD PTR [RAX+1]
            and EDX,1
            lea RAX,QWORD PTR [RDX+RAX*1+3]
            cmp RAX,R10
            ja .L_451868

            cmp DWORD PTR [R9],-1
            mov QWORD PTR [RSP+8],RBX
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            jne .L_4516de

            lea RAX,QWORD PTR [RBX+1]
            mov BYTE PTR [RBX],45
            mov QWORD PTR [RSP+8],RAX
.L_4516de:

            cmp R12D,16
            jne .L_451818

            mov RAX,QWORD PTR [R9+8]
            test RAX,RAX
            je .L_451796

            lea R10,QWORD PTR [RAX+8]
            lea R8,QWORD PTR [RAX*8-8]
            lea RDI,QWORD PTR [RIP+.L_45ef2e]
            xor R11D,R11D
            nop
            nop
            nop
            nop
            nop
.L_451710:

            mov RSI,R10
            mov ECX,56
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451720:

            mov RAX,QWORD PTR [R9+16]
            mov RAX,QWORD PTR [RAX+R8*1]
            shr RAX,CL
            mov EDX,EAX
            and EDX,255
            jne .L_451740

            test R11,R11
            jne .L_451740

            cmp RSI,2
            jne .L_451778
.L_451740:

            sar EDX,4
            mov R11,QWORD PTR [RSP+8]
            and EAX,15
            movsxd RDX,EDX
            movzx EAX,BYTE PTR [RDI+RAX*1]
            movzx EDX,BYTE PTR [RDI+RDX*1]
            lea R12,QWORD PTR [R11+1]
            mov QWORD PTR [RSP+8],R12
            mov BYTE PTR [R11],DL
            mov RDX,QWORD PTR [RSP+8]
            lea R11,QWORD PTR [RDX+1]
            mov QWORD PTR [RSP+8],R11
            mov BYTE PTR [RDX],AL
            mov R11D,1
.L_451778:

            sub ECX,8
            sub RSI,1
            cmp ECX,-8
            jne .L_451720

            sub R10,1
            sub R8,8
            cmp R10,8
            jne .L_451710
.L_451796:

            mov RAX,QWORD PTR [RSP+8]
            xor R13D,R13D
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+8],RDX
            mov BYTE PTR [RAX],0
            mov RAX,QWORD PTR [RSP+8]
            sub RAX,RBX
            mov QWORD PTR [RBP],RAX
.L_4517b6:

            mov RDI,QWORD PTR [RSP+32]
            test RDI,RDI
            je .L_4517f3

            mov RAX,QWORD PTR [RSP+24]
            test RAX,RAX
            lea RDX,QWORD PTR [RAX-1]
            je .L_4517ed

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4517d8:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_4517d8
.L_4517ed:

            call QWORD PTR [RIP+.L_677120]
.L_4517f3:

            mov RBX,QWORD PTR [RSP+40]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,R13D
            jne .L_451873

            add RSP,48
.L_45180a:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451818:

            lea R14,QWORD PTR [RSP+16]
            mov RSI,R9
            mov RDI,R14
            call .L_44f260

            test EAX,EAX
            mov R13D,EAX
            jne .L_4517b6

            cmp DWORD PTR [RSP+16],-1
            je .L_451856
.L_451836:

            lea RDX,QWORD PTR [RSP+8]
            mov ESI,R12D
            mov RDI,R14
            call .L_451500

            test EAX,EAX
            mov R13D,EAX
            je .L_451796

            jmp .L_4517b6
.L_451856:

            mov DWORD PTR [RSP+16],1
            jmp .L_451836
.L_451860:

            mov R13D,4294967292
            jmp .L_4517f3
.L_451868:

            mov QWORD PTR [R8],RAX
            mov R13D,4294967288
            jmp .L_4517f3
.L_451873:

            call __stack_chk_fail@PLT
.L_451878:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451880:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RDI,RCX
            mov R13,RDX
            mov RBP,RCX
            sub RSP,328
.L_45189d:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+312],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+176]
            lea R14,QWORD PTR [RSP+208]
            mov QWORD PTR [RSP+16],RSI
            mov QWORD PTR [RSP],R8
            mov QWORD PTR [RSP+208],0
            mov RSI,RAX
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],1
            mov QWORD PTR [RSP+192],R14
            mov QWORD PTR [RSP+8],RAX
            call .L_44fd30

            test EAX,EAX
            js .L_451f80

            mov RAX,QWORD PTR [RBP+16]
            mov R9,QWORD PTR [RAX]
            test R9B,1
            je .L_451f80

            mov RSI,QWORD PTR [RSP+8]
            mov RDI,R13
            call .L_44fd30

            test EAX,EAX
            js .L_451f80

            lea R8,QWORD PTR [R9+R9*1+4]
            mov EAX,4
            mov ECX,2
            and R8D,8
            lea R15,QWORD PTR [R8+R9*1]
.L_451946:

            mov RDX,R9
            mov RBX,RCX
            imul RDX,R15
            sub RBX,RDX
            imul R15,RBX
            sub EAX,1
            jne .L_451946

            xor EAX,EAX
            mov ECX,12
            mov RDI,R14

            rep stosq QWORD PTR [RDI]

            mov RAX,QWORD PTR [RBP+8]
            mov RDI,R12
            mov DWORD PTR [RSP+80],1
            mov QWORD PTR [RSP+88],0
            mov QWORD PTR [RSP+96],0
            mov DWORD PTR [RSP+112],1
            mov QWORD PTR [RSP+120],0
            lea RBX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+128],0
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            mov RSI,RBX
            call .L_44f0c0

            test EAX,EAX
            jne .L_451cc8

            lea RDI,QWORD PTR [R14+24]
            mov RSI,RBX
            call .L_44f0c0

            test EAX,EAX
            jne .L_451cc8

            lea RAX,QWORD PTR [RSP+112]
            lea RSI,QWORD PTR [RBX+RBX*1]
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44f0c0

            test EAX,EAX
            jne .L_451cc8

            mov RAX,QWORD PTR [RSP+16]
            mov EAX,DWORD PTR [RAX]
            cmp EAX,-1
            mov DWORD PTR [RSP+36],EAX
            je .L_451f08
.L_451a24:

            mov RAX,QWORD PTR [RSP]
            test RAX,RAX
            je .L_451e98

            cmp QWORD PTR [RAX+16],0
            je .L_451e98

            mov RAX,QWORD PTR [RSP]
            movdqu XMM0,XMMWORD PTR [RAX]
            mov RAX,QWORD PTR [RAX+16]
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+96],RAX
.L_451a52:

            mov RBX,QWORD PTR [RSP+16]
            mov RSI,RBP
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            lea RDI,QWORD PTR [R14+24]
            js .L_451f68

            mov RDX,RBP
            mov RSI,RBX
            call .L_451320

            test EAX,EAX
            jne .L_451cc8
.L_451a81:

            mov R8,R15
            lea R15,QWORD PTR [RSP+80]
            sub RSP,8
.L_451a8d:

            neg R8
            lea RDI,QWORD PTR [R14+24]
            mov RCX,RBP
            mov QWORD PTR [RSP+24],R8
            mov RAX,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [R15+16]
            lea RSI,QWORD PTR [R15+8]
            lea RBX,QWORD PTR [RAX+16]
            push RBX
            mov R9,QWORD PTR [RSP+136]
            call .L_44fb80

            test EAX,EAX
            pop RDX
            pop RCX
.L_451abf:

            jne .L_451cc8

            mov RSI,R15
            mov RDI,R12
            call .L_44f260

            test EAX,EAX
            jne .L_451cc8

            lea RAX,QWORD PTR [RSP+72]
            mov QWORD PTR [RSP+72],1
            mov DWORD PTR [RSP+176],1
            mov QWORD PTR [RSP+184],1
            sub RSP,8
.L_451b01:

            mov RCX,RBP
            mov QWORD PTR [RSP+64],RAX
            mov QWORD PTR [RSP+200],RAX
            mov RDI,R12
            mov RAX,QWORD PTR [RSP+16]
            push RBX
            mov R9,QWORD PTR [RSP+136]
            mov R8,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+8]
            call .L_44fb80

            test EAX,EAX
            pop R10
            pop R11
.L_451b3a:

            jne .L_451cc8

            mov R15,QWORD PTR [R13+8]
            mov R9,QWORD PTR [RSP+120]
            xor EDI,EDI
            xor EBX,EBX
.L_451b4d:

            test RBX,RBX
            je .L_451c1d
.L_451b56:

            sub RBX,1
            mov ECX,EBX
.L_451b5c:

            mov RAX,QWORD PTR [R13+16]
            mov RSI,RDI
            mov RAX,QWORD PTR [RAX+R15*8]
            shr RAX,CL
            mov R10,RAX
            and R10D,1
            or RSI,R10
            je .L_451f40

            not RAX
            lea RSI,QWORD PTR [R12+8]
            lea RDX,QWORD PTR [R12+16]
            test RAX,RDI
            jne .L_451f50

            mov QWORD PTR [RSP+48],R10
            sub RSP,8
.L_451b99:

            mov RDI,R12
            mov RAX,QWORD PTR [RSP+32]
            mov RCX,RBP
            lea R11,QWORD PTR [RAX+16]
            push R11
            mov R8,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+56],R11
            call .L_44fb80

            pop RSI
            test EAX,EAX
            pop RDI
            mov R11,QWORD PTR [RSP+40]
            mov R10,QWORD PTR [RSP+48]
            jne .L_451cc8

            lea RAX,QWORD PTR [R10+R10*1]
            sub RSP,8
            push R11
            mov R9,QWORD PTR [RSP+136]
            add R10,RAX
            lea RSI,QWORD PTR [R14+R10*8]
            lea RDX,QWORD PTR [RSI+16]
            add RSI,8
.L_451bee:

            mov R8,QWORD PTR [RSP+32]
            mov RCX,RBP
            mov RDI,R12
            call .L_44fb80

            test EAX,EAX
            pop R8
            pop R9
.L_451c04:

            jne .L_451cc8

            test RBX,RBX
            mov R9,QWORD PTR [RSP+120]
            mov EDI,1
            jne .L_451b56
.L_451c1d:

            test R15,R15
            je .L_451c38

            sub R15,1
            mov EBX,63
            mov ECX,63
            jmp .L_451b5c
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_451c38:

            mov RAX,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+72],1
            sub RSP,8
.L_451c4a:

            mov DWORD PTR [RSP+184],1
            mov QWORD PTR [RSP+192],1
            mov RCX,RBP
            mov RDI,R12
            mov QWORD PTR [RSP+200],RAX
            mov RAX,QWORD PTR [RSP+16]
            lea RDX,QWORD PTR [RAX+16]
            lea RSI,QWORD PTR [RAX+8]
            mov RAX,QWORD PTR [RSP+32]
            add RAX,16
            push RAX
            mov R8,QWORD PTR [RSP+32]
            call .L_44fb80

            test EAX,EAX
            pop RDX
            pop RCX
.L_451c94:

            jne .L_451cc8

            cmp DWORD PTR [RSP+36],-1
            jne .L_451cc8

            cmp QWORD PTR [R13+8],0
            je .L_451cc8

            mov RDX,QWORD PTR [R13+16]
            test BYTE PTR [RDX],1
            je .L_451cc8

            mov EAX,DWORD PTR [RSP+36]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R12
            mov DWORD PTR [R12],EAX
            call .L_450110

            nop
            nop
            nop
            nop
            nop
.L_451cc8:

            lea RDI,QWORD PTR [R14+24]
            mov DWORD PTR [RSP+8],EAX
            call .L_44f050

            mov RDI,QWORD PTR [RSP+248]
            mov EAX,DWORD PTR [RSP+8]
            test RDI,RDI
            je .L_451d23

            mov RCX,QWORD PTR [RSP+240]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_451d15

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
.L_451d00:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_451d00
.L_451d15:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_451d23:

            mov RDI,QWORD PTR [RSP+128]
            mov DWORD PTR [RSP+232],1
            mov QWORD PTR [RSP+240],0
            mov QWORD PTR [RSP+248],0
            test RDI,RDI
            je .L_451d8b

            mov RCX,QWORD PTR [RSP+120]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_451d7d

            mov RCX,RDI
            nop
            nop
            nop
            nop
.L_451d68:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_451d68
.L_451d7d:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_451d8b:

            mov RDI,QWORD PTR [RSP+160]
            mov DWORD PTR [RSP+112],1
            mov QWORD PTR [RSP+120],0
            mov QWORD PTR [RSP+128],0
            test RDI,RDI
            je .L_451df3

            mov RCX,QWORD PTR [RSP+152]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_451de5

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_451dd0:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_451dd0
.L_451de5:

            mov DWORD PTR [RSP+8],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+8]
.L_451df3:

            mov RSI,QWORD PTR [RSP]
            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+152],0
            mov QWORD PTR [RSP+160],0
            test RSI,RSI
            je .L_451e50

            cmp QWORD PTR [RSI+16],0
            je .L_451e50
.L_451e26:

            mov RBX,QWORD PTR [RSP+312]
            xor RBX,QWORD PTR FS:[40]
            jne .L_451f8a

            add RSP,328
.L_451e44:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x90
.L_451e50:

            mov RDI,QWORD PTR [RSP+96]
            test RDI,RDI
            je .L_451e26

            mov RCX,QWORD PTR [RSP+88]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_451e85

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_451e70:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_451e70
.L_451e85:

            mov DWORD PTR [RSP],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP]
            jmp .L_451e26
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451e98:

            lea RBX,QWORD PTR [RSP+80]
            mov ESI,1
            mov RDI,RBX
            call .L_44f530

            test EAX,EAX
            jne .L_451cc8

            mov RSI,QWORD PTR [RBP+8]
            mov RDI,RBX
            shl RSI,7
            call .L_44f8b0

            test EAX,EAX
            jne .L_451cc8

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_451320

            test EAX,EAX
            jne .L_451cc8

            mov RSI,QWORD PTR [RSP]
            test RSI,RSI
            je .L_451a52

            mov RAX,QWORD PTR [RBX+16]
            movdqa XMM0,XMMWORD PTR [RBX]
            mov QWORD PTR [RSI+16],RAX
            movups XMMWORD PTR [RSI],XMM0
            jmp .L_451a52
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451f08:

            lea RBX,QWORD PTR [RSP+144]
            mov RSI,QWORD PTR [RSP+16]
            mov RDI,RBX
            call .L_44f260

            test EAX,EAX
            jne .L_451cc8

            mov DWORD PTR [RSP+144],1
            mov QWORD PTR [RSP+16],RBX
            jmp .L_451a24
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451f40:

            xor EDI,EDI
            jmp .L_451b4d
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_451f50:

            sub RSP,8
.L_451f54:

            mov RAX,QWORD PTR [RSP+32]
            add RAX,16
            push RAX
            jmp .L_451bee
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_451f68:

            mov RSI,QWORD PTR [RSP+16]
            call .L_44f260

            test EAX,EAX
            je .L_451a81

            jmp .L_451cc8
          .byte 0x90
.L_451f80:

            mov EAX,4294967292
            jmp .L_451e26
.L_451f8a:

            call __stack_chk_fail@PLT
.L_451f8f:

            nop
.L_451f90:

            push R15
            push R14
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov R13,RDX
            sub RSP,136
.L_451fa7:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+32],0
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],0
            mov QWORD PTR [RSP+64],0
            call .L_44f260

            test EAX,EAX
            je .L_4520d0
.L_452000:

            mov RDI,QWORD PTR [RSP+32]
            test RDI,RDI
            je .L_452043

            mov RCX,QWORD PTR [RSP+24]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_452035

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
.L_452020:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_452020
.L_452035:

            mov DWORD PTR [RSP+12],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+12]
.L_452043:

            mov RDI,QWORD PTR [RSP+64]
            mov DWORD PTR [RSP+16],1
            mov QWORD PTR [RSP+24],0
            mov QWORD PTR [RSP+32],0
            test RDI,RDI
            je .L_4520a3

            mov RCX,QWORD PTR [RSP+56]
            test RCX,RCX
            lea RDX,QWORD PTR [RCX-1]
            je .L_452095

            mov RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452080:

            sub RDX,1
            mov QWORD PTR [RCX],0
            add RCX,8
            cmp RDX,-1
            jne .L_452080
.L_452095:

            mov DWORD PTR [RSP+12],EAX
            call QWORD PTR [RIP+.L_677120]

            mov EAX,DWORD PTR [RSP+12]
.L_4520a3:

            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            jne .L_45238b

            add RSP,136
.L_4520be:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4520d0:

            lea RBP,QWORD PTR [RSP+48]
            mov RSI,R13
            mov RDI,RBP
            call .L_44f260

            test EAX,EAX
            jne .L_452000

            mov R9,QWORD PTR [RSP+24]
            test R9,R9
            je .L_452359

            mov R10,QWORD PTR [RSP+32]
            xor ECX,ECX
            xor R8D,R8D
.L_452100:

            mov RSI,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RCX+64]
            mov RAX,RCX
            jmp .L_45211d

            nop
            nop
            nop
.L_452110:

            add RAX,1
            cmp RAX,RDI
            je .L_45233a
.L_45211d:

            mov EDX,EAX
            sub EDX,ECX
            bt RSI,RDX
            jae .L_452110
.L_452127:

            mov R13,QWORD PTR [RSP+56]
            test R13,R13
            je .L_452171

            mov R10,QWORD PTR [RSP+64]
            xor ESI,ESI
            xor R9D,R9D
.L_45213b:

            mov RDI,QWORD PTR [R10+R9*8]
            lea R8,QWORD PTR [RSI+64]
            mov RDX,RSI
            jmp .L_45215d

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452150:

            add RDX,1
            cmp RDX,R8
            je .L_452329
.L_45215d:

            mov ECX,EDX
            sub ECX,ESI
            bt RDI,RCX
            jae .L_452150

            cmp RAX,RDX
            cmovbe RDX,RAX
            mov R13,RDX
.L_452171:

            mov RSI,R13
            mov RDI,RBX
            call .L_44f9c0

            test EAX,EAX
            jne .L_452000

            mov RSI,R13
            mov RDI,RBP
            call .L_44f9c0

            test EAX,EAX
            jne .L_452000

            lea R15,QWORD PTR [RSP+112]
            lea R14,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+48],1
            mov DWORD PTR [RSP+16],1
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4521b8:

            mov RSI,R14
            mov RDI,RBX
            mov QWORD PTR [RSP+112],0
            mov DWORD PTR [RSP+80],1
            mov QWORD PTR [RSP+88],1
            mov QWORD PTR [RSP+96],R15
            call .L_44fd30

            test EAX,EAX
            je .L_452360

            mov R9,QWORD PTR [RSP+24]
            test R9,R9
            je .L_45234b

            mov R10,QWORD PTR [RSP+32]
            xor EDX,EDX
            xor R8D,R8D
.L_452202:

            mov RCX,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RDX+64]
            mov RSI,RDX
            jmp .L_45221d
          .byte 0x90
.L_452210:

            add RSI,1
            cmp RSI,RDI
            je .L_452300
.L_45221d:

            mov EAX,ESI
            sub EAX,EDX
            bt RCX,RAX
            jae .L_452210
.L_452227:

            mov RDI,RBX
            call .L_44f9c0

            test EAX,EAX
            jne .L_452000

            mov R9,QWORD PTR [RSP+56]
            test R9,R9
            je .L_452352

            mov R10,QWORD PTR [RSP+64]
            xor EDX,EDX
            xor R8D,R8D
.L_45224f:

            mov RCX,QWORD PTR [R10+R8*8]
            lea RDI,QWORD PTR [RDX+64]
            mov RSI,RDX
            jmp .L_45226d
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_452260:

            add RSI,1
            cmp RSI,RDI
            je .L_452318
.L_45226d:

            mov EAX,ESI
            sub EAX,EDX
            bt RCX,RAX
            jae .L_452260
.L_452277:

            mov RDI,RBP
            call .L_44f9c0

            test EAX,EAX
            jne .L_452000

            mov RSI,RBP
            mov RDI,RBX
            call .L_44fd30

            test EAX,EAX
            js .L_4522d0

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_44ffd0

            test EAX,EAX
            jne .L_452000

            mov ESI,1
            mov RDI,RBX
            call .L_44f9c0

            test EAX,EAX
            je .L_4521b8

            jmp .L_452000
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4522d0:

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,RBP
            call .L_44ffd0

            test EAX,EAX
            jne .L_452000

            mov ESI,1
            mov RDI,RBP
            call .L_44f9c0

            test EAX,EAX
            je .L_4521b8

            jmp .L_452000
.L_452300:

            add R8,1
            cmp R9,R8
            je .L_45234b

            mov RDX,RSI
            jmp .L_452202
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452318:

            add R8,1
            cmp R8,R9
            je .L_452352

            mov RDX,RSI
            jmp .L_45224f
.L_452329:

            add R9,1
            cmp R9,R13
            je .L_452383

            mov RSI,RDX
            jmp .L_45213b
.L_45233a:

            add R8,1
            cmp R8,R9
            je .L_452359

            mov RCX,RAX
            jmp .L_452100
.L_45234b:

            xor ESI,ESI
            jmp .L_452227
.L_452352:

            xor ESI,ESI
            jmp .L_452277
.L_452359:

            xor EAX,EAX
            jmp .L_452127
.L_452360:

            mov RSI,R13
            mov RDI,RBP
            call .L_44f8b0

            test EAX,EAX
            jne .L_452000

            mov RSI,RBP
            mov RDI,R12
            call .L_44f260

            jmp .L_452000
.L_452383:

            xor R13D,R13D
            jmp .L_452171
.L_45238b:

            call __stack_chk_fail@PLT
.L_452390:

            push R12
            push RBP
            mov RAX,RDX
            push RBX
            sub RSP,48
.L_45239b:

            mov RDX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RDX
            xor EDX,EDX
            cmp RSI,32
            ja .L_4523f0

            mov RBP,RSP
            mov RDX,RSI
            mov R12,RDI
            mov RBX,RSI
            mov RDI,RCX
            mov RSI,RBP
            call RAX

            test EAX,EAX
            jne .L_4523d7

            mov RDX,RBX
            mov RSI,RBP
            mov RDI,R12
            call .L_44f720
.L_4523d7:

            mov RSI,QWORD PTR [RSP+40]
            xor RSI,QWORD PTR FS:[40]
            jne .L_4523f7

            add RSP,48
.L_4523eb:

            pop RBX
            pop RBP
            pop R12
            ret 
.L_4523f0:

            mov EAX,4294967292
            jmp .L_4523d7
.L_4523f7:

            call __stack_chk_fail@PLT
.L_4523fc:

            nop
            nop
            nop
            nop
.L_452400:

            push R15
            push R14
            mov R14,RSI
            push R13
            push R12
            push RBP
            push RBX
            mov RBP,RDX
            sub RSP,408
.L_452417:

            lea R12,QWORD PTR [RSP+352]
            lea R13,QWORD PTR [RSP+384]
            mov QWORD PTR [RSP+8],RDI
            mov RDI,RDX
            mov QWORD PTR [RSP+384],1
            mov DWORD PTR [RSP+352],1
            mov RSI,R12
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+392],RAX
            xor EAX,EAX
            call .L_44fd30

            test EAX,EAX
            jle .L_452ca8

            lea R15,QWORD PTR [RSP+64]
            mov RDX,RBP
            mov RSI,R14
            mov DWORD PTR [RSP+96],1
            mov QWORD PTR [RSP+104],0
            mov RDI,R15
            mov QWORD PTR [RSP+112],0
            mov DWORD PTR [RSP+128],1
            mov QWORD PTR [RSP+136],0
            mov QWORD PTR [RSP+144],0
            mov DWORD PTR [RSP+160],1
            mov QWORD PTR [RSP+168],0
            mov QWORD PTR [RSP+176],0
            mov DWORD PTR [RSP+192],1
            mov QWORD PTR [RSP+200],0
            mov QWORD PTR [RSP+208],0
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],0
            mov QWORD PTR [RSP+80],0
            mov DWORD PTR [RSP+224],1
            mov QWORD PTR [RSP+232],0
            mov QWORD PTR [RSP+240],0
            mov DWORD PTR [RSP+256],1
            mov QWORD PTR [RSP+264],0
            mov QWORD PTR [RSP+272],0
            mov DWORD PTR [RSP+288],1
            mov QWORD PTR [RSP+296],0
            mov QWORD PTR [RSP+304],0
            mov DWORD PTR [RSP+320],1
            mov QWORD PTR [RSP+328],0
            mov QWORD PTR [RSP+336],0
            call .L_451f90

            test EAX,EAX
            mov EBX,EAX
            je .L_452930
.L_4525c3:

            mov RDI,QWORD PTR [RSP+112]
            test RDI,RDI
            je .L_4525fb

            mov RDX,QWORD PTR [RSP+104]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4525f5

            mov RDX,RDI
            nop
            nop
.L_4525e0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4525e0
.L_4525f5:

            call QWORD PTR [RIP+.L_677120]
.L_4525fb:

            mov RDI,QWORD PTR [RSP+144]
            mov DWORD PTR [RSP+96],1
            mov QWORD PTR [RSP+104],0
            mov QWORD PTR [RSP+112],0
            test RDI,RDI
            je .L_45265b

            mov RDX,QWORD PTR [RSP+136]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_452655

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452640:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_452640
.L_452655:

            call QWORD PTR [RIP+.L_677120]
.L_45265b:

            mov RDI,QWORD PTR [RSP+176]
            mov DWORD PTR [RSP+128],1
            mov QWORD PTR [RSP+136],0
            mov QWORD PTR [RSP+144],0
            test RDI,RDI
            je .L_4526bb

            mov RDX,QWORD PTR [RSP+168]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4526b5

            mov RDX,RDI
            nop
.L_4526a0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4526a0
.L_4526b5:

            call QWORD PTR [RIP+.L_677120]
.L_4526bb:

            mov RDI,QWORD PTR [RSP+208]
            mov DWORD PTR [RSP+160],1
            mov QWORD PTR [RSP+168],0
            mov QWORD PTR [RSP+176],0
            test RDI,RDI
            je .L_45271b

            mov RDX,QWORD PTR [RSP+200]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_452715

            mov RDX,RDI
            nop
.L_452700:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_452700
.L_452715:

            call QWORD PTR [RIP+.L_677120]
.L_45271b:

            mov RDI,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+192],1
            mov QWORD PTR [RSP+200],0
            mov QWORD PTR [RSP+208],0
            test RDI,RDI
            je .L_45277b

            mov RDX,QWORD PTR [RSP+72]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_452775

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452760:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_452760
.L_452775:

            call QWORD PTR [RIP+.L_677120]
.L_45277b:

            mov RDI,QWORD PTR [RSP+240]
            mov DWORD PTR [RSP+64],1
            mov QWORD PTR [RSP+72],0
            mov QWORD PTR [RSP+80],0
            test RDI,RDI
            je .L_4527db

            mov RDX,QWORD PTR [RSP+232]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4527d5

            mov RDX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4527c0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4527c0
.L_4527d5:

            call QWORD PTR [RIP+.L_677120]
.L_4527db:

            mov RDI,QWORD PTR [RSP+272]
            mov DWORD PTR [RSP+224],1
            mov QWORD PTR [RSP+232],0
            mov QWORD PTR [RSP+240],0
            test RDI,RDI
            je .L_45283b

            mov RDX,QWORD PTR [RSP+264]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_452835

            mov RDX,RDI
            nop
.L_452820:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_452820
.L_452835:

            call QWORD PTR [RIP+.L_677120]
.L_45283b:

            mov RDI,QWORD PTR [RSP+304]
            mov DWORD PTR [RSP+256],1
            mov QWORD PTR [RSP+264],0
            mov QWORD PTR [RSP+272],0
            test RDI,RDI
            je .L_45289b

            mov RDX,QWORD PTR [RSP+296]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_452895

            mov RDX,RDI
            nop
.L_452880:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_452880
.L_452895:

            call QWORD PTR [RIP+.L_677120]
.L_45289b:

            mov RDI,QWORD PTR [RSP+336]
            mov DWORD PTR [RSP+288],1
            mov QWORD PTR [RSP+296],0
            mov QWORD PTR [RSP+304],0
            test RDI,RDI
            je .L_4528fb

            mov RDX,QWORD PTR [RSP+328]
            test RDX,RDX
            lea RAX,QWORD PTR [RDX-1]
            je .L_4528f5

            mov RDX,RDI
            nop
.L_4528e0:

            sub RAX,1
            mov QWORD PTR [RDX],0
            add RDX,8
            cmp RAX,-1
            jne .L_4528e0
.L_4528f5:

            call QWORD PTR [RIP+.L_677120]
.L_4528fb:

            mov RCX,QWORD PTR [RSP+392]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_452cb2

            add RSP,408
.L_45291b:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452930:

            mov RSI,R12
            mov RDI,R15
            mov QWORD PTR [RSP+384],1
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov EBX,4294967282
            mov QWORD PTR [RSP+368],R13
            call .L_44fd30

            test EAX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+96]
            mov RDX,RBP
            mov RSI,R14
            mov RDI,RAX
            mov R15,RAX
            call .L_451320

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea R14,QWORD PTR [RSP+128]
            mov RSI,R15
            mov RDI,R14
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+224]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+48],RAX
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+256]
            mov RSI,RBP
            mov RDI,RAX
            mov QWORD PTR [RSP+56],RAX
            call .L_44f260

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+160]
            mov ESI,1
            mov RDI,RAX
            mov QWORD PTR [RSP+32],RAX
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+192]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+288]
            xor ESI,ESI
            mov RDI,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            lea RAX,QWORD PTR [RSP+320]
            mov ESI,1
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44f530

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3
.L_452a7e:

            mov RAX,QWORD PTR [RSP+144]
            test BYTE PTR [RAX],1
            jne .L_452b96

            mov ESI,1
            mov RDI,R14
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RAX,QWORD PTR [RSP+176]
            test BYTE PTR [RAX],1
            jne .L_452cb7

            mov RAX,QWORD PTR [RSP+208]
            test BYTE PTR [RAX],1
            jne .L_452cb7
.L_452ac8:

            mov RDI,QWORD PTR [RSP+32]
            mov ESI,1
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+40]
            mov ESI,1
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            je .L_452a7e

            jmp .L_4525c3
.L_452afb:

            mov RDI,QWORD PTR [RSP+56]
            mov ESI,1
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RAX,QWORD PTR [RSP+304]
            test BYTE PTR [RAX],1
            jne .L_452b2e

            mov RAX,QWORD PTR [RSP+336]
            test BYTE PTR [RAX],1
            je .L_452b64
.L_452b2e:

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+48]
            mov RSI,RDI
            call .L_450110

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+24]
            mov RDX,R15
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3
.L_452b64:

            mov RDI,QWORD PTR [RSP+16]
            mov ESI,1
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+24]
            mov ESI,1
            call .L_44f9c0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3
.L_452b96:

            mov RAX,QWORD PTR [RSP+272]
            test BYTE PTR [RAX],1
            je .L_452afb

            mov RBX,QWORD PTR [RSP+56]
            mov RDI,R14
            mov RSI,RBX
            call .L_44fd30

            test EAX,EAX
            js .L_452d1e

            mov RDX,RBX
            mov RSI,R14
            mov RDI,R14
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+16]
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDX,QWORD PTR [RSP+24]
            mov RDI,QWORD PTR [RSP+40]
.L_452bfd:

            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RSI,R12
            mov RDI,R14
            mov QWORD PTR [RSP+384],0
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            call .L_44fd30

            test EAX,EAX
            jne .L_452a7e
.L_452c4d:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,R12
            mov QWORD PTR [RSP+384],0
            mov DWORD PTR [RSP+352],1
            mov QWORD PTR [RSP+360],1
            mov QWORD PTR [RSP+368],R13
            call .L_44fd30

            test EAX,EAX
            jns .L_452cf2

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_450110

            test EAX,EAX
            mov EBX,EAX
            je .L_452c4d

            jmp .L_4525c3
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_452ca8:

            mov EBX,4294967292
            jmp .L_4528fb
.L_452cb2:

            call __stack_chk_fail@PLT
.L_452cb7:

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+48]
            mov RSI,RDI
            call .L_450110

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+40]
            mov RDX,R15
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            je .L_452ac8

            jmp .L_4525c3
.L_452cf2:

            mov RDI,QWORD PTR [RSP+16]
            mov RSI,RBP
            call .L_44fd30

            test EAX,EAX
            js .L_452d63

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,RBP
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            je .L_452cf2

            jmp .L_4525c3
.L_452d1e:

            mov RDI,QWORD PTR [RSP+56]
            mov RDX,R14
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDI,QWORD PTR [RSP+16]
            mov RDX,QWORD PTR [RSP+32]
            mov RSI,RDI
            call .L_450190

            test EAX,EAX
            mov EBX,EAX
            jne .L_4525c3

            mov RDX,QWORD PTR [RSP+40]
            mov RDI,QWORD PTR [RSP+24]
            jmp .L_452bfd
.L_452d63:

            mov RSI,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+8]
            call .L_44f260

            mov EBX,EAX
            jmp .L_4525c3
.L_452d79:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452d80:

            mov EAX,DWORD PTR [RIP+.L_67e600]
            test EAX,EAX
            jne .L_452dc9

            mov EDX,DWORD PTR [RIP+.L_676a20]
            lea RAX,QWORD PTR [RIP+.L_67e610]
            test EDX,EDX
            je .L_452db9

            lea RCX,QWORD PTR [RIP+.L_676a20]
            nop
            nop
            nop
            nop
            nop
            nop
.L_452da8:

            add RCX,16
            add RAX,4
            mov DWORD PTR [RAX-4],EDX
            mov EDX,DWORD PTR [RCX]
            test EDX,EDX
            jne .L_452da8
.L_452db9:

            mov DWORD PTR [RAX],0
            mov DWORD PTR [RIP+.L_67e600],1
.L_452dc9:

            lea RAX,QWORD PTR [RIP+.L_67e610]
            ret 
.L_452dd1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452de0:

            mov RAX,QWORD PTR [RIP+.L_676a28]
            test RAX,RAX
            je .L_452e11

            cmp EDI,DWORD PTR [RIP+.L_676a20]
            je .L_452e11

            lea RDX,QWORD PTR [RIP+.L_676a20]
            jmp .L_452e04
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_452e00:

            cmp DWORD PTR [RDX],EDI
            je .L_452e11
.L_452e04:

            add RDX,16
            mov RAX,QWORD PTR [RDX+8]
            test RAX,RAX
            jne .L_452e00
.L_452e11:

            ret 
.L_452e13:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452e20:

            test RDI,RDI
            push R12
            push RBP
            push RBX
.L_452e27:

            je .L_452e6d

            mov RBX,QWORD PTR [RIP+.L_676a28]
            test RBX,RBX
            je .L_452e65

            mov R12,RDI
            lea RBP,QWORD PTR [RIP+.L_676a20]
            jmp .L_452e55
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452e48:

            add RBP,16
            mov RBX,QWORD PTR [RBP+8]
            test RBX,RBX
            je .L_452e65
.L_452e55:

            mov RDI,QWORD PTR [RBX+16]
            mov RSI,R12
            call strcmp@PLT

            test EAX,EAX
            jne .L_452e48
.L_452e65:

            mov RAX,RBX
            pop RBX
.L_452e69:

            pop RBP
            pop R12
            ret 
.L_452e6d:

            xor EBX,EBX
            jmp .L_452e65
.L_452e71:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452e80:

            mov RAX,QWORD PTR [RIP+.L_676a28]
            test RAX,RAX
            je .L_452eb8

            lea RCX,QWORD PTR [RIP+.L_676a20]
            jmp .L_452ea5
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_452e98:

            add RCX,16
            mov RAX,QWORD PTR [RCX+8]
            test RAX,RAX
            je .L_452eb8
.L_452ea5:

            mov R8,QWORD PTR [RAX+40]
            cmp DWORD PTR [R8],EDI
            jne .L_452e98

            cmp DWORD PTR [RAX+8],ESI
            jne .L_452e98

            cmp DWORD PTR [RAX+4],EDX
            jne .L_452e98
.L_452eb8:

            ret 
.L_452eba:

            nop
            nop
            nop
            nop
            nop
            nop
.L_452ec0:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            ret 
.L_452ed8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452ee0:

            test RDI,RDI
            je .L_452f3e

            push RBX

            mov RAX,QWORD PTR [RDI+72]
            mov RBX,RDI
            test RAX,RAX
            je .L_452f16

            lea RDX,QWORD PTR [RAX+40]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_452f00:

            mov BYTE PTR [RAX],0
            add RAX,1
            cmp RAX,RDX
            jne .L_452f00

            mov RDI,QWORD PTR [RBX+72]
            call QWORD PTR [RIP+.L_677120]
.L_452f16:

            mov RDI,QWORD PTR [RBX+64]
            test RDI,RDI
            je .L_452f29

            mov RAX,QWORD PTR [RBX]
            mov RAX,QWORD PTR [RAX+40]
            call QWORD PTR [RAX+40]
.L_452f29:

            lea RAX,QWORD PTR [RBX+80]
            nop
            nop
            nop
.L_452f30:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_452f30

            pop RBX

            ret 
.L_452f3e:

            ret 
.L_452f40:

            test RSI,RSI
            je .L_452f90

            test RDI,RDI
            je .L_452f90

            pxor XMM0,XMM0
            push RBP
            push RBX
            mov RBP,RSI
            mov RBX,RDI
            sub RSP,8
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            mov RAX,QWORD PTR [RSI+40]
            call QWORD PTR [RAX+32]

            test RAX,RAX
            mov QWORD PTR [RBX+64],RAX
            je .L_452f96

            mov QWORD PTR [RBX],RBP
            xor EAX,EAX
.L_452f82:

            add RSP,8
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452f90:

            mov EAX,4294942464
            ret 
.L_452f96:

            mov EAX,4294942336
            jmp .L_452f82
.L_452f9d:

            nop
            nop
            nop
.L_452fa0:

            test RDI,RDI
            je .L_452fd5

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_452fd5

            test BYTE PTR [RAX+28],2
            je .L_452fd0
.L_452fb3:

            cmp ECX,1
            mov DWORD PTR [RDI+8],EDX
            mov DWORD PTR [RDI+12],ECX
            jne .L_452fe0
.L_452fbe:

            mov RAX,QWORD PTR [RAX+40]
            mov RDI,QWORD PTR [RDI+64]
            jmp QWORD PTR [RAX+16]
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_452fd0:

            cmp DWORD PTR [RAX+8],EDX
            je .L_452fb3
.L_452fd5:

            mov EAX,4294942464
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_452fe0:

            mov R9D,DWORD PTR [RAX+4]
            lea R8D,DWORD PTR [R9-3]
            and R8D,4294967293
            je .L_452fbe

            test ECX,ECX
            jne .L_452fd5

            mov RAX,QWORD PTR [RAX+40]
            mov RDI,QWORD PTR [RDI+64]
            jmp QWORD PTR [RAX+24]
.L_452ffd:

            nop
            nop
            nop
.L_453000:

            test RDI,RDI
            je .L_4530e8

            test RSI,RSI
            mov RAX,QWORD PTR [RDI]
            je .L_4530e8

            test RAX,RAX
            je .L_4530e8

            cmp RDX,16
            ja .L_4530f0

            test BYTE PTR [RAX+28],1
            jne .L_4530c0

            mov EAX,DWORD PTR [RAX+24]
            cmp RDX,RAX
            jb .L_4530e8
.L_45303e:

            cmp EAX,8
            lea R8,QWORD PTR [RDI+40]
            jb .L_453098

            mov RDX,QWORD PTR [RSI]
            mov QWORD PTR [RDI+40],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [R8+RDX*1-8],RCX
            lea RCX,QWORD PTR [RDI+48]
            and RCX,-8
            sub R8,RCX
            lea EDX,DWORD PTR [RAX+R8*1]
            sub RSI,R8
            and EDX,4294967288
            cmp EDX,8
            jb .L_45308e

            and EDX,4294967288
            xor R8D,R8D
.L_45307a:

            mov R9D,R8D
            add R8D,8
            mov R10,QWORD PTR [RSI+R9*1]
            cmp R8D,EDX
            mov QWORD PTR [RCX+R9*1],R10
            jb .L_45307a
.L_45308e:

            mov QWORD PTR [RDI+56],RAX
            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_453098:

            test AL,4
            jne .L_4530d0

            test EAX,EAX
            je .L_45308e

            movzx ECX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RDI+40],CL
            je .L_45308e

            mov ECX,EAX
            movzx EDX,WORD PTR [RSI+RCX*1-2]
            mov WORD PTR [R8+RCX*1-2],DX
            jmp .L_45308e
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4530c0:

            mov RAX,RDX
            jmp .L_45303e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4530d0:

            mov ECX,DWORD PTR [RSI]
            mov DWORD PTR [RDI+40],ECX
            mov ECX,EAX
            mov EDX,DWORD PTR [RSI+RCX*1-4]
            mov DWORD PTR [R8+RCX*1-4],EDX
            jmp .L_45308e
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4530e8:

            mov EAX,4294942464
            ret 
          .byte 0x66
          .byte 0x90
.L_4530f0:

            mov EAX,4294942592
            ret 
.L_4530f6:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453100:

            test RDI,RDI
            je .L_453120

            cmp QWORD PTR [RDI],0
            je .L_453120

            mov QWORD PTR [RDI+32],0
            xor EAX,EAX
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453120:

            mov EAX,4294942464
            ret 
.L_453126:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453130:

            test RDI,RDI
            je .L_453178

            test R8,R8
            mov R9,QWORD PTR [RDI]
            je .L_453178

            test R9,R9
            je .L_453178

            cmp DWORD PTR [R9+4],1
            mov QWORD PTR [R8],0
            mov R10D,DWORD PTR [R9+32]
            je .L_453188

            test R10,R10
            je .L_4531b0

            cmp RSI,RCX
            mov R8D,4294942592
            jne .L_45317e

            cmp QWORD PTR [RDI+32],0
            jne .L_453178

            mov RAX,RDX
            xor EDX,EDX
            div R10
            test RDX,RDX
            je .L_45317e
.L_453178:

            mov R8D,4294942464
.L_45317e:

            mov EAX,R8D
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453188:

            cmp R10,RDX
            jne .L_4531b8

            mov QWORD PTR [R8],R10
            mov RAX,QWORD PTR [R9+40]
            mov RDX,RSI
            mov R8D,DWORD PTR [RDI+12]
            mov RDI,QWORD PTR [RDI+64]
            mov RAX,QWORD PTR [RAX+8]
            mov ESI,R8D
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4531b0:

            mov R8D,4294941824
            jmp .L_45317e
.L_4531b8:

            mov R8D,4294942080
            jmp .L_45317e
.L_4531c0:

            test RDI,RDI
            je .L_453208

            mov RAX,QWORD PTR [RDI]
            test RAX,RAX
            je .L_453208

            test RDX,RDX
            je .L_453208

            mov EAX,DWORD PTR [RAX+4]
            mov QWORD PTR [RDX],0
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,2
            jbe .L_4531e9

            cmp EAX,3
            jne .L_4531f0
.L_4531e9:

            xor EAX,EAX
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4531f0:

            cmp EAX,1
            jne .L_45320e

            cmp QWORD PTR [RDI+32],1
            sbb EAX,EAX
            not EAX
            and EAX,4294942080
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_453208:

            mov EAX,4294942464
            ret 
.L_45320e:

            mov EAX,4294942592
            ret 
.L_453214:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453220:

            push R13
            push R12
            mov R11,RCX
            push RBP
            push RBX
            mov R13,R8
            mov RBX,RDI
            mov RBP,R9
            sub RSP,24
.L_453236:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            mov R12,QWORD PTR [RSP+64]
            call .L_453000

            test EAX,EAX
            jne .L_45327c

            test RDI,RDI
            je .L_4532c0

            cmp QWORD PTR [RDI],0
            je .L_4532c0

            mov QWORD PTR [RDI+32],0
            mov R8,R12
            mov RCX,RBP
            mov RDX,R13
            mov RSI,R11
            call .L_453130

            test EAX,EAX
            je .L_4532a0
.L_45327c:

            mov RCX,QWORD PTR [RSP+8]
            xor RCX,QWORD PTR FS:[40]
            jne .L_4532c7

            add RSP,24
.L_453290:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4532a0:

            mov RSI,QWORD PTR [R12]
            mov RDX,RSP
            mov RDI,RBX
            add RSI,RBP
            call .L_4531c0

            test EAX,EAX
            jne .L_45327c

            mov RDX,QWORD PTR [RSP]
            add QWORD PTR [R12],RDX
            jmp .L_45327c
.L_4532c0:

            mov EAX,4294942464
            jmp .L_45327c
.L_4532c7:

            call __stack_chk_fail@PLT
.L_4532cc:

            nop
            nop
            nop
            nop
.L_4532d0:

            push RBP
            push RBX
.L_4532d2:

            mov R10,RSI
            mov RAX,QWORD PTR [RDI]
            mov RSI,QWORD PTR [RSP+24]
            mov RBP,QWORD PTR [RSP+40]
            mov R11,QWORD PTR [RSP+48]
            mov RBX,QWORD PTR [RSP+56]
            cmp DWORD PTR [RAX+4],8
            jne .L_453320

            mov QWORD PTR [RBP],RSI
            mov RDI,QWORD PTR [RDI+64]
            mov QWORD PTR [RSP+24],R9
            mov QWORD PTR [RSP+48],RBX
            mov R9,R8
            mov QWORD PTR [RSP+40],R11
            mov R8,RCX
            mov RCX,RDX
            pop RBX
.L_453313:

            pop RBP
            mov RDX,R10
            jmp .L_4577c0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_453320:

            mov EAX,4294942592
            pop RBX
            pop RBP
            ret 
.L_453328:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453330:

            sub RSP,8
            mov R11,QWORD PTR [RDI]
            mov R10,RSI
            mov EAX,4294942592
            mov RSI,QWORD PTR [RSP+16]
            cmp DWORD PTR [R11+4],8
            jne .L_453381

            mov RAX,R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,R10
            mov R10,QWORD PTR [RSP+32]
            mov RDI,QWORD PTR [RDI+64]
            mov QWORD PTR [R10],RSI
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+40]
            push RAX
            call .L_4577f0

            add RSP,32
            cmp EAX,-15
            je .L_453386
.L_453381:

            add RSP,8
            ret 
.L_453386:

            mov EAX,4294941952
            jmp .L_453381
.L_45338d:

            nop
            nop
            nop
.L_453390:

            push RBX
            mov RBX,RDI
            call .L_4577a0

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_4533a3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4533b0:

            sub RSP,24
            mov ESI,80
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            je .L_4533db

            mov RDI,RAX
            mov QWORD PTR [RSP+8],RAX
            call .L_457700

            mov RAX,QWORD PTR [RSP+8]
.L_4533db:

            add RSP,24
            ret 
.L_4533e0:

            mov ECX,EDX
            mov RDX,RSI
            mov ESI,2
            jmp .L_457720
.L_4533ef:

            nop
.L_4533f0:

            push RBX
            mov RBX,RDI
            call .L_441160

            mov RDI,RBX
            pop RBX
            jmp QWORD PTR [RIP+.L_677120]
.L_453403:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453410:

            push RBX
            mov ESI,288
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            test RAX,RAX
            mov RBX,RAX
            je .L_453431

            mov RDI,RAX
            call .L_441130
.L_453431:

            mov RAX,RBX
            pop RBX
            ret 
.L_453436:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453440:

            jmp .L_441470
.L_453445:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453450:

            jmp .L_441180
.L_453455:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453460:

            jmp .L_441ef0
.L_453465:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453470:

            push RBX
            mov R9,RSI
            mov RSI,R8
            mov RBX,RDI
            sub RSP,16
.L_45347e:

            mov R8,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+8],RAX
            xor EAX,EAX
            cmp R8,R9
            ja .L_453510

            mov RAX,R9
            sub RAX,R8
            cmp RAX,4
            jle .L_453510

            add R8,4
            mov RDI,RDX
            mov EDX,ECX
            sub R9,R8
            mov RCX,RSP
            call .L_44e0b0

            test EAX,EAX
            jne .L_4534f8

            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,24
            mov BYTE PTR [RCX],DL
            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,16
            mov BYTE PTR [RCX+1],DL
            mov RDX,QWORD PTR [RSP]
            mov RCX,QWORD PTR [RBX]
            shr RDX,8
            mov BYTE PTR [RCX+2],DL
            mov RDX,QWORD PTR [RBX]
            mov RCX,QWORD PTR [RSP]
            mov BYTE PTR [RDX+3],CL
            mov RSI,QWORD PTR [RSP]
            lea RDX,QWORD PTR [RSI+4]
            add QWORD PTR [RBX],RDX
.L_4534f8:

            mov RDI,QWORD PTR [RSP+8]
            xor RDI,QWORD PTR FS:[40]
            jne .L_453517

            add RSP,16
.L_45350c:

            pop RBX
            ret 
          .byte 0x66
          .byte 0x90
.L_453510:

            mov EAX,4294947072
            jmp .L_4534f8
.L_453517:

            call __stack_chk_fail@PLT
.L_45351c:

            nop
            nop
            nop
            nop
.L_453520:

            push R15
            push R14
            mov R14D,EDX
            push R13
            push R12
            mov R12,RSI
            push RBP
            push RBX
            sub RSP,344
.L_453537:

            mov R15,QWORD PTR [RSP+400]
            mov RAX,QWORD PTR [RSP+408]
            lea RBX,QWORD PTR [RSP+96]
            mov QWORD PTR [RSP+40],RDI
            mov QWORD PTR [RSP],RCX
            lea R13,QWORD PTR [RSP+56]
            mov QWORD PTR [RSP+8],R8
            mov QWORD PTR [RSP+16],R9
            lea RBP,QWORD PTR [RBX+217]
            mov RDI,R15
            mov QWORD PTR [RSP+24],RAX
            mov QWORD PTR [RSP+56],RBX
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+328],RAX
            xor EAX,EAX
            call strlen@PLT

            mov RCX,QWORD PTR [RSP]
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            mov QWORD PTR [RSP+32],RAX
            mov R8,RCX
            mov ECX,R14D
            call .L_453470

            test EAX,EAX
            je .L_4535e0
.L_4535b1:

            mov RSI,QWORD PTR [RSP+328]
            xor RSI,QWORD PTR FS:[40]
            jne .L_45370b

            add RSP,344
.L_4535cf:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4535e0:

            mov R8,QWORD PTR [RSP+8]
            mov ECX,R14D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            call .L_453470

            test EAX,EAX
            jne .L_4535b1

            mov R8,QWORD PTR [RSP+16]
            mov ECX,R14D
            mov RDX,R12
            mov RSI,RBP
            mov RDI,R13
            call .L_453470

            test EAX,EAX
            jne .L_4535b1

            mov RAX,QWORD PTR [RSP+56]
            mov RDX,RBP
            sub RDX,RAX
            cmp RDX,3
            jle .L_453701

            mov RSI,QWORD PTR [RSP+32]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,24
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,16
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov RDX,RSI
            shr RDX,8
            mov BYTE PTR [RAX],DL
            mov RAX,QWORD PTR [RSP+56]
            lea RDX,QWORD PTR [RAX+1]
            mov QWORD PTR [RSP+56],RDX
            mov BYTE PTR [RAX],SIL
            mov RDI,QWORD PTR [RSP+56]
            cmp RDI,RBP
            ja .L_453701

            sub RBP,RDI
            mov R14,RSI
            cmp RBP,RSI
            jb .L_453701

            mov RDX,RSI
            mov RSI,R15
            lea RBP,QWORD PTR [RSP+64]
            call memcpy@PLT

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,RBX
            mov RCX,RBP
            add RDX,R14
            mov QWORD PTR [RSP+56],RDX
            sub RDX,RBX
            mov RBX,QWORD PTR [RSP+40]
            mov RDI,RBX
            call .L_4403b0

            mov RDI,RBX
            call .L_4407a0

            mov RDI,QWORD PTR [RSP+24]
            movzx EDX,AL
            mov RSI,RBP
            call .L_44f720

            test EAX,EAX
            jne .L_4535b1

            mov RDI,QWORD PTR [RSP+24]
            lea RDX,QWORD PTR [R12+152]
            mov RSI,RDI
            call .L_451320

            jmp .L_4535b1
.L_453701:

            mov EAX,4294947072
            jmp .L_4535b1
.L_45370b:

            call __stack_chk_fail@PLT
.L_453710:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,232
.L_453721:

            mov RAX,QWORD PTR [RSP+288]
            mov R13,QWORD PTR [RSP+296]
            mov R15,QWORD PTR [RSP+304]
            mov QWORD PTR [RSP+56],R8
            mov QWORD PTR [RSP+40],R9
            mov R8,QWORD PTR [RSP+312]
            mov QWORD PTR [RSP+48],RAX
            mov R9,QWORD PTR [RSP+320]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            cmp QWORD PTR [R13],R15
            mov QWORD PTR [RSP+32],RDI
            mov DWORD PTR [RSP+28],EDX
            mov QWORD PTR [RSP],RCX
            mov QWORD PTR [RSP+16],R8
            mov QWORD PTR [RSP+8],R9
            ja .L_453908

            lea RBX,QWORD PTR [RSP+144]
            lea RBP,QWORD PTR [RSP+80]
            lea R12,QWORD PTR [RSP+112]
            mov R14,RSI
            mov RDI,RBX
            call .L_44d0b0

            mov RDI,RBP
            call .L_44f030

            mov RDI,R12
            call .L_44f030

            mov R9,QWORD PTR [RSP+8]
            mov R8,QWORD PTR [RSP+16]
            mov RCX,RBX
            mov RSI,QWORD PTR [RSP]
            mov RDX,RBP
            mov RDI,R14
            call .L_44e920

            test EAX,EAX
            je .L_453820
.L_4537d9:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_44d130

            mov RDI,RBP
            call .L_44f050

            mov RDI,R12
            call .L_44f050

            mov EAX,DWORD PTR [RSP]
.L_4537f7:

            mov RCX,QWORD PTR [RSP+216]
            xor RCX,QWORD PTR FS:[40]
            jne .L_453912

            add RSP,232
.L_453815:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_453820:

            push R12
            push QWORD PTR [RSP+56]
            mov R8,RBX
            mov R9,QWORD PTR [RSP+56]
            mov RCX,QWORD PTR [RSP+16]
            mov RSI,R14
            mov EDX,DWORD PTR [RSP+44]
            mov RDI,QWORD PTR [RSP+48]
            call .L_453520

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_4537d9

            mov RDX,QWORD PTR [RSP+56]
            mov RSI,R12
            mov RDI,R12
            call .L_4502f0

            test EAX,EAX
            jne .L_4537d9

            mov RDX,R12
            mov RSI,RBP
            mov RDI,R12
            call .L_450190

            test EAX,EAX
            jne .L_4537d9

            lea RDX,QWORD PTR [R14+152]
            mov RSI,R12
            mov RDI,R12
            call .L_451320

            test EAX,EAX
            jne .L_4537d9

            mov R8,QWORD PTR [R13]
            mov EDX,DWORD PTR [RSP+28]
            lea RCX,QWORD PTR [RSP+72]
            mov R9,R15
            mov RSI,RBX
            mov RDI,R14
            sub R9,R8
            call .L_44e2d0

            test EAX,EAX
            jne .L_4537d9

            mov RAX,QWORD PTR [RSP+72]
            add QWORD PTR [R13],RAX
            mov RDI,R12
            call .L_44f710

            mov RCX,QWORD PTR [R13]
            mov RSI,RAX
            mov QWORD PTR [RSP+72],RAX
            mov EAX,4294947072
            cmp RCX,R15
            ja .L_4537d9

            mov RDX,R15
            lea RAX,QWORD PTR [RSI+1]
            sub RDX,RCX
            cmp RDX,RAX
            jb .L_4538fb

            cmp RSI,255
            jbe .L_453917
.L_4538fb:

            mov EAX,4294947072
            jmp .L_4537d9
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_453908:

            mov EAX,4294947072
            jmp .L_4537f7
.L_453912:

            call __stack_chk_fail@PLT
.L_453917:

            lea RAX,QWORD PTR [RCX+1]
            mov RDI,R12
            mov QWORD PTR [R13],RAX
            mov BYTE PTR [RCX],SIL
            mov RDX,QWORD PTR [RSP+72]
            mov RSI,QWORD PTR [R13]
            call .L_44f820

            test EAX,EAX
            jne .L_4537d9

            mov RDX,QWORD PTR [RSP+72]
            add QWORD PTR [R13],RDX
            jmp .L_4537d9
.L_453949:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453950:

            push R15
            push R14
            mov R15,RCX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RSI
            mov R14,RDX
            sub RSP,56
.L_45396a:

            lea RBX,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],R8
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDI,RBX
            call .L_44f030

            mov ESI,1
            mov RDI,RBX
            call .L_44f530

            test EAX,EAX
            mov EBP,EAX
            je .L_4539d0
.L_45399f:

            mov RDI,RBX
            call .L_44f050

            mov RDX,QWORD PTR [RSP+40]
            xor RDX,QWORD PTR FS:[40]
            mov EAX,EBP
            jne .L_453a0a

            add RSP,56
.L_4539bd:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4539d0:

            mov R9,R15
            mov R8,RBX
            mov RCX,R14
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_44e830

            test EAX,EAX
            mov EBP,EAX
            jne .L_45399f

            mov R9,QWORD PTR [RSP+8]
            mov R8,RBX
            mov RCX,R12
            mov RDX,RBX
            mov RSI,R12
            mov RDI,R13
            call .L_44e830

            mov EBP,EAX
            jmp .L_45399f
.L_453a0a:

            call __stack_chk_fail@PLT
.L_453a0f:

            nop
.L_453a10:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            mov R13,RDI
            push RBP
            push RBX
            mov R12,RCX
            mov RBP,R8
            sub RSP,56
.L_453a2a:

            lea RBX,QWORD PTR [RSP+16]
            mov DWORD PTR [RSP+12],ESI
            mov QWORD PTR [RSP],R9
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+40],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov R14,QWORD PTR [RSP+112]
            call .L_44f030

            mov R9,QWORD PTR [RSP]
            mov ESI,16
            mov RDI,RBX
            mov RCX,R14
            mov RDX,R9
            call .L_452390

            test EAX,EAX
            je .L_453aa0
.L_453a6f:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_44f050

            mov RCX,QWORD PTR [RSP+40]
            xor RCX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP]
            jne .L_453af7

            add RSP,56
.L_453a91:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_453aa0:

            mov RDX,RBP
            mov RSI,RBX
            mov RDI,RBX
            call .L_4502f0

            test EAX,EAX
            jne .L_453a6f

            mov RDX,R12
            mov RSI,RBX
            mov RDI,RBX
            call .L_450110

            test EAX,EAX
            jne .L_453a6f

            mov RDX,RBX
            mov RSI,R15
            mov RDI,R13
            call .L_4502f0

            test EAX,EAX
            jne .L_453a6f

            mov R14D,DWORD PTR [RSP+12]
            mov RDX,RBP
            mov RSI,R13
            imul R14D,DWORD PTR [R13]
            mov RDI,R13
            mov DWORD PTR [R13],R14D
            call .L_451320

            jmp .L_453a6f
.L_453af7:

            call __stack_chk_fail@PLT
.L_453afc:

            nop
            nop
            nop
            nop
.L_453b00:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,296
.L_453b11:

            mov RBP,QWORD PTR [RSP+352]
            mov RBX,QWORD PTR [RSP+360]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+280],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+8],RDI
            mov DWORD PTR [RSP+20],EDX
            mov RAX,QWORD PTR [RBP]
            mov QWORD PTR [RSP+24],R9
            cmp RAX,RBX
            ja .L_453d20

            mov R13,RSI
            mov R15,RCX
            mov RCX,RBX
            sub RCX,RAX
            mov RDX,RBP
            mov RSI,R8
            mov RDI,R13
            mov R12,R8
            call .L_44e290

            test EAX,EAX
            je .L_453ba0
.L_453b70:

            mov RDX,QWORD PTR [RSP+280]
            xor RDX,QWORD PTR FS:[40]
            jne .L_453d3a

            add RSP,296
.L_453b8e:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453ba0:

            mov RDI,R12
            call .L_44dff0

            test EAX,EAX
            jne .L_453d30

            lea R14,QWORD PTR [RSP+128]
            mov RDI,R14
            call .L_44d0b0

            lea RAX,QWORD PTR [RSP+208]
            mov RDI,RAX
            mov QWORD PTR [RSP+48],RAX
            call .L_44d0b0

            lea RDI,QWORD PTR [RSP+64]
            mov QWORD PTR [RSP+32],RDI
            call .L_44f030

            lea RAX,QWORD PTR [RSP+96]
            mov RDI,RAX
            mov QWORD PTR [RSP+40],RAX
            call .L_44f030

            mov RAX,QWORD PTR [RBP]
            cmp RBX,RAX
            jb .L_453d20

            mov RCX,RBX
            mov RDX,RBP
            mov RSI,R14
            sub RCX,RAX
            mov RDI,R13
            call .L_44e290

            test EAX,EAX
            jne .L_453cd8

            mov RAX,QWORD PTR [RBP]
            cmp RBX,RAX
            jb .L_453d10

            cmp RAX,RBX
            je .L_453d10

            lea RSI,QWORD PTR [RAX+1]
            cmp RBX,RSI
            mov QWORD PTR [RBP],RSI
            jb .L_453d10

            movzx ECX,BYTE PTR [RAX]
            sub RBX,RSI
            cmp RCX,RBX
            ja .L_453d10

            mov RDI,QWORD PTR [RSP+32]
            mov RDX,RCX
            mov QWORD PTR [RSP+56],RCX
            call .L_44f720

            test EAX,EAX
            mov RCX,QWORD PTR [RSP+56]
            jne .L_453cd8

            add QWORD PTR [RBP],RCX
            push QWORD PTR [RSP+40]
.L_453c78:

            mov RCX,R15
            push QWORD PTR [RSP+32]
            mov EDX,DWORD PTR [RSP+36]
            mov R9,R12
            mov RDI,QWORD PTR [RSP+24]
            mov R8,R14
            mov RSI,R13
            call .L_453520

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_453cd8

            mov R8,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+40]
            mov R9,R15
            mov RSI,QWORD PTR [RSP+48]
            mov RCX,R12
            mov RDI,R13
            call .L_44e830

            test EAX,EAX
            jne .L_453cd8

            mov RDI,QWORD PTR [RSP+48]
            mov RSI,R14
            call .L_44e010

            test EAX,EAX
            je .L_453cd8

            mov EAX,4294947328
            nop
            nop
            nop
            nop
            nop
.L_453cd8:

            mov RDI,R14
            mov DWORD PTR [RSP+8],EAX
            call .L_44d130

            mov RDI,QWORD PTR [RSP+48]
            call .L_44d130

            mov RDI,QWORD PTR [RSP+32]
            call .L_44f050

            mov RDI,QWORD PTR [RSP+40]
            call .L_44f050

            mov EAX,DWORD PTR [RSP+8]
            jmp .L_453b70
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453d10:

            mov EAX,4294946944
            jmp .L_453cd8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453d20:

            mov EAX,4294946944
            jmp .L_453b70
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453d30:

            mov EAX,4294947712
            jmp .L_453b70
.L_453d3a:

            call __stack_chk_fail@PLT
.L_453d3f:

            nop
.L_453d40:

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            call .L_44d150

            lea RDI,QWORD PTR [RBX+264]
            call .L_44d130

            lea RDI,QWORD PTR [RBX+336]
            call .L_44d130

            lea RDI,QWORD PTR [RBX+408]
            call .L_44d130

            lea RDI,QWORD PTR [RBX+480]
            call .L_44d130

            lea RDI,QWORD PTR [RBX+552]
            call .L_44d130

            lea RDI,QWORD PTR [RBX+624]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+648]
            call .L_44f050

            lea RDI,QWORD PTR [RBX+672]
            pop RBX

            jmp .L_44f050
.L_453db5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453dc0:

            test RDI,RDI
            je .L_453e50

            push RBX

            mov RBX,RDI
            mov QWORD PTR [RDI],0
            lea RDI,QWORD PTR [RDI+8]
            call .L_44d0d0

            lea RDI,QWORD PTR [RBX+264]
            mov DWORD PTR [RBX+260],0
            call .L_44d0b0

            lea RDI,QWORD PTR [RBX+336]
            call .L_44d0b0

            lea RDI,QWORD PTR [RBX+408]
            call .L_44d0b0

            lea RDI,QWORD PTR [RBX+480]
            call .L_44d0b0

            lea RDI,QWORD PTR [RBX+552]
            call .L_44d0b0

            lea RDI,QWORD PTR [RBX+624]
            call .L_44f030

            lea RDI,QWORD PTR [RBX+648]
            call .L_44f030

            lea RDI,QWORD PTR [RBX+672]
            pop RBX

            jmp .L_44f030
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453e50:

            ret 
.L_453e52:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453e60:

            test RDI,RDI
            je .L_453e70

            jmp .L_453d40
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_453e70:

            ret 
.L_453e72:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453e80:

            push R13
            push R12
            mov R13D,ECX
            push RBP
            push RBX
            mov RBX,RDI
            mov RBP,R8
            mov R12,R9
            sub RSP,24
            mov DWORD PTR [RDI+256],ESI
            mov EDI,EDX
            call .L_4401a0

            test RAX,RAX
            mov QWORD PTR [RBX],RAX
            je .L_453f08

            lea RDI,QWORD PTR [RBX+8]
            mov ESI,R13D
            call .L_454db0

            test EAX,EAX
            je .L_453ee0
.L_453ebb:

            mov RDI,RBX
            mov DWORD PTR [RSP+12],EAX
            call .L_453d40

            mov EAX,DWORD PTR [RSP+12]
.L_453ecb:

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453ee0:

            lea RDI,QWORD PTR [RBX+672]
            mov RDX,R12
            mov RSI,RBP
            call .L_44f720

            test EAX,EAX
            jne .L_453ebb

            add RSP,24
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_453f08:

            mov EAX,4294946688
            jmp .L_453ecb
.L_453f0f:

            nop
.L_453f10:

            cmp QWORD PTR [RDI],0
            je .L_453f30

            mov EAX,DWORD PTR [RDI+8]
            test EAX,EAX
            je .L_453f30

            cmp QWORD PTR [RDI+688],1
            sbb EAX,EAX
            and EAX,4294946944
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_453f30:

            mov EAX,4294946944
            ret 
.L_453f36:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_453f40:

            push R15
            push R14
            lea RCX,QWORD PTR [RIP+.L_676c90]
            push R13
            push R12
            lea R15,QWORD PTR [RDI+88]
            push RBP
            push RBX
            lea RBP,QWORD PTR [RSI+RDX*1]
            lea R13,QWORD PTR [RDI+8]
            lea R8,QWORD PTR [RDI+408]
            mov RBX,RDI
            sub RSP,40
            mov R14D,DWORD PTR [RDI+260]
            mov R12,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+24],RAX
            xor EAX,EAX
            mov EAX,1
            sub EAX,DWORD PTR [RDI+256]
            mov QWORD PTR [RSP+16],RSI
            push RBP
            mov RSI,R13
            mov RDI,R12
            mov EDX,R14D
            lea R11,QWORD PTR [RSP+24]
            mov R10,QWORD PTR [RCX+RAX*8]
            mov RCX,R15
            push R11
            mov R9,R10
            mov QWORD PTR [RSP+24],R11
            mov QWORD PTR [RSP+16],R10
            call .L_453b00

            pop RSI
            test EAX,EAX
            pop RDI
            mov R10,QWORD PTR [RSP]
            mov R11,QWORD PTR [RSP+8]
            je .L_453ff0
.L_453fce:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_454023

            add RSP,40
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_453ff0:

            push RBP
            lea R8,QWORD PTR [RBX+480]
            push R11
            mov RCX,R15
            mov EDX,R14D
            mov R9,R10
            mov RSI,R13
            mov RDI,R12
            call .L_453b00

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_453fce

            cmp RBP,QWORD PTR [RSP+16]
            mov EDX,4294946944
            cmovne EAX,EDX
            jmp .L_453fce
.L_454023:

            call __stack_chk_fail@PLT
.L_454028:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454030:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,104
.L_45403e:

            mov QWORD PTR [RSP+24],RCX
            mov ECX,DWORD PTR [RDI+256]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+88],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RIP+.L_676c90]
            add RDX,RSI
            mov QWORD PTR [RSP+72],RSI
            mov QWORD PTR [RSP],RDX
            mov RAX,QWORD PTR [RAX+RCX*8]
            mov QWORD PTR [RSP+32],RAX
            lea RAX,QWORD PTR [RDI+88]
            mov QWORD PTR [RSP+16],RAX
            mov EAX,DWORD PTR [RDI+260]
            mov DWORD PTR [RSP+12],EAX
            mov RAX,QWORD PTR [RDI]
            mov QWORD PTR [RSP+40],RAX
            jb .L_454230

            lea R14,QWORD PTR [RDI+264]
            lea RBP,QWORD PTR [RDI+8]
            lea RDX,QWORD PTR [RDI+624]
            mov RBX,RSI
            lea RSI,QWORD PTR [RDI+88]
            mov R15,RDI
            mov RCX,R14
            mov RDI,RBP
            mov R12,R8
            mov R13,R9
            call .L_44e920

            test EAX,EAX
            je .L_4540f0
.L_4540c7:

            mov RSI,QWORD PTR [RSP+88]
            xor RSI,QWORD PTR FS:[40]
            jne .L_45423a

            add RSP,104
.L_4540df:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4540f0:

            mov R8,QWORD PTR [RSP+72]
            mov R9,QWORD PTR [RSP]
            lea RAX,QWORD PTR [RSP+80]
            mov EDX,DWORD PTR [RSP+12]
            mov RSI,R14
            mov RDI,RBP
            mov RCX,RAX
            mov QWORD PTR [RSP+48],RAX
            sub R9,R8
            call .L_44e2d0

            test EAX,EAX
            jne .L_4540c7

            mov RAX,QWORD PTR [RSP+80]
            add QWORD PTR [RSP+72],RAX
            sub RSP,8
            push R13
            push R12
            lea R8,QWORD PTR [R15+624]
            push QWORD PTR [RSP+24]
            lea RCX,QWORD PTR [R15+88]
            mov R9,R14
            mov RSI,RBP
            lea RDI,QWORD PTR [RSP+104]
            mov QWORD PTR [RSP+88],RDI
            push RDI
            push QWORD PTR [RSP+72]
            mov EDX,DWORD PTR [RSP+60]
            mov RDI,QWORD PTR [RSP+88]
            call .L_453710

            add RSP,48
.L_454164:

            test EAX,EAX
            jne .L_4540c7

            mov RAX,QWORD PTR [RSP]
            cmp RAX,QWORD PTR [RSP+72]
            jb .L_454230

            lea R14,QWORD PTR [R15+336]
            mov RSI,QWORD PTR [RSP+16]
            add R15,648
            mov R9,R13
            mov R8,R12
            mov RDX,R15
            mov RCX,R14
            mov RDI,RBP
            call .L_44e920

            test EAX,EAX
            jne .L_4540c7

            mov R8,QWORD PTR [RSP+72]
            mov R9,QWORD PTR [RSP]
            mov RSI,R14
            mov RCX,QWORD PTR [RSP+48]
            mov EDX,DWORD PTR [RSP+12]
            mov RDI,RBP
            sub R9,R8
            call .L_44e2d0

            test EAX,EAX
            jne .L_4540c7

            mov RAX,QWORD PTR [RSP+80]
            add QWORD PTR [RSP+72],RAX
            sub RSP,8
.L_4541e0:

            push R13
            push R12
            mov R9,R14
            push QWORD PTR [RSP+24]
            push QWORD PTR [RSP+88]
            mov R8,R15
            push QWORD PTR [RSP+72]
            mov RSI,RBP
            mov RCX,QWORD PTR [RSP+64]
            mov EDX,DWORD PTR [RSP+60]
            mov RDI,QWORD PTR [RSP+88]
            call .L_453710

            add RSP,48
            test EAX,EAX
            jne .L_4540c7

            mov RDX,QWORD PTR [RSP+72]
            mov RDI,QWORD PTR [RSP+24]
            sub RDX,RBX
            mov QWORD PTR [RDI],RDX
            jmp .L_4540c7
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_454230:

            mov EAX,4294947072
            jmp .L_4540c7
.L_45423a:

            call __stack_chk_fail@PLT
.L_45423f:

            nop
.L_454240:

            push R15
            push R14
            mov R15,RSI
            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBX,RDI
            lea R14,QWORD PTR [RBX+8]
            sub RSP,376
.L_45425e:

            lea R12,QWORD PTR [RSP+112]
            lea RBP,QWORD PTR [RSP+32]
            mov QWORD PTR [RSP+24],RSI
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+360],RAX
            xor EAX,EAX
            mov RDI,R12
            call .L_44d0d0

            mov RDI,RBP
            call .L_44d0b0

            lea RCX,QWORD PTR [RBX+336]
            lea RDX,QWORD PTR [RBX+264]
            lea R8,QWORD PTR [RBX+408]
            mov RSI,RBP
            mov RDI,R14
            call .L_453950

            test EAX,EAX
            jne .L_45430d

            mov EDX,DWORD PTR [RBX+256]
            lea RCX,QWORD PTR [RSP+24]
            test EDX,EDX
            je .L_454350
.L_4542c7:

            add R13,R15
            mov EAX,1
            mov RDI,QWORD PTR [RBX]
            push R13
.L_4542d4:

            push RCX
            lea RCX,QWORD PTR [RIP+.L_676c90]
            sub EAX,EDX
            mov EDX,DWORD PTR [RBX+260]
            lea R8,QWORD PTR [RBX+552]
            mov R9,QWORD PTR [RCX+RAX*8]
            mov RSI,R14
            mov RCX,RBP
            call .L_453b00

            test EAX,EAX
            pop RDX
            pop RCX
.L_4542fe:

            jne .L_45430d

            cmp QWORD PTR [RSP+24],R13
            mov EDX,4294946944
            cmovne EAX,EDX
.L_45430d:

            mov RDI,R12
            mov DWORD PTR [RSP+8],EAX
            call .L_44d150

            mov RDI,RBP
            call .L_44d130

            mov RSI,QWORD PTR [RSP+360]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+8]
            jne .L_454387

            add RSP,376
.L_45433f:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454350:

            mov RDX,R13
            mov RSI,RCX
            mov RDI,R12
            mov QWORD PTR [RSP+8],RCX
            call .L_44e310

            test EAX,EAX
            jne .L_45430d

            mov EAX,DWORD PTR [RBX+8]
            cmp DWORD PTR [RSP+112],EAX
            jne .L_454380

            mov EDX,DWORD PTR [RBX+256]
            mov RCX,QWORD PTR [RSP+8]
            jmp .L_4542c7
.L_454380:

            mov EAX,4294947200
            jmp .L_45430d
.L_454387:

            call __stack_chk_fail@PLT
.L_45438c:

            nop
            nop
            nop
            nop
.L_454390:

            push R15
            push R14
            mov R14,RDI
            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            lea R15,QWORD PTR [R14+8]
            sub RSP,248
.L_4543ab:

            lea RBX,QWORD PTR [RSP+80]
            lea R12,QWORD PTR [RSP+160]
            lea RBP,QWORD PTR [RSP+48]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+232],RAX
            xor EAX,EAX
            mov RDI,RBX
            mov QWORD PTR [RSP+16],RDX
            mov QWORD PTR [RSP+24],RCX
            mov QWORD PTR [RSP],R8
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP+32],RSI
            call .L_44d0b0

            mov RDI,R12
            call .L_44d0b0

            mov RDI,RBP
            call .L_44f030

            lea RCX,QWORD PTR [R14+480]
            lea RDX,QWORD PTR [R14+408]
            lea R8,QWORD PTR [R14+264]
            mov RSI,RBX
            mov RDI,R15
            call .L_453950

            test EAX,EAX
            je .L_454470
.L_454424:

            mov RDI,RBX
            mov DWORD PTR [RSP],EAX
            call .L_44d130

            mov RDI,R12
            call .L_44d130

            mov RDI,RBP
            call .L_44f050

            mov RSI,QWORD PTR [RSP+232]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP]
            jne .L_4545db

            add RSP,248
.L_454460:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454470:

            sub RSP,8
            lea RCX,QWORD PTR [R14+672]
            lea RDX,QWORD PTR [R14+648]
            push QWORD PTR [RSP+16]
            mov R9,QWORD PTR [RSP+16]
            lea R8,QWORD PTR [R14+160]
            mov ESI,1
            mov RDI,RBP
            call .L_453a10

            test EAX,EAX
            pop RDX
            pop RCX
.L_4544a3:

            jne .L_454424

            mov R9,QWORD PTR [RSP+8]
            mov R8,QWORD PTR [RSP]
            mov RCX,RBX
            mov RDX,RBP
            mov RSI,R12
            mov RDI,R15
            call .L_44e6c0

            test EAX,EAX
            jne .L_454424

            mov R11,QWORD PTR [RSP+16]
            mov R8,QWORD PTR [RSP+32]
            add R11,R13
            cmp DWORD PTR [R14+256],1
            je .L_454590
.L_4544e6:

            cmp R11,R8
            jb .L_4545d1

            mov EDX,DWORD PTR [R14+260]
            mov R9,R11
            lea RCX,QWORD PTR [RSP+40]
            sub R9,R8
            mov RSI,R12
            mov RDI,R15
            mov QWORD PTR [RSP+16],R11
            call .L_44e2d0

            test EAX,EAX
            mov R11,QWORD PTR [RSP+16]
            jne .L_454424

            mov RAX,QWORD PTR [RSP+40]
            add QWORD PTR [RSP+32],RAX
            sub RSP,8
.L_45452c:

            push QWORD PTR [RSP+16]
            push QWORD PTR [RSP+16]
            mov R9,R12
            push R11
            mov ECX,DWORD PTR [R14+256]
            mov R8,RBP
            mov EDX,DWORD PTR [R14+260]
            mov RSI,R15
            lea RAX,QWORD PTR [RSP+64]
            mov RDI,QWORD PTR [R14]
            push RAX
            lea RAX,QWORD PTR [RIP+.L_676c90]
            push QWORD PTR [RAX+RCX*8]
            mov RCX,RBX
            call .L_453710

            add RSP,48
            test EAX,EAX
            jne .L_454424

            mov RDX,QWORD PTR [RSP+32]
            mov RSI,QWORD PTR [RSP+24]
            sub RDX,R13
            mov QWORD PTR [RSI],RDX
            jmp .L_454424
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454590:

            cmp R11,R8
            jb .L_4545d1

            mov RCX,R11
            lea RSI,QWORD PTR [RSP+40]
            mov RDX,R8
            sub RCX,R8
            mov RDI,R15
            mov QWORD PTR [RSP+16],R11
            call .L_44e370

            test EAX,EAX
            jne .L_454424

            mov R8,QWORD PTR [RSP+40]
            add R8,QWORD PTR [RSP+32]
            mov R11,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+32],R8
            jmp .L_4544e6
.L_4545d1:

            mov EAX,4294947072
            jmp .L_454424
.L_4545db:

            call __stack_chk_fail@PLT
.L_4545e0:

            push R15
            push R14
            mov R15,R9
            push R13
            push R12
            mov R12,RDI
            push RBP
            push RBX
            mov RBP,RCX
            mov RBX,RDX
            mov R14,R8
            sub RSP,232
.L_454600:

            mov RDI,QWORD PTR [RDI]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+216],RAX
            xor EAX,EAX
            mov QWORD PTR [RSP+8],RSI
            call .L_4407a0

            movzx EAX,AL
            cmp RAX,RBX
            mov QWORD PTR [RBP],RAX
            ja .L_454798

            lea R13,QWORD PTR [RSP+96]
            lea RBP,QWORD PTR [RSP+32]
            lea RBX,QWORD PTR [RSP+64]
            mov RDI,R13
            call .L_44d0b0

            mov RDI,RBP
            call .L_44f030

            mov RDI,RBX
            call .L_44f030

            mov ESI,1
            mov RDI,RBX
            call .L_44f530

            test EAX,EAX
            je .L_4546b8
.L_454668:

            mov RDI,R13
            mov DWORD PTR [RSP+8],EAX
            call .L_44d130

            mov RDI,RBP
            call .L_44f050

            mov RDI,RBX
            call .L_44f050

            mov EAX,DWORD PTR [RSP+8]
.L_454688:

            mov RDX,QWORD PTR [RSP+216]
            xor RDX,QWORD PTR FS:[40]
            jne .L_4547a2

            add RSP,232
.L_4546a6:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4546b8:

            lea RAX,QWORD PTR [R12+648]
            sub RSP,8
            lea RCX,QWORD PTR [R12+672]
            lea R8,QWORD PTR [R12+160]
            mov R9,R14
            mov ESI,4294967295
            mov QWORD PTR [RSP+24],RAX
            push R15
            mov RDX,RAX
            mov RDI,RBP
            call .L_453a10

            test EAX,EAX
            pop RDX
            pop RCX
            jne .L_454668

            lea RAX,QWORD PTR [R12+8]
            lea RCX,QWORD PTR [R12+552]
            lea R9,QWORD PTR [R12+480]
            mov R8,RBP
            mov RDX,RBX
            mov RSI,R13
            mov RDI,RAX
            mov QWORD PTR [RSP+24],RAX
            call .L_44e830

            test EAX,EAX
            jne .L_454668

            mov RDX,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP+24]
            mov R9,R15
            mov R8,R14
            mov RCX,R13
            mov RSI,R13
            call .L_44e6c0

            test EAX,EAX
            jne .L_454668

            mov RAX,QWORD PTR [R12+184]
            lea R14,QWORD PTR [RSP+176]
            mov RDI,R13
            mov RSI,R14
            lea R15,QWORD PTR [RAX+7]
            shr R15,3
            mov RDX,R15
            call .L_44f820

            test EAX,EAX
            jne .L_454668

            mov RCX,QWORD PTR [RSP+8]
            mov RDI,QWORD PTR [R12]
            mov RDX,R15
            mov RSI,R14
            call .L_4403b0

            jmp .L_454668
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_454798:

            mov EAX,4294947072
            jmp .L_454688
.L_4547a2:

            call __stack_chk_fail@PLT
.L_4547a7:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4547b0:

            push R15
            push R14
            mov ESI,8
            push R13
            push R12
            push RBP
            push RBX
            mov RBX,RDI
            pxor XMM0,XMM0
            sub RSP,136
.L_4547cd:

            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+120],RAX
            xor EAX,EAX
            lea RAX,QWORD PTR [RSP+80]
            mov DWORD PTR [RSP+48],1
            mov QWORD PTR [RSP+56],5
            movaps XMMWORD PTR [RSP+80],XMM0
            mov QWORD PTR [RSP+64],RAX
            mov QWORD PTR [RSP+112],0
            movaps XMMWORD PTR [RSP+96],XMM0
            call .L_44f0c0

            test EAX,EAX
            mov DWORD PTR [RSP+20],EAX
            jne .L_454cd0

            mov RAX,QWORD PTR [RBX+16]
            xor R12D,R12D
            mov R14,QWORD PTR [RAX+32]
            mov R8,QWORD PTR [RAX+40]
            mov R13,QWORD PTR [RAX+48]
            mov R9,QWORD PTR [RAX+56]
            mov ECX,R14D
            add ECX,DWORD PTR [RAX]
            mov RDI,R14
            mov R15,R8
            mov DWORD PTR [RSP+32],R14D
            mov DWORD PTR [RSP+4],R9D
            setb R12B
            shr RDI,32
            xor EDX,EDX
            add ECX,EDI
            mov QWORD PTR [RSP+8],RDI
            mov ESI,EDI
            setb DL
            mov EBP,ECX
            shr R15,32
            sub EBP,R15D
            mov RDI,R13
            add EDX,R12D
            mov R11D,EBP
            shr RDI,32
            mov DWORD PTR [RSP+36],R15D
            sub R11D,R13D
            mov DWORD PTR [RSP+24],EDI
            mov R10D,R11D
            sub R10D,EDI
            cmp R15D,ECX
            seta CL
            sub EDX,ECX
            cmp R13D,EBP
            seta CL
            sub EDX,ECX
            cmp EDI,R11D
            movabs R11,-4294967296
            seta CL
            sub EDX,ECX
            cmp R9D,R10D
            seta CL
            and R11,QWORD PTR [RAX]
            sub R10D,R9D
            sub EDX,ECX
            movsx ECX,DL
            mov EBP,ECX
            or R11,R10
            mov R10,R11
            shr R10,32
            add EBP,R10D
            setb BYTE PTR [RSP+28]
            test DL,DL
            js .L_454d18
.L_4548d5:

            xor EDX,EDX
            add ESI,EBP
            mov RBP,R9
            setb DL
            mov R11D,R11D
            mov ECX,R8D
            mov DWORD PTR [RSP+44],EDX
            xor EDX,EDX
            add ESI,R8D
            mov R10D,ESI
            setb DL
            add DL,BYTE PTR [RSP+44]
            sub R10D,R13D
            shr RBP,32
            mov R12D,R10D
            mov DWORD PTR [RSP+40],R10D
            mov DWORD PTR [RSP+16],EBP
            sub R12D,EDI
            mov R10D,R12D
            sub R10D,R9D
            cmp R13D,ESI
            seta SIL
            sub EDX,ESI
            cmp EDI,DWORD PTR [RSP+40]
            seta SIL
            sub EDX,ESI
            cmp R9D,R12D
            movzx R12D,BYTE PTR [RSP+28]
            seta SIL
            sub EDX,ESI
            cmp EBP,R10D
            seta SIL
            sub R10D,EBP
            sub EDX,ESI
            shl R10,32
            or R11,R10
            add R12D,EDX
            mov R10,QWORD PTR [RAX+8]
            movsx EDX,R12B
            mov QWORD PTR [RAX],R11
            mov ESI,EDX
            add ESI,R10D
            setb R11B
            test R12B,R12B
            js .L_454d30
.L_454969:

            add ECX,ESI
            setb SIL
            xor EDX,EDX
            add ECX,DWORD PTR [RSP+36]
            movzx ESI,SIL
            mov DWORD PTR [RSP+28],ESI
            mov R12D,ECX
            setb DL
            add DL,BYTE PTR [RSP+28]
            sub R12D,EDI
            mov ESI,R12D
            sub ESI,R9D
            cmp EDI,ECX
            seta CL
            sub EDX,ECX
            cmp R9D,R12D
            seta CL
            sub EDX,ECX
            cmp EBP,ESI
            seta CL
            sub ESI,EBP
            sub EDX,ECX
            add R11D,EDX
            movabs RDX,-4294967296
            and R10,RDX
            movsx EDX,R11B
            or RSI,R10
            mov ECX,EDX
            mov R9,RSI
            shr R9,32
            add ECX,R9D
            setb R10B
            test R11B,R11B
            js .L_454d48
.L_4549d8:

            xor EDX,EDX
            add ECX,R15D
            mov ESI,ESI
            setb DL
            add ECX,R15D
            adc DL,0
            add ECX,R13D
            adc DL,0
            add ECX,R13D
            adc DL,0
            xor R12D,R12D
            add ECX,DWORD PTR [RSP+24]
            mov R11D,ECX
            setb R12B
            sub R11D,EBP
            add EDX,R12D
            mov R9D,R11D
            sub R9D,R14D
            cmp EBP,ECX
            seta CL
            sub EDX,ECX
            cmp R14D,R11D
            mov R11,QWORD PTR [RSP+8]
            seta CL
            sub EDX,ECX
            cmp R11D,R9D
            seta CL
            sub R9D,R11D
            sub EDX,ECX
            shl R9,32
            add R10D,EDX
            or RSI,R9
            mov R9,QWORD PTR [RAX+16]
            movsx ECX,R10B
            mov QWORD PTR [RAX+8],RSI
            mov EDX,ECX
            add EDX,R9D
            setb R11B
            test R10B,R10B
            js .L_454d60
.L_454a55:

            xor ESI,ESI
            add EDX,R13D
            mov RBP,QWORD PTR [RSP+8]
            setb SIL
            add EDX,R13D
            adc SIL,0
            add EDX,EDI
            adc SIL,0
            add EDX,EDI
            adc SIL,0
            xor ECX,ECX
            add EDX,DWORD PTR [RSP+4]
            setb CL
            mov R10D,EDX
            sub R10D,EBP
            add ECX,ESI
            cmp EBP,EDX
            seta DL
            movabs RSI,-4294967296
            sub ECX,EDX
            cmp R8D,R10D
            seta DL
            and RSI,R9
            sub R10D,R8D
            sub ECX,EDX
            or RSI,R10
            add ECX,R11D
            mov R11,RSI
            movsx R10D,CL
            shr R11,32
            mov EDX,R10D
            add EDX,R11D
            setb R9B
            test CL,CL
            js .L_454d78
.L_454ac9:

            mov ECX,DWORD PTR [RSP+4]
            xor R11D,R11D
            add EDX,EDI
            setb R11B
            add EDX,EDI
            mov ESI,ESI
            adc R11B,0
            add EDX,ECX
            adc R11B,0
            add EDX,ECX
            adc R11B,0
            xor ECX,ECX
            add EDX,DWORD PTR [RSP+16]
            setb CL
            mov R10D,EDX
            sub R10D,R8D
            add ECX,R11D
            cmp R8D,EDX
            seta DL
            sub ECX,EDX
            cmp R15D,R10D
            seta DL
            sub R10D,R15D
            sub ECX,EDX
            shl R10,32
            add R9D,ECX
            or RSI,R10
            mov RCX,QWORD PTR [RAX+24]
            mov QWORD PTR [RAX+16],RSI
            movsx ESI,R9B
            mov EDX,ESI
            add EDX,ECX
            setb R10B
            test R9B,R9B
            js .L_454d90
.L_454b36:

            mov R9D,DWORD PTR [RSP+4]
            mov R11D,DWORD PTR [RSP+16]
            xor ESI,ESI
            add EDX,R9D
            setb SIL
            add EDX,R9D
            adc SIL,0
            add EDX,R11D
            adc SIL,0
            add EDX,R11D
            adc SIL,0
            add EDX,R9D
            adc SIL,0
            xor R9D,R9D
            add EDX,DWORD PTR [RSP+24]
            setb R9B
            mov R11D,EDX
            add ESI,R9D
            mov R9,QWORD PTR [RSP+8]
            sub R11D,R14D
            cmp R14D,EDX
            seta DL
            sub ESI,EDX
            cmp R9D,R11D
            seta DL
            sub R11D,R9D
            sub ESI,EDX
            movabs RDX,-4294967296
            and RCX,RDX
            add R10D,ESI
            or RCX,R11
            movsx ESI,R10B
            mov R9,RCX
            mov EDX,ESI
            shr R9,32
            add EDX,R9D
            setb R11B
            test R10B,R10B
            js .L_454d00
.L_454bc1:

            mov ESI,DWORD PTR [RSP+16]
            xor R10D,R10D
            mov ECX,ECX
            add EDX,ESI
            setb R10B
            add EDX,ESI
            adc R10B,0
            add EDX,ESI
            adc R10B,0
            xor ESI,ESI
            add EDX,DWORD PTR [RSP+32]
            mov R12D,EDX
            setb SIL
            sub R12D,R8D
            add ESI,R10D
            mov EBP,R12D
            sub EBP,R15D
            mov R9D,EBP
            sub R9D,R13D
            cmp R8D,EDX
            seta DL
            sub ESI,EDX
            cmp R15D,R12D
            seta DL
            sub ESI,EDX
            cmp R13D,EBP
            seta DL
            sub ESI,EDX
            cmp EDI,R9D
            seta DL
            sub R9D,EDI
            movabs RDI,-4294967296
            shl R9,32
            sub ESI,EDX
            mov RDX,R14
            or RCX,R9
            and RDX,RDI
            add R11B,SIL
            mov QWORD PTR [RAX+24],RCX
            mov ECX,0
            cmovns ECX,R11D
            movsx RCX,CL
            or RDX,RCX
            mov QWORD PTR [RAX+32],RDX
            mov EDX,8
            nop
            nop
            nop
.L_454c58:

            mov RSI,QWORD PTR [RBX+8]
            add RDX,1
            lea RCX,QWORD PTR [RSI+RSI*1]
            cmp RCX,RDX
            jbe .L_454c90

            mov RCX,RDX
            shr RCX,1
            test DL,1
            lea RSI,QWORD PTR [RAX+RCX*8]
            mov RCX,QWORD PTR [RSI]
            je .L_454c88

            and ECX,4294967295
            mov QWORD PTR [RSI],RCX
            jmp .L_454c58
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454c88:

            and RCX,RDI
            mov QWORD PTR [RSI],RCX
            jmp .L_454c58
.L_454c90:

            test R11B,R11B
            jns .L_454cd0

            mov RDX,QWORD PTR [RSP+64]
            mov RCX,QWORD PTR [RSP+56]
            movsx R11D,R11B
            neg R11D
            lea RSI,QWORD PTR [RSP+48]
            mov RDI,RBX
            movsxd RAX,R11D
            mov QWORD PTR [RDX+RCX*8-8],RAX
            mov RDX,RBX
            call .L_44ffd0

            test EAX,EAX
            jne .L_454cd0

            mov DWORD PTR [RBX],4294967295
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454cd0:

            mov RBX,QWORD PTR [RSP+120]
            xor RBX,QWORD PTR FS:[40]
            mov EAX,DWORD PTR [RSP+20]
            jne .L_454da0

            add RSP,136
.L_454cef:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454d00:

            neg ESI
            cmp ESI,R9D
            seta R11B
            neg R11D
            jmp .L_454bc1
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454d18:

            neg ECX
            cmp ECX,R10D
            seta R12B
            neg R12D
            mov BYTE PTR [RSP+28],R12B
            jmp .L_4548d5
          .byte 0x66
          .byte 0x90
.L_454d30:

            neg EDX
            cmp EDX,R10D
            seta R11B
            neg R11D
            jmp .L_454969
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454d48:

            neg EDX
            cmp EDX,R9D
            seta R10B
            neg R10D
            jmp .L_4549d8
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454d60:

            neg ECX
            cmp ECX,R9D
            seta CL
            neg ECX
            mov R11D,ECX
            jmp .L_454a55
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454d78:

            neg R10D
            cmp R10D,R11D
            seta R9B
            neg R9D
            jmp .L_454ac9
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_454d90:

            neg ESI
            cmp ESI,ECX
            seta R10B
            neg R10D
            jmp .L_454b36
.L_454da0:

            call __stack_chk_fail@PLT
.L_454da5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454db0:

            push RBP
            push RBX
            mov EBP,ESI
            mov RBX,RDI
            sub RSP,8
.L_454dbb:

            call .L_44d150

            cmp EBP,3
            mov DWORD PTR [RBX],EBP
            jne .L_454ec0

            lea RAX,QWORD PTR [RIP+.L_4547b0]
            lea RDI,QWORD PTR [RBX+8]
            mov DWORD PTR [RBX+8],1
            mov QWORD PTR [RBX+16],4
            mov DWORD PTR [RBX+56],1
            mov QWORD PTR [RBX+200],RAX
            lea RAX,QWORD PTR [RIP+.L_45f020]
            mov QWORD PTR [RBX+64],4
            mov DWORD PTR [RBX+152],1
            mov QWORD PTR [RBX+160],4
            mov QWORD PTR [RBX+24],RAX
            lea RAX,QWORD PTR [RIP+.L_45f000]
            mov DWORD PTR [RBX+80],1
            mov QWORD PTR [RBX+88],4
            mov DWORD PTR [RBX+104],1
            mov QWORD PTR [RBX+72],RAX
            lea RAX,QWORD PTR [RIP+.L_45efa0]
            mov QWORD PTR [RBX+112],4
            mov DWORD PTR [RBX+128],1
            mov QWORD PTR [RBX+136],1
            mov QWORD PTR [RBX+168],RAX
            lea RAX,QWORD PTR [RIP+.L_45efe0]
            mov QWORD PTR [RBX+96],RAX
            lea RAX,QWORD PTR [RIP+.L_45efc0]
            mov QWORD PTR [RBX+120],RAX
            lea RAX,QWORD PTR [RIP+.L_677150]
            mov QWORD PTR [RBX+144],RAX
            call .L_44f690

            lea RDI,QWORD PTR [RBX+152]
            mov QWORD PTR [RBX+176],RAX
            call .L_44f690

            mov DWORD PTR [RBX+192],1
            mov QWORD PTR [RBX+184],RAX
            xor EAX,EAX
.L_454eb6:

            add RSP,8
.L_454eba:

            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_454ec0:

            mov RDI,RBX
            call .L_44d150

            mov EAX,4294947200
            jmp .L_454eb6
.L_454ecf:

            nop
.L_454ed0:

            push RBP
            push RBX
            mov RBP,RDI
            lea RBX,QWORD PTR [RIP+.L_676ca0]
            lea RDI,QWORD PTR [RIP+.L_45f040]
            sub RSP,8
            jmp .L_454efe
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_454ef0:

            add RBX,48
            mov EAX,DWORD PTR [RBX]
            test EAX,EAX
            je .L_454f18

            mov RDI,QWORD PTR [RBX+8]
.L_454efe:

            mov RSI,RBP
            call strcmp@PLT

            test EAX,EAX
            jne .L_454ef0

            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_454f18:

            xor EBX,EBX
            add RSP,8
            mov RAX,RBX
            pop RBX
            pop RBP
            ret 
.L_454f24:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454f30:

            lea RAX,QWORD PTR [RIP+.L_45f060]
            ret 
.L_454f38:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454f40:

            test RDI,RDI
            je .L_454f47

            jmp .L_454ed0
.L_454f47:

            xor EAX,EAX
            ret 
.L_454f4a:

            nop
            nop
            nop
            nop
            nop
            nop
.L_454f50:

            lea RAX,QWORD PTR [RIP+.L_676ca0]
            cmp EDI,49407
            mov EDX,0
            cmovne RAX,RDX
            ret 
.L_454f67:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454f70:

            lea RDX,QWORD PTR [RIP+.L_45f040]
            lea RAX,QWORD PTR [RIP+.L_45e4b3]
            cmp EDI,49407
            cmove RAX,RDX
            ret 
.L_454f89:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454f90:

            push RBX
            xor EBX,EBX
            test RDI,RDI
            je .L_454fa4

            call .L_454ed0

            test RAX,RAX
            je .L_454fa4

            mov EBX,DWORD PTR [RAX]
.L_454fa4:

            mov EAX,EBX
            pop RBX
            ret 
.L_454fa8:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454fb0:

            mov ECX,DWORD PTR [RDI+24]
            xor EAX,EAX
            cmp ECX,10
            ja .L_454fe1

            mov EDX,1
            mov EAX,1
            shl RDX,CL
            test DL,142
            jne .L_454fe1

            test DH,6
            mov EAX,2
            jne .L_454fe1

            xor EAX,EAX
            and EDX,16
            setne AL
            shl EAX,2
.L_454fe1:

            ret 
.L_454fe3:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_454ff0:

            mov EDX,DWORD PTR [RDI+24]
            cmp EDX,1
            jb .L_455010

            cmp EDX,3
            mov EAX,1
            jbe .L_45500c

            cmp EDX,4
            mov EAX,4
            jne .L_455010
.L_45500c:

            ret 
          .byte 0x66
          .byte 0x90
.L_455010:

            xor EAX,EAX
            ret 
.L_455013:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_455020:

            push RBP
            mov RBP,RSP
            push R15
            push R14
            push R13
            push R12
            push RBX
            sub RSP,88
.L_455031:

            mov R9D,DWORD PTR [RDI+8]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RBP-56],RAX
            xor EAX,EAX
            cmp R9D,16
            je .L_455fc0

            cmp QWORD PTR [RDI+88],0
            mov R14,RDI
            je .L_455fc0

            lea R8,QWORD PTR [RIP+.L_45f068]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,3363
            mov ESI,2
            call .L_443270

            mov RDI,R14
            call .L_447390

            test EAX,EAX
            mov EBX,EAX
            jne .L_4556b0

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_4550a8

            mov RAX,QWORD PTR [R14+88]
            cmp BYTE PTR [RAX+756],1
            je .L_4556d8
.L_4550a8:

            mov R9D,DWORD PTR [R14+8]
            cmp R9D,15
            ja .L_455f90

            lea RCX,QWORD PTR [RIP+.L_45f828]
            mov EDX,R9D
            movsxd RAX,DWORD PTR [RCX+RDX*4]
            add RAX,RCX
            jmp RAX
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4550d0:

            lea R8,QWORD PTR [RIP+.L_45f079]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,719
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14]
            cmp QWORD PTR [RAX+48],0
            je .L_457042

            movzx EDX,BYTE PTR [RAX+150]
            mov DWORD PTR [R14+12],EDX
            movzx EDX,BYTE PTR [RAX+151]
            mov DWORD PTR [R14+16],EDX
            movzx EDI,BYTE PTR [RAX+148]
            test DIL,DIL
            je .L_456c12

            movzx EDX,BYTE PTR [RAX+152]
            mov RBX,QWORD PTR [R14+320]
            movzx ESI,BYTE PTR [RAX+149]
            lea RCX,QWORD PTR [RBX+4]
            mov QWORD PTR [RBP-88],RBX
            shr DL,1
            and EDX,1
            call .L_44c0d0

            movzx EAX,BYTE PTR [RBX+5]
            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45f360]
            mov ECX,757
            mov ESI,3
            mov RDI,R14
            push RAX
            movzx R9D,BYTE PTR [RBX+4]
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov R12,QWORD PTR [R14+88]
            pop RDX
            pop RCX
            test BYTE PTR [RAX+152],2
            lea RSI,QWORD PTR [R12+952]
            jne .L_45688c
.L_45519b:

            mov RDI,QWORD PTR [RAX+56]
            mov EDX,4
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_455fd0

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R12+956]
            mov EDX,28
            mov RDI,QWORD PTR [RAX+56]
            call QWORD PTR [RAX+48]

            test EAX,EAX
            mov EBX,EAX
            jne .L_455fd0

            mov RAX,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [RAX+952]
.L_4551dd:

            mov RBX,QWORD PTR [RBP-88]
            sub RSP,8
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            movdqu XMM0,XMMWORD PTR [RSI]
            lea R8,QWORD PTR [RIP+.L_45d233]
            mov ECX,766
            mov RDI,R14
            movups XMMWORD PTR [RBX+6],XMM0
            lea R9,QWORD PTR [RBX+6]
            lea R12,QWORD PTR [RBX+39]
            mov R13,R12
            movdqu XMM0,XMMWORD PTR [RSI+16]
            mov ESI,3
            movups XMMWORD PTR [R9+16],XMM0
            push 32
            call .L_443490

            mov RAX,QWORD PTR [R14+80]
            pop RBX
            pop R15
            mov RDX,QWORD PTR [RAX+8]
            lea RAX,QWORD PTR [RDX-16]
            cmp RAX,16
            ja .L_456030

            mov RAX,QWORD PTR [R14+88]
            mov R11D,DWORD PTR [RAX+1048]
            test R11D,R11D
            je .L_456030

            mov RAX,QWORD PTR [RBP-88]
            xor EBX,EBX
            mov BYTE PTR [RAX+38],DL
            nop
            nop
            nop
            nop
            nop
            nop
.L_455260:

            mov RAX,QWORD PTR [R14+80]
            movzx EAX,BYTE PTR [RAX+RBX*1+16]
            mov BYTE PTR [R12+RBX*1],AL
            add RBX,1
            cmp RDX,RBX
            jne .L_455260

            lea R13,QWORD PTR [R12+RBX*1]
.L_45527a:

            lea R8,QWORD PTR [RIP+.L_45f388]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov R9,RBX
            mov ECX,819
            mov ESI,3
            mov RDI,R14
            call .L_443270

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45d24e]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            push RBX
            mov R9,R12
            mov ECX,820
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RAX,QWORD PTR [R14]
            pop R9
            pop R10
            test BYTE PTR [RAX+152],2
            je .L_455378

            mov RAX,QWORD PTR [R14+88]
            lea RBX,QWORD PTR [R13+1]
            mov R9,QWORD PTR [RAX+728]
            test R9,R9
            je .L_45696a

            movzx EAX,BYTE PTR [RAX+736]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45d267]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,3
            mov ECX,837
            mov RDI,R14
            push RAX
            call .L_443490

            mov RAX,QWORD PTR [R14+88]
            movzx EAX,BYTE PTR [RAX+736]
            mov BYTE PTR [R13],AL
            mov R8,QWORD PTR [R14+88]
            movzx EAX,BYTE PTR [R8+736]
            mov RSI,QWORD PTR [R8+728]
            cmp EAX,8
            jae .L_456928

            test AL,4
            jne .L_456d0a

            test EAX,EAX
            je .L_455367

            movzx EDX,BYTE PTR [RSI]
            test AL,2
            mov BYTE PTR [RBX],DL
            jne .L_456fdb
.L_455363:

            mov R8,QWORD PTR [R14+88]
.L_455367:

            movzx R13D,BYTE PTR [R8+736]
            mov RAX,QWORD PTR [R14]
            pop RDI
            pop R8
            add R13,RBX
.L_455378:

            movsxd RDX,DWORD PTR [R14+16]
            lea RBX,QWORD PTR [R13+2]
            mov R15,QWORD PTR [RAX+RDX*8]
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            je .L_456958

            xor R12D,R12D
            nop
            nop
            nop
            nop
            nop
            nop
.L_455398:

            call .L_454f50

            test RAX,RAX
            je .L_45540f

            mov RDX,QWORD PTR [R14]
            movzx ECX,BYTE PTR [RDX+149]
            cmp DWORD PTR [RAX+32],ECX
            jg .L_45540f

            movzx ECX,BYTE PTR [RDX+151]
            cmp DWORD PTR [RAX+40],ECX
            jl .L_45540f

            test BYTE PTR [RDX+152],2
            je .L_4553cc

            test BYTE PTR [RAX+44],4
            jne .L_45540f
.L_4553cc:

            cmp DWORD PTR [RAX+24],11
            je .L_45607d
.L_4553d6:

            mov R9D,DWORD PTR [R15]
            lea R8,QWORD PTR [RIP+.L_45f3b0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,887
            mov ESI,3
            mov RDI,R14
            add R12,1
            add RBX,2
            call .L_443270

            mov EAX,DWORD PTR [R15]
            mov BYTE PTR [RBX-2],AH
            mov EAX,DWORD PTR [R15]
            mov BYTE PTR [RBX-1],AL
.L_45540f:

            add R15,4
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            jne .L_455398

            lea R9,QWORD PTR [R12+1]
            mov RAX,R9
            lea EDX,DWORD PTR [R9+R9*1]
            shr RAX,7
.L_45542e:

            mov ECX,4294967040
            lea R8,QWORD PTR [RIP+.L_45f3d8]
            mov ESI,3
            mov WORD PTR [RBX],CX
            mov BYTE PTR [R13+1],DL
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov BYTE PTR [R13],AL
            mov ECX,920
            xor EAX,EAX
            mov RDI,R14
            xor R15D,R15D
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45f400]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov R9D,1
            mov ECX,951
            mov ESI,3
            mov RDI,R14
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45f420]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor R9D,R9D
            xor EAX,EAX
            mov ECX,953
            mov ESI,3
            mov RDI,R14
            call .L_443270

            lea RAX,QWORD PTR [RBX+4]
            mov ESI,1
            lea R8,QWORD PTR [RIP+.L_45f440]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov WORD PTR [RBX+2],SI
            mov RDI,R14
            mov QWORD PTR [RBP-96],RAX
            lea RAX,QWORD PTR [RBX+6]
            mov ECX,263
            mov ESI,3
            mov R13,QWORD PTR [R14+320]
            mov QWORD PTR [RBP-104],RAX
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov R12,QWORD PTR [RAX+128]
            mov EDI,DWORD PTR [R12]
            test EDI,EDI
            jne .L_455520

            jmp .L_456148
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455510:

            add R15,2
            mov EDI,DWORD PTR [R12+R15*2]
            test EDI,EDI
            je .L_456148
.L_455520:

            call .L_44d010

            test RAX,RAX
            jne .L_455510

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45f480]
            mov ECX,276
            mov ESI,1
            mov RDI,R14
            xor R13D,R13D
            call .L_443270

            mov EDX,2
.L_455552:

            mov RAX,QWORD PTR [RBP-96]
            lea R8,QWORD PTR [RIP+.L_45f4a8]
            mov ECX,328
            mov ESI,3
            mov RDI,R14
            lea R12,QWORD PTR [RAX+RDX*1]
            mov RAX,QWORD PTR [R14+320]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R9,QWORD PTR [RAX+768]
            xor EAX,EAX
            mov QWORD PTR [RBP-112],R9
            call .L_443270

            mov R9,QWORD PTR [RBP-112]
            cmp R12,R9
            ja .L_456056

            sub R9,R12
            cmp R9,5
            jbe .L_456056

            mov RAX,QWORD PTR [RBP-96]
            mov R15D,1
            mov DWORD PTR [R12],33557248
            mov WORD PTR [R12+4],R15W
            lea R12,QWORD PTR [RAX+R13*1+8]
            add R13,6
.L_4555c9:

            mov RAX,QWORD PTR [R14+320]
            mov RDI,QWORD PTR [R14+88]
            mov R15,RAX
            call .L_453f10

            test EAX,EAX
            je .L_45670a
.L_4555e4:

            mov RAX,QWORD PTR [R14]
            test WORD PTR [RAX+152],448
            jne .L_456695
.L_4555f6:

            lea R8,QWORD PTR [RIP+.L_45f598]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov R9,R13
            mov ECX,1025
            mov ESI,3
            mov RDI,R14
            call .L_443270

            test R13,R13
            je .L_455636

            mov RAX,R13
            mov BYTE PTR [RBX+5],R13B
            add R13,QWORD PTR [RBP-104]
            shr RAX,8
            mov BYTE PTR [RBX+4],AL
            mov QWORD PTR [RBP-96],R13
.L_455636:

            mov RAX,QWORD PTR [RBP-96]
            sub RAX,QWORD PTR [RBP-88]
            mov DWORD PTR [R14+328],22
            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov BYTE PTR [RAX],1
            mov RAX,QWORD PTR [R14]
            add DWORD PTR [R14+8],1
            test BYTE PTR [RAX+152],2
            jne .L_456850
.L_45566f:

            mov RDI,R14
            call .L_447720

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45f0ba]
            mov ECX,1051
            je .L_455ca3

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,1047
            mov ESI,1
            mov RDI,R14
            call .L_4433c0
.L_4556b0:

            mov RSI,QWORD PTR [RBP-56]
            xor RSI,QWORD PTR FS:[40]
            mov EAX,EBX
            jne .L_456cf4

            lea RSP,QWORD PTR [RBP-40]
            pop RBX
            pop R12
            pop R13
            pop R14
            pop R15
            pop RBP
.L_4556d3:

            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4556d8:

            mov RDI,R14
            call .L_448070

            test EAX,EAX
            je .L_4550a8

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4556f0:

            lea R8,QWORD PTR [RIP+.L_45d668]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,3474
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov DWORD PTR [R14+8],15
            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455720:

            mov RDI,R14
            call .L_44a810

            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455730:

            mov DWORD PTR [R14+8],1
            mov EBX,R9D
            jmp .L_4556b0
.L_455740:

            lea R8,QWORD PTR [RIP+.L_45f0d0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1447
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RDI,R14
            mov R12,QWORD PTR [R14+192]
            call .L_44a210

            test EAX,EAX
            mov EBX,EAX
            jne .L_45610b

            cmp DWORD PTR [R14+208],22
            jne .L_456cba

            mov RAX,QWORD PTR [R14]
            test BYTE PTR [RAX+152],2
            je .L_456040

            cmp BYTE PTR [R12],3
            je .L_456d70

            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+728]
            call QWORD PTR [RIP+.L_677120]

            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],0
            mov QWORD PTR [RAX+728],0
            mov RAX,QWORD PTR [R14]
            mov RCX,QWORD PTR [R14+264]
            movzx EDX,BYTE PTR [RAX+152]
            and EDX,2
            cmp DL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,50
            cmp DL,1
            sbb RSI,RSI
            and RSI,-8
            add RSI,12
.L_4557fb:

            cmp RCX,RAX
            jb .L_456b10

            cmp BYTE PTR [R12],2
            jne .L_456b10

            sub RSP,8
            add R12,RSI
            lea R8,QWORD PTR [RIP+.L_45f182]
            push 2
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9,R12
            mov ECX,1527
            mov ESI,3
            mov RDI,R14
            mov QWORD PTR [RBP-88],R12
            call .L_443490

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [R14+16]
            lea RDI,QWORD PTR [R14+12]
            mov RCX,R12
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_44c100

            mov RAX,QWORD PTR [R14]
            mov ECX,DWORD PTR [R14+12]
            pop RDX
            mov EDX,DWORD PTR [R14+16]
            movzx R9D,BYTE PTR [RAX+150]
            movzx EDI,BYTE PTR [RAX+149]
            pop RSI
            movzx ESI,BYTE PTR [RAX+148]
            movzx EAX,BYTE PTR [RAX+151]
            cmp ECX,R9D
            jl .L_456b21

            cmp EDX,EAX
            jl .L_456b21

            cmp ECX,ESI
            jg .L_456b21

            cmp EDX,EDI
            jg .L_456b21

            mov R15,QWORD PTR [RBP-88]
            lea R8,QWORD PTR [RIP+.L_45f650]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1553
            mov ESI,3
            mov RDI,R14
            mov R9D,DWORD PTR [R15+2]
            bswap R9D
            call .L_443270

            mov RAX,QWORD PTR [R14+88]
            lea R9,QWORD PTR [R15+2]
            sub RSP,8
            movdqu XMM0,XMMWORD PTR [R15+2]
            lea R8,QWORD PTR [RIP+.L_45d4d6]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1560
            mov ESI,3
            movups XMMWORD PTR [RAX+984],XMM0
            mov RDI,R14
            movdqu XMM0,XMMWORD PTR [R9+16]
            movups XMMWORD PTR [RAX+1000],XMM0
            movzx R12D,BYTE PTR [R15+34]
            push 32
            call .L_443490

            pop R13
            cmp R12,32
            pop R15
            ja .L_456f60

            mov RAX,QWORD PTR [R14]
            mov RDX,QWORD PTR [R14+264]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            lea RAX,QWORD PTR [R12+RAX*1+12]
            lea RCX,QWORD PTR [RAX+39]
            cmp RDX,RCX
            jbe .L_456133

            mov RSI,QWORD PTR [RBP-88]
            movzx R15D,BYTE PTR [RSI+R12*1+38]
            movzx ECX,BYTE PTR [RSI+R12*1+39]
            shl R15D,8
            or R15D,ECX
            movsxd R15,R15D
            lea RCX,QWORD PTR [R15-1]
            cmp RCX,2
            jbe .L_456c6b

            lea RAX,QWORD PTR [RAX+R15*1+40]
            cmp RDX,RAX
            jne .L_456c6b
.L_455996:

            mov RSI,QWORD PTR [RBP-88]
            movzx R13D,BYTE PTR [RSI+R12*1+35]
            movzx EAX,BYTE PTR [RSI+R12*1+36]
            shl R13D,8
            or R13D,EAX
            lea RAX,QWORD PTR [RSI+R12*1+37]
            movzx R9D,BYTE PTR [RAX]
            mov QWORD PTR [RBP-96],RAX
            test R9B,R9B
            jne .L_456d21

            mov RDX,QWORD PTR [R14+120]
            mov EDI,R13D
            mov QWORD PTR [RBP-104],RDX
            call .L_454f50

            mov RDX,QWORD PTR [RBP-104]
            mov QWORD PTR [RDX],RAX
            mov RAX,QWORD PTR [R14+120]
            mov RSI,QWORD PTR [RAX]
            test RSI,RSI
            je .L_456ff0

            mov RDI,R14
            call .L_44a7b0

            lea R8,QWORD PTR [RIP+.L_45da40]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov R9,R12
            mov ECX,1640
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [RBP-88]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45d509]
            push R12
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1641
            mov ESI,3
            mov RDI,R14
            lea R11,QWORD PTR [RAX+35]
            mov R9,R11
            mov QWORD PTR [RBP-104],R11
            call .L_443490

            mov R8,QWORD PTR [R14+88]
            pop R9
            mov R9,QWORD PTR [R14+80]
            mov R11D,DWORD PTR [R8+1048]
            pop R10
            lea RCX,QWORD PTR [R9+16]
            test R11D,R11D
            mov R11,QWORD PTR [RBP-104]
            je .L_455a7a

            test R12,R12
            je .L_455a7a

            cmp R13D,DWORD PTR [R9]
            je .L_456a5e
.L_455a7a:

            add DWORD PTR [R14+8],1
            cmp R12D,8
            mov DWORD PTR [R8+1048],0
            mov DWORD PTR [R9],R13D
            mov DWORD PTR [R9+4],0
            mov QWORD PTR [R9+8],R12
            jae .L_4561f7

            test R12B,4
            jne .L_456be3

            test R12D,R12D
            je .L_455aca

            mov RAX,QWORD PTR [RBP-88]
            test R12B,2
            movzx EAX,BYTE PTR [RAX+35]
            mov BYTE PTR [RCX],AL
            jne .L_456c58
.L_455ac6:

            mov R8,QWORD PTR [R14+88]
.L_455aca:

            mov ESI,DWORD PTR [R8+1048]
            lea RAX,QWORD PTR [RIP+.L_4599ba]
            lea R9,QWORD PTR [RIP+.L_4583e5]
            lea R8,QWORD PTR [RIP+.L_45d522]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1679
            mov RDI,R14
            test ESI,ESI
            mov ESI,3
            cmovne R9,RAX
            xor EAX,EAX
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45f6c0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov R9D,R13D
            mov ECX,1681
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [RBP-96]
            lea R8,QWORD PTR [RIP+.L_45f6e8]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1682
            mov ESI,3
            mov RDI,R14
            movzx R9D,BYTE PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov RAX,QWORD PTR [R14+80]
            mov EDI,DWORD PTR [RAX]
            call .L_454f50

            test RAX,RAX
            je .L_456fbb

            mov R9,QWORD PTR [RAX+8]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45da68]
            xor EAX,EAX
            mov ECX,1698
            mov ESI,3
            mov RDI,R14
            call .L_443270

            movsxd RDX,DWORD PTR [R14+16]
            mov RAX,QWORD PTR [R14]
            mov RAX,QWORD PTR [RAX+RDX*8]
            jmp .L_455bb0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_455ba0:

            mov RCX,QWORD PTR [R14+80]
            add RAX,4
            cmp EDX,DWORD PTR [RCX]
            je .L_456232
.L_455bb0:

            mov EDX,DWORD PTR [RAX]
            test EDX,EDX
            jne .L_455ba0

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1705
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
.L_455bd3:

            call .L_443270

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294936192
            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455bf8:

            mov RDI,R14
            call .L_44a400

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455c10:

            lea R8,QWORD PTR [RIP+.L_45f226]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,2767
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RDI,R14
            call .L_44a210

            test EAX,EAX
            mov EBX,EAX
            jne .L_456093

            cmp DWORD PTR [R14+208],22
            jne .L_456cc8

            mov RAX,QWORD PTR [R14]
            movzx EDX,BYTE PTR [RAX+152]
            and EDX,2
            cmp DL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            cmp QWORD PTR [R14+264],RAX
            jne .L_456ba5

            mov RAX,QWORD PTR [R14+192]
            cmp BYTE PTR [RAX],14
            jne .L_456ba5

            add DWORD PTR [R14+8],1
            test DL,DL
            jne .L_456688
.L_455c97:

            lea R8,QWORD PTR [RIP+.L_45f25f]
            mov ECX,2797
.L_455ca3:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4556b0
          .byte 0x66
          .byte 0x90
.L_455cc0:

            mov RDI,R14
            call .L_44a350

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x90
.L_455cd0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45f27a]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,2809
            mov ESI,2
            mov RDI,R14
            mov RBX,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            cmp DWORD PTR [RBX+24],11
            jne .L_456b79

            mov RAX,QWORD PTR [R14]
            mov RSI,QWORD PTR [R14+320]
            lea RCX,QWORD PTR [RBP-64]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,764
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            add RSI,4
            call .L_454390

            test EAX,EAX
            mov EBX,EAX
            jne .L_456000

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            mov EDX,32
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            lea RCX,QWORD PTR [RDI+944]
            lea RSI,QWORD PTR [RDI+1016]
            call .L_4545e0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4565a4

            mov RAX,QWORD PTR [RBP-64]
            mov DWORD PTR [R14+328],22
            mov RDI,R14
            add RAX,4
            mov QWORD PTR [R14+336],RAX
            mov RAX,QWORD PTR [R14+320]
            mov BYTE PTR [RAX],16
            add DWORD PTR [R14+8],1
            call .L_447720

            test EAX,EAX
            mov EBX,EAX
            lea R8,QWORD PTR [RIP+.L_45f297]
            mov ECX,3051
            je .L_455ca3

            lea R8,QWORD PTR [RIP+.L_45d48f]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,3047
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_455dd8:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45f2b4]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,3068
            mov ESI,2
            mov RDI,R14
            mov RAX,QWORD PTR [RAX]
            mov R15,RAX
            xor EAX,EAX
            call .L_443270

            mov RDI,R14
            call .L_446bd0

            test EAX,EAX
            mov EBX,EAX
            jne .L_4560bb

            mov EAX,DWORD PTR [R15+24]
            lea EDX,DWORD PTR [RAX-5]
            cmp EDX,3
            jbe .L_455e2b

            cmp EAX,11
            jne .L_457031
.L_455e2b:

            lea R8,QWORD PTR [RIP+.L_45f800]
            mov ECX,3082
.L_455e37:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,2
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            add DWORD PTR [R14+8],1
            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455e60:

            mov RDI,R14
            call .L_44a4b0

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x90
.L_455e70:

            mov RDI,R14
            call .L_44a950

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x90
.L_455e80:

            mov RDI,R14
            call .L_44a570

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x90
.L_455e90:

            mov RDI,R14
            call .L_44aba0

            mov EBX,EAX
            jmp .L_4556b0
          .byte 0x90
.L_455ea0:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45f1cf]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,2263
            mov ESI,2
            mov RDI,R14
            mov R12,QWORD PTR [RAX]
            xor EAX,EAX
            call .L_443270

            mov RDI,R14
            call .L_44a210

            test EAX,EAX
            mov EBX,EAX
            jne .L_4560e3

            cmp DWORD PTR [R14+208],22
            jne .L_456c7c

            mov RAX,QWORD PTR [R14+192]
            cmp BYTE PTR [RAX],12
            je .L_4565cc

            mov EAX,DWORD PTR [R12+24]
            and EAX,4294967293
            cmp EAX,5
            jne .L_45706e

            mov DWORD PTR [R14+276],1
.L_455f15:

            add DWORD PTR [R14+8],1
            lea R8,QWORD PTR [RIP+.L_45f1ec]
            mov ECX,2607
            jmp .L_455ca3
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455f30:

            mov RAX,QWORD PTR [R14+120]
            lea R8,QWORD PTR [RIP+.L_45f209]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,2618
            mov ESI,2
            mov RDI,R14
            mov RAX,QWORD PTR [RAX]
            mov R15,RAX
            xor EAX,EAX
            call .L_443270

            mov ECX,DWORD PTR [R15+24]
            cmp ECX,10
            ja .L_455f78

            mov EAX,1
            shl RAX,CL
            test EAX,1566
            jne .L_456f71
.L_455f78:

            lea R8,QWORD PTR [RIP+.L_45f7d8]
            mov ECX,2622
            jmp .L_455e37
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_455f90:

            lea R8,QWORD PTR [RIP+.L_45d678]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,3483
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294938368
            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_455fc0:

            mov EBX,4294938368
            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_455fd0:

            lea R8,QWORD PTR [RIP+.L_45f2d0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EBX
            mov ECX,761
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456000:

            lea R8,QWORD PTR [RIP+.L_45dbc0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,3018
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456030:

            mov RAX,QWORD PTR [RBP-88]
            xor EBX,EBX
            mov BYTE PTR [RAX+38],0
            jmp .L_45527a
          .byte 0x90
.L_456040:

            mov RCX,QWORD PTR [R14+264]
            mov EAX,42
            mov ESI,4
            jmp .L_4557fb
.L_456056:

            lea R8,QWORD PTR [RIP+.L_45d53e]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,332
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4555c9
.L_45607d:

            mov RDI,QWORD PTR [R14+88]
            call .L_453f10

            test EAX,EAX
            je .L_4553d6

            jmp .L_45540f
.L_456093:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,2771
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
.L_4560bb:

            lea R8,QWORD PTR [RIP+.L_45d4f1]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,3072
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
.L_4560e3:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,2300
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
.L_45610b:

            lea R8,QWORD PTR [RIP+.L_45d5f9]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,1454
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
.L_456133:

            add RAX,38
            cmp RDX,RAX
            jne .L_456faa

            xor R15D,R15D
            jmp .L_455996
.L_456148:

            mov RAX,QWORD PTR [RBP-104]
            add R13,768
            cmp RAX,R13
            ja .L_45685d

            lea RDX,QWORD PTR [R15+6]
            sub R13,RAX
            cmp R13,RDX
            jb .L_45685d

            mov RAX,QWORD PTR [R14]
            xor R12D,R12D
            lea R13,QWORD PTR [RBX+12]
            mov R15,QWORD PTR [RAX+128]
            mov EDI,DWORD PTR [R15]
            test EDI,EDI
            jne .L_456193

            jmp .L_456b6c
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456190:

            mov R12,RCX
.L_456193:

            call .L_44d010

            movzx ECX,BYTE PTR [RAX+5]
            mov BYTE PTR [R13+R12*1],CL
            movzx EAX,WORD PTR [RAX+4]
            lea RCX,QWORD PTR [R12+2]
            mov BYTE PTR [R13+RCX*1-1],AL
            mov EDI,DWORD PTR [R15+RCX*2]
            test EDI,EDI
            jne .L_456190

            test RCX,RCX
            je .L_456b6c

            mov EAX,2560
            mov BYTE PTR [RBX+11],CL
            lea R13,QWORD PTR [R12+8]
            mov WORD PTR [RBX+6],AX
            lea RAX,QWORD PTR [R12+4]
            lea RDX,QWORD PTR [R12+10]
            shr RAX,8
            mov BYTE PTR [RBX+8],AL
            lea EAX,DWORD PTR [RCX+2]
            mov BYTE PTR [RBX+9],AL
            mov RAX,RCX
            shr RAX,8
            mov BYTE PTR [RBX+10],AL
            jmp .L_455552
.L_4561f7:

            mov RAX,QWORD PTR [RBP-88]
            lea RDI,QWORD PTR [RCX+8]
            mov RSI,R11
            and RDI,-8
            mov RAX,QWORD PTR [RAX+35]
            mov QWORD PTR [RCX],RAX
            mov EAX,R12D
            mov RDX,QWORD PTR [R11+RAX*1-8]
            mov QWORD PTR [RCX+RAX*1-8],RDX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,R12D
            shr ECX,3

            rep movsq 

            mov R8,QWORD PTR [R14+88]
            jmp .L_455aca
.L_456232:

            mov RAX,QWORD PTR [RBP-88]
            lea R8,QWORD PTR [RIP+.L_45db90]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov DWORD PTR [RCX+4],0
            mov R9,R15
            mov ECX,1733
            mov ESI,2
            mov RDI,R14
            lea R13,QWORD PTR [RAX+R12*1+40]
            xor EAX,EAX
            call .L_443270

            test R15,R15
            je .L_456a01

            movzx EAX,WORD PTR [R13+2]
            movzx R9D,WORD PTR [R13]
            rol AX,8
            rol R9W,8
            movzx EAX,AX
            movzx R9D,R9W
            lea R12D,DWORD PTR [RAX+4]
            mov DWORD PTR [RBP-88],EAX
            cmp R15,R12
            jae .L_456343

            jmp .L_4569c3
          .byte 0x90
.L_4562a0:

            cmp R9D,256
            je .L_4564b0

            cmp R9D,65281
            jne .L_456480

            lea R8,QWORD PTR [RIP+.L_45d31e]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1753
            mov ESI,3
            mov RDI,R14
            call .L_443270

            cmp DWORD PTR [RBP-88],1
            jne .L_456c01

            cmp BYTE PTR [R13+4],0
            jne .L_456c01

            mov DWORD PTR [R14+376],1
.L_4562fc:

            sub R15,R12
            add R13,R12
            lea RAX,QWORD PTR [R15-1]
            cmp RAX,2
            jbe .L_456a32

            test R15,R15
            je .L_456a01

            movzx EAX,WORD PTR [R13+2]
            movzx R9D,WORD PTR [R13]
            rol AX,8
            rol R9W,8
            movzx EAX,AX
            movzx R9D,R9W
            lea R12D,DWORD PTR [RAX+4]
            mov DWORD PTR [RBP-88],EAX
            cmp R12,R15
            ja .L_4569c3
.L_456343:

            cmp R9D,11
            je .L_4563f0

            jg .L_4562a0

            cmp R9D,1
            jne .L_456480

            lea R8,QWORD PTR [RIP+.L_45f708]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1766
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14]
            movzx EAX,WORD PTR [RAX+152]
            test AX,448
            je .L_4563a6

            cmp DWORD PTR [RBP-88],1
            jne .L_4563a6

            shr AX,6
            and EAX,7
            cmp BYTE PTR [R13+4],AL
            je .L_4562fc
.L_4563a6:

            lea R8,QWORD PTR [RIP+.L_45f730]
            mov ECX,1107
            nop
            nop
            nop
            nop
            nop
            nop
.L_4563b8:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936192
            call .L_443270

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4563f0:

            lea R8,QWORD PTR [RIP+.L_45f760]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1832
            mov ESI,3
            mov RDI,R14
            call .L_443270

            movsxd RAX,DWORD PTR [RBP-88]
            movzx ECX,BYTE PTR [R13+4]
            mov RSI,RAX
            lea RAX,QWORD PTR [RCX+1]
            cmp RSI,RAX
            jne .L_456cf9

            test RCX,RCX
            lea RSI,QWORD PTR [R13+5]
            je .L_456469

            movzx EDX,BYTE PTR [R13+5]
            add RCX,RSI
            lea RAX,QWORD PTR [R13+6]
            cmp DL,1
            ja .L_456461

            jmp .L_45656f
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456450:

            add RAX,1
            movzx EDX,BYTE PTR [RAX-1]
            cmp DL,1
            jbe .L_45656f
.L_456461:

            cmp RAX,RCX
            mov RSI,RAX
            jne .L_456450
.L_456469:

            lea R8,QWORD PTR [RIP+.L_45f198]
            mov ECX,1245
            jmp .L_4563b8
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456480:

            lea R8,QWORD PTR [RIP+.L_45d8c8]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1869
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4562fc
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_4564b0:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45f1b2]
            xor EAX,EAX
            mov ECX,1846
            mov ESI,3
            mov RDI,R14
            call .L_443270

            lea RAX,QWORD PTR [R13+4]
            movsxd RDX,DWORD PTR [RBP-88]
            mov QWORD PTR [RBP-88],RAX
            mov RAX,QWORD PTR [R14+120]
            mov RAX,QWORD PTR [RAX]
            cmp DWORD PTR [RAX+24],11
            jne .L_45699c

            mov RAX,QWORD PTR [R14+88]
            mov QWORD PTR [RBP-88],RDX
            mov RDI,QWORD PTR [RAX+696]
            call QWORD PTR [RIP+.L_677120]

            mov RDI,QWORD PTR [R14+88]
            mov RDX,QWORD PTR [RBP-88]
            lea RSI,QWORD PTR [R13+4]
            mov QWORD PTR [RDI+696],0
            mov QWORD PTR [RDI+704],0
            call .L_453f40

            test EAX,EAX
            je .L_4562fc

            lea R8,QWORD PTR [RIP+.L_45d880]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov RDI,R14
            mov R9D,EAX
            mov ECX,1275
            mov ESI,1
            mov EBX,EAX
            call .L_4433c0

            mov EDX,40
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_4556b0
.L_45656f:

            mov RAX,QWORD PTR [R14+88]

            lea R8,QWORD PTR [RIP+.L_45d33c]
            mov ECX,1237
            mov RDI,R14
            mov DWORD PTR [RAX+260],EDX
            movzx R9D,BYTE PTR [RSI]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,4
            xor EAX,EAX
            call .L_443270

            jmp .L_4562fc
.L_4565a4:

            lea R8,QWORD PTR [RIP+.L_45d611]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,3027
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4556b0
.L_4565cc:

            mov RDX,QWORD PTR [R14]
            mov R13,QWORD PTR [R14+264]
            lea R8,QWORD PTR [RIP+.L_45f1f5]
            mov ECX,2337
            mov ESI,3
            mov RDI,R14
            movzx EDX,BYTE PTR [RDX+152]
            and EDX,2
            cmp DL,1
            sbb RDX,RDX
            sub RSP,8
            and RDX,-8
            add RDX,12
            lea R15,QWORD PTR [RAX+RDX*1]
            sub R13,RDX
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            push R13
            mov R9,R15
            call .L_443490

            cmp DWORD PTR [R12+24],11
            pop RAX
            pop RDX
            jne .L_456d5f

            mov RDI,QWORD PTR [R14+88]
            mov RDX,R13
            mov RSI,R15
            call .L_454240

            test EAX,EAX
            je .L_455f15

            lea R8,QWORD PTR [RIP+.L_45dc28]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,2405
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294935808
            jmp .L_4556b0
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_456688:

            mov RDI,R14
            call .L_4475d0

            jmp .L_455c97
.L_456695:

            mov RAX,QWORD PTR [R14+320]
            lea R8,QWORD PTR [RIP+.L_45f560]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,442
            mov ESI,3
            mov RDI,R14
            lea R9,QWORD PTR [RAX+768]
            xor EAX,EAX
            mov QWORD PTR [RBP-112],R9
            call .L_443270

            mov R9,QWORD PTR [RBP-112]
            cmp R9,R12
            jb .L_4568a0

            sub R9,R12
            cmp R9,4
            jbe .L_4568a0

            mov DWORD PTR [R12],16777472
            mov RAX,QWORD PTR [R14]
            add R13,5
            movzx EAX,WORD PTR [RAX+152]
            shr AX,6
            and EAX,7
            mov BYTE PTR [R12+4],AL
            jmp .L_4555f6
.L_45670a:

            lea R8,QWORD PTR [RIP+.L_45f4e0]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,366
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,R15
            lea R8,QWORD PTR [RIP+.L_45d53e]
            mov ECX,370
            add RAX,768
            mov RDX,RAX
            sub RDX,R12
            cmp RDX,3
            jle .L_45690d

            mov R11D,1
            sub RAX,R12
            mov WORD PTR [R12],R11W
            mov RDX,QWORD PTR [R14+88]
            sub RAX,4
            mov R15,RAX
            cmp QWORD PTR [RDX+696],0
            je .L_456780

            cmp QWORD PTR [RDX+704],0
            jne .L_4568c7
.L_456780:

            lea R8,QWORD PTR [RIP+.L_45f510]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,385
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14]
            mov RDI,QWORD PTR [R14+88]
            lea RSI,QWORD PTR [R12+4]
            lea RCX,QWORD PTR [RBP-64]
            mov RDX,R15
            mov QWORD PTR [RBP-120],RSI
            mov R9,QWORD PTR [RAX+56]
            mov R8,QWORD PTR [RAX+48]
            call .L_454030

            test EAX,EAX
            jne .L_456f82

            mov RDX,QWORD PTR [R14+88]
            mov EDI,1
            mov RSI,QWORD PTR [RBP-64]
            mov QWORD PTR [RBP-112],RDX
            call QWORD PTR [RIP+.L_677128]

            mov RDX,QWORD PTR [RBP-112]
            lea R8,QWORD PTR [RIP+.L_45f0a8]
            mov ECX,399
            mov QWORD PTR [RDX+696],RAX
            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+696]
            test RDI,RDI
            je .L_45690d

            mov RDX,QWORD PTR [RBP-64]
            mov RSI,QWORD PTR [RBP-120]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP-64]
            mov RDX,QWORD PTR [R14+88]
            mov QWORD PTR [RDX+704],RAX
.L_45682c:

            mov RDX,RAX
            mov BYTE PTR [R12+3],AL
            lea R13,QWORD PTR [R13+RAX*1+4]
            mov RAX,QWORD PTR [RBP-96]
            shr RDX,8
            mov BYTE PTR [R12+2],DL
            lea R12,QWORD PTR [RAX+R13*1+2]
            jmp .L_4555e4
.L_456850:

            mov RDI,R14
            call .L_447690

            jmp .L_45566f
.L_45685d:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45d53e]
            mov ECX,285
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            xor R13D,R13D
            mov EDX,2
            jmp .L_455552
.L_45688c:

            cmp QWORD PTR [R12+728],0
            jne .L_4551dd

            jmp .L_45519b
.L_4568a0:

            lea R8,QWORD PTR [RIP+.L_45d53e]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,446
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4555f6
.L_4568c7:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            lea R8,QWORD PTR [RIP+.L_45f538]
            xor EAX,EAX
            mov ECX,408
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14+88]
            mov RDX,QWORD PTR [RAX+704]
            cmp RDX,R15
            mov QWORD PTR [RBP-64],RDX
            jbe .L_456c3e

            lea R8,QWORD PTR [RIP+.L_45d53e]
            mov ECX,414
.L_45690d:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4555e4
.L_456928:

            mov RDX,QWORD PTR [RSI]
            lea RDI,QWORD PTR [R13+9]
            and RDI,-8
            mov QWORD PTR [RBX],RDX
            mov EDX,EAX
            mov RCX,QWORD PTR [RSI+RDX*1-8]
            mov QWORD PTR [RBX+RDX*1-8],RCX
            mov RCX,RBX
            sub RCX,RDI
            sub RSI,RCX
            add ECX,EAX
            shr ECX,3

            rep movsq 

            jmp .L_455363
.L_456958:

            mov EDX,2
            xor EAX,EAX
            mov R9D,1
            jmp .L_45542e
.L_45696a:

            lea R8,QWORD PTR [RIP+.L_45f08f]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,830
            mov ESI,3
            mov RDI,R14
            call .L_443270

            mov BYTE PTR [R13],0
            mov R13,RBX
            mov RAX,QWORD PTR [R14]
            jmp .L_455378
.L_45699c:

            lea R8,QWORD PTR [RIP+.L_45d373]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1263
            mov ESI,3
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_4562fc
.L_4569c3:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1744
.L_4569cf:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936192
            call .L_443270

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_4556b0
.L_456a01:

            mov ECX,DWORD PTR [R14+376]
            test ECX,ECX
            jne .L_456a21

            mov RAX,QWORD PTR [R14]
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,48
            cmp AL,32
            je .L_45707f
.L_456a21:

            lea R8,QWORD PTR [RIP+.L_45f11d]
            mov ECX,1922
            jmp .L_455ca3
.L_456a32:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1877
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294936192
            jmp .L_4556b0
.L_456a5e:

            mov EDI,DWORD PTR [R9+4]
            test EDI,EDI
            jne .L_455a7a

            cmp R12,QWORD PTR [R9+8]
            jne .L_455a7a

            mov RSI,R11
            mov RDI,RCX
            mov RDX,R12
            mov QWORD PTR [RBP-128],R8
            mov QWORD PTR [RBP-120],R9
            mov QWORD PTR [RBP-112],R11
            mov QWORD PTR [RBP-104],RCX
            call memcmp@PLT

            test EAX,EAX
            mov RCX,QWORD PTR [RBP-104]
            mov R11,QWORD PTR [RBP-112]
            mov R9,QWORD PTR [RBP-120]
            mov R8,QWORD PTR [RBP-128]
            jne .L_455a7a

            mov DWORD PTR [R14+8],12
            mov RDI,R14
            call .L_446bd0

            test EAX,EAX
            je .L_455ac6

            lea R8,QWORD PTR [RIP+.L_45d4f1]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,1671
            mov ESI,1
            mov RDI,R14
            mov DWORD PTR [RBP-88],EAX
            call .L_4433c0

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov R11D,DWORD PTR [RBP-88]
            mov EBX,R11D
            jmp .L_4556b0
          .byte 0x66
          .byte 0x2e
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_456b10:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1508
            jmp .L_4569cf
.L_456b21:

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45f600]
            push RDI
            push RSI
            mov RDI,R14
            push RDX
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            push RCX
            push RAX
            mov ECX,1540
            mov ESI,1
            xor EAX,EAX
            call .L_443270

            add RSP,48
.L_456b50:

            mov EDX,70
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294939008
            jmp .L_4556b0
.L_456b6c:

            mov EDX,2
            xor R13D,R13D
            jmp .L_455552
.L_456b79:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,3035
.L_456b85:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294939648
            call .L_443270

            jmp .L_4556b0
.L_456ba5:

            lea R8,QWORD PTR [RIP+.L_45f241]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,2784
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,50
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294935680
            jmp .L_4556b0
.L_456be3:

            mov RAX,QWORD PTR [RBP-88]
            mov EAX,DWORD PTR [RAX+35]
            mov DWORD PTR [RCX],EAX
            mov EAX,R12D
            mov EDX,DWORD PTR [R11+RAX*1-4]
            mov DWORD PTR [RCX+RAX*1-4],EDX
            mov R8,QWORD PTR [R14+88]
            jmp .L_455aca
.L_456c01:

            lea R8,QWORD PTR [RIP+.L_45d800]
            mov ECX,1082
            jmp .L_4563b8
.L_456c12:

            lea R8,QWORD PTR [RIP+.L_45f308]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,738
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294938368
            jmp .L_4556b0
.L_456c3e:

            mov RSI,QWORD PTR [RAX+696]
            lea RDI,QWORD PTR [R12+4]
            call memcpy@PLT

            mov RAX,QWORD PTR [RBP-64]
            jmp .L_45682c
.L_456c58:

            mov EAX,R12D
            movzx EDX,WORD PTR [R11+RAX*1-2]
            mov WORD PTR [RCX+RAX*1-2],DX
            jmp .L_455ac6
.L_456c6b:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1578
            jmp .L_4569cf
.L_456c7c:

            lea R8,QWORD PTR [RIP+.L_45f788]
            mov ECX,2306
.L_456c88:

            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294936832
            call .L_443270

            mov EDX,10
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_4556b0
.L_456cba:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1480
            jmp .L_456c88
.L_456cc8:

            lea R8,QWORD PTR [RIP+.L_45f241]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,2777
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294936832
            jmp .L_4556b0
.L_456cf4:

            call __stack_chk_fail@PLT
.L_456cf9:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1219
            jmp .L_4569cf
.L_456d0a:

            mov EDX,DWORD PTR [RSI]
            mov EAX,EAX
            mov DWORD PTR [RBX],EDX
            mov EDX,DWORD PTR [RSI+RAX*1-4]
            mov DWORD PTR [RBX+RAX*1-4],EDX
            mov R8,QWORD PTR [R14+88]
            jmp .L_455367
.L_456d21:

            lea R8,QWORD PTR [RIP+.L_45f670]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1619
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EDX,47
            mov ESI,2
            mov RDI,R14
            call .L_449350

            mov EBX,4294938496
            jmp .L_4556b0
.L_456d5f:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,2414
            jmp .L_456b85
.L_456d70:

            lea R8,QWORD PTR [RIP+.L_45f0ff]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1491
            mov ESI,2
            mov RDI,R14
            call .L_443270

            lea R8,QWORD PTR [RIP+.L_45f11d]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            xor EAX,EAX
            mov ECX,1492
            mov ESI,2
            mov RDI,R14
            call .L_443270

            mov RAX,QWORD PTR [R14]
            lea R8,QWORD PTR [RIP+.L_45f133]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1363
            mov ESI,2
            mov RDI,R14
            movzx EAX,BYTE PTR [RAX+152]
            and EAX,2
            cmp AL,1
            sbb RAX,RAX
            and RAX,-8
            add RAX,12
            add RAX,QWORD PTR [R14+192]
            mov R15,RAX
            xor EAX,EAX
            call .L_443270

            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45f155]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            push 2
            mov R9,R15
            mov ECX,1371
            mov ESI,3
            mov RDI,R14
            call .L_443490

            mov RAX,QWORD PTR [R14]
            lea RSI,QWORD PTR [RBP-64]
            lea RDI,QWORD PTR [RBP-68]
            mov RCX,R15
            movzx EDX,BYTE PTR [RAX+152]
            shr DL,1
            and EDX,1
            call .L_44c100

            mov ECX,DWORD PTR [RBP-68]
            pop R9
            pop R10
            cmp ECX,2
            jle .L_4570be

            mov EAX,DWORD PTR [RBP-64]
            cmp EAX,1
            jle .L_4570be

            mov RDX,QWORD PTR [R14]
            movzx ESI,BYTE PTR [RDX+148]
            cmp ECX,ESI
            jg .L_4570be

            movzx EDX,BYTE PTR [RDX+149]
            cmp EAX,EDX
            jg .L_4570be

            lea R12,QWORD PTR [R15+3]
            movzx R15D,BYTE PTR [R15+2]
            sub RSP,8
            lea R8,QWORD PTR [RIP+.L_45d275]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1393
            mov RDI,R14
            mov R9,R12
            mov ESI,3
            push R15
            mov QWORD PTR [RBP-88],R15
            mov R13,R15
            call .L_443490

            mov RAX,QWORD PTR [R14+216]
            add RAX,QWORD PTR [R14+192]
            mov ECX,1398
            pop RDI
            pop R8
            lea R8,QWORD PTR [RIP+.L_45f5c8]
            sub RAX,R12
            cmp RAX,R15
            jl .L_4569cf

            mov RAX,QWORD PTR [R14+88]
            mov RDI,QWORD PTR [RAX+728]
            call QWORD PTR [RIP+.L_677120]

            mov R15,QWORD PTR [R14+88]
            mov RSI,QWORD PTR [RBP-88]
            mov EDI,1
            call QWORD PTR [RIP+.L_677128]

            mov QWORD PTR [R15+728],RAX
            mov RAX,QWORD PTR [R14+88]
            mov RAX,QWORD PTR [RAX+728]
            test RAX,RAX
            je .L_457090

            mov RDI,RAX
            mov RCX,QWORD PTR [RBP-88]
            mov RSI,R12

            rep movsb 

            mov RDI,R14
            mov RAX,QWORD PTR [R14+88]
            mov BYTE PTR [RAX+736],R13B
            mov DWORD PTR [R14+8],1
            call .L_44a7f0

            mov RDI,R14
            call .L_4475d0

            lea R8,QWORD PTR [RIP+.L_45f164]
            mov ECX,1422
            jmp .L_455ca3
.L_456f60:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1564
            jmp .L_4569cf
.L_456f71:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,2627
            jmp .L_456b85
.L_456f82:

            lea R8,QWORD PTR [RIP+.L_45db70]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,EAX
            mov ECX,392
            mov ESI,1
            mov RDI,R14
            call .L_4433c0

            jmp .L_4555e4
.L_456faa:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1590
            jmp .L_4569cf
.L_456fbb:

            lea R8,QWORD PTR [RIP+.L_45f0e6]
            mov ECX,1692
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ESI,1
            mov RDI,R14
            jmp .L_455bd3
.L_456fdb:

            mov EAX,EAX
            movzx EDX,WORD PTR [RSI+RAX*1-2]
            mov WORD PTR [RBX+RAX*1-2],DX
            mov R8,QWORD PTR [R14+88]
            jmp .L_455367
.L_456ff0:

            lea R8,QWORD PTR [RIP+.L_45f698]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov R9D,R13D
            mov ECX,1632
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            mov EBX,4294938368
            call .L_443270

            mov EDX,80
            mov ESI,2
            mov RDI,R14
            call .L_449350

            jmp .L_4556b0
.L_457031:

            lea R8,QWORD PTR [RIP+.L_45d38f]
            mov ECX,3087
            jmp .L_456b85
.L_457042:

            lea R8,QWORD PTR [RIP+.L_45d4c6]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,723
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            mov EBX,4294937600
            jmp .L_4556b0
.L_45706e:

            lea R8,QWORD PTR [RIP+.L_45f7a8]
            mov ECX,2328
            jmp .L_456c88
.L_45707f:

            lea R8,QWORD PTR [RIP+.L_45d918]
            mov ECX,1888
            jmp .L_4563b8
.L_457090:

            lea R8,QWORD PTR [RIP+.L_45e055]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            movzx R9D,R13B
            mov ECX,1409
            mov ESI,1
            mov RDI,R14
            call .L_443270

            mov EBX,4294934784
            jmp .L_4556b0
.L_4570be:

            lea R8,QWORD PTR [RIP+.L_45f151]
            lea RDX,QWORD PTR [RIP+.L_45f2e8]
            mov ECX,1384
            mov ESI,1
            mov RDI,R14
            xor EAX,EAX
            call .L_443270

            jmp .L_456b50
.L_4570e5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4570f0:

            push R15
            push R14
            push R13
            push R12
            push RBP
            push RBX
            sub RSP,168
.L_457101:

            mov RAX,QWORD PTR [RSP+248]
            mov QWORD PTR [RSP],RDI
            mov DWORD PTR [RSP+48],ESI
            mov QWORD PTR [RSP+40],RCX
            mov QWORD PTR [RSP+32],R8
            mov QWORD PTR [RSP+8],R9
            mov QWORD PTR [RSP+56],RAX
            mov R14,QWORD PTR [RSP+224]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+152],RAX
            xor EAX,EAX
            mov RAX,QWORD PTR [RSP+256]
            mov R13,QWORD PTR [RSP+232]
            mov R15,QWORD PTR [RSP+240]
            sub RAX,4
            cmp RAX,12
            ja .L_4576bd

            test BYTE PTR [RSP+256],1
            jne .L_4576bd

            mov RSI,QWORD PTR [RSP+32]
            lea RAX,QWORD PTR [RSI-7]
            cmp RAX,6
            ja .L_4576bd

            cmp R14,65280
            ja .L_4576bd

            mov EAX,15
            lea RBP,QWORD PTR [RSP+96]
            mov R12,RDX
            sub EAX,ESI
            test R14,R14
            mov RDX,RSI
            mov BYTE PTR [RSP+55],AL
            setne AL
            lea RDI,QWORD PTR [RBP+1]
            shl EAX,6
            mov ECX,EAX
            mov EAX,14
            sub EAX,ESI
            mov RSI,QWORD PTR [RSP+40]
            mov EBX,EAX
            mov BYTE PTR [RSP+54],AL
            mov RAX,QWORD PTR [RSP+256]
            sub RAX,2
            shr RAX,1
            lea EAX,DWORD PTR [RAX*8]
            or EAX,ECX
            mov ECX,15
            or EAX,EBX
            mov BYTE PTR [RSP+96],AL
            call __memcpy_chk@PLT

            lea RCX,QWORD PTR [RSP+95]
            movzx EDI,BL
            mov RAX,RBP
            mov QWORD PTR [RSP+24],RDI
            mov RDX,R12
            sub RCX,RDI
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457210:

            mov BYTE PTR [RAX+15],DL
            sub RAX,1
            shr RDX,8
            cmp RCX,RAX
            jne .L_457210

            test RDX,RDX
            jne .L_4576bd

            pxor XMM0,XMM0
            xor EAX,EAX
            lea RBX,QWORD PTR [RSP+112]
            movaps XMMWORD PTR [RSP+112],XMM0
            jmp .L_457244
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_457240:

            movzx EDX,BYTE PTR [RBX+RAX*1]
.L_457244:

            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_457240

            lea RAX,QWORD PTR [RSP+88]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            mov R8,RAX
            mov QWORD PTR [RSP+16],RAX
            call .L_453130

            test EAX,EAX
            mov ECX,EAX
            jne .L_457580

            test R14,R14
            je .L_4573e0

            lea RDI,QWORD PTR [RBP+2]
            mov RAX,R14
            xor ESI,ESI
            shr RAX,8
            mov QWORD PTR [RBP+2],0
            cmp R14,14
            mov WORD PTR [RDI+12],SI
            mov DWORD PTR [RDI+8],0
            mov ECX,14
            mov BYTE PTR [RSP+64],AL
            mov BYTE PTR [RSP+96],AL
            mov EAX,14
            mov RSI,QWORD PTR [RSP+8]
            cmovbe RAX,R14
            mov BYTE PTR [RSP+97],R14B
            mov RDX,RAX
            mov QWORD PTR [RSP+72],RAX
            call __memcpy_chk@PLT

            xor EAX,EAX
            movzx R8D,BYTE PTR [RSP+64]
            jmp .L_4572ee
          .byte 0xf
          .byte 0x1f
          .byte 0x40
          .byte 0x0
.L_4572e8:

            movzx R8D,BYTE PTR [RBP+RAX*1]
.L_4572ee:

            xor BYTE PTR [RBX+RAX*1],R8B
            add RAX,1
            cmp RAX,16
            jne .L_4572e8

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_453130

            test EAX,EAX
            mov ECX,EAX
            jne .L_457580

            mov RDI,QWORD PTR [RSP+72]
            mov RAX,R14
            sub RAX,RDI
            je .L_4573e0

            mov RSI,QWORD PTR [RSP+8]
            mov QWORD PTR [RSP+72],R15
            mov R15,RBP
            mov RBP,QWORD PTR [RSP+16]
            mov QWORD PTR [RSP+8],R12
            mov R12,RAX
            mov QWORD PTR [RSP+64],R13
            add RSI,RDI
            mov R14,RSI
            nop
            nop
            nop
.L_457358:

            pxor XMM0,XMM0
            cmp R12,16
            mov R13D,16
            cmovbe R13,R12
            mov ECX,16
            mov RSI,R14
            mov RDX,R13
            mov RDI,R15
            movaps XMMWORD PTR [R15],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
            nop
            nop
.L_457388:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [R15+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_457388

            mov RDI,QWORD PTR [RSP]
            mov R8,RBP
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_453130

            test EAX,EAX
            jne .L_457650

            add R14,R13
            sub R12,R13
            jne .L_457358

            mov RBP,R15
            mov R12,QWORD PTR [RSP+8]
            mov R13,QWORD PTR [RSP+64]
            mov R15,QWORD PTR [RSP+72]
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4573e0:

            movzx EAX,BYTE PTR [RSP+54]
            mov RDX,QWORD PTR [RSP+32]
            lea R14,QWORD PTR [RSP+128]
            mov RSI,QWORD PTR [RSP+40]
            lea RDI,QWORD PTR [RSP+129]
            mov ECX,15
            mov QWORD PTR [RSP+8],R14
            mov BYTE PTR [RSP+128],AL
            call __memcpy_chk@PLT

            movzx EAX,BYTE PTR [RSP+55]
            mov RDI,QWORD PTR [RSP+32]
            xor ESI,ESI
            lea RDX,QWORD PTR [R14+RDI*1+1]
            cmp EAX,8
            jae .L_4575ab

            test AL,4
            jne .L_4576c7

            test EAX,EAX
            je .L_457446

            test AL,2
            mov BYTE PTR [RDX],0
            jne .L_4576e4
.L_457446:

            test R12,R12
            mov BYTE PTR [RSP+143],1
            je .L_4576da

            lea RAX,QWORD PTR [RSP+127]
            mov QWORD PTR [RSP+32],RAX
            mov RAX,R15
            mov R15,R12
            mov R12,RAX
            nop
            nop
            nop
            nop
            nop
            nop
.L_457470:

            mov EAX,DWORD PTR [RSP+48]
            cmp R15,16
            mov R14D,16
            cmovbe R14,R15
            test EAX,EAX
            je .L_4575f0
.L_45748a:

            mov R8,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+8]
            mov RCX,RBP
            mov RDI,QWORD PTR [RSP]
            mov EDX,16
            call .L_453130

            test EAX,EAX
            jne .L_457650

            xor EDX,EDX
            nop
.L_4574b0:

            movzx ECX,BYTE PTR [R13+RDX*1]
            movzx ESI,AL
            add EAX,1
            xor CL,BYTE PTR [RSP+RSI*1+96]
            mov BYTE PTR [R12+RDX*1],CL
            movzx EDX,AL
            cmp RDX,R14
            jb .L_4574b0

            cmp DWORD PTR [RSP+48],1
            je .L_457660
.L_4574d7:

            mov RCX,QWORD PTR [RSP+32]
            mov RDX,QWORD PTR [RSP+8]
            add R12,R14
            add R13,R14
            sub R15,R14
            mov RSI,RCX
            sub RCX,QWORD PTR [RSP+24]
            nop
            nop
            nop
            nop
            nop
            nop
.L_4574f8:

            add BYTE PTR [RDX+15],1
            jne .L_457507

            sub RDX,1
            cmp RCX,RDX
            jne .L_4574f8
.L_457507:

            test R15,R15
            jne .L_457470
.L_457510:

            sub RSI,QWORD PTR [RSP+24]
            mov RAX,QWORD PTR [RSP+8]
            nop
            nop
            nop
            nop
            nop
            nop
.L_457520:

            mov BYTE PTR [RAX+15],0
            sub RAX,1
            cmp RSI,RAX
            jne .L_457520

            mov R8,QWORD PTR [RSP+16]
            mov RSI,QWORD PTR [RSP+8]
            mov RCX,RBP
            mov RDI,QWORD PTR [RSP]
            mov EDX,16
            call .L_453130

            test EAX,EAX
            mov ECX,EAX
            jne .L_457580

            xor EAX,EAX
.L_457550:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_457550

            mov RDX,QWORD PTR [RSP+256]
            mov RDI,QWORD PTR [RSP+56]
            mov RSI,RBX
            mov DWORD PTR [RSP],ECX
            call memcpy@PLT

            mov ECX,DWORD PTR [RSP]
.L_457580:

            mov RDI,QWORD PTR [RSP+152]
            xor RDI,QWORD PTR FS:[40]
            mov EAX,ECX
            jne .L_4576f0

            add RSP,168
.L_4575a0:

            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_4575ab:

            lea RCX,QWORD PTR [RDX+8]
            mov QWORD PTR [RDX],0
            mov QWORD PTR [RAX+RDX*1-8],0
            and RCX,-8
            sub RDX,RCX
            add EAX,EDX
            and EAX,4294967288
            cmp EAX,8
            jb .L_457446

            and EAX,4294967288
            xor EDX,EDX
.L_4575d9:

            mov EDI,EDX
            add EDX,8
            cmp EDX,EAX
            mov QWORD PTR [RCX+RDI*1],RSI
            jb .L_4575d9

            jmp .L_457446
          .byte 0xf
          .byte 0x1f
          .byte 0x44
          .byte 0x0
          .byte 0x0
.L_4575f0:

            pxor XMM0,XMM0
            mov ECX,16
            mov RDX,R14
            mov RSI,R13
            mov RDI,RBP
            movaps XMMWORD PTR [RBP],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
.L_457610:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_457610

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_453130

            test EAX,EAX
            je .L_45748a

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457650:

            mov ECX,EAX
            jmp .L_457580
          .byte 0x66
          .byte 0xf
          .byte 0x1f
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457660:

            pxor XMM0,XMM0
            mov ECX,16
            mov RDX,R14
            mov RSI,R12
            mov RDI,RBP
            movaps XMMWORD PTR [RBP],XMM0
            call __memcpy_chk@PLT

            xor EAX,EAX
            nop
            nop
            nop
.L_457680:

            movzx EDX,BYTE PTR [RBX+RAX*1]
            xor DL,BYTE PTR [RBP+RAX*1]
            mov BYTE PTR [RBX+RAX*1],DL
            add RAX,1
            cmp RAX,16
            jne .L_457680

            mov R8,QWORD PTR [RSP+16]
            mov RDI,QWORD PTR [RSP]
            mov RCX,RBX
            mov EDX,16
            mov RSI,RBX
            call .L_453130

            test EAX,EAX
            je .L_4574d7

            mov ECX,EAX
            jmp .L_457580
.L_4576bd:

            mov ECX,4294967283
            jmp .L_457580
.L_4576c7:

            mov DWORD PTR [RDX],0
            mov DWORD PTR [RAX+RDX*1-4],0
            jmp .L_457446
.L_4576da:

            lea RSI,QWORD PTR [RSP+127]
            jmp .L_457510
.L_4576e4:

            xor ECX,ECX
            mov WORD PTR [RAX+RDX*1-2],CX
            jmp .L_457446
.L_4576f0:

            call __stack_chk_fail@PLT
.L_4576f5:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457700:

            pxor XMM0,XMM0
            movups XMMWORD PTR [RDI],XMM0
            movups XMMWORD PTR [RDI+16],XMM0
            movups XMMWORD PTR [RDI+32],XMM0
            movups XMMWORD PTR [RDI+48],XMM0
            movups XMMWORD PTR [RDI+64],XMM0
            ret 
.L_457718:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457720:

            push R13
            push R12
            mov R13,RDX
            push RBP
            push RBX
            mov RBP,RDI
            mov EDX,1
            mov EDI,ESI
            mov ESI,ECX
            sub RSP,8
            mov R12D,ECX
            call .L_452e80

            test RAX,RAX
            je .L_457798

            cmp DWORD PTR [RAX+32],16
            mov RBX,RAX
            jne .L_457798

            mov RDI,RBP
            call .L_452ee0

            mov RSI,RBX
            mov RDI,RBP
            call .L_452f40

            test EAX,EAX
            je .L_457778
.L_457766:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
          .byte 0xf
          .byte 0x1f
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_457778:

            add RSP,8
            mov EDX,R12D
            mov RSI,R13
            pop RBX
            mov RDI,RBP
            mov ECX,1
            pop RBP
            pop R12
            pop R13
            jmp .L_452fa0
          .byte 0xf
          .byte 0x1f
          .byte 0x0
.L_457798:

            mov EAX,4294967283
            jmp .L_457766
.L_45779f:

            nop
.L_4577a0:

            push RBX
            mov RBX,RDI
            call .L_452ee0

            lea RAX,QWORD PTR [RBX+80]
            nop
            nop
            nop
.L_4577b0:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_4577b0

            pop RBX
            ret 
.L_4577be:

            nop
            nop
.L_4577c0:

            sub RSP,16
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push QWORD PTR [RSP+48]
            push R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RSI
            xor ESI,ESI
            call .L_4570f0

            add RSP,56
            ret 
.L_4577ee:

            nop
            nop
.L_4577f0:

            push R13
            push R12
            mov R13,RSI
            push RBP
            push RBX
            sub RSP,48
            mov RBP,QWORD PTR [RSP+112]
            mov RBX,QWORD PTR [RSP+96]
            mov RAX,QWORD PTR FS:[40]
            mov QWORD PTR [RSP+32],RAX
            xor EAX,EAX
            mov R12,QWORD PTR [RSP+104]
            push RBP
            lea RAX,QWORD PTR [RSP+16]
            push RAX
            push RBX
            push QWORD PTR [RSP+112]
            push R9
            mov R9,R8
            mov R8,RCX
            mov RCX,RDX
            mov RDX,RSI
            mov ESI,1
            call .L_4570f0

            add RSP,48
.L_457844:

            test EAX,EAX
            jne .L_457891

            test RBP,RBP
            je .L_457891

            xor ECX,ECX
            xor EDX,EDX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457858:

            movzx ESI,CL
            movzx EDX,BYTE PTR [R12+RDX*1]
            add ECX,1
            xor DL,BYTE PTR [RSP+RSI*1]
            movzx EDX,DL
            or EAX,EDX
            movzx EDX,CL
            cmp RDX,RBP
            jb .L_457858

            test EAX,EAX
            je .L_457891

            test R13,R13
            lea RAX,QWORD PTR [RBX+R13*1]
            je .L_45788c
.L_457880:

            mov BYTE PTR [RBX],0
            add RBX,1
            cmp RBX,RAX
            jne .L_457880
.L_45788c:

            mov EAX,4294967281
.L_457891:

            mov RDI,QWORD PTR [RSP+24]
            xor RDI,QWORD PTR FS:[40]
            jne .L_4578ac

            add RSP,40
.L_4578a5:

            pop RBX
            pop RBP
            pop R12
            pop R13
            ret 
.L_4578ac:

            call __stack_chk_fail@PLT
.L_4578b1:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_4578c0:

            push R15
            push R14
            mov R15,RDX
            push R13
            push R12
            lea R12,QWORD PTR [RIP+.L_6767b0]
            push RBP
            lea RBP,QWORD PTR [RIP+.L_6767b8]
            push RBX
            mov R13D,EDI
            mov R14,RSI
            sub RBP,R12
            sub RSP,8
            sar RBP,3
            call 4197632

            test RBP,RBP
            je .L_457916

            xor EBX,EBX
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457900:

            mov RDX,R15
            mov RSI,R14
            mov EDI,R13D
            call QWORD PTR [R12+RBX*8]

            add RBX,1
            cmp RBP,RBX
            jne .L_457900
.L_457916:

            add RSP,8
            pop RBX
            pop RBP
            pop R12
            pop R13
            pop R14
            pop R15
            ret 
.L_457925:

            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
            nop
.L_457930:

            ret 
.L_457932:
#===================================
# end section .text
#===================================

#===================================
.section .rodata ,"a",@progbits
.align 16
#===================================

          .byte 0x1
          .byte 0x0
          .byte 0x2
          .byte 0x0
.L_457944:
          .string "rb"
.L_457947:
          .string "malloc error!"
.L_457955:
          .string "read error!"
          .zero 31
.L_457980:
          .string "OPENTHREAD/20170716-00481-g79c4830c3-dirty; NONE; Oct  1 2020 19:45:36"
.L_4579c7:
          .string "common/message.cpp"
.L_4579da:
          .string "aOffset <= GetLength()"
.L_4579f1:
          .string "curBuffer != NULL"
.L_457a03:
          .string "bytesWritten == (int)aLength"
.L_457a20:
          .string "previousTail != NULL"
          .zero 3
.L_457a38:
          .string "aMessage->Next(MessageInfo::kListAll) == NULL && aMessage->Prev(MessageInfo::kListAll) == NULL"
          .zero 1
.L_457a98:
          .string "aMessage->Next(MessageInfo::kListInterface) == NULL && aMessage->Prev(MessageInfo::kListInterface) == NULL"
          .zero 5
.L_457b08:
          .string "GetOffset() + aDelta <= GetLength()"
          .zero 4
.L_457b30:
          .string "mBuffer.mHead.mInfo.mOffset <= GetLength()"
          .zero 5
.L_457b60:
          .string "aLength <= mBuffer.mHead.mInfo.mLength"
          .zero 1
.L_457b88:
          .string "aOffset + aLength <= GetLength()"
          .zero 7
.L_457bb0:
          .string "aChildIndex < sizeof(mBuffer.mHead.mInfo.mChildMask) * 8"
          .zero 7
.L_457bf0:
          .string "(aMessage.Next(aList) == NULL) && (aMessage.Prev(aList) == NULL)"
          .zero 7
.L_457c38:
          .string "(aMessage.Next(aList) != NULL) && (aMessage.Prev(aList) != NULL)"
          .zero 7
.L_457c80:
          .string "ot::Message* ot::PriorityQueue::GetHeadForPriority(uint8_t) const"
          .zero 30
.L_457ce0:
          .string "void ot::MessageQueue::RemoveFromList(uint8_t, ot::Message&)"
          .zero 3
.L_457d20:
          .string "void ot::MessageQueue::AddToList(uint8_t, ot::Message&, ot::MessageQueue::QueuePosition)"
          .zero 7
.L_457d80:
          .string "uint16_t ot::Message::UpdateChecksum(uint16_t, uint16_t, uint16_t) const"
          .zero 23
.L_457de0:
          .string "void ot::Message::SetChildMask(uint8_t)"
          .zero 24
.L_457e20:
          .string "void ot::Message::ClearChildMask(uint8_t)"
          .zero 22
.L_457e60:
          .string "bool ot::Message::GetChildMask(uint8_t) const"
          .zero 18
.L_457ea0:
          .string "int ot::Message::Write(uint16_t, uint16_t, const void*)"
          .zero 8
.L_457ee0:
          .string "uint16_t ot::Message::Read(uint16_t, uint16_t, void*) const"
          .zero 4
.L_457f20:
          .string "otError ot::Message::RemoveHeader(uint16_t)"
          .zero 20
.L_457f60:
          .string "otError ot::Message::Append(const void*, uint16_t)"
          .zero 13
.L_457fa0:
          .string "otError ot::Message::SetOffset(uint16_t)"
          .zero 23
.L_457fe0:
          .string "otError ot::Message::MoveOffset(int)"
          .zero 27
.L_458020:
          .string "void ot::MessagePool::Free(ot::Message*)"
.L_458049:
          .string "mac/mac.cpp"
.L_458055:
          .string "frame != NULL"
.L_458063:
          .string ", "
.L_458066:
          .string "{"
.L_458068:
          .string " }"
.L_45806b:
          .string "%s%d"
.L_458070:
          .string "false"
.L_458076:
          .byte 0x65
          .byte 0x72
          .byte 0x72
          .byte 0x6f
          .byte 0x72
          .byte 0x20
          .byte 0x3d
          .byte 0x3d
          .byte 0x20
          .byte 0x4f
          .byte 0x54
          .byte 0x5f
          .byte 0x45
          .byte 0x52
          .byte 0x52
          .byte 0x4f
          .byte 0x52
          .byte 0x5f
.L_458088:
          .string "NONE"
.L_45808d:
          .string "Idle"
.L_458092:
          .string "ActiveScan"
.L_45809d:
          .string "EnergyScan"
.L_4580a8:
          .byte 0x54
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x6d
          .byte 0x69
          .byte 0x74
.L_4580b0:
          .string "Beacon"
.L_4580b7:
          .string "TransmitData"
.L_4580c4:
          .byte 0x57
          .byte 0x61
          .byte 0x69
          .byte 0x74
          .byte 0x69
          .byte 0x6e
          .byte 0x67
          .byte 0x46
          .byte 0x6f
          .byte 0x72
.L_4580ce:
          .string "Data"
.L_4580d3:
          .string "TransmitOobFrame"
          .zero 4
.L_4580e8:
          .string "mReceiveTail != &aReceiver && aReceiver.mNext == NULL"
          .zero 2
.L_458120:
          .long .L_405bf8-.L_458120
          .long .L_405c20-.L_458120
          .long .L_405c30-.L_458120
          .long .L_405c40-.L_458120
          .long .L_405c50-.L_458120
          .long .L_405c10-.L_458120
          .long .L_405bf0-.L_458120
.L_45813c:
          .long .L_4078f8-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_4078e8-.L_45813c
          .long .L_4078a8-.L_45813c
          .long .L_407930-.L_45813c
          .long .L_407940-.L_45813c
          .long .L_4078d8-.L_45813c
          .long .L_407990-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407950-.L_45813c
          .long .L_407910-.L_45813c
.L_458194:
          .long .L_407e80-.L_458194
          .long .L_407e90-.L_458194
          .long .L_407ea0-.L_458194
          .long .L_407eb0-.L_458194
          .long .L_407ec0-.L_458194
          .long .L_407e60-.L_458194
          .long .L_407e70-.L_458194
          .zero 16
.L_4581c0:
          .string "void ot::Mac::Mac::HandleMacTimer()"
          .zero 28
.L_458200:
          .string "void ot::Mac::Mac::HandleTransmitDone(otRadioFrame*, otRadioFrame*, otError)"
          .zero 19
.L_458260:
          .string "void ot::Mac::Mac::BeginTransmit()"
          .zero 29
.L_4582a0:
          .string "ot::Mac::Frame* ot::Mac::Mac::GetOperationFrame()"
          .zero 14
.L_4582e0:
          .string "void ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::Frame&)"
          .zero 4
.L_458320:
          .string "otError ot::Mac::Mac::RegisterReceiver(ot::Mac::Receiver&)"
          .zero 5
.L_458360:
          .string "OpenThread"
          .zero 5
.L_458370:
          .byte 0xde
          .byte 0xad
          .byte 0x0
          .byte 0xbe
          .byte 0xef
          .byte 0x0
          .byte 0xca
          .byte 0xfe
.L_458378:
          .byte 0x35
          .byte 0x6
          .byte 0xfe
          .byte 0xb8
          .byte 0x23
          .byte 0xd4
          .byte 0x87
          .byte 0x12
.L_458380:
          .byte 0x78
          .byte 0x58
          .byte 0x16
          .byte 0x86
          .byte 0xfd
          .byte 0xb4
          .byte 0x58
          .byte 0xf
          .byte 0xb0
          .byte 0x92
          .byte 0x54
          .byte 0x6a
          .byte 0xec
          .byte 0xbd
          .byte 0x15
          .byte 0x66
.L_458390:
          .string "None"
.L_458395:
          .string "0x%04x"
.L_45839c:
          .string "mac/mac_frame.cpp"
.L_4583ae:
          .string "index != kInvalidIndex"
.L_4583c5:
          .string "Cmd(BeaconReq)"
.L_4583d4:
          .string "Cmd(DataReq)"
.L_4583e1:
          .string "yes"
.L_4583e5:
          .string "no"
.L_4583e8:
          .string "Cmd(%d)"
.L_4583f0:
          .string "%02x%02x%02x%02x%02x%02x%02x%02x"
          .zero 7
.L_458418:
          .string "(GetFrameControlField() & kFcfDstAddrMask) == kFcfDstAddrShort"
          .zero 1
.L_458458:
          .string "(GetFrameControlField() & kFcfDstAddrMask) == kFcfDstAddrExt"
          .zero 3
.L_458498:
          .string "(GetFrameControlField() & kFcfSrcAddrMask) == kFcfSrcAddrShort"
          .zero 1
.L_4584d8:
          .string "(GetFrameControlField() & kFcfSrcAddrMask) == kFcfSrcAddrExt"
          .zero 3
.L_458518:
          .string "len:%d, seqnum:%d, type:%s, src:%s, dst:%s, sec:%s, ackreq:%s"
          .zero 2
.L_458558:
          .string "name:%s, xpanid:%02x%02x%02x%02x%02x%02x%02x%02x, id:%d ver:%d, joinable:%s, native:%s"
          .zero 17
.L_4585c0:
          .string "otError ot::Mac::Frame::SetKeyId(uint8_t)"
          .zero 22
.L_458600:
          .string "void ot::Mac::Frame::SetKeySource(const uint8_t*)"
          .zero 14
.L_458640:
          .string "const uint8_t* ot::Mac::Frame::GetKeySource() const"
          .zero 12
.L_458680:
          .string "otError ot::Mac::Frame::SetFrameCounter(uint32_t)"
          .zero 14
.L_4586c0:
          .string "otError ot::Mac::Frame::SetSrcAddr(const ot::Mac::Address&)"
          .zero 4
.L_458700:
          .string "otError ot::Mac::Frame::SetSrcAddr(const ot::Mac::ExtAddress&)"
          .zero 1
.L_458740:
          .string "otError ot::Mac::Frame::SetSrcAddr(ot::Mac::ShortAddress)"
          .zero 6
.L_458780:
          .string "otError ot::Mac::Frame::SetDstAddr(const ot::Mac::Address&)"
          .zero 4
.L_4587c0:
          .string "otError ot::Mac::Frame::SetDstAddr(const ot::Mac::ExtAddress&)"
          .zero 1
.L_458800:
          .string "otError ot::Mac::Frame::SetDstAddr(ot::Mac::ShortAddress)"
          .zero 6
.L_458840:
          .string "otError ot::Mac::Frame::SetDstPanId(ot::Mac::PanId)"
          .zero 12
.L_458880:
          .string "otError ot::Mac::Frame::InitMacHeader(uint16_t, uint8_t)"
.L_4588b9:
          .byte 0x63
          .byte 0x2f
          .byte 0x70
          .byte 0x67
          .byte 0x0
.L_4588be:
          .byte 0x63
          .byte 0x2f
          .byte 0x61
          .byte 0x73
          .byte 0x0
.L_4588c3:
          .string "c/ag"
.L_4588c8:
          .string "c/ps"
.L_4588cd:
          .string "c/tx"
.L_4588d2:
          .string "c/rx"
.L_4588d7:
          .string "c/je"
          .zero 4
.L_4588e0:
          .string "[%s]%s: [THCI] direction=send | type=JOIN_ENT.ntf"
          .zero 6
.L_458918:
          .string "[%s]%s: [THCI] direction=recv | type=JOIN_ENT.rsp"
.L_45894a:
          .string "c/lp"
.L_45894f:
          .string "c/la"
.L_458954:
          .string "c/dc"
.L_458959:
          .string "HopOpts"
.L_458961:
          .string "TCP"
.L_458965:
          .string "UDP"
.L_458969:
          .string "IP6"
.L_45896d:
          .string "Routing"
.L_458975:
          .string "Frag"
.L_45897a:
          .string "ICMP6"
.L_458980:
          .string "DstOpts"
.L_458988:
          .string "Unknown"
.L_458990:
          .long .L_40ed20-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40ed30-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40ed40-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40ed50-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40ed60-.L_458990
          .long .L_40ed70-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40edb0-.L_458990
          .long .L_40ed80-.L_458990
          .long .L_40ed90-.L_458990
          .long .L_40eda0-.L_458990
.L_458a84:
          .string "%x:%x:%x:%x:%x:%x:%x:%x"
          .zero 4
.L_458aa0:
          .string "N2ot15InstanceLocatorE"
          .zero 9
.L_458ac0:
          .string "N2ot3Ip65NetifE"
.L_458ad0:
          .byte 0xff
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xfc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_458ae8:
          .string "a/ae"
.L_458aed:
          .string "a/aq"
.L_458af2:
          .string "a/an"
.L_458af7:
          .string "removing router id"
.L_458b0a:
          .string "removing rloc16"
.L_458b1a:
          .string "received icmp no route"
.L_458b31:
          .string "evicting for new entry"
.L_458b48:
          .byte 0x54
          .byte 0x68
          .byte 0x72
          .byte 0x65
          .byte 0x61
          .byte 0x64
.L_458b4e:
          .string "%d.%s"
.L_458b54:
          .byte 0x31
.L_458b55:
          .byte 0x32
.L_458b56:
          .string "5"
.L_458b58:
          .byte 0x33
.L_458b59:
          .string "75"
.L_458b5c:
          .string "625"
.L_458b60:
          .string "875"
          .zero 4
.L_458b68:
          .string "aveRss:%s, lastRss:%d, linkQuality:%d"
.L_458b8e:
          .byte 0xc
          .byte 0xc
          .byte 0xa
.L_458b91:
          .byte 0x4
          .byte 0x2
          .byte 0x2
.L_458b94:
          .byte 0x5
          .byte 0xf
          .byte 0x32
.L_458b97:
          .string "thread/mesh_forwarder_ftd.cpp"
          .zero 3
.L_458bb8:
          .string "aMessage.GetLength() <= aFrame.GetMaxPayloadLength()"
          .zero 19
.L_458c00:
          .string "otError ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::Frame&)"
          .zero 29
.L_458c60:
          .byte 0x76
          .byte 0x6f
          .byte 0x69
          .byte 0x64
          .byte 0x20
          .byte 0x6f
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4d
          .byte 0x65
          .byte 0x73
          .byte 0x68
          .byte 0x46
          .byte 0x6f
          .byte 0x72
          .byte 0x77
          .byte 0x61
          .byte 0x72
          .byte 0x64
          .byte 0x65
          .byte 0x72
          .byte 0x3a
          .byte 0x3a
          .byte 0x50
          .byte 0x72
          .byte 0x65
          .byte 0x70
          .byte 0x61
          .byte 0x72
          .byte 0x65
          .byte 0x49
          .byte 0x6e
          .byte 0x64
          .byte 0x69
          .byte 0x72
          .byte 0x65
          .byte 0x63
          .byte 0x74
          .byte 0x54
          .byte 0x72
          .byte 0x61
          .byte 0x6e
          .byte 0x73
          .byte 0x6d
          .byte 0x69
          .byte 0x73
          .byte 0x73
          .string "ion(ot::Message&, const ot::Child&)"
.L_458cb4:
          .string "thread/mle.cpp"
          .zero 29
.L_458ce0:
          .long .L_419beb-.L_458ce0
          .long .L_419ac8-.L_458ce0
          .long .L_419b10-.L_458ce0
          .long .L_419beb-.L_458ce0
          .long .L_419beb-.L_458ce0
.L_458cf4:
          .long .L_41a1dd-.L_458cf4
          .long .L_41a100-.L_458cf4
          .long .L_41a110-.L_458cf4
          .long .L_41a090-.L_458cf4
          .long .L_419fe0-.L_458cf4
          .long .L_419ff2-.L_458cf4
.L_458d0c:
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a460-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a4c0-.L_458d0c
          .long .L_41a4a0-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a480-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a408-.L_458d0c
          .long .L_41a3f8-.L_458d0c
.L_458d5c:
          .long .L_41ad0a-.L_458d5c
          .long .L_41acf1-.L_458d5c
          .long .L_41acd8-.L_458d5c
          .long .L_41a76f-.L_458d5c
          .long .L_41acc5-.L_458d5c
          .long .L_41a76f-.L_458d5c
          .long .L_41a76f-.L_458d5c
          .long .L_41acb0-.L_458d5c
          .long .L_41ac9d-.L_458d5c
          .long .L_41ac88-.L_458d5c
          .long .L_41ac71-.L_458d5c
          .long .L_41ac58-.L_458d5c
          .long .L_41ac45-.L_458d5c
          .long .L_41abf3-.L_458d5c
          .long .L_41abd3-.L_458d5c
          .long .L_41abb2-.L_458d5c
          .zero 4
.L_458da0:
          .string "otError ot::Mle::Mle::HandleChildUpdateResponse(const ot::Message&, const ot::Ip6::MessageInfo&)"
          .zero 31
.L_458e20:
          .string "otError ot::Mle::Mle::SendMessage(ot::Message&, const ot::Ip6::Address&)"
          .zero 23
.L_458e80:
          .string "otError ot::Mle::Mle::SendChildUpdateRequest()"
          .zero 17
.L_458ec0:
          .string "otError ot::Mle::Mle::SendParentRequest()"
          .zero 22
.L_458f00:
          .string "void ot::Mle::Mle::HandleParentRequestTimer()"
.L_458f2e:
          .byte 0xc
.L_458f2f:
          .string "a/as"
.L_458f34:
          .string "a/ar"
.L_458f39:
          .string "thread/mle_router.cpp"
.L_458f4f:
          .string "router != NULL"
.L_458f5e:
          .string "Send Link Request"
.L_458f70:
          .string "Delay Discovery Response"
.L_458f89:
          .string "Receive Discovery Request"
.L_458fa3:
          .string "Delay Data Response"
.L_458fb7:
          .string "Send Data Response"
.L_458fca:
          .string "Receive Data Request"
.L_458fdf:
          .string "Send Address Solicit"
.L_458ff4:
          .string "Send Address Release"
.L_459009:
          .string "Send Address Reply"
.L_45901c:
          .string "Receive Address Solicit"
.L_459034:
          .string "Receive Address Release"
.L_45904c:
          .string "Send Address Release Reply"
.L_459067:
          .string "Delay Parent Response"
.L_45907d:
          .string "Receive Parent Request"
.L_459094:
          .string "Send Advertisement"
.L_4590a7:
          .string "Delay Link Accept"
.L_4590b9:
          .string "Send Link Accept"
.L_4590ca:
          .string "Receive Link Request"
.L_4590df:
          .string "Receive Link Accept"
.L_4590f3:
          .string "Send Child ID Response"
.L_45910a:
          .string "Receive Child ID Request"
.L_459123:
          .string "Receive Address Reply"
          .zero 7
.L_459140:
          .long .L_41b855-.L_459140
          .long .L_41b780-.L_459140
          .long .L_41b6c5-.L_459140
          .long .L_41b690-.L_459140
          .long .L_41b690-.L_459140
.L_459154:
          .long .L_41f57a-.L_459154
          .long .L_41f57a-.L_459154
          .long .L_41f21b-.L_459154
          .long .L_41f339-.L_459154
          .long .L_41f428-.L_459154
.L_459168:
          .long .L_41fa78-.L_459168
          .long .L_41fa78-.L_459168
          .long .L_41f9d6-.L_459168
          .long .L_41fb29-.L_459168
          .long .L_41fb29-.L_459168
.L_45917c:
          .long .L_420018-.L_45917c
          .long .L_420030-.L_45917c
          .long .L_41fff8-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ffd0-.L_45917c
          .long .L_41ffb0-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff90-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff78-.L_45917c
          .long .L_41fe90-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41ff58-.L_45917c
          .long .L_41ff08-.L_45917c
          .long .L_41fef0-.L_45917c
.L_4591cc:
          .long .L_421c5d-.L_4591cc
          .long .L_421be5-.L_4591cc
          .long .L_421940-.L_4591cc
          .long .L_421abf-.L_4591cc
          .long .L_421abf-.L_4591cc
.L_4591e0:
          .long .L_421f20-.L_4591e0
          .long .L_421f20-.L_4591e0
          .long .L_422347-.L_4591e0
          .long .L_4221f1-.L_4591e0
          .long .L_4222dc-.L_4591e0
.L_4591f4:
          .long .L_422add-.L_4591f4
          .long .L_4229e6-.L_4591f4
          .long .L_422a0a-.L_4591f4
          .long .L_422a87-.L_4591f4
          .long .L_4229b6-.L_4591f4
.L_459208:
          .long .L_422add-.L_459208
          .long .L_4229e6-.L_459208
          .long .L_422709-.L_459208
          .long .L_422709-.L_459208
          .long .L_4229b6-.L_459208
.L_45921c:
          .long .L_423ea4-.L_45921c
          .long .L_423ea4-.L_45921c
          .long .L_423e83-.L_45921c
          .long .L_423ec3-.L_45921c
          .long .L_423ec3-.L_45921c
.L_459230:
          .byte 0x4
          .byte 0x2
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_459240:
          .string "void ot::Mle::MleRouter::SignalChildUpdated(otThreadChildTableEvent, ot::Child&)"
          .zero 15
.L_4592a0:
          .string "void ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)"
          .zero 24
.L_459300:
          .string "void ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Header*, ot::Message*, const ot::Ip6::MessageInfo*, otError)"
          .zero 3
.L_459380:
          .string "otError ot::Mle::MleRouter::HandleChildIdRequest(const ot::Message&, const ot::Ip6::MessageInfo&, uint32_t)"
          .zero 20
.L_459400:
          .string "void ot::Mle::MleRouter::HandleStateUpdateTimer()"
          .zero 14
.L_459440:
          .string "otError ot::Mle::MleRouter::HandleLinkAccept(const ot::Message&, const ot::Ip6::MessageInfo&, uint32_t, bool)"
          .zero 18
.L_4594c0:
          .string "otError ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)"
          .zero 5
.L_459500:
          .string "otError ot::Mle::MleRouter::SendAdvertisement()"
          .zero 16
.L_459540:
          .string "otError ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)"
          .zero 26
.L_4595a0:
          .string "uint8_t ot::Mle::MleRouter::AllocateRouterId(uint8_t)"
.L_4595d6:
          .byte 0x2
          .byte 0x13
.L_4595d8:
          .byte 0xc
.L_4595d9:
          .byte 0xc
.L_4595da:
          .byte 0x10
.L_4595db:
          .byte 0x10
          .byte 0x9
.L_4595dd:
          .byte 0x10
.L_4595de:
          .byte 0xa
          .byte 0x9
.L_4595e0:
          .string "Send Child Update Request to child"
          .zero 5
.L_459608:
          .string "Send Child Update Response to child"
          .zero 4
.L_459630:
          .string "Receive Link Accept and Request"
.L_459650:
          .string "Receive Child Update Request from child"
.L_459678:
          .string "Receive Child Update Response from unknown child"
          .zero 7
.L_4596b0:
          .string "Receive Child Update Response from child"
.L_4596d9:
          .string "thread/network_data.cpp"
.L_4596f1:
          .string "aData != NULL"
.L_4596ff:
          .string "a/sd"
          .zero 4
.L_459708:
          .string "aLength + mLength <= sizeof(mTlvs) && mTlvs <= aStart && aStart <= mTlvs + mLength"
          .zero 5
.L_459760:
          .string "aLength <= mLength && mTlvs <= aStart && (aStart - mTlvs) + aLength <= mLength"
          .zero 17
.L_4597c0:
          .string "otError ot::NetworkData::NetworkData::Remove(uint8_t*, uint8_t)"
.L_459800:
          .string "otError ot::NetworkData::NetworkData::Insert(uint8_t*, uint8_t)"
.L_459840:
          .string "otError ot::NetworkData::NetworkData::GetNetworkData(bool, uint8_t*, uint8_t&)"
.L_45988f:
          .string "c/cg"
.L_459894:
          .string "c/cs"
.L_459899:
          .string "thread/network_data_local.cpp"
          .zero 9
.L_4598c0:
          .string "otError ot::NetworkData::Local::UpdateRloc(ot::NetworkData::ServiceTlv&)"
          .zero 23
.L_459920:
          .string "otError ot::NetworkData::Local::UpdateRloc(ot::NetworkData::PrefixTlv&)"
          .zero 24
.L_459980:
          .string "otError ot::NetworkData::Local::UpdateRloc()"
.L_4599ad:
          .string "d/dg"
.L_4599b2:
          .string "d/dq"
.L_4599b7:
          .byte 0x64
          .byte 0x2f
          .byte 0x64
.L_4599ba:
          .string "a"
.L_4599bc:
          .string "d/dr"
          .zero 3
.L_4599c4:
          .long .L_42aa20-.L_4599c4
          .long .L_42a9f0-.L_4599c4
          .long .L_42a9c8-.L_4599c4
          .long .L_42a970-.L_4599c4
          .long .L_42a948-.L_4599c4
          .long .L_42a7c0-.L_4599c4
          .long .L_42a8e0-.L_4599c4
          .long .L_42a920-.L_4599c4
          .long .L_42a8b0-.L_4599c4
          .long .L_42a840-.L_4599c4
          .long .L_42aad0-.L_4599c4
          .long .L_42aad0-.L_4599c4
          .long .L_42aad0-.L_4599c4
          .long .L_42aad0-.L_4599c4
          .long .L_42a7fb-.L_4599c4
          .long .L_42a7fb-.L_4599c4
          .long .L_42aa60-.L_4599c4
          .long .L_42aa40-.L_4599c4
          .long .L_42aad0-.L_4599c4
          .long .L_42aa90-.L_4599c4
          .zero 12
.L_459a20:
          .string "N2ot11ThreadNetifE"
          .zero 13
.L_459a40:
          .byte 0x0
          .byte 0x11
          .byte 0x22
          .byte 0x33
          .byte 0x44
          .byte 0x55
          .byte 0x66
          .byte 0x77
          .byte 0x88
          .byte 0x99
          .byte 0xaa
          .byte 0xbb
          .byte 0xcc
          .byte 0xdd
          .byte 0xee
          .byte 0xff
.L_459a50:
          .string "utils/channel_monitor.cpp"
.L_459a6a:
          .string "channelIndex < kNumChannels"
          .zero 26
.L_459aa0:
          .string "void ot::Utils::ChannelMonitor::HandleEnergyScanResult(otEnergyScanResult*)"
          .zero 4
.L_459af0:
          .byte 0x0
          .byte 0x88
          .byte 0x88
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x11
          .byte 0x1
          .byte 0x0
          .byte 0x20
          .byte 0x22
          .byte 0x2
          .byte 0x0
          .byte 0x40
          .byte 0x44
          .byte 0x4
.L_459b00:
          .string "coap/coap.hpp"
          .zero 2
.L_459b10:
          .string "aMessage.SetLength(aMessage.GetLength() - sizeof(EnqueuedResponseHeader)) == OT_ERROR_NONE"
          .zero 21
.L_459b80:
          .string "static void ot::Coap::EnqueuedResponseHeader::RemoveFrom(ot::Message&)"
          .zero 9
.L_459bd0:
          .string "N2ot4Coap8CoapBaseE"
          .zero 12
.L_459bf0:
          .string "N2ot4Coap4CoapE"
.L_459c00:
          .string "N2ot4Coap15ApplicationCoapE"
.L_459c1c:
          .string "coap/coap_header.cpp"
          .zero 7
.L_459c38:
          .string "aTokenLength <= kMaxTokenLength"
          .zero 8
.L_459c60:
          .string "void ot::Coap::Header::SetToken(uint8_t)"
          .zero 7
.L_459c90:
          .string "N2ot4Coap10CoapSecureE"
.L_459ca7:
          .string "="
.L_459ca9:
          .string "[%s len=%03u]"
.L_459cb7:
          .string " %02X"
.L_459cbd:
          .byte 0x20
          .byte 0x2e
.L_459cbf:
          .string "."
.L_459cc1:
          .string " |"
.L_459cc4:
          .string "%c"
.L_459cc7:
          .string "CRIT"
.L_459ccc:
          .string "WARN"
.L_459cd1:
          .string "INFO"
.L_459cd6:
          .string "DEBG"
.L_459cdb:
          .string "-API-----"
.L_459ce5:
          .string "-MLE-----"
.L_459cef:
          .string "-COAP----"
.L_459cf9:
          .string "-ARP-----"
.L_459d03:
          .string "-N-DATA--"
.L_459d0d:
          .string "-ICMP----"
.L_459d17:
          .string "-IP6-----"
.L_459d21:
          .string "-MAC-----"
.L_459d2b:
          .string "-MEM-----"
.L_459d35:
          .string "-NCP-----"
.L_459d3f:
          .string "-MESH-CP-"
.L_459d49:
          .string "-DIAG----"
.L_459d53:
          .string "-PLAT----"
.L_459d5d:
          .string "-CORE----"
.L_459d67:
          .string "-UTIL----"
.L_459d71:
          .byte 0x2d
          .byte 0x2d
          .byte 0x2d
          .byte 0x2d
          .byte 0x2d
.L_459d76:
          .byte 0x2d
          .byte 0x2d
          .byte 0x2d
.L_459d79:
          .string "-"
.L_459d7b:
          .string "Failed"
.L_459d82:
          .string "Drop"
.L_459d87:
          .string "NoBufs"
.L_459d8e:
          .string "NoRoute"
.L_459d96:
          .string "Busy"
.L_459d9b:
          .string "Parse"
.L_459da1:
          .string "InvalidArgs"
.L_459dad:
          .string "Security"
.L_459db6:
          .string "AddressQuery"
.L_459dc3:
          .string "NoAddress"
.L_459dcd:
          .string "Abort"
.L_459dd3:
          .string "NotImplemented"
.L_459de2:
          .string "InvalidState"
.L_459def:
          .byte 0x4e
          .byte 0x6f
.L_459df1:
          .string "Ack"
.L_459df5:
          .string "ChannelAccessFailure"
.L_459e0a:
          .string "Detached"
.L_459e13:
          .string "FcsErr"
.L_459e1a:
          .string "NoFrameReceived"
.L_459e2a:
          .string "UnknownNeighbor"
.L_459e3a:
          .string "InvalidSourceAddress"
.L_459e4f:
          .byte 0x44
          .byte 0x65
          .byte 0x73
          .byte 0x74
          .byte 0x69
          .byte 0x6e
          .byte 0x61
          .byte 0x74
          .byte 0x69
          .byte 0x6f
          .byte 0x6e
.L_459e5a:
          .string "AddressFiltered"
.L_459e6a:
          .string "NotFound"
.L_459e73:
          .string "Already"
.L_459e7b:
          .string "Ipv6AddressCreationFailure"
.L_459e96:
          .string "NotCapable"
.L_459ea1:
          .string "ResponseTimeout"
.L_459eb1:
          .string "Duplicated"
.L_459ebc:
          .string "ReassemblyTimeout"
.L_459ece:
          .string "NotTmf"
.L_459ed5:
          .string "NonLowpanDataFrame"
.L_459ee8:
          .string "DisabledFeature"
.L_459ef8:
          .string "GenericError"
.L_459f05:
          .string "LinkMarginLow"
.L_459f13:
          .string "UnknownErrorType"
.L_459f24:
          .long .L_4306f8-.L_459f24
          .long .L_430710-.L_459f24
          .long .L_430720-.L_459f24
          .long .L_430730-.L_459f24
          .long .L_430708-.L_459f24
.L_459f38:
          .long .L_430850-.L_459f38
          .long .L_430760-.L_459f38
          .long .L_430770-.L_459f38
          .long .L_430780-.L_459f38
          .long .L_430790-.L_459f38
          .long .L_4307a0-.L_459f38
          .long .L_4307b0-.L_459f38
          .long .L_4307c0-.L_459f38
          .long .L_4307d0-.L_459f38
          .long .L_4307e0-.L_459f38
          .long .L_4307f0-.L_459f38
          .long .L_430800-.L_459f38
          .long .L_430810-.L_459f38
          .long .L_430820-.L_459f38
          .long .L_430850-.L_459f38
          .long .L_430830-.L_459f38
          .long .L_430840-.L_459f38
.L_459f7c:
          .long .L_430880-.L_459f7c
          .long .L_430aa0-.L_459f7c
          .long .L_430a90-.L_459f7c
          .long .L_430a80-.L_459f7c
          .long .L_430a70-.L_459f7c
          .long .L_430a60-.L_459f7c
          .long .L_430a50-.L_459f7c
          .long .L_430a40-.L_459f7c
          .long .L_430a30-.L_459f7c
          .long .L_430a20-.L_459f7c
          .long .L_430a10-.L_459f7c
          .long .L_430a00-.L_459f7c
          .long .L_4309f0-.L_459f7c
          .long .L_4309e0-.L_459f7c
          .long .L_4309d0-.L_459f7c
          .long .L_4309c0-.L_459f7c
          .long .L_4309b0-.L_459f7c
          .long .L_4309a0-.L_459f7c
          .long .L_430990-.L_459f7c
          .long .L_430980-.L_459f7c
          .long .L_430970-.L_459f7c
          .long .L_430960-.L_459f7c
          .long .L_430950-.L_459f7c
          .long .L_430940-.L_459f7c
          .long .L_430930-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430920-.L_459f7c
          .long .L_430910-.L_459f7c
          .long .L_430900-.L_459f7c
          .long .L_4308f0-.L_459f7c
          .long .L_4308e0-.L_459f7c
          .long .L_4308d0-.L_459f7c
          .long .L_4308c0-.L_459f7c
          .long .L_4308b0-.L_459f7c
          .long .L_4308a0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430ab0-.L_459f7c
          .long .L_430890-.L_459f7c
.L_45a37c:
          .string "common/timer.cpp"
.L_45a38d:
          .string "aDt <= kMaxDt"
          .zero 5
.L_45a3a0:
          .string "void ot::TimerMilli::StartAt(uint32_t, uint32_t)"
.L_45a3d1:
          .string "common/trickle_timer.cpp"
.L_45a3ea:
          .string "!IsRunning()"
          .zero 9
.L_45a400:
          .string "void ot::TrickleTimer::HandleTimerFired()"
          .zero 22
.L_45a440:
          .string "void ot::TrickleTimer::Start(uint32_t, uint32_t, ot::TrickleTimer::Mode)"
.L_45a489:
          .string "crypto/aes_ccm.cpp"
          .zero 4
.L_45a4a0:
          .string "mHeaderCur + aHeaderLength <= mHeaderLength"
          .zero 4
.L_45a4d0:
          .string "mPlainTextCur + len <= mPlainTextLength"
.L_45a4f8:
          .string "mPlainTextCur == mPlainTextLength"
          .zero 6
.L_45a520:
          .string "void ot::Crypto::AesCcm::Finalize(void*, uint8_t*)"
          .zero 13
.L_45a560:
          .string "void ot::Crypto::AesCcm::Payload(void*, void*, uint32_t, bool)"
          .zero 1
.L_45a5a0:
          .string "void ot::Crypto::AesCcm::Header(const void*, uint32_t)"
.L_45a5d7:
          .string "c/jf"
.L_45a5dc:
          .string "OpenThread Commissioner"
          .zero 4
.L_45a5f8:
          .string "[THCI] direction=send | type=JOIN_FIN.rsp |"
          .zero 4
.L_45a628:
          .string "[THCI] direction=recv | type=JOIN_FIN.req |"
.L_45a654:
          .long .L_433be0-.L_45a654
          .long .L_433c00-.L_45a654
          .long .L_433bc0-.L_45a654
          .long .L_433b80-.L_45a654
          .long .L_433b40-.L_45a654
          .long .L_433b20-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433b00-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_4339f8-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a90-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433a12-.L_45a654
          .long .L_433ac8-.L_45a654
          .long .L_433a78-.L_45a654
          .long .L_433a38-.L_45a654
.L_45a72c:
          .long .L_434768-.L_45a72c
          .long .L_434728-.L_45a72c
          .long .L_434828-.L_45a72c
          .long .L_4347b0-.L_45a72c
          .long .L_434710-.L_45a72c
          .long .L_4346f8-.L_45a72c
          .long .L_4346a9-.L_45a72c
          .long .L_4346e0-.L_45a72c
          .long .L_4346a9-.L_45a72c
          .long .L_4346a9-.L_45a72c
          .long .L_4346a9-.L_45a72c
          .long .L_4346a9-.L_45a72c
          .long .L_434688-.L_45a72c
.L_45a760:
          .long .L_434c20-.L_45a760
          .long .L_434c08-.L_45a760
          .long .L_434cb0-.L_45a760
          .long .L_434c38-.L_45a760
          .long .L_434bc0-.L_45a760
          .long .L_434ba8-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434b90-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434b70-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434b40-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434aa0-.L_45a760
          .long .L_434b10-.L_45a760
          .long .L_434a90-.L_45a760
          .long .L_434ad8-.L_45a760
.L_45a838:
          .string "[%s]%s: %s"
.L_45a843:
          .string "meshcop/dtls.cpp"
.L_45a854:
          .string "rval >= 0"
          .zero 2
.L_45a860:
          .string "static otError ot::MeshCoP::Dtls::MapError(int)"
          .zero 16
.L_45a8a0:
          .string "int ot::MeshCoP::Dtls::HandleMbedtlsTransmit(const unsigned char*, size_t)"
          .zero 5
.L_45a8f0:
          .byte 0xff
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45a8f8:
          .string "c/er"
.L_45a8fd:
          .string "c/es"
.L_45a902:
          .string "meshcop/joiner.cpp"
          .zero 3
.L_45a918:
          .string "[THCI] direction=send | type=JOIN_FIN.req |"
          .zero 4
.L_45a948:
          .string "[THCI] direction=recv | type=JOIN_FIN.rsp |"
          .zero 4
.L_45a978:
          .string "[%s]%s: [THCI] direction=send | type=JOIN_ENT.rsp"
          .zero 6
.L_45a9b0:
          .string "[%s]%s: [THCI] direction=recv | type=JOIN_ENT.ntf"
          .zero 30
.L_45aa00:
          .long .L_4376bc-.L_45aa00
          .long .L_4376bc-.L_45aa00
          .long .L_4376bc-.L_45aa00
          .long .L_437650-.L_45aa00
          .long .L_437650-.L_45aa00
          .long .L_437680-.L_45aa00
          .zero 8
.L_45aa20:
          .string "void ot::MeshCoP::Joiner::HandleTimer()"
.L_45aa48:
          .string "c/pc"
.L_45aa4d:
          .string "c/pq"
.L_45aa52:
          .string "net/dns_client.cpp"
.L_45aa65:
          .string "count == sizeof(messageId)"
.L_45aa80:
          .string "ot::Message* ot::Dns::Client::FindRelatedQuery(const ot::Dns::Header&, ot::Dns::QueryMetadata&)"
.L_45aae0:
          .string "c/ab"
          .zero 3
.L_45aae8:
          .long .L_43b958-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b968-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b978-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b988-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b998-.L_45aae8
          .long .L_43b948-.L_45aae8
.L_45ab24:
          .string "thread/mesh_forwarder.cpp"
.L_45ab3e:
          .string "hcLength > 0"
.L_45ab4b:
          .string "aFrame.GetLength() != 7"
          .zero 29
.L_45ab80:
          .string "void ot::MeshForwarder::HandleSentFrame(ot::Mac::Frame&, otError)"
          .zero 30
.L_45abe0:
          .string "otError ot::MeshForwarder::SendFragment(ot::Message&, ot::Mac::Frame&)"
          .zero 25
.L_45ac40:
          .string "otError ot::MeshForwarder::HandleFrameRequest(ot::Mac::Frame&)"
          .zero 1
.L_45ac80:
          .string "ot::Message* ot::MeshForwarder::GetDirectTransmission()"
.L_45acb8:
          .string "crypto/pbkdf2_cmac.cpp"
.L_45accf:
          .byte 0x61
          .byte 0x49
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x61
          .byte 0x74
          .byte 0x69
          .byte 0x6f
          .byte 0x6e
          .byte 0x43
          .byte 0x6f
          .byte 0x75
          .byte 0x6e
          .byte 0x74
          .byte 0x65
          .byte 0x72
          .byte 0x20
          .byte 0x25
          .byte 0x20
          .byte 0x32
          .byte 0x20
          .byte 0x3d
          .byte 0x3d
          .byte 0x20
.L_45ace8:
          .string "0"
          .zero 22
.L_45ad00:
          .string "void otPbkdf2Cmac(const uint8_t*, uint16_t, const uint8_t*, uint16_t, uint32_t, uint16_t, uint8_t*)"
.L_45ad64:
          .string "SHA224"
.L_45ad6b:
          .string "SHA256"
          .zero 6
.L_45ad78:
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x5
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45ada0:
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45ade0:
          .byte 0x98
          .byte 0x2f
          .byte 0x8a
          .byte 0x42
          .byte 0x91
          .byte 0x44
          .byte 0x37
          .byte 0x71
          .byte 0xcf
          .byte 0xfb
          .byte 0xc0
          .byte 0xb5
          .byte 0xa5
          .byte 0xdb
          .byte 0xb5
          .byte 0xe9
          .byte 0x5b
          .byte 0xc2
          .byte 0x56
          .byte 0x39
          .byte 0xf1
          .byte 0x11
          .byte 0xf1
          .byte 0x59
          .byte 0xa4
          .byte 0x82
          .byte 0x3f
          .byte 0x92
          .byte 0xd5
          .byte 0x5e
          .byte 0x1c
          .byte 0xab
          .byte 0x98
          .byte 0xaa
          .byte 0x7
          .byte 0xd8
          .byte 0x1
          .byte 0x5b
          .byte 0x83
          .byte 0x12
          .byte 0xbe
          .byte 0x85
          .byte 0x31
          .byte 0x24
          .byte 0xc3
          .byte 0x7d
          .byte 0xc
          .byte 0x55
          .byte 0x74
          .byte 0x5d
          .byte 0xbe
          .byte 0x72
          .byte 0xfe
          .byte 0xb1
          .byte 0xde
          .byte 0x80
          .byte 0xa7
          .byte 0x6
          .byte 0xdc
          .byte 0x9b
          .byte 0x74
          .byte 0xf1
          .byte 0x9b
          .byte 0xc1
          .byte 0xc1
          .byte 0x69
          .byte 0x9b
          .byte 0xe4
          .byte 0x86
          .byte 0x47
          .byte 0xbe
          .byte 0xef
          .byte 0xc6
          .byte 0x9d
          .byte 0xc1
          .byte 0xf
          .byte 0xcc
          .byte 0xa1
          .byte 0xc
          .byte 0x24
          .byte 0x6f
          .byte 0x2c
          .byte 0xe9
          .byte 0x2d
          .byte 0xaa
          .byte 0x84
          .byte 0x74
          .byte 0x4a
          .byte 0xdc
          .byte 0xa9
          .byte 0xb0
          .byte 0x5c
          .byte 0xda
          .byte 0x88
          .byte 0xf9
          .byte 0x76
          .byte 0x52
          .byte 0x51
          .byte 0x3e
          .byte 0x98
          .byte 0x6d
          .byte 0xc6
          .byte 0x31
          .byte 0xa8
          .byte 0xc8
          .byte 0x27
          .byte 0x3
          .byte 0xb0
          .byte 0xc7
          .byte 0x7f
          .byte 0x59
          .byte 0xbf
          .byte 0xf3
          .byte 0xb
          .byte 0xe0
          .byte 0xc6
          .byte 0x47
          .byte 0x91
          .byte 0xa7
          .byte 0xd5
          .byte 0x51
          .byte 0x63
          .byte 0xca
          .byte 0x6
          .byte 0x67
          .byte 0x29
          .byte 0x29
          .byte 0x14
          .byte 0x85
          .byte 0xa
          .byte 0xb7
          .byte 0x27
          .byte 0x38
          .byte 0x21
          .byte 0x1b
          .byte 0x2e
          .byte 0xfc
          .byte 0x6d
          .byte 0x2c
          .byte 0x4d
          .byte 0x13
          .byte 0xd
          .byte 0x38
          .byte 0x53
          .byte 0x54
          .byte 0x73
          .byte 0xa
          .byte 0x65
          .byte 0xbb
          .byte 0xa
          .byte 0x6a
          .byte 0x76
          .byte 0x2e
          .byte 0xc9
          .byte 0xc2
          .byte 0x81
          .byte 0x85
          .byte 0x2c
          .byte 0x72
          .byte 0x92
          .byte 0xa1
          .byte 0xe8
          .byte 0xbf
          .byte 0xa2
          .byte 0x4b
          .byte 0x66
          .byte 0x1a
          .byte 0xa8
          .byte 0x70
          .byte 0x8b
          .byte 0x4b
          .byte 0xc2
          .byte 0xa3
          .byte 0x51
          .byte 0x6c
          .byte 0xc7
          .byte 0x19
          .byte 0xe8
          .byte 0x92
          .byte 0xd1
          .byte 0x24
          .byte 0x6
          .byte 0x99
          .byte 0xd6
          .byte 0x85
          .byte 0x35
          .byte 0xe
          .byte 0xf4
          .byte 0x70
          .byte 0xa0
          .byte 0x6a
          .byte 0x10
          .byte 0x16
          .byte 0xc1
          .byte 0xa4
          .byte 0x19
          .byte 0x8
          .byte 0x6c
          .byte 0x37
          .byte 0x1e
          .byte 0x4c
          .byte 0x77
          .byte 0x48
          .byte 0x27
          .byte 0xb5
          .byte 0xbc
          .byte 0xb0
          .byte 0x34
          .byte 0xb3
          .byte 0xc
          .byte 0x1c
          .byte 0x39
          .byte 0x4a
          .byte 0xaa
          .byte 0xd8
          .byte 0x4e
          .byte 0x4f
          .byte 0xca
          .byte 0x9c
          .byte 0x5b
          .byte 0xf3
          .byte 0x6f
          .byte 0x2e
          .byte 0x68
          .byte 0xee
          .byte 0x82
          .byte 0x8f
          .byte 0x74
          .byte 0x6f
          .byte 0x63
          .byte 0xa5
          .byte 0x78
          .byte 0x14
          .byte 0x78
          .byte 0xc8
          .byte 0x84
          .byte 0x8
          .byte 0x2
          .byte 0xc7
          .byte 0x8c
          .byte 0xfa
          .byte 0xff
          .byte 0xbe
          .byte 0x90
          .byte 0xeb
          .byte 0x6c
          .byte 0x50
          .byte 0xa4
          .byte 0xf7
          .byte 0xa3
          .byte 0xf9
          .byte 0xbe
          .byte 0xf2
          .byte 0x78
          .byte 0x71
          .byte 0xc6
.L_45aee0:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45aee4:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x20
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x36
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45af20:
          .byte 0xf4
          .byte 0xa7
          .byte 0x50
          .byte 0x51
          .byte 0x41
          .byte 0x65
          .byte 0x53
          .byte 0x7e
          .byte 0x17
          .byte 0xa4
          .byte 0xc3
          .byte 0x1a
          .byte 0x27
          .byte 0x5e
          .byte 0x96
          .byte 0x3a
          .byte 0xab
          .byte 0x6b
          .byte 0xcb
          .byte 0x3b
          .byte 0x9d
          .byte 0x45
          .byte 0xf1
          .byte 0x1f
          .byte 0xfa
          .byte 0x58
          .byte 0xab
          .byte 0xac
          .byte 0xe3
          .byte 0x3
          .byte 0x93
          .byte 0x4b
          .byte 0x30
          .byte 0xfa
          .byte 0x55
          .byte 0x20
          .byte 0x76
          .byte 0x6d
          .byte 0xf6
          .byte 0xad
          .byte 0xcc
          .byte 0x76
          .byte 0x91
          .byte 0x88
          .byte 0x2
          .byte 0x4c
          .byte 0x25
          .byte 0xf5
          .byte 0xe5
          .byte 0xd7
          .byte 0xfc
          .byte 0x4f
          .byte 0x2a
          .byte 0xcb
          .byte 0xd7
          .byte 0xc5
          .byte 0x35
          .byte 0x44
          .byte 0x80
          .byte 0x26
          .byte 0x62
          .byte 0xa3
          .byte 0x8f
          .byte 0xb5
          .byte 0xb1
          .byte 0x5a
          .byte 0x49
          .byte 0xde
          .byte 0xba
          .byte 0x1b
          .byte 0x67
          .byte 0x25
          .byte 0xea
          .byte 0xe
          .byte 0x98
          .byte 0x45
          .byte 0xfe
          .byte 0xc0
          .byte 0xe1
          .byte 0x5d
          .byte 0x2f
          .byte 0x75
          .byte 0x2
          .byte 0xc3
          .byte 0x4c
          .byte 0xf0
          .byte 0x12
          .byte 0x81
          .byte 0x46
          .byte 0x97
          .byte 0xa3
          .byte 0x8d
          .byte 0xd3
          .byte 0xf9
          .byte 0xc6
          .byte 0x6b
          .byte 0x8f
          .byte 0x5f
          .byte 0xe7
          .byte 0x3
          .byte 0x92
          .byte 0x9c
          .byte 0x95
          .byte 0x15
          .byte 0x6d
          .byte 0x7a
          .byte 0xeb
          .byte 0xbf
          .byte 0x52
          .byte 0x59
          .byte 0xda
          .byte 0x95
          .byte 0xbe
          .byte 0x83
          .byte 0x2d
          .byte 0xd4
          .byte 0x74
          .byte 0x21
          .byte 0xd3
          .byte 0x58
          .byte 0xe0
          .byte 0x69
          .byte 0x29
          .byte 0x49
          .byte 0xc9
          .byte 0xc8
          .byte 0x44
          .byte 0x8e
          .byte 0xc2
          .byte 0x89
          .byte 0x6a
          .byte 0x75
          .byte 0x8e
          .byte 0x79
          .byte 0x78
          .byte 0xf4
          .byte 0x58
          .byte 0x3e
          .byte 0x6b
          .byte 0x99
          .byte 0xb9
          .byte 0x71
          .byte 0xdd
          .byte 0x27
          .byte 0xe1
          .byte 0x4f
          .byte 0xb6
          .byte 0xbe
          .byte 0x88
          .byte 0xad
          .byte 0x17
          .byte 0xf0
          .byte 0x20
          .byte 0xac
          .byte 0x66
          .byte 0xc9
          .byte 0xce
          .byte 0x3a
          .byte 0xb4
          .byte 0x7d
          .byte 0xdf
          .byte 0x4a
          .byte 0x18
          .byte 0x63
          .byte 0x1a
          .byte 0x31
          .byte 0x82
          .byte 0xe5
          .byte 0x51
          .byte 0x33
          .byte 0x60
          .byte 0x97
          .byte 0x53
          .byte 0x7f
          .byte 0x45
          .byte 0x62
          .byte 0x64
          .byte 0x77
          .byte 0xe0
          .byte 0xb1
          .byte 0x6b
          .byte 0xae
          .byte 0x84
          .byte 0xbb
          .byte 0x81
          .byte 0xa0
          .byte 0x1c
          .byte 0xfe
          .byte 0x8
          .byte 0x2b
          .byte 0x94
          .byte 0xf9
          .byte 0x48
          .byte 0x68
          .byte 0x58
          .byte 0x70
          .byte 0x45
          .byte 0xfd
          .byte 0x19
          .byte 0x8f
          .byte 0xde
          .byte 0x6c
          .byte 0x87
          .byte 0x94
          .byte 0x7b
          .byte 0xf8
          .byte 0xb7
          .byte 0x52
          .byte 0x73
          .byte 0xd3
          .byte 0x23
          .byte 0xab
          .byte 0x4b
          .byte 0x2
          .byte 0xe2
          .byte 0x72
          .byte 0x1f
          .byte 0x8f
          .byte 0x57
          .byte 0xe3
          .byte 0x55
          .byte 0xab
          .byte 0x2a
          .byte 0x66
          .byte 0xeb
          .byte 0x28
          .byte 0x7
          .byte 0xb2
          .byte 0xb5
          .byte 0xc2
          .byte 0x3
          .byte 0x2f
          .byte 0xc5
          .byte 0x7b
          .byte 0x9a
          .byte 0x86
          .byte 0x37
          .byte 0x8
          .byte 0xa5
          .byte 0xd3
          .byte 0x28
          .byte 0x87
          .byte 0xf2
          .byte 0x30
          .byte 0xbf
          .byte 0xa5
          .byte 0xb2
          .byte 0x23
          .byte 0x3
          .byte 0x6a
          .byte 0xba
          .byte 0x2
          .byte 0x16
          .byte 0x82
          .byte 0x5c
          .byte 0xed
          .byte 0xcf
          .byte 0x1c
          .byte 0x2b
          .byte 0x8a
          .byte 0x79
          .byte 0xb4
          .byte 0x92
          .byte 0xa7
          .byte 0x7
          .byte 0xf2
          .byte 0xf0
          .byte 0xf3
          .byte 0x69
          .byte 0xe2
          .byte 0xa1
          .byte 0x4e
          .byte 0xda
          .byte 0xf4
          .byte 0xcd
          .byte 0x65
          .byte 0x5
          .byte 0xbe
          .byte 0xd5
          .byte 0x6
          .byte 0x34
          .byte 0x62
          .byte 0x1f
          .byte 0xd1
          .byte 0xa6
          .byte 0xfe
          .byte 0x8a
          .byte 0xc4
          .byte 0x2e
          .byte 0x53
          .byte 0x9d
          .byte 0x34
          .byte 0xf3
          .byte 0x55
          .byte 0xa0
          .byte 0xa2
          .byte 0x8a
          .byte 0xe1
          .byte 0x32
          .byte 0x5
          .byte 0xf6
          .byte 0xeb
          .byte 0x75
          .byte 0xa4
          .byte 0x83
          .byte 0xec
          .byte 0x39
          .byte 0xb
          .byte 0x60
          .byte 0xef
          .byte 0xaa
          .byte 0x40
          .byte 0x71
          .byte 0x9f
          .byte 0x6
          .byte 0x5e
          .byte 0x6e
          .byte 0x10
          .byte 0x51
          .byte 0xbd
          .byte 0x21
          .byte 0x8a
          .byte 0xf9
          .byte 0x3e
          .byte 0xdd
          .byte 0x6
          .byte 0x3d
          .byte 0x96
          .byte 0x3e
          .byte 0x5
          .byte 0xae
          .byte 0xdd
          .byte 0xe6
          .byte 0xbd
          .byte 0x46
          .byte 0x4d
          .byte 0x54
          .byte 0x8d
          .byte 0xb5
          .byte 0x91
          .byte 0xc4
          .byte 0x5d
          .byte 0x5
          .byte 0x71
          .byte 0x6
          .byte 0xd4
          .byte 0x6f
          .byte 0x4
          .byte 0x50
          .byte 0x15
          .byte 0xff
          .byte 0x60
          .byte 0x98
          .byte 0xfb
          .byte 0x24
          .byte 0x19
          .byte 0xbd
          .byte 0xe9
          .byte 0x97
          .byte 0xd6
          .byte 0x40
          .byte 0x43
          .byte 0xcc
          .byte 0x89
          .byte 0xd9
          .byte 0x9e
          .byte 0x77
          .byte 0x67
          .byte 0xe8
          .byte 0x42
          .byte 0xbd
          .byte 0xb0
          .byte 0x89
          .byte 0x8b
          .byte 0x88
          .byte 0x7
          .byte 0x19
          .byte 0x5b
          .byte 0x38
          .byte 0xe7
          .byte 0xc8
          .byte 0xee
          .byte 0xdb
          .byte 0x79
          .byte 0x7c
          .byte 0xa
          .byte 0x47
          .byte 0xa1
          .byte 0x42
          .byte 0xf
          .byte 0xe9
          .byte 0x7c
          .byte 0x84
          .byte 0x1e
          .byte 0xc9
          .byte 0xf8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x86
          .byte 0x83
          .byte 0x9
          .byte 0x2b
          .byte 0xed
          .byte 0x48
          .byte 0x32
          .byte 0x11
          .byte 0x70
          .byte 0xac
          .byte 0x1e
          .byte 0x5a
          .byte 0x72
          .byte 0x4e
          .byte 0x6c
          .byte 0xe
          .byte 0xff
          .byte 0xfb
          .byte 0xfd
          .byte 0x85
          .byte 0x38
          .byte 0x56
          .byte 0xf
          .byte 0xae
          .byte 0xd5
          .byte 0x1e
          .byte 0x3d
          .byte 0x2d
          .byte 0x39
          .byte 0x27
          .byte 0x36
          .byte 0xf
          .byte 0xd9
          .byte 0x64
          .byte 0xa
          .byte 0x5c
          .byte 0xa6
          .byte 0x21
          .byte 0x68
          .byte 0x5b
          .byte 0x54
          .byte 0xd1
          .byte 0x9b
          .byte 0x36
          .byte 0x2e
          .byte 0x3a
          .byte 0x24
          .byte 0xa
          .byte 0x67
          .byte 0xb1
          .byte 0xc
          .byte 0x57
          .byte 0xe7
          .byte 0xf
          .byte 0x93
          .byte 0xee
          .byte 0x96
          .byte 0xd2
          .byte 0xb4
          .byte 0x9b
          .byte 0x91
          .byte 0x9e
          .byte 0x1b
          .byte 0xc0
          .byte 0xc5
          .byte 0x4f
          .byte 0x80
          .byte 0xdc
          .byte 0x20
          .byte 0xa2
          .byte 0x61
          .byte 0x77
          .byte 0x4b
          .byte 0x69
          .byte 0x5a
          .byte 0x12
          .byte 0x1a
          .byte 0x16
          .byte 0x1c
          .byte 0x93
          .byte 0xba
          .byte 0xa
          .byte 0xe2
          .byte 0xa0
          .byte 0x2a
          .byte 0xe5
          .byte 0xc0
          .byte 0x22
          .byte 0xe0
          .byte 0x43
          .byte 0x3c
          .byte 0x1b
          .byte 0x17
          .byte 0x1d
          .byte 0x12
          .byte 0x9
          .byte 0xd
          .byte 0xb
          .byte 0xe
          .byte 0x8b
          .byte 0xc7
          .byte 0xad
          .byte 0xf2
          .byte 0xb6
          .byte 0xa8
          .byte 0xb9
          .byte 0x2d
          .byte 0x1e
          .byte 0xa9
          .byte 0xc8
          .byte 0x14
          .byte 0xf1
          .byte 0x19
          .byte 0x85
          .byte 0x57
          .byte 0x75
          .byte 0x7
          .byte 0x4c
          .byte 0xaf
          .byte 0x99
          .byte 0xdd
          .byte 0xbb
          .byte 0xee
          .byte 0x7f
          .byte 0x60
          .byte 0xfd
          .byte 0xa3
          .byte 0x1
          .byte 0x26
          .byte 0x9f
          .byte 0xf7
          .byte 0x72
          .byte 0xf5
          .byte 0xbc
          .byte 0x5c
          .byte 0x66
          .byte 0x3b
          .byte 0xc5
          .byte 0x44
          .byte 0xfb
          .byte 0x7e
          .byte 0x34
          .byte 0x5b
          .byte 0x43
          .byte 0x29
          .byte 0x76
          .byte 0x8b
          .byte 0x23
          .byte 0xc6
          .byte 0xdc
          .byte 0xcb
          .byte 0xed
          .byte 0xfc
          .byte 0x68
          .byte 0xb6
          .byte 0xe4
          .byte 0xf1
          .byte 0x63
          .byte 0xb8
          .byte 0x31
          .byte 0xdc
          .byte 0xca
          .byte 0xd7
          .byte 0x63
          .byte 0x85
          .byte 0x10
          .byte 0x42
          .byte 0x97
          .byte 0x22
          .byte 0x40
          .byte 0x13
          .byte 0xc6
          .byte 0x11
          .byte 0x20
          .byte 0x84
          .byte 0x4a
          .byte 0x24
          .byte 0x7d
          .byte 0x85
          .byte 0xbb
          .byte 0x3d
          .byte 0xf8
          .byte 0xd2
          .byte 0xf9
          .byte 0x32
          .byte 0x11
          .byte 0xae
          .byte 0x29
          .byte 0xa1
          .byte 0x6d
          .byte 0xc7
          .byte 0x9e
          .byte 0x2f
          .byte 0x4b
          .byte 0x1d
          .byte 0xb2
          .byte 0x30
          .byte 0xf3
          .byte 0xdc
          .byte 0x86
          .byte 0x52
          .byte 0xec
          .byte 0xd
          .byte 0xc1
          .byte 0xe3
          .byte 0xd0
          .byte 0x77
          .byte 0xb3
          .byte 0x16
          .byte 0x6c
          .byte 0x2b
          .byte 0x70
          .byte 0xb9
          .byte 0x99
          .byte 0xa9
          .byte 0x94
          .byte 0x48
          .byte 0xfa
          .byte 0x11
          .byte 0xe9
          .byte 0x64
          .byte 0x22
          .byte 0x47
          .byte 0xfc
          .byte 0x8c
          .byte 0xc4
          .byte 0xa8
          .byte 0xf0
          .byte 0x3f
          .byte 0x1a
          .byte 0xa0
          .byte 0x7d
          .byte 0x2c
          .byte 0xd8
          .byte 0x56
          .byte 0x33
          .byte 0x90
          .byte 0xef
          .byte 0x22
          .byte 0x49
          .byte 0x4e
          .byte 0xc7
          .byte 0x87
          .byte 0x38
          .byte 0xd1
          .byte 0xc1
          .byte 0xd9
          .byte 0xca
          .byte 0xa2
          .byte 0xfe
          .byte 0x8c
          .byte 0xd4
          .byte 0xb
          .byte 0x36
          .byte 0x98
          .byte 0xf5
          .byte 0x81
          .byte 0xcf
          .byte 0xa6
          .byte 0x7a
          .byte 0xde
          .byte 0x28
          .byte 0xa5
          .byte 0xb7
          .byte 0x8e
          .byte 0x26
          .byte 0xda
          .byte 0xad
          .byte 0xbf
          .byte 0xa4
          .byte 0x3f
          .byte 0x3a
          .byte 0x9d
          .byte 0xe4
          .byte 0x2c
          .byte 0x78
          .byte 0x92
          .byte 0xd
          .byte 0x50
          .byte 0x5f
          .byte 0xcc
          .byte 0x9b
          .byte 0x6a
          .byte 0x7e
          .byte 0x46
          .byte 0x62
          .byte 0x54
          .byte 0x8d
          .byte 0x13
          .byte 0xc2
          .byte 0xf6
          .byte 0xd8
          .byte 0xb8
          .byte 0xe8
          .byte 0x90
          .byte 0x39
          .byte 0xf7
          .byte 0x5e
          .byte 0x2e
          .byte 0xc3
          .byte 0xaf
          .byte 0xf5
          .byte 0x82
          .byte 0x5d
          .byte 0x80
          .byte 0xbe
          .byte 0x9f
          .byte 0xd0
          .byte 0x93
          .byte 0x7c
          .byte 0x69
          .byte 0xd5
          .byte 0x2d
          .byte 0xa9
          .byte 0x6f
          .byte 0x25
          .byte 0x12
          .byte 0xb3
          .byte 0xcf
          .byte 0xac
          .byte 0x99
          .byte 0x3b
          .byte 0xc8
          .byte 0x18
          .byte 0x7d
          .byte 0xa7
          .byte 0x10
          .byte 0x9c
          .byte 0x63
          .byte 0x6e
          .byte 0xe8
          .byte 0x3b
          .byte 0xbb
          .byte 0x7b
          .byte 0xdb
          .byte 0x26
          .byte 0x78
          .byte 0x9
          .byte 0xcd
          .byte 0x59
          .byte 0x18
          .byte 0xf4
          .byte 0x6e
          .byte 0x9a
          .byte 0xb7
          .byte 0x1
          .byte 0xec
          .byte 0x4f
          .byte 0x9a
          .byte 0xa8
          .byte 0x83
          .byte 0x95
          .byte 0x6e
          .byte 0x65
          .byte 0xe6
          .byte 0xff
          .byte 0xe6
          .byte 0x7e
          .byte 0xaa
          .byte 0xbc
          .byte 0xcf
          .byte 0x8
          .byte 0x21
          .byte 0x15
          .byte 0xe8
          .byte 0xe6
          .byte 0xef
          .byte 0xe7
          .byte 0x9b
          .byte 0xd9
          .byte 0xba
          .byte 0x6f
          .byte 0x36
          .byte 0xce
          .byte 0x4a
          .byte 0x9f
          .byte 0x9
          .byte 0xd4
          .byte 0xea
          .byte 0xb0
          .byte 0x7c
          .byte 0xd6
          .byte 0x29
          .byte 0xa4
          .byte 0xb2
          .byte 0xaf
          .byte 0x31
          .byte 0x3f
          .byte 0x23
          .byte 0x31
          .byte 0x2a
          .byte 0xa5
          .byte 0x94
          .byte 0x30
          .byte 0xc6
          .byte 0xa2
          .byte 0x66
          .byte 0xc0
          .byte 0x35
          .byte 0x4e
          .byte 0xbc
          .byte 0x37
          .byte 0x74
          .byte 0x82
          .byte 0xca
          .byte 0xa6
          .byte 0xfc
          .byte 0x90
          .byte 0xd0
          .byte 0xb0
          .byte 0xe0
          .byte 0xa7
          .byte 0xd8
          .byte 0x15
          .byte 0x33
          .byte 0x4
          .byte 0x98
          .byte 0x4a
          .byte 0xf1
          .byte 0xec
          .byte 0xda
          .byte 0xf7
          .byte 0x41
          .byte 0xcd
          .byte 0x50
          .byte 0xe
          .byte 0x7f
          .byte 0x91
          .byte 0xf6
          .byte 0x2f
          .byte 0x17
          .byte 0x4d
          .byte 0xd6
          .byte 0x8d
          .byte 0x76
          .byte 0xef
          .byte 0xb0
          .byte 0x4d
          .byte 0x43
          .byte 0xaa
          .byte 0x4d
          .byte 0x54
          .byte 0xcc
          .byte 0x96
          .byte 0x4
          .byte 0xdf
          .byte 0xe4
          .byte 0xd1
          .byte 0xb5
          .byte 0xe3
          .byte 0x9e
          .byte 0x6a
          .byte 0x88
          .byte 0x1b
          .byte 0x4c
          .byte 0x2c
          .byte 0x1f
          .byte 0xb8
          .byte 0xc1
          .byte 0x65
          .byte 0x51
          .byte 0x7f
          .byte 0x46
          .byte 0x5e
          .byte 0xea
          .byte 0x4
          .byte 0x9d
          .byte 0x8c
          .byte 0x35
          .byte 0x5d
          .byte 0x1
          .byte 0x87
          .byte 0x74
          .byte 0x73
          .byte 0xfa
          .byte 0xb
          .byte 0x41
          .byte 0x2e
          .byte 0xfb
          .byte 0x67
          .byte 0x1d
          .byte 0x5a
          .byte 0xb3
          .byte 0xdb
          .byte 0xd2
          .byte 0x52
          .byte 0x92
          .byte 0x10
          .byte 0x56
          .byte 0x33
          .byte 0xe9
          .byte 0xd6
          .byte 0x47
          .byte 0x13
          .byte 0x6d
          .byte 0xd7
          .byte 0x61
          .byte 0x8c
          .byte 0x9a
          .byte 0xa1
          .byte 0xc
          .byte 0x7a
          .byte 0x37
          .byte 0xf8
          .byte 0x14
          .byte 0x8e
          .byte 0x59
          .byte 0x13
          .byte 0x3c
          .byte 0x89
          .byte 0xeb
          .byte 0xa9
          .byte 0x27
          .byte 0xee
          .byte 0xce
          .byte 0x61
          .byte 0xc9
          .byte 0x35
          .byte 0xb7
          .byte 0x1c
          .byte 0xe5
          .byte 0xed
          .byte 0xe1
          .byte 0x47
          .byte 0xb1
          .byte 0x3c
          .byte 0x7a
          .byte 0xd2
          .byte 0xdf
          .byte 0x59
          .byte 0x9c
          .byte 0xf2
          .byte 0x73
          .byte 0x3f
          .byte 0x55
          .byte 0x14
          .byte 0xce
          .byte 0x79
          .byte 0x18
          .byte 0xc7
          .byte 0x37
          .byte 0xbf
          .byte 0x73
          .byte 0xf7
          .byte 0xcd
          .byte 0xea
          .byte 0x53
          .byte 0xfd
          .byte 0xaa
          .byte 0x5b
          .byte 0x5f
          .byte 0x3d
          .byte 0x6f
          .byte 0x14
          .byte 0xdf
          .byte 0x44
          .byte 0xdb
          .byte 0x86
          .byte 0x78
          .byte 0xaf
          .byte 0xf3
          .byte 0x81
          .byte 0xca
          .byte 0x68
          .byte 0xc4
          .byte 0x3e
          .byte 0xb9
          .byte 0x24
          .byte 0x34
          .byte 0x2c
          .byte 0x38
          .byte 0xa3
          .byte 0x40
          .byte 0x5f
          .byte 0xc2
          .byte 0x1d
          .byte 0xc3
          .byte 0x72
          .byte 0x16
          .byte 0xe2
          .byte 0x25
          .byte 0xc
          .byte 0xbc
          .byte 0x3c
          .byte 0x49
          .byte 0x8b
          .byte 0x28
          .byte 0xd
          .byte 0x95
          .byte 0x41
          .byte 0xff
          .byte 0xa8
          .byte 0x1
          .byte 0x71
          .byte 0x39
          .byte 0xc
          .byte 0xb3
          .byte 0xde
          .byte 0x8
          .byte 0xb4
          .byte 0xe4
          .byte 0x9c
          .byte 0xd8
          .byte 0x56
          .byte 0xc1
          .byte 0x90
          .byte 0x64
          .byte 0xcb
          .byte 0x84
          .byte 0x61
          .byte 0x7b
          .byte 0x32
          .byte 0xb6
          .byte 0x70
          .byte 0xd5
          .byte 0x6c
          .byte 0x5c
          .byte 0x74
          .byte 0x48
          .byte 0xb8
          .byte 0x57
          .byte 0x42
          .byte 0xd0
.L_45b320:
          .byte 0xa7
          .byte 0x50
          .byte 0x51
          .byte 0xf4
          .byte 0x65
          .byte 0x53
          .byte 0x7e
          .byte 0x41
          .byte 0xa4
          .byte 0xc3
          .byte 0x1a
          .byte 0x17
          .byte 0x5e
          .byte 0x96
          .byte 0x3a
          .byte 0x27
          .byte 0x6b
          .byte 0xcb
          .byte 0x3b
          .byte 0xab
          .byte 0x45
          .byte 0xf1
          .byte 0x1f
          .byte 0x9d
          .byte 0x58
          .byte 0xab
          .byte 0xac
          .byte 0xfa
          .byte 0x3
          .byte 0x93
          .byte 0x4b
          .byte 0xe3
          .byte 0xfa
          .byte 0x55
          .byte 0x20
          .byte 0x30
          .byte 0x6d
          .byte 0xf6
          .byte 0xad
          .byte 0x76
          .byte 0x76
          .byte 0x91
          .byte 0x88
          .byte 0xcc
          .byte 0x4c
          .byte 0x25
          .byte 0xf5
          .byte 0x2
          .byte 0xd7
          .byte 0xfc
          .byte 0x4f
          .byte 0xe5
          .byte 0xcb
          .byte 0xd7
          .byte 0xc5
          .byte 0x2a
          .byte 0x44
          .byte 0x80
          .byte 0x26
          .byte 0x35
          .byte 0xa3
          .byte 0x8f
          .byte 0xb5
          .byte 0x62
          .byte 0x5a
          .byte 0x49
          .byte 0xde
          .byte 0xb1
          .byte 0x1b
          .byte 0x67
          .byte 0x25
          .byte 0xba
          .byte 0xe
          .byte 0x98
          .byte 0x45
          .byte 0xea
          .byte 0xc0
          .byte 0xe1
          .byte 0x5d
          .byte 0xfe
          .byte 0x75
          .byte 0x2
          .byte 0xc3
          .byte 0x2f
          .byte 0xf0
          .byte 0x12
          .byte 0x81
          .byte 0x4c
          .byte 0x97
          .byte 0xa3
          .byte 0x8d
          .byte 0x46
          .byte 0xf9
          .byte 0xc6
          .byte 0x6b
          .byte 0xd3
          .byte 0x5f
          .byte 0xe7
          .byte 0x3
          .byte 0x8f
          .byte 0x9c
          .byte 0x95
          .byte 0x15
          .byte 0x92
          .byte 0x7a
          .byte 0xeb
          .byte 0xbf
          .byte 0x6d
          .byte 0x59
          .byte 0xda
          .byte 0x95
          .byte 0x52
          .byte 0x83
          .byte 0x2d
          .byte 0xd4
          .byte 0xbe
          .byte 0x21
          .byte 0xd3
          .byte 0x58
          .byte 0x74
          .byte 0x69
          .byte 0x29
          .byte 0x49
          .byte 0xe0
          .byte 0xc8
          .byte 0x44
          .byte 0x8e
          .byte 0xc9
          .byte 0x89
          .byte 0x6a
          .byte 0x75
          .byte 0xc2
          .byte 0x79
          .byte 0x78
          .byte 0xf4
          .byte 0x8e
          .byte 0x3e
          .byte 0x6b
          .byte 0x99
          .byte 0x58
          .byte 0x71
          .byte 0xdd
          .byte 0x27
          .byte 0xb9
          .byte 0x4f
          .byte 0xb6
          .byte 0xbe
          .byte 0xe1
          .byte 0xad
          .byte 0x17
          .byte 0xf0
          .byte 0x88
          .byte 0xac
          .byte 0x66
          .byte 0xc9
          .byte 0x20
          .byte 0x3a
          .byte 0xb4
          .byte 0x7d
          .byte 0xce
          .byte 0x4a
          .byte 0x18
          .byte 0x63
          .byte 0xdf
          .byte 0x31
          .byte 0x82
          .byte 0xe5
          .byte 0x1a
          .byte 0x33
          .byte 0x60
          .byte 0x97
          .byte 0x51
          .byte 0x7f
          .byte 0x45
          .byte 0x62
          .byte 0x53
          .byte 0x77
          .byte 0xe0
          .byte 0xb1
          .byte 0x64
          .byte 0xae
          .byte 0x84
          .byte 0xbb
          .byte 0x6b
          .byte 0xa0
          .byte 0x1c
          .byte 0xfe
          .byte 0x81
          .byte 0x2b
          .byte 0x94
          .byte 0xf9
          .byte 0x8
          .byte 0x68
          .byte 0x58
          .byte 0x70
          .byte 0x48
          .byte 0xfd
          .byte 0x19
          .byte 0x8f
          .byte 0x45
          .byte 0x6c
          .byte 0x87
          .byte 0x94
          .byte 0xde
          .byte 0xf8
          .byte 0xb7
          .byte 0x52
          .byte 0x7b
          .byte 0xd3
          .byte 0x23
          .byte 0xab
          .byte 0x73
          .byte 0x2
          .byte 0xe2
          .byte 0x72
          .byte 0x4b
          .byte 0x8f
          .byte 0x57
          .byte 0xe3
          .byte 0x1f
          .byte 0xab
          .byte 0x2a
          .byte 0x66
          .byte 0x55
          .byte 0x28
          .byte 0x7
          .byte 0xb2
          .byte 0xeb
          .byte 0xc2
          .byte 0x3
          .byte 0x2f
          .byte 0xb5
          .byte 0x7b
          .byte 0x9a
          .byte 0x86
          .byte 0xc5
          .byte 0x8
          .byte 0xa5
          .byte 0xd3
          .byte 0x37
          .byte 0x87
          .byte 0xf2
          .byte 0x30
          .byte 0x28
          .byte 0xa5
          .byte 0xb2
          .byte 0x23
          .byte 0xbf
          .byte 0x6a
          .byte 0xba
          .byte 0x2
          .byte 0x3
          .byte 0x82
          .byte 0x5c
          .byte 0xed
          .byte 0x16
          .byte 0x1c
          .byte 0x2b
          .byte 0x8a
          .byte 0xcf
          .byte 0xb4
          .byte 0x92
          .byte 0xa7
          .byte 0x79
          .byte 0xf2
          .byte 0xf0
          .byte 0xf3
          .byte 0x7
          .byte 0xe2
          .byte 0xa1
          .byte 0x4e
          .byte 0x69
          .byte 0xf4
          .byte 0xcd
          .byte 0x65
          .byte 0xda
          .byte 0xbe
          .byte 0xd5
          .byte 0x6
          .byte 0x5
          .byte 0x62
          .byte 0x1f
          .byte 0xd1
          .byte 0x34
          .byte 0xfe
          .byte 0x8a
          .byte 0xc4
          .byte 0xa6
          .byte 0x53
          .byte 0x9d
          .byte 0x34
          .byte 0x2e
          .byte 0x55
          .byte 0xa0
          .byte 0xa2
          .byte 0xf3
          .byte 0xe1
          .byte 0x32
          .byte 0x5
          .byte 0x8a
          .byte 0xeb
          .byte 0x75
          .byte 0xa4
          .byte 0xf6
          .byte 0xec
          .byte 0x39
          .byte 0xb
          .byte 0x83
          .byte 0xef
          .byte 0xaa
          .byte 0x40
          .byte 0x60
          .byte 0x9f
          .byte 0x6
          .byte 0x5e
          .byte 0x71
          .byte 0x10
          .byte 0x51
          .byte 0xbd
          .byte 0x6e
          .byte 0x8a
          .byte 0xf9
          .byte 0x3e
          .byte 0x21
          .byte 0x6
          .byte 0x3d
          .byte 0x96
          .byte 0xdd
          .byte 0x5
          .byte 0xae
          .byte 0xdd
          .byte 0x3e
          .byte 0xbd
          .byte 0x46
          .byte 0x4d
          .byte 0xe6
          .byte 0x8d
          .byte 0xb5
          .byte 0x91
          .byte 0x54
          .byte 0x5d
          .byte 0x5
          .byte 0x71
          .byte 0xc4
          .byte 0xd4
          .byte 0x6f
          .byte 0x4
          .byte 0x6
          .byte 0x15
          .byte 0xff
          .byte 0x60
          .byte 0x50
          .byte 0xfb
          .byte 0x24
          .byte 0x19
          .byte 0x98
          .byte 0xe9
          .byte 0x97
          .byte 0xd6
          .byte 0xbd
          .byte 0x43
          .byte 0xcc
          .byte 0x89
          .byte 0x40
          .byte 0x9e
          .byte 0x77
          .byte 0x67
          .byte 0xd9
          .byte 0x42
          .byte 0xbd
          .byte 0xb0
          .byte 0xe8
          .byte 0x8b
          .byte 0x88
          .byte 0x7
          .byte 0x89
          .byte 0x5b
          .byte 0x38
          .byte 0xe7
          .byte 0x19
          .byte 0xee
          .byte 0xdb
          .byte 0x79
          .byte 0xc8
          .byte 0xa
          .byte 0x47
          .byte 0xa1
          .byte 0x7c
          .byte 0xf
          .byte 0xe9
          .byte 0x7c
          .byte 0x42
          .byte 0x1e
          .byte 0xc9
          .byte 0xf8
          .byte 0x84
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x86
          .byte 0x83
          .byte 0x9
          .byte 0x80
          .byte 0xed
          .byte 0x48
          .byte 0x32
          .byte 0x2b
          .byte 0x70
          .byte 0xac
          .byte 0x1e
          .byte 0x11
          .byte 0x72
          .byte 0x4e
          .byte 0x6c
          .byte 0x5a
          .byte 0xff
          .byte 0xfb
          .byte 0xfd
          .byte 0xe
          .byte 0x38
          .byte 0x56
          .byte 0xf
          .byte 0x85
          .byte 0xd5
          .byte 0x1e
          .byte 0x3d
          .byte 0xae
          .byte 0x39
          .byte 0x27
          .byte 0x36
          .byte 0x2d
          .byte 0xd9
          .byte 0x64
          .byte 0xa
          .byte 0xf
          .byte 0xa6
          .byte 0x21
          .byte 0x68
          .byte 0x5c
          .byte 0x54
          .byte 0xd1
          .byte 0x9b
          .byte 0x5b
          .byte 0x2e
          .byte 0x3a
          .byte 0x24
          .byte 0x36
          .byte 0x67
          .byte 0xb1
          .byte 0xc
          .byte 0xa
          .byte 0xe7
          .byte 0xf
          .byte 0x93
          .byte 0x57
          .byte 0x96
          .byte 0xd2
          .byte 0xb4
          .byte 0xee
          .byte 0x91
          .byte 0x9e
          .byte 0x1b
          .byte 0x9b
          .byte 0xc5
          .byte 0x4f
          .byte 0x80
          .byte 0xc0
          .byte 0x20
          .byte 0xa2
          .byte 0x61
          .byte 0xdc
          .byte 0x4b
          .byte 0x69
          .byte 0x5a
          .byte 0x77
          .byte 0x1a
          .byte 0x16
          .byte 0x1c
          .byte 0x12
          .byte 0xba
          .byte 0xa
          .byte 0xe2
          .byte 0x93
          .byte 0x2a
          .byte 0xe5
          .byte 0xc0
          .byte 0xa0
          .byte 0xe0
          .byte 0x43
          .byte 0x3c
          .byte 0x22
          .byte 0x17
          .byte 0x1d
          .byte 0x12
          .byte 0x1b
          .byte 0xd
          .byte 0xb
          .byte 0xe
          .byte 0x9
          .byte 0xc7
          .byte 0xad
          .byte 0xf2
          .byte 0x8b
          .byte 0xa8
          .byte 0xb9
          .byte 0x2d
          .byte 0xb6
          .byte 0xa9
          .byte 0xc8
          .byte 0x14
          .byte 0x1e
          .byte 0x19
          .byte 0x85
          .byte 0x57
          .byte 0xf1
          .byte 0x7
          .byte 0x4c
          .byte 0xaf
          .byte 0x75
          .byte 0xdd
          .byte 0xbb
          .byte 0xee
          .byte 0x99
          .byte 0x60
          .byte 0xfd
          .byte 0xa3
          .byte 0x7f
          .byte 0x26
          .byte 0x9f
          .byte 0xf7
          .byte 0x1
          .byte 0xf5
          .byte 0xbc
          .byte 0x5c
          .byte 0x72
          .byte 0x3b
          .byte 0xc5
          .byte 0x44
          .byte 0x66
          .byte 0x7e
          .byte 0x34
          .byte 0x5b
          .byte 0xfb
          .byte 0x29
          .byte 0x76
          .byte 0x8b
          .byte 0x43
          .byte 0xc6
          .byte 0xdc
          .byte 0xcb
          .byte 0x23
          .byte 0xfc
          .byte 0x68
          .byte 0xb6
          .byte 0xed
          .byte 0xf1
          .byte 0x63
          .byte 0xb8
          .byte 0xe4
          .byte 0xdc
          .byte 0xca
          .byte 0xd7
          .byte 0x31
          .byte 0x85
          .byte 0x10
          .byte 0x42
          .byte 0x63
          .byte 0x22
          .byte 0x40
          .byte 0x13
          .byte 0x97
          .byte 0x11
          .byte 0x20
          .byte 0x84
          .byte 0xc6
          .byte 0x24
          .byte 0x7d
          .byte 0x85
          .byte 0x4a
          .byte 0x3d
          .byte 0xf8
          .byte 0xd2
          .byte 0xbb
          .byte 0x32
          .byte 0x11
          .byte 0xae
          .byte 0xf9
          .byte 0xa1
          .byte 0x6d
          .byte 0xc7
          .byte 0x29
          .byte 0x2f
          .byte 0x4b
          .byte 0x1d
          .byte 0x9e
          .byte 0x30
          .byte 0xf3
          .byte 0xdc
          .byte 0xb2
          .byte 0x52
          .byte 0xec
          .byte 0xd
          .byte 0x86
          .byte 0xe3
          .byte 0xd0
          .byte 0x77
          .byte 0xc1
          .byte 0x16
          .byte 0x6c
          .byte 0x2b
          .byte 0xb3
          .byte 0xb9
          .byte 0x99
          .byte 0xa9
          .byte 0x70
          .byte 0x48
          .byte 0xfa
          .byte 0x11
          .byte 0x94
          .byte 0x64
          .byte 0x22
          .byte 0x47
          .byte 0xe9
          .byte 0x8c
          .byte 0xc4
          .byte 0xa8
          .byte 0xfc
          .byte 0x3f
          .byte 0x1a
          .byte 0xa0
          .byte 0xf0
          .byte 0x2c
          .byte 0xd8
          .byte 0x56
          .byte 0x7d
          .byte 0x90
          .byte 0xef
          .byte 0x22
          .byte 0x33
          .byte 0x4e
          .byte 0xc7
          .byte 0x87
          .byte 0x49
          .byte 0xd1
          .byte 0xc1
          .byte 0xd9
          .byte 0x38
          .byte 0xa2
          .byte 0xfe
          .byte 0x8c
          .byte 0xca
          .byte 0xb
          .byte 0x36
          .byte 0x98
          .byte 0xd4
          .byte 0x81
          .byte 0xcf
          .byte 0xa6
          .byte 0xf5
          .byte 0xde
          .byte 0x28
          .byte 0xa5
          .byte 0x7a
          .byte 0x8e
          .byte 0x26
          .byte 0xda
          .byte 0xb7
          .byte 0xbf
          .byte 0xa4
          .byte 0x3f
          .byte 0xad
          .byte 0x9d
          .byte 0xe4
          .byte 0x2c
          .byte 0x3a
          .byte 0x92
          .byte 0xd
          .byte 0x50
          .byte 0x78
          .byte 0xcc
          .byte 0x9b
          .byte 0x6a
          .byte 0x5f
          .byte 0x46
          .byte 0x62
          .byte 0x54
          .byte 0x7e
          .byte 0x13
          .byte 0xc2
          .byte 0xf6
          .byte 0x8d
          .byte 0xb8
          .byte 0xe8
          .byte 0x90
          .byte 0xd8
          .byte 0xf7
          .byte 0x5e
          .byte 0x2e
          .byte 0x39
          .byte 0xaf
          .byte 0xf5
          .byte 0x82
          .byte 0xc3
          .byte 0x80
          .byte 0xbe
          .byte 0x9f
          .byte 0x5d
          .byte 0x93
          .byte 0x7c
          .byte 0x69
          .byte 0xd0
          .byte 0x2d
          .byte 0xa9
          .byte 0x6f
          .byte 0xd5
          .byte 0x12
          .byte 0xb3
          .byte 0xcf
          .byte 0x25
          .byte 0x99
          .byte 0x3b
          .byte 0xc8
          .byte 0xac
          .byte 0x7d
          .byte 0xa7
          .byte 0x10
          .byte 0x18
          .byte 0x63
          .byte 0x6e
          .byte 0xe8
          .byte 0x9c
          .byte 0xbb
          .byte 0x7b
          .byte 0xdb
          .byte 0x3b
          .byte 0x78
          .byte 0x9
          .byte 0xcd
          .byte 0x26
          .byte 0x18
          .byte 0xf4
          .byte 0x6e
          .byte 0x59
          .byte 0xb7
          .byte 0x1
          .byte 0xec
          .byte 0x9a
          .byte 0x9a
          .byte 0xa8
          .byte 0x83
          .byte 0x4f
          .byte 0x6e
          .byte 0x65
          .byte 0xe6
          .byte 0x95
          .byte 0xe6
          .byte 0x7e
          .byte 0xaa
          .byte 0xff
          .byte 0xcf
          .byte 0x8
          .byte 0x21
          .byte 0xbc
          .byte 0xe8
          .byte 0xe6
          .byte 0xef
          .byte 0x15
          .byte 0x9b
          .byte 0xd9
          .byte 0xba
          .byte 0xe7
          .byte 0x36
          .byte 0xce
          .byte 0x4a
          .byte 0x6f
          .byte 0x9
          .byte 0xd4
          .byte 0xea
          .byte 0x9f
          .byte 0x7c
          .byte 0xd6
          .byte 0x29
          .byte 0xb0
          .byte 0xb2
          .byte 0xaf
          .byte 0x31
          .byte 0xa4
          .byte 0x23
          .byte 0x31
          .byte 0x2a
          .byte 0x3f
          .byte 0x94
          .byte 0x30
          .byte 0xc6
          .byte 0xa5
          .byte 0x66
          .byte 0xc0
          .byte 0x35
          .byte 0xa2
          .byte 0xbc
          .byte 0x37
          .byte 0x74
          .byte 0x4e
          .byte 0xca
          .byte 0xa6
          .byte 0xfc
          .byte 0x82
          .byte 0xd0
          .byte 0xb0
          .byte 0xe0
          .byte 0x90
          .byte 0xd8
          .byte 0x15
          .byte 0x33
          .byte 0xa7
          .byte 0x98
          .byte 0x4a
          .byte 0xf1
          .byte 0x4
          .byte 0xda
          .byte 0xf7
          .byte 0x41
          .byte 0xec
          .byte 0x50
          .byte 0xe
          .byte 0x7f
          .byte 0xcd
          .byte 0xf6
          .byte 0x2f
          .byte 0x17
          .byte 0x91
          .byte 0xd6
          .byte 0x8d
          .byte 0x76
          .byte 0x4d
          .byte 0xb0
          .byte 0x4d
          .byte 0x43
          .byte 0xef
          .byte 0x4d
          .byte 0x54
          .byte 0xcc
          .byte 0xaa
          .byte 0x4
          .byte 0xdf
          .byte 0xe4
          .byte 0x96
          .byte 0xb5
          .byte 0xe3
          .byte 0x9e
          .byte 0xd1
          .byte 0x88
          .byte 0x1b
          .byte 0x4c
          .byte 0x6a
          .byte 0x1f
          .byte 0xb8
          .byte 0xc1
          .byte 0x2c
          .byte 0x51
          .byte 0x7f
          .byte 0x46
          .byte 0x65
          .byte 0xea
          .byte 0x4
          .byte 0x9d
          .byte 0x5e
          .byte 0x35
          .byte 0x5d
          .byte 0x1
          .byte 0x8c
          .byte 0x74
          .byte 0x73
          .byte 0xfa
          .byte 0x87
          .byte 0x41
          .byte 0x2e
          .byte 0xfb
          .byte 0xb
          .byte 0x1d
          .byte 0x5a
          .byte 0xb3
          .byte 0x67
          .byte 0xd2
          .byte 0x52
          .byte 0x92
          .byte 0xdb
          .byte 0x56
          .byte 0x33
          .byte 0xe9
          .byte 0x10
          .byte 0x47
          .byte 0x13
          .byte 0x6d
          .byte 0xd6
          .byte 0x61
          .byte 0x8c
          .byte 0x9a
          .byte 0xd7
          .byte 0xc
          .byte 0x7a
          .byte 0x37
          .byte 0xa1
          .byte 0x14
          .byte 0x8e
          .byte 0x59
          .byte 0xf8
          .byte 0x3c
          .byte 0x89
          .byte 0xeb
          .byte 0x13
          .byte 0x27
          .byte 0xee
          .byte 0xce
          .byte 0xa9
          .byte 0xc9
          .byte 0x35
          .byte 0xb7
          .byte 0x61
          .byte 0xe5
          .byte 0xed
          .byte 0xe1
          .byte 0x1c
          .byte 0xb1
          .byte 0x3c
          .byte 0x7a
          .byte 0x47
          .byte 0xdf
          .byte 0x59
          .byte 0x9c
          .byte 0xd2
          .byte 0x73
          .byte 0x3f
          .byte 0x55
          .byte 0xf2
          .byte 0xce
          .byte 0x79
          .byte 0x18
          .byte 0x14
          .byte 0x37
          .byte 0xbf
          .byte 0x73
          .byte 0xc7
          .byte 0xcd
          .byte 0xea
          .byte 0x53
          .byte 0xf7
          .byte 0xaa
          .byte 0x5b
          .byte 0x5f
          .byte 0xfd
          .byte 0x6f
          .byte 0x14
          .byte 0xdf
          .byte 0x3d
          .byte 0xdb
          .byte 0x86
          .byte 0x78
          .byte 0x44
          .byte 0xf3
          .byte 0x81
          .byte 0xca
          .byte 0xaf
          .byte 0xc4
          .byte 0x3e
          .byte 0xb9
          .byte 0x68
          .byte 0x34
          .byte 0x2c
          .byte 0x38
          .byte 0x24
          .byte 0x40
          .byte 0x5f
          .byte 0xc2
          .byte 0xa3
          .byte 0xc3
          .byte 0x72
          .byte 0x16
          .byte 0x1d
          .byte 0x25
          .byte 0xc
          .byte 0xbc
          .byte 0xe2
          .byte 0x49
          .byte 0x8b
          .byte 0x28
          .byte 0x3c
          .byte 0x95
          .byte 0x41
          .byte 0xff
          .byte 0xd
          .byte 0x1
          .byte 0x71
          .byte 0x39
          .byte 0xa8
          .byte 0xb3
          .byte 0xde
          .byte 0x8
          .byte 0xc
          .byte 0xe4
          .byte 0x9c
          .byte 0xd8
          .byte 0xb4
          .byte 0xc1
          .byte 0x90
          .byte 0x64
          .byte 0x56
          .byte 0x84
          .byte 0x61
          .byte 0x7b
          .byte 0xcb
          .byte 0xb6
          .byte 0x70
          .byte 0xd5
          .byte 0x32
          .byte 0x5c
          .byte 0x74
          .byte 0x48
          .byte 0x6c
          .byte 0x57
          .byte 0x42
          .byte 0xd0
          .byte 0xb8
.L_45b720:
          .byte 0x50
          .byte 0x51
          .byte 0xf4
          .byte 0xa7
          .byte 0x53
          .byte 0x7e
          .byte 0x41
          .byte 0x65
          .byte 0xc3
          .byte 0x1a
          .byte 0x17
          .byte 0xa4
          .byte 0x96
          .byte 0x3a
          .byte 0x27
          .byte 0x5e
          .byte 0xcb
          .byte 0x3b
          .byte 0xab
          .byte 0x6b
          .byte 0xf1
          .byte 0x1f
          .byte 0x9d
          .byte 0x45
          .byte 0xab
          .byte 0xac
          .byte 0xfa
          .byte 0x58
          .byte 0x93
          .byte 0x4b
          .byte 0xe3
          .byte 0x3
          .byte 0x55
          .byte 0x20
          .byte 0x30
          .byte 0xfa
          .byte 0xf6
          .byte 0xad
          .byte 0x76
          .byte 0x6d
          .byte 0x91
          .byte 0x88
          .byte 0xcc
          .byte 0x76
          .byte 0x25
          .byte 0xf5
          .byte 0x2
          .byte 0x4c
          .byte 0xfc
          .byte 0x4f
          .byte 0xe5
          .byte 0xd7
          .byte 0xd7
          .byte 0xc5
          .byte 0x2a
          .byte 0xcb
          .byte 0x80
          .byte 0x26
          .byte 0x35
          .byte 0x44
          .byte 0x8f
          .byte 0xb5
          .byte 0x62
          .byte 0xa3
          .byte 0x49
          .byte 0xde
          .byte 0xb1
          .byte 0x5a
          .byte 0x67
          .byte 0x25
          .byte 0xba
          .byte 0x1b
          .byte 0x98
          .byte 0x45
          .byte 0xea
          .byte 0xe
          .byte 0xe1
          .byte 0x5d
          .byte 0xfe
          .byte 0xc0
          .byte 0x2
          .byte 0xc3
          .byte 0x2f
          .byte 0x75
          .byte 0x12
          .byte 0x81
          .byte 0x4c
          .byte 0xf0
          .byte 0xa3
          .byte 0x8d
          .byte 0x46
          .byte 0x97
          .byte 0xc6
          .byte 0x6b
          .byte 0xd3
          .byte 0xf9
          .byte 0xe7
          .byte 0x3
          .byte 0x8f
          .byte 0x5f
          .byte 0x95
          .byte 0x15
          .byte 0x92
          .byte 0x9c
          .byte 0xeb
          .byte 0xbf
          .byte 0x6d
          .byte 0x7a
          .byte 0xda
          .byte 0x95
          .byte 0x52
          .byte 0x59
          .byte 0x2d
          .byte 0xd4
          .byte 0xbe
          .byte 0x83
          .byte 0xd3
          .byte 0x58
          .byte 0x74
          .byte 0x21
          .byte 0x29
          .byte 0x49
          .byte 0xe0
          .byte 0x69
          .byte 0x44
          .byte 0x8e
          .byte 0xc9
          .byte 0xc8
          .byte 0x6a
          .byte 0x75
          .byte 0xc2
          .byte 0x89
          .byte 0x78
          .byte 0xf4
          .byte 0x8e
          .byte 0x79
          .byte 0x6b
          .byte 0x99
          .byte 0x58
          .byte 0x3e
          .byte 0xdd
          .byte 0x27
          .byte 0xb9
          .byte 0x71
          .byte 0xb6
          .byte 0xbe
          .byte 0xe1
          .byte 0x4f
          .byte 0x17
          .byte 0xf0
          .byte 0x88
          .byte 0xad
          .byte 0x66
          .byte 0xc9
          .byte 0x20
          .byte 0xac
          .byte 0xb4
          .byte 0x7d
          .byte 0xce
          .byte 0x3a
          .byte 0x18
          .byte 0x63
          .byte 0xdf
          .byte 0x4a
          .byte 0x82
          .byte 0xe5
          .byte 0x1a
          .byte 0x31
          .byte 0x60
          .byte 0x97
          .byte 0x51
          .byte 0x33
          .byte 0x45
          .byte 0x62
          .byte 0x53
          .byte 0x7f
          .byte 0xe0
          .byte 0xb1
          .byte 0x64
          .byte 0x77
          .byte 0x84
          .byte 0xbb
          .byte 0x6b
          .byte 0xae
          .byte 0x1c
          .byte 0xfe
          .byte 0x81
          .byte 0xa0
          .byte 0x94
          .byte 0xf9
          .byte 0x8
          .byte 0x2b
          .byte 0x58
          .byte 0x70
          .byte 0x48
          .byte 0x68
          .byte 0x19
          .byte 0x8f
          .byte 0x45
          .byte 0xfd
          .byte 0x87
          .byte 0x94
          .byte 0xde
          .byte 0x6c
          .byte 0xb7
          .byte 0x52
          .byte 0x7b
          .byte 0xf8
          .byte 0x23
          .byte 0xab
          .byte 0x73
          .byte 0xd3
          .byte 0xe2
          .byte 0x72
          .byte 0x4b
          .byte 0x2
          .byte 0x57
          .byte 0xe3
          .byte 0x1f
          .byte 0x8f
          .byte 0x2a
          .byte 0x66
          .byte 0x55
          .byte 0xab
          .byte 0x7
          .byte 0xb2
          .byte 0xeb
          .byte 0x28
          .byte 0x3
          .byte 0x2f
          .byte 0xb5
          .byte 0xc2
          .byte 0x9a
          .byte 0x86
          .byte 0xc5
          .byte 0x7b
          .byte 0xa5
          .byte 0xd3
          .byte 0x37
          .byte 0x8
          .byte 0xf2
          .byte 0x30
          .byte 0x28
          .byte 0x87
          .byte 0xb2
          .byte 0x23
          .byte 0xbf
          .byte 0xa5
          .byte 0xba
          .byte 0x2
          .byte 0x3
          .byte 0x6a
          .byte 0x5c
          .byte 0xed
          .byte 0x16
          .byte 0x82
          .byte 0x2b
          .byte 0x8a
          .byte 0xcf
          .byte 0x1c
          .byte 0x92
          .byte 0xa7
          .byte 0x79
          .byte 0xb4
          .byte 0xf0
          .byte 0xf3
          .byte 0x7
          .byte 0xf2
          .byte 0xa1
          .byte 0x4e
          .byte 0x69
          .byte 0xe2
          .byte 0xcd
          .byte 0x65
          .byte 0xda
          .byte 0xf4
          .byte 0xd5
          .byte 0x6
          .byte 0x5
          .byte 0xbe
          .byte 0x1f
          .byte 0xd1
          .byte 0x34
          .byte 0x62
          .byte 0x8a
          .byte 0xc4
          .byte 0xa6
          .byte 0xfe
          .byte 0x9d
          .byte 0x34
          .byte 0x2e
          .byte 0x53
          .byte 0xa0
          .byte 0xa2
          .byte 0xf3
          .byte 0x55
          .byte 0x32
          .byte 0x5
          .byte 0x8a
          .byte 0xe1
          .byte 0x75
          .byte 0xa4
          .byte 0xf6
          .byte 0xeb
          .byte 0x39
          .byte 0xb
          .byte 0x83
          .byte 0xec
          .byte 0xaa
          .byte 0x40
          .byte 0x60
          .byte 0xef
          .byte 0x6
          .byte 0x5e
          .byte 0x71
          .byte 0x9f
          .byte 0x51
          .byte 0xbd
          .byte 0x6e
          .byte 0x10
          .byte 0xf9
          .byte 0x3e
          .byte 0x21
          .byte 0x8a
          .byte 0x3d
          .byte 0x96
          .byte 0xdd
          .byte 0x6
          .byte 0xae
          .byte 0xdd
          .byte 0x3e
          .byte 0x5
          .byte 0x46
          .byte 0x4d
          .byte 0xe6
          .byte 0xbd
          .byte 0xb5
          .byte 0x91
          .byte 0x54
          .byte 0x8d
          .byte 0x5
          .byte 0x71
          .byte 0xc4
          .byte 0x5d
          .byte 0x6f
          .byte 0x4
          .byte 0x6
          .byte 0xd4
          .byte 0xff
          .byte 0x60
          .byte 0x50
          .byte 0x15
          .byte 0x24
          .byte 0x19
          .byte 0x98
          .byte 0xfb
          .byte 0x97
          .byte 0xd6
          .byte 0xbd
          .byte 0xe9
          .byte 0xcc
          .byte 0x89
          .byte 0x40
          .byte 0x43
          .byte 0x77
          .byte 0x67
          .byte 0xd9
          .byte 0x9e
          .byte 0xbd
          .byte 0xb0
          .byte 0xe8
          .byte 0x42
          .byte 0x88
          .byte 0x7
          .byte 0x89
          .byte 0x8b
          .byte 0x38
          .byte 0xe7
          .byte 0x19
          .byte 0x5b
          .byte 0xdb
          .byte 0x79
          .byte 0xc8
          .byte 0xee
          .byte 0x47
          .byte 0xa1
          .byte 0x7c
          .byte 0xa
          .byte 0xe9
          .byte 0x7c
          .byte 0x42
          .byte 0xf
          .byte 0xc9
          .byte 0xf8
          .byte 0x84
          .byte 0x1e
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x83
          .byte 0x9
          .byte 0x80
          .byte 0x86
          .byte 0x48
          .byte 0x32
          .byte 0x2b
          .byte 0xed
          .byte 0xac
          .byte 0x1e
          .byte 0x11
          .byte 0x70
          .byte 0x4e
          .byte 0x6c
          .byte 0x5a
          .byte 0x72
          .byte 0xfb
          .byte 0xfd
          .byte 0xe
          .byte 0xff
          .byte 0x56
          .byte 0xf
          .byte 0x85
          .byte 0x38
          .byte 0x1e
          .byte 0x3d
          .byte 0xae
          .byte 0xd5
          .byte 0x27
          .byte 0x36
          .byte 0x2d
          .byte 0x39
          .byte 0x64
          .byte 0xa
          .byte 0xf
          .byte 0xd9
          .byte 0x21
          .byte 0x68
          .byte 0x5c
          .byte 0xa6
          .byte 0xd1
          .byte 0x9b
          .byte 0x5b
          .byte 0x54
          .byte 0x3a
          .byte 0x24
          .byte 0x36
          .byte 0x2e
          .byte 0xb1
          .byte 0xc
          .byte 0xa
          .byte 0x67
          .byte 0xf
          .byte 0x93
          .byte 0x57
          .byte 0xe7
          .byte 0xd2
          .byte 0xb4
          .byte 0xee
          .byte 0x96
          .byte 0x9e
          .byte 0x1b
          .byte 0x9b
          .byte 0x91
          .byte 0x4f
          .byte 0x80
          .byte 0xc0
          .byte 0xc5
          .byte 0xa2
          .byte 0x61
          .byte 0xdc
          .byte 0x20
          .byte 0x69
          .byte 0x5a
          .byte 0x77
          .byte 0x4b
          .byte 0x16
          .byte 0x1c
          .byte 0x12
          .byte 0x1a
          .byte 0xa
          .byte 0xe2
          .byte 0x93
          .byte 0xba
          .byte 0xe5
          .byte 0xc0
          .byte 0xa0
          .byte 0x2a
          .byte 0x43
          .byte 0x3c
          .byte 0x22
          .byte 0xe0
          .byte 0x1d
          .byte 0x12
          .byte 0x1b
          .byte 0x17
          .byte 0xb
          .byte 0xe
          .byte 0x9
          .byte 0xd
          .byte 0xad
          .byte 0xf2
          .byte 0x8b
          .byte 0xc7
          .byte 0xb9
          .byte 0x2d
          .byte 0xb6
          .byte 0xa8
          .byte 0xc8
          .byte 0x14
          .byte 0x1e
          .byte 0xa9
          .byte 0x85
          .byte 0x57
          .byte 0xf1
          .byte 0x19
          .byte 0x4c
          .byte 0xaf
          .byte 0x75
          .byte 0x7
          .byte 0xbb
          .byte 0xee
          .byte 0x99
          .byte 0xdd
          .byte 0xfd
          .byte 0xa3
          .byte 0x7f
          .byte 0x60
          .byte 0x9f
          .byte 0xf7
          .byte 0x1
          .byte 0x26
          .byte 0xbc
          .byte 0x5c
          .byte 0x72
          .byte 0xf5
          .byte 0xc5
          .byte 0x44
          .byte 0x66
          .byte 0x3b
          .byte 0x34
          .byte 0x5b
          .byte 0xfb
          .byte 0x7e
          .byte 0x76
          .byte 0x8b
          .byte 0x43
          .byte 0x29
          .byte 0xdc
          .byte 0xcb
          .byte 0x23
          .byte 0xc6
          .byte 0x68
          .byte 0xb6
          .byte 0xed
          .byte 0xfc
          .byte 0x63
          .byte 0xb8
          .byte 0xe4
          .byte 0xf1
          .byte 0xca
          .byte 0xd7
          .byte 0x31
          .byte 0xdc
          .byte 0x10
          .byte 0x42
          .byte 0x63
          .byte 0x85
          .byte 0x40
          .byte 0x13
          .byte 0x97
          .byte 0x22
          .byte 0x20
          .byte 0x84
          .byte 0xc6
          .byte 0x11
          .byte 0x7d
          .byte 0x85
          .byte 0x4a
          .byte 0x24
          .byte 0xf8
          .byte 0xd2
          .byte 0xbb
          .byte 0x3d
          .byte 0x11
          .byte 0xae
          .byte 0xf9
          .byte 0x32
          .byte 0x6d
          .byte 0xc7
          .byte 0x29
          .byte 0xa1
          .byte 0x4b
          .byte 0x1d
          .byte 0x9e
          .byte 0x2f
          .byte 0xf3
          .byte 0xdc
          .byte 0xb2
          .byte 0x30
          .byte 0xec
          .byte 0xd
          .byte 0x86
          .byte 0x52
          .byte 0xd0
          .byte 0x77
          .byte 0xc1
          .byte 0xe3
          .byte 0x6c
          .byte 0x2b
          .byte 0xb3
          .byte 0x16
          .byte 0x99
          .byte 0xa9
          .byte 0x70
          .byte 0xb9
          .byte 0xfa
          .byte 0x11
          .byte 0x94
          .byte 0x48
          .byte 0x22
          .byte 0x47
          .byte 0xe9
          .byte 0x64
          .byte 0xc4
          .byte 0xa8
          .byte 0xfc
          .byte 0x8c
          .byte 0x1a
          .byte 0xa0
          .byte 0xf0
          .byte 0x3f
          .byte 0xd8
          .byte 0x56
          .byte 0x7d
          .byte 0x2c
          .byte 0xef
          .byte 0x22
          .byte 0x33
          .byte 0x90
          .byte 0xc7
          .byte 0x87
          .byte 0x49
          .byte 0x4e
          .byte 0xc1
          .byte 0xd9
          .byte 0x38
          .byte 0xd1
          .byte 0xfe
          .byte 0x8c
          .byte 0xca
          .byte 0xa2
          .byte 0x36
          .byte 0x98
          .byte 0xd4
          .byte 0xb
          .byte 0xcf
          .byte 0xa6
          .byte 0xf5
          .byte 0x81
          .byte 0x28
          .byte 0xa5
          .byte 0x7a
          .byte 0xde
          .byte 0x26
          .byte 0xda
          .byte 0xb7
          .byte 0x8e
          .byte 0xa4
          .byte 0x3f
          .byte 0xad
          .byte 0xbf
          .byte 0xe4
          .byte 0x2c
          .byte 0x3a
          .byte 0x9d
          .byte 0xd
          .byte 0x50
          .byte 0x78
          .byte 0x92
          .byte 0x9b
          .byte 0x6a
          .byte 0x5f
          .byte 0xcc
          .byte 0x62
          .byte 0x54
          .byte 0x7e
          .byte 0x46
          .byte 0xc2
          .byte 0xf6
          .byte 0x8d
          .byte 0x13
          .byte 0xe8
          .byte 0x90
          .byte 0xd8
          .byte 0xb8
          .byte 0x5e
          .byte 0x2e
          .byte 0x39
          .byte 0xf7
          .byte 0xf5
          .byte 0x82
          .byte 0xc3
          .byte 0xaf
          .byte 0xbe
          .byte 0x9f
          .byte 0x5d
          .byte 0x80
          .byte 0x7c
          .byte 0x69
          .byte 0xd0
          .byte 0x93
          .byte 0xa9
          .byte 0x6f
          .byte 0xd5
          .byte 0x2d
          .byte 0xb3
          .byte 0xcf
          .byte 0x25
          .byte 0x12
          .byte 0x3b
          .byte 0xc8
          .byte 0xac
          .byte 0x99
          .byte 0xa7
          .byte 0x10
          .byte 0x18
          .byte 0x7d
          .byte 0x6e
          .byte 0xe8
          .byte 0x9c
          .byte 0x63
          .byte 0x7b
          .byte 0xdb
          .byte 0x3b
          .byte 0xbb
          .byte 0x9
          .byte 0xcd
          .byte 0x26
          .byte 0x78
          .byte 0xf4
          .byte 0x6e
          .byte 0x59
          .byte 0x18
          .byte 0x1
          .byte 0xec
          .byte 0x9a
          .byte 0xb7
          .byte 0xa8
          .byte 0x83
          .byte 0x4f
          .byte 0x9a
          .byte 0x65
          .byte 0xe6
          .byte 0x95
          .byte 0x6e
          .byte 0x7e
          .byte 0xaa
          .byte 0xff
          .byte 0xe6
          .byte 0x8
          .byte 0x21
          .byte 0xbc
          .byte 0xcf
          .byte 0xe6
          .byte 0xef
          .byte 0x15
          .byte 0xe8
          .byte 0xd9
          .byte 0xba
          .byte 0xe7
          .byte 0x9b
          .byte 0xce
          .byte 0x4a
          .byte 0x6f
          .byte 0x36
          .byte 0xd4
          .byte 0xea
          .byte 0x9f
          .byte 0x9
          .byte 0xd6
          .byte 0x29
          .byte 0xb0
          .byte 0x7c
          .byte 0xaf
          .byte 0x31
          .byte 0xa4
          .byte 0xb2
          .byte 0x31
          .byte 0x2a
          .byte 0x3f
          .byte 0x23
          .byte 0x30
          .byte 0xc6
          .byte 0xa5
          .byte 0x94
          .byte 0xc0
          .byte 0x35
          .byte 0xa2
          .byte 0x66
          .byte 0x37
          .byte 0x74
          .byte 0x4e
          .byte 0xbc
          .byte 0xa6
          .byte 0xfc
          .byte 0x82
          .byte 0xca
          .byte 0xb0
          .byte 0xe0
          .byte 0x90
          .byte 0xd0
          .byte 0x15
          .byte 0x33
          .byte 0xa7
          .byte 0xd8
          .byte 0x4a
          .byte 0xf1
          .byte 0x4
          .byte 0x98
          .byte 0xf7
          .byte 0x41
          .byte 0xec
          .byte 0xda
          .byte 0xe
          .byte 0x7f
          .byte 0xcd
          .byte 0x50
          .byte 0x2f
          .byte 0x17
          .byte 0x91
          .byte 0xf6
          .byte 0x8d
          .byte 0x76
          .byte 0x4d
          .byte 0xd6
          .byte 0x4d
          .byte 0x43
          .byte 0xef
          .byte 0xb0
          .byte 0x54
          .byte 0xcc
          .byte 0xaa
          .byte 0x4d
          .byte 0xdf
          .byte 0xe4
          .byte 0x96
          .byte 0x4
          .byte 0xe3
          .byte 0x9e
          .byte 0xd1
          .byte 0xb5
          .byte 0x1b
          .byte 0x4c
          .byte 0x6a
          .byte 0x88
          .byte 0xb8
          .byte 0xc1
          .byte 0x2c
          .byte 0x1f
          .byte 0x7f
          .byte 0x46
          .byte 0x65
          .byte 0x51
          .byte 0x4
          .byte 0x9d
          .byte 0x5e
          .byte 0xea
          .byte 0x5d
          .byte 0x1
          .byte 0x8c
          .byte 0x35
          .byte 0x73
          .byte 0xfa
          .byte 0x87
          .byte 0x74
          .byte 0x2e
          .byte 0xfb
          .byte 0xb
          .byte 0x41
          .byte 0x5a
          .byte 0xb3
          .byte 0x67
          .byte 0x1d
          .byte 0x52
          .byte 0x92
          .byte 0xdb
          .byte 0xd2
          .byte 0x33
          .byte 0xe9
          .byte 0x10
          .byte 0x56
          .byte 0x13
          .byte 0x6d
          .byte 0xd6
          .byte 0x47
          .byte 0x8c
          .byte 0x9a
          .byte 0xd7
          .byte 0x61
          .byte 0x7a
          .byte 0x37
          .byte 0xa1
          .byte 0xc
          .byte 0x8e
          .byte 0x59
          .byte 0xf8
          .byte 0x14
          .byte 0x89
          .byte 0xeb
          .byte 0x13
          .byte 0x3c
          .byte 0xee
          .byte 0xce
          .byte 0xa9
          .byte 0x27
          .byte 0x35
          .byte 0xb7
          .byte 0x61
          .byte 0xc9
          .byte 0xed
          .byte 0xe1
          .byte 0x1c
          .byte 0xe5
          .byte 0x3c
          .byte 0x7a
          .byte 0x47
          .byte 0xb1
          .byte 0x59
          .byte 0x9c
          .byte 0xd2
          .byte 0xdf
          .byte 0x3f
          .byte 0x55
          .byte 0xf2
          .byte 0x73
          .byte 0x79
          .byte 0x18
          .byte 0x14
          .byte 0xce
          .byte 0xbf
          .byte 0x73
          .byte 0xc7
          .byte 0x37
          .byte 0xea
          .byte 0x53
          .byte 0xf7
          .byte 0xcd
          .byte 0x5b
          .byte 0x5f
          .byte 0xfd
          .byte 0xaa
          .byte 0x14
          .byte 0xdf
          .byte 0x3d
          .byte 0x6f
          .byte 0x86
          .byte 0x78
          .byte 0x44
          .byte 0xdb
          .byte 0x81
          .byte 0xca
          .byte 0xaf
          .byte 0xf3
          .byte 0x3e
          .byte 0xb9
          .byte 0x68
          .byte 0xc4
          .byte 0x2c
          .byte 0x38
          .byte 0x24
          .byte 0x34
          .byte 0x5f
          .byte 0xc2
          .byte 0xa3
          .byte 0x40
          .byte 0x72
          .byte 0x16
          .byte 0x1d
          .byte 0xc3
          .byte 0xc
          .byte 0xbc
          .byte 0xe2
          .byte 0x25
          .byte 0x8b
          .byte 0x28
          .byte 0x3c
          .byte 0x49
          .byte 0x41
          .byte 0xff
          .byte 0xd
          .byte 0x95
          .byte 0x71
          .byte 0x39
          .byte 0xa8
          .byte 0x1
          .byte 0xde
          .byte 0x8
          .byte 0xc
          .byte 0xb3
          .byte 0x9c
          .byte 0xd8
          .byte 0xb4
          .byte 0xe4
          .byte 0x90
          .byte 0x64
          .byte 0x56
          .byte 0xc1
          .byte 0x61
          .byte 0x7b
          .byte 0xcb
          .byte 0x84
          .byte 0x70
          .byte 0xd5
          .byte 0x32
          .byte 0xb6
          .byte 0x74
          .byte 0x48
          .byte 0x6c
          .byte 0x5c
          .byte 0x42
          .byte 0xd0
          .byte 0xb8
          .byte 0x57
.L_45bb20:
          .byte 0x51
          .byte 0xf4
          .byte 0xa7
          .byte 0x50
          .byte 0x7e
          .byte 0x41
          .byte 0x65
          .byte 0x53
          .byte 0x1a
          .byte 0x17
          .byte 0xa4
          .byte 0xc3
          .byte 0x3a
          .byte 0x27
          .byte 0x5e
          .byte 0x96
          .byte 0x3b
          .byte 0xab
          .byte 0x6b
          .byte 0xcb
          .byte 0x1f
          .byte 0x9d
          .byte 0x45
          .byte 0xf1
          .byte 0xac
          .byte 0xfa
          .byte 0x58
          .byte 0xab
          .byte 0x4b
          .byte 0xe3
          .byte 0x3
          .byte 0x93
          .byte 0x20
          .byte 0x30
          .byte 0xfa
          .byte 0x55
          .byte 0xad
          .byte 0x76
          .byte 0x6d
          .byte 0xf6
          .byte 0x88
          .byte 0xcc
          .byte 0x76
          .byte 0x91
          .byte 0xf5
          .byte 0x2
          .byte 0x4c
          .byte 0x25
          .byte 0x4f
          .byte 0xe5
          .byte 0xd7
          .byte 0xfc
          .byte 0xc5
          .byte 0x2a
          .byte 0xcb
          .byte 0xd7
          .byte 0x26
          .byte 0x35
          .byte 0x44
          .byte 0x80
          .byte 0xb5
          .byte 0x62
          .byte 0xa3
          .byte 0x8f
          .byte 0xde
          .byte 0xb1
          .byte 0x5a
          .byte 0x49
          .byte 0x25
          .byte 0xba
          .byte 0x1b
          .byte 0x67
          .byte 0x45
          .byte 0xea
          .byte 0xe
          .byte 0x98
          .byte 0x5d
          .byte 0xfe
          .byte 0xc0
          .byte 0xe1
          .byte 0xc3
          .byte 0x2f
          .byte 0x75
          .byte 0x2
          .byte 0x81
          .byte 0x4c
          .byte 0xf0
          .byte 0x12
          .byte 0x8d
          .byte 0x46
          .byte 0x97
          .byte 0xa3
          .byte 0x6b
          .byte 0xd3
          .byte 0xf9
          .byte 0xc6
          .byte 0x3
          .byte 0x8f
          .byte 0x5f
          .byte 0xe7
          .byte 0x15
          .byte 0x92
          .byte 0x9c
          .byte 0x95
          .byte 0xbf
          .byte 0x6d
          .byte 0x7a
          .byte 0xeb
          .byte 0x95
          .byte 0x52
          .byte 0x59
          .byte 0xda
          .byte 0xd4
          .byte 0xbe
          .byte 0x83
          .byte 0x2d
          .byte 0x58
          .byte 0x74
          .byte 0x21
          .byte 0xd3
          .byte 0x49
          .byte 0xe0
          .byte 0x69
          .byte 0x29
          .byte 0x8e
          .byte 0xc9
          .byte 0xc8
          .byte 0x44
          .byte 0x75
          .byte 0xc2
          .byte 0x89
          .byte 0x6a
          .byte 0xf4
          .byte 0x8e
          .byte 0x79
          .byte 0x78
          .byte 0x99
          .byte 0x58
          .byte 0x3e
          .byte 0x6b
          .byte 0x27
          .byte 0xb9
          .byte 0x71
          .byte 0xdd
          .byte 0xbe
          .byte 0xe1
          .byte 0x4f
          .byte 0xb6
          .byte 0xf0
          .byte 0x88
          .byte 0xad
          .byte 0x17
          .byte 0xc9
          .byte 0x20
          .byte 0xac
          .byte 0x66
          .byte 0x7d
          .byte 0xce
          .byte 0x3a
          .byte 0xb4
          .byte 0x63
          .byte 0xdf
          .byte 0x4a
          .byte 0x18
          .byte 0xe5
          .byte 0x1a
          .byte 0x31
          .byte 0x82
          .byte 0x97
          .byte 0x51
          .byte 0x33
          .byte 0x60
          .byte 0x62
          .byte 0x53
          .byte 0x7f
          .byte 0x45
          .byte 0xb1
          .byte 0x64
          .byte 0x77
          .byte 0xe0
          .byte 0xbb
          .byte 0x6b
          .byte 0xae
          .byte 0x84
          .byte 0xfe
          .byte 0x81
          .byte 0xa0
          .byte 0x1c
          .byte 0xf9
          .byte 0x8
          .byte 0x2b
          .byte 0x94
          .byte 0x70
          .byte 0x48
          .byte 0x68
          .byte 0x58
          .byte 0x8f
          .byte 0x45
          .byte 0xfd
          .byte 0x19
          .byte 0x94
          .byte 0xde
          .byte 0x6c
          .byte 0x87
          .byte 0x52
          .byte 0x7b
          .byte 0xf8
          .byte 0xb7
          .byte 0xab
          .byte 0x73
          .byte 0xd3
          .byte 0x23
          .byte 0x72
          .byte 0x4b
          .byte 0x2
          .byte 0xe2
          .byte 0xe3
          .byte 0x1f
          .byte 0x8f
          .byte 0x57
          .byte 0x66
          .byte 0x55
          .byte 0xab
          .byte 0x2a
          .byte 0xb2
          .byte 0xeb
          .byte 0x28
          .byte 0x7
          .byte 0x2f
          .byte 0xb5
          .byte 0xc2
          .byte 0x3
          .byte 0x86
          .byte 0xc5
          .byte 0x7b
          .byte 0x9a
          .byte 0xd3
          .byte 0x37
          .byte 0x8
          .byte 0xa5
          .byte 0x30
          .byte 0x28
          .byte 0x87
          .byte 0xf2
          .byte 0x23
          .byte 0xbf
          .byte 0xa5
          .byte 0xb2
          .byte 0x2
          .byte 0x3
          .byte 0x6a
          .byte 0xba
          .byte 0xed
          .byte 0x16
          .byte 0x82
          .byte 0x5c
          .byte 0x8a
          .byte 0xcf
          .byte 0x1c
          .byte 0x2b
          .byte 0xa7
          .byte 0x79
          .byte 0xb4
          .byte 0x92
          .byte 0xf3
          .byte 0x7
          .byte 0xf2
          .byte 0xf0
          .byte 0x4e
          .byte 0x69
          .byte 0xe2
          .byte 0xa1
          .byte 0x65
          .byte 0xda
          .byte 0xf4
          .byte 0xcd
          .byte 0x6
          .byte 0x5
          .byte 0xbe
          .byte 0xd5
          .byte 0xd1
          .byte 0x34
          .byte 0x62
          .byte 0x1f
          .byte 0xc4
          .byte 0xa6
          .byte 0xfe
          .byte 0x8a
          .byte 0x34
          .byte 0x2e
          .byte 0x53
          .byte 0x9d
          .byte 0xa2
          .byte 0xf3
          .byte 0x55
          .byte 0xa0
          .byte 0x5
          .byte 0x8a
          .byte 0xe1
          .byte 0x32
          .byte 0xa4
          .byte 0xf6
          .byte 0xeb
          .byte 0x75
          .byte 0xb
          .byte 0x83
          .byte 0xec
          .byte 0x39
          .byte 0x40
          .byte 0x60
          .byte 0xef
          .byte 0xaa
          .byte 0x5e
          .byte 0x71
          .byte 0x9f
          .byte 0x6
          .byte 0xbd
          .byte 0x6e
          .byte 0x10
          .byte 0x51
          .byte 0x3e
          .byte 0x21
          .byte 0x8a
          .byte 0xf9
          .byte 0x96
          .byte 0xdd
          .byte 0x6
          .byte 0x3d
          .byte 0xdd
          .byte 0x3e
          .byte 0x5
          .byte 0xae
          .byte 0x4d
          .byte 0xe6
          .byte 0xbd
          .byte 0x46
          .byte 0x91
          .byte 0x54
          .byte 0x8d
          .byte 0xb5
          .byte 0x71
          .byte 0xc4
          .byte 0x5d
          .byte 0x5
          .byte 0x4
          .byte 0x6
          .byte 0xd4
          .byte 0x6f
          .byte 0x60
          .byte 0x50
          .byte 0x15
          .byte 0xff
          .byte 0x19
          .byte 0x98
          .byte 0xfb
          .byte 0x24
          .byte 0xd6
          .byte 0xbd
          .byte 0xe9
          .byte 0x97
          .byte 0x89
          .byte 0x40
          .byte 0x43
          .byte 0xcc
          .byte 0x67
          .byte 0xd9
          .byte 0x9e
          .byte 0x77
          .byte 0xb0
          .byte 0xe8
          .byte 0x42
          .byte 0xbd
          .byte 0x7
          .byte 0x89
          .byte 0x8b
          .byte 0x88
          .byte 0xe7
          .byte 0x19
          .byte 0x5b
          .byte 0x38
          .byte 0x79
          .byte 0xc8
          .byte 0xee
          .byte 0xdb
          .byte 0xa1
          .byte 0x7c
          .byte 0xa
          .byte 0x47
          .byte 0x7c
          .byte 0x42
          .byte 0xf
          .byte 0xe9
          .byte 0xf8
          .byte 0x84
          .byte 0x1e
          .byte 0xc9
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x9
          .byte 0x80
          .byte 0x86
          .byte 0x83
          .byte 0x32
          .byte 0x2b
          .byte 0xed
          .byte 0x48
          .byte 0x1e
          .byte 0x11
          .byte 0x70
          .byte 0xac
          .byte 0x6c
          .byte 0x5a
          .byte 0x72
          .byte 0x4e
          .byte 0xfd
          .byte 0xe
          .byte 0xff
          .byte 0xfb
          .byte 0xf
          .byte 0x85
          .byte 0x38
          .byte 0x56
          .byte 0x3d
          .byte 0xae
          .byte 0xd5
          .byte 0x1e
          .byte 0x36
          .byte 0x2d
          .byte 0x39
          .byte 0x27
          .byte 0xa
          .byte 0xf
          .byte 0xd9
          .byte 0x64
          .byte 0x68
          .byte 0x5c
          .byte 0xa6
          .byte 0x21
          .byte 0x9b
          .byte 0x5b
          .byte 0x54
          .byte 0xd1
          .byte 0x24
          .byte 0x36
          .byte 0x2e
          .byte 0x3a
          .byte 0xc
          .byte 0xa
          .byte 0x67
          .byte 0xb1
          .byte 0x93
          .byte 0x57
          .byte 0xe7
          .byte 0xf
          .byte 0xb4
          .byte 0xee
          .byte 0x96
          .byte 0xd2
          .byte 0x1b
          .byte 0x9b
          .byte 0x91
          .byte 0x9e
          .byte 0x80
          .byte 0xc0
          .byte 0xc5
          .byte 0x4f
          .byte 0x61
          .byte 0xdc
          .byte 0x20
          .byte 0xa2
          .byte 0x5a
          .byte 0x77
          .byte 0x4b
          .byte 0x69
          .byte 0x1c
          .byte 0x12
          .byte 0x1a
          .byte 0x16
          .byte 0xe2
          .byte 0x93
          .byte 0xba
          .byte 0xa
          .byte 0xc0
          .byte 0xa0
          .byte 0x2a
          .byte 0xe5
          .byte 0x3c
          .byte 0x22
          .byte 0xe0
          .byte 0x43
          .byte 0x12
          .byte 0x1b
          .byte 0x17
          .byte 0x1d
          .byte 0xe
          .byte 0x9
          .byte 0xd
          .byte 0xb
          .byte 0xf2
          .byte 0x8b
          .byte 0xc7
          .byte 0xad
          .byte 0x2d
          .byte 0xb6
          .byte 0xa8
          .byte 0xb9
          .byte 0x14
          .byte 0x1e
          .byte 0xa9
          .byte 0xc8
          .byte 0x57
          .byte 0xf1
          .byte 0x19
          .byte 0x85
          .byte 0xaf
          .byte 0x75
          .byte 0x7
          .byte 0x4c
          .byte 0xee
          .byte 0x99
          .byte 0xdd
          .byte 0xbb
          .byte 0xa3
          .byte 0x7f
          .byte 0x60
          .byte 0xfd
          .byte 0xf7
          .byte 0x1
          .byte 0x26
          .byte 0x9f
          .byte 0x5c
          .byte 0x72
          .byte 0xf5
          .byte 0xbc
          .byte 0x44
          .byte 0x66
          .byte 0x3b
          .byte 0xc5
          .byte 0x5b
          .byte 0xfb
          .byte 0x7e
          .byte 0x34
          .byte 0x8b
          .byte 0x43
          .byte 0x29
          .byte 0x76
          .byte 0xcb
          .byte 0x23
          .byte 0xc6
          .byte 0xdc
          .byte 0xb6
          .byte 0xed
          .byte 0xfc
          .byte 0x68
          .byte 0xb8
          .byte 0xe4
          .byte 0xf1
          .byte 0x63
          .byte 0xd7
          .byte 0x31
          .byte 0xdc
          .byte 0xca
          .byte 0x42
          .byte 0x63
          .byte 0x85
          .byte 0x10
          .byte 0x13
          .byte 0x97
          .byte 0x22
          .byte 0x40
          .byte 0x84
          .byte 0xc6
          .byte 0x11
          .byte 0x20
          .byte 0x85
          .byte 0x4a
          .byte 0x24
          .byte 0x7d
          .byte 0xd2
          .byte 0xbb
          .byte 0x3d
          .byte 0xf8
          .byte 0xae
          .byte 0xf9
          .byte 0x32
          .byte 0x11
          .byte 0xc7
          .byte 0x29
          .byte 0xa1
          .byte 0x6d
          .byte 0x1d
          .byte 0x9e
          .byte 0x2f
          .byte 0x4b
          .byte 0xdc
          .byte 0xb2
          .byte 0x30
          .byte 0xf3
          .byte 0xd
          .byte 0x86
          .byte 0x52
          .byte 0xec
          .byte 0x77
          .byte 0xc1
          .byte 0xe3
          .byte 0xd0
          .byte 0x2b
          .byte 0xb3
          .byte 0x16
          .byte 0x6c
          .byte 0xa9
          .byte 0x70
          .byte 0xb9
          .byte 0x99
          .byte 0x11
          .byte 0x94
          .byte 0x48
          .byte 0xfa
          .byte 0x47
          .byte 0xe9
          .byte 0x64
          .byte 0x22
          .byte 0xa8
          .byte 0xfc
          .byte 0x8c
          .byte 0xc4
          .byte 0xa0
          .byte 0xf0
          .byte 0x3f
          .byte 0x1a
          .byte 0x56
          .byte 0x7d
          .byte 0x2c
          .byte 0xd8
          .byte 0x22
          .byte 0x33
          .byte 0x90
          .byte 0xef
          .byte 0x87
          .byte 0x49
          .byte 0x4e
          .byte 0xc7
          .byte 0xd9
          .byte 0x38
          .byte 0xd1
          .byte 0xc1
          .byte 0x8c
          .byte 0xca
          .byte 0xa2
          .byte 0xfe
          .byte 0x98
          .byte 0xd4
          .byte 0xb
          .byte 0x36
          .byte 0xa6
          .byte 0xf5
          .byte 0x81
          .byte 0xcf
          .byte 0xa5
          .byte 0x7a
          .byte 0xde
          .byte 0x28
          .byte 0xda
          .byte 0xb7
          .byte 0x8e
          .byte 0x26
          .byte 0x3f
          .byte 0xad
          .byte 0xbf
          .byte 0xa4
          .byte 0x2c
          .byte 0x3a
          .byte 0x9d
          .byte 0xe4
          .byte 0x50
          .byte 0x78
          .byte 0x92
          .byte 0xd
          .byte 0x6a
          .byte 0x5f
          .byte 0xcc
          .byte 0x9b
          .byte 0x54
          .byte 0x7e
          .byte 0x46
          .byte 0x62
          .byte 0xf6
          .byte 0x8d
          .byte 0x13
          .byte 0xc2
          .byte 0x90
          .byte 0xd8
          .byte 0xb8
          .byte 0xe8
          .byte 0x2e
          .byte 0x39
          .byte 0xf7
          .byte 0x5e
          .byte 0x82
          .byte 0xc3
          .byte 0xaf
          .byte 0xf5
          .byte 0x9f
          .byte 0x5d
          .byte 0x80
          .byte 0xbe
          .byte 0x69
          .byte 0xd0
          .byte 0x93
          .byte 0x7c
          .byte 0x6f
          .byte 0xd5
          .byte 0x2d
          .byte 0xa9
          .byte 0xcf
          .byte 0x25
          .byte 0x12
          .byte 0xb3
          .byte 0xc8
          .byte 0xac
          .byte 0x99
          .byte 0x3b
          .byte 0x10
          .byte 0x18
          .byte 0x7d
          .byte 0xa7
          .byte 0xe8
          .byte 0x9c
          .byte 0x63
          .byte 0x6e
          .byte 0xdb
          .byte 0x3b
          .byte 0xbb
          .byte 0x7b
          .byte 0xcd
          .byte 0x26
          .byte 0x78
          .byte 0x9
          .byte 0x6e
          .byte 0x59
          .byte 0x18
          .byte 0xf4
          .byte 0xec
          .byte 0x9a
          .byte 0xb7
          .byte 0x1
          .byte 0x83
          .byte 0x4f
          .byte 0x9a
          .byte 0xa8
          .byte 0xe6
          .byte 0x95
          .byte 0x6e
          .byte 0x65
          .byte 0xaa
          .byte 0xff
          .byte 0xe6
          .byte 0x7e
          .byte 0x21
          .byte 0xbc
          .byte 0xcf
          .byte 0x8
          .byte 0xef
          .byte 0x15
          .byte 0xe8
          .byte 0xe6
          .byte 0xba
          .byte 0xe7
          .byte 0x9b
          .byte 0xd9
          .byte 0x4a
          .byte 0x6f
          .byte 0x36
          .byte 0xce
          .byte 0xea
          .byte 0x9f
          .byte 0x9
          .byte 0xd4
          .byte 0x29
          .byte 0xb0
          .byte 0x7c
          .byte 0xd6
          .byte 0x31
          .byte 0xa4
          .byte 0xb2
          .byte 0xaf
          .byte 0x2a
          .byte 0x3f
          .byte 0x23
          .byte 0x31
          .byte 0xc6
          .byte 0xa5
          .byte 0x94
          .byte 0x30
          .byte 0x35
          .byte 0xa2
          .byte 0x66
          .byte 0xc0
          .byte 0x74
          .byte 0x4e
          .byte 0xbc
          .byte 0x37
          .byte 0xfc
          .byte 0x82
          .byte 0xca
          .byte 0xa6
          .byte 0xe0
          .byte 0x90
          .byte 0xd0
          .byte 0xb0
          .byte 0x33
          .byte 0xa7
          .byte 0xd8
          .byte 0x15
          .byte 0xf1
          .byte 0x4
          .byte 0x98
          .byte 0x4a
          .byte 0x41
          .byte 0xec
          .byte 0xda
          .byte 0xf7
          .byte 0x7f
          .byte 0xcd
          .byte 0x50
          .byte 0xe
          .byte 0x17
          .byte 0x91
          .byte 0xf6
          .byte 0x2f
          .byte 0x76
          .byte 0x4d
          .byte 0xd6
          .byte 0x8d
          .byte 0x43
          .byte 0xef
          .byte 0xb0
          .byte 0x4d
          .byte 0xcc
          .byte 0xaa
          .byte 0x4d
          .byte 0x54
          .byte 0xe4
          .byte 0x96
          .byte 0x4
          .byte 0xdf
          .byte 0x9e
          .byte 0xd1
          .byte 0xb5
          .byte 0xe3
          .byte 0x4c
          .byte 0x6a
          .byte 0x88
          .byte 0x1b
          .byte 0xc1
          .byte 0x2c
          .byte 0x1f
          .byte 0xb8
          .byte 0x46
          .byte 0x65
          .byte 0x51
          .byte 0x7f
          .byte 0x9d
          .byte 0x5e
          .byte 0xea
          .byte 0x4
          .byte 0x1
          .byte 0x8c
          .byte 0x35
          .byte 0x5d
          .byte 0xfa
          .byte 0x87
          .byte 0x74
          .byte 0x73
          .byte 0xfb
          .byte 0xb
          .byte 0x41
          .byte 0x2e
          .byte 0xb3
          .byte 0x67
          .byte 0x1d
          .byte 0x5a
          .byte 0x92
          .byte 0xdb
          .byte 0xd2
          .byte 0x52
          .byte 0xe9
          .byte 0x10
          .byte 0x56
          .byte 0x33
          .byte 0x6d
          .byte 0xd6
          .byte 0x47
          .byte 0x13
          .byte 0x9a
          .byte 0xd7
          .byte 0x61
          .byte 0x8c
          .byte 0x37
          .byte 0xa1
          .byte 0xc
          .byte 0x7a
          .byte 0x59
          .byte 0xf8
          .byte 0x14
          .byte 0x8e
          .byte 0xeb
          .byte 0x13
          .byte 0x3c
          .byte 0x89
          .byte 0xce
          .byte 0xa9
          .byte 0x27
          .byte 0xee
          .byte 0xb7
          .byte 0x61
          .byte 0xc9
          .byte 0x35
          .byte 0xe1
          .byte 0x1c
          .byte 0xe5
          .byte 0xed
          .byte 0x7a
          .byte 0x47
          .byte 0xb1
          .byte 0x3c
          .byte 0x9c
          .byte 0xd2
          .byte 0xdf
          .byte 0x59
          .byte 0x55
          .byte 0xf2
          .byte 0x73
          .byte 0x3f
          .byte 0x18
          .byte 0x14
          .byte 0xce
          .byte 0x79
          .byte 0x73
          .byte 0xc7
          .byte 0x37
          .byte 0xbf
          .byte 0x53
          .byte 0xf7
          .byte 0xcd
          .byte 0xea
          .byte 0x5f
          .byte 0xfd
          .byte 0xaa
          .byte 0x5b
          .byte 0xdf
          .byte 0x3d
          .byte 0x6f
          .byte 0x14
          .byte 0x78
          .byte 0x44
          .byte 0xdb
          .byte 0x86
          .byte 0xca
          .byte 0xaf
          .byte 0xf3
          .byte 0x81
          .byte 0xb9
          .byte 0x68
          .byte 0xc4
          .byte 0x3e
          .byte 0x38
          .byte 0x24
          .byte 0x34
          .byte 0x2c
          .byte 0xc2
          .byte 0xa3
          .byte 0x40
          .byte 0x5f
          .byte 0x16
          .byte 0x1d
          .byte 0xc3
          .byte 0x72
          .byte 0xbc
          .byte 0xe2
          .byte 0x25
          .byte 0xc
          .byte 0x28
          .byte 0x3c
          .byte 0x49
          .byte 0x8b
          .byte 0xff
          .byte 0xd
          .byte 0x95
          .byte 0x41
          .byte 0x39
          .byte 0xa8
          .byte 0x1
          .byte 0x71
          .byte 0x8
          .byte 0xc
          .byte 0xb3
          .byte 0xde
          .byte 0xd8
          .byte 0xb4
          .byte 0xe4
          .byte 0x9c
          .byte 0x64
          .byte 0x56
          .byte 0xc1
          .byte 0x90
          .byte 0x7b
          .byte 0xcb
          .byte 0x84
          .byte 0x61
          .byte 0xd5
          .byte 0x32
          .byte 0xb6
          .byte 0x70
          .byte 0x48
          .byte 0x6c
          .byte 0x5c
          .byte 0x74
          .byte 0xd0
          .byte 0xb8
          .byte 0x57
          .byte 0x42
.L_45bf20:
          .byte 0x52
          .byte 0x9
          .byte 0x6a
          .byte 0xd5
          .byte 0x30
          .byte 0x36
          .byte 0xa5
          .byte 0x38
          .byte 0xbf
          .byte 0x40
          .byte 0xa3
          .byte 0x9e
          .byte 0x81
          .byte 0xf3
          .byte 0xd7
          .byte 0xfb
          .byte 0x7c
          .byte 0xe3
          .byte 0x39
          .byte 0x82
          .byte 0x9b
          .byte 0x2f
          .byte 0xff
          .byte 0x87
          .byte 0x34
          .byte 0x8e
          .byte 0x43
          .byte 0x44
          .byte 0xc4
          .byte 0xde
          .byte 0xe9
          .byte 0xcb
          .byte 0x54
          .byte 0x7b
          .byte 0x94
          .byte 0x32
          .byte 0xa6
          .byte 0xc2
          .byte 0x23
          .byte 0x3d
          .byte 0xee
          .byte 0x4c
          .byte 0x95
          .byte 0xb
          .byte 0x42
          .byte 0xfa
          .byte 0xc3
          .byte 0x4e
          .byte 0x8
          .byte 0x2e
          .byte 0xa1
          .byte 0x66
          .byte 0x28
          .byte 0xd9
          .byte 0x24
          .byte 0xb2
          .byte 0x76
          .byte 0x5b
          .byte 0xa2
          .byte 0x49
          .byte 0x6d
          .byte 0x8b
          .byte 0xd1
          .byte 0x25
          .byte 0x72
          .byte 0xf8
          .byte 0xf6
          .byte 0x64
          .byte 0x86
          .byte 0x68
          .byte 0x98
          .byte 0x16
          .byte 0xd4
          .byte 0xa4
          .byte 0x5c
          .byte 0xcc
          .byte 0x5d
          .byte 0x65
          .byte 0xb6
          .byte 0x92
          .byte 0x6c
          .byte 0x70
          .byte 0x48
          .byte 0x50
          .byte 0xfd
          .byte 0xed
          .byte 0xb9
          .byte 0xda
          .byte 0x5e
          .byte 0x15
          .byte 0x46
          .byte 0x57
          .byte 0xa7
          .byte 0x8d
          .byte 0x9d
          .byte 0x84
          .byte 0x90
          .byte 0xd8
          .byte 0xab
          .byte 0x0
          .byte 0x8c
          .byte 0xbc
          .byte 0xd3
          .byte 0xa
          .byte 0xf7
          .byte 0xe4
          .byte 0x58
          .byte 0x5
          .byte 0xb8
          .byte 0xb3
          .byte 0x45
          .byte 0x6
          .byte 0xd0
          .byte 0x2c
          .byte 0x1e
          .byte 0x8f
          .byte 0xca
          .byte 0x3f
          .byte 0xf
          .byte 0x2
          .byte 0xc1
          .byte 0xaf
          .byte 0xbd
          .byte 0x3
          .byte 0x1
          .byte 0x13
          .byte 0x8a
          .byte 0x6b
          .byte 0x3a
          .byte 0x91
          .byte 0x11
          .byte 0x41
          .byte 0x4f
          .byte 0x67
          .byte 0xdc
          .byte 0xea
          .byte 0x97
          .byte 0xf2
          .byte 0xcf
          .byte 0xce
          .byte 0xf0
          .byte 0xb4
          .byte 0xe6
          .byte 0x73
          .byte 0x96
          .byte 0xac
          .byte 0x74
          .byte 0x22
          .byte 0xe7
          .byte 0xad
          .byte 0x35
          .byte 0x85
          .byte 0xe2
          .byte 0xf9
          .byte 0x37
          .byte 0xe8
          .byte 0x1c
          .byte 0x75
          .byte 0xdf
          .byte 0x6e
          .byte 0x47
          .byte 0xf1
          .byte 0x1a
          .byte 0x71
          .byte 0x1d
          .byte 0x29
          .byte 0xc5
          .byte 0x89
          .byte 0x6f
          .byte 0xb7
          .byte 0x62
          .byte 0xe
          .byte 0xaa
          .byte 0x18
          .byte 0xbe
          .byte 0x1b
          .byte 0xfc
          .byte 0x56
          .byte 0x3e
          .byte 0x4b
          .byte 0xc6
          .byte 0xd2
          .byte 0x79
          .byte 0x20
          .byte 0x9a
          .byte 0xdb
          .byte 0xc0
          .byte 0xfe
          .byte 0x78
          .byte 0xcd
          .byte 0x5a
          .byte 0xf4
          .byte 0x1f
          .byte 0xdd
          .byte 0xa8
          .byte 0x33
          .byte 0x88
          .byte 0x7
          .byte 0xc7
          .byte 0x31
          .byte 0xb1
          .byte 0x12
          .byte 0x10
          .byte 0x59
          .byte 0x27
          .byte 0x80
          .byte 0xec
          .byte 0x5f
          .byte 0x60
          .byte 0x51
          .byte 0x7f
          .byte 0xa9
          .byte 0x19
          .byte 0xb5
          .byte 0x4a
          .byte 0xd
          .byte 0x2d
          .byte 0xe5
          .byte 0x7a
          .byte 0x9f
          .byte 0x93
          .byte 0xc9
          .byte 0x9c
          .byte 0xef
          .byte 0xa0
          .byte 0xe0
          .byte 0x3b
          .byte 0x4d
          .byte 0xae
          .byte 0x2a
          .byte 0xf5
          .byte 0xb0
          .byte 0xc8
          .byte 0xeb
          .byte 0xbb
          .byte 0x3c
          .byte 0x83
          .byte 0x53
          .byte 0x99
          .byte 0x61
          .byte 0x17
          .byte 0x2b
          .byte 0x4
          .byte 0x7e
          .byte 0xba
          .byte 0x77
          .byte 0xd6
          .byte 0x26
          .byte 0xe1
          .byte 0x69
          .byte 0x14
          .byte 0x63
          .byte 0x55
          .byte 0x21
          .byte 0xc
          .byte 0x7d
.L_45c020:
          .byte 0x63
          .byte 0x63
          .byte 0xa5
          .byte 0xc6
          .byte 0x7c
          .byte 0x7c
          .byte 0x84
          .byte 0xf8
          .byte 0x77
          .byte 0x77
          .byte 0x99
          .byte 0xee
          .byte 0x7b
          .byte 0x7b
          .byte 0x8d
          .byte 0xf6
          .byte 0xf2
          .byte 0xf2
          .byte 0xd
          .byte 0xff
          .byte 0x6b
          .byte 0x6b
          .byte 0xbd
          .byte 0xd6
          .byte 0x6f
          .byte 0x6f
          .byte 0xb1
          .byte 0xde
          .byte 0xc5
          .byte 0xc5
          .byte 0x54
          .byte 0x91
          .byte 0x30
          .byte 0x30
          .byte 0x50
          .byte 0x60
          .byte 0x1
          .byte 0x1
          .byte 0x3
          .byte 0x2
          .byte 0x67
          .byte 0x67
          .byte 0xa9
          .byte 0xce
          .byte 0x2b
          .byte 0x2b
          .byte 0x7d
          .byte 0x56
          .byte 0xfe
          .byte 0xfe
          .byte 0x19
          .byte 0xe7
          .byte 0xd7
          .byte 0xd7
          .byte 0x62
          .byte 0xb5
          .byte 0xab
          .byte 0xab
          .byte 0xe6
          .byte 0x4d
          .byte 0x76
          .byte 0x76
          .byte 0x9a
          .byte 0xec
          .byte 0xca
          .byte 0xca
          .byte 0x45
          .byte 0x8f
          .byte 0x82
          .byte 0x82
          .byte 0x9d
          .byte 0x1f
          .byte 0xc9
          .byte 0xc9
          .byte 0x40
          .byte 0x89
          .byte 0x7d
          .byte 0x7d
          .byte 0x87
          .byte 0xfa
          .byte 0xfa
          .byte 0xfa
          .byte 0x15
          .byte 0xef
          .byte 0x59
          .byte 0x59
          .byte 0xeb
          .byte 0xb2
          .byte 0x47
          .byte 0x47
          .byte 0xc9
          .byte 0x8e
          .byte 0xf0
          .byte 0xf0
          .byte 0xb
          .byte 0xfb
          .byte 0xad
          .byte 0xad
          .byte 0xec
          .byte 0x41
          .byte 0xd4
          .byte 0xd4
          .byte 0x67
          .byte 0xb3
          .byte 0xa2
          .byte 0xa2
          .byte 0xfd
          .byte 0x5f
          .byte 0xaf
          .byte 0xaf
          .byte 0xea
          .byte 0x45
          .byte 0x9c
          .byte 0x9c
          .byte 0xbf
          .byte 0x23
          .byte 0xa4
          .byte 0xa4
          .byte 0xf7
          .byte 0x53
          .byte 0x72
          .byte 0x72
          .byte 0x96
          .byte 0xe4
          .byte 0xc0
          .byte 0xc0
          .byte 0x5b
          .byte 0x9b
          .byte 0xb7
          .byte 0xb7
          .byte 0xc2
          .byte 0x75
          .byte 0xfd
          .byte 0xfd
          .byte 0x1c
          .byte 0xe1
          .byte 0x93
          .byte 0x93
          .byte 0xae
          .byte 0x3d
          .byte 0x26
          .byte 0x26
          .byte 0x6a
          .byte 0x4c
          .byte 0x36
          .byte 0x36
          .byte 0x5a
          .byte 0x6c
          .byte 0x3f
          .byte 0x3f
          .byte 0x41
          .byte 0x7e
          .byte 0xf7
          .byte 0xf7
          .byte 0x2
          .byte 0xf5
          .byte 0xcc
          .byte 0xcc
          .byte 0x4f
          .byte 0x83
          .byte 0x34
          .byte 0x34
          .byte 0x5c
          .byte 0x68
          .byte 0xa5
          .byte 0xa5
          .byte 0xf4
          .byte 0x51
          .byte 0xe5
          .byte 0xe5
          .byte 0x34
          .byte 0xd1
          .byte 0xf1
          .byte 0xf1
          .byte 0x8
          .byte 0xf9
          .byte 0x71
          .byte 0x71
          .byte 0x93
          .byte 0xe2
          .byte 0xd8
          .byte 0xd8
          .byte 0x73
          .byte 0xab
          .byte 0x31
          .byte 0x31
          .byte 0x53
          .byte 0x62
          .byte 0x15
          .byte 0x15
          .byte 0x3f
          .byte 0x2a
          .byte 0x4
          .byte 0x4
          .byte 0xc
          .byte 0x8
          .byte 0xc7
          .byte 0xc7
          .byte 0x52
          .byte 0x95
          .byte 0x23
          .byte 0x23
          .byte 0x65
          .byte 0x46
          .byte 0xc3
          .byte 0xc3
          .byte 0x5e
          .byte 0x9d
          .byte 0x18
          .byte 0x18
          .byte 0x28
          .byte 0x30
          .byte 0x96
          .byte 0x96
          .byte 0xa1
          .byte 0x37
          .byte 0x5
          .byte 0x5
          .byte 0xf
          .byte 0xa
          .byte 0x9a
          .byte 0x9a
          .byte 0xb5
          .byte 0x2f
          .byte 0x7
          .byte 0x7
          .byte 0x9
          .byte 0xe
          .byte 0x12
          .byte 0x12
          .byte 0x36
          .byte 0x24
          .byte 0x80
          .byte 0x80
          .byte 0x9b
          .byte 0x1b
          .byte 0xe2
          .byte 0xe2
          .byte 0x3d
          .byte 0xdf
          .byte 0xeb
          .byte 0xeb
          .byte 0x26
          .byte 0xcd
          .byte 0x27
          .byte 0x27
          .byte 0x69
          .byte 0x4e
          .byte 0xb2
          .byte 0xb2
          .byte 0xcd
          .byte 0x7f
          .byte 0x75
          .byte 0x75
          .byte 0x9f
          .byte 0xea
          .byte 0x9
          .byte 0x9
          .byte 0x1b
          .byte 0x12
          .byte 0x83
          .byte 0x83
          .byte 0x9e
          .byte 0x1d
          .byte 0x2c
          .byte 0x2c
          .byte 0x74
          .byte 0x58
          .byte 0x1a
          .byte 0x1a
          .byte 0x2e
          .byte 0x34
          .byte 0x1b
          .byte 0x1b
          .byte 0x2d
          .byte 0x36
          .byte 0x6e
          .byte 0x6e
          .byte 0xb2
          .byte 0xdc
          .byte 0x5a
          .byte 0x5a
          .byte 0xee
          .byte 0xb4
          .byte 0xa0
          .byte 0xa0
          .byte 0xfb
          .byte 0x5b
          .byte 0x52
          .byte 0x52
          .byte 0xf6
          .byte 0xa4
          .byte 0x3b
          .byte 0x3b
          .byte 0x4d
          .byte 0x76
          .byte 0xd6
          .byte 0xd6
          .byte 0x61
          .byte 0xb7
          .byte 0xb3
          .byte 0xb3
          .byte 0xce
          .byte 0x7d
          .byte 0x29
          .byte 0x29
          .byte 0x7b
          .byte 0x52
          .byte 0xe3
          .byte 0xe3
          .byte 0x3e
          .byte 0xdd
          .byte 0x2f
          .byte 0x2f
          .byte 0x71
          .byte 0x5e
          .byte 0x84
          .byte 0x84
          .byte 0x97
          .byte 0x13
          .byte 0x53
          .byte 0x53
          .byte 0xf5
          .byte 0xa6
          .byte 0xd1
          .byte 0xd1
          .byte 0x68
          .byte 0xb9
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xed
          .byte 0xed
          .byte 0x2c
          .byte 0xc1
          .byte 0x20
          .byte 0x20
          .byte 0x60
          .byte 0x40
          .byte 0xfc
          .byte 0xfc
          .byte 0x1f
          .byte 0xe3
          .byte 0xb1
          .byte 0xb1
          .byte 0xc8
          .byte 0x79
          .byte 0x5b
          .byte 0x5b
          .byte 0xed
          .byte 0xb6
          .byte 0x6a
          .byte 0x6a
          .byte 0xbe
          .byte 0xd4
          .byte 0xcb
          .byte 0xcb
          .byte 0x46
          .byte 0x8d
          .byte 0xbe
          .byte 0xbe
          .byte 0xd9
          .byte 0x67
          .byte 0x39
          .byte 0x39
          .byte 0x4b
          .byte 0x72
          .byte 0x4a
          .byte 0x4a
          .byte 0xde
          .byte 0x94
          .byte 0x4c
          .byte 0x4c
          .byte 0xd4
          .byte 0x98
          .byte 0x58
          .byte 0x58
          .byte 0xe8
          .byte 0xb0
          .byte 0xcf
          .byte 0xcf
          .byte 0x4a
          .byte 0x85
          .byte 0xd0
          .byte 0xd0
          .byte 0x6b
          .byte 0xbb
          .byte 0xef
          .byte 0xef
          .byte 0x2a
          .byte 0xc5
          .byte 0xaa
          .byte 0xaa
          .byte 0xe5
          .byte 0x4f
          .byte 0xfb
          .byte 0xfb
          .byte 0x16
          .byte 0xed
          .byte 0x43
          .byte 0x43
          .byte 0xc5
          .byte 0x86
          .byte 0x4d
          .byte 0x4d
          .byte 0xd7
          .byte 0x9a
          .byte 0x33
          .byte 0x33
          .byte 0x55
          .byte 0x66
          .byte 0x85
          .byte 0x85
          .byte 0x94
          .byte 0x11
          .byte 0x45
          .byte 0x45
          .byte 0xcf
          .byte 0x8a
          .byte 0xf9
          .byte 0xf9
          .byte 0x10
          .byte 0xe9
          .byte 0x2
          .byte 0x2
          .byte 0x6
          .byte 0x4
          .byte 0x7f
          .byte 0x7f
          .byte 0x81
          .byte 0xfe
          .byte 0x50
          .byte 0x50
          .byte 0xf0
          .byte 0xa0
          .byte 0x3c
          .byte 0x3c
          .byte 0x44
          .byte 0x78
          .byte 0x9f
          .byte 0x9f
          .byte 0xba
          .byte 0x25
          .byte 0xa8
          .byte 0xa8
          .byte 0xe3
          .byte 0x4b
          .byte 0x51
          .byte 0x51
          .byte 0xf3
          .byte 0xa2
          .byte 0xa3
          .byte 0xa3
          .byte 0xfe
          .byte 0x5d
          .byte 0x40
          .byte 0x40
          .byte 0xc0
          .byte 0x80
          .byte 0x8f
          .byte 0x8f
          .byte 0x8a
          .byte 0x5
          .byte 0x92
          .byte 0x92
          .byte 0xad
          .byte 0x3f
          .byte 0x9d
          .byte 0x9d
          .byte 0xbc
          .byte 0x21
          .byte 0x38
          .byte 0x38
          .byte 0x48
          .byte 0x70
          .byte 0xf5
          .byte 0xf5
          .byte 0x4
          .byte 0xf1
          .byte 0xbc
          .byte 0xbc
          .byte 0xdf
          .byte 0x63
          .byte 0xb6
          .byte 0xb6
          .byte 0xc1
          .byte 0x77
          .byte 0xda
          .byte 0xda
          .byte 0x75
          .byte 0xaf
          .byte 0x21
          .byte 0x21
          .byte 0x63
          .byte 0x42
          .byte 0x10
          .byte 0x10
          .byte 0x30
          .byte 0x20
          .byte 0xff
          .byte 0xff
          .byte 0x1a
          .byte 0xe5
          .byte 0xf3
          .byte 0xf3
          .byte 0xe
          .byte 0xfd
          .byte 0xd2
          .byte 0xd2
          .byte 0x6d
          .byte 0xbf
          .byte 0xcd
          .byte 0xcd
          .byte 0x4c
          .byte 0x81
          .byte 0xc
          .byte 0xc
          .byte 0x14
          .byte 0x18
          .byte 0x13
          .byte 0x13
          .byte 0x35
          .byte 0x26
          .byte 0xec
          .byte 0xec
          .byte 0x2f
          .byte 0xc3
          .byte 0x5f
          .byte 0x5f
          .byte 0xe1
          .byte 0xbe
          .byte 0x97
          .byte 0x97
          .byte 0xa2
          .byte 0x35
          .byte 0x44
          .byte 0x44
          .byte 0xcc
          .byte 0x88
          .byte 0x17
          .byte 0x17
          .byte 0x39
          .byte 0x2e
          .byte 0xc4
          .byte 0xc4
          .byte 0x57
          .byte 0x93
          .byte 0xa7
          .byte 0xa7
          .byte 0xf2
          .byte 0x55
          .byte 0x7e
          .byte 0x7e
          .byte 0x82
          .byte 0xfc
          .byte 0x3d
          .byte 0x3d
          .byte 0x47
          .byte 0x7a
          .byte 0x64
          .byte 0x64
          .byte 0xac
          .byte 0xc8
          .byte 0x5d
          .byte 0x5d
          .byte 0xe7
          .byte 0xba
          .byte 0x19
          .byte 0x19
          .byte 0x2b
          .byte 0x32
          .byte 0x73
          .byte 0x73
          .byte 0x95
          .byte 0xe6
          .byte 0x60
          .byte 0x60
          .byte 0xa0
          .byte 0xc0
          .byte 0x81
          .byte 0x81
          .byte 0x98
          .byte 0x19
          .byte 0x4f
          .byte 0x4f
          .byte 0xd1
          .byte 0x9e
          .byte 0xdc
          .byte 0xdc
          .byte 0x7f
          .byte 0xa3
          .byte 0x22
          .byte 0x22
          .byte 0x66
          .byte 0x44
          .byte 0x2a
          .byte 0x2a
          .byte 0x7e
          .byte 0x54
          .byte 0x90
          .byte 0x90
          .byte 0xab
          .byte 0x3b
          .byte 0x88
          .byte 0x88
          .byte 0x83
          .byte 0xb
          .byte 0x46
          .byte 0x46
          .byte 0xca
          .byte 0x8c
          .byte 0xee
          .byte 0xee
          .byte 0x29
          .byte 0xc7
          .byte 0xb8
          .byte 0xb8
          .byte 0xd3
          .byte 0x6b
          .byte 0x14
          .byte 0x14
          .byte 0x3c
          .byte 0x28
          .byte 0xde
          .byte 0xde
          .byte 0x79
          .byte 0xa7
          .byte 0x5e
          .byte 0x5e
          .byte 0xe2
          .byte 0xbc
          .byte 0xb
          .byte 0xb
          .byte 0x1d
          .byte 0x16
          .byte 0xdb
          .byte 0xdb
          .byte 0x76
          .byte 0xad
          .byte 0xe0
          .byte 0xe0
          .byte 0x3b
          .byte 0xdb
          .byte 0x32
          .byte 0x32
          .byte 0x56
          .byte 0x64
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x74
          .byte 0xa
          .byte 0xa
          .byte 0x1e
          .byte 0x14
          .byte 0x49
          .byte 0x49
          .byte 0xdb
          .byte 0x92
          .byte 0x6
          .byte 0x6
          .byte 0xa
          .byte 0xc
          .byte 0x24
          .byte 0x24
          .byte 0x6c
          .byte 0x48
          .byte 0x5c
          .byte 0x5c
          .byte 0xe4
          .byte 0xb8
          .byte 0xc2
          .byte 0xc2
          .byte 0x5d
          .byte 0x9f
          .byte 0xd3
          .byte 0xd3
          .byte 0x6e
          .byte 0xbd
          .byte 0xac
          .byte 0xac
          .byte 0xef
          .byte 0x43
          .byte 0x62
          .byte 0x62
          .byte 0xa6
          .byte 0xc4
          .byte 0x91
          .byte 0x91
          .byte 0xa8
          .byte 0x39
          .byte 0x95
          .byte 0x95
          .byte 0xa4
          .byte 0x31
          .byte 0xe4
          .byte 0xe4
          .byte 0x37
          .byte 0xd3
          .byte 0x79
          .byte 0x79
          .byte 0x8b
          .byte 0xf2
          .byte 0xe7
          .byte 0xe7
          .byte 0x32
          .byte 0xd5
          .byte 0xc8
          .byte 0xc8
          .byte 0x43
          .byte 0x8b
          .byte 0x37
          .byte 0x37
          .byte 0x59
          .byte 0x6e
          .byte 0x6d
          .byte 0x6d
          .byte 0xb7
          .byte 0xda
          .byte 0x8d
          .byte 0x8d
          .byte 0x8c
          .byte 0x1
          .byte 0xd5
          .byte 0xd5
          .byte 0x64
          .byte 0xb1
          .byte 0x4e
          .byte 0x4e
          .byte 0xd2
          .byte 0x9c
          .byte 0xa9
          .byte 0xa9
          .byte 0xe0
          .byte 0x49
          .byte 0x6c
          .byte 0x6c
          .byte 0xb4
          .byte 0xd8
          .byte 0x56
          .byte 0x56
          .byte 0xfa
          .byte 0xac
          .byte 0xf4
          .byte 0xf4
          .byte 0x7
          .byte 0xf3
          .byte 0xea
          .byte 0xea
          .byte 0x25
          .byte 0xcf
          .byte 0x65
          .byte 0x65
          .byte 0xaf
          .byte 0xca
          .byte 0x7a
          .byte 0x7a
          .byte 0x8e
          .byte 0xf4
          .byte 0xae
          .byte 0xae
          .byte 0xe9
          .byte 0x47
          .byte 0x8
          .byte 0x8
          .byte 0x18
          .byte 0x10
          .byte 0xba
          .byte 0xba
          .byte 0xd5
          .byte 0x6f
          .byte 0x78
          .byte 0x78
          .byte 0x88
          .byte 0xf0
          .byte 0x25
          .byte 0x25
          .byte 0x6f
          .byte 0x4a
          .byte 0x2e
          .byte 0x2e
          .byte 0x72
          .byte 0x5c
          .byte 0x1c
          .byte 0x1c
          .byte 0x24
          .byte 0x38
          .byte 0xa6
          .byte 0xa6
          .byte 0xf1
          .byte 0x57
          .byte 0xb4
          .byte 0xb4
          .byte 0xc7
          .byte 0x73
          .byte 0xc6
          .byte 0xc6
          .byte 0x51
          .byte 0x97
          .byte 0xe8
          .byte 0xe8
          .byte 0x23
          .byte 0xcb
          .byte 0xdd
          .byte 0xdd
          .byte 0x7c
          .byte 0xa1
          .byte 0x74
          .byte 0x74
          .byte 0x9c
          .byte 0xe8
          .byte 0x1f
          .byte 0x1f
          .byte 0x21
          .byte 0x3e
          .byte 0x4b
          .byte 0x4b
          .byte 0xdd
          .byte 0x96
          .byte 0xbd
          .byte 0xbd
          .byte 0xdc
          .byte 0x61
          .byte 0x8b
          .byte 0x8b
          .byte 0x86
          .byte 0xd
          .byte 0x8a
          .byte 0x8a
          .byte 0x85
          .byte 0xf
          .byte 0x70
          .byte 0x70
          .byte 0x90
          .byte 0xe0
          .byte 0x3e
          .byte 0x3e
          .byte 0x42
          .byte 0x7c
          .byte 0xb5
          .byte 0xb5
          .byte 0xc4
          .byte 0x71
          .byte 0x66
          .byte 0x66
          .byte 0xaa
          .byte 0xcc
          .byte 0x48
          .byte 0x48
          .byte 0xd8
          .byte 0x90
          .byte 0x3
          .byte 0x3
          .byte 0x5
          .byte 0x6
          .byte 0xf6
          .byte 0xf6
          .byte 0x1
          .byte 0xf7
          .byte 0xe
          .byte 0xe
          .byte 0x12
          .byte 0x1c
          .byte 0x61
          .byte 0x61
          .byte 0xa3
          .byte 0xc2
          .byte 0x35
          .byte 0x35
          .byte 0x5f
          .byte 0x6a
          .byte 0x57
          .byte 0x57
          .byte 0xf9
          .byte 0xae
          .byte 0xb9
          .byte 0xb9
          .byte 0xd0
          .byte 0x69
          .byte 0x86
          .byte 0x86
          .byte 0x91
          .byte 0x17
          .byte 0xc1
          .byte 0xc1
          .byte 0x58
          .byte 0x99
          .byte 0x1d
          .byte 0x1d
          .byte 0x27
          .byte 0x3a
          .byte 0x9e
          .byte 0x9e
          .byte 0xb9
          .byte 0x27
          .byte 0xe1
          .byte 0xe1
          .byte 0x38
          .byte 0xd9
          .byte 0xf8
          .byte 0xf8
          .byte 0x13
          .byte 0xeb
          .byte 0x98
          .byte 0x98
          .byte 0xb3
          .byte 0x2b
          .byte 0x11
          .byte 0x11
          .byte 0x33
          .byte 0x22
          .byte 0x69
          .byte 0x69
          .byte 0xbb
          .byte 0xd2
          .byte 0xd9
          .byte 0xd9
          .byte 0x70
          .byte 0xa9
          .byte 0x8e
          .byte 0x8e
          .byte 0x89
          .byte 0x7
          .byte 0x94
          .byte 0x94
          .byte 0xa7
          .byte 0x33
          .byte 0x9b
          .byte 0x9b
          .byte 0xb6
          .byte 0x2d
          .byte 0x1e
          .byte 0x1e
          .byte 0x22
          .byte 0x3c
          .byte 0x87
          .byte 0x87
          .byte 0x92
          .byte 0x15
          .byte 0xe9
          .byte 0xe9
          .byte 0x20
          .byte 0xc9
          .byte 0xce
          .byte 0xce
          .byte 0x49
          .byte 0x87
          .byte 0x55
          .byte 0x55
          .byte 0xff
          .byte 0xaa
          .byte 0x28
          .byte 0x28
          .byte 0x78
          .byte 0x50
          .byte 0xdf
          .byte 0xdf
          .byte 0x7a
          .byte 0xa5
          .byte 0x8c
          .byte 0x8c
          .byte 0x8f
          .byte 0x3
          .byte 0xa1
          .byte 0xa1
          .byte 0xf8
          .byte 0x59
          .byte 0x89
          .byte 0x89
          .byte 0x80
          .byte 0x9
          .byte 0xd
          .byte 0xd
          .byte 0x17
          .byte 0x1a
          .byte 0xbf
          .byte 0xbf
          .byte 0xda
          .byte 0x65
          .byte 0xe6
          .byte 0xe6
          .byte 0x31
          .byte 0xd7
          .byte 0x42
          .byte 0x42
          .byte 0xc6
          .byte 0x84
          .byte 0x68
          .byte 0x68
          .byte 0xb8
          .byte 0xd0
          .byte 0x41
          .byte 0x41
          .byte 0xc3
          .byte 0x82
          .byte 0x99
          .byte 0x99
          .byte 0xb0
          .byte 0x29
          .byte 0x2d
          .byte 0x2d
          .byte 0x77
          .byte 0x5a
          .byte 0xf
          .byte 0xf
          .byte 0x11
          .byte 0x1e
          .byte 0xb0
          .byte 0xb0
          .byte 0xcb
          .byte 0x7b
          .byte 0x54
          .byte 0x54
          .byte 0xfc
          .byte 0xa8
          .byte 0xbb
          .byte 0xbb
          .byte 0xd6
          .byte 0x6d
          .byte 0x16
          .byte 0x16
          .byte 0x3a
          .byte 0x2c
.L_45c420:
          .byte 0x63
          .byte 0xa5
          .byte 0xc6
          .byte 0x63
          .byte 0x7c
          .byte 0x84
          .byte 0xf8
          .byte 0x7c
          .byte 0x77
          .byte 0x99
          .byte 0xee
          .byte 0x77
          .byte 0x7b
          .byte 0x8d
          .byte 0xf6
          .byte 0x7b
          .byte 0xf2
          .byte 0xd
          .byte 0xff
          .byte 0xf2
          .byte 0x6b
          .byte 0xbd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6f
          .byte 0xb1
          .byte 0xde
          .byte 0x6f
          .byte 0xc5
          .byte 0x54
          .byte 0x91
          .byte 0xc5
          .byte 0x30
          .byte 0x50
          .byte 0x60
          .byte 0x30
          .byte 0x1
          .byte 0x3
          .byte 0x2
          .byte 0x1
          .byte 0x67
          .byte 0xa9
          .byte 0xce
          .byte 0x67
          .byte 0x2b
          .byte 0x7d
          .byte 0x56
          .byte 0x2b
          .byte 0xfe
          .byte 0x19
          .byte 0xe7
          .byte 0xfe
          .byte 0xd7
          .byte 0x62
          .byte 0xb5
          .byte 0xd7
          .byte 0xab
          .byte 0xe6
          .byte 0x4d
          .byte 0xab
          .byte 0x76
          .byte 0x9a
          .byte 0xec
          .byte 0x76
          .byte 0xca
          .byte 0x45
          .byte 0x8f
          .byte 0xca
          .byte 0x82
          .byte 0x9d
          .byte 0x1f
          .byte 0x82
          .byte 0xc9
          .byte 0x40
          .byte 0x89
          .byte 0xc9
          .byte 0x7d
          .byte 0x87
          .byte 0xfa
          .byte 0x7d
          .byte 0xfa
          .byte 0x15
          .byte 0xef
          .byte 0xfa
          .byte 0x59
          .byte 0xeb
          .byte 0xb2
          .byte 0x59
          .byte 0x47
          .byte 0xc9
          .byte 0x8e
          .byte 0x47
          .byte 0xf0
          .byte 0xb
          .byte 0xfb
          .byte 0xf0
          .byte 0xad
          .byte 0xec
          .byte 0x41
          .byte 0xad
          .byte 0xd4
          .byte 0x67
          .byte 0xb3
          .byte 0xd4
          .byte 0xa2
          .byte 0xfd
          .byte 0x5f
          .byte 0xa2
          .byte 0xaf
          .byte 0xea
          .byte 0x45
          .byte 0xaf
          .byte 0x9c
          .byte 0xbf
          .byte 0x23
          .byte 0x9c
          .byte 0xa4
          .byte 0xf7
          .byte 0x53
          .byte 0xa4
          .byte 0x72
          .byte 0x96
          .byte 0xe4
          .byte 0x72
          .byte 0xc0
          .byte 0x5b
          .byte 0x9b
          .byte 0xc0
          .byte 0xb7
          .byte 0xc2
          .byte 0x75
          .byte 0xb7
          .byte 0xfd
          .byte 0x1c
          .byte 0xe1
          .byte 0xfd
          .byte 0x93
          .byte 0xae
          .byte 0x3d
          .byte 0x93
          .byte 0x26
          .byte 0x6a
          .byte 0x4c
          .byte 0x26
          .byte 0x36
          .byte 0x5a
          .byte 0x6c
          .byte 0x36
          .byte 0x3f
          .byte 0x41
          .byte 0x7e
          .byte 0x3f
          .byte 0xf7
          .byte 0x2
          .byte 0xf5
          .byte 0xf7
          .byte 0xcc
          .byte 0x4f
          .byte 0x83
          .byte 0xcc
          .byte 0x34
          .byte 0x5c
          .byte 0x68
          .byte 0x34
          .byte 0xa5
          .byte 0xf4
          .byte 0x51
          .byte 0xa5
          .byte 0xe5
          .byte 0x34
          .byte 0xd1
          .byte 0xe5
          .byte 0xf1
          .byte 0x8
          .byte 0xf9
          .byte 0xf1
          .byte 0x71
          .byte 0x93
          .byte 0xe2
          .byte 0x71
          .byte 0xd8
          .byte 0x73
          .byte 0xab
          .byte 0xd8
          .byte 0x31
          .byte 0x53
          .byte 0x62
          .byte 0x31
          .byte 0x15
          .byte 0x3f
          .byte 0x2a
          .byte 0x15
          .byte 0x4
          .byte 0xc
          .byte 0x8
          .byte 0x4
          .byte 0xc7
          .byte 0x52
          .byte 0x95
          .byte 0xc7
          .byte 0x23
          .byte 0x65
          .byte 0x46
          .byte 0x23
          .byte 0xc3
          .byte 0x5e
          .byte 0x9d
          .byte 0xc3
          .byte 0x18
          .byte 0x28
          .byte 0x30
          .byte 0x18
          .byte 0x96
          .byte 0xa1
          .byte 0x37
          .byte 0x96
          .byte 0x5
          .byte 0xf
          .byte 0xa
          .byte 0x5
          .byte 0x9a
          .byte 0xb5
          .byte 0x2f
          .byte 0x9a
          .byte 0x7
          .byte 0x9
          .byte 0xe
          .byte 0x7
          .byte 0x12
          .byte 0x36
          .byte 0x24
          .byte 0x12
          .byte 0x80
          .byte 0x9b
          .byte 0x1b
          .byte 0x80
          .byte 0xe2
          .byte 0x3d
          .byte 0xdf
          .byte 0xe2
          .byte 0xeb
          .byte 0x26
          .byte 0xcd
          .byte 0xeb
          .byte 0x27
          .byte 0x69
          .byte 0x4e
          .byte 0x27
          .byte 0xb2
          .byte 0xcd
          .byte 0x7f
          .byte 0xb2
          .byte 0x75
          .byte 0x9f
          .byte 0xea
          .byte 0x75
          .byte 0x9
          .byte 0x1b
          .byte 0x12
          .byte 0x9
          .byte 0x83
          .byte 0x9e
          .byte 0x1d
          .byte 0x83
          .byte 0x2c
          .byte 0x74
          .byte 0x58
          .byte 0x2c
          .byte 0x1a
          .byte 0x2e
          .byte 0x34
          .byte 0x1a
          .byte 0x1b
          .byte 0x2d
          .byte 0x36
          .byte 0x1b
          .byte 0x6e
          .byte 0xb2
          .byte 0xdc
          .byte 0x6e
          .byte 0x5a
          .byte 0xee
          .byte 0xb4
          .byte 0x5a
          .byte 0xa0
          .byte 0xfb
          .byte 0x5b
          .byte 0xa0
          .byte 0x52
          .byte 0xf6
          .byte 0xa4
          .byte 0x52
          .byte 0x3b
          .byte 0x4d
          .byte 0x76
          .byte 0x3b
          .byte 0xd6
          .byte 0x61
          .byte 0xb7
          .byte 0xd6
          .byte 0xb3
          .byte 0xce
          .byte 0x7d
          .byte 0xb3
          .byte 0x29
          .byte 0x7b
          .byte 0x52
          .byte 0x29
          .byte 0xe3
          .byte 0x3e
          .byte 0xdd
          .byte 0xe3
          .byte 0x2f
          .byte 0x71
          .byte 0x5e
          .byte 0x2f
          .byte 0x84
          .byte 0x97
          .byte 0x13
          .byte 0x84
          .byte 0x53
          .byte 0xf5
          .byte 0xa6
          .byte 0x53
          .byte 0xd1
          .byte 0x68
          .byte 0xb9
          .byte 0xd1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xed
          .byte 0x2c
          .byte 0xc1
          .byte 0xed
          .byte 0x20
          .byte 0x60
          .byte 0x40
          .byte 0x20
          .byte 0xfc
          .byte 0x1f
          .byte 0xe3
          .byte 0xfc
          .byte 0xb1
          .byte 0xc8
          .byte 0x79
          .byte 0xb1
          .byte 0x5b
          .byte 0xed
          .byte 0xb6
          .byte 0x5b
          .byte 0x6a
          .byte 0xbe
          .byte 0xd4
          .byte 0x6a
          .byte 0xcb
          .byte 0x46
          .byte 0x8d
          .byte 0xcb
          .byte 0xbe
          .byte 0xd9
          .byte 0x67
          .byte 0xbe
          .byte 0x39
          .byte 0x4b
          .byte 0x72
          .byte 0x39
          .byte 0x4a
          .byte 0xde
          .byte 0x94
          .byte 0x4a
          .byte 0x4c
          .byte 0xd4
          .byte 0x98
          .byte 0x4c
          .byte 0x58
          .byte 0xe8
          .byte 0xb0
          .byte 0x58
          .byte 0xcf
          .byte 0x4a
          .byte 0x85
          .byte 0xcf
          .byte 0xd0
          .byte 0x6b
          .byte 0xbb
          .byte 0xd0
          .byte 0xef
          .byte 0x2a
          .byte 0xc5
          .byte 0xef
          .byte 0xaa
          .byte 0xe5
          .byte 0x4f
          .byte 0xaa
          .byte 0xfb
          .byte 0x16
          .byte 0xed
          .byte 0xfb
          .byte 0x43
          .byte 0xc5
          .byte 0x86
          .byte 0x43
          .byte 0x4d
          .byte 0xd7
          .byte 0x9a
          .byte 0x4d
          .byte 0x33
          .byte 0x55
          .byte 0x66
          .byte 0x33
          .byte 0x85
          .byte 0x94
          .byte 0x11
          .byte 0x85
          .byte 0x45
          .byte 0xcf
          .byte 0x8a
          .byte 0x45
          .byte 0xf9
          .byte 0x10
          .byte 0xe9
          .byte 0xf9
          .byte 0x2
          .byte 0x6
          .byte 0x4
          .byte 0x2
          .byte 0x7f
          .byte 0x81
          .byte 0xfe
          .byte 0x7f
          .byte 0x50
          .byte 0xf0
          .byte 0xa0
          .byte 0x50
          .byte 0x3c
          .byte 0x44
          .byte 0x78
          .byte 0x3c
          .byte 0x9f
          .byte 0xba
          .byte 0x25
          .byte 0x9f
          .byte 0xa8
          .byte 0xe3
          .byte 0x4b
          .byte 0xa8
          .byte 0x51
          .byte 0xf3
          .byte 0xa2
          .byte 0x51
          .byte 0xa3
          .byte 0xfe
          .byte 0x5d
          .byte 0xa3
          .byte 0x40
          .byte 0xc0
          .byte 0x80
          .byte 0x40
          .byte 0x8f
          .byte 0x8a
          .byte 0x5
          .byte 0x8f
          .byte 0x92
          .byte 0xad
          .byte 0x3f
          .byte 0x92
          .byte 0x9d
          .byte 0xbc
          .byte 0x21
          .byte 0x9d
          .byte 0x38
          .byte 0x48
          .byte 0x70
          .byte 0x38
          .byte 0xf5
          .byte 0x4
          .byte 0xf1
          .byte 0xf5
          .byte 0xbc
          .byte 0xdf
          .byte 0x63
          .byte 0xbc
          .byte 0xb6
          .byte 0xc1
          .byte 0x77
          .byte 0xb6
          .byte 0xda
          .byte 0x75
          .byte 0xaf
          .byte 0xda
          .byte 0x21
          .byte 0x63
          .byte 0x42
          .byte 0x21
          .byte 0x10
          .byte 0x30
          .byte 0x20
          .byte 0x10
          .byte 0xff
          .byte 0x1a
          .byte 0xe5
          .byte 0xff
          .byte 0xf3
          .byte 0xe
          .byte 0xfd
          .byte 0xf3
          .byte 0xd2
          .byte 0x6d
          .byte 0xbf
          .byte 0xd2
          .byte 0xcd
          .byte 0x4c
          .byte 0x81
          .byte 0xcd
          .byte 0xc
          .byte 0x14
          .byte 0x18
          .byte 0xc
          .byte 0x13
          .byte 0x35
          .byte 0x26
          .byte 0x13
          .byte 0xec
          .byte 0x2f
          .byte 0xc3
          .byte 0xec
          .byte 0x5f
          .byte 0xe1
          .byte 0xbe
          .byte 0x5f
          .byte 0x97
          .byte 0xa2
          .byte 0x35
          .byte 0x97
          .byte 0x44
          .byte 0xcc
          .byte 0x88
          .byte 0x44
          .byte 0x17
          .byte 0x39
          .byte 0x2e
          .byte 0x17
          .byte 0xc4
          .byte 0x57
          .byte 0x93
          .byte 0xc4
          .byte 0xa7
          .byte 0xf2
          .byte 0x55
          .byte 0xa7
          .byte 0x7e
          .byte 0x82
          .byte 0xfc
          .byte 0x7e
          .byte 0x3d
          .byte 0x47
          .byte 0x7a
          .byte 0x3d
          .byte 0x64
          .byte 0xac
          .byte 0xc8
          .byte 0x64
          .byte 0x5d
          .byte 0xe7
          .byte 0xba
          .byte 0x5d
          .byte 0x19
          .byte 0x2b
          .byte 0x32
          .byte 0x19
          .byte 0x73
          .byte 0x95
          .byte 0xe6
          .byte 0x73
          .byte 0x60
          .byte 0xa0
          .byte 0xc0
          .byte 0x60
          .byte 0x81
          .byte 0x98
          .byte 0x19
          .byte 0x81
          .byte 0x4f
          .byte 0xd1
          .byte 0x9e
          .byte 0x4f
          .byte 0xdc
          .byte 0x7f
          .byte 0xa3
          .byte 0xdc
          .byte 0x22
          .byte 0x66
          .byte 0x44
          .byte 0x22
          .byte 0x2a
          .byte 0x7e
          .byte 0x54
          .byte 0x2a
          .byte 0x90
          .byte 0xab
          .byte 0x3b
          .byte 0x90
          .byte 0x88
          .byte 0x83
          .byte 0xb
          .byte 0x88
          .byte 0x46
          .byte 0xca
          .byte 0x8c
          .byte 0x46
          .byte 0xee
          .byte 0x29
          .byte 0xc7
          .byte 0xee
          .byte 0xb8
          .byte 0xd3
          .byte 0x6b
          .byte 0xb8
          .byte 0x14
          .byte 0x3c
          .byte 0x28
          .byte 0x14
          .byte 0xde
          .byte 0x79
          .byte 0xa7
          .byte 0xde
          .byte 0x5e
          .byte 0xe2
          .byte 0xbc
          .byte 0x5e
          .byte 0xb
          .byte 0x1d
          .byte 0x16
          .byte 0xb
          .byte 0xdb
          .byte 0x76
          .byte 0xad
          .byte 0xdb
          .byte 0xe0
          .byte 0x3b
          .byte 0xdb
          .byte 0xe0
          .byte 0x32
          .byte 0x56
          .byte 0x64
          .byte 0x32
          .byte 0x3a
          .byte 0x4e
          .byte 0x74
          .byte 0x3a
          .byte 0xa
          .byte 0x1e
          .byte 0x14
          .byte 0xa
          .byte 0x49
          .byte 0xdb
          .byte 0x92
          .byte 0x49
          .byte 0x6
          .byte 0xa
          .byte 0xc
          .byte 0x6
          .byte 0x24
          .byte 0x6c
          .byte 0x48
          .byte 0x24
          .byte 0x5c
          .byte 0xe4
          .byte 0xb8
          .byte 0x5c
          .byte 0xc2
          .byte 0x5d
          .byte 0x9f
          .byte 0xc2
          .byte 0xd3
          .byte 0x6e
          .byte 0xbd
          .byte 0xd3
          .byte 0xac
          .byte 0xef
          .byte 0x43
          .byte 0xac
          .byte 0x62
          .byte 0xa6
          .byte 0xc4
          .byte 0x62
          .byte 0x91
          .byte 0xa8
          .byte 0x39
          .byte 0x91
          .byte 0x95
          .byte 0xa4
          .byte 0x31
          .byte 0x95
          .byte 0xe4
          .byte 0x37
          .byte 0xd3
          .byte 0xe4
          .byte 0x79
          .byte 0x8b
          .byte 0xf2
          .byte 0x79
          .byte 0xe7
          .byte 0x32
          .byte 0xd5
          .byte 0xe7
          .byte 0xc8
          .byte 0x43
          .byte 0x8b
          .byte 0xc8
          .byte 0x37
          .byte 0x59
          .byte 0x6e
          .byte 0x37
          .byte 0x6d
          .byte 0xb7
          .byte 0xda
          .byte 0x6d
          .byte 0x8d
          .byte 0x8c
          .byte 0x1
          .byte 0x8d
          .byte 0xd5
          .byte 0x64
          .byte 0xb1
          .byte 0xd5
          .byte 0x4e
          .byte 0xd2
          .byte 0x9c
          .byte 0x4e
          .byte 0xa9
          .byte 0xe0
          .byte 0x49
          .byte 0xa9
          .byte 0x6c
          .byte 0xb4
          .byte 0xd8
          .byte 0x6c
          .byte 0x56
          .byte 0xfa
          .byte 0xac
          .byte 0x56
          .byte 0xf4
          .byte 0x7
          .byte 0xf3
          .byte 0xf4
          .byte 0xea
          .byte 0x25
          .byte 0xcf
          .byte 0xea
          .byte 0x65
          .byte 0xaf
          .byte 0xca
          .byte 0x65
          .byte 0x7a
          .byte 0x8e
          .byte 0xf4
          .byte 0x7a
          .byte 0xae
          .byte 0xe9
          .byte 0x47
          .byte 0xae
          .byte 0x8
          .byte 0x18
          .byte 0x10
          .byte 0x8
          .byte 0xba
          .byte 0xd5
          .byte 0x6f
          .byte 0xba
          .byte 0x78
          .byte 0x88
          .byte 0xf0
          .byte 0x78
          .byte 0x25
          .byte 0x6f
          .byte 0x4a
          .byte 0x25
          .byte 0x2e
          .byte 0x72
          .byte 0x5c
          .byte 0x2e
          .byte 0x1c
          .byte 0x24
          .byte 0x38
          .byte 0x1c
          .byte 0xa6
          .byte 0xf1
          .byte 0x57
          .byte 0xa6
          .byte 0xb4
          .byte 0xc7
          .byte 0x73
          .byte 0xb4
          .byte 0xc6
          .byte 0x51
          .byte 0x97
          .byte 0xc6
          .byte 0xe8
          .byte 0x23
          .byte 0xcb
          .byte 0xe8
          .byte 0xdd
          .byte 0x7c
          .byte 0xa1
          .byte 0xdd
          .byte 0x74
          .byte 0x9c
          .byte 0xe8
          .byte 0x74
          .byte 0x1f
          .byte 0x21
          .byte 0x3e
          .byte 0x1f
          .byte 0x4b
          .byte 0xdd
          .byte 0x96
          .byte 0x4b
          .byte 0xbd
          .byte 0xdc
          .byte 0x61
          .byte 0xbd
          .byte 0x8b
          .byte 0x86
          .byte 0xd
          .byte 0x8b
          .byte 0x8a
          .byte 0x85
          .byte 0xf
          .byte 0x8a
          .byte 0x70
          .byte 0x90
          .byte 0xe0
          .byte 0x70
          .byte 0x3e
          .byte 0x42
          .byte 0x7c
          .byte 0x3e
          .byte 0xb5
          .byte 0xc4
          .byte 0x71
          .byte 0xb5
          .byte 0x66
          .byte 0xaa
          .byte 0xcc
          .byte 0x66
          .byte 0x48
          .byte 0xd8
          .byte 0x90
          .byte 0x48
          .byte 0x3
          .byte 0x5
          .byte 0x6
          .byte 0x3
          .byte 0xf6
          .byte 0x1
          .byte 0xf7
          .byte 0xf6
          .byte 0xe
          .byte 0x12
          .byte 0x1c
          .byte 0xe
          .byte 0x61
          .byte 0xa3
          .byte 0xc2
          .byte 0x61
          .byte 0x35
          .byte 0x5f
          .byte 0x6a
          .byte 0x35
          .byte 0x57
          .byte 0xf9
          .byte 0xae
          .byte 0x57
          .byte 0xb9
          .byte 0xd0
          .byte 0x69
          .byte 0xb9
          .byte 0x86
          .byte 0x91
          .byte 0x17
          .byte 0x86
          .byte 0xc1
          .byte 0x58
          .byte 0x99
          .byte 0xc1
          .byte 0x1d
          .byte 0x27
          .byte 0x3a
          .byte 0x1d
          .byte 0x9e
          .byte 0xb9
          .byte 0x27
          .byte 0x9e
          .byte 0xe1
          .byte 0x38
          .byte 0xd9
          .byte 0xe1
          .byte 0xf8
          .byte 0x13
          .byte 0xeb
          .byte 0xf8
          .byte 0x98
          .byte 0xb3
          .byte 0x2b
          .byte 0x98
          .byte 0x11
          .byte 0x33
          .byte 0x22
          .byte 0x11
          .byte 0x69
          .byte 0xbb
          .byte 0xd2
          .byte 0x69
          .byte 0xd9
          .byte 0x70
          .byte 0xa9
          .byte 0xd9
          .byte 0x8e
          .byte 0x89
          .byte 0x7
          .byte 0x8e
          .byte 0x94
          .byte 0xa7
          .byte 0x33
          .byte 0x94
          .byte 0x9b
          .byte 0xb6
          .byte 0x2d
          .byte 0x9b
          .byte 0x1e
          .byte 0x22
          .byte 0x3c
          .byte 0x1e
          .byte 0x87
          .byte 0x92
          .byte 0x15
          .byte 0x87
          .byte 0xe9
          .byte 0x20
          .byte 0xc9
          .byte 0xe9
          .byte 0xce
          .byte 0x49
          .byte 0x87
          .byte 0xce
          .byte 0x55
          .byte 0xff
          .byte 0xaa
          .byte 0x55
          .byte 0x28
          .byte 0x78
          .byte 0x50
          .byte 0x28
          .byte 0xdf
          .byte 0x7a
          .byte 0xa5
          .byte 0xdf
          .byte 0x8c
          .byte 0x8f
          .byte 0x3
          .byte 0x8c
          .byte 0xa1
          .byte 0xf8
          .byte 0x59
          .byte 0xa1
          .byte 0x89
          .byte 0x80
          .byte 0x9
          .byte 0x89
          .byte 0xd
          .byte 0x17
          .byte 0x1a
          .byte 0xd
          .byte 0xbf
          .byte 0xda
          .byte 0x65
          .byte 0xbf
          .byte 0xe6
          .byte 0x31
          .byte 0xd7
          .byte 0xe6
          .byte 0x42
          .byte 0xc6
          .byte 0x84
          .byte 0x42
          .byte 0x68
          .byte 0xb8
          .byte 0xd0
          .byte 0x68
          .byte 0x41
          .byte 0xc3
          .byte 0x82
          .byte 0x41
          .byte 0x99
          .byte 0xb0
          .byte 0x29
          .byte 0x99
          .byte 0x2d
          .byte 0x77
          .byte 0x5a
          .byte 0x2d
          .byte 0xf
          .byte 0x11
          .byte 0x1e
          .byte 0xf
          .byte 0xb0
          .byte 0xcb
          .byte 0x7b
          .byte 0xb0
          .byte 0x54
          .byte 0xfc
          .byte 0xa8
          .byte 0x54
          .byte 0xbb
          .byte 0xd6
          .byte 0x6d
          .byte 0xbb
          .byte 0x16
          .byte 0x3a
          .byte 0x2c
          .byte 0x16
.L_45c820:
          .byte 0xa5
          .byte 0xc6
          .byte 0x63
          .byte 0x63
          .byte 0x84
          .byte 0xf8
          .byte 0x7c
          .byte 0x7c
          .byte 0x99
          .byte 0xee
          .byte 0x77
          .byte 0x77
          .byte 0x8d
          .byte 0xf6
          .byte 0x7b
          .byte 0x7b
          .byte 0xd
          .byte 0xff
          .byte 0xf2
          .byte 0xf2
          .byte 0xbd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6b
          .byte 0xb1
          .byte 0xde
          .byte 0x6f
          .byte 0x6f
          .byte 0x54
          .byte 0x91
          .byte 0xc5
          .byte 0xc5
          .byte 0x50
          .byte 0x60
          .byte 0x30
          .byte 0x30
          .byte 0x3
          .byte 0x2
          .byte 0x1
          .byte 0x1
          .byte 0xa9
          .byte 0xce
          .byte 0x67
          .byte 0x67
          .byte 0x7d
          .byte 0x56
          .byte 0x2b
          .byte 0x2b
          .byte 0x19
          .byte 0xe7
          .byte 0xfe
          .byte 0xfe
          .byte 0x62
          .byte 0xb5
          .byte 0xd7
          .byte 0xd7
          .byte 0xe6
          .byte 0x4d
          .byte 0xab
          .byte 0xab
          .byte 0x9a
          .byte 0xec
          .byte 0x76
          .byte 0x76
          .byte 0x45
          .byte 0x8f
          .byte 0xca
          .byte 0xca
          .byte 0x9d
          .byte 0x1f
          .byte 0x82
          .byte 0x82
          .byte 0x40
          .byte 0x89
          .byte 0xc9
          .byte 0xc9
          .byte 0x87
          .byte 0xfa
          .byte 0x7d
          .byte 0x7d
          .byte 0x15
          .byte 0xef
          .byte 0xfa
          .byte 0xfa
          .byte 0xeb
          .byte 0xb2
          .byte 0x59
          .byte 0x59
          .byte 0xc9
          .byte 0x8e
          .byte 0x47
          .byte 0x47
          .byte 0xb
          .byte 0xfb
          .byte 0xf0
          .byte 0xf0
          .byte 0xec
          .byte 0x41
          .byte 0xad
          .byte 0xad
          .byte 0x67
          .byte 0xb3
          .byte 0xd4
          .byte 0xd4
          .byte 0xfd
          .byte 0x5f
          .byte 0xa2
          .byte 0xa2
          .byte 0xea
          .byte 0x45
          .byte 0xaf
          .byte 0xaf
          .byte 0xbf
          .byte 0x23
          .byte 0x9c
          .byte 0x9c
          .byte 0xf7
          .byte 0x53
          .byte 0xa4
          .byte 0xa4
          .byte 0x96
          .byte 0xe4
          .byte 0x72
          .byte 0x72
          .byte 0x5b
          .byte 0x9b
          .byte 0xc0
          .byte 0xc0
          .byte 0xc2
          .byte 0x75
          .byte 0xb7
          .byte 0xb7
          .byte 0x1c
          .byte 0xe1
          .byte 0xfd
          .byte 0xfd
          .byte 0xae
          .byte 0x3d
          .byte 0x93
          .byte 0x93
          .byte 0x6a
          .byte 0x4c
          .byte 0x26
          .byte 0x26
          .byte 0x5a
          .byte 0x6c
          .byte 0x36
          .byte 0x36
          .byte 0x41
          .byte 0x7e
          .byte 0x3f
          .byte 0x3f
          .byte 0x2
          .byte 0xf5
          .byte 0xf7
          .byte 0xf7
          .byte 0x4f
          .byte 0x83
          .byte 0xcc
          .byte 0xcc
          .byte 0x5c
          .byte 0x68
          .byte 0x34
          .byte 0x34
          .byte 0xf4
          .byte 0x51
          .byte 0xa5
          .byte 0xa5
          .byte 0x34
          .byte 0xd1
          .byte 0xe5
          .byte 0xe5
          .byte 0x8
          .byte 0xf9
          .byte 0xf1
          .byte 0xf1
          .byte 0x93
          .byte 0xe2
          .byte 0x71
          .byte 0x71
          .byte 0x73
          .byte 0xab
          .byte 0xd8
          .byte 0xd8
          .byte 0x53
          .byte 0x62
          .byte 0x31
          .byte 0x31
          .byte 0x3f
          .byte 0x2a
          .byte 0x15
          .byte 0x15
          .byte 0xc
          .byte 0x8
          .byte 0x4
          .byte 0x4
          .byte 0x52
          .byte 0x95
          .byte 0xc7
          .byte 0xc7
          .byte 0x65
          .byte 0x46
          .byte 0x23
          .byte 0x23
          .byte 0x5e
          .byte 0x9d
          .byte 0xc3
          .byte 0xc3
          .byte 0x28
          .byte 0x30
          .byte 0x18
          .byte 0x18
          .byte 0xa1
          .byte 0x37
          .byte 0x96
          .byte 0x96
          .byte 0xf
          .byte 0xa
          .byte 0x5
          .byte 0x5
          .byte 0xb5
          .byte 0x2f
          .byte 0x9a
          .byte 0x9a
          .byte 0x9
          .byte 0xe
          .byte 0x7
          .byte 0x7
          .byte 0x36
          .byte 0x24
          .byte 0x12
          .byte 0x12
          .byte 0x9b
          .byte 0x1b
          .byte 0x80
          .byte 0x80
          .byte 0x3d
          .byte 0xdf
          .byte 0xe2
          .byte 0xe2
          .byte 0x26
          .byte 0xcd
          .byte 0xeb
          .byte 0xeb
          .byte 0x69
          .byte 0x4e
          .byte 0x27
          .byte 0x27
          .byte 0xcd
          .byte 0x7f
          .byte 0xb2
          .byte 0xb2
          .byte 0x9f
          .byte 0xea
          .byte 0x75
          .byte 0x75
          .byte 0x1b
          .byte 0x12
          .byte 0x9
          .byte 0x9
          .byte 0x9e
          .byte 0x1d
          .byte 0x83
          .byte 0x83
          .byte 0x74
          .byte 0x58
          .byte 0x2c
          .byte 0x2c
          .byte 0x2e
          .byte 0x34
          .byte 0x1a
          .byte 0x1a
          .byte 0x2d
          .byte 0x36
          .byte 0x1b
          .byte 0x1b
          .byte 0xb2
          .byte 0xdc
          .byte 0x6e
          .byte 0x6e
          .byte 0xee
          .byte 0xb4
          .byte 0x5a
          .byte 0x5a
          .byte 0xfb
          .byte 0x5b
          .byte 0xa0
          .byte 0xa0
          .byte 0xf6
          .byte 0xa4
          .byte 0x52
          .byte 0x52
          .byte 0x4d
          .byte 0x76
          .byte 0x3b
          .byte 0x3b
          .byte 0x61
          .byte 0xb7
          .byte 0xd6
          .byte 0xd6
          .byte 0xce
          .byte 0x7d
          .byte 0xb3
          .byte 0xb3
          .byte 0x7b
          .byte 0x52
          .byte 0x29
          .byte 0x29
          .byte 0x3e
          .byte 0xdd
          .byte 0xe3
          .byte 0xe3
          .byte 0x71
          .byte 0x5e
          .byte 0x2f
          .byte 0x2f
          .byte 0x97
          .byte 0x13
          .byte 0x84
          .byte 0x84
          .byte 0xf5
          .byte 0xa6
          .byte 0x53
          .byte 0x53
          .byte 0x68
          .byte 0xb9
          .byte 0xd1
          .byte 0xd1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2c
          .byte 0xc1
          .byte 0xed
          .byte 0xed
          .byte 0x60
          .byte 0x40
          .byte 0x20
          .byte 0x20
          .byte 0x1f
          .byte 0xe3
          .byte 0xfc
          .byte 0xfc
          .byte 0xc8
          .byte 0x79
          .byte 0xb1
          .byte 0xb1
          .byte 0xed
          .byte 0xb6
          .byte 0x5b
          .byte 0x5b
          .byte 0xbe
          .byte 0xd4
          .byte 0x6a
          .byte 0x6a
          .byte 0x46
          .byte 0x8d
          .byte 0xcb
          .byte 0xcb
          .byte 0xd9
          .byte 0x67
          .byte 0xbe
          .byte 0xbe
          .byte 0x4b
          .byte 0x72
          .byte 0x39
          .byte 0x39
          .byte 0xde
          .byte 0x94
          .byte 0x4a
          .byte 0x4a
          .byte 0xd4
          .byte 0x98
          .byte 0x4c
          .byte 0x4c
          .byte 0xe8
          .byte 0xb0
          .byte 0x58
          .byte 0x58
          .byte 0x4a
          .byte 0x85
          .byte 0xcf
          .byte 0xcf
          .byte 0x6b
          .byte 0xbb
          .byte 0xd0
          .byte 0xd0
          .byte 0x2a
          .byte 0xc5
          .byte 0xef
          .byte 0xef
          .byte 0xe5
          .byte 0x4f
          .byte 0xaa
          .byte 0xaa
          .byte 0x16
          .byte 0xed
          .byte 0xfb
          .byte 0xfb
          .byte 0xc5
          .byte 0x86
          .byte 0x43
          .byte 0x43
          .byte 0xd7
          .byte 0x9a
          .byte 0x4d
          .byte 0x4d
          .byte 0x55
          .byte 0x66
          .byte 0x33
          .byte 0x33
          .byte 0x94
          .byte 0x11
          .byte 0x85
          .byte 0x85
          .byte 0xcf
          .byte 0x8a
          .byte 0x45
          .byte 0x45
          .byte 0x10
          .byte 0xe9
          .byte 0xf9
          .byte 0xf9
          .byte 0x6
          .byte 0x4
          .byte 0x2
          .byte 0x2
          .byte 0x81
          .byte 0xfe
          .byte 0x7f
          .byte 0x7f
          .byte 0xf0
          .byte 0xa0
          .byte 0x50
          .byte 0x50
          .byte 0x44
          .byte 0x78
          .byte 0x3c
          .byte 0x3c
          .byte 0xba
          .byte 0x25
          .byte 0x9f
          .byte 0x9f
          .byte 0xe3
          .byte 0x4b
          .byte 0xa8
          .byte 0xa8
          .byte 0xf3
          .byte 0xa2
          .byte 0x51
          .byte 0x51
          .byte 0xfe
          .byte 0x5d
          .byte 0xa3
          .byte 0xa3
          .byte 0xc0
          .byte 0x80
          .byte 0x40
          .byte 0x40
          .byte 0x8a
          .byte 0x5
          .byte 0x8f
          .byte 0x8f
          .byte 0xad
          .byte 0x3f
          .byte 0x92
          .byte 0x92
          .byte 0xbc
          .byte 0x21
          .byte 0x9d
          .byte 0x9d
          .byte 0x48
          .byte 0x70
          .byte 0x38
          .byte 0x38
          .byte 0x4
          .byte 0xf1
          .byte 0xf5
          .byte 0xf5
          .byte 0xdf
          .byte 0x63
          .byte 0xbc
          .byte 0xbc
          .byte 0xc1
          .byte 0x77
          .byte 0xb6
          .byte 0xb6
          .byte 0x75
          .byte 0xaf
          .byte 0xda
          .byte 0xda
          .byte 0x63
          .byte 0x42
          .byte 0x21
          .byte 0x21
          .byte 0x30
          .byte 0x20
          .byte 0x10
          .byte 0x10
          .byte 0x1a
          .byte 0xe5
          .byte 0xff
          .byte 0xff
          .byte 0xe
          .byte 0xfd
          .byte 0xf3
          .byte 0xf3
          .byte 0x6d
          .byte 0xbf
          .byte 0xd2
          .byte 0xd2
          .byte 0x4c
          .byte 0x81
          .byte 0xcd
          .byte 0xcd
          .byte 0x14
          .byte 0x18
          .byte 0xc
          .byte 0xc
          .byte 0x35
          .byte 0x26
          .byte 0x13
          .byte 0x13
          .byte 0x2f
          .byte 0xc3
          .byte 0xec
          .byte 0xec
          .byte 0xe1
          .byte 0xbe
          .byte 0x5f
          .byte 0x5f
          .byte 0xa2
          .byte 0x35
          .byte 0x97
          .byte 0x97
          .byte 0xcc
          .byte 0x88
          .byte 0x44
          .byte 0x44
          .byte 0x39
          .byte 0x2e
          .byte 0x17
          .byte 0x17
          .byte 0x57
          .byte 0x93
          .byte 0xc4
          .byte 0xc4
          .byte 0xf2
          .byte 0x55
          .byte 0xa7
          .byte 0xa7
          .byte 0x82
          .byte 0xfc
          .byte 0x7e
          .byte 0x7e
          .byte 0x47
          .byte 0x7a
          .byte 0x3d
          .byte 0x3d
          .byte 0xac
          .byte 0xc8
          .byte 0x64
          .byte 0x64
          .byte 0xe7
          .byte 0xba
          .byte 0x5d
          .byte 0x5d
          .byte 0x2b
          .byte 0x32
          .byte 0x19
          .byte 0x19
          .byte 0x95
          .byte 0xe6
          .byte 0x73
          .byte 0x73
          .byte 0xa0
          .byte 0xc0
          .byte 0x60
          .byte 0x60
          .byte 0x98
          .byte 0x19
          .byte 0x81
          .byte 0x81
          .byte 0xd1
          .byte 0x9e
          .byte 0x4f
          .byte 0x4f
          .byte 0x7f
          .byte 0xa3
          .byte 0xdc
          .byte 0xdc
          .byte 0x66
          .byte 0x44
          .byte 0x22
          .byte 0x22
          .byte 0x7e
          .byte 0x54
          .byte 0x2a
          .byte 0x2a
          .byte 0xab
          .byte 0x3b
          .byte 0x90
          .byte 0x90
          .byte 0x83
          .byte 0xb
          .byte 0x88
          .byte 0x88
          .byte 0xca
          .byte 0x8c
          .byte 0x46
          .byte 0x46
          .byte 0x29
          .byte 0xc7
          .byte 0xee
          .byte 0xee
          .byte 0xd3
          .byte 0x6b
          .byte 0xb8
          .byte 0xb8
          .byte 0x3c
          .byte 0x28
          .byte 0x14
          .byte 0x14
          .byte 0x79
          .byte 0xa7
          .byte 0xde
          .byte 0xde
          .byte 0xe2
          .byte 0xbc
          .byte 0x5e
          .byte 0x5e
          .byte 0x1d
          .byte 0x16
          .byte 0xb
          .byte 0xb
          .byte 0x76
          .byte 0xad
          .byte 0xdb
          .byte 0xdb
          .byte 0x3b
          .byte 0xdb
          .byte 0xe0
          .byte 0xe0
          .byte 0x56
          .byte 0x64
          .byte 0x32
          .byte 0x32
          .byte 0x4e
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x1e
          .byte 0x14
          .byte 0xa
          .byte 0xa
          .byte 0xdb
          .byte 0x92
          .byte 0x49
          .byte 0x49
          .byte 0xa
          .byte 0xc
          .byte 0x6
          .byte 0x6
          .byte 0x6c
          .byte 0x48
          .byte 0x24
          .byte 0x24
          .byte 0xe4
          .byte 0xb8
          .byte 0x5c
          .byte 0x5c
          .byte 0x5d
          .byte 0x9f
          .byte 0xc2
          .byte 0xc2
          .byte 0x6e
          .byte 0xbd
          .byte 0xd3
          .byte 0xd3
          .byte 0xef
          .byte 0x43
          .byte 0xac
          .byte 0xac
          .byte 0xa6
          .byte 0xc4
          .byte 0x62
          .byte 0x62
          .byte 0xa8
          .byte 0x39
          .byte 0x91
          .byte 0x91
          .byte 0xa4
          .byte 0x31
          .byte 0x95
          .byte 0x95
          .byte 0x37
          .byte 0xd3
          .byte 0xe4
          .byte 0xe4
          .byte 0x8b
          .byte 0xf2
          .byte 0x79
          .byte 0x79
          .byte 0x32
          .byte 0xd5
          .byte 0xe7
          .byte 0xe7
          .byte 0x43
          .byte 0x8b
          .byte 0xc8
          .byte 0xc8
          .byte 0x59
          .byte 0x6e
          .byte 0x37
          .byte 0x37
          .byte 0xb7
          .byte 0xda
          .byte 0x6d
          .byte 0x6d
          .byte 0x8c
          .byte 0x1
          .byte 0x8d
          .byte 0x8d
          .byte 0x64
          .byte 0xb1
          .byte 0xd5
          .byte 0xd5
          .byte 0xd2
          .byte 0x9c
          .byte 0x4e
          .byte 0x4e
          .byte 0xe0
          .byte 0x49
          .byte 0xa9
          .byte 0xa9
          .byte 0xb4
          .byte 0xd8
          .byte 0x6c
          .byte 0x6c
          .byte 0xfa
          .byte 0xac
          .byte 0x56
          .byte 0x56
          .byte 0x7
          .byte 0xf3
          .byte 0xf4
          .byte 0xf4
          .byte 0x25
          .byte 0xcf
          .byte 0xea
          .byte 0xea
          .byte 0xaf
          .byte 0xca
          .byte 0x65
          .byte 0x65
          .byte 0x8e
          .byte 0xf4
          .byte 0x7a
          .byte 0x7a
          .byte 0xe9
          .byte 0x47
          .byte 0xae
          .byte 0xae
          .byte 0x18
          .byte 0x10
          .byte 0x8
          .byte 0x8
          .byte 0xd5
          .byte 0x6f
          .byte 0xba
          .byte 0xba
          .byte 0x88
          .byte 0xf0
          .byte 0x78
          .byte 0x78
          .byte 0x6f
          .byte 0x4a
          .byte 0x25
          .byte 0x25
          .byte 0x72
          .byte 0x5c
          .byte 0x2e
          .byte 0x2e
          .byte 0x24
          .byte 0x38
          .byte 0x1c
          .byte 0x1c
          .byte 0xf1
          .byte 0x57
          .byte 0xa6
          .byte 0xa6
          .byte 0xc7
          .byte 0x73
          .byte 0xb4
          .byte 0xb4
          .byte 0x51
          .byte 0x97
          .byte 0xc6
          .byte 0xc6
          .byte 0x23
          .byte 0xcb
          .byte 0xe8
          .byte 0xe8
          .byte 0x7c
          .byte 0xa1
          .byte 0xdd
          .byte 0xdd
          .byte 0x9c
          .byte 0xe8
          .byte 0x74
          .byte 0x74
          .byte 0x21
          .byte 0x3e
          .byte 0x1f
          .byte 0x1f
          .byte 0xdd
          .byte 0x96
          .byte 0x4b
          .byte 0x4b
          .byte 0xdc
          .byte 0x61
          .byte 0xbd
          .byte 0xbd
          .byte 0x86
          .byte 0xd
          .byte 0x8b
          .byte 0x8b
          .byte 0x85
          .byte 0xf
          .byte 0x8a
          .byte 0x8a
          .byte 0x90
          .byte 0xe0
          .byte 0x70
          .byte 0x70
          .byte 0x42
          .byte 0x7c
          .byte 0x3e
          .byte 0x3e
          .byte 0xc4
          .byte 0x71
          .byte 0xb5
          .byte 0xb5
          .byte 0xaa
          .byte 0xcc
          .byte 0x66
          .byte 0x66
          .byte 0xd8
          .byte 0x90
          .byte 0x48
          .byte 0x48
          .byte 0x5
          .byte 0x6
          .byte 0x3
          .byte 0x3
          .byte 0x1
          .byte 0xf7
          .byte 0xf6
          .byte 0xf6
          .byte 0x12
          .byte 0x1c
          .byte 0xe
          .byte 0xe
          .byte 0xa3
          .byte 0xc2
          .byte 0x61
          .byte 0x61
          .byte 0x5f
          .byte 0x6a
          .byte 0x35
          .byte 0x35
          .byte 0xf9
          .byte 0xae
          .byte 0x57
          .byte 0x57
          .byte 0xd0
          .byte 0x69
          .byte 0xb9
          .byte 0xb9
          .byte 0x91
          .byte 0x17
          .byte 0x86
          .byte 0x86
          .byte 0x58
          .byte 0x99
          .byte 0xc1
          .byte 0xc1
          .byte 0x27
          .byte 0x3a
          .byte 0x1d
          .byte 0x1d
          .byte 0xb9
          .byte 0x27
          .byte 0x9e
          .byte 0x9e
          .byte 0x38
          .byte 0xd9
          .byte 0xe1
          .byte 0xe1
          .byte 0x13
          .byte 0xeb
          .byte 0xf8
          .byte 0xf8
          .byte 0xb3
          .byte 0x2b
          .byte 0x98
          .byte 0x98
          .byte 0x33
          .byte 0x22
          .byte 0x11
          .byte 0x11
          .byte 0xbb
          .byte 0xd2
          .byte 0x69
          .byte 0x69
          .byte 0x70
          .byte 0xa9
          .byte 0xd9
          .byte 0xd9
          .byte 0x89
          .byte 0x7
          .byte 0x8e
          .byte 0x8e
          .byte 0xa7
          .byte 0x33
          .byte 0x94
          .byte 0x94
          .byte 0xb6
          .byte 0x2d
          .byte 0x9b
          .byte 0x9b
          .byte 0x22
          .byte 0x3c
          .byte 0x1e
          .byte 0x1e
          .byte 0x92
          .byte 0x15
          .byte 0x87
          .byte 0x87
          .byte 0x20
          .byte 0xc9
          .byte 0xe9
          .byte 0xe9
          .byte 0x49
          .byte 0x87
          .byte 0xce
          .byte 0xce
          .byte 0xff
          .byte 0xaa
          .byte 0x55
          .byte 0x55
          .byte 0x78
          .byte 0x50
          .byte 0x28
          .byte 0x28
          .byte 0x7a
          .byte 0xa5
          .byte 0xdf
          .byte 0xdf
          .byte 0x8f
          .byte 0x3
          .byte 0x8c
          .byte 0x8c
          .byte 0xf8
          .byte 0x59
          .byte 0xa1
          .byte 0xa1
          .byte 0x80
          .byte 0x9
          .byte 0x89
          .byte 0x89
          .byte 0x17
          .byte 0x1a
          .byte 0xd
          .byte 0xd
          .byte 0xda
          .byte 0x65
          .byte 0xbf
          .byte 0xbf
          .byte 0x31
          .byte 0xd7
          .byte 0xe6
          .byte 0xe6
          .byte 0xc6
          .byte 0x84
          .byte 0x42
          .byte 0x42
          .byte 0xb8
          .byte 0xd0
          .byte 0x68
          .byte 0x68
          .byte 0xc3
          .byte 0x82
          .byte 0x41
          .byte 0x41
          .byte 0xb0
          .byte 0x29
          .byte 0x99
          .byte 0x99
          .byte 0x77
          .byte 0x5a
          .byte 0x2d
          .byte 0x2d
          .byte 0x11
          .byte 0x1e
          .byte 0xf
          .byte 0xf
          .byte 0xcb
          .byte 0x7b
          .byte 0xb0
          .byte 0xb0
          .byte 0xfc
          .byte 0xa8
          .byte 0x54
          .byte 0x54
          .byte 0xd6
          .byte 0x6d
          .byte 0xbb
          .byte 0xbb
          .byte 0x3a
          .byte 0x2c
          .byte 0x16
          .byte 0x16
.L_45cc20:
          .byte 0xc6
          .byte 0x63
          .byte 0x63
          .byte 0xa5
          .byte 0xf8
          .byte 0x7c
          .byte 0x7c
          .byte 0x84
          .byte 0xee
          .byte 0x77
          .byte 0x77
          .byte 0x99
          .byte 0xf6
          .byte 0x7b
          .byte 0x7b
          .byte 0x8d
          .byte 0xff
          .byte 0xf2
          .byte 0xf2
          .byte 0xd
          .byte 0xd6
          .byte 0x6b
          .byte 0x6b
          .byte 0xbd
          .byte 0xde
          .byte 0x6f
          .byte 0x6f
          .byte 0xb1
          .byte 0x91
          .byte 0xc5
          .byte 0xc5
          .byte 0x54
          .byte 0x60
          .byte 0x30
          .byte 0x30
          .byte 0x50
          .byte 0x2
          .byte 0x1
          .byte 0x1
          .byte 0x3
          .byte 0xce
          .byte 0x67
          .byte 0x67
          .byte 0xa9
          .byte 0x56
          .byte 0x2b
          .byte 0x2b
          .byte 0x7d
          .byte 0xe7
          .byte 0xfe
          .byte 0xfe
          .byte 0x19
          .byte 0xb5
          .byte 0xd7
          .byte 0xd7
          .byte 0x62
          .byte 0x4d
          .byte 0xab
          .byte 0xab
          .byte 0xe6
          .byte 0xec
          .byte 0x76
          .byte 0x76
          .byte 0x9a
          .byte 0x8f
          .byte 0xca
          .byte 0xca
          .byte 0x45
          .byte 0x1f
          .byte 0x82
          .byte 0x82
          .byte 0x9d
          .byte 0x89
          .byte 0xc9
          .byte 0xc9
          .byte 0x40
          .byte 0xfa
          .byte 0x7d
          .byte 0x7d
          .byte 0x87
          .byte 0xef
          .byte 0xfa
          .byte 0xfa
          .byte 0x15
          .byte 0xb2
          .byte 0x59
          .byte 0x59
          .byte 0xeb
          .byte 0x8e
          .byte 0x47
          .byte 0x47
          .byte 0xc9
          .byte 0xfb
          .byte 0xf0
          .byte 0xf0
          .byte 0xb
          .byte 0x41
          .byte 0xad
          .byte 0xad
          .byte 0xec
          .byte 0xb3
          .byte 0xd4
          .byte 0xd4
          .byte 0x67
          .byte 0x5f
          .byte 0xa2
          .byte 0xa2
          .byte 0xfd
          .byte 0x45
          .byte 0xaf
          .byte 0xaf
          .byte 0xea
          .byte 0x23
          .byte 0x9c
          .byte 0x9c
          .byte 0xbf
          .byte 0x53
          .byte 0xa4
          .byte 0xa4
          .byte 0xf7
          .byte 0xe4
          .byte 0x72
          .byte 0x72
          .byte 0x96
          .byte 0x9b
          .byte 0xc0
          .byte 0xc0
          .byte 0x5b
          .byte 0x75
          .byte 0xb7
          .byte 0xb7
          .byte 0xc2
          .byte 0xe1
          .byte 0xfd
          .byte 0xfd
          .byte 0x1c
          .byte 0x3d
          .byte 0x93
          .byte 0x93
          .byte 0xae
          .byte 0x4c
          .byte 0x26
          .byte 0x26
          .byte 0x6a
          .byte 0x6c
          .byte 0x36
          .byte 0x36
          .byte 0x5a
          .byte 0x7e
          .byte 0x3f
          .byte 0x3f
          .byte 0x41
          .byte 0xf5
          .byte 0xf7
          .byte 0xf7
          .byte 0x2
          .byte 0x83
          .byte 0xcc
          .byte 0xcc
          .byte 0x4f
          .byte 0x68
          .byte 0x34
          .byte 0x34
          .byte 0x5c
          .byte 0x51
          .byte 0xa5
          .byte 0xa5
          .byte 0xf4
          .byte 0xd1
          .byte 0xe5
          .byte 0xe5
          .byte 0x34
          .byte 0xf9
          .byte 0xf1
          .byte 0xf1
          .byte 0x8
          .byte 0xe2
          .byte 0x71
          .byte 0x71
          .byte 0x93
          .byte 0xab
          .byte 0xd8
          .byte 0xd8
          .byte 0x73
          .byte 0x62
          .byte 0x31
          .byte 0x31
          .byte 0x53
          .byte 0x2a
          .byte 0x15
          .byte 0x15
          .byte 0x3f
          .byte 0x8
          .byte 0x4
          .byte 0x4
          .byte 0xc
          .byte 0x95
          .byte 0xc7
          .byte 0xc7
          .byte 0x52
          .byte 0x46
          .byte 0x23
          .byte 0x23
          .byte 0x65
          .byte 0x9d
          .byte 0xc3
          .byte 0xc3
          .byte 0x5e
          .byte 0x30
          .byte 0x18
          .byte 0x18
          .byte 0x28
          .byte 0x37
          .byte 0x96
          .byte 0x96
          .byte 0xa1
          .byte 0xa
          .byte 0x5
          .byte 0x5
          .byte 0xf
          .byte 0x2f
          .byte 0x9a
          .byte 0x9a
          .byte 0xb5
          .byte 0xe
          .byte 0x7
          .byte 0x7
          .byte 0x9
          .byte 0x24
          .byte 0x12
          .byte 0x12
          .byte 0x36
          .byte 0x1b
          .byte 0x80
          .byte 0x80
          .byte 0x9b
          .byte 0xdf
          .byte 0xe2
          .byte 0xe2
          .byte 0x3d
          .byte 0xcd
          .byte 0xeb
          .byte 0xeb
          .byte 0x26
          .byte 0x4e
          .byte 0x27
          .byte 0x27
          .byte 0x69
          .byte 0x7f
          .byte 0xb2
          .byte 0xb2
          .byte 0xcd
          .byte 0xea
          .byte 0x75
          .byte 0x75
          .byte 0x9f
          .byte 0x12
          .byte 0x9
          .byte 0x9
          .byte 0x1b
          .byte 0x1d
          .byte 0x83
          .byte 0x83
          .byte 0x9e
          .byte 0x58
          .byte 0x2c
          .byte 0x2c
          .byte 0x74
          .byte 0x34
          .byte 0x1a
          .byte 0x1a
          .byte 0x2e
          .byte 0x36
          .byte 0x1b
          .byte 0x1b
          .byte 0x2d
          .byte 0xdc
          .byte 0x6e
          .byte 0x6e
          .byte 0xb2
          .byte 0xb4
          .byte 0x5a
          .byte 0x5a
          .byte 0xee
          .byte 0x5b
          .byte 0xa0
          .byte 0xa0
          .byte 0xfb
          .byte 0xa4
          .byte 0x52
          .byte 0x52
          .byte 0xf6
          .byte 0x76
          .byte 0x3b
          .byte 0x3b
          .byte 0x4d
          .byte 0xb7
          .byte 0xd6
          .byte 0xd6
          .byte 0x61
          .byte 0x7d
          .byte 0xb3
          .byte 0xb3
          .byte 0xce
          .byte 0x52
          .byte 0x29
          .byte 0x29
          .byte 0x7b
          .byte 0xdd
          .byte 0xe3
          .byte 0xe3
          .byte 0x3e
          .byte 0x5e
          .byte 0x2f
          .byte 0x2f
          .byte 0x71
          .byte 0x13
          .byte 0x84
          .byte 0x84
          .byte 0x97
          .byte 0xa6
          .byte 0x53
          .byte 0x53
          .byte 0xf5
          .byte 0xb9
          .byte 0xd1
          .byte 0xd1
          .byte 0x68
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc1
          .byte 0xed
          .byte 0xed
          .byte 0x2c
          .byte 0x40
          .byte 0x20
          .byte 0x20
          .byte 0x60
          .byte 0xe3
          .byte 0xfc
          .byte 0xfc
          .byte 0x1f
          .byte 0x79
          .byte 0xb1
          .byte 0xb1
          .byte 0xc8
          .byte 0xb6
          .byte 0x5b
          .byte 0x5b
          .byte 0xed
          .byte 0xd4
          .byte 0x6a
          .byte 0x6a
          .byte 0xbe
          .byte 0x8d
          .byte 0xcb
          .byte 0xcb
          .byte 0x46
          .byte 0x67
          .byte 0xbe
          .byte 0xbe
          .byte 0xd9
          .byte 0x72
          .byte 0x39
          .byte 0x39
          .byte 0x4b
          .byte 0x94
          .byte 0x4a
          .byte 0x4a
          .byte 0xde
          .byte 0x98
          .byte 0x4c
          .byte 0x4c
          .byte 0xd4
          .byte 0xb0
          .byte 0x58
          .byte 0x58
          .byte 0xe8
          .byte 0x85
          .byte 0xcf
          .byte 0xcf
          .byte 0x4a
          .byte 0xbb
          .byte 0xd0
          .byte 0xd0
          .byte 0x6b
          .byte 0xc5
          .byte 0xef
          .byte 0xef
          .byte 0x2a
          .byte 0x4f
          .byte 0xaa
          .byte 0xaa
          .byte 0xe5
          .byte 0xed
          .byte 0xfb
          .byte 0xfb
          .byte 0x16
          .byte 0x86
          .byte 0x43
          .byte 0x43
          .byte 0xc5
          .byte 0x9a
          .byte 0x4d
          .byte 0x4d
          .byte 0xd7
          .byte 0x66
          .byte 0x33
          .byte 0x33
          .byte 0x55
          .byte 0x11
          .byte 0x85
          .byte 0x85
          .byte 0x94
          .byte 0x8a
          .byte 0x45
          .byte 0x45
          .byte 0xcf
          .byte 0xe9
          .byte 0xf9
          .byte 0xf9
          .byte 0x10
          .byte 0x4
          .byte 0x2
          .byte 0x2
          .byte 0x6
          .byte 0xfe
          .byte 0x7f
          .byte 0x7f
          .byte 0x81
          .byte 0xa0
          .byte 0x50
          .byte 0x50
          .byte 0xf0
          .byte 0x78
          .byte 0x3c
          .byte 0x3c
          .byte 0x44
          .byte 0x25
          .byte 0x9f
          .byte 0x9f
          .byte 0xba
          .byte 0x4b
          .byte 0xa8
          .byte 0xa8
          .byte 0xe3
          .byte 0xa2
          .byte 0x51
          .byte 0x51
          .byte 0xf3
          .byte 0x5d
          .byte 0xa3
          .byte 0xa3
          .byte 0xfe
          .byte 0x80
          .byte 0x40
          .byte 0x40
          .byte 0xc0
          .byte 0x5
          .byte 0x8f
          .byte 0x8f
          .byte 0x8a
          .byte 0x3f
          .byte 0x92
          .byte 0x92
          .byte 0xad
          .byte 0x21
          .byte 0x9d
          .byte 0x9d
          .byte 0xbc
          .byte 0x70
          .byte 0x38
          .byte 0x38
          .byte 0x48
          .byte 0xf1
          .byte 0xf5
          .byte 0xf5
          .byte 0x4
          .byte 0x63
          .byte 0xbc
          .byte 0xbc
          .byte 0xdf
          .byte 0x77
          .byte 0xb6
          .byte 0xb6
          .byte 0xc1
          .byte 0xaf
          .byte 0xda
          .byte 0xda
          .byte 0x75
          .byte 0x42
          .byte 0x21
          .byte 0x21
          .byte 0x63
          .byte 0x20
          .byte 0x10
          .byte 0x10
          .byte 0x30
          .byte 0xe5
          .byte 0xff
          .byte 0xff
          .byte 0x1a
          .byte 0xfd
          .byte 0xf3
          .byte 0xf3
          .byte 0xe
          .byte 0xbf
          .byte 0xd2
          .byte 0xd2
          .byte 0x6d
          .byte 0x81
          .byte 0xcd
          .byte 0xcd
          .byte 0x4c
          .byte 0x18
          .byte 0xc
          .byte 0xc
          .byte 0x14
          .byte 0x26
          .byte 0x13
          .byte 0x13
          .byte 0x35
          .byte 0xc3
          .byte 0xec
          .byte 0xec
          .byte 0x2f
          .byte 0xbe
          .byte 0x5f
          .byte 0x5f
          .byte 0xe1
          .byte 0x35
          .byte 0x97
          .byte 0x97
          .byte 0xa2
          .byte 0x88
          .byte 0x44
          .byte 0x44
          .byte 0xcc
          .byte 0x2e
          .byte 0x17
          .byte 0x17
          .byte 0x39
          .byte 0x93
          .byte 0xc4
          .byte 0xc4
          .byte 0x57
          .byte 0x55
          .byte 0xa7
          .byte 0xa7
          .byte 0xf2
          .byte 0xfc
          .byte 0x7e
          .byte 0x7e
          .byte 0x82
          .byte 0x7a
          .byte 0x3d
          .byte 0x3d
          .byte 0x47
          .byte 0xc8
          .byte 0x64
          .byte 0x64
          .byte 0xac
          .byte 0xba
          .byte 0x5d
          .byte 0x5d
          .byte 0xe7
          .byte 0x32
          .byte 0x19
          .byte 0x19
          .byte 0x2b
          .byte 0xe6
          .byte 0x73
          .byte 0x73
          .byte 0x95
          .byte 0xc0
          .byte 0x60
          .byte 0x60
          .byte 0xa0
          .byte 0x19
          .byte 0x81
          .byte 0x81
          .byte 0x98
          .byte 0x9e
          .byte 0x4f
          .byte 0x4f
          .byte 0xd1
          .byte 0xa3
          .byte 0xdc
          .byte 0xdc
          .byte 0x7f
          .byte 0x44
          .byte 0x22
          .byte 0x22
          .byte 0x66
          .byte 0x54
          .byte 0x2a
          .byte 0x2a
          .byte 0x7e
          .byte 0x3b
          .byte 0x90
          .byte 0x90
          .byte 0xab
          .byte 0xb
          .byte 0x88
          .byte 0x88
          .byte 0x83
          .byte 0x8c
          .byte 0x46
          .byte 0x46
          .byte 0xca
          .byte 0xc7
          .byte 0xee
          .byte 0xee
          .byte 0x29
          .byte 0x6b
          .byte 0xb8
          .byte 0xb8
          .byte 0xd3
          .byte 0x28
          .byte 0x14
          .byte 0x14
          .byte 0x3c
          .byte 0xa7
          .byte 0xde
          .byte 0xde
          .byte 0x79
          .byte 0xbc
          .byte 0x5e
          .byte 0x5e
          .byte 0xe2
          .byte 0x16
          .byte 0xb
          .byte 0xb
          .byte 0x1d
          .byte 0xad
          .byte 0xdb
          .byte 0xdb
          .byte 0x76
          .byte 0xdb
          .byte 0xe0
          .byte 0xe0
          .byte 0x3b
          .byte 0x64
          .byte 0x32
          .byte 0x32
          .byte 0x56
          .byte 0x74
          .byte 0x3a
          .byte 0x3a
          .byte 0x4e
          .byte 0x14
          .byte 0xa
          .byte 0xa
          .byte 0x1e
          .byte 0x92
          .byte 0x49
          .byte 0x49
          .byte 0xdb
          .byte 0xc
          .byte 0x6
          .byte 0x6
          .byte 0xa
          .byte 0x48
          .byte 0x24
          .byte 0x24
          .byte 0x6c
          .byte 0xb8
          .byte 0x5c
          .byte 0x5c
          .byte 0xe4
          .byte 0x9f
          .byte 0xc2
          .byte 0xc2
          .byte 0x5d
          .byte 0xbd
          .byte 0xd3
          .byte 0xd3
          .byte 0x6e
          .byte 0x43
          .byte 0xac
          .byte 0xac
          .byte 0xef
          .byte 0xc4
          .byte 0x62
          .byte 0x62
          .byte 0xa6
          .byte 0x39
          .byte 0x91
          .byte 0x91
          .byte 0xa8
          .byte 0x31
          .byte 0x95
          .byte 0x95
          .byte 0xa4
          .byte 0xd3
          .byte 0xe4
          .byte 0xe4
          .byte 0x37
          .byte 0xf2
          .byte 0x79
          .byte 0x79
          .byte 0x8b
          .byte 0xd5
          .byte 0xe7
          .byte 0xe7
          .byte 0x32
          .byte 0x8b
          .byte 0xc8
          .byte 0xc8
          .byte 0x43
          .byte 0x6e
          .byte 0x37
          .byte 0x37
          .byte 0x59
          .byte 0xda
          .byte 0x6d
          .byte 0x6d
          .byte 0xb7
          .byte 0x1
          .byte 0x8d
          .byte 0x8d
          .byte 0x8c
          .byte 0xb1
          .byte 0xd5
          .byte 0xd5
          .byte 0x64
          .byte 0x9c
          .byte 0x4e
          .byte 0x4e
          .byte 0xd2
          .byte 0x49
          .byte 0xa9
          .byte 0xa9
          .byte 0xe0
          .byte 0xd8
          .byte 0x6c
          .byte 0x6c
          .byte 0xb4
          .byte 0xac
          .byte 0x56
          .byte 0x56
          .byte 0xfa
          .byte 0xf3
          .byte 0xf4
          .byte 0xf4
          .byte 0x7
          .byte 0xcf
          .byte 0xea
          .byte 0xea
          .byte 0x25
          .byte 0xca
          .byte 0x65
          .byte 0x65
          .byte 0xaf
          .byte 0xf4
          .byte 0x7a
          .byte 0x7a
          .byte 0x8e
          .byte 0x47
          .byte 0xae
          .byte 0xae
          .byte 0xe9
          .byte 0x10
          .byte 0x8
          .byte 0x8
          .byte 0x18
          .byte 0x6f
          .byte 0xba
          .byte 0xba
          .byte 0xd5
          .byte 0xf0
          .byte 0x78
          .byte 0x78
          .byte 0x88
          .byte 0x4a
          .byte 0x25
          .byte 0x25
          .byte 0x6f
          .byte 0x5c
          .byte 0x2e
          .byte 0x2e
          .byte 0x72
          .byte 0x38
          .byte 0x1c
          .byte 0x1c
          .byte 0x24
          .byte 0x57
          .byte 0xa6
          .byte 0xa6
          .byte 0xf1
          .byte 0x73
          .byte 0xb4
          .byte 0xb4
          .byte 0xc7
          .byte 0x97
          .byte 0xc6
          .byte 0xc6
          .byte 0x51
          .byte 0xcb
          .byte 0xe8
          .byte 0xe8
          .byte 0x23
          .byte 0xa1
          .byte 0xdd
          .byte 0xdd
          .byte 0x7c
          .byte 0xe8
          .byte 0x74
          .byte 0x74
          .byte 0x9c
          .byte 0x3e
          .byte 0x1f
          .byte 0x1f
          .byte 0x21
          .byte 0x96
          .byte 0x4b
          .byte 0x4b
          .byte 0xdd
          .byte 0x61
          .byte 0xbd
          .byte 0xbd
          .byte 0xdc
          .byte 0xd
          .byte 0x8b
          .byte 0x8b
          .byte 0x86
          .byte 0xf
          .byte 0x8a
          .byte 0x8a
          .byte 0x85
          .byte 0xe0
          .byte 0x70
          .byte 0x70
          .byte 0x90
          .byte 0x7c
          .byte 0x3e
          .byte 0x3e
          .byte 0x42
          .byte 0x71
          .byte 0xb5
          .byte 0xb5
          .byte 0xc4
          .byte 0xcc
          .byte 0x66
          .byte 0x66
          .byte 0xaa
          .byte 0x90
          .byte 0x48
          .byte 0x48
          .byte 0xd8
          .byte 0x6
          .byte 0x3
          .byte 0x3
          .byte 0x5
          .byte 0xf7
          .byte 0xf6
          .byte 0xf6
          .byte 0x1
          .byte 0x1c
          .byte 0xe
          .byte 0xe
          .byte 0x12
          .byte 0xc2
          .byte 0x61
          .byte 0x61
          .byte 0xa3
          .byte 0x6a
          .byte 0x35
          .byte 0x35
          .byte 0x5f
          .byte 0xae
          .byte 0x57
          .byte 0x57
          .byte 0xf9
          .byte 0x69
          .byte 0xb9
          .byte 0xb9
          .byte 0xd0
          .byte 0x17
          .byte 0x86
          .byte 0x86
          .byte 0x91
          .byte 0x99
          .byte 0xc1
          .byte 0xc1
          .byte 0x58
          .byte 0x3a
          .byte 0x1d
          .byte 0x1d
          .byte 0x27
          .byte 0x27
          .byte 0x9e
          .byte 0x9e
          .byte 0xb9
          .byte 0xd9
          .byte 0xe1
          .byte 0xe1
          .byte 0x38
          .byte 0xeb
          .byte 0xf8
          .byte 0xf8
          .byte 0x13
          .byte 0x2b
          .byte 0x98
          .byte 0x98
          .byte 0xb3
          .byte 0x22
          .byte 0x11
          .byte 0x11
          .byte 0x33
          .byte 0xd2
          .byte 0x69
          .byte 0x69
          .byte 0xbb
          .byte 0xa9
          .byte 0xd9
          .byte 0xd9
          .byte 0x70
          .byte 0x7
          .byte 0x8e
          .byte 0x8e
          .byte 0x89
          .byte 0x33
          .byte 0x94
          .byte 0x94
          .byte 0xa7
          .byte 0x2d
          .byte 0x9b
          .byte 0x9b
          .byte 0xb6
          .byte 0x3c
          .byte 0x1e
          .byte 0x1e
          .byte 0x22
          .byte 0x15
          .byte 0x87
          .byte 0x87
          .byte 0x92
          .byte 0xc9
          .byte 0xe9
          .byte 0xe9
          .byte 0x20
          .byte 0x87
          .byte 0xce
          .byte 0xce
          .byte 0x49
          .byte 0xaa
          .byte 0x55
          .byte 0x55
          .byte 0xff
          .byte 0x50
          .byte 0x28
          .byte 0x28
          .byte 0x78
          .byte 0xa5
          .byte 0xdf
          .byte 0xdf
          .byte 0x7a
          .byte 0x3
          .byte 0x8c
          .byte 0x8c
          .byte 0x8f
          .byte 0x59
          .byte 0xa1
          .byte 0xa1
          .byte 0xf8
          .byte 0x9
          .byte 0x89
          .byte 0x89
          .byte 0x80
          .byte 0x1a
          .byte 0xd
          .byte 0xd
          .byte 0x17
          .byte 0x65
          .byte 0xbf
          .byte 0xbf
          .byte 0xda
          .byte 0xd7
          .byte 0xe6
          .byte 0xe6
          .byte 0x31
          .byte 0x84
          .byte 0x42
          .byte 0x42
          .byte 0xc6
          .byte 0xd0
          .byte 0x68
          .byte 0x68
          .byte 0xb8
          .byte 0x82
          .byte 0x41
          .byte 0x41
          .byte 0xc3
          .byte 0x29
          .byte 0x99
          .byte 0x99
          .byte 0xb0
          .byte 0x5a
          .byte 0x2d
          .byte 0x2d
          .byte 0x77
          .byte 0x1e
          .byte 0xf
          .byte 0xf
          .byte 0x11
          .byte 0x7b
          .byte 0xb0
          .byte 0xb0
          .byte 0xcb
          .byte 0xa8
          .byte 0x54
          .byte 0x54
          .byte 0xfc
          .byte 0x6d
          .byte 0xbb
          .byte 0xbb
          .byte 0xd6
          .byte 0x2c
          .byte 0x16
          .byte 0x16
          .byte 0x3a
.L_45d020:
          .byte 0x63
          .byte 0x7c
          .byte 0x77
          .byte 0x7b
          .byte 0xf2
          .byte 0x6b
          .byte 0x6f
          .byte 0xc5
          .byte 0x30
          .byte 0x1
          .byte 0x67
          .byte 0x2b
          .byte 0xfe
          .byte 0xd7
          .byte 0xab
          .byte 0x76
          .byte 0xca
          .byte 0x82
          .byte 0xc9
          .byte 0x7d
          .byte 0xfa
          .byte 0x59
          .byte 0x47
          .byte 0xf0
          .byte 0xad
          .byte 0xd4
          .byte 0xa2
          .byte 0xaf
          .byte 0x9c
          .byte 0xa4
          .byte 0x72
          .byte 0xc0
          .byte 0xb7
          .byte 0xfd
          .byte 0x93
          .byte 0x26
          .byte 0x36
          .byte 0x3f
          .byte 0xf7
          .byte 0xcc
          .byte 0x34
          .byte 0xa5
          .byte 0xe5
          .byte 0xf1
          .byte 0x71
          .byte 0xd8
          .byte 0x31
          .byte 0x15
          .byte 0x4
          .byte 0xc7
          .byte 0x23
          .byte 0xc3
          .byte 0x18
          .byte 0x96
          .byte 0x5
          .byte 0x9a
          .byte 0x7
          .byte 0x12
          .byte 0x80
          .byte 0xe2
          .byte 0xeb
          .byte 0x27
          .byte 0xb2
          .byte 0x75
          .byte 0x9
          .byte 0x83
          .byte 0x2c
          .byte 0x1a
          .byte 0x1b
          .byte 0x6e
          .byte 0x5a
          .byte 0xa0
          .byte 0x52
          .byte 0x3b
          .byte 0xd6
          .byte 0xb3
          .byte 0x29
          .byte 0xe3
          .byte 0x2f
          .byte 0x84
          .byte 0x53
          .byte 0xd1
          .byte 0x0
          .byte 0xed
          .byte 0x20
          .byte 0xfc
          .byte 0xb1
          .byte 0x5b
          .byte 0x6a
          .byte 0xcb
          .byte 0xbe
          .byte 0x39
          .byte 0x4a
          .byte 0x4c
          .byte 0x58
          .byte 0xcf
          .byte 0xd0
          .byte 0xef
          .byte 0xaa
          .byte 0xfb
          .byte 0x43
          .byte 0x4d
          .byte 0x33
          .byte 0x85
          .byte 0x45
          .byte 0xf9
          .byte 0x2
          .byte 0x7f
          .byte 0x50
          .byte 0x3c
          .byte 0x9f
          .byte 0xa8
          .byte 0x51
          .byte 0xa3
          .byte 0x40
          .byte 0x8f
          .byte 0x92
          .byte 0x9d
          .byte 0x38
          .byte 0xf5
          .byte 0xbc
          .byte 0xb6
          .byte 0xda
          .byte 0x21
          .byte 0x10
          .byte 0xff
          .byte 0xf3
          .byte 0xd2
          .byte 0xcd
          .byte 0xc
          .byte 0x13
          .byte 0xec
          .byte 0x5f
          .byte 0x97
          .byte 0x44
          .byte 0x17
          .byte 0xc4
          .byte 0xa7
          .byte 0x7e
          .byte 0x3d
          .byte 0x64
          .byte 0x5d
          .byte 0x19
          .byte 0x73
          .byte 0x60
          .byte 0x81
          .byte 0x4f
          .byte 0xdc
          .byte 0x22
          .byte 0x2a
          .byte 0x90
          .byte 0x88
          .byte 0x46
          .byte 0xee
          .byte 0xb8
          .byte 0x14
          .byte 0xde
          .byte 0x5e
          .byte 0xb
          .byte 0xdb
          .byte 0xe0
          .byte 0x32
          .byte 0x3a
          .byte 0xa
          .byte 0x49
          .byte 0x6
          .byte 0x24
          .byte 0x5c
          .byte 0xc2
          .byte 0xd3
          .byte 0xac
          .byte 0x62
          .byte 0x91
          .byte 0x95
          .byte 0xe4
          .byte 0x79
          .byte 0xe7
          .byte 0xc8
          .byte 0x37
          .byte 0x6d
          .byte 0x8d
          .byte 0xd5
          .byte 0x4e
          .byte 0xa9
          .byte 0x6c
          .byte 0x56
          .byte 0xf4
          .byte 0xea
          .byte 0x65
          .byte 0x7a
          .byte 0xae
          .byte 0x8
          .byte 0xba
          .byte 0x78
          .byte 0x25
          .byte 0x2e
          .byte 0x1c
          .byte 0xa6
          .byte 0xb4
          .byte 0xc6
          .byte 0xe8
          .byte 0xdd
          .byte 0x74
          .byte 0x1f
          .byte 0x4b
          .byte 0xbd
          .byte 0x8b
          .byte 0x8a
          .byte 0x70
          .byte 0x3e
          .byte 0xb5
          .byte 0x66
          .byte 0x48
          .byte 0x3
          .byte 0xf6
          .byte 0xe
          .byte 0x61
          .byte 0x35
          .byte 0x57
          .byte 0xb9
          .byte 0x86
          .byte 0xc1
          .byte 0x1d
          .byte 0x9e
          .byte 0xe1
          .byte 0xf8
          .byte 0x98
          .byte 0x11
          .byte 0x69
          .byte 0xd9
          .byte 0x8e
          .byte 0x94
          .byte 0x9b
          .byte 0x1e
          .byte 0x87
          .byte 0xe9
          .byte 0xce
          .byte 0x55
          .byte 0x28
          .byte 0xdf
          .byte 0x8c
          .byte 0xa1
          .byte 0x89
          .byte 0xd
          .byte 0xbf
          .byte 0xe6
          .byte 0x42
          .byte 0x68
          .byte 0x41
          .byte 0x99
          .byte 0x2d
          .byte 0xf
          .byte 0xb0
          .byte 0x54
          .byte 0xbb
          .byte 0x16
.L_45d120:
          .string "value of \'%s\' (%d bits) is:\n"
.L_45d13d:
          .string " %02x"
.L_45d143:
          .string " 00"
.L_45d147:
          .string "%s() returned %d (-0x%04x)\n"
.L_45d163:
          .byte 0x64
          .byte 0x75
          .byte 0x6d
          .byte 0x70
          .byte 0x69
          .byte 0x6e
          .byte 0x67
          .byte 0x20
          .byte 0x27
          .byte 0x25
          .byte 0x73
          .byte 0x27
          .byte 0x20
          .byte 0x28
          .byte 0x25
          .byte 0x75
          .byte 0x20
          .byte 0x62
          .byte 0x79
          .byte 0x74
          .byte 0x65
          .byte 0x73
          .byte 0x29
.L_45d17a:
          .byte 0xa
.L_45d17b:
          .zero 1
.L_45d17c:
          .string "  %s\n"
.L_45d182:
          .string "%04x: "
.L_45d189:
          .byte 0x20
          .byte 0x20
.L_45d18b:
          .string " "
.L_45d18d:
          .string "%s(X)"
.L_45d193:
          .string "%s(Y)"
.L_45d199:
          .string "server state: %d"
.L_45d1aa:
          .string "=> parse client hello"
.L_45d1c0:
          .string "mbedtls_ssl_fetch_input"
.L_45d1d8:
          .string "bad client hello message"
.L_45d1f1:
          .string "replayed record, discarding"
.L_45d20d:
          .string "record contents"
.L_45d21d:
          .string "client hello, version"
.L_45d233:
          .string "client hello, random bytes"
.L_45d24e:
          .string "client hello, session id"
.L_45d267:
          .byte 0x63
          .byte 0x6c
          .byte 0x69
          .byte 0x65
          .byte 0x6e
          .byte 0x74
          .byte 0x20
          .byte 0x68
          .byte 0x65
          .byte 0x6c
          .byte 0x6c
          .byte 0x6f
          .byte 0x2c
          .byte 0x20
.L_45d275:
          .string "cookie"
.L_45d27c:
          .string "cookie verification failed"
.L_45d297:
          .string "cookie verification passed"
.L_45d2b2:
          .string "cookie verification skipped"
.L_45d2ce:
          .string "client hello, ciphersuitelist"
.L_45d2ec:
          .string "client hello, compression"
.L_45d306:
          .string "client hello extensions"
.L_45d31e:
          .string "found renegotiation extension"
.L_45d33c:
          .byte 0x70
          .byte 0x6f
          .byte 0x69
          .byte 0x6e
          .byte 0x74
          .byte 0x20
          .byte 0x66
          .byte 0x6f
          .byte 0x72
          .byte 0x6d
          .byte 0x61
          .byte 0x74
          .byte 0x20
          .byte 0x73
          .byte 0x65
          .byte 0x6c
          .byte 0x65
          .byte 0x63
          .byte 0x74
          .byte 0x65
          .byte 0x64
          .byte 0x3a
          .byte 0x20
.L_45d353:
          .string "%d"
.L_45d356:
          .string "found ecjpake kkpp extension"
.L_45d373:
          .string "skip ecjpake kkpp extension"
.L_45d38f:
          .string "should never happen"
.L_45d3a3:
          .string "trying ciphersuite: %s"
.L_45d3ba:
          .string "ciphersuite mismatch: version"
.L_45d3d8:
          .string "got no ciphersuites in common"
.L_45d3f6:
          .string "<= parse client hello"
.L_45d40c:
          .string "=> write server hello"
.L_45d422:
          .string "<= write server hello"
.L_45d438:
          .string "=> write hello verify request"
.L_45d456:
          .string "inconsistent cookie callbacks"
.L_45d474:
          .string "f_cookie_write"
.L_45d483:
          .string "cookie sent"
.L_45d48f:
          .string "mbedtls_ssl_write_record"
.L_45d4a8:
          .string "<= write hello verify request"
.L_45d4c6:
          .string "no RNG provided"
.L_45d4d6:
          .byte 0x73
          .byte 0x65
          .byte 0x72
          .byte 0x76
          .byte 0x65
          .byte 0x72
          .byte 0x20
          .byte 0x68
          .byte 0x65
          .byte 0x6c
          .byte 0x6c
          .byte 0x6f
          .byte 0x2c
          .byte 0x20
.L_45d4e4:
          .string "random bytes"
.L_45d4f1:
          .string "mbedtls_ssl_derive_keys"
.L_45d509:
          .string "server hello, session id"
.L_45d522:
          .string "%s session has been resumed"
.L_45d53e:
          .string "buffer too small"
.L_45d54f:
          .string "=> write server key exchange"
.L_45d56c:
          .string "<= write server key exchange"
.L_45d589:
          .string "=> write certificate request"
.L_45d5a6:
          .string "=> write server hello done"
.L_45d5c1:
          .string "<= write server hello done"
.L_45d5dc:
          .string "=> parse client key exchange"
.L_45d5f9:
          .string "mbedtls_ssl_read_record"
.L_45d611:
          .string "mbedtls_ecjpake_derive_secret"
.L_45d62f:
          .string "<= parse client key exchange"
.L_45d64c:
          .string "=> parse certificate verify"
.L_45d668:
          .string "handshake: done"
.L_45d678:
          .string "invalid state %d"
.L_45d689:
          .byte 0x73
          .byte 0x65
          .byte 0x6c
          .byte 0x65
          .byte 0x63
          .byte 0x74
          .byte 0x65
          .byte 0x64
          .byte 0x20
          .byte 0x63
          .byte 0x69
          .byte 0x70
          .byte 0x68
          .byte 0x65
          .byte 0x72
          .byte 0x73
          .byte 0x75
          .byte 0x69
          .byte 0x74
          .byte 0x65
          .byte 0x3a
          .byte 0x20
.L_45d69f:
          .string "%s"
          .zero 6
.L_45d6a8:
          .string "repo.patched/library/ssl_srv.c"
          .zero 1
.L_45d6c8:
          .string "client hello v3, message type: %d"
          .zero 6
.L_45d6f0:
          .string "client hello v3, message len.: %d"
          .zero 6
.L_45d718:
          .string "client hello v3, protocol version: [%d:%d]"
          .zero 5
.L_45d748:
          .string "client hello v3, handshake type: %d"
          .zero 4
.L_45d770:
          .string "client hello v3, handshake len.: %d"
          .zero 4
.L_45d798:
          .string "ClientHello fragmentation not supported"
.L_45d7c0:
          .string "client only supports ssl smaller than minimum [%d:%d] < [%d:%d]"
.L_45d800:
          .string "non-zero length renegotiation info"
          .zero 5
.L_45d828:
          .string "found supported elliptic curves extension"
          .zero 6
.L_45d858:
          .string "found supported point formats extension"
.L_45d880:
          .string "mbedtls_ecjpake_read_round_one"
          .zero 1
.L_45d8a0:
          .string "found max fragment length extension"
          .zero 4
.L_45d8c8:
          .string "unknown extension found: %d (ignoring)"
          .zero 1
.L_45d8f0:
          .string "received TLS_EMPTY_RENEGOTIATION_INFO "
          .zero 1
.L_45d918:
          .string "legacy renegotiation, breaking off handshake"
          .zero 3
.L_45d948:
          .string "ciphersuite mismatch: ecjpake not configured or ext missing"
          .zero 4
.L_45d988:
          .string "got ciphersuites in common, but none of them usable"
          .zero 4
.L_45d9c0:
          .string "client hello was not authenticated"
          .zero 5
.L_45d9e8:
          .string "server hello, chosen version: [%d:%d]"
          .zero 2
.L_45da10:
          .string "session successfully restored from cache"
          .zero 7
.L_45da40:
          .string "server hello, session id len.: %d"
          .zero 6
.L_45da68:
          .string "server hello, chosen ciphersuite: %s"
          .zero 3
.L_45da90:
          .string "server hello, compress alg.: 0x%02X"
          .zero 4
.L_45dab8:
          .string "server hello, secure renegotiation extension"
          .zero 3
.L_45dae8:
          .string "server hello, max_fragment_length extension"
          .zero 4
.L_45db18:
          .string "server hello, supported_point_formats extension"
.L_45db48:
          .string "server hello, ecjpake kkpp extension"
          .zero 3
.L_45db70:
          .string "mbedtls_ecjpake_write_round_one"
.L_45db90:
          .string "server hello, total extension length: %d"
          .zero 7
.L_45dbc0:
          .string "mbedtls_ecjpake_write_round_two"
.L_45dbe0:
          .string "<= skip write certificate request"
          .zero 6
.L_45dc08:
          .string "bad client key exchange message"
.L_45dc28:
          .string "mbedtls_ecjpake_read_round_two"
          .zero 1
.L_45dc48:
          .string "<= skip parse certificate verify"
          .zero 3
.L_45dc6c:
          .long .L_444580-.L_45dc6c
          .long .L_444590-.L_45dc6c
          .long .L_4440f8-.L_45dc6c
          .long .L_444798-.L_45dc6c
          .long .L_4447b0-.L_45dc6c
          .long .L_444860-.L_45dc6c
          .long .L_444aa0-.L_45dc6c
          .long .L_444b40-.L_45dc6c
          .long .L_4448d0-.L_45dc6c
          .long .L_4449c8-.L_45dc6c
          .long .L_444a20-.L_45dc6c
          .long .L_444a30-.L_45dc6c
          .long .L_444a40-.L_45dc6c
          .long .L_444a50-.L_45dc6c
          .long .L_444a60-.L_45dc6c
          .long .L_444a90-.L_45dc6c
          .long .L_444b50-.L_45dc6c
          .long .L_444b50-.L_45dc6c
          .long .L_444570-.L_45dc6c
.L_45dcb8:
          .string "client finished"
.L_45dcc8:
          .string "server finished"
.L_45dcd8:
          .string "=> calc  finished tls sha256"
.L_45dcf5:
          .string "finished sha2 state"
.L_45dd09:
          .string "calc finished result"
.L_45dd1e:
          .string "<= calc  finished"
.L_45dd30:
          .string "=> calc verify sha256"
.L_45dd46:
          .string "calculated verify result"
.L_45dd5f:
          .string "<= calc verify"
.L_45dd6e:
          .byte 0x73
          .byte 0x6b
          .byte 0x69
          .byte 0x70
          .byte 0x20
.L_45dd73:
          .string "swap epochs"
.L_45dd7f:
          .string "set_timer to %d ms"
.L_45dd92:
          .string "timer expired"
.L_45dda0:
          .string "=> derive keys"
.L_45ddaf:
          .string "cipher info for %d not found"
.L_45ddcc:
          .byte 0x70
          .byte 0x72
          .byte 0x65
.L_45ddcf:
          .string "master secret"
.L_45dddd:
          .string "prf"
.L_45dde1:
          .string "key expansion"
.L_45ddef:
          .string "ciphersuite = %s"
.L_45de00:
          .string "key block"
.L_45de0a:
          .string "mbedtls_md_setup"
.L_45de1b:
          .string "mbedtls_cipher_setup"
.L_45de30:
          .string "mbedtls_cipher_setkey"
.L_45de46:
          .string "<= derive keys"
.L_45de55:
          .string "=> flush output"
.L_45de65:
          .string "<= flush output"
.L_45de75:
          .string "ssl->f_send"
.L_45de81:
          .string "=> write record"
.L_45de91:
          .string "alloc %d bytes failed"
.L_45dea7:
          .string "ssl_flight_append"
.L_45deb9:
          .string "=> encrypt buf"
.L_45dec8:
          .string "additional data used for AEAD"
.L_45dee6:
          .string "IV used"
.L_45deee:
          .string "mbedtls_cipher_auth_encrypt"
.L_45df0a:
          .string "after encrypt: tag"
.L_45df1d:
          .string "<= encrypt buf"
.L_45df2c:
          .string "ssl_encrypt_buf"
.L_45df3c:
          .string "output record sent to network"
.L_45df5a:
          .string "mbedtls_ssl_flush_output"
.L_45df73:
          .string "<= write record"
.L_45df83:
          .string "=> mbedtls_ssl_resend"
.L_45df99:
          .string "initialise resending"
.L_45dfae:
          .byte 0x3c
          .byte 0x3d
          .byte 0x20
.L_45dfb1:
          .string "mbedtls_ssl_resend"
.L_45dfc4:
          .string "=> fetch input"
.L_45dfd3:
          .string "in_left: %d, nb_want: %d"
.L_45dfec:
          .string "<= fetch input"
.L_45dffb:
          .string "f_recv_timeout: %u ms"
.L_45e011:
          .string "ssl->f_recv(_timeout)"
.L_45e027:
          .byte 0x68
          .byte 0x61
          .byte 0x6e
          .byte 0x64
          .byte 0x73
          .byte 0x68
          .byte 0x61
          .byte 0x6b
          .byte 0x65
          .byte 0x20
.L_45e031:
          .string "timeout"
.L_45e039:
          .string "handshake message too large"
.L_45e055:
          .string "alloc failed (%d bytes)"
.L_45e06d:
          .string "fragment header mismatch"
.L_45e086:
          .string "reassembled handshake message"
.L_45e0a4:
          .string "ssl_reassemble_dtls_handshake"
.L_45e0c2:
          .string "message is not complete yet"
.L_45e0de:
          .string "handshake message completed"
.L_45e0fa:
          .string "is a close notify message"
.L_45e114:
          .string "is a SSLv3 no_cert"
.L_45e127:
          .string "=> send alert message"
.L_45e13d:
          .string "<= send alert message"
.L_45e153:
          .string "remaining content in record"
.L_45e16f:
          .byte 0x69
          .byte 0x6e
          .byte 0x70
          .byte 0x75
          .byte 0x74
          .byte 0x20
.L_45e175:
          .string "record header"
.L_45e183:
          .string "unknown record type"
.L_45e197:
          .string "major version mismatch"
.L_45e1ae:
          .string "minor version mismatch"
.L_45e1c5:
          .string "bad message length"
.L_45e1d8:
          .string "replayed record"
.L_45e1e8:
          .string "input record from network"
.L_45e202:
          .string "=> decrypt buf"
.L_45e211:
          .string "in_msglen (%d) < minlen (%d)"
.L_45e22e:
          .string "TAG used"
.L_45e237:
          .string "mbedtls_cipher_auth_decrypt"
.L_45e253:
          .string "raw buffer after decryption"
.L_45e26f:
          .string "ssl_decrypt_buf"
.L_45e27f:
          .string "<= decrypt buf"
.L_45e28e:
          .string "input payload after decrypt"
.L_45e2aa:
          .string "=> read record"
.L_45e2b9:
          .string "mbedtls_ssl_read_record_layer"
.L_45e2d7:
          .string "<= read record"
.L_45e2e6:
          .string "=> write certificate"
.L_45e2fb:
          .string "<= skip write certificate"
.L_45e315:
          .string "=> parse certificate"
.L_45e32a:
          .string "<= skip parse certificate"
.L_45e344:
          .string "=> write change cipher spec"
.L_45e360:
          .string "<= write change cipher spec"
.L_45e37c:
          .string "=> parse change cipher spec"
.L_45e398:
          .string "DTLS epoch would wrap"
.L_45e3ae:
          .string "<= parse change cipher spec"
.L_45e3ca:
          .string "=> handshake wrapup"
.L_45e3de:
          .string "cache did not store session"
.L_45e3fa:
          .string "<= handshake wrapup"
.L_45e40e:
          .string "=> write finished"
.L_45e420:
          .string "<= write finished"
.L_45e432:
          .string "=> parse finished"
.L_45e444:
          .string "bad finished message"
.L_45e459:
          .string "<= parse finished"
.L_45e46b:
          .string "alloc(%d bytes) failed"
.L_45e482:
          .byte 0x44
.L_45e483:
          .string "TLSv1.0"
.L_45e48b:
          .byte 0x44
.L_45e48c:
          .string "TLSv1.2"
.L_45e494:
          .string "unknown (DTLS)"
.L_45e4a3:
          .string "SSLv3.0"
.L_45e4ab:
          .string "TLSv1.1"
.L_45e4b3:
          .string "unknown"
.L_45e4bb:
          .string "=> handshake"
.L_45e4c8:
          .string "<= handshake"
.L_45e4d5:
          .string "=> read"
.L_45e4dd:
          .string "mbedtls_ssl_handshake"
.L_45e4f3:
          .string "bad application data message"
.L_45e510:
          .string "<= read"
.L_45e518:
          .string "=> write"
.L_45e521:
          .string "<= write"
.L_45e52a:
          .string "=> write close notify"
.L_45e540:
          .string "<= write close notify"
.L_45e556:
          .string "=> free"
.L_45e55e:
          .string "<= free"
          .zero 2
.L_45e568:
          .string "repo.patched/library/ssl_tls.c"
          .zero 1
.L_45e588:
          .string "=> handshake wrapup: final free"
.L_45e5a8:
          .string "<= handshake wrapup: final free"
.L_45e5c8:
          .string "alloc() of ssl sub-contexts failed"
          .zero 5
.L_45e5f0:
          .string "mbedtls_md info for %d not found"
          .zero 7
.L_45e618:
          .string "no premaster (session resumed)"
          .zero 1
.L_45e638:
          .string "keylen: %d, minlen: %d, ivlen: %d, maclen: %d"
          .zero 2
.L_45e668:
          .string "Bad usage of mbedtls_ssl_set_bio() or mbedtls_ssl_set_bio()"
          .zero 4
.L_45e6a8:
          .string "message length: %d, out_left: %d"
          .zero 7
.L_45e6d0:
          .string "outgoing message counter would wrap"
          .zero 4
.L_45e6f8:
          .string "update timeout value to %d millisecs"
          .zero 3
.L_45e720:
          .string "before encrypt: output payload"
          .zero 1
.L_45e740:
          .string "before encrypt: msglen = %d, including %d bytes of padding"
          .zero 5
.L_45e780:
          .string "output record: msgtype = %d, version = [%d:%d], msglen = %d"
          .zero 4
.L_45e7c0:
          .string "resent handshake message header"
.L_45e7e0:
          .string "requesting more data than fits"
          .zero 1
.L_45e800:
          .string "You must use mbedtls_ssl_set_timer_cb() for DTLS"
          .zero 7
.L_45e838:
          .string "next record in same datagram, offset: %d"
          .zero 7
.L_45e868:
          .string "handshake message too short: %d"
.L_45e888:
          .string "handshake message: msglen = %d, type = %d, hslen = %d"
          .zero 2
.L_45e8c0:
          .string "received message from last flight, message_seq = %d, start_of_flight = %d"
          .zero 6
.L_45e910:
          .string "dropping out-of-sequence message: message_seq = %d, expected = %d"
          .zero 6
.L_45e958:
          .string "found fragmented DTLS handshake message"
.L_45e980:
          .string "not supported outside handshake (for now)"
          .zero 6
.L_45e9b0:
          .string "initialize reassembly, total length = %d"
          .zero 7
.L_45e9e0:
          .string "invalid fragment offset/len: %d + %d > %d"
          .zero 6
.L_45ea10:
          .string "invalid fragment length: %d + 12 > %d"
          .zero 2
.L_45ea38:
          .string "adding fragment, offset = %d, length = %d"
          .zero 6
.L_45ea68:
          .string "last fragment not alone in its record"
          .zero 2
.L_45ea90:
          .string "reassembled message too large for buffer"
          .zero 7
.L_45eac0:
          .string "TLS handshake fragmentation not supported"
          .zero 6
.L_45eaf0:
          .string "got an alert message, type: [%d:%d]"
          .zero 4
.L_45eb18:
          .string "is a fatal alert message (msg %d)"
          .zero 6
.L_45eb40:
          .string "send alert level=%u message=%u"
          .zero 1
.L_45eb60:
          .string "input record: msgtype = %d, version = [%d:%d], msglen = %d"
          .zero 5
.L_45eba0:
          .string "dropping unexpected ChangeCipherSpec"
          .zero 3
.L_45ebc8:
          .string "discarding unexpected record (header)"
          .zero 2
.L_45ebf0:
          .string "dropping unexpected ApplicationData"
          .zero 4
.L_45ec18:
          .string "record from another epoch: expected %d, received %d"
          .zero 4
.L_45ec50:
          .string "possible Client Key Exchange retransmission"
          .zero 4
.L_45ec80:
          .string "discarding invalid record (header)"
          .zero 5
.L_45eca8:
          .string "msglen (%d) < explicit_iv_len (%d) + taglen (%d)"
          .zero 7
.L_45ece0:
          .string "received four consecutive empty messages, possible DoS attack"
          .zero 2
.L_45ed20:
          .string "incoming message counter would wrap"
          .zero 4
.L_45ed48:
          .string "discarding invalid record (mac)"
.L_45ed68:
          .string "received retransmit of last flight"
          .zero 5
.L_45ed90:
          .string "<= reuse previously read message"
          .zero 7
.L_45edb8:
          .string "bad change cipher spec message"
          .zero 1
.L_45edd8:
          .string "switching to new transform spec for inbound data"
          .zero 7
.L_45ee10:
          .string "skip freeing handshake and transform"
          .zero 3
.L_45ee38:
          .string "switching to new transform spec for outbound data"
          .zero 6
.L_45ee70:
          .string "ignoring non-fatal non-closure alert"
          .zero 3
.L_45ee98:
          .string "fragment larger than the (negotiated) maximum fragment length: %d > %d"
          .zero 1
.L_45eee0:
          .string "mbedtls_ssl_send_alert_message"
          .zero 1
.L_45ef00:
          .zero 2
.L_45ef02:
          .zero 14
.L_45ef10:
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
.L_45ef24:
          .string "secp256r1"
.L_45ef2e:
          .byte 0x30
          .byte 0x31
          .byte 0x32
          .byte 0x33
          .byte 0x34
          .byte 0x35
          .byte 0x36
          .byte 0x37
          .byte 0x38
          .byte 0x39
          .byte 0x41
          .byte 0x42
          .byte 0x43
          .byte 0x44
          .byte 0x45
          .byte 0x46
          .byte 0x0
.L_45ef3f:
          .string "AES-256-CCM"
.L_45ef4b:
          .string "AES-192-CCM"
.L_45ef57:
          .string "AES-128-CCM"
.L_45ef63:
          .string "AES-256-ECB"
.L_45ef6f:
          .string "AES-192-ECB"
.L_45ef7b:
          .string "AES-128-ECB"
.L_45ef87:
          .string "client"
.L_45ef8e:
          .string "server"
          .zero 11
.L_45efa0:
          .byte 0x51
          .byte 0x25
          .byte 0x63
          .byte 0xfc
          .byte 0xc2
          .byte 0xca
          .byte 0xb9
          .byte 0xf3
          .byte 0x84
          .byte 0x9e
          .byte 0x17
          .byte 0xa7
          .byte 0xad
          .byte 0xfa
          .byte 0xe6
          .byte 0xbc
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
.L_45efc0:
          .byte 0xf5
          .byte 0x51
          .byte 0xbf
          .byte 0x37
          .byte 0x68
          .byte 0x40
          .byte 0xb6
          .byte 0xcb
          .byte 0xce
          .byte 0x5e
          .byte 0x31
          .byte 0x6b
          .byte 0x57
          .byte 0x33
          .byte 0xce
          .byte 0x2b
          .byte 0x16
          .byte 0x9e
          .byte 0xf
          .byte 0x7c
          .byte 0x4a
          .byte 0xeb
          .byte 0xe7
          .byte 0x8e
          .byte 0x9b
          .byte 0x7f
          .byte 0x1a
          .byte 0xfe
          .byte 0xe2
          .byte 0x42
          .byte 0xe3
          .byte 0x4f
.L_45efe0:
          .byte 0x96
          .byte 0xc2
          .byte 0x98
          .byte 0xd8
          .byte 0x45
          .byte 0x39
          .byte 0xa1
          .byte 0xf4
          .byte 0xa0
          .byte 0x33
          .byte 0xeb
          .byte 0x2d
          .byte 0x81
          .byte 0x7d
          .byte 0x3
          .byte 0x77
          .byte 0xf2
          .byte 0x40
          .byte 0xa4
          .byte 0x63
          .byte 0xe5
          .byte 0xe6
          .byte 0xbc
          .byte 0xf8
          .byte 0x47
          .byte 0x42
          .byte 0x2c
          .byte 0xe1
          .byte 0xf2
          .byte 0xd1
          .byte 0x17
          .byte 0x6b
.L_45f000:
          .byte 0x4b
          .byte 0x60
          .byte 0xd2
          .byte 0x27
          .byte 0x3e
          .byte 0x3c
          .byte 0xce
          .byte 0x3b
          .byte 0xf6
          .byte 0xb0
          .byte 0x53
          .byte 0xcc
          .byte 0xb0
          .byte 0x6
          .byte 0x1d
          .byte 0x65
          .byte 0xbc
          .byte 0x86
          .byte 0x98
          .byte 0x76
          .byte 0x55
          .byte 0xbd
          .byte 0xeb
          .byte 0xb3
          .byte 0xe7
          .byte 0x93
          .byte 0x3a
          .byte 0xaa
          .byte 0xd8
          .byte 0x35
          .byte 0xc6
          .byte 0x5a
.L_45f020:
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0xff
          .byte 0xff
          .byte 0xff
.L_45f040:
          .string "TLS-ECJPAKE-WITH-AES-128-CCM-8"
          .zero 1
.L_45f060:
          .byte 0xff
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_45f068:
          .string "client state: %d"
.L_45f079:
          .string "=> write client hello"
.L_45f08f:
          .string "no verify cookie to send"
.L_45f0a8:
          .string "allocation failed"
.L_45f0ba:
          .string "<= write client hello"
.L_45f0d0:
          .string "=> parse server hello"
.L_45f0e6:
          .string "bad server hello message"
.L_45f0ff:
          .string "received hello verify request"
.L_45f11d:
          .string "<= parse server hello"
.L_45f133:
          .string "=> parse hello verify request"
.L_45f151:
          .byte 0x62
          .byte 0x61
          .byte 0x64
          .byte 0x20
.L_45f155:
          .string "server version"
.L_45f164:
          .string "<= parse hello verify request"
.L_45f182:
          .string "server hello, version"
.L_45f198:
          .string "no point format in common"
.L_45f1b2:
          .string "found ecjpake_kkpp extension"
.L_45f1cf:
          .string "=> parse server key exchange"
.L_45f1ec:
          .byte 0x3c
          .byte 0x3d
          .byte 0x20
          .byte 0x70
          .byte 0x61
          .byte 0x72
          .byte 0x73
          .byte 0x65
          .byte 0x20
.L_45f1f5:
          .string "server key exchange"
.L_45f209:
          .string "=> parse certificate request"
.L_45f226:
          .string "=> parse server hello done"
.L_45f241:
          .string "bad server hello done message"
.L_45f25f:
          .string "<= parse server hello done"
.L_45f27a:
          .string "=> write client key exchange"
.L_45f297:
          .string "<= write client key exchange"
.L_45f2b4:
          .string "=> write certificate verify"
.L_45f2d0:
          .string "ssl_generate_random"
          .zero 4
.L_45f2e8:
          .string "repo.patched/library/ssl_cli.c"
          .zero 1
.L_45f308:
          .string "configured max major version is invalid, consider using mbedtls_ssl_config_defaults()"
          .zero 2
.L_45f360:
          .string "client hello, max version: [%d:%d]"
          .zero 5
.L_45f388:
          .string "client hello, session id len.: %d"
          .zero 6
.L_45f3b0:
          .string "client hello, add ciphersuite: %04x"
          .zero 4
.L_45f3d8:
          .string "client hello, got %d ciphersuites"
          .zero 6
.L_45f400:
          .string "client hello, compress len.: %d"
.L_45f420:
          .string "client hello, compress alg.: %d"
.L_45f440:
          .string "client hello, adding supported_elliptic_curves extension"
          .zero 7
.L_45f480:
          .string "invalid curve in ssl configuration"
          .zero 5
.L_45f4a8:
          .string "client hello, adding supported_point_formats extension"
          .zero 1
.L_45f4e0:
          .string "client hello, adding ecjpake_kkpp extension"
          .zero 4
.L_45f510:
          .string "generating new ecjpake parameters"
          .zero 6
.L_45f538:
          .string "re-using cached ecjpake parameters"
          .zero 5
.L_45f560:
          .string "client hello, adding max_fragment_length extension"
          .zero 5
.L_45f598:
          .string "client hello, total extension length: %d"
          .zero 7
.L_45f5c8:
          .string "cookie length does not match incoming message size"
          .zero 5
.L_45f600:
          .string "server version out of bounds -  min: [%d:%d], server: [%d:%d], max: [%d:%d]"
          .zero 4
.L_45f650:
          .string "server hello, current time: %lu"
.L_45f670:
          .string "server hello, bad compression: %d"
          .zero 6
.L_45f698:
          .string "ciphersuite info for %04x not found"
          .zero 4
.L_45f6c0:
          .string "server hello, chosen ciphersuite: %04x"
          .zero 1
.L_45f6e8:
          .string "server hello, compress alg.: %d"
.L_45f708:
          .string "found max_fragment_length extension"
          .zero 4
.L_45f730:
          .string "non-matching max fragment length extension"
          .zero 5
.L_45f760:
          .string "found supported_point_formats extension"
.L_45f788:
          .string "bad server key exchange message"
.L_45f7a8:
          .string "server key exchange message must not be skipped"
.L_45f7d8:
          .string "<= skip parse certificate request"
          .zero 6
.L_45f800:
          .string "<= skip write certificate verify"
          .zero 7
.L_45f828:
          .long .L_455730-.L_45f828
          .long .L_4550d0-.L_45f828
          .long .L_455740-.L_45f828
          .long .L_455bf8-.L_45f828
          .long .L_455ea0-.L_45f828
          .long .L_455f30-.L_45f828
          .long .L_455c10-.L_45f828
          .long .L_455cc0-.L_45f828
          .long .L_455cd0-.L_45f828
          .long .L_455dd8-.L_45f828
          .long .L_455e60-.L_45f828
          .long .L_455e70-.L_45f828
          .long .L_455e80-.L_45f828
          .long .L_455e90-.L_45f828
          .long .L_4556f0-.L_45f828
          .long .L_455720-.L_45f828
#===================================
# end section .rodata
#===================================

#===================================
.section .gcc_except_table ,"a",@progbits
.align 16
#===================================

.L_475e70:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475e8e-.L_475e74
.L_475e74:
          .uleb128 .L_405f6d-.L_405f40
          .uleb128 .L_405f85-.L_405f6d
          .zero 2
          .uleb128 .L_405f99-.L_405f40
          .uleb128 .L_40615a-.L_405f99
          .uleb128 .L_406240-.L_405f40
          .zero 1
          .uleb128 .L_40615d-.L_405f40
          .uleb128 .L_406162-.L_40615d
          .zero 2
          .uleb128 .L_4061b1-.L_405f40
          .uleb128 .L_40620e-.L_4061b1
          .uleb128 .L_406240-.L_405f40
          .zero 1
          .uleb128 .L_40624e-.L_405f40
          .uleb128 .L_406253-.L_40624e
          .zero 2
.L_475e8e:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475eac-.L_475e92
.L_475e92:
          .uleb128 .L_406392-.L_406360
          .uleb128 .L_4063a2-.L_406392
          .zero 2
          .uleb128 .L_4063ba-.L_406360
          .uleb128 .L_4063d9-.L_4063ba
          .uleb128 .L_406753-.L_406360
          .zero 1
          .uleb128 .L_406407-.L_406360
          .uleb128 .L_40640c-.L_406407
          .zero 2
          .uleb128 .L_406455-.L_406360
          .uleb128 .L_40673f-.L_406455
          .uleb128 .L_406753-.L_406360
          .zero 1
          .uleb128 .L_406761-.L_406360
          .uleb128 .L_406766-.L_406761
          .zero 2
.L_475eac:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475ec3-.L_475eb0
.L_475eb0:
          .uleb128 .L_412a18-.L_4129f0
          .uleb128 .L_412a1d-.L_412a18
          .zero 2
          .uleb128 .L_412a28-.L_4129f0
          .uleb128 .L_412a7b-.L_412a28
          .uleb128 .L_412aa5-.L_4129f0
          .zero 1
          .uleb128 .L_412a7e-.L_4129f0
          .uleb128 .L_412a83-.L_412a7e
          .zero 2
          .uleb128 .L_412ab3-.L_4129f0
          .uleb128 .L_412ab8-.L_412ab3
          .zero 2
.L_475ec3:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475ee1-.L_475ec7
.L_475ec7:
          .uleb128 .L_416dc9-.L_416d90
          .uleb128 .L_416dd9-.L_416dc9
          .zero 2
          .uleb128 .L_416df9-.L_416d90
          .uleb128 .L_416fab-.L_416df9
          .uleb128 .L_417067-.L_416d90
          .zero 1
          .uleb128 .L_416fb4-.L_416d90
          .uleb128 .L_416fb9-.L_416fb4
          .zero 2
          .uleb128 .L_416fef-.L_416d90
          .uleb128 .L_41703c-.L_416fef
          .uleb128 .L_417067-.L_416d90
          .zero 1
          .uleb128 .L_417075-.L_416d90
          .uleb128 .L_41707a-.L_417075
          .zero 2
.L_475ee1:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475efc-.L_475ee5
.L_475ee5:
          .uleb128 .L_41a752-.L_41a720
          .uleb128 .L_41a777-.L_41a752
          .zero 2
          .uleb128 .L_41a7b5-.L_41a720
          .uleb128 .L_41ab61-.L_41a7b5
          .uleb128 .L_41ab66-.L_41a720
          .zero 1
          .uleb128 .L_41ab74-.L_41a720
          .uleb128 .L_41ab79-.L_41ab74
          .zero 2
          .uleb128 .L_41ab7c-.L_41a720
          .uleb128 .L_41ad1a-.L_41ab7c
          .uleb128 .L_41ab66-.L_41a720
          .zero 1
.L_475efc:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475f14-.L_475f00
.L_475f00:
          .uleb128 .L_42ce5f-.L_42ce30
          .uleb128 .L_42ce64-.L_42ce5f
          .zero 2
          .uleb128 .L_42ce67-.L_42ce30
          .uleb128 .L_42cf0f-.L_42ce67
          .uleb128 .L_42cf55-.L_42ce30
          .zero 1
          .uleb128 .L_42cf28-.L_42ce30
          .uleb128 .L_42cf2d-.L_42cf28
          .zero 2
          .uleb128 .L_42cf63-.L_42ce30
          .uleb128 .L_42cf68-.L_42cf63
          .zero 2
.L_475f14:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475f2b-.L_475f18
.L_475f18:
          .uleb128 .L_435aa9-.L_435a70
          .uleb128 .L_435aae-.L_435aa9
          .zero 2
          .uleb128 .L_435ab1-.L_435a70
          .uleb128 .L_435af4-.L_435ab1
          .uleb128 .L_435b28-.L_435a70
          .zero 1
          .uleb128 .L_435af7-.L_435a70
          .uleb128 .L_435afc-.L_435af7
          .zero 2
          .uleb128 .L_435b36-.L_435a70
          .uleb128 .L_435b3b-.L_435b36
          .zero 2
.L_475f2b:
          .byte 0xff
          .byte 0xff
          .byte 0x1
          .uleb128 .L_475f41-.L_475f2f
.L_475f2f:
          .uleb128 .L_43773a-.L_437710
          .uleb128 .L_43773f-.L_43773a
          .zero 2
          .uleb128 .L_437742-.L_437710
          .uleb128 .L_437764-.L_437742
          .uleb128 .L_43779d-.L_437710
          .zero 1
          .uleb128 .L_437774-.L_437710
          .uleb128 .L_437779-.L_437774
          .zero 2
          .uleb128 .L_4377ab-.L_437710
          .uleb128 .L_4377b0-.L_4377ab
          .zero 2
.L_475f41:
#===================================
# end section .gcc_except_table
#===================================

#===================================
.section .init_array ,"wa"
.align 8
#===================================

.L_6767b0:
          .quad .L_401120
#===================================
# end section .init_array
#===================================

#===================================
.section .fini_array ,"wa"
.align 8
#===================================

.L_6767b8:
#===================================
# end section .fini_array
#===================================

#===================================
.section .data.rel.ro ,"wa",@progbits
.align 16
#===================================

.L_6767c0:
          .byte 0xff
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0xe0
          .byte 0x67
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x68
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676800:
          .byte 0xff
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x20
          .byte 0x68
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xff
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .quad .L_458ad0
          .zero 8
.L_676840:
          .quad .L_45ace8
          .quad .L_458b54
          .quad .L_458b55
          .quad .L_458b58
          .quad .L_458b56
          .quad .L_458b5c
          .quad .L_458b59
          .quad .L_458b60
          .zero 8
          .quad .L_676d50
.L_676890:
          .quad .L_40edc0
          .quad .L_42b4f0
          .quad .L_42b510
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768b8:
          .quad .L_42d5b0
          .quad .L_42ed00
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x98
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768d8:
          .quad .L_42d5b0
          .quad .L_42ed00
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_6768f8:
          .quad .L_42d5b0
          .quad .L_42ed00
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xb0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676918:
          .quad .L_42fb80
          .quad .L_42fba0
          .zero 24
.L_676940:
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ad6b
          .byte 0x20
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_4408a0
          .quad .L_440880
          .quad .L_440870
          .quad .L_440860
          .quad .L_440820
          .quad .L_440800
          .quad .L_4407f0
          .quad .L_4407e0
          .zero 8
.L_6769a0:
          .byte 0x5
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ad64
          .byte 0x1c
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x40
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_440890
          .quad .L_440880
          .quad .L_440870
          .quad .L_440850
          .quad .L_440820
          .quad .L_440800
          .quad .L_4407f0
          .quad .L_4407e0
          .zero 8
.L_676a00:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x17
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .quad .L_45ef24
          .zero 16
.L_676a20:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676a28:
          .quad .L_676c20
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676be0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676ba0
          .byte 0x2b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676b20
          .byte 0x2c
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676ae0
          .byte 0x2d
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_676aa0
          .zero 32
.L_676aa0:
          .string "-"
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef3f
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676ae0:
          .string ","
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef4b
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676b20:
          .string "+"
          .byte 0x0
          .byte 0x0
          .byte 0x8
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef57
          .byte 0xc
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6b
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_4533e0
          .quad .L_4533e0
          .quad .L_4533b0
          .quad .L_453390
          .zero 16
.L_676ba0:
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef63
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676be0:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef6f
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676c20:
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x80
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45ef7b
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x60
          .byte 0x6c
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_453460
          .quad .L_453450
          .quad .L_453440
          .quad .L_453410
          .quad .L_4533f0
.L_676c90:
          .quad .L_45ef87
          .quad .L_45ef8e
.L_676ca0:
          .byte 0xff
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45f040
          .byte 0x2b
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x6
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0xb
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x2
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad .L_45d17b
          .zero 32
          .quad _ZTVN10__cxxabiv117__class_type_infoE+16
          .quad .L_458aa0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_458ac0
          .byte 0x0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x10
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676d38:
          .quad __cxa_pure_virtual
          .quad __cxa_pure_virtual
          .quad __cxa_pure_virtual
.L_676d50:
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_459a20
          .byte 0x10
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_459bd0
          .byte 0x0
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_459bf0
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_459c00
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .quad _ZTVN10__cxxabiv120__si_class_type_infoE+16
          .quad .L_459c90
          .byte 0x68
          .byte 0x6d
          .byte 0x67
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_676dd0:
          .quad .L_401250
          .quad .L_401260
          .quad .L_401240
_DYNAMIC:
#===================================
# end section .data.rel.ro
#===================================

#===================================
.data
.align 16
#===================================

          .zero 16
.L_677110:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677118:
          .quad __gxx_personality_v0
.L_677120:
          .quad .L_4408c0
.L_677128:
          .quad .L_4408b0
.L_677130:
          .byte 0x3
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x4
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677140:
          .byte 0x2b
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x2c
          .byte 0xc0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677150:
          .byte 0x1
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
          .byte 0x0
.L_677158:
#===================================
# end section .data
#===================================

#===================================
.bss
.align 16
#===================================

.L_677160:
          .zero 32
.L_677180:
          .zero 29792
.L_67e5e0:
          .zero 8
.L_67e5e8:
          .zero 8
.L_67e5f0:
          .zero 8
.L_67e5f8:
          .zero 4
.L_67e5fc:
          .zero 4
.L_67e600:
          .zero 16
.L_67e610:
          .zero 32
#===================================
# end section .bss
#===================================
